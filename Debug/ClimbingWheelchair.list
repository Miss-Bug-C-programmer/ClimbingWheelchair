
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9c4  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800cb78  0800cb78  0001cb78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce40  0800ce40  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce40  0800ce40  0001ce40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce48  0800ce48  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce48  0800ce48  0001ce48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce4c  0800ce4c  0001ce4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800ce50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000059c  200001a0  0800cff0  000201a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000073c  0800cff0  0002073c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ca84  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ee5  00000000  00000000  0003cc54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001538  00000000  00000000  00040b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001368  00000000  00000000  00042078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000272ee  00000000  00000000  000433e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a994  00000000  00000000  0006a6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e217c  00000000  00000000  00085062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001671de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e38  00000000  00000000  00167234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001a0 	.word	0x200001a0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cb5c 	.word	0x0800cb5c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001a4 	.word	0x200001a4
 80001ec:	0800cb5c 	.word	0x0800cb5c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <pid_create>:
	Author e-mail: ruben at geekfactory dot mx
 */
#include "PID.h"

PID_t pid_create(PID_t pid, float* in, float* out, float* set, float kp, float ki, float kd)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	61f8      	str	r0, [r7, #28]
 8000ef8:	61b9      	str	r1, [r7, #24]
 8000efa:	617a      	str	r2, [r7, #20]
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f02:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f06:	ed87 1a01 	vstr	s2, [r7, #4]
	pid->input = in;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	601a      	str	r2, [r3, #0]
	pid->output = out;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	605a      	str	r2, [r3, #4]
	pid->setpoint = set;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	609a      	str	r2, [r3, #8]
	pid->automode = false;
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	pid_limits(pid, 0, 255);
 8000f24:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000f6c <pid_create+0x7c>
 8000f28:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000f70 <pid_create+0x80>
 8000f2c:	69f8      	ldr	r0, [r7, #28]
 8000f2e:	f000 f96b 	bl	8001208 <pid_limits>

	// Set default sample time to 100 ms
	pid->sampletime = 100 * (FREQUENCY / 1000);
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	2264      	movs	r2, #100	; 0x64
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c

	pid_direction(pid, E_PID_DIRECT);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	69f8      	ldr	r0, [r7, #28]
 8000f3c:	f000 fa06 	bl	800134c <pid_direction>
	PID_tune(pid, kp, ki, kd);
 8000f40:	ed97 1a01 	vldr	s2, [r7, #4]
 8000f44:	edd7 0a02 	vldr	s1, [r7, #8]
 8000f48:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f4c:	69f8      	ldr	r0, [r7, #28]
 8000f4e:	f000 f8b9 	bl	80010c4 <PID_tune>

	pid->lasttime = HAL_GetTick() - pid->sampletime;
 8000f52:	f003 fe65 	bl	8004c20 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5c:	1ad2      	subs	r2, r2, r3
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28

	return pid;
 8000f62:	69fb      	ldr	r3, [r7, #28]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	437f0000 	.word	0x437f0000
 8000f70:	00000000 	.word	0x00000000

08000f74 <pid_need_compute>:

bool pid_need_compute(PID_t pid)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	// Check if the PID period has elapsed
	return(HAL_GetTick() - pid->lasttime >= pid->sampletime) ? true : false;
 8000f7c:	f003 fe50 	bl	8004c20 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f86:	1ad2      	subs	r2, r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	bf2c      	ite	cs
 8000f90:	2301      	movcs	r3, #1
 8000f92:	2300      	movcc	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <pid_compute>:
void pid_compute(PID_t pid)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
	// Check if control is enabled
	if (!pid->automode)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 8084 	beq.w	80010ba <pid_compute+0x11c>
		return ;
	
	float in = *(pid->input);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	613b      	str	r3, [r7, #16]
	// Compute error
	float error = (*(pid->setpoint)) - in;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	ed93 7a00 	vldr	s14, [r3]
 8000fc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fca:	edc7 7a03 	vstr	s15, [r7, #12]
	// Compute integral
	pid->iterm += (pid->Ki * error);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	ed93 7a08 	vldr	s14, [r3, #32]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edd3 6a04 	vldr	s13, [r3, #16]
 8000fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	edc3 7a08 	vstr	s15, [r3, #32]
	if (pid->iterm > pid->omax)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	ed93 7a08 	vldr	s14, [r3, #32]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001000:	dd04      	ble.n	800100c <pid_compute+0x6e>
		pid->iterm = pid->omax;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69da      	ldr	r2, [r3, #28]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	621a      	str	r2, [r3, #32]
 800100a:	e00e      	b.n	800102a <pid_compute+0x8c>
	else if (pid->iterm < pid->omin)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	edd3 7a06 	vldr	s15, [r3, #24]
 8001018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	d503      	bpl.n	800102a <pid_compute+0x8c>
		pid->iterm = pid->omin;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	699a      	ldr	r2, [r3, #24]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	621a      	str	r2, [r3, #32]
	// Compute differential on input
	float dinput = in - pid->lastin;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001030:	ed97 7a04 	vldr	s14, [r7, #16]
 8001034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001038:	edc7 7a02 	vstr	s15, [r7, #8]
	// Compute PID output
	float out = pid->Kp * error + pid->iterm - pid->Kd * dinput;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001042:	edd7 7a03 	vldr	s15, [r7, #12]
 8001046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	edd3 6a05 	vldr	s13, [r3, #20]
 800105a:	edd7 7a02 	vldr	s15, [r7, #8]
 800105e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001066:	edc7 7a05 	vstr	s15, [r7, #20]
	// Apply limit to output value
	if (out > pid->omax)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001070:	ed97 7a05 	vldr	s14, [r7, #20]
 8001074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107c:	dd03      	ble.n	8001086 <pid_compute+0xe8>
		out = pid->omax;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e00c      	b.n	80010a0 <pid_compute+0x102>
	else if (out < pid->omin)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	edd3 7a06 	vldr	s15, [r3, #24]
 800108c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	d502      	bpl.n	80010a0 <pid_compute+0x102>
		out = pid->omin;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	617b      	str	r3, [r7, #20]
	// Output to pointed variable
	(*pid->output) = out;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	601a      	str	r2, [r3, #0]
	// Keep track of some variables for next execution
	pid->lastin = in;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
	pid->lasttime = HAL_GetTick();
 80010ae:	f003 fdb7 	bl	8004c20 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
 80010b8:	e000      	b.n	80010bc <pid_compute+0x11e>
		return ;
 80010ba:	bf00      	nop
}
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <PID_tune>:

void PID_tune(PID_t pid, float kp, float ki, float kd)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80010d0:	edc7 0a01 	vstr	s1, [r7, #4]
 80010d4:	ed87 1a00 	vstr	s2, [r7]
	// Check for validity
	if (kp < 0 || ki < 0 || kd < 0)
 80010d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80010dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	d452      	bmi.n	800118c <PID_tune+0xc8>
 80010e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f2:	d44b      	bmi.n	800118c <PID_tune+0xc8>
 80010f4:	edd7 7a00 	vldr	s15, [r7]
 80010f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001100:	d444      	bmi.n	800118c <PID_tune+0xc8>
		return;
	
	//Compute sample time in seconds
	float ssec = ((float) pid->sampletime) / ((float) FREQUENCY);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800110e:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001198 <PID_tune+0xd4>
 8001112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001116:	edc7 7a05 	vstr	s15, [r7, #20]

	pid->Kp = kp;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	60da      	str	r2, [r3, #12]
	pid->Ki = ki * ssec;
 8001120:	ed97 7a01 	vldr	s14, [r7, #4]
 8001124:	edd7 7a05 	vldr	s15, [r7, #20]
 8001128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->Kd = kd / ssec;
 8001132:	edd7 6a00 	vldr	s13, [r7]
 8001136:	ed97 7a05 	vldr	s14, [r7, #20]
 800113a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	edc3 7a05 	vstr	s15, [r3, #20]

	if (pid->direction == E_PID_REVERSE) {
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800114a:	2b01      	cmp	r3, #1
 800114c:	d11f      	bne.n	800118e <PID_tune+0xca>
		pid->Kp = 0 - pid->Kp;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	edd3 7a03 	vldr	s15, [r3, #12]
 8001154:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800119c <PID_tune+0xd8>
 8001158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = 0 - pid->Ki;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	edd3 7a04 	vldr	s15, [r3, #16]
 8001168:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800119c <PID_tune+0xd8>
 800116c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = 0 - pid->Kd;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	edd3 7a05 	vldr	s15, [r3, #20]
 800117c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800119c <PID_tune+0xd8>
 8001180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	edc3 7a05 	vstr	s15, [r3, #20]
 800118a:	e000      	b.n	800118e <PID_tune+0xca>
		return;
 800118c:	bf00      	nop
	}
}
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	447a0000 	.word	0x447a0000
 800119c:	00000000 	.word	0x00000000

080011a0 <pid_sample>:

void pid_sample(PID_t pid, uint32_t time)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	if (time > 0) {
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d025      	beq.n	80011fc <pid_sample+0x5c>
		float ratio = (float) (time * (FREQUENCY / 1000)) / (float) pid->sampletime;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	ee07 3a90 	vmov	s15, r3
 80011c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ca:	edc7 7a03 	vstr	s15, [r7, #12]
		pid->Ki *= ratio;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80011d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd /= ratio;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edd3 6a05 	vldr	s13, [r3, #20]
 80011e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80011ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edc3 7a05 	vstr	s15, [r3, #20]
		pid->sampletime = time * (FREQUENCY / 1000);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <pid_limits>:

void pid_limits(PID_t pid, float min, float max)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	ed87 0a02 	vstr	s0, [r7, #8]
 8001214:	edc7 0a01 	vstr	s1, [r7, #4]
	if (min >= max) return;
 8001218:	ed97 7a02 	vldr	s14, [r7, #8]
 800121c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001228:	da4d      	bge.n	80012c6 <pid_limits+0xbe>
	pid->omin = min;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	619a      	str	r2, [r3, #24]
	pid->omax = max;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	61da      	str	r2, [r3, #28]
	//Adjust output to new limits
	if (pid->automode) {
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800123c:	2b00      	cmp	r3, #0
 800123e:	d043      	beq.n	80012c8 <pid_limits+0xc0>
		if (*(pid->output) > pid->omax)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	ed93 7a00 	vldr	s14, [r3]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	edd3 7a07 	vldr	s15, [r3, #28]
 800124e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	dd05      	ble.n	8001264 <pid_limits+0x5c>
			*(pid->output) = pid->omax;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	69d2      	ldr	r2, [r2, #28]
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e010      	b.n	8001286 <pid_limits+0x7e>
		else if (*(pid->output) < pid->omin)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	ed93 7a00 	vldr	s14, [r3]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	d504      	bpl.n	8001286 <pid_limits+0x7e>
			*(pid->output) = pid->omin;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	6992      	ldr	r2, [r2, #24]
 8001284:	601a      	str	r2, [r3, #0]

		if (pid->iterm > pid->omax)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	ed93 7a08 	vldr	s14, [r3, #32]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	dd04      	ble.n	80012a6 <pid_limits+0x9e>
			pid->iterm = pid->omax;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	69da      	ldr	r2, [r3, #28]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	621a      	str	r2, [r3, #32]
 80012a4:	e010      	b.n	80012c8 <pid_limits+0xc0>
		else if (pid->iterm < pid->omin)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	ed93 7a08 	vldr	s14, [r3, #32]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80012b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	d505      	bpl.n	80012c8 <pid_limits+0xc0>
			pid->iterm = pid->omin;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	699a      	ldr	r2, [r3, #24]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	621a      	str	r2, [r3, #32]
 80012c4:	e000      	b.n	80012c8 <pid_limits+0xc0>
	if (min >= max) return;
 80012c6:	bf00      	nop
	}
}
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <pid_auto>:

void pid_auto(PID_t pid)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
	// If going from manual to auto
	if (!pid->automode) {
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d12c      	bne.n	800133e <pid_auto+0x6c>
		pid->iterm = *(pid->output);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	621a      	str	r2, [r3, #32]
		pid->lastin = *(pid->input);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
		if (pid->iterm > pid->omax)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	ed93 7a08 	vldr	s14, [r3, #32]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edd3 7a07 	vldr	s15, [r3, #28]
 8001304:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130c:	dd04      	ble.n	8001318 <pid_auto+0x46>
			pid->iterm = pid->omax;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69da      	ldr	r2, [r3, #28]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	621a      	str	r2, [r3, #32]
 8001316:	e00e      	b.n	8001336 <pid_auto+0x64>
		else if (pid->iterm < pid->omin)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	ed93 7a08 	vldr	s14, [r3, #32]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	edd3 7a06 	vldr	s15, [r3, #24]
 8001324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132c:	d503      	bpl.n	8001336 <pid_auto+0x64>
			pid->iterm = pid->omin;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699a      	ldr	r2, [r3, #24]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	621a      	str	r2, [r3, #32]
		pid->automode = true;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <pid_direction>:
{
	pid->automode = false;
}

void pid_direction(PID_t pid, enum pid_control_directions dir)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
	if (pid->automode && pid->direction != dir) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800135e:	2b00      	cmp	r3, #0
 8001360:	d023      	beq.n	80013aa <pid_direction+0x5e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001368:	78fa      	ldrb	r2, [r7, #3]
 800136a:	429a      	cmp	r2, r3
 800136c:	d01d      	beq.n	80013aa <pid_direction+0x5e>
		pid->Kp = (0 - pid->Kp);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	edd3 7a03 	vldr	s15, [r3, #12]
 8001374:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80013c0 <pid_direction+0x74>
 8001378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = (0 - pid->Ki);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	edd3 7a04 	vldr	s15, [r3, #16]
 8001388:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80013c0 <pid_direction+0x74>
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = (0 - pid->Kd);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	edd3 7a05 	vldr	s15, [r3, #20]
 800139c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013c0 <pid_direction+0x74>
 80013a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	pid->direction = dir;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	78fa      	ldrb	r2, [r7, #3]
 80013ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	00000000 	.word	0x00000000

080013c4 <pid_reset>:

void pid_reset(PID_t pid){
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	pid->iterm = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <hubMotor_Init>:
#include "X2_6010S.h"
extern uint8_t receive_buf[15];



void hubMotor_Init(){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HubM_IO_SON_GPIO_Port, HubM_IO_SON_Pin, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ea:	4808      	ldr	r0, [pc, #32]	; (800140c <hubMotor_Init+0x2c>)
 80013ec:	f005 f92e 	bl	800664c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_NOT_GPIO_Port, HubM_IO_NOT_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <hubMotor_Init+0x2c>)
 80013f8:	f005 f928 	bl	800664c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_POT_GPIO_Port, HubM_IO_POT_Pin, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001402:	4802      	ldr	r0, [pc, #8]	; (800140c <hubMotor_Init+0x2c>)
 8001404:	f005 f922 	bl	800664c <HAL_GPIO_WritePin>
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40020c00 	.word	0x40020c00

08001410 <send_HubMotor>:

void send_HubMotor(float m1_ang_speed, float m2_ang_speed){
 8001410:	b580      	push	{r7, lr}
 8001412:	b08c      	sub	sp, #48	; 0x30
 8001414:	af00      	add	r7, sp, #0
 8001416:	ed87 0a01 	vstr	s0, [r7, #4]
 800141a:	edc7 0a00 	vstr	s1, [r7]
	int16_t motor1_speed, motor2_speed;
	//convert velocity into pulse/second
	motor1_speed = -(int16_t)(m1_ang_speed * 4096.0 / (2 * M_PI));
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff f84a 	bl	80004b8 <__aeabi_f2d>
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	4b63      	ldr	r3, [pc, #396]	; (80015b8 <send_HubMotor+0x1a8>)
 800142a:	f7ff f89d 	bl	8000568 <__aeabi_dmul>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	a35e      	add	r3, pc, #376	; (adr r3, 80015b0 <send_HubMotor+0x1a0>)
 8001438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143c:	f7ff f9be 	bl	80007bc <__aeabi_ddiv>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	f7ff fb3e 	bl	8000ac8 <__aeabi_d2iz>
 800144c:	4603      	mov	r3, r0
 800144e:	b21b      	sxth	r3, r3
 8001450:	b29b      	uxth	r3, r3
 8001452:	425b      	negs	r3, r3
 8001454:	b29b      	uxth	r3, r3
 8001456:	85fb      	strh	r3, [r7, #46]	; 0x2e
	motor2_speed = (int16_t)(m2_ang_speed * 4096.0/ (2 * M_PI));
 8001458:	6838      	ldr	r0, [r7, #0]
 800145a:	f7ff f82d 	bl	80004b8 <__aeabi_f2d>
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	4b55      	ldr	r3, [pc, #340]	; (80015b8 <send_HubMotor+0x1a8>)
 8001464:	f7ff f880 	bl	8000568 <__aeabi_dmul>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	a34f      	add	r3, pc, #316	; (adr r3, 80015b0 <send_HubMotor+0x1a0>)
 8001472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001476:	f7ff f9a1 	bl	80007bc <__aeabi_ddiv>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	f7ff fb21 	bl	8000ac8 <__aeabi_d2iz>
 8001486:	4603      	mov	r3, r0
 8001488:	85bb      	strh	r3, [r7, #44]	; 0x2c
//	motor1_speed = -(int16_t)(m1_speed);
//	motor2_speed = (int16_t)(m2_speed);

	uint8_t send_buf[15];
	send_buf[0] = 0xAA;
 800148a:	23aa      	movs	r3, #170	; 0xaa
 800148c:	733b      	strb	r3, [r7, #12]
	send_buf[1] = 0xA4;
 800148e:	23a4      	movs	r3, #164	; 0xa4
 8001490:	737b      	strb	r3, [r7, #13]
	send_buf[2] = 0x0E;
 8001492:	230e      	movs	r3, #14
 8001494:	73bb      	strb	r3, [r7, #14]
	send_buf[3] = 0x00;
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]
	send_buf[4] = MOTOR_ENABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	743b      	strb	r3, [r7, #16]
	send_buf[5] = MOTOR_ENCODER_FEEDBACK;
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	747b      	strb	r3, [r7, #17]

	//Set acceleration to constant by default
	//time taken from 0 to 1000rpm
	uint16_t acceleration = 200;
 80014a2:	23c8      	movs	r3, #200	; 0xc8
 80014a4:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t msb_acce = (uint8_t)((acceleration & 0xFF00) >> 8);
 80014a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t lsb_acce = (uint8_t)(acceleration & 0x00FF);
 80014b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014b2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	send_buf[6] = lsb_acce;
 80014b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014ba:	74bb      	strb	r3, [r7, #18]
	send_buf[7] = msb_acce;
 80014bc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80014c0:	74fb      	strb	r3, [r7, #19]

	//Set maximum torque
	//Value: 0 - 450 (300 by default)
	uint16_t max_torque = 350;
 80014c2:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80014c6:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t msb_max_torque = (uint8_t)((max_torque & 0xFF00) >> 8);
 80014c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014ca:	0a1b      	lsrs	r3, r3, #8
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t lsb_max_torque = (uint8_t)(max_torque & 0x00FF);
 80014d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	send_buf[8] = lsb_max_torque;
 80014d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014dc:	753b      	strb	r3, [r7, #20]
	send_buf[9] = msb_max_torque;
 80014de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014e2:	757b      	strb	r3, [r7, #21]

	//Set motor1 speed
	uint8_t msb_motor1_speed = (uint8_t)((motor1_speed & 0xFF00) >> 8);
 80014e4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80014e8:	121b      	asrs	r3, r3, #8
 80014ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t lsb_motor1_speed = (uint8_t)(motor1_speed & 0x00FF);
 80014ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	send_buf[10] = lsb_motor1_speed;
 80014f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80014f8:	75bb      	strb	r3, [r7, #22]
	send_buf[11] = msb_motor1_speed;
 80014fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014fe:	75fb      	strb	r3, [r7, #23]

	//Set motor2 speed
	uint8_t msb_motor2_speed = (uint8_t)((motor2_speed & 0xFF00) >> 8);
 8001500:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001504:	121b      	asrs	r3, r3, #8
 8001506:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t lsb_motor2_speed = (uint8_t)(motor2_speed & 0x00FF);
 800150a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800150c:	f887 3020 	strb.w	r3, [r7, #32]
	send_buf[12] = lsb_motor2_speed;
 8001510:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001514:	763b      	strb	r3, [r7, #24]
	send_buf[13] = msb_motor2_speed;
 8001516:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800151a:	767b      	strb	r3, [r7, #25]

	//checksum byte
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 800151c:	7b3b      	ldrb	r3, [r7, #12]
 800151e:	b29a      	uxth	r2, r3
 8001520:	7b7b      	ldrb	r3, [r7, #13]
 8001522:	b29b      	uxth	r3, r3
 8001524:	4413      	add	r3, r2
 8001526:	b29a      	uxth	r2, r3
 8001528:	7bbb      	ldrb	r3, [r7, #14]
 800152a:	b29b      	uxth	r3, r3
 800152c:	4413      	add	r3, r2
 800152e:	b29a      	uxth	r2, r3
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	b29b      	uxth	r3, r3
 8001534:	4413      	add	r3, r2
 8001536:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[4] + (uint16_t)send_buf[5] + (uint16_t)send_buf[6]
 8001538:	7c3b      	ldrb	r3, [r7, #16]
 800153a:	b29b      	uxth	r3, r3
 800153c:	4413      	add	r3, r2
 800153e:	b29a      	uxth	r2, r3
 8001540:	7c7b      	ldrb	r3, [r7, #17]
 8001542:	b29b      	uxth	r3, r3
 8001544:	4413      	add	r3, r2
 8001546:	b29a      	uxth	r2, r3
 8001548:	7cbb      	ldrb	r3, [r7, #18]
 800154a:	b29b      	uxth	r3, r3
 800154c:	4413      	add	r3, r2
 800154e:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[7] + (uint16_t)send_buf[8] + (uint16_t)send_buf[9]
 8001550:	7cfb      	ldrb	r3, [r7, #19]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4413      	add	r3, r2
 8001556:	b29a      	uxth	r2, r3
 8001558:	7d3b      	ldrb	r3, [r7, #20]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b29a      	uxth	r2, r3
 8001560:	7d7b      	ldrb	r3, [r7, #21]
 8001562:	b29b      	uxth	r3, r3
 8001564:	4413      	add	r3, r2
 8001566:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[10] + (uint16_t)send_buf[11] + (uint16_t)send_buf[12]
 8001568:	7dbb      	ldrb	r3, [r7, #22]
 800156a:	b29b      	uxth	r3, r3
 800156c:	4413      	add	r3, r2
 800156e:	b29a      	uxth	r2, r3
 8001570:	7dfb      	ldrb	r3, [r7, #23]
 8001572:	b29b      	uxth	r3, r3
 8001574:	4413      	add	r3, r2
 8001576:	b29a      	uxth	r2, r3
 8001578:	7e3b      	ldrb	r3, [r7, #24]
 800157a:	b29b      	uxth	r3, r3
 800157c:	4413      	add	r3, r2
 800157e:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[13];
 8001580:	7e7b      	ldrb	r3, [r7, #25]
 8001582:	b29b      	uxth	r3, r3
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 8001584:	4413      	add	r3, r2
 8001586:	83fb      	strh	r3, [r7, #30]

	send_buf[14] = (uint8_t)(sum & 0x00FF);
 8001588:	8bfb      	ldrh	r3, [r7, #30]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	76bb      	strb	r3, [r7, #26]

	HAL_UART_Transmit(&huart3, send_buf, 15,10);
 800158e:	f107 010c 	add.w	r1, r7, #12
 8001592:	230a      	movs	r3, #10
 8001594:	220f      	movs	r2, #15
 8001596:	4809      	ldr	r0, [pc, #36]	; (80015bc <send_HubMotor+0x1ac>)
 8001598:	f007 fddf 	bl	800915a <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart3, receive_buf, 15);
 800159c:	220f      	movs	r2, #15
 800159e:	4908      	ldr	r1, [pc, #32]	; (80015c0 <send_HubMotor+0x1b0>)
 80015a0:	4806      	ldr	r0, [pc, #24]	; (80015bc <send_HubMotor+0x1ac>)
 80015a2:	f007 fe73 	bl	800928c <HAL_UART_Receive_DMA>
}
 80015a6:	bf00      	nop
 80015a8:	3730      	adds	r7, #48	; 0x30
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	54442d18 	.word	0x54442d18
 80015b4:	401921fb 	.word	0x401921fb
 80015b8:	40b00000 	.word	0x40b00000
 80015bc:	20000684 	.word	0x20000684
 80015c0:	2000050c 	.word	0x2000050c

080015c4 <ADC_Init>:
SPI_HandleTypeDef hspi1;

//ADCHandle         hADC;

void ADC_Init()
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0

	//Delay for SPI encoder to startup
//	HAL_Delay(100);

	/*Reset AD7606*/
	AD7606_CS_HIGH;
 80015c8:	2201      	movs	r2, #1
 80015ca:	2110      	movs	r1, #16
 80015cc:	481c      	ldr	r0, [pc, #112]	; (8001640 <ADC_Init+0x7c>)
 80015ce:	f005 f83d 	bl	800664c <HAL_GPIO_WritePin>
	AD7606_CV_LOW;
 80015d2:	2200      	movs	r2, #0
 80015d4:	2120      	movs	r1, #32
 80015d6:	481b      	ldr	r0, [pc, #108]	; (8001644 <ADC_Init+0x80>)
 80015d8:	f005 f838 	bl	800664c <HAL_GPIO_WritePin>

	AD7606_RST_LOW;
 80015dc:	2200      	movs	r2, #0
 80015de:	2110      	movs	r1, #16
 80015e0:	4818      	ldr	r0, [pc, #96]	; (8001644 <ADC_Init+0x80>)
 80015e2:	f005 f833 	bl	800664c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015e6:	2001      	movs	r0, #1
 80015e8:	f003 fb26 	bl	8004c38 <HAL_Delay>
	AD7606_RST_HIGH;
 80015ec:	2201      	movs	r2, #1
 80015ee:	2110      	movs	r1, #16
 80015f0:	4814      	ldr	r0, [pc, #80]	; (8001644 <ADC_Init+0x80>)
 80015f2:	f005 f82b 	bl	800664c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015f6:	2001      	movs	r0, #1
 80015f8:	f003 fb1e 	bl	8004c38 <HAL_Delay>
	AD7606_RST_LOW;
 80015fc:	2200      	movs	r2, #0
 80015fe:	2110      	movs	r1, #16
 8001600:	4810      	ldr	r0, [pc, #64]	; (8001644 <ADC_Init+0x80>)
 8001602:	f005 f823 	bl	800664c <HAL_GPIO_WritePin>

	/*Set analog input range*/
	AD7606_RANGE_LOW_5V;
 8001606:	2200      	movs	r2, #0
 8001608:	2101      	movs	r1, #1
 800160a:	480e      	ldr	r0, [pc, #56]	; (8001644 <ADC_Init+0x80>)
 800160c:	f005 f81e 	bl	800664c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001610:	2001      	movs	r0, #1
 8001612:	f003 fb11 	bl	8004c38 <HAL_Delay>

	/*Set oversampling ratio to 32*/
	HAL_GPIO_WritePin(AD7606_OS2_PIN_Port, AD7606_OS2_PIN, GPIO_PIN_SET);
 8001616:	2201      	movs	r2, #1
 8001618:	2102      	movs	r1, #2
 800161a:	480a      	ldr	r0, [pc, #40]	; (8001644 <ADC_Init+0x80>)
 800161c:	f005 f816 	bl	800664c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS1_PIN_Port, AD7606_OS1_PIN, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	2104      	movs	r1, #4
 8001624:	4807      	ldr	r0, [pc, #28]	; (8001644 <ADC_Init+0x80>)
 8001626:	f005 f811 	bl	800664c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS0_PIN_Port, AD7606_OS0_PIN, GPIO_PIN_SET);
 800162a:	2201      	movs	r2, #1
 800162c:	2108      	movs	r1, #8
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <ADC_Init+0x80>)
 8001630:	f005 f80c 	bl	800664c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001634:	2001      	movs	r0, #1
 8001636:	f003 faff 	bl	8004c38 <HAL_Delay>

//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
//	HAL_Delay(500);
//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40020000 	.word	0x40020000
 8001644:	40020800 	.word	0x40020800

08001648 <ADC_DataRequest>:

void ADC_DataRequest(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	AD7606_CV_LOW;
 800164c:	2200      	movs	r2, #0
 800164e:	2120      	movs	r1, #32
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <ADC_DataRequest+0x1c>)
 8001652:	f004 fffb 	bl	800664c <HAL_GPIO_WritePin>
	AD7606_CV_HIGH;
 8001656:	2201      	movs	r2, #1
 8001658:	2120      	movs	r1, #32
 800165a:	4802      	ldr	r0, [pc, #8]	; (8001664 <ADC_DataRequest+0x1c>)
 800165c:	f004 fff6 	bl	800664c <HAL_GPIO_WritePin>
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40020800 	.word	0x40020800

08001668 <ADC_Read>:


void ADC_Read(int16_t *data)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 8001670:	2200      	movs	r2, #0
 8001672:	2110      	movs	r1, #16
 8001674:	4808      	ldr	r0, [pc, #32]	; (8001698 <ADC_Read+0x30>)
 8001676:	f004 ffe9 	bl	800664c <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 800167a:	2302      	movs	r3, #2
 800167c:	2208      	movs	r2, #8
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	4806      	ldr	r0, [pc, #24]	; (800169c <ADC_Read+0x34>)
 8001682:	f005 fef3 	bl	800746c <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 8001686:	2201      	movs	r2, #1
 8001688:	2110      	movs	r1, #16
 800168a:	4803      	ldr	r0, [pc, #12]	; (8001698 <ADC_Read+0x30>)
 800168c:	f004 ffde 	bl	800664c <HAL_GPIO_WritePin>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40020000 	.word	0x40020000
 800169c:	20000274 	.word	0x20000274

080016a0 <bd25l_Init>:
	.DIR_pin	= ClimbM_IO_FR2_Pin,
	.pole		= 4,
	.ID		= 2,
};

void bd25l_Init(Motor_TypeDef* motor){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	enableMotor(motor, 0);
 80016a8:	2100      	movs	r1, #0
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 f808 	bl	80016c0 <enableMotor>
	brakeMotor(motor, 0);
 80016b0:	2100      	movs	r1, #0
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f828 	bl	8001708 <brakeMotor>
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <enableMotor>:
	brakeMotor(motor, 1);
	enableMotor(motor, 0);

}

void enableMotor(Motor_TypeDef* motor, uint8_t state){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->EN_port, motor->EN_pin, state);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d4:	78fa      	ldrb	r2, [r7, #3]
 80016d6:	4619      	mov	r1, r3
 80016d8:	f004 ffb8 	bl	800664c <HAL_GPIO_WritePin>
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <emBrakeMotor>:

void emBrakeMotor(uint8_t state){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Brake_Wheel_GPIO_Port, Brake_Wheel_Pin, state);
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	461a      	mov	r2, r3
 80016f2:	2108      	movs	r1, #8
 80016f4:	4803      	ldr	r0, [pc, #12]	; (8001704 <emBrakeMotor+0x20>)
 80016f6:	f004 ffa9 	bl	800664c <HAL_GPIO_WritePin>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40020c00 	.word	0x40020c00

08001708 <brakeMotor>:

void brakeMotor(Motor_TypeDef* motor, uint8_t state){
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->BRK_port, motor->BRK_pin, state);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69d8      	ldr	r0, [r3, #28]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	8c1b      	ldrh	r3, [r3, #32]
 800171c:	78fa      	ldrb	r2, [r7, #3]
 800171e:	4619      	mov	r1, r3
 8001720:	f004 ff94 	bl	800664c <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(motor->outputPWM, motor->PWM_channel);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	695a      	ldr	r2, [r3, #20]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	8b1b      	ldrh	r3, [r3, #24]
 800172c:	4619      	mov	r1, r3
 800172e:	4610      	mov	r0, r2
 8001730:	f006 fb1a 	bl	8007d68 <HAL_TIM_PWM_Stop>
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <setMotorDir>:

void setMotorDir(Motor_TypeDef* motor, uint8_t dir){
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin, dir);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001750:	78fa      	ldrb	r2, [r7, #3]
 8001752:	4619      	mov	r1, r3
 8001754:	f004 ff7a 	bl	800664c <HAL_GPIO_WritePin>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <setMotorSpeed>:

void setMotorSpeed(Motor_TypeDef* motor, float speed){
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	ed87 0a00 	vstr	s0, [r7]

	float frequency = 0;
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
	uint16_t period;
	uint32_t duty_cycle; //50%

	if (speed > 100) speed = 100.0;
 8001772:	edd7 7a00 	vldr	s15, [r7]
 8001776:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80018a8 <setMotorSpeed+0x148>
 800177a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800177e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001782:	dd01      	ble.n	8001788 <setMotorSpeed+0x28>
 8001784:	4b49      	ldr	r3, [pc, #292]	; (80018ac <setMotorSpeed+0x14c>)
 8001786:	603b      	str	r3, [r7, #0]
	//Frequency equation derived from data sheet
	frequency = (uint16_t)((speed - 0.2597)/0.02494);
 8001788:	6838      	ldr	r0, [r7, #0]
 800178a:	f7fe fe95 	bl	80004b8 <__aeabi_f2d>
 800178e:	a340      	add	r3, pc, #256	; (adr r3, 8001890 <setMotorSpeed+0x130>)
 8001790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001794:	f7fe fd30 	bl	80001f8 <__aeabi_dsub>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	a33d      	add	r3, pc, #244	; (adr r3, 8001898 <setMotorSpeed+0x138>)
 80017a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a6:	f7ff f809 	bl	80007bc <__aeabi_ddiv>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f7ff f9b1 	bl	8000b18 <__aeabi_d2uiz>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	ee07 3a90 	vmov	s15, r3
 80017be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017c2:	edc7 7a05 	vstr	s15, [r7, #20]
	period = (int)(1e6/frequency)+1;
 80017c6:	6978      	ldr	r0, [r7, #20]
 80017c8:	f7fe fe76 	bl	80004b8 <__aeabi_f2d>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	a133      	add	r1, pc, #204	; (adr r1, 80018a0 <setMotorSpeed+0x140>)
 80017d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017d6:	f7fe fff1 	bl	80007bc <__aeabi_ddiv>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	f7ff f971 	bl	8000ac8 <__aeabi_d2iz>
 80017e6:	4603      	mov	r3, r0
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	3301      	adds	r3, #1
 80017ec:	827b      	strh	r3, [r7, #18]
	duty_cycle = period / 2;
 80017ee:	8a7b      	ldrh	r3, [r7, #18]
 80017f0:	085b      	lsrs	r3, r3, #1
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	60fb      	str	r3, [r7, #12]
//	      motor->outputPWM->Instance->CCR4 = duty_cycle;
//
//	    HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
//	}

	if (speed<4){
 80017f6:	edd7 7a00 	vldr	s15, [r7]
 80017fa:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80017fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001806:	d503      	bpl.n	8001810 <setMotorSpeed+0xb0>
		brakeMotor(motor, 1);
 8001808:	2101      	movs	r1, #1
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ff7c 	bl	8001708 <brakeMotor>
	}



	motor->outputPWM->Instance->ARR = period;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	8a7a      	ldrh	r2, [r7, #18]
 8001818:	62da      	str	r2, [r3, #44]	; 0x2c
	if(motor->PWM_channel == TIM_CHANNEL_1)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	8b1b      	ldrh	r3, [r3, #24]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d105      	bne.n	800182e <setMotorSpeed+0xce>
	  motor->outputPWM->Instance->CCR1 = duty_cycle;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	635a      	str	r2, [r3, #52]	; 0x34
 800182c:	e01c      	b.n	8001868 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	8b1b      	ldrh	r3, [r3, #24]
 8001832:	2b04      	cmp	r3, #4
 8001834:	d105      	bne.n	8001842 <setMotorSpeed+0xe2>
		  motor->outputPWM->Instance->CCR2 = duty_cycle;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	639a      	str	r2, [r3, #56]	; 0x38
 8001840:	e012      	b.n	8001868 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_3)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	8b1b      	ldrh	r3, [r3, #24]
 8001846:	2b08      	cmp	r3, #8
 8001848:	d105      	bne.n	8001856 <setMotorSpeed+0xf6>
		  motor->outputPWM->Instance->CCR3 = duty_cycle;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	63da      	str	r2, [r3, #60]	; 0x3c
 8001854:	e008      	b.n	8001868 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_4)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	8b1b      	ldrh	r3, [r3, #24]
 800185a:	2b0c      	cmp	r3, #12
 800185c:	d104      	bne.n	8001868 <setMotorSpeed+0x108>
	  motor->outputPWM->Instance->CCR4 = duty_cycle;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	695a      	ldr	r2, [r3, #20]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	8b1b      	ldrh	r3, [r3, #24]
 8001870:	4619      	mov	r1, r3
 8001872:	4610      	mov	r0, r2
 8001874:	f006 fa3a 	bl	8007cec <HAL_TIM_PWM_Start>



	motor->outputPWM->Instance->CNT = 0;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	f3af 8000 	nop.w
 8001890:	bfb15b57 	.word	0xbfb15b57
 8001894:	3fd09eec 	.word	0x3fd09eec
 8001898:	1172ef0b 	.word	0x1172ef0b
 800189c:	3f9989df 	.word	0x3f9989df
 80018a0:	00000000 	.word	0x00000000
 80018a4:	412e8480 	.word	0x412e8480
 80018a8:	42c80000 	.word	0x42c80000
 80018ac:	42c80000 	.word	0x42c80000

080018b0 <runMotor>:
		return -1;
	}
	else return 1;
}

void runMotor(Motor_TypeDef* motor, float speed){
 80018b0:	b5b0      	push	{r4, r5, r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	ed87 0a00 	vstr	s0, [r7]
  //	    - positive speed Lift DOWN
  //	    - negative speed lift UP
    if (motor->ID == 1){
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d129      	bne.n	800191a <runMotor+0x6a>
	if (fabs(speed)/speed  >= 0)
 80018c6:	edd7 7a00 	vldr	s15, [r7]
 80018ca:	eef0 7ae7 	vabs.f32	s15, s15
 80018ce:	ee17 0a90 	vmov	r0, s15
 80018d2:	f7fe fdf1 	bl	80004b8 <__aeabi_f2d>
 80018d6:	4604      	mov	r4, r0
 80018d8:	460d      	mov	r5, r1
 80018da:	6838      	ldr	r0, [r7, #0]
 80018dc:	f7fe fdec 	bl	80004b8 <__aeabi_f2d>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4620      	mov	r0, r4
 80018e6:	4629      	mov	r1, r5
 80018e8:	f7fe ff68 	bl	80007bc <__aeabi_ddiv>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	f7ff f8ba 	bl	8000a74 <__aeabi_dcmpge>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d004      	beq.n	8001910 <runMotor+0x60>
	      setMotorDir(motor, 0);
 8001906:	2100      	movs	r1, #0
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff17 	bl	800173c <setMotorDir>
 800190e:	e032      	b.n	8001976 <runMotor+0xc6>
	else
	  setMotorDir(motor, 1);
 8001910:	2101      	movs	r1, #1
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff ff12 	bl	800173c <setMotorDir>
 8001918:	e02d      	b.n	8001976 <runMotor+0xc6>
    }
    else if (motor->ID == 2){
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001920:	2b02      	cmp	r3, #2
 8001922:	d128      	bne.n	8001976 <runMotor+0xc6>
	if (fabs(speed)/speed  >= 0)
 8001924:	edd7 7a00 	vldr	s15, [r7]
 8001928:	eef0 7ae7 	vabs.f32	s15, s15
 800192c:	ee17 0a90 	vmov	r0, s15
 8001930:	f7fe fdc2 	bl	80004b8 <__aeabi_f2d>
 8001934:	4604      	mov	r4, r0
 8001936:	460d      	mov	r5, r1
 8001938:	6838      	ldr	r0, [r7, #0]
 800193a:	f7fe fdbd 	bl	80004b8 <__aeabi_f2d>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4620      	mov	r0, r4
 8001944:	4629      	mov	r1, r5
 8001946:	f7fe ff39 	bl	80007bc <__aeabi_ddiv>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	f7ff f88b 	bl	8000a74 <__aeabi_dcmpge>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d004      	beq.n	800196e <runMotor+0xbe>
	  setMotorDir(motor, 1);
 8001964:	2101      	movs	r1, #1
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff fee8 	bl	800173c <setMotorDir>
 800196c:	e003      	b.n	8001976 <runMotor+0xc6>
	else
	  setMotorDir(motor, 0);
 800196e:	2100      	movs	r1, #0
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff fee3 	bl	800173c <setMotorDir>
    }

    HAL_Delay(50);
 8001976:	2032      	movs	r0, #50	; 0x32
 8001978:	f003 f95e 	bl	8004c38 <HAL_Delay>
    brakeMotor(motor, 0);
 800197c:	2100      	movs	r1, #0
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff fec2 	bl	8001708 <brakeMotor>
    setMotorSpeed(motor, fabs(speed));
 8001984:	edd7 7a00 	vldr	s15, [r7]
 8001988:	eef0 7ae7 	vabs.f32	s15, s15
 800198c:	eeb0 0a67 	vmov.f32	s0, s15
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff fee5 	bl	8001760 <setMotorSpeed>

}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bdb0      	pop	{r4, r5, r7, pc}

0800199e <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	889b      	ldrh	r3, [r3, #4]
 80019b0:	4619      	mov	r1, r3
 80019b2:	4610      	mov	r0, r2
 80019b4:	f004 fe32 	bl	800661c <HAL_GPIO_ReadPin>
 80019b8:	4603      	mov	r3, r0
 80019ba:	461a      	mov	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	799a      	ldrb	r2, [r3, #6]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	79db      	ldrb	r3, [r3, #7]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d004      	beq.n	80019d6 <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 80019cc:	f003 f928 	bl	8004c20 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 80019d6:	f003 f923 	bl	8004c20 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d209      	bcs.n	80019fc <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	799a      	ldrb	r2, [r3, #6]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7a1b      	ldrb	r3, [r3, #8]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d101      	bne.n	80019fc <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e004      	b.n	8001a06 <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	799a      	ldrb	r2, [r3, #6]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	; 0x28
 8001a14:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001a16:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a18:	4a30      	ldr	r2, [pc, #192]	; (8001adc <MX_CAN1_Init+0xcc>)
 8001a1a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8001a1c:	4b2e      	ldr	r3, [pc, #184]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a1e:	2209      	movs	r2, #9
 8001a20:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a22:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a28:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001a2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a34:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001a36:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a38:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a3c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a3e:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001a44:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001a4a:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a50:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a62:	481d      	ldr	r0, [pc, #116]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001a64:	f003 f90c 	bl	8004c80 <HAL_CAN_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001a6e:	f001 fead 	bl	80037cc <Error_Handler>
  }

  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfil_1;
	canfil_1.FilterBank = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61bb      	str	r3, [r7, #24]
	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	61fb      	str	r3, [r7, #28]
	canfil_1.FilterIdHigh = 0x0000;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	603b      	str	r3, [r7, #0]
	canfil_1.FilterIdLow = 0x0000;
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
	canfil_1.FilterMaskIdHigh = 0x0000;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
	canfil_1.FilterMaskIdLow = 0x0000;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
	canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 8001a92:	2301      	movs	r3, #1
 8001a94:	623b      	str	r3, [r7, #32]
	canfil_1.SlaveStartFilterBank = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK)
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	480e      	ldr	r0, [pc, #56]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001aa0:	f003 f9ea 	bl	8004e78 <HAL_CAN_ConfigFilter>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_CAN1_Init+0x9e>
				Error_Handler();
 8001aaa:	f001 fe8f 	bl	80037cc <Error_Handler>

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING))
 8001aae:	2102      	movs	r1, #2
 8001ab0:	4809      	ldr	r0, [pc, #36]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001ab2:	f003 fcf2 	bl	800549a <HAL_CAN_ActivateNotification>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d002      	beq.n	8001ac2 <MX_CAN1_Init+0xb2>
				return Error_Handler();
 8001abc:	f001 fe86 	bl	80037cc <Error_Handler>
 8001ac0:	e007      	b.n	8001ad2 <MX_CAN1_Init+0xc2>

	if (HAL_CAN_Start(&hcan1))
 8001ac2:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <MX_CAN1_Init+0xc8>)
 8001ac4:	f003 fab8 	bl	8005038 <HAL_CAN_Start>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_CAN1_Init+0xc2>
					return Error_Handler();
 8001ace:	f001 fe7d 	bl	80037cc <Error_Handler>


	    /* USER CODE END CAN1_Init 2 */


}
 8001ad2:	3728      	adds	r7, #40	; 0x28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	200002cc 	.word	0x200002cc
 8001adc:	40006400 	.word	0x40006400

08001ae0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a1d      	ldr	r2, [pc, #116]	; (8001b74 <HAL_CAN_MspInit+0x94>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d133      	bne.n	8001b6a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <HAL_CAN_MspInit+0x98>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	4a1b      	ldr	r2, [pc, #108]	; (8001b78 <HAL_CAN_MspInit+0x98>)
 8001b0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b10:	6413      	str	r3, [r2, #64]	; 0x40
 8001b12:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_CAN_MspInit+0x98>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_CAN_MspInit+0x98>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a14      	ldr	r2, [pc, #80]	; (8001b78 <HAL_CAN_MspInit+0x98>)
 8001b28:	f043 0308 	orr.w	r3, r3, #8
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_CAN_MspInit+0x98>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b4a:	2309      	movs	r3, #9
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	4619      	mov	r1, r3
 8001b54:	4809      	ldr	r0, [pc, #36]	; (8001b7c <HAL_CAN_MspInit+0x9c>)
 8001b56:	f004 fbb5 	bl	80062c4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2014      	movs	r0, #20
 8001b60:	f003 ffcb 	bl	8005afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001b64:	2014      	movs	r0, #20
 8001b66:	f003 ffe4 	bl	8005b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	3728      	adds	r7, #40	; 0x28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40006400 	.word	0x40006400
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020c00 	.word	0x40020c00

08001b80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <MX_DMA_Init+0x4c>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <MX_DMA_Init+0x4c>)
 8001b90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <MX_DMA_Init+0x4c>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	200c      	movs	r0, #12
 8001ba8:	f003 ffa7 	bl	8005afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001bac:	200c      	movs	r0, #12
 8001bae:	f003 ffc0 	bl	8005b32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	200e      	movs	r0, #14
 8001bb8:	f003 ff9f 	bl	8005afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001bbc:	200e      	movs	r0, #14
 8001bbe:	f003 ffb8 	bl	8005b32 <HAL_NVIC_EnableIRQ>

}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <ENCODER_Init>:
CAN_HandleTypeDef hcan2;
//uint8_t incoming[8];
//CAN_RxHeaderTypeDef RxHeader;

void ENCODER_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  //Assign each encoder to one of the two CAN buses
	encoderBack.hcan = &hcan1;
 8001bd4:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <ENCODER_Init+0x24>)
 8001bd6:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <ENCODER_Init+0x28>)
 8001bd8:	601a      	str	r2, [r3, #0]
	encoderFront.hcan = &hcan1;
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <ENCODER_Init+0x2c>)
 8001bdc:	4a06      	ldr	r2, [pc, #24]	; (8001bf8 <ENCODER_Init+0x28>)
 8001bde:	601a      	str	r2, [r3, #0]
	
	//Set Tx header for each encoder handle
	ENCODER_Set_TxHeader(&encoderBack, ENC_ADDR_LEFT);
 8001be0:	2101      	movs	r1, #1
 8001be2:	4804      	ldr	r0, [pc, #16]	; (8001bf4 <ENCODER_Init+0x24>)
 8001be4:	f000 f83f 	bl	8001c66 <ENCODER_Set_TxHeader>
	ENCODER_Set_TxHeader(&encoderFront, ENC_ADDR_RIGHT);
 8001be8:	2102      	movs	r1, #2
 8001bea:	4804      	ldr	r0, [pc, #16]	; (8001bfc <ENCODER_Init+0x2c>)
 8001bec:	f000 f83b 	bl	8001c66 <ENCODER_Set_TxHeader>

}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000374 	.word	0x20000374
 8001bf8:	200002cc 	.word	0x200002cc
 8001bfc:	2000031c 	.word	0x2000031c

08001c00 <ENCODER_Sort_Incoming>:

void ENCODER_Sort_Incoming(uint8_t* incoming_array, EncoderHandle* Encoder_ptr){
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
	Encoder_ptr->rawRead[0] = incoming_array[0];
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	781a      	ldrb	r2, [r3, #0]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Encoder_ptr->rawRead[1] = incoming_array[1];
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	785a      	ldrb	r2, [r3, #1]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Encoder_ptr->rawRead[2] = incoming_array[2];
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	789a      	ldrb	r2, [r3, #2]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Encoder_ptr->rawRead[3] = incoming_array[3];
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	78da      	ldrb	r2, [r3, #3]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	Encoder_ptr->rawRead[4] = incoming_array[4];
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	791a      	ldrb	r2, [r3, #4]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	Encoder_ptr->rawRead[5] = incoming_array[5];
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	795a      	ldrb	r2, [r3, #5]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	Encoder_ptr->rawRead[6] = incoming_array[6];
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	799a      	ldrb	r2, [r3, #6]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	Encoder_ptr->rawRead[7] = incoming_array[7];
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	79da      	ldrb	r2, [r3, #7]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <ENCODER_Set_TxHeader>:

void ENCODER_Set_TxHeader(EncoderHandle* Encoder_ptr, uint32_t Encoder_Address){
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	6039      	str	r1, [r7, #0]
	Encoder_ptr->canTxHeader.DLC = 4;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2204      	movs	r2, #4
 8001c74:	631a      	str	r2, [r3, #48]	; 0x30
	Encoder_ptr->canTxHeader.IDE = CAN_ID_STD;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder_ptr->canTxHeader.RTR = CAN_RTR_DATA;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	62da      	str	r2, [r3, #44]	; 0x2c
	Encoder_ptr->canTxHeader.StdId = Encoder_Address;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	621a      	str	r2, [r3, #32]
	Encoder_ptr->canTxHeader.TransmitGlobalTime = DISABLE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Encoder_ptr->canTxHeader.ExtId = 0;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <ENCODER_Read>:

void ENCODER_Read(EncoderHandle* Encoder_ptr){
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
	Encoder_ptr->sendData[0] = Encoder_ptr->canTxHeader.DLC;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Encoder_ptr->sendData[1] = Encoder_ptr->canTxHeader.StdId;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Encoder_ptr->sendData[2] = 0x01;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Encoder_ptr->sendData[3] = 0x00;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	
	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6818      	ldr	r0, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f103 0120 	add.w	r1, r3, #32
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3338      	adds	r3, #56	; 0x38
 8001ce6:	f003 f9eb 	bl	80050c0 <HAL_CAN_AddTxMessage>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <ENCODER_Get_Angle>:
	Encoder_ptr->sendData[3] = 0x01;

	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
}

void ENCODER_Get_Angle(EncoderHandle* Encoder_ptr){
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
	ENCODER_Read(Encoder_ptr);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff ffd1 	bl	8001ca2 <ENCODER_Read>
	Encoder_ptr->angle32Bit.b8[0] = Encoder_ptr->rawRead[3];
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Encoder_ptr->angle32Bit.b8[1] = Encoder_ptr->rawRead[4];
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Encoder_ptr->angle32Bit.b8[2] = Encoder_ptr->rawRead[5];
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Encoder_ptr->angle32Bit.b8[3] = Encoder_ptr->rawRead[6];
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	//Get the outer gear encoder position
	//Gear ration from inner to outer gear is 1:2. Therefore, (2*4096=)8192 is used
//	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)) ; //Get single turn encoder reading
	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)); //Get single turn encoder reading
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001d36:	461a      	mov	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d3e:	021b      	lsls	r3, r3, #8
 8001d40:	441a      	add	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001d48:	041b      	lsls	r3, r3, #16
 8001d4a:	4413      	add	r3, r2
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	645a      	str	r2, [r3, #68]	; 0x44

	//Convert from encoder position to angle in degree
//	Encoder_ptr->angleDeg = (Encoder_ptr->encoder_pos * 360 /8192) ; //Get encoder angle

}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <MX_GPIO_Init>:
     PB13   ------> SPI2_SCK
     PB14   ------> SPI2_MISO
     PB5   ------> CAN2_RX
*/
void MX_GPIO_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08c      	sub	sp, #48	; 0x30
 8001d60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d62:	f107 031c 	add.w	r3, r7, #28
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
 8001d70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	4b8a      	ldr	r3, [pc, #552]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a89      	ldr	r2, [pc, #548]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001d7c:	f043 0310 	orr.w	r3, r3, #16
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b87      	ldr	r3, [pc, #540]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0310 	and.w	r3, r3, #16
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	4b83      	ldr	r3, [pc, #524]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a82      	ldr	r2, [pc, #520]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b80      	ldr	r3, [pc, #512]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	4b7c      	ldr	r3, [pc, #496]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a7b      	ldr	r2, [pc, #492]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b79      	ldr	r3, [pc, #484]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4b75      	ldr	r3, [pc, #468]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a74      	ldr	r2, [pc, #464]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b72      	ldr	r3, [pc, #456]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	4b6e      	ldr	r3, [pc, #440]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a6d      	ldr	r2, [pc, #436]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001dec:	f043 0302 	orr.w	r3, r3, #2
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b6b      	ldr	r3, [pc, #428]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	4b67      	ldr	r3, [pc, #412]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a66      	ldr	r2, [pc, #408]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001e08:	f043 0308 	orr.w	r3, r3, #8
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b64      	ldr	r3, [pc, #400]	; (8001fa0 <MX_GPIO_Init+0x244>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	213f      	movs	r1, #63	; 0x3f
 8001e1e:	4861      	ldr	r0, [pc, #388]	; (8001fa4 <MX_GPIO_Init+0x248>)
 8001e20:	f004 fc14 	bl	800664c <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2110      	movs	r1, #16
 8001e28:	485f      	ldr	r0, [pc, #380]	; (8001fa8 <MX_GPIO_Init+0x24c>)
 8001e2a:	f004 fc0f 	bl	800664c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001e2e:	2200      	movs	r2, #0
 8001e30:	219b      	movs	r1, #155	; 0x9b
 8001e32:	485e      	ldr	r0, [pc, #376]	; (8001fac <MX_GPIO_Init+0x250>)
 8001e34:	f004 fc0a 	bl	800664c <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8001e3e:	485c      	ldr	r0, [pc, #368]	; (8001fb0 <MX_GPIO_Init+0x254>)
 8001e40:	f004 fc04 	bl	800664c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001e44:	2200      	movs	r2, #0
 8001e46:	f64e 4108 	movw	r1, #60424	; 0xec08
 8001e4a:	485a      	ldr	r0, [pc, #360]	; (8001fb4 <MX_GPIO_Init+0x258>)
 8001e4c:	f004 fbfe 	bl	800664c <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8001e50:	2307      	movs	r3, #7
 8001e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e54:	2300      	movs	r3, #0
 8001e56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	4619      	mov	r1, r3
 8001e62:	4853      	ldr	r0, [pc, #332]	; (8001fb0 <MX_GPIO_Init+0x254>)
 8001e64:	f004 fa2e 	bl	80062c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 8001e68:	f248 1378 	movw	r3, #33144	; 0x8178
 8001e6c:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e72:	2301      	movs	r3, #1
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	484c      	ldr	r0, [pc, #304]	; (8001fb0 <MX_GPIO_Init+0x254>)
 8001e7e:	f004 fa21 	bl	80062c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001e82:	233f      	movs	r3, #63	; 0x3f
 8001e84:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e86:	2301      	movs	r3, #1
 8001e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e92:	f107 031c 	add.w	r3, r7, #28
 8001e96:	4619      	mov	r1, r3
 8001e98:	4842      	ldr	r0, [pc, #264]	; (8001fa4 <MX_GPIO_Init+0x248>)
 8001e9a:	f004 fa13 	bl	80062c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8001e9e:	2310      	movs	r3, #16
 8001ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	483c      	ldr	r0, [pc, #240]	; (8001fa8 <MX_GPIO_Init+0x24c>)
 8001eb6:	f004 fa05 	bl	80062c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ebe:	4b3e      	ldr	r3, [pc, #248]	; (8001fb8 <MX_GPIO_Init+0x25c>)
 8001ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001ec6:	f107 031c 	add.w	r3, r7, #28
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4836      	ldr	r0, [pc, #216]	; (8001fa8 <MX_GPIO_Init+0x24c>)
 8001ece:	f004 f9f9 	bl	80062c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001ed2:	239b      	movs	r3, #155	; 0x9b
 8001ed4:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eda:	2301      	movs	r3, #1
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee2:	f107 031c 	add.w	r3, r7, #28
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4830      	ldr	r0, [pc, #192]	; (8001fac <MX_GPIO_Init+0x250>)
 8001eea:	f004 f9eb 	bl	80062c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 8001eee:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8001ef2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f00:	f107 031c 	add.w	r3, r7, #28
 8001f04:	4619      	mov	r1, r3
 8001f06:	482a      	ldr	r0, [pc, #168]	; (8001fb0 <MX_GPIO_Init+0x254>)
 8001f08:	f004 f9dc 	bl	80062c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin;
 8001f0c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f1e:	2305      	movs	r3, #5
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f22:	f107 031c 	add.w	r3, r7, #28
 8001f26:	4619      	mov	r1, r3
 8001f28:	4820      	ldr	r0, [pc, #128]	; (8001fac <MX_GPIO_Init+0x250>)
 8001f2a:	f004 f9cb 	bl	80062c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001f2e:	f64e 4308 	movw	r3, #60424	; 0xec08
 8001f32:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	4619      	mov	r1, r3
 8001f46:	481b      	ldr	r0, [pc, #108]	; (8001fb4 <MX_GPIO_Init+0x258>)
 8001f48:	f004 f9bc 	bl	80062c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 8001f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 8001f5a:	f107 031c 	add.w	r3, r7, #28
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4814      	ldr	r0, [pc, #80]	; (8001fb4 <MX_GPIO_Init+0x258>)
 8001f62:	f004 f9af 	bl	80062c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f66:	2320      	movs	r3, #32
 8001f68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f72:	2303      	movs	r3, #3
 8001f74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001f76:	2309      	movs	r3, #9
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7a:	f107 031c 	add.w	r3, r7, #28
 8001f7e:	4619      	mov	r1, r3
 8001f80:	480a      	ldr	r0, [pc, #40]	; (8001fac <MX_GPIO_Init+0x250>)
 8001f82:	f004 f99f 	bl	80062c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2017      	movs	r0, #23
 8001f8c:	f003 fdb5 	bl	8005afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f90:	2017      	movs	r0, #23
 8001f92:	f003 fdce 	bl	8005b32 <HAL_NVIC_EnableIRQ>

}
 8001f96:	bf00      	nop
 8001f98:	3730      	adds	r7, #48	; 0x30
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40020c00 	.word	0x40020c00
 8001fb8:	10210000 	.word	0x10210000

08001fbc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fc2:	4a1c      	ldr	r2, [pc, #112]	; (8002034 <MX_I2C1_Init+0x78>)
 8001fc4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001fc6:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fc8:	4a1b      	ldr	r2, [pc, #108]	; (8002038 <MX_I2C1_Init+0x7c>)
 8001fca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fcc:	4b18      	ldr	r3, [pc, #96]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fd2:	4b17      	ldr	r3, [pc, #92]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fd8:	4b15      	ldr	r3, [pc, #84]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fde:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fe0:	4b13      	ldr	r3, [pc, #76]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fec:	4b10      	ldr	r3, [pc, #64]	; (8002030 <MX_I2C1_Init+0x74>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <MX_I2C1_Init+0x74>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ff8:	480d      	ldr	r0, [pc, #52]	; (8002030 <MX_I2C1_Init+0x74>)
 8001ffa:	f004 fb59 	bl	80066b0 <HAL_I2C_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002004:	f001 fbe2 	bl	80037cc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002008:	2100      	movs	r1, #0
 800200a:	4809      	ldr	r0, [pc, #36]	; (8002030 <MX_I2C1_Init+0x74>)
 800200c:	f004 fc94 	bl	8006938 <HAL_I2CEx_ConfigAnalogFilter>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002016:	f001 fbd9 	bl	80037cc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800201a:	2100      	movs	r1, #0
 800201c:	4804      	ldr	r0, [pc, #16]	; (8002030 <MX_I2C1_Init+0x74>)
 800201e:	f004 fcc7 	bl	80069b0 <HAL_I2CEx_ConfigDigitalFilter>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002028:	f001 fbd0 	bl	80037cc <Error_Handler>
  }

}
 800202c:	bf00      	nop
 800202e:	bd80      	pop	{r7, pc}
 8002030:	200003cc 	.word	0x200003cc
 8002034:	40005400 	.word	0x40005400
 8002038:	00061a80 	.word	0x00061a80

0800203c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	; 0x28
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a19      	ldr	r2, [pc, #100]	; (80020c0 <HAL_I2C_MspInit+0x84>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d12c      	bne.n	80020b8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <HAL_I2C_MspInit+0x88>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a17      	ldr	r2, [pc, #92]	; (80020c4 <HAL_I2C_MspInit+0x88>)
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <HAL_I2C_MspInit+0x88>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 800207a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800207e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002080:	2312      	movs	r3, #18
 8002082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002084:	2301      	movs	r3, #1
 8002086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002088:	2303      	movs	r3, #3
 800208a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800208c:	2304      	movs	r3, #4
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	4619      	mov	r1, r3
 8002096:	480c      	ldr	r0, [pc, #48]	; (80020c8 <HAL_I2C_MspInit+0x8c>)
 8002098:	f004 f914 	bl	80062c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <HAL_I2C_MspInit+0x88>)
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	4a07      	ldr	r2, [pc, #28]	; (80020c4 <HAL_I2C_MspInit+0x88>)
 80020a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020aa:	6413      	str	r3, [r2, #64]	; 0x40
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <HAL_I2C_MspInit+0x88>)
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80020b8:	bf00      	nop
 80020ba:	3728      	adds	r7, #40	; 0x28
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40005400 	.word	0x40005400
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40020400 	.word	0x40020400

080020cc <HAL_TIM_IC_CaptureCallback>:

/* Measure Frequency */
float frequency = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	7f1b      	ldrb	r3, [r3, #28]
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d149      	bne.n	8002170 <HAL_TIM_IC_CaptureCallback+0xa4>
	{
		if (Is_First_Captured==0) // if the first rising edge is not captured
 80020dc:	4b26      	ldr	r3, [pc, #152]	; (8002178 <HAL_TIM_IC_CaptureCallback+0xac>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10a      	bne.n	80020fa <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4); // read the first value
 80020e4:	210c      	movs	r1, #12
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f006 fa62 	bl	80085b0 <HAL_TIM_ReadCapturedValue>
 80020ec:	4603      	mov	r3, r0
 80020ee:	4a23      	ldr	r2, [pc, #140]	; (800217c <HAL_TIM_IC_CaptureCallback+0xb0>)
 80020f0:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80020f2:	4b21      	ldr	r3, [pc, #132]	; (8002178 <HAL_TIM_IC_CaptureCallback+0xac>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_Captured = 0; // set it back to false
		}
	}
}
 80020f8:	e03a      	b.n	8002170 <HAL_TIM_IC_CaptureCallback+0xa4>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);  // read second value
 80020fa:	210c      	movs	r1, #12
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f006 fa57 	bl	80085b0 <HAL_TIM_ReadCapturedValue>
 8002102:	4603      	mov	r3, r0
 8002104:	4a1e      	ldr	r2, [pc, #120]	; (8002180 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8002106:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1)
 8002108:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b1b      	ldr	r3, [pc, #108]	; (800217c <HAL_TIM_IC_CaptureCallback+0xb0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d907      	bls.n	8002124 <HAL_TIM_IC_CaptureCallback+0x58>
				Difference = IC_Val2-IC_Val1;
 8002114:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b18      	ldr	r3, [pc, #96]	; (800217c <HAL_TIM_IC_CaptureCallback+0xb0>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	4a19      	ldr	r2, [pc, #100]	; (8002184 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e00f      	b.n	8002144 <HAL_TIM_IC_CaptureCallback+0x78>
			else if (IC_Val1 > IC_Val2)
 8002124:	4b15      	ldr	r3, [pc, #84]	; (800217c <HAL_TIM_IC_CaptureCallback+0xb0>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b15      	ldr	r3, [pc, #84]	; (8002180 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d909      	bls.n	8002144 <HAL_TIM_IC_CaptureCallback+0x78>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8002130:	4b13      	ldr	r3, [pc, #76]	; (8002180 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b11      	ldr	r3, [pc, #68]	; (800217c <HAL_TIM_IC_CaptureCallback+0xb0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800213e:	33ff      	adds	r3, #255	; 0xff
 8002140:	4a10      	ldr	r2, [pc, #64]	; (8002184 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002142:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 8002144:	4b10      	ldr	r3, [pc, #64]	; (8002188 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8002146:	60fb      	str	r3, [r7, #12]
			frequency = refClock/Difference;
 8002148:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	ee07 3a90 	vmov	s15, r3
 8002150:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002154:	edd7 6a03 	vldr	s13, [r7, #12]
 8002158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_TIM_IC_CaptureCallback+0xc0>)
 800215e:	edc3 7a00 	vstr	s15, [r3]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2200      	movs	r2, #0
 8002168:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
 800216a:	4b03      	ldr	r3, [pc, #12]	; (8002178 <HAL_TIM_IC_CaptureCallback+0xac>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	2000020c 	.word	0x2000020c
 800217c:	20000200 	.word	0x20000200
 8002180:	20000204 	.word	0x20000204
 8002184:	20000208 	.word	0x20000208
 8002188:	49742400 	.word	0x49742400
 800218c:	20000210 	.word	0x20000210

08002190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002190:	b5b0      	push	{r4, r5, r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002196:	f002 fcdd 	bl	8004b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800219a:	f000 fd69 	bl	8002c70 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 800219e:	f005 f8cd 	bl	800733c <HAL_RCC_GetHCLKFreq>
 80021a2:	4603      	mov	r3, r0
 80021a4:	4ab6      	ldr	r2, [pc, #728]	; (8002480 <main+0x2f0>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	099b      	lsrs	r3, r3, #6
 80021ac:	4618      	mov	r0, r3
 80021ae:	f003 fcce 	bl	8005b4e <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80021b2:	2004      	movs	r0, #4
 80021b4:	f003 fcd8 	bl	8005b68 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80021b8:	2200      	movs	r2, #0
 80021ba:	2100      	movs	r1, #0
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021c0:	f003 fc9b 	bl	8005afa <HAL_NVIC_SetPriority>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021c4:	f7ff fdca 	bl	8001d5c <MX_GPIO_Init>
  MX_DMA_Init();
 80021c8:	f7ff fcda 	bl	8001b80 <MX_DMA_Init>
  MX_I2C1_Init();
 80021cc:	f7ff fef6 	bl	8001fbc <MX_I2C1_Init>
  MX_TIM1_Init();
 80021d0:	f001 fc58 	bl	8003a84 <MX_TIM1_Init>
  MX_TIM2_Init();
 80021d4:	f001 fcf6 	bl	8003bc4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80021d8:	f001 ff90 	bl	80040fc <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80021dc:	f001 fd66 	bl	8003cac <MX_TIM3_Init>
  MX_TIM8_Init();
 80021e0:	f001 fde6 	bl	8003db0 <MX_TIM8_Init>
  MX_CAN1_Init();
 80021e4:	f7ff fc14 	bl	8001a10 <MX_CAN1_Init>
  MX_SPI1_Init();
 80021e8:	f001 fb08 	bl	80037fc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	//Initialize hardware communication
	joystick_Init();
 80021ec:	f002 f866 	bl	80042bc <joystick_Init>
	ADC_Init();
 80021f0:	f7ff f9e8 	bl	80015c4 <ADC_Init>
	ADC_DataRequest();
 80021f4:	f7ff fa28 	bl	8001648 <ADC_DataRequest>
	ENCODER_Init();
 80021f8:	f7ff fcea 	bl	8001bd0 <ENCODER_Init>
//		if (HAL_GetTick() - state_count > 5000)
//			Error_Handler();
//	}

	//Start base wheel PWM pin
	wheelSpeedControl_Init(&baseWheelSpeed, base_linSpeedLevel[base_speedLevel],
 80021fc:	4ba1      	ldr	r3, [pc, #644]	; (8002484 <main+0x2f4>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4aa1      	ldr	r2, [pc, #644]	; (8002488 <main+0x2f8>)
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	4b9e      	ldr	r3, [pc, #632]	; (8002484 <main+0x2f4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a9f      	ldr	r2, [pc, #636]	; (800248c <main+0x2fc>)
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	ed93 7a00 	vldr	s14, [r3]
 8002218:	eef0 0a47 	vmov.f32	s1, s14
 800221c:	eeb0 0a67 	vmov.f32	s0, s15
 8002220:	489b      	ldr	r0, [pc, #620]	; (8002490 <main+0x300>)
 8002222:	f002 fa13 	bl	800464c <wheelSpeedControl_Init>
			base_angSpeedLevel[base_speedLevel]);
	HAL_TIM_Base_Start(&MOTOR_TIM);
 8002226:	489b      	ldr	r0, [pc, #620]	; (8002494 <main+0x304>)
 8002228:	f005 fd07 	bl	8007c3a <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_1);
 800222c:	2100      	movs	r1, #0
 800222e:	4899      	ldr	r0, [pc, #612]	; (8002494 <main+0x304>)
 8002230:	f005 fd5c 	bl	8007cec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_2);
 8002234:	2104      	movs	r1, #4
 8002236:	4897      	ldr	r0, [pc, #604]	; (8002494 <main+0x304>)
 8002238:	f005 fd58 	bl	8007cec <HAL_TIM_PWM_Start>
	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = 1500;
 800223c:	4b95      	ldr	r3, [pc, #596]	; (8002494 <main+0x304>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002244:	635a      	str	r2, [r3, #52]	; 0x34
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = 1500;
 8002246:	4b93      	ldr	r3, [pc, #588]	; (8002494 <main+0x304>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800224e:	639a      	str	r2, [r3, #56]	; 0x38

//	//Initialize rear and back motor
	bd25l_Init(&rearMotor);
 8002250:	4891      	ldr	r0, [pc, #580]	; (8002498 <main+0x308>)
 8002252:	f7ff fa25 	bl	80016a0 <bd25l_Init>
	bd25l_Init(&backMotor);
 8002256:	4891      	ldr	r0, [pc, #580]	; (800249c <main+0x30c>)
 8002258:	f7ff fa22 	bl	80016a0 <bd25l_Init>
	runMotor(&rearMotor, 0);
 800225c:	ed9f 0a90 	vldr	s0, [pc, #576]	; 80024a0 <main+0x310>
 8002260:	488d      	ldr	r0, [pc, #564]	; (8002498 <main+0x308>)
 8002262:	f7ff fb25 	bl	80018b0 <runMotor>
	runMotor(&backMotor, 0);
 8002266:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 80024a0 <main+0x310>
 800226a:	488c      	ldr	r0, [pc, #560]	; (800249c <main+0x30c>)
 800226c:	f7ff fb20 	bl	80018b0 <runMotor>
	HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_4);
 8002270:	210c      	movs	r1, #12
 8002272:	488c      	ldr	r0, [pc, #560]	; (80024a4 <main+0x314>)
 8002274:	f005 fe06 	bl	8007e84 <HAL_TIM_IC_Start_IT>
	emBrakeMotor(0);
 8002278:	2000      	movs	r0, #0
 800227a:	f7ff fa33 	bl	80016e4 <emBrakeMotor>
//
	//Initialize hub motor provided joystick control
	hubMotor_Init();
 800227e:	f7ff f8af 	bl	80013e0 <hubMotor_Init>
	send_HubMotor(0, 0);
 8002282:	eddf 0a87 	vldr	s1, [pc, #540]	; 80024a0 <main+0x310>
 8002286:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80024a0 <main+0x310>
 800228a:	f7ff f8c1 	bl	8001410 <send_HubMotor>

	//Initialize front and back climbing position controller
	frontClimb_pid = pid_create(&frontClimb_ctrl, &frontClimb_input,
 800228e:	4b86      	ldr	r3, [pc, #536]	; (80024a8 <main+0x318>)
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	4b85      	ldr	r3, [pc, #532]	; (80024ac <main+0x31c>)
 8002296:	ed93 7a00 	vldr	s14, [r3]
 800229a:	4b85      	ldr	r3, [pc, #532]	; (80024b0 <main+0x320>)
 800229c:	edd3 6a00 	vldr	s13, [r3]
 80022a0:	eeb0 1a66 	vmov.f32	s2, s13
 80022a4:	eef0 0a47 	vmov.f32	s1, s14
 80022a8:	eeb0 0a67 	vmov.f32	s0, s15
 80022ac:	4b81      	ldr	r3, [pc, #516]	; (80024b4 <main+0x324>)
 80022ae:	4a82      	ldr	r2, [pc, #520]	; (80024b8 <main+0x328>)
 80022b0:	4982      	ldr	r1, [pc, #520]	; (80024bc <main+0x32c>)
 80022b2:	4883      	ldr	r0, [pc, #524]	; (80024c0 <main+0x330>)
 80022b4:	f7fe fe1c 	bl	8000ef0 <pid_create>
 80022b8:	4603      	mov	r3, r0
 80022ba:	4a82      	ldr	r2, [pc, #520]	; (80024c4 <main+0x334>)
 80022bc:	6013      	str	r3, [r2, #0]
			&frontClimb_output, &frontClimb_setpoint, frontClimb_kp,
			frontClimb_ki, frontClimb_kd);
	pid_limits(frontClimb_pid, -80, 80);
 80022be:	4b81      	ldr	r3, [pc, #516]	; (80024c4 <main+0x334>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	eddf 0a81 	vldr	s1, [pc, #516]	; 80024c8 <main+0x338>
 80022c6:	ed9f 0a81 	vldr	s0, [pc, #516]	; 80024cc <main+0x33c>
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe ff9c 	bl	8001208 <pid_limits>
	pid_sample(frontClimb_pid, 1);
 80022d0:	4b7c      	ldr	r3, [pc, #496]	; (80024c4 <main+0x334>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2101      	movs	r1, #1
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe ff62 	bl	80011a0 <pid_sample>
	pid_auto(frontClimb_pid);
 80022dc:	4b79      	ldr	r3, [pc, #484]	; (80024c4 <main+0x334>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe fff6 	bl	80012d2 <pid_auto>

	backClimb_pid = pid_create(&backClimb_ctrl, &backClimb_input,
 80022e6:	4b7a      	ldr	r3, [pc, #488]	; (80024d0 <main+0x340>)
 80022e8:	edd3 7a00 	vldr	s15, [r3]
 80022ec:	4b79      	ldr	r3, [pc, #484]	; (80024d4 <main+0x344>)
 80022ee:	ed93 7a00 	vldr	s14, [r3]
 80022f2:	4b79      	ldr	r3, [pc, #484]	; (80024d8 <main+0x348>)
 80022f4:	edd3 6a00 	vldr	s13, [r3]
 80022f8:	eeb0 1a66 	vmov.f32	s2, s13
 80022fc:	eef0 0a47 	vmov.f32	s1, s14
 8002300:	eeb0 0a67 	vmov.f32	s0, s15
 8002304:	4b75      	ldr	r3, [pc, #468]	; (80024dc <main+0x34c>)
 8002306:	4a76      	ldr	r2, [pc, #472]	; (80024e0 <main+0x350>)
 8002308:	4976      	ldr	r1, [pc, #472]	; (80024e4 <main+0x354>)
 800230a:	4877      	ldr	r0, [pc, #476]	; (80024e8 <main+0x358>)
 800230c:	f7fe fdf0 	bl	8000ef0 <pid_create>
 8002310:	4603      	mov	r3, r0
 8002312:	4a76      	ldr	r2, [pc, #472]	; (80024ec <main+0x35c>)
 8002314:	6013      	str	r3, [r2, #0]
			&backClimb_output, &backClimb_setpoint, backClimb_kp, backClimb_ki,
			backClimb_kd);
	pid_limits(backClimb_pid, -80, 80);
 8002316:	4b75      	ldr	r3, [pc, #468]	; (80024ec <main+0x35c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	eddf 0a6b 	vldr	s1, [pc, #428]	; 80024c8 <main+0x338>
 800231e:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 80024cc <main+0x33c>
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe ff70 	bl	8001208 <pid_limits>
	pid_sample(backClimb_pid, 1);
 8002328:	4b70      	ldr	r3, [pc, #448]	; (80024ec <main+0x35c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2101      	movs	r1, #1
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe ff36 	bl	80011a0 <pid_sample>
	pid_auto(backClimb_pid);
 8002334:	4b6d      	ldr	r3, [pc, #436]	; (80024ec <main+0x35c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe ffca 	bl	80012d2 <pid_auto>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t prev_time = HAL_GetTick();
 800233e:	f002 fc6f 	bl	8004c20 <HAL_GetTick>
 8002342:	6078      	str	r0, [r7, #4]
	ENCODER_Get_Angle(&encoderBack);
 8002344:	486a      	ldr	r0, [pc, #424]	; (80024f0 <main+0x360>)
 8002346:	f7ff fcd4 	bl	8001cf2 <ENCODER_Get_Angle>
	ENCODER_Get_Angle(&encoderFront);
 800234a:	486a      	ldr	r0, [pc, #424]	; (80024f4 <main+0x364>)
 800234c:	f7ff fcd1 	bl	8001cf2 <ENCODER_Get_Angle>

//	while (state_count++ < 1000)
//		MPU6050_Read_All(&hi2c1, &MPU6050);
//	initial_angle = MPU6050.KalmanAngleX;
	state_count = 0;
 8002350:	4b69      	ldr	r3, [pc, #420]	; (80024f8 <main+0x368>)
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
	emBrakeMotor(1);
 8002356:	2001      	movs	r0, #1
 8002358:	f7ff f9c4 	bl	80016e4 <emBrakeMotor>
	//Reset encoder position
//	ENCODER_Set_ZeroPosition(&encoderBack);
//	ENCODER_Set_ZeroPosition(&encoderFront);
	HAL_Delay(500);
 800235c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002360:	f002 fc6a 	bl	8004c38 <HAL_Delay>
		//      MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL -= 50;
		//      runMotor(&backMotor, 100, 1);

		//      runMotor(&backMotor, speed++, 1);
		//Loop should execute once every 1 tick
		if (HAL_GetTick() - prev_time >= 1)
 8002364:	f002 fc5c 	bl	8004c20 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4293      	cmp	r3, r2
 800236e:	d0f9      	beq.n	8002364 <main+0x1d4>
		{
			ADC_DataRequest();
 8002370:	f7ff f96a 	bl	8001648 <ADC_DataRequest>
			ENCODER_Read(&encoderBack);
 8002374:	485e      	ldr	r0, [pc, #376]	; (80024f0 <main+0x360>)
 8002376:	f7ff fc94 	bl	8001ca2 <ENCODER_Read>
			ENCODER_Read(&encoderFront);
 800237a:	485e      	ldr	r0, [pc, #376]	; (80024f4 <main+0x364>)
 800237c:	f7ff fc91 	bl	8001ca2 <ENCODER_Read>

			//Get kamlan filtered angle from MPU6050
//			MPU6050_Read_All(&hi2c1, &MPU6050);
			GPIO_Digital_Filtered_Input(&button1, 30);
 8002380:	211e      	movs	r1, #30
 8002382:	485e      	ldr	r0, [pc, #376]	; (80024fc <main+0x36c>)
 8002384:	f7ff fb0b 	bl	800199e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button2, 30);
 8002388:	211e      	movs	r1, #30
 800238a:	485d      	ldr	r0, [pc, #372]	; (8002500 <main+0x370>)
 800238c:	f7ff fb07 	bl	800199e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button3, 30);
 8002390:	211e      	movs	r1, #30
 8002392:	485c      	ldr	r0, [pc, #368]	; (8002504 <main+0x374>)
 8002394:	f7ff fb03 	bl	800199e <GPIO_Digital_Filtered_Input>

			GPIO_Digital_Filtered_Input(&rearLS1, 5);
 8002398:	2105      	movs	r1, #5
 800239a:	485b      	ldr	r0, [pc, #364]	; (8002508 <main+0x378>)
 800239c:	f7ff faff 	bl	800199e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&rearLS2, 5);
 80023a0:	2105      	movs	r1, #5
 80023a2:	485a      	ldr	r0, [pc, #360]	; (800250c <main+0x37c>)
 80023a4:	f7ff fafb 	bl	800199e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS1, 5);
 80023a8:	2105      	movs	r1, #5
 80023aa:	4859      	ldr	r0, [pc, #356]	; (8002510 <main+0x380>)
 80023ac:	f7ff faf7 	bl	800199e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS2, 5);
 80023b0:	2105      	movs	r1, #5
 80023b2:	4858      	ldr	r0, [pc, #352]	; (8002514 <main+0x384>)
 80023b4:	f7ff faf3 	bl	800199e <GPIO_Digital_Filtered_Input>
			 *	1. Climbing wheel extension.
			 *	2. Wheelchair lifting/dropping
			 *	3. Climbing wheel retraction
			 *-------------------------------------------------------------------*/
			//when button3 is pressed, Extend climbing wheel until both wheel touches the ground
			if ((button3.state == 1 || button_prev_state == 1)
 80023b8:	4b52      	ldr	r3, [pc, #328]	; (8002504 <main+0x374>)
 80023ba:	7a1b      	ldrb	r3, [r3, #8]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d003      	beq.n	80023c8 <main+0x238>
 80023c0:	4b55      	ldr	r3, [pc, #340]	; (8002518 <main+0x388>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d038      	beq.n	800243a <main+0x2aa>
					&& climb_first_iteration == true)
 80023c8:	4b54      	ldr	r3, [pc, #336]	; (800251c <main+0x38c>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d034      	beq.n	800243a <main+0x2aa>
			{
				button_prev_state = 1;
 80023d0:	4b51      	ldr	r3, [pc, #324]	; (8002518 <main+0x388>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	701a      	strb	r2, [r3, #0]
				if (abs(encoderFront.signed_encoder_pos) >= 50
 80023d6:	4b47      	ldr	r3, [pc, #284]	; (80024f4 <main+0x364>)
 80023d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023da:	2b00      	cmp	r3, #0
 80023dc:	bfb8      	it	lt
 80023de:	425b      	neglt	r3, r3
 80023e0:	2b31      	cmp	r3, #49	; 0x31
 80023e2:	dc06      	bgt.n	80023f2 <main+0x262>
						|| abs(encoderBack.signed_encoder_pos) >= 50)
 80023e4:	4b42      	ldr	r3, [pc, #264]	; (80024f0 <main+0x360>)
 80023e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	bfb8      	it	lt
 80023ec:	425b      	neglt	r3, r3
 80023ee:	2b31      	cmp	r3, #49	; 0x31
 80023f0:	dd0f      	ble.n	8002412 <main+0x282>
				{
					goto_pos(0, frontClimb_pid);
 80023f2:	4b34      	ldr	r3, [pc, #208]	; (80024c4 <main+0x334>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4619      	mov	r1, r3
 80023f8:	2000      	movs	r0, #0
 80023fa:	f000 ffad 	bl	8003358 <goto_pos>
					goto_pos(0, backClimb_pid);
 80023fe:	4b3b      	ldr	r3, [pc, #236]	; (80024ec <main+0x35c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4619      	mov	r1, r3
 8002404:	2000      	movs	r0, #0
 8002406:	f000 ffa7 	bl	8003358 <goto_pos>
					lifting_mode = EMPTY;
 800240a:	4b45      	ldr	r3, [pc, #276]	; (8002520 <main+0x390>)
 800240c:	2205      	movs	r2, #5
 800240e:	701a      	strb	r2, [r3, #0]
 8002410:	e013      	b.n	800243a <main+0x2aa>
				}
				else
				{
					runMotor(&rearMotor, 0);
 8002412:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80024a0 <main+0x310>
 8002416:	4820      	ldr	r0, [pc, #128]	; (8002498 <main+0x308>)
 8002418:	f7ff fa4a 	bl	80018b0 <runMotor>
					runMotor(&backMotor, 0);
 800241c:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80024a0 <main+0x310>
 8002420:	481e      	ldr	r0, [pc, #120]	; (800249c <main+0x30c>)
 8002422:	f7ff fa45 	bl	80018b0 <runMotor>
					lifting_mode = LANDING;
 8002426:	4b3e      	ldr	r3, [pc, #248]	; (8002520 <main+0x390>)
 8002428:	2204      	movs	r2, #4
 800242a:	701a      	strb	r2, [r3, #0]
					button_prev_state = 0;
 800242c:	4b3a      	ldr	r3, [pc, #232]	; (8002518 <main+0x388>)
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
					HAL_Delay(500);
 8002432:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002436:	f002 fbff 	bl	8004c38 <HAL_Delay>

				}
			}

			if (front_touchdown == false && back_touchdown == false
 800243a:	4b3a      	ldr	r3, [pc, #232]	; (8002524 <main+0x394>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	f083 0301 	eor.w	r3, r3, #1
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 811b 	beq.w	8002680 <main+0x4f0>
 800244a:	4b37      	ldr	r3, [pc, #220]	; (8002528 <main+0x398>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	f083 0301 	eor.w	r3, r3, #1
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 8113 	beq.w	8002680 <main+0x4f0>
					&& lifting_mode == LANDING)
 800245a:	4b31      	ldr	r3, [pc, #196]	; (8002520 <main+0x390>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b04      	cmp	r3, #4
 8002460:	f040 810e 	bne.w	8002680 <main+0x4f0>
			{
				//Stop the base wheel completely
				baseWheelSpeed.cur_r = 0;
 8002464:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <main+0x300>)
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	605a      	str	r2, [r3, #4]
				baseWheelSpeed.cur_l = 0;
 800246c:	4b08      	ldr	r3, [pc, #32]	; (8002490 <main+0x300>)
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
				baseMotorCommand();
 8002474:	f000 fe5c 	bl	8003130 <baseMotorCommand>

				//Disengage the motor brake
				emBrakeMotor(1);
 8002478:	2001      	movs	r0, #1
 800247a:	f7ff f933 	bl	80016e4 <emBrakeMotor>

				//Start landing process
				while (front_touchdown == false || back_touchdown == false)
 800247e:	e0c6      	b.n	800260e <main+0x47e>
 8002480:	10624dd3 	.word	0x10624dd3
 8002484:	200001c0 	.word	0x200001c0
 8002488:	0800cb78 	.word	0x0800cb78
 800248c:	0800cb84 	.word	0x0800cb84
 8002490:	200000d8 	.word	0x200000d8
 8002494:	20000564 	.word	0x20000564
 8002498:	20000000 	.word	0x20000000
 800249c:	20000034 	.word	0x20000034
 80024a0:	00000000 	.word	0x00000000
 80024a4:	20000524 	.word	0x20000524
 80024a8:	2000010c 	.word	0x2000010c
 80024ac:	20000110 	.word	0x20000110
 80024b0:	20000114 	.word	0x20000114
 80024b4:	200001d8 	.word	0x200001d8
 80024b8:	200001d4 	.word	0x200001d4
 80024bc:	200001d0 	.word	0x200001d0
 80024c0:	200004d8 	.word	0x200004d8
 80024c4:	200004d4 	.word	0x200004d4
 80024c8:	42a00000 	.word	0x42a00000
 80024cc:	c2a00000 	.word	0xc2a00000
 80024d0:	20000118 	.word	0x20000118
 80024d4:	2000011c 	.word	0x2000011c
 80024d8:	20000120 	.word	0x20000120
 80024dc:	200001e4 	.word	0x200001e4
 80024e0:	200001e0 	.word	0x200001e0
 80024e4:	200001dc 	.word	0x200001dc
 80024e8:	20000490 	.word	0x20000490
 80024ec:	20000520 	.word	0x20000520
 80024f0:	20000374 	.word	0x20000374
 80024f4:	2000031c 	.word	0x2000031c
 80024f8:	200001fc 	.word	0x200001fc
 80024fc:	200000a8 	.word	0x200000a8
 8002500:	200000b8 	.word	0x200000b8
 8002504:	200000c8 	.word	0x200000c8
 8002508:	20000068 	.word	0x20000068
 800250c:	20000078 	.word	0x20000078
 8002510:	20000088 	.word	0x20000088
 8002514:	20000098 	.word	0x20000098
 8002518:	200001c6 	.word	0x200001c6
 800251c:	20000109 	.word	0x20000109
 8002520:	20000108 	.word	0x20000108
 8002524:	200001c4 	.word	0x200001c4
 8002528:	200001c5 	.word	0x200001c5
				{
					if (GPIO_Digital_Filtered_Input(&rearLS1, 5)
 800252c:	2105      	movs	r1, #5
 800252e:	4848      	ldr	r0, [pc, #288]	; (8002650 <main+0x4c0>)
 8002530:	f7ff fa35 	bl	800199e <GPIO_Digital_Filtered_Input>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d106      	bne.n	8002548 <main+0x3b8>
							|| GPIO_Digital_Filtered_Input(&rearLS2, 5))
 800253a:	2105      	movs	r1, #5
 800253c:	4845      	ldr	r0, [pc, #276]	; (8002654 <main+0x4c4>)
 800253e:	f7ff fa2e 	bl	800199e <GPIO_Digital_Filtered_Input>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <main+0x3be>
						front_touchdown = 1;
 8002548:	4b43      	ldr	r3, [pc, #268]	; (8002658 <main+0x4c8>)
 800254a:	2201      	movs	r2, #1
 800254c:	701a      	strb	r2, [r3, #0]
					if (GPIO_Digital_Filtered_Input(&backLS1, 5)
 800254e:	2105      	movs	r1, #5
 8002550:	4842      	ldr	r0, [pc, #264]	; (800265c <main+0x4cc>)
 8002552:	f7ff fa24 	bl	800199e <GPIO_Digital_Filtered_Input>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d106      	bne.n	800256a <main+0x3da>
							|| GPIO_Digital_Filtered_Input(&backLS2, 5))
 800255c:	2105      	movs	r1, #5
 800255e:	4840      	ldr	r0, [pc, #256]	; (8002660 <main+0x4d0>)
 8002560:	f7ff fa1d 	bl	800199e <GPIO_Digital_Filtered_Input>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <main+0x3e0>
						back_touchdown = 1;
 800256a:	4b3e      	ldr	r3, [pc, #248]	; (8002664 <main+0x4d4>)
 800256c:	2201      	movs	r2, #1
 800256e:	701a      	strb	r2, [r3, #0]

					//if front touch before back, climbing up process
					if (back_touchdown == 0 && front_touchdown == 1
 8002570:	4b3c      	ldr	r3, [pc, #240]	; (8002664 <main+0x4d4>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	f083 0301 	eor.w	r3, r3, #1
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00b      	beq.n	8002596 <main+0x406>
 800257e:	4b36      	ldr	r3, [pc, #216]	; (8002658 <main+0x4c8>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d007      	beq.n	8002596 <main+0x406>
							&& lifting_mode == LANDING)
 8002586:	4b38      	ldr	r3, [pc, #224]	; (8002668 <main+0x4d8>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b04      	cmp	r3, #4
 800258c:	d103      	bne.n	8002596 <main+0x406>
						lifting_mode = CLIMB_UP;
 800258e:	4b36      	ldr	r3, [pc, #216]	; (8002668 <main+0x4d8>)
 8002590:	2201      	movs	r2, #1
 8002592:	701a      	strb	r2, [r3, #0]
 8002594:	e011      	b.n	80025ba <main+0x42a>
					//if back touch before front, climbing down process
					else if (back_touchdown == 1 && front_touchdown == 0
 8002596:	4b33      	ldr	r3, [pc, #204]	; (8002664 <main+0x4d4>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00d      	beq.n	80025ba <main+0x42a>
 800259e:	4b2e      	ldr	r3, [pc, #184]	; (8002658 <main+0x4c8>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	f083 0301 	eor.w	r3, r3, #1
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d006      	beq.n	80025ba <main+0x42a>
							&& lifting_mode == LANDING)
 80025ac:	4b2e      	ldr	r3, [pc, #184]	; (8002668 <main+0x4d8>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d102      	bne.n	80025ba <main+0x42a>
						lifting_mode = CLIMB_DOWN;
 80025b4:	4b2c      	ldr	r3, [pc, #176]	; (8002668 <main+0x4d8>)
 80025b6:	2202      	movs	r2, #2
 80025b8:	701a      	strb	r2, [r3, #0]

//					initial_angle = exp_angle_filter * MPU6050.KalmanAngleXf

					ENCODER_Read(&encoderBack);
 80025ba:	482c      	ldr	r0, [pc, #176]	; (800266c <main+0x4dc>)
 80025bc:	f7ff fb71 	bl	8001ca2 <ENCODER_Read>
					ENCODER_Read(&encoderFront);
 80025c0:	482b      	ldr	r0, [pc, #172]	; (8002670 <main+0x4e0>)
 80025c2:	f7ff fb6e 	bl	8001ca2 <ENCODER_Read>

					if (back_touchdown == false)
 80025c6:	4b27      	ldr	r3, [pc, #156]	; (8002664 <main+0x4d4>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	f083 0301 	eor.w	r3, r3, #1
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <main+0x450>
						runMotor(&backMotor, 30);
 80025d4:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80025d8:	4826      	ldr	r0, [pc, #152]	; (8002674 <main+0x4e4>)
 80025da:	f7ff f969 	bl	80018b0 <runMotor>
 80025de:	e004      	b.n	80025ea <main+0x45a>
					else
						runMotor(&backMotor, 0);
 80025e0:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8002678 <main+0x4e8>
 80025e4:	4823      	ldr	r0, [pc, #140]	; (8002674 <main+0x4e4>)
 80025e6:	f7ff f963 	bl	80018b0 <runMotor>

					if (front_touchdown == false)
 80025ea:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <main+0x4c8>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	f083 0301 	eor.w	r3, r3, #1
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <main+0x474>
						runMotor(&rearMotor, 30);
 80025f8:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80025fc:	481f      	ldr	r0, [pc, #124]	; (800267c <main+0x4ec>)
 80025fe:	f7ff f957 	bl	80018b0 <runMotor>
 8002602:	e004      	b.n	800260e <main+0x47e>
					else
						runMotor(&rearMotor, 0);
 8002604:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8002678 <main+0x4e8>
 8002608:	481c      	ldr	r0, [pc, #112]	; (800267c <main+0x4ec>)
 800260a:	f7ff f951 	bl	80018b0 <runMotor>
				while (front_touchdown == false || back_touchdown == false)
 800260e:	4b12      	ldr	r3, [pc, #72]	; (8002658 <main+0x4c8>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	f083 0301 	eor.w	r3, r3, #1
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d187      	bne.n	800252c <main+0x39c>
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <main+0x4d4>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	f083 0301 	eor.w	r3, r3, #1
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d180      	bne.n	800252c <main+0x39c>

				}
				runMotor(&rearMotor, 0);
 800262a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8002678 <main+0x4e8>
 800262e:	4813      	ldr	r0, [pc, #76]	; (800267c <main+0x4ec>)
 8002630:	f7ff f93e 	bl	80018b0 <runMotor>
				runMotor(&backMotor, 0);
 8002634:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8002678 <main+0x4e8>
 8002638:	480e      	ldr	r0, [pc, #56]	; (8002674 <main+0x4e4>)
 800263a:	f7ff f939 	bl	80018b0 <runMotor>
				emBrakeMotor(0);
 800263e:	2000      	movs	r0, #0
 8002640:	f7ff f850 	bl	80016e4 <emBrakeMotor>
				HAL_Delay(500);
 8002644:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002648:	f002 faf6 	bl	8004c38 <HAL_Delay>
				continue; //to refresh the loop and get the latest encoder reading
 800264c:	e2f0      	b.n	8002c30 <main+0xaa0>
 800264e:	bf00      	nop
 8002650:	20000068 	.word	0x20000068
 8002654:	20000078 	.word	0x20000078
 8002658:	200001c4 	.word	0x200001c4
 800265c:	20000088 	.word	0x20000088
 8002660:	20000098 	.word	0x20000098
 8002664:	200001c5 	.word	0x200001c5
 8002668:	20000108 	.word	0x20000108
 800266c:	20000374 	.word	0x20000374
 8002670:	2000031c 	.word	0x2000031c
 8002674:	20000034 	.word	0x20000034
 8002678:	00000000 	.word	0x00000000
 800267c:	20000000 	.word	0x20000000
			}
//			//Normal wheelchair mode, basic joystick control mode
			if (lifting_mode == NORMAL)
 8002680:	4bb9      	ldr	r3, [pc, #740]	; (8002968 <main+0x7d8>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d11f      	bne.n	80026c8 <main+0x538>
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002688:	2200      	movs	r2, #0
 800268a:	2108      	movs	r1, #8
 800268c:	48b7      	ldr	r0, [pc, #732]	; (800296c <main+0x7dc>)
 800268e:	f003 ffdd 	bl	800664c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8002692:	2200      	movs	r2, #0
 8002694:	2110      	movs	r1, #16
 8002696:	48b5      	ldr	r0, [pc, #724]	; (800296c <main+0x7dc>)
 8002698:	f003 ffd8 	bl	800664c <HAL_GPIO_WritePin>
				wheel_Control(&baseWheelSpeed);
 800269c:	48b4      	ldr	r0, [pc, #720]	; (8002970 <main+0x7e0>)
 800269e:	f001 ffff 	bl	80046a0 <wheel_Control>
				baseMotorCommand();
 80026a2:	f000 fd45 	bl	8003130 <baseMotorCommand>
				front_touchdown = false;
 80026a6:	4bb3      	ldr	r3, [pc, #716]	; (8002974 <main+0x7e4>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
				back_touchdown = false;
 80026ac:	4bb2      	ldr	r3, [pc, #712]	; (8002978 <main+0x7e8>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
				climb_first_iteration = true;
 80026b2:	4bb2      	ldr	r3, [pc, #712]	; (800297c <main+0x7ec>)
 80026b4:	2201      	movs	r2, #1
 80026b6:	701a      	strb	r2, [r3, #0]
				speed[FRONT_INDEX] = 0;
 80026b8:	4bb1      	ldr	r3, [pc, #708]	; (8002980 <main+0x7f0>)
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
				speed[BACK_INDEX] = 0;
 80026c0:	4baf      	ldr	r3, [pc, #700]	; (8002980 <main+0x7f0>)
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	605a      	str	r2, [r3, #4]
			}
//			//Climbing up process
			if (lifting_mode == CLIMB_UP)
 80026c8:	4ba7      	ldr	r3, [pc, #668]	; (8002968 <main+0x7d8>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	f040 8179 	bne.w	80029c4 <main+0x834>
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80026d2:	2201      	movs	r2, #1
 80026d4:	2108      	movs	r1, #8
 80026d6:	48a5      	ldr	r0, [pc, #660]	; (800296c <main+0x7dc>)
 80026d8:	f003 ffb8 	bl	800664c <HAL_GPIO_WritePin>
				if (climb_first_iteration)
 80026dc:	4ba7      	ldr	r3, [pc, #668]	; (800297c <main+0x7ec>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80f6 	beq.w	80028d2 <main+0x742>
				{
					//If curb_height is positive, should be climbing up process and vice versa
					curb_height = CLIMBING_LEG_LENGTH
							* cos(TO_RAD(encoderFront.angleDeg)) + BASE_HEIGHT
 80026e6:	4ba7      	ldr	r3, [pc, #668]	; (8002984 <main+0x7f4>)
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fd fee5 	bl	80004b8 <__aeabi_f2d>
 80026ee:	4604      	mov	r4, r0
 80026f0:	460d      	mov	r5, r1
 80026f2:	4ba5      	ldr	r3, [pc, #660]	; (8002988 <main+0x7f8>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fd fede 	bl	80004b8 <__aeabi_f2d>
 80026fc:	a390      	add	r3, pc, #576	; (adr r3, 8002940 <main+0x7b0>)
 80026fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002702:	f7fd ff31 	bl	8000568 <__aeabi_dmul>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4610      	mov	r0, r2
 800270c:	4619      	mov	r1, r3
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	4b9e      	ldr	r3, [pc, #632]	; (800298c <main+0x7fc>)
 8002714:	f7fe f852 	bl	80007bc <__aeabi_ddiv>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	ec43 2b17 	vmov	d7, r2, r3
 8002720:	eeb0 0a47 	vmov.f32	s0, s14
 8002724:	eef0 0a67 	vmov.f32	s1, s15
 8002728:	f007 feca 	bl	800a4c0 <cos>
 800272c:	ec53 2b10 	vmov	r2, r3, d0
 8002730:	4620      	mov	r0, r4
 8002732:	4629      	mov	r1, r5
 8002734:	f7fd ff18 	bl	8000568 <__aeabi_dmul>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4614      	mov	r4, r2
 800273e:	461d      	mov	r5, r3
 8002740:	4b93      	ldr	r3, [pc, #588]	; (8002990 <main+0x800>)
 8002742:	4618      	mov	r0, r3
 8002744:	f7fd feb8 	bl	80004b8 <__aeabi_f2d>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4620      	mov	r0, r4
 800274e:	4629      	mov	r1, r5
 8002750:	f7fd fd54 	bl	80001fc <__adddf3>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
							- FRONT_CLIMB_WHEEL_DIAMETER / 2.0;
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	4b8c      	ldr	r3, [pc, #560]	; (8002994 <main+0x804>)
 8002762:	f7fd fd49 	bl	80001f8 <__aeabi_dsub>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4610      	mov	r0, r2
 800276c:	4619      	mov	r1, r3
 800276e:	f7fe f9f3 	bl	8000b58 <__aeabi_d2f>
 8002772:	4603      	mov	r3, r0
					curb_height = CLIMBING_LEG_LENGTH
 8002774:	4a88      	ldr	r2, [pc, #544]	; (8002998 <main+0x808>)
 8002776:	6013      	str	r3, [r2, #0]
					curb_height += 0.015; //Small error correction 10%
 8002778:	4b87      	ldr	r3, [pc, #540]	; (8002998 <main+0x808>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f7fd fe9b 	bl	80004b8 <__aeabi_f2d>
 8002782:	a371      	add	r3, pc, #452	; (adr r3, 8002948 <main+0x7b8>)
 8002784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002788:	f7fd fd38 	bl	80001fc <__adddf3>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	f7fe f9e0 	bl	8000b58 <__aeabi_d2f>
 8002798:	4603      	mov	r3, r0
 800279a:	4a7f      	ldr	r2, [pc, #508]	; (8002998 <main+0x808>)
 800279c:	6013      	str	r3, [r2, #0]

					//First determine whether is the height climb-able
					back_lifting_height = BACK_BASE_HEIGHT + curb_height
 800279e:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800299c <main+0x80c>
 80027a2:	4b7d      	ldr	r3, [pc, #500]	; (8002998 <main+0x808>)
 80027a4:	edd3 7a00 	vldr	s15, [r3]
 80027a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ac:	ee17 0a90 	vmov	r0, s15
 80027b0:	f7fd fe82 	bl	80004b8 <__aeabi_f2d>
							- HUB_DIAMETER / 2;
 80027b4:	a366      	add	r3, pc, #408	; (adr r3, 8002950 <main+0x7c0>)
 80027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ba:	f7fd fd1d 	bl	80001f8 <__aeabi_dsub>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4610      	mov	r0, r2
 80027c4:	4619      	mov	r1, r3
 80027c6:	f7fe f9c7 	bl	8000b58 <__aeabi_d2f>
 80027ca:	4603      	mov	r3, r0
					back_lifting_height = BACK_BASE_HEIGHT + curb_height
 80027cc:	4a74      	ldr	r2, [pc, #464]	; (80029a0 <main+0x810>)
 80027ce:	6013      	str	r3, [r2, #0]
					back_lifting_angle =
					TO_DEG(
 80027d0:	4b73      	ldr	r3, [pc, #460]	; (80029a0 <main+0x810>)
 80027d2:	edd3 7a00 	vldr	s15, [r3]
 80027d6:	eef1 7a67 	vneg.f32	s15, s15
 80027da:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80029a4 <main+0x814>
 80027de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027e2:	ee16 0a90 	vmov	r0, s13
 80027e6:	f7fd fe67 	bl	80004b8 <__aeabi_f2d>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	ec43 2b10 	vmov	d0, r2, r3
 80027f2:	f007 ff15 	bl	800a620 <acos>
 80027f6:	ec53 2b10 	vmov	r2, r3, d0
 80027fa:	4610      	mov	r0, r2
 80027fc:	4619      	mov	r1, r3
 80027fe:	f7fe f9ab 	bl	8000b58 <__aeabi_d2f>
 8002802:	ee07 0a10 	vmov	s14, r0
 8002806:	eddf 7a68 	vldr	s15, [pc, #416]	; 80029a8 <main+0x818>
 800280a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800280e:	ee17 0a90 	vmov	r0, s15
 8002812:	f7fd fe51 	bl	80004b8 <__aeabi_f2d>
 8002816:	a34a      	add	r3, pc, #296	; (adr r3, 8002940 <main+0x7b0>)
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	f7fd ffce 	bl	80007bc <__aeabi_ddiv>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4610      	mov	r0, r2
 8002826:	4619      	mov	r1, r3
							(float )acos(
									-back_lifting_height
									/ CLIMBING_LEG_LENGTH)) - 30.0; //30.0 is the bending angle of the extender(originally 36.6).
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	4b5f      	ldr	r3, [pc, #380]	; (80029ac <main+0x81c>)
 800282e:	f7fd fce3 	bl	80001f8 <__aeabi_dsub>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4610      	mov	r0, r2
 8002838:	4619      	mov	r1, r3
 800283a:	f7fe f98d 	bl	8000b58 <__aeabi_d2f>
 800283e:	4603      	mov	r3, r0
					back_lifting_angle =
 8002840:	4a5b      	ldr	r2, [pc, #364]	; (80029b0 <main+0x820>)
 8002842:	6013      	str	r3, [r2, #0]
					back_encoder_input = (back_lifting_angle / 360.0)
 8002844:	4b5a      	ldr	r3, [pc, #360]	; (80029b0 <main+0x820>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f7fd fe35 	bl	80004b8 <__aeabi_f2d>
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	4b58      	ldr	r3, [pc, #352]	; (80029b4 <main+0x824>)
 8002854:	f7fd ffb2 	bl	80007bc <__aeabi_ddiv>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4610      	mov	r0, r2
 800285e:	4619      	mov	r1, r3
							* (4096 * BACK_GEAR_RATIO);
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	4b54      	ldr	r3, [pc, #336]	; (80029b8 <main+0x828>)
 8002866:	f7fd fe7f 	bl	8000568 <__aeabi_dmul>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
					back_encoder_input = (back_lifting_angle / 360.0)
 800286e:	4610      	mov	r0, r2
 8002870:	4619      	mov	r1, r3
 8002872:	f7fe f929 	bl	8000ac8 <__aeabi_d2iz>
 8002876:	4603      	mov	r3, r0
 8002878:	4a50      	ldr	r2, [pc, #320]	; (80029bc <main+0x82c>)
 800287a:	6013      	str	r3, [r2, #0]

					//3 different scenerio to abort the climbing up task
					//1. The angle calculated is not feasible
					//2. The leg rotate more than it supposed to
					//3. The curb height is too low where climbing up is unnecessary
					if (isnan(back_lifting_angle)
 800287c:	4b4c      	ldr	r3, [pc, #304]	; (80029b0 <main+0x820>)
 800287e:	edd3 7a00 	vldr	s15, [r3]
 8002882:	eef4 7a67 	vcmp.f32	s15, s15
 8002886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288a:	d613      	bvs.n	80028b4 <main+0x724>
							|| back_encoder_input >= MAX_BACK_ALLOWABLE_ENC
 800288c:	4b4b      	ldr	r3, [pc, #300]	; (80029bc <main+0x82c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002896:	429a      	cmp	r2, r3
 8002898:	d20c      	bcs.n	80028b4 <main+0x724>
								|| curb_height <= 0.05 )
 800289a:	4b3f      	ldr	r3, [pc, #252]	; (8002998 <main+0x808>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fd fe0a 	bl	80004b8 <__aeabi_f2d>
 80028a4:	a32c      	add	r3, pc, #176	; (adr r3, 8002958 <main+0x7c8>)
 80028a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028aa:	f7fe f8d9 	bl	8000a60 <__aeabi_dcmple>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <main+0x72c>
					{
						lifting_mode = RETRACTION;
 80028b4:	4b2c      	ldr	r3, [pc, #176]	; (8002968 <main+0x7d8>)
 80028b6:	2203      	movs	r2, #3
 80028b8:	701a      	strb	r2, [r3, #0]
						continue;
 80028ba:	e1b9      	b.n	8002c30 <main+0xaa0>
					}
					speed[BACK_INDEX] = 0;
 80028bc:	4b30      	ldr	r3, [pc, #192]	; (8002980 <main+0x7f0>)
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	605a      	str	r2, [r3, #4]
					speed[FRONT_INDEX] = 0;
 80028c4:	4b2e      	ldr	r3, [pc, #184]	; (8002980 <main+0x7f0>)
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
					climb_first_iteration = false;
 80028cc:	4b2b      	ldr	r3, [pc, #172]	; (800297c <main+0x7ec>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]

				}
				//Mathematical Model
				if (!in_climb_process(MAX_FRONT_CLIMBING_ENC, back_encoder_input) && !(climbingForward(forward_distance+0.03)))
 80028d2:	f240 739e 	movw	r3, #1950	; 0x79e
 80028d6:	461a      	mov	r2, r3
 80028d8:	4b38      	ldr	r3, [pc, #224]	; (80029bc <main+0x82c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4619      	mov	r1, r3
 80028de:	4610      	mov	r0, r2
 80028e0:	f000 fe52 	bl	8003588 <in_climb_process>
 80028e4:	4603      	mov	r3, r0
 80028e6:	f083 0301 	eor.w	r3, r3, #1
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80b6 	beq.w	8002a5e <main+0x8ce>
 80028f2:	4b33      	ldr	r3, [pc, #204]	; (80029c0 <main+0x830>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fd fdde 	bl	80004b8 <__aeabi_f2d>
 80028fc:	a318      	add	r3, pc, #96	; (adr r3, 8002960 <main+0x7d0>)
 80028fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002902:	f7fd fc7b 	bl	80001fc <__adddf3>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4610      	mov	r0, r2
 800290c:	4619      	mov	r1, r3
 800290e:	f7fe f923 	bl	8000b58 <__aeabi_d2f>
 8002912:	4603      	mov	r3, r0
 8002914:	ee00 3a10 	vmov	s0, r3
 8002918:	f000 fc2e 	bl	8003178 <climbingForward>
 800291c:	4603      	mov	r3, r0
 800291e:	f083 0301 	eor.w	r3, r3, #1
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 809a 	beq.w	8002a5e <main+0x8ce>
				{
					lifting_mode = RETRACTION;
 800292a:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <main+0x7d8>)
 800292c:	2203      	movs	r2, #3
 800292e:	701a      	strb	r2, [r3, #0]
					HAL_Delay(500);
 8002930:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002934:	f002 f980 	bl	8004c38 <HAL_Delay>
 8002938:	e091      	b.n	8002a5e <main+0x8ce>
 800293a:	bf00      	nop
 800293c:	f3af 8000 	nop.w
 8002940:	54442d18 	.word	0x54442d18
 8002944:	400921fb 	.word	0x400921fb
 8002948:	eb851eb8 	.word	0xeb851eb8
 800294c:	3f8eb851 	.word	0x3f8eb851
 8002950:	916872b0 	.word	0x916872b0
 8002954:	3faf7ced 	.word	0x3faf7ced
 8002958:	9999999a 	.word	0x9999999a
 800295c:	3fa99999 	.word	0x3fa99999
 8002960:	eb851eb8 	.word	0xeb851eb8
 8002964:	3f9eb851 	.word	0x3f9eb851
 8002968:	20000108 	.word	0x20000108
 800296c:	40020400 	.word	0x40020400
 8002970:	200000d8 	.word	0x200000d8
 8002974:	200001c4 	.word	0x200001c4
 8002978:	200001c5 	.word	0x200001c5
 800297c:	20000109 	.word	0x20000109
 8002980:	200001c8 	.word	0x200001c8
 8002984:	3eb2b021 	.word	0x3eb2b021
 8002988:	2000031c 	.word	0x2000031c
 800298c:	40668000 	.word	0x40668000
 8002990:	3e19999a 	.word	0x3e19999a
 8002994:	3fb00000 	.word	0x3fb00000
 8002998:	200001e8 	.word	0x200001e8
 800299c:	3e19999a 	.word	0x3e19999a
 80029a0:	200001f0 	.word	0x200001f0
 80029a4:	3eb2b021 	.word	0x3eb2b021
 80029a8:	43340000 	.word	0x43340000
 80029ac:	403e0000 	.word	0x403e0000
 80029b0:	200001f4 	.word	0x200001f4
 80029b4:	40768000 	.word	0x40768000
 80029b8:	40c00000 	.word	0x40c00000
 80029bc:	200001f8 	.word	0x200001f8
 80029c0:	20000124 	.word	0x20000124
//					HAL_Delay(500);
//				}

			}

			else if (lifting_mode == CLIMB_DOWN)
 80029c4:	4b9e      	ldr	r3, [pc, #632]	; (8002c40 <main+0xab0>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d148      	bne.n	8002a5e <main+0x8ce>
			{
				//Climbing down process
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80029cc:	2201      	movs	r2, #1
 80029ce:	2110      	movs	r1, #16
 80029d0:	489c      	ldr	r0, [pc, #624]	; (8002c44 <main+0xab4>)
 80029d2:	f003 fe3b 	bl	800664c <HAL_GPIO_WritePin>
				if (climb_first_iteration)
 80029d6:	4b9c      	ldr	r3, [pc, #624]	; (8002c48 <main+0xab8>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d01d      	beq.n	8002a1a <main+0x88a>
				{
					front_climbDown_enc = encoderFront.encoder_pos
 80029de:	4b9b      	ldr	r3, [pc, #620]	; (8002c4c <main+0xabc>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							+ 5.0 / 360.0 * 4096 * FRONT_GEAR_RATIO;
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd fd46 	bl	8000474 <__aeabi_ui2d>
 80029e8:	a393      	add	r3, pc, #588	; (adr r3, 8002c38 <main+0xaa8>)
 80029ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ee:	f7fd fc05 	bl	80001fc <__adddf3>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
					front_climbDown_enc = encoderFront.encoder_pos
 80029f6:	4610      	mov	r0, r2
 80029f8:	4619      	mov	r1, r3
 80029fa:	f7fe f865 	bl	8000ac8 <__aeabi_d2iz>
 80029fe:	4603      	mov	r3, r0
 8002a00:	4a93      	ldr	r2, [pc, #588]	; (8002c50 <main+0xac0>)
 8002a02:	6013      	str	r3, [r2, #0]
//					if (front_climbDown_enc > MAX_FRONT_ALLOWABLE_ENC )
//					{
//						lifting_mode = RETRACTION;
//						continue;
//					}
					climb_first_iteration = false;
 8002a04:	4b90      	ldr	r3, [pc, #576]	; (8002c48 <main+0xab8>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	701a      	strb	r2, [r3, #0]

					speed[BACK_INDEX] = 0;
 8002a0a:	4b92      	ldr	r3, [pc, #584]	; (8002c54 <main+0xac4>)
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	605a      	str	r2, [r3, #4]
					speed[FRONT_INDEX] = 0;
 8002a12:	4b90      	ldr	r3, [pc, #576]	; (8002c54 <main+0xac4>)
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
				}

				if (!in_climb_process(front_climbDown_enc,
 8002a1a:	4b8d      	ldr	r3, [pc, #564]	; (8002c50 <main+0xac0>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f240 723a 	movw	r2, #1850	; 0x73a
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 fdaf 	bl	8003588 <in_climb_process>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	f083 0301 	eor.w	r3, r3, #1
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d013      	beq.n	8002a5e <main+0x8ce>
						MAX_BACK_CLIMBING_ENC)
						&& !(climbingForward(forward_distance)))
 8002a36:	4b88      	ldr	r3, [pc, #544]	; (8002c58 <main+0xac8>)
 8002a38:	edd3 7a00 	vldr	s15, [r3]
 8002a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a40:	f000 fb9a 	bl	8003178 <climbingForward>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f083 0301 	eor.w	r3, r3, #1
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d006      	beq.n	8002a5e <main+0x8ce>
				{
					lifting_mode = RETRACTION;
 8002a50:	4b7b      	ldr	r3, [pc, #492]	; (8002c40 <main+0xab0>)
 8002a52:	2203      	movs	r2, #3
 8002a54:	701a      	strb	r2, [r3, #0]
					HAL_Delay(500);
 8002a56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a5a:	f002 f8ed 	bl	8004c38 <HAL_Delay>
//									lifting_mode = IDLE;
//									HAL_Delay(500);
//								}
			}
//
			if (lifting_mode == RETRACTION)
 8002a5e:	4b78      	ldr	r3, [pc, #480]	; (8002c40 <main+0xab0>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d142      	bne.n	8002aec <main+0x95c>
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002a66:	2201      	movs	r2, #1
 8002a68:	2108      	movs	r1, #8
 8002a6a:	4876      	ldr	r0, [pc, #472]	; (8002c44 <main+0xab4>)
 8002a6c:	f003 fdee 	bl	800664c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8002a70:	2201      	movs	r2, #1
 8002a72:	2110      	movs	r1, #16
 8002a74:	4873      	ldr	r0, [pc, #460]	; (8002c44 <main+0xab4>)
 8002a76:	f003 fde9 	bl	800664c <HAL_GPIO_WritePin>
				//retraction process
				if (abs(encoderBack.encoder_pos- (0)) > 30
 8002a7a:	4b78      	ldr	r3, [pc, #480]	; (8002c5c <main+0xacc>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	bfb8      	it	lt
 8002a82:	425b      	neglt	r3, r3
 8002a84:	2b1e      	cmp	r3, #30
 8002a86:	dc09      	bgt.n	8002a9c <main+0x90c>
						|| abs(encoderFront.encoder_pos - (MIN_FRONT_ALLOWABLE_ENC))
 8002a88:	4b70      	ldr	r3, [pc, #448]	; (8002c4c <main+0xabc>)
 8002a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8c:	f641 12c8 	movw	r2, #6600	; 0x19c8
 8002a90:	1a9b      	subs	r3, r3, r2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	bfb8      	it	lt
 8002a96:	425b      	neglt	r3, r3
 8002a98:	2b1e      	cmp	r3, #30
 8002a9a:	dd22      	ble.n	8002ae2 <main+0x952>
								> 30)
				{
//					goto_pos(MIN_BACK_ALLOWABLE_ENC, backClimb_pid);
					goto_pos(0, backClimb_pid);
 8002a9c:	4b70      	ldr	r3, [pc, #448]	; (8002c60 <main+0xad0>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	f000 fc58 	bl	8003358 <goto_pos>
					goto_pos(MIN_FRONT_ALLOWABLE_ENC, frontClimb_pid);
 8002aa8:	f641 13c8 	movw	r3, #6600	; 0x19c8
 8002aac:	461a      	mov	r2, r3
 8002aae:	4b6d      	ldr	r3, [pc, #436]	; (8002c64 <main+0xad4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	f000 fc4f 	bl	8003358 <goto_pos>
					if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002aba:	4b66      	ldr	r3, [pc, #408]	; (8002c54 <main+0xac4>)
 8002abc:	edd3 7a00 	vldr	s15, [r3]
 8002ac0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac8:	d10f      	bne.n	8002aea <main+0x95a>
 8002aca:	4b62      	ldr	r3, [pc, #392]	; (8002c54 <main+0xac4>)
 8002acc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ad0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad8:	d107      	bne.n	8002aea <main+0x95a>
						lifting_mode = NORMAL;
 8002ada:	4b59      	ldr	r3, [pc, #356]	; (8002c40 <main+0xab0>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	701a      	strb	r2, [r3, #0]
					if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002ae0:	e003      	b.n	8002aea <main+0x95a>
				}
				else
				{

					lifting_mode = NORMAL;
 8002ae2:	4b57      	ldr	r3, [pc, #348]	; (8002c40 <main+0xab0>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	e000      	b.n	8002aec <main+0x95c>
					if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002aea:	bf00      	nop

			}

			//!Must not comment the following section
			//Deadzone of climbing motor, force zero to avoid noise
			if (fabs(speed[FRONT_INDEX]) < 5)
 8002aec:	4b59      	ldr	r3, [pc, #356]	; (8002c54 <main+0xac4>)
 8002aee:	edd3 7a00 	vldr	s15, [r3]
 8002af2:	eef0 7ae7 	vabs.f32	s15, s15
 8002af6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002afa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b02:	d503      	bpl.n	8002b0c <main+0x97c>
				speed[FRONT_INDEX] = 0;
 8002b04:	4b53      	ldr	r3, [pc, #332]	; (8002c54 <main+0xac4>)
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
			if (fabs(speed[BACK_INDEX]) < 5)
 8002b0c:	4b51      	ldr	r3, [pc, #324]	; (8002c54 <main+0xac4>)
 8002b0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b12:	eef0 7ae7 	vabs.f32	s15, s15
 8002b16:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002b1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b22:	d503      	bpl.n	8002b2c <main+0x99c>
				speed[BACK_INDEX] = 0;
 8002b24:	4b4b      	ldr	r3, [pc, #300]	; (8002c54 <main+0xac4>)
 8002b26:	f04f 0200 	mov.w	r2, #0
 8002b2a:	605a      	str	r2, [r3, #4]
			//*****VERY IMPORTANT AND MUST NOT BE COMMENTED OUT**********************************//
			//Safety check for to avoid the climbing leg overturn
			if (encoderFront.encoder_pos < FRONT_FULL_ROTATION_ENC / 2){
 8002b2c:	4b47      	ldr	r3, [pc, #284]	; (8002c4c <main+0xabc>)
 8002b2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b30:	f242 3333 	movw	r3, #9011	; 0x2333
 8002b34:	085b      	lsrs	r3, r3, #1
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d212      	bcs.n	8002b60 <main+0x9d0>
				if (encoderFront.encoder_pos > MAX_FRONT_ALLOWABLE_ENC && speed[FRONT_INDEX] > 0)
 8002b3a:	4b44      	ldr	r3, [pc, #272]	; (8002c4c <main+0xabc>)
 8002b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3e:	f640 421c 	movw	r2, #3100	; 0xc1c
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d91e      	bls.n	8002b84 <main+0x9f4>
 8002b46:	4b43      	ldr	r3, [pc, #268]	; (8002c54 <main+0xac4>)
 8002b48:	edd3 7a00 	vldr	s15, [r3]
 8002b4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b54:	dd16      	ble.n	8002b84 <main+0x9f4>
					speed[FRONT_INDEX] = 0;
 8002b56:	4b3f      	ldr	r3, [pc, #252]	; (8002c54 <main+0xac4>)
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	e011      	b.n	8002b84 <main+0x9f4>
			}
			else{
				if (encoderFront.encoder_pos < MIN_FRONT_ALLOWABLE_ENC && speed[FRONT_INDEX] < 0)
 8002b60:	4b3a      	ldr	r3, [pc, #232]	; (8002c4c <main+0xabc>)
 8002b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b64:	f641 12c8 	movw	r2, #6600	; 0x19c8
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d20b      	bcs.n	8002b84 <main+0x9f4>
 8002b6c:	4b39      	ldr	r3, [pc, #228]	; (8002c54 <main+0xac4>)
 8002b6e:	edd3 7a00 	vldr	s15, [r3]
 8002b72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7a:	d503      	bpl.n	8002b84 <main+0x9f4>
					speed[FRONT_INDEX] = 0;
 8002b7c:	4b35      	ldr	r3, [pc, #212]	; (8002c54 <main+0xac4>)
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
			}

			if (encoderBack.encoder_pos < BACK_FULL_ROTATION_ENC / 2){
 8002b84:	4b35      	ldr	r3, [pc, #212]	; (8002c5c <main+0xacc>)
 8002b86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b8c:	085b      	lsrs	r3, r3, #1
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d212      	bcs.n	8002bb8 <main+0xa28>
				if (encoderBack.encoder_pos > MAX_BACK_ALLOWABLE_ENC && speed[BACK_INDEX] > 0)
 8002b92:	4b32      	ldr	r3, [pc, #200]	; (8002c5c <main+0xacc>)
 8002b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b96:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d91e      	bls.n	8002bdc <main+0xa4c>
 8002b9e:	4b2d      	ldr	r3, [pc, #180]	; (8002c54 <main+0xac4>)
 8002ba0:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ba4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bac:	dd16      	ble.n	8002bdc <main+0xa4c>
					speed[BACK_INDEX] = 0;
 8002bae:	4b29      	ldr	r3, [pc, #164]	; (8002c54 <main+0xac4>)
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	e011      	b.n	8002bdc <main+0xa4c>
			}
			else{
				if (encoderBack.encoder_pos < MIN_BACK_ALLOWABLE_ENC && speed[BACK_INDEX] < 0)
 8002bb8:	4b28      	ldr	r3, [pc, #160]	; (8002c5c <main+0xacc>)
 8002bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbc:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d20b      	bcs.n	8002bdc <main+0xa4c>
 8002bc4:	4b23      	ldr	r3, [pc, #140]	; (8002c54 <main+0xac4>)
 8002bc6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd2:	d503      	bpl.n	8002bdc <main+0xa4c>
					speed[BACK_INDEX] = 0;
 8002bd4:	4b1f      	ldr	r3, [pc, #124]	; (8002c54 <main+0xac4>)
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	605a      	str	r2, [r3, #4]
			}
			//**********************************************************************************//

			runMotor(&rearMotor, speed[FRONT_INDEX]);
 8002bdc:	4b1d      	ldr	r3, [pc, #116]	; (8002c54 <main+0xac4>)
 8002bde:	edd3 7a00 	vldr	s15, [r3]
 8002be2:	eeb0 0a67 	vmov.f32	s0, s15
 8002be6:	4820      	ldr	r0, [pc, #128]	; (8002c68 <main+0xad8>)
 8002be8:	f7fe fe62 	bl	80018b0 <runMotor>
			runMotor(&backMotor, speed[BACK_INDEX]);
 8002bec:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <main+0xac4>)
 8002bee:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf6:	481d      	ldr	r0, [pc, #116]	; (8002c6c <main+0xadc>)
 8002bf8:	f7fe fe5a 	bl	80018b0 <runMotor>

			if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002bfc:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <main+0xac4>)
 8002bfe:	edd3 7a00 	vldr	s15, [r3]
 8002c02:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0a:	d10b      	bne.n	8002c24 <main+0xa94>
 8002c0c:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <main+0xac4>)
 8002c0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1a:	d103      	bne.n	8002c24 <main+0xa94>
				emBrakeMotor(0);
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	f7fe fd61 	bl	80016e4 <emBrakeMotor>
 8002c22:	e002      	b.n	8002c2a <main+0xa9a>
			else
				emBrakeMotor(1);
 8002c24:	2001      	movs	r0, #1
 8002c26:	f7fe fd5d 	bl	80016e4 <emBrakeMotor>

			prev_time = HAL_GetTick();
 8002c2a:	f001 fff9 	bl	8004c20 <HAL_GetTick>
 8002c2e:	6078      	str	r0, [r7, #4]
		if (HAL_GetTick() - prev_time >= 1)
 8002c30:	f7ff bb98 	b.w	8002364 <main+0x1d4>
 8002c34:	f3af 8000 	nop.w
 8002c38:	9f49f4a0 	.word	0x9f49f4a0
 8002c3c:	405f49f4 	.word	0x405f49f4
 8002c40:	20000108 	.word	0x20000108
 8002c44:	40020400 	.word	0x40020400
 8002c48:	20000109 	.word	0x20000109
 8002c4c:	2000031c 	.word	0x2000031c
 8002c50:	200001ec 	.word	0x200001ec
 8002c54:	200001c8 	.word	0x200001c8
 8002c58:	20000124 	.word	0x20000124
 8002c5c:	20000374 	.word	0x20000374
 8002c60:	20000520 	.word	0x20000520
 8002c64:	200004d4 	.word	0x200004d4
 8002c68:	20000000 	.word	0x20000000
 8002c6c:	20000034 	.word	0x20000034

08002c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b094      	sub	sp, #80	; 0x50
 8002c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c76:	f107 0320 	add.w	r3, r7, #32
 8002c7a:	2230      	movs	r2, #48	; 0x30
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f007 fa76 	bl	800a170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c84:	f107 030c 	add.w	r3, r7, #12
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c94:	2300      	movs	r3, #0
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	4b2b      	ldr	r3, [pc, #172]	; (8002d48 <SystemClock_Config+0xd8>)
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	4a2a      	ldr	r2, [pc, #168]	; (8002d48 <SystemClock_Config+0xd8>)
 8002c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca4:	4b28      	ldr	r3, [pc, #160]	; (8002d48 <SystemClock_Config+0xd8>)
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	607b      	str	r3, [r7, #4]
 8002cb4:	4b25      	ldr	r3, [pc, #148]	; (8002d4c <SystemClock_Config+0xdc>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a24      	ldr	r2, [pc, #144]	; (8002d4c <SystemClock_Config+0xdc>)
 8002cba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	4b22      	ldr	r3, [pc, #136]	; (8002d4c <SystemClock_Config+0xdc>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002cd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002cda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002ce0:	2308      	movs	r3, #8
 8002ce2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002ce4:	23b4      	movs	r3, #180	; 0xb4
 8002ce6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002cec:	2304      	movs	r3, #4
 8002cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cf0:	f107 0320 	add.w	r3, r7, #32
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f003 feeb 	bl	8006ad0 <HAL_RCC_OscConfig>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002d00:	f000 fd64 	bl	80037cc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002d04:	f003 fe94 	bl	8006a30 <HAL_PWREx_EnableOverDrive>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8002d0e:	f000 fd5d 	bl	80037cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d12:	230f      	movs	r3, #15
 8002d14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d16:	2302      	movs	r3, #2
 8002d18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002d2a:	f107 030c 	add.w	r3, r7, #12
 8002d2e:	2105      	movs	r1, #5
 8002d30:	4618      	mov	r0, r3
 8002d32:	f004 f93d 	bl	8006fb0 <HAL_RCC_ClockConfig>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002d3c:	f000 fd46 	bl	80037cc <Error_Handler>
  }
}
 8002d40:	bf00      	nop
 8002d42:	3750      	adds	r7, #80	; 0x50
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40007000 	.word	0x40007000

08002d50 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 8002d5a:	88fb      	ldrh	r3, [r7, #6]
 8002d5c:	2b80      	cmp	r3, #128	; 0x80
 8002d5e:	d11c      	bne.n	8002d9a <HAL_GPIO_EXTI_Callback+0x4a>
	{
	case AD_BUSY_Pin:
	{
		if (HAL_GetTick() - prev_adc_time > 1)
 8002d60:	f001 ff5e 	bl	8004c20 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <HAL_GPIO_EXTI_Callback+0x58>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d916      	bls.n	8002d9e <HAL_GPIO_EXTI_Callback+0x4e>
		{
			ADC_Read(adc_rawData);
 8002d70:	480e      	ldr	r0, [pc, #56]	; (8002dac <HAL_GPIO_EXTI_Callback+0x5c>)
 8002d72:	f7fe fc79 	bl	8001668 <ADC_Read>
			tempJoyRawDataX = adc_rawData[2];
 8002d76:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <HAL_GPIO_EXTI_Callback+0x5c>)
 8002d78:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <HAL_GPIO_EXTI_Callback+0x60>)
 8002d80:	601a      	str	r2, [r3, #0]
			tempJoyRawDataY = adc_rawData[1];
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <HAL_GPIO_EXTI_Callback+0x5c>)
 8002d84:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <HAL_GPIO_EXTI_Callback+0x64>)
 8002d8c:	601a      	str	r2, [r3, #0]
			prev_adc_time = HAL_GetTick();
 8002d8e:	f001 ff47 	bl	8004c20 <HAL_GetTick>
 8002d92:	4603      	mov	r3, r0
 8002d94:	4a04      	ldr	r2, [pc, #16]	; (8002da8 <HAL_GPIO_EXTI_Callback+0x58>)
 8002d96:	6013      	str	r3, [r2, #0]
		}
	}
		break;
 8002d98:	e001      	b.n	8002d9e <HAL_GPIO_EXTI_Callback+0x4e>
	default:
		break;
 8002d9a:	bf00      	nop
 8002d9c:	e000      	b.n	8002da0 <HAL_GPIO_EXTI_Callback+0x50>
		break;
 8002d9e:	bf00      	nop
	}
}
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	200001bc 	.word	0x200001bc
 8002dac:	200004c4 	.word	0x200004c4
 8002db0:	2000051c 	.word	0x2000051c
 8002db4:	20000420 	.word	0x20000420

08002db8 <HAL_UART_RxCpltCallback>:
//
//	}
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	//Hub Encoder callback
	if (huart->Instance == USART3)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a3f      	ldr	r2, [pc, #252]	; (8002ec4 <HAL_UART_RxCpltCallback+0x10c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d175      	bne.n	8002eb6 <HAL_UART_RxCpltCallback+0xfe>
	{
		//Checksum, make sure that response is correct
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 8002dca:	4b3f      	ldr	r3, [pc, #252]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	4b3d      	ldr	r3, [pc, #244]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002dd2:	785b      	ldrb	r3, [r3, #1]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[2] + (uint16_t) receive_buf[3]
 8002dda:	4b3b      	ldr	r3, [pc, #236]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002ddc:	789b      	ldrb	r3, [r3, #2]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	4413      	add	r3, r2
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	4b38      	ldr	r3, [pc, #224]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002de6:	78db      	ldrb	r3, [r3, #3]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	4413      	add	r3, r2
 8002dec:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[4] + (uint16_t) receive_buf[5]
 8002dee:	4b36      	ldr	r3, [pc, #216]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002df0:	791b      	ldrb	r3, [r3, #4]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	4413      	add	r3, r2
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	4b33      	ldr	r3, [pc, #204]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002dfa:	795b      	ldrb	r3, [r3, #5]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[6] + (uint16_t) receive_buf[7]
 8002e02:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002e04:	799b      	ldrb	r3, [r3, #6]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	4413      	add	r3, r2
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	4b2e      	ldr	r3, [pc, #184]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002e0e:	79db      	ldrb	r3, [r3, #7]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[8] + (uint16_t) receive_buf[9]
 8002e16:	4b2c      	ldr	r3, [pc, #176]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002e18:	7a1b      	ldrb	r3, [r3, #8]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	4b29      	ldr	r3, [pc, #164]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002e22:	7a5b      	ldrb	r3, [r3, #9]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	4413      	add	r3, r2
 8002e28:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[10] + (uint16_t) receive_buf[11]
 8002e2a:	4b27      	ldr	r3, [pc, #156]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002e2c:	7a9b      	ldrb	r3, [r3, #10]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	4413      	add	r3, r2
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	4b24      	ldr	r3, [pc, #144]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002e36:	7adb      	ldrb	r3, [r3, #11]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[12] + (uint16_t) receive_buf[13];
 8002e3e:	4b22      	ldr	r3, [pc, #136]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002e40:	7b1b      	ldrb	r3, [r3, #12]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	4b1f      	ldr	r3, [pc, #124]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002e4a:	7b5b      	ldrb	r3, [r3, #13]
 8002e4c:	b29b      	uxth	r3, r3
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 8002e4e:	4413      	add	r3, r2
 8002e50:	81fb      	strh	r3, [r7, #14]
		if ((uint8_t) sum == receive_buf[14])
 8002e52:	89fb      	ldrh	r3, [r7, #14]
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002e58:	7b9b      	ldrb	r3, [r3, #14]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d12b      	bne.n	8002eb6 <HAL_UART_RxCpltCallback+0xfe>
		{
			//Encoder Feedback
			if (receive_buf[0] == 0xAA && receive_buf[1] == 0xA4
 8002e5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2baa      	cmp	r3, #170	; 0xaa
 8002e64:	d127      	bne.n	8002eb6 <HAL_UART_RxCpltCallback+0xfe>
 8002e66:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002e68:	785b      	ldrb	r3, [r3, #1]
 8002e6a:	2ba4      	cmp	r3, #164	; 0xa4
 8002e6c:	d123      	bne.n	8002eb6 <HAL_UART_RxCpltCallback+0xfe>
					&& receive_buf[3] == 0x00)
 8002e6e:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002e70:	78db      	ldrb	r3, [r3, #3]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d11f      	bne.n	8002eb6 <HAL_UART_RxCpltCallback+0xfe>
			{
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 8002e76:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002e78:	7a5b      	ldrb	r3, [r3, #9]
 8002e7a:	061a      	lsls	r2, r3, #24
						+ (receive_buf[8] << 16) + (receive_buf[7] << 8)
 8002e7c:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002e7e:	7a1b      	ldrb	r3, [r3, #8]
 8002e80:	041b      	lsls	r3, r3, #16
 8002e82:	441a      	add	r2, r3
 8002e84:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002e86:	79db      	ldrb	r3, [r3, #7]
 8002e88:	021b      	lsls	r3, r3, #8
 8002e8a:	4413      	add	r3, r2
						+ (receive_buf[6]);
 8002e8c:	4a0e      	ldr	r2, [pc, #56]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002e8e:	7992      	ldrb	r2, [r2, #6]
 8002e90:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 8002e92:	4a0e      	ldr	r2, [pc, #56]	; (8002ecc <HAL_UART_RxCpltCallback+0x114>)
 8002e94:	6013      	str	r3, [r2, #0]
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 8002e96:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002e98:	7b5b      	ldrb	r3, [r3, #13]
 8002e9a:	061a      	lsls	r2, r3, #24
						+ (receive_buf[12] << 16) + (receive_buf[11] << 8)
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002e9e:	7b1b      	ldrb	r3, [r3, #12]
 8002ea0:	041b      	lsls	r3, r3, #16
 8002ea2:	441a      	add	r2, r3
 8002ea4:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002ea6:	7adb      	ldrb	r3, [r3, #11]
 8002ea8:	021b      	lsls	r3, r3, #8
 8002eaa:	4413      	add	r3, r2
						+ (receive_buf[10]);
 8002eac:	4a06      	ldr	r2, [pc, #24]	; (8002ec8 <HAL_UART_RxCpltCallback+0x110>)
 8002eae:	7a92      	ldrb	r2, [r2, #10]
 8002eb0:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 8002eb2:	4a06      	ldr	r2, [pc, #24]	; (8002ecc <HAL_UART_RxCpltCallback+0x114>)
 8002eb4:	6053      	str	r3, [r2, #4]
			}
		}
	}

}
 8002eb6:	bf00      	nop
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40004800 	.word	0x40004800
 8002ec8:	2000050c 	.word	0x2000050c
 8002ecc:	20000424 	.word	0x20000424

08002ed0 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	//Left Encoder Callback
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	if (hcan == &hcan1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a8d      	ldr	r2, [pc, #564]	; (8003110 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	f040 810b 	bne.w	80030f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 8002ee2:	f107 0308 	add.w	r3, r7, #8
 8002ee6:	4a8b      	ldr	r2, [pc, #556]	; (8003114 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8002ee8:	2100      	movs	r1, #0
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f002 f9c3 	bl	8005276 <HAL_CAN_GetRxMessage>
		if (incoming[1] == ENC_ADDR_LEFT)
 8002ef0:	7a7b      	ldrb	r3, [r7, #9]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d150      	bne.n	8002f98 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
		{
			ENCODER_Sort_Incoming(incoming, &encoderBack);
 8002ef6:	f107 0308 	add.w	r3, r7, #8
 8002efa:	4987      	ldr	r1, [pc, #540]	; (8003118 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fe fe7f 	bl	8001c00 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderBack);
 8002f02:	4885      	ldr	r0, [pc, #532]	; (8003118 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002f04:	f7fe fef5 	bl	8001cf2 <ENCODER_Get_Angle>
			//Process the angle and GR
			//4096 is encoder single turn value
			//Need to check the encoder value in the correct direction
			encoderBack.encoder_pos = (uint32_t)((4096 * BACK_GEAR_RATIO)
					- encoderBack.encoder_pos)
 8002f08:	4b83      	ldr	r3, [pc, #524]	; (8003118 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							% (4096 * BACK_GEAR_RATIO);
 8002f0c:	425b      	negs	r3, r3
 8002f0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
			encoderBack.encoder_pos = (uint32_t)((4096 * BACK_GEAR_RATIO)
 8002f12:	4a81      	ldr	r2, [pc, #516]	; (8003118 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002f14:	6453      	str	r3, [r2, #68]	; 0x44
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 8002f16:	4b80      	ldr	r3, [pc, #512]	; (8003118 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1a:	ee07 3a90 	vmov	s15, r3
 8002f1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					/ (4096 * BACK_GEAR_RATIO) * 360 + 36.587;
 8002f22:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800311c <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>
 8002f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f2a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8003120 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 8002f2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f32:	ee17 0a90 	vmov	r0, s15
 8002f36:	f7fd fabf 	bl	80004b8 <__aeabi_f2d>
 8002f3a:	a371      	add	r3, pc, #452	; (adr r3, 8003100 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8002f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f40:	f7fd f95c 	bl	80001fc <__adddf3>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4610      	mov	r0, r2
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	f7fd fe04 	bl	8000b58 <__aeabi_d2f>
 8002f50:	4603      	mov	r3, r0
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 8002f52:	4a71      	ldr	r2, [pc, #452]	; (8003118 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002f54:	6413      	str	r3, [r2, #64]	; 0x40
			if (encoderBack.angleDeg > 360)
 8002f56:	4b70      	ldr	r3, [pc, #448]	; (8003118 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002f58:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002f5c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8003120 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 8002f60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f68:	dd09      	ble.n	8002f7e <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
				encoderBack.angleDeg -= 360;
 8002f6a:	4b6b      	ldr	r3, [pc, #428]	; (8003118 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002f6c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002f70:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8003120 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 8002f74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f78:	4b67      	ldr	r3, [pc, #412]	; (8003118 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002f7a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			if (encoderBack.encoder_pos >= MAX_BACK_ALLOWABLE_ENC)
 8002f7e:	4b66      	ldr	r3, [pc, #408]	; (8003118 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d306      	bcc.n	8002f98 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
				encoderBack.signed_encoder_pos = encoderBack.encoder_pos
 8002f8a:	4b63      	ldr	r3, [pc, #396]	; (8003118 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
						- 4096 * BACK_GEAR_RATIO;
 8002f8e:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8002f92:	461a      	mov	r2, r3
				encoderBack.signed_encoder_pos = encoderBack.encoder_pos
 8002f94:	4b60      	ldr	r3, [pc, #384]	; (8003118 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002f96:	649a      	str	r2, [r3, #72]	; 0x48
		}
		if (incoming[1] == ENC_ADDR_RIGHT)
 8002f98:	7a7b      	ldrb	r3, [r7, #9]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	f040 80ac 	bne.w	80030f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
		{
			ENCODER_Sort_Incoming(incoming, &encoderFront);
 8002fa0:	f107 0308 	add.w	r3, r7, #8
 8002fa4:	495f      	ldr	r1, [pc, #380]	; (8003124 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe fe2a 	bl	8001c00 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderFront);
 8002fac:	485d      	ldr	r0, [pc, #372]	; (8003124 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002fae:	f7fe fea0 	bl	8001cf2 <ENCODER_Get_Angle>
			if (4096 * 24 - encoderFront.encoder_pos < 30000)
 8002fb2:	4b5c      	ldr	r3, [pc, #368]	; (8003124 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	f5c3 33c0 	rsb	r3, r3, #98304	; 0x18000
 8002fba:	f247 522f 	movw	r2, #29999	; 0x752f
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d839      	bhi.n	8003036 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
			{
				encoderFront.encoder_pos =
						(4096 * 24 - encoderFront.encoder_pos)
 8002fc2:	4b58      	ldr	r3, [pc, #352]	; (8003124 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	f5c3 32c0 	rsb	r2, r3, #98304	; 0x18000
								% (uint32_t) (4096 * FRONT_GEAR_RATIO);
 8002fca:	4b57      	ldr	r3, [pc, #348]	; (8003128 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>)
 8002fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8002fd0:	0b5b      	lsrs	r3, r3, #13
 8002fd2:	f242 3133 	movw	r1, #9011	; 0x2333
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	1ad3      	subs	r3, r2, r3
				encoderFront.encoder_pos =
 8002fdc:	4a51      	ldr	r2, [pc, #324]	; (8003124 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002fde:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002fe0:	4b50      	ldr	r3, [pc, #320]	; (8003124 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe4:	ee07 3a90 	vmov	s15, r3
 8002fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fec:	ee17 0a90 	vmov	r0, s15
 8002ff0:	f7fd fa62 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587;
 8002ff4:	a344      	add	r3, pc, #272	; (adr r3, 8003108 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8002ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffa:	f7fd fbdf 	bl	80007bc <__aeabi_ddiv>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4610      	mov	r0, r2
 8003004:	4619      	mov	r1, r3
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	4b48      	ldr	r3, [pc, #288]	; (800312c <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 800300c:	f7fd faac 	bl	8000568 <__aeabi_dmul>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4610      	mov	r0, r2
 8003016:	4619      	mov	r1, r3
 8003018:	a339      	add	r3, pc, #228	; (adr r3, 8003100 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800301a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301e:	f7fd f8ed 	bl	80001fc <__adddf3>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	4610      	mov	r0, r2
 8003028:	4619      	mov	r1, r3
 800302a:	f7fd fd95 	bl	8000b58 <__aeabi_d2f>
 800302e:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8003030:	4a3c      	ldr	r2, [pc, #240]	; (8003124 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8003032:	6413      	str	r3, [r2, #64]	; 0x40
 8003034:	e047      	b.n	80030c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
			}
			else
			{
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
						- encoderFront.encoder_pos;
 8003036:	4b3b      	ldr	r3, [pc, #236]	; (8003124 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd fa1a 	bl	8000474 <__aeabi_ui2d>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	a130      	add	r1, pc, #192	; (adr r1, 8003108 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8003046:	e9d1 0100 	ldrd	r0, r1, [r1]
 800304a:	f7fd f8d5 	bl	80001f8 <__aeabi_dsub>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
 8003052:	4610      	mov	r0, r2
 8003054:	4619      	mov	r1, r3
 8003056:	f7fd fd5f 	bl	8000b18 <__aeabi_d2uiz>
 800305a:	4603      	mov	r3, r0
 800305c:	4a31      	ldr	r2, [pc, #196]	; (8003124 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 800305e:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8003060:	4b30      	ldr	r3, [pc, #192]	; (8003124 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8003062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003064:	ee07 3a90 	vmov	s15, r3
 8003068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800306c:	ee17 0a90 	vmov	r0, s15
 8003070:	f7fd fa22 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587 - 360;
 8003074:	a324      	add	r3, pc, #144	; (adr r3, 8003108 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8003076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307a:	f7fd fb9f 	bl	80007bc <__aeabi_ddiv>
 800307e:	4602      	mov	r2, r0
 8003080:	460b      	mov	r3, r1
 8003082:	4610      	mov	r0, r2
 8003084:	4619      	mov	r1, r3
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	4b28      	ldr	r3, [pc, #160]	; (800312c <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 800308c:	f7fd fa6c 	bl	8000568 <__aeabi_dmul>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4610      	mov	r0, r2
 8003096:	4619      	mov	r1, r3
 8003098:	a319      	add	r3, pc, #100	; (adr r3, 8003100 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309e:	f7fd f8ad 	bl	80001fc <__adddf3>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4610      	mov	r0, r2
 80030a8:	4619      	mov	r1, r3
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	4b1f      	ldr	r3, [pc, #124]	; (800312c <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 80030b0:	f7fd f8a2 	bl	80001f8 <__aeabi_dsub>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4610      	mov	r0, r2
 80030ba:	4619      	mov	r1, r3
 80030bc:	f7fd fd4c 	bl	8000b58 <__aeabi_d2f>
 80030c0:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 80030c2:	4a18      	ldr	r2, [pc, #96]	; (8003124 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80030c4:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (encoderFront.encoder_pos >= MAX_FRONT_ALLOWABLE_ENC)
 80030c6:	4b17      	ldr	r3, [pc, #92]	; (8003124 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	f640 421c 	movw	r2, #3100	; 0xc1c
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d312      	bcc.n	80030f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
				encoderFront.signed_encoder_pos = encoderFront.encoder_pos
 80030d2:	4b14      	ldr	r3, [pc, #80]	; (8003124 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
						- 4096 * FRONT_GEAR_RATIO;
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fd f9cc 	bl	8000474 <__aeabi_ui2d>
 80030dc:	a30a      	add	r3, pc, #40	; (adr r3, 8003108 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 80030de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e2:	f7fd f889 	bl	80001f8 <__aeabi_dsub>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
				encoderFront.signed_encoder_pos = encoderFront.encoder_pos
 80030ea:	4610      	mov	r0, r2
 80030ec:	4619      	mov	r1, r3
 80030ee:	f7fd fceb 	bl	8000ac8 <__aeabi_d2iz>
 80030f2:	4603      	mov	r3, r0
 80030f4:	4a0b      	ldr	r2, [pc, #44]	; (8003124 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80030f6:	6493      	str	r3, [r2, #72]	; 0x48
		}
	}
}
 80030f8:	bf00      	nop
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	d0e56042 	.word	0xd0e56042
 8003104:	40424b22 	.word	0x40424b22
 8003108:	9999999a 	.word	0x9999999a
 800310c:	40c19999 	.word	0x40c19999
 8003110:	200002cc 	.word	0x200002cc
 8003114:	20000214 	.word	0x20000214
 8003118:	20000374 	.word	0x20000374
 800311c:	46000000 	.word	0x46000000
 8003120:	43b40000 	.word	0x43b40000
 8003124:	2000031c 	.word	0x2000031c
 8003128:	e8bb8111 	.word	0xe8bb8111
 800312c:	40768000 	.word	0x40768000

08003130 <baseMotorCommand>:

void baseMotorCommand(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = (int) baseWheelSpeed.cur_r + 1500;
 8003134:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <baseMotorCommand+0x40>)
 8003136:	edd3 7a01 	vldr	s15, [r3, #4]
 800313a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800313e:	ee17 3a90 	vmov	r3, s15
 8003142:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 8003146:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <baseMotorCommand+0x44>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	635a      	str	r2, [r3, #52]	; 0x34
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = (int) baseWheelSpeed.cur_l + 1500;
 800314c:	4b08      	ldr	r3, [pc, #32]	; (8003170 <baseMotorCommand+0x40>)
 800314e:	edd3 7a00 	vldr	s15, [r3]
 8003152:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003156:	ee17 3a90 	vmov	r3, s15
 800315a:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <baseMotorCommand+0x44>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003164:	bf00      	nop
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	200000d8 	.word	0x200000d8
 8003174:	20000564 	.word	0x20000564

08003178 <climbingForward>:

//Hub motor move forward  by preset dist
bool climbingForward(float dist)
{
 8003178:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800317c:	b086      	sub	sp, #24
 800317e:	af00      	add	r7, sp, #0
 8003180:	ed87 0a01 	vstr	s0, [r7, #4]
	static float prev_dist_remaining;
	static int32_t prev_enc;
	static bool first_loop = true;
	static float dist_remaining;

	float rps = (dist >= 0) ? 1.0 : -1.0; //rad/s
 8003184:	edd7 7a01 	vldr	s15, [r7, #4]
 8003188:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800318c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003190:	db02      	blt.n	8003198 <climbingForward+0x20>
 8003192:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003196:	e000      	b.n	800319a <climbingForward+0x22>
 8003198:	4b65      	ldr	r3, [pc, #404]	; (8003330 <climbingForward+0x1b8>)
 800319a:	617b      	str	r3, [r7, #20]

	if (first_loop)
 800319c:	4b65      	ldr	r3, [pc, #404]	; (8003334 <climbingForward+0x1bc>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d011      	beq.n	80031c8 <climbingForward+0x50>
	{
		prev_enc = hub_encoder_feedback.encoder_2;
 80031a4:	4b64      	ldr	r3, [pc, #400]	; (8003338 <climbingForward+0x1c0>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	4a64      	ldr	r2, [pc, #400]	; (800333c <climbingForward+0x1c4>)
 80031aa:	6013      	str	r3, [r2, #0]
		prev_tick = HAL_GetTick();
 80031ac:	f001 fd38 	bl	8004c20 <HAL_GetTick>
 80031b0:	4603      	mov	r3, r0
 80031b2:	4a63      	ldr	r2, [pc, #396]	; (8003340 <climbingForward+0x1c8>)
 80031b4:	6013      	str	r3, [r2, #0]
		stationary_tick = 0;
 80031b6:	4b63      	ldr	r3, [pc, #396]	; (8003344 <climbingForward+0x1cc>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
		first_loop = false;
 80031bc:	4b5d      	ldr	r3, [pc, #372]	; (8003334 <climbingForward+0x1bc>)
 80031be:	2200      	movs	r2, #0
 80031c0:	701a      	strb	r2, [r3, #0]
		dist_remaining = dist;
 80031c2:	4a61      	ldr	r2, [pc, #388]	; (8003348 <climbingForward+0x1d0>)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6013      	str	r3, [r2, #0]
	}
	if (dist / dist_remaining >= 0 && first_loop == false)
 80031c8:	4b5f      	ldr	r3, [pc, #380]	; (8003348 <climbingForward+0x1d0>)
 80031ca:	ed93 7a00 	vldr	s14, [r3]
 80031ce:	edd7 6a01 	vldr	s13, [r7, #4]
 80031d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031de:	f2c0 808f 	blt.w	8003300 <climbingForward+0x188>
 80031e2:	4b54      	ldr	r3, [pc, #336]	; (8003334 <climbingForward+0x1bc>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	f083 0301 	eor.w	r3, r3, #1
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 8087 	beq.w	8003300 <climbingForward+0x188>
	{
		send_HubMotor(rps, rps);
 80031f2:	edd7 0a05 	vldr	s1, [r7, #20]
 80031f6:	ed97 0a05 	vldr	s0, [r7, #20]
 80031fa:	f7fe f909 	bl	8001410 <send_HubMotor>
		if (HAL_GetTick() - prev_tick > 1)
 80031fe:	f001 fd0f 	bl	8004c20 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	4b4e      	ldr	r3, [pc, #312]	; (8003340 <climbingForward+0x1c8>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b01      	cmp	r3, #1
 800320c:	d976      	bls.n	80032fc <climbingForward+0x184>
		{
			float dt = (float) (HAL_GetTick() - prev_tick) / FREQUENCY;
 800320e:	f001 fd07 	bl	8004c20 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	4b4a      	ldr	r3, [pc, #296]	; (8003340 <climbingForward+0x1c8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	ee07 3a90 	vmov	s15, r3
 800321e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003222:	eddf 6a4a 	vldr	s13, [pc, #296]	; 800334c <climbingForward+0x1d4>
 8003226:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800322a:	edc7 7a04 	vstr	s15, [r7, #16]
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 800322e:	4b42      	ldr	r3, [pc, #264]	; (8003338 <climbingForward+0x1c0>)
 8003230:	685a      	ldr	r2, [r3, #4]
					- prev_enc) / dt) * 2 * M_PI / 4096;
 8003232:	4b42      	ldr	r3, [pc, #264]	; (800333c <climbingForward+0x1c4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	1ad3      	subs	r3, r2, r3
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 8003238:	ee07 3a90 	vmov	s15, r3
 800323c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
					- prev_enc) / dt) * 2 * M_PI / 4096;
 8003240:	ed97 7a04 	vldr	s14, [r7, #16]
 8003244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003248:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800324c:	ee17 0a90 	vmov	r0, s15
 8003250:	f7fd f932 	bl	80004b8 <__aeabi_f2d>
 8003254:	a332      	add	r3, pc, #200	; (adr r3, 8003320 <climbingForward+0x1a8>)
 8003256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325a:	f7fd f985 	bl	8000568 <__aeabi_dmul>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	4610      	mov	r0, r2
 8003264:	4619      	mov	r1, r3
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	4b39      	ldr	r3, [pc, #228]	; (8003350 <climbingForward+0x1d8>)
 800326c:	f7fd faa6 	bl	80007bc <__aeabi_ddiv>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 8003274:	4610      	mov	r0, r2
 8003276:	4619      	mov	r1, r3
 8003278:	f7fd fc6e 	bl	8000b58 <__aeabi_d2f>
 800327c:	4603      	mov	r3, r0
 800327e:	60fb      	str	r3, [r7, #12]
			dist_remaining -= (HUB_DIAMETER * rad_per_s * dt) / 2;
 8003280:	4b31      	ldr	r3, [pc, #196]	; (8003348 <climbingForward+0x1d0>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f7fd f917 	bl	80004b8 <__aeabi_f2d>
 800328a:	4604      	mov	r4, r0
 800328c:	460d      	mov	r5, r1
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f7fd f912 	bl	80004b8 <__aeabi_f2d>
 8003294:	a324      	add	r3, pc, #144	; (adr r3, 8003328 <climbingForward+0x1b0>)
 8003296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329a:	f7fd f965 	bl	8000568 <__aeabi_dmul>
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	4690      	mov	r8, r2
 80032a4:	4699      	mov	r9, r3
 80032a6:	6938      	ldr	r0, [r7, #16]
 80032a8:	f7fd f906 	bl	80004b8 <__aeabi_f2d>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4640      	mov	r0, r8
 80032b2:	4649      	mov	r1, r9
 80032b4:	f7fd f958 	bl	8000568 <__aeabi_dmul>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4610      	mov	r0, r2
 80032be:	4619      	mov	r1, r3
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032c8:	f7fd fa78 	bl	80007bc <__aeabi_ddiv>
 80032cc:	4602      	mov	r2, r0
 80032ce:	460b      	mov	r3, r1
 80032d0:	4620      	mov	r0, r4
 80032d2:	4629      	mov	r1, r5
 80032d4:	f7fc ff90 	bl	80001f8 <__aeabi_dsub>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4610      	mov	r0, r2
 80032de:	4619      	mov	r1, r3
 80032e0:	f7fd fc3a 	bl	8000b58 <__aeabi_d2f>
 80032e4:	4603      	mov	r3, r0
 80032e6:	4a18      	ldr	r2, [pc, #96]	; (8003348 <climbingForward+0x1d0>)
 80032e8:	6013      	str	r3, [r2, #0]
			prev_tick = HAL_GetTick();
 80032ea:	f001 fc99 	bl	8004c20 <HAL_GetTick>
 80032ee:	4603      	mov	r3, r0
 80032f0:	4a13      	ldr	r2, [pc, #76]	; (8003340 <climbingForward+0x1c8>)
 80032f2:	6013      	str	r3, [r2, #0]
//					dist_remaining = 0;
//				}
//			}
//			else
//				stationary_tick = HAL_GetTick();
			prev_enc = hub_encoder_feedback.encoder_2;
 80032f4:	4b10      	ldr	r3, [pc, #64]	; (8003338 <climbingForward+0x1c0>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4a10      	ldr	r2, [pc, #64]	; (800333c <climbingForward+0x1c4>)
 80032fa:	6013      	str	r3, [r2, #0]

		}
		return true;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e009      	b.n	8003314 <climbingForward+0x19c>
	}
	else
	{
		first_loop = true;
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <climbingForward+0x1bc>)
 8003302:	2201      	movs	r2, #1
 8003304:	701a      	strb	r2, [r3, #0]
		send_HubMotor(0, 0);
 8003306:	eddf 0a13 	vldr	s1, [pc, #76]	; 8003354 <climbingForward+0x1dc>
 800330a:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8003354 <climbingForward+0x1dc>
 800330e:	f7fe f87f 	bl	8001410 <send_HubMotor>
		return false;
 8003312:	2300      	movs	r3, #0
	}
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800331e:	bf00      	nop
 8003320:	54442d18 	.word	0x54442d18
 8003324:	400921fb 	.word	0x400921fb
 8003328:	916872b0 	.word	0x916872b0
 800332c:	3fbf7ced 	.word	0x3fbf7ced
 8003330:	bf800000 	.word	0xbf800000
 8003334:	20000128 	.word	0x20000128
 8003338:	20000424 	.word	0x20000424
 800333c:	20000230 	.word	0x20000230
 8003340:	20000234 	.word	0x20000234
 8003344:	20000238 	.word	0x20000238
 8003348:	2000023c 	.word	0x2000023c
 800334c:	447a0000 	.word	0x447a0000
 8003350:	40b00000 	.word	0x40b00000
 8003354:	00000000 	.word	0x00000000

08003358 <goto_pos>:

//Control rear and back wheel to set encoder position using PID controller
bool goto_pos(int enc, PID_t pid_t)
{
 8003358:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
 8003362:	6039      	str	r1, [r7, #0]
	int cur_enc_pos;
	ENCODER_Read(&encoderBack);
 8003364:	487c      	ldr	r0, [pc, #496]	; (8003558 <goto_pos+0x200>)
 8003366:	f7fe fc9c 	bl	8001ca2 <ENCODER_Read>
	ENCODER_Read(&encoderFront);
 800336a:	487c      	ldr	r0, [pc, #496]	; (800355c <goto_pos+0x204>)
 800336c:	f7fe fc99 	bl	8001ca2 <ENCODER_Read>
	if (pid_t == frontClimb_pid)
 8003370:	4b7b      	ldr	r3, [pc, #492]	; (8003560 <goto_pos+0x208>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d17b      	bne.n	8003472 <goto_pos+0x11a>
	{
		cur_enc_pos = (int) encoderFront.encoder_pos;
 800337a:	4b78      	ldr	r3, [pc, #480]	; (800355c <goto_pos+0x204>)
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	60fb      	str	r3, [r7, #12]
//				&& ((encoderFront.encoder_pos >= 0
//						&& encoderFront.encoder_pos < MAX_FRONT_ALLOWABLE_ENC)
//						|| (encoderFront.encoder_pos > MIN_FRONT_ALLOWABLE_ENC
//								&& encoderFront.encoder_pos
//										<= 4096 * FRONT_GEAR_RATIO)))
		if (pid_need_compute(frontClimb_pid) && fabs(enc - cur_enc_pos) > 5)
 8003380:	4b77      	ldr	r3, [pc, #476]	; (8003560 <goto_pos+0x208>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f7fd fdf5 	bl	8000f74 <pid_need_compute>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d06e      	beq.n	800346e <goto_pos+0x116>
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	4618      	mov	r0, r3
 8003398:	f7fd f87c 	bl	8000494 <__aeabi_i2d>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4690      	mov	r8, r2
 80033a2:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	4b6e      	ldr	r3, [pc, #440]	; (8003564 <goto_pos+0x20c>)
 80033ac:	4640      	mov	r0, r8
 80033ae:	4649      	mov	r1, r9
 80033b0:	f7fd fb6a 	bl	8000a88 <__aeabi_dcmpgt>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d059      	beq.n	800346e <goto_pos+0x116>
		{
			// Read process feedback
			if (cur_enc_pos > MAX_FRONT_ALLOWABLE_ENC)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f640 421c 	movw	r2, #3100	; 0xc1c
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d90f      	bls.n	80033e4 <goto_pos+0x8c>
				cur_enc_pos -= 4096 * FRONT_GEAR_RATIO;
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f7fd f865 	bl	8000494 <__aeabi_i2d>
 80033ca:	a361      	add	r3, pc, #388	; (adr r3, 8003550 <goto_pos+0x1f8>)
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	f7fc ff12 	bl	80001f8 <__aeabi_dsub>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4610      	mov	r0, r2
 80033da:	4619      	mov	r1, r3
 80033dc:	f7fd fb74 	bl	8000ac8 <__aeabi_d2iz>
 80033e0:	4603      	mov	r3, r0
 80033e2:	60fb      	str	r3, [r7, #12]
			if (enc >= MAX_FRONT_ALLOWABLE_ENC)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f640 421c 	movw	r2, #3100	; 0xc1c
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d30f      	bcc.n	800340e <goto_pos+0xb6>
				enc -= 4096 * FRONT_GEAR_RATIO;
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fd f850 	bl	8000494 <__aeabi_i2d>
 80033f4:	a356      	add	r3, pc, #344	; (adr r3, 8003550 <goto_pos+0x1f8>)
 80033f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fa:	f7fc fefd 	bl	80001f8 <__aeabi_dsub>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4610      	mov	r0, r2
 8003404:	4619      	mov	r1, r3
 8003406:	f7fd fb5f 	bl	8000ac8 <__aeabi_d2iz>
 800340a:	4603      	mov	r3, r0
 800340c:	607b      	str	r3, [r7, #4]
			frontClimb_setpoint = enc;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	ee07 3a90 	vmov	s15, r3
 8003414:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003418:	4b53      	ldr	r3, [pc, #332]	; (8003568 <goto_pos+0x210>)
 800341a:	edc3 7a00 	vstr	s15, [r3]
			frontClimb_input = cur_enc_pos;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	ee07 3a90 	vmov	s15, r3
 8003424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003428:	4b50      	ldr	r3, [pc, #320]	; (800356c <goto_pos+0x214>)
 800342a:	edc3 7a00 	vstr	s15, [r3]
			// Compute new PID output value
			pid_compute(frontClimb_pid);
 800342e:	4b4c      	ldr	r3, [pc, #304]	; (8003560 <goto_pos+0x208>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7fd fdb3 	bl	8000f9e <pid_compute>
			//Change actuator value
			speed[FRONT_INDEX] = frontClimb_output;
 8003438:	4b4d      	ldr	r3, [pc, #308]	; (8003570 <goto_pos+0x218>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a4d      	ldr	r2, [pc, #308]	; (8003574 <goto_pos+0x21c>)
 800343e:	6013      	str	r3, [r2, #0]
			if(fabs(speed[FRONT_INDEX]) < 5)
 8003440:	4b4c      	ldr	r3, [pc, #304]	; (8003574 <goto_pos+0x21c>)
 8003442:	edd3 7a00 	vldr	s15, [r3]
 8003446:	eef0 7ae7 	vabs.f32	s15, s15
 800344a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800344e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003456:	d508      	bpl.n	800346a <goto_pos+0x112>
			{
				speed[FRONT_INDEX] = 0;
 8003458:	4b46      	ldr	r3, [pc, #280]	; (8003574 <goto_pos+0x21c>)
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
				pid_reset(frontClimb_pid);
 8003460:	4b3f      	ldr	r3, [pc, #252]	; (8003560 <goto_pos+0x208>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f7fd ffad 	bl	80013c4 <pid_reset>
			}

			return true;
 800346a:	2301      	movs	r3, #1
 800346c:	e06b      	b.n	8003546 <goto_pos+0x1ee>
		}
		else
		{
//			speed[FRONT_INDEX] = 0;

			return false;
 800346e:	2300      	movs	r3, #0
 8003470:	e069      	b.n	8003546 <goto_pos+0x1ee>
		}
	}
	else if (pid_t == backClimb_pid)
 8003472:	4b41      	ldr	r3, [pc, #260]	; (8003578 <goto_pos+0x220>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d163      	bne.n	8003544 <goto_pos+0x1ec>
	{
		cur_enc_pos = (int) encoderBack.encoder_pos;
 800347c:	4b36      	ldr	r3, [pc, #216]	; (8003558 <goto_pos+0x200>)
 800347e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003480:	60fb      	str	r3, [r7, #12]
//				&& ((encoderBack.encoder_pos >= 0
//						&& encoderBack.encoder_pos < MAX_BACK_ALLOWABLE_ENC)
//						|| (encoderBack.encoder_pos > MIN_BACK_ALLOWABLE_ENC
//								&& encoderBack.encoder_pos
//										<= 4096 * BACK_GEAR_RATIO)))
		if (pid_need_compute(backClimb_pid) && fabs(enc - cur_enc_pos) > 5)
 8003482:	4b3d      	ldr	r3, [pc, #244]	; (8003578 <goto_pos+0x220>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7fd fd74 	bl	8000f74 <pid_need_compute>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d056      	beq.n	8003540 <goto_pos+0x1e8>
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	4618      	mov	r0, r3
 800349a:	f7fc fffb 	bl	8000494 <__aeabi_i2d>
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4614      	mov	r4, r2
 80034a4:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	4b2d      	ldr	r3, [pc, #180]	; (8003564 <goto_pos+0x20c>)
 80034ae:	4620      	mov	r0, r4
 80034b0:	4629      	mov	r1, r5
 80034b2:	f7fd fae9 	bl	8000a88 <__aeabi_dcmpgt>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d041      	beq.n	8003540 <goto_pos+0x1e8>
		{
			// Read process feedback
			//following code is causing back turn
			if (cur_enc_pos > MAX_BACK_ALLOWABLE_ENC)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d903      	bls.n	80034ce <goto_pos+0x176>
				cur_enc_pos -= 4096 * BACK_GEAR_RATIO;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80034cc:	60fb      	str	r3, [r7, #12]
			if (enc >= MAX_BACK_ALLOWABLE_ENC)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d303      	bcc.n	80034e0 <goto_pos+0x188>
				enc -= 4096 * BACK_GEAR_RATIO;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80034de:	607b      	str	r3, [r7, #4]
			backClimb_setpoint = enc;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	ee07 3a90 	vmov	s15, r3
 80034e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034ea:	4b24      	ldr	r3, [pc, #144]	; (800357c <goto_pos+0x224>)
 80034ec:	edc3 7a00 	vstr	s15, [r3]
			backClimb_input = cur_enc_pos;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	ee07 3a90 	vmov	s15, r3
 80034f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034fa:	4b21      	ldr	r3, [pc, #132]	; (8003580 <goto_pos+0x228>)
 80034fc:	edc3 7a00 	vstr	s15, [r3]
			// Compute new PID output value
			pid_compute(backClimb_pid);
 8003500:	4b1d      	ldr	r3, [pc, #116]	; (8003578 <goto_pos+0x220>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f7fd fd4a 	bl	8000f9e <pid_compute>
			//Change actuator value
			speed[BACK_INDEX] = backClimb_output;
 800350a:	4b1e      	ldr	r3, [pc, #120]	; (8003584 <goto_pos+0x22c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a19      	ldr	r2, [pc, #100]	; (8003574 <goto_pos+0x21c>)
 8003510:	6053      	str	r3, [r2, #4]
			if(fabs(speed[BACK_INDEX]) < 5)
 8003512:	4b18      	ldr	r3, [pc, #96]	; (8003574 <goto_pos+0x21c>)
 8003514:	edd3 7a01 	vldr	s15, [r3, #4]
 8003518:	eef0 7ae7 	vabs.f32	s15, s15
 800351c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003520:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003528:	d508      	bpl.n	800353c <goto_pos+0x1e4>
			{
				speed[BACK_INDEX] = 0;
 800352a:	4b12      	ldr	r3, [pc, #72]	; (8003574 <goto_pos+0x21c>)
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	605a      	str	r2, [r3, #4]
				pid_reset(backClimb_pid);
 8003532:	4b11      	ldr	r3, [pc, #68]	; (8003578 <goto_pos+0x220>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7fd ff44 	bl	80013c4 <pid_reset>
			}
			return true;
 800353c:	2301      	movs	r3, #1
 800353e:	e002      	b.n	8003546 <goto_pos+0x1ee>
		else
		{
//			speed[BACK_INDEX] = 0;
//			if(fabs(speed[BACK_INDEX]) < 5)
//				pid_reset(backClimb_pid);
			return false;
 8003540:	2300      	movs	r3, #0
 8003542:	e000      	b.n	8003546 <goto_pos+0x1ee>
		}
	}
	return false;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003550:	9999999a 	.word	0x9999999a
 8003554:	40c19999 	.word	0x40c19999
 8003558:	20000374 	.word	0x20000374
 800355c:	2000031c 	.word	0x2000031c
 8003560:	200004d4 	.word	0x200004d4
 8003564:	40140000 	.word	0x40140000
 8003568:	200001d8 	.word	0x200001d8
 800356c:	200001d0 	.word	0x200001d0
 8003570:	200001d4 	.word	0x200001d4
 8003574:	200001c8 	.word	0x200001c8
 8003578:	20000520 	.word	0x20000520
 800357c:	200001e4 	.word	0x200001e4
 8003580:	200001dc 	.word	0x200001dc
 8003584:	200001e0 	.word	0x200001e0

08003588 <in_climb_process>:

//Lifting process with desired front and back encoder position
bool in_climb_process(int front_enc, int back_enc)
{
 8003588:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800358c:	b086      	sub	sp, #24
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
	bool is_lifting;
	static bool first_loop = true;
	static uint32_t prev_angle_tick = 0;
	static float prev_angle = 0;
	float climbForward_speed = 0;
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	613b      	str	r3, [r7, #16]

	if (first_loop)
 800359a:	4b81      	ldr	r3, [pc, #516]	; (80037a0 <in_climb_process+0x218>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00b      	beq.n	80035ba <in_climb_process+0x32>
	{
		prev_angle = encoderBack.angleDeg;
 80035a2:	4b80      	ldr	r3, [pc, #512]	; (80037a4 <in_climb_process+0x21c>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	4a80      	ldr	r2, [pc, #512]	; (80037a8 <in_climb_process+0x220>)
 80035a8:	6013      	str	r3, [r2, #0]
		prev_angle_tick = HAL_GetTick();
 80035aa:	f001 fb39 	bl	8004c20 <HAL_GetTick>
 80035ae:	4603      	mov	r3, r0
 80035b0:	4a7e      	ldr	r2, [pc, #504]	; (80037ac <in_climb_process+0x224>)
 80035b2:	6013      	str	r3, [r2, #0]
		first_loop = false;
 80035b4:	4b7a      	ldr	r3, [pc, #488]	; (80037a0 <in_climb_process+0x218>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]
	}

	//1. lift the front climbing wheel up until it reach it maximum pos
	//The process is controlled by PID on the front climbing wheel
	//the maximum pos is when the climbing wheel is below the wheelchair base
	goto_pos(front_enc, frontClimb_pid);
 80035ba:	4b7d      	ldr	r3, [pc, #500]	; (80037b0 <in_climb_process+0x228>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4619      	mov	r1, r3
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff fec9 	bl	8003358 <goto_pos>
	goto_pos(back_enc, backClimb_pid);
 80035c6:	4b7b      	ldr	r3, [pc, #492]	; (80037b4 <in_climb_process+0x22c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4619      	mov	r1, r3
 80035cc:	6838      	ldr	r0, [r7, #0]
 80035ce:	f7ff fec3 	bl	8003358 <goto_pos>

	if (fabs(speed[FRONT_INDEX]) >= 5 || fabs(speed[BACK_INDEX]) >= 5)
 80035d2:	4b79      	ldr	r3, [pc, #484]	; (80037b8 <in_climb_process+0x230>)
 80035d4:	edd3 7a00 	vldr	s15, [r3]
 80035d8:	eef0 7ae7 	vabs.f32	s15, s15
 80035dc:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80035e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e8:	da0b      	bge.n	8003602 <in_climb_process+0x7a>
 80035ea:	4b73      	ldr	r3, [pc, #460]	; (80037b8 <in_climb_process+0x230>)
 80035ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80035f0:	eef0 7ae7 	vabs.f32	s15, s15
 80035f4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80035f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003600:	db02      	blt.n	8003608 <in_climb_process+0x80>
		is_lifting = true;
 8003602:	2301      	movs	r3, #1
 8003604:	75fb      	strb	r3, [r7, #23]
 8003606:	e001      	b.n	800360c <in_climb_process+0x84>
	else
		is_lifting = false;
 8003608:	2300      	movs	r3, #0
 800360a:	75fb      	strb	r3, [r7, #23]

	//2. During lifting, due to fixed point at the back climbing wheel.
	//The wheelchair would be pulled back if the back wheel not traveling while the its lifting
	//Therefore, lifting of back wheel and hub motor need to work at the same time to make sure the wheelchair is not moving back.
	//Pull back of wheelchair would cause the front climbing wheel to slip from the curb
	if (is_lifting == true && speed[BACK_INDEX] != 0)
 800360c:	7dfb      	ldrb	r3, [r7, #23]
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 809d 	beq.w	800374e <in_climb_process+0x1c6>
 8003614:	4b68      	ldr	r3, [pc, #416]	; (80037b8 <in_climb_process+0x230>)
 8003616:	edd3 7a01 	vldr	s15, [r3, #4]
 800361a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800361e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003622:	f000 8094 	beq.w	800374e <in_climb_process+0x1c6>
	{
		double dt = (HAL_GetTick() - prev_angle_tick) / (float) FREQUENCY;
 8003626:	f001 fafb 	bl	8004c20 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	4b5f      	ldr	r3, [pc, #380]	; (80037ac <in_climb_process+0x224>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	ee07 3a90 	vmov	s15, r3
 8003636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800363a:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80037bc <in_climb_process+0x234>
 800363e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003642:	ee16 0a90 	vmov	r0, s13
 8003646:	f7fc ff37 	bl	80004b8 <__aeabi_f2d>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		climbForward_speed = CLIMBING_LEG_LENGTH
				* (sin(TO_RAD(prev_angle)) - sin(TO_RAD(encoderBack.angleDeg)))
 8003652:	4b5b      	ldr	r3, [pc, #364]	; (80037c0 <in_climb_process+0x238>)
 8003654:	4618      	mov	r0, r3
 8003656:	f7fc ff2f 	bl	80004b8 <__aeabi_f2d>
 800365a:	4604      	mov	r4, r0
 800365c:	460d      	mov	r5, r1
 800365e:	4b52      	ldr	r3, [pc, #328]	; (80037a8 <in_climb_process+0x220>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f7fc ff28 	bl	80004b8 <__aeabi_f2d>
 8003668:	a349      	add	r3, pc, #292	; (adr r3, 8003790 <in_climb_process+0x208>)
 800366a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366e:	f7fc ff7b 	bl	8000568 <__aeabi_dmul>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4610      	mov	r0, r2
 8003678:	4619      	mov	r1, r3
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	4b51      	ldr	r3, [pc, #324]	; (80037c4 <in_climb_process+0x23c>)
 8003680:	f7fd f89c 	bl	80007bc <__aeabi_ddiv>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	ec43 2b17 	vmov	d7, r2, r3
 800368c:	eeb0 0a47 	vmov.f32	s0, s14
 8003690:	eef0 0a67 	vmov.f32	s1, s15
 8003694:	f006 ff70 	bl	800a578 <sin>
 8003698:	ec59 8b10 	vmov	r8, r9, d0
 800369c:	4b41      	ldr	r3, [pc, #260]	; (80037a4 <in_climb_process+0x21c>)
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fc ff09 	bl	80004b8 <__aeabi_f2d>
 80036a6:	a33a      	add	r3, pc, #232	; (adr r3, 8003790 <in_climb_process+0x208>)
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	f7fc ff5c 	bl	8000568 <__aeabi_dmul>
 80036b0:	4602      	mov	r2, r0
 80036b2:	460b      	mov	r3, r1
 80036b4:	4610      	mov	r0, r2
 80036b6:	4619      	mov	r1, r3
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	4b41      	ldr	r3, [pc, #260]	; (80037c4 <in_climb_process+0x23c>)
 80036be:	f7fd f87d 	bl	80007bc <__aeabi_ddiv>
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	ec43 2b17 	vmov	d7, r2, r3
 80036ca:	eeb0 0a47 	vmov.f32	s0, s14
 80036ce:	eef0 0a67 	vmov.f32	s1, s15
 80036d2:	f006 ff51 	bl	800a578 <sin>
 80036d6:	ec53 2b10 	vmov	r2, r3, d0
 80036da:	4640      	mov	r0, r8
 80036dc:	4649      	mov	r1, r9
 80036de:	f7fc fd8b 	bl	80001f8 <__aeabi_dsub>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	4620      	mov	r0, r4
 80036e8:	4629      	mov	r1, r5
 80036ea:	f7fc ff3d 	bl	8000568 <__aeabi_dmul>
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	4610      	mov	r0, r2
 80036f4:	4619      	mov	r1, r3
				/ dt; //unit: m/s,
 80036f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036fa:	f7fd f85f 	bl	80007bc <__aeabi_ddiv>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
		climbForward_speed = CLIMBING_LEG_LENGTH
 8003702:	4610      	mov	r0, r2
 8003704:	4619      	mov	r1, r3
 8003706:	f7fd fa27 	bl	8000b58 <__aeabi_d2f>
 800370a:	4603      	mov	r3, r0
 800370c:	613b      	str	r3, [r7, #16]
		climbForward_speed = climbForward_speed / (HUB_DIAMETER / 2);
 800370e:	6938      	ldr	r0, [r7, #16]
 8003710:	f7fc fed2 	bl	80004b8 <__aeabi_f2d>
 8003714:	a320      	add	r3, pc, #128	; (adr r3, 8003798 <in_climb_process+0x210>)
 8003716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371a:	f7fd f84f 	bl	80007bc <__aeabi_ddiv>
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
 8003722:	4610      	mov	r0, r2
 8003724:	4619      	mov	r1, r3
 8003726:	f7fd fa17 	bl	8000b58 <__aeabi_d2f>
 800372a:	4603      	mov	r3, r0
 800372c:	613b      	str	r3, [r7, #16]
		//Convert hub speed into pulse/second
		send_HubMotor(climbForward_speed, climbForward_speed);
 800372e:	edd7 0a04 	vldr	s1, [r7, #16]
 8003732:	ed97 0a04 	vldr	s0, [r7, #16]
 8003736:	f7fd fe6b 	bl	8001410 <send_HubMotor>
		prev_angle = encoderBack.angleDeg;
 800373a:	4b1a      	ldr	r3, [pc, #104]	; (80037a4 <in_climb_process+0x21c>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	4a1a      	ldr	r2, [pc, #104]	; (80037a8 <in_climb_process+0x220>)
 8003740:	6013      	str	r3, [r2, #0]
		prev_angle_tick = HAL_GetTick();
 8003742:	f001 fa6d 	bl	8004c20 <HAL_GetTick>
 8003746:	4603      	mov	r3, r0
 8003748:	4a18      	ldr	r2, [pc, #96]	; (80037ac <in_climb_process+0x224>)
 800374a:	6013      	str	r3, [r2, #0]
	{
 800374c:	e010      	b.n	8003770 <in_climb_process+0x1e8>
	}
	else if (is_lifting == true && speed[BACK_INDEX] == 0)
 800374e:	7dfb      	ldrb	r3, [r7, #23]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00d      	beq.n	8003770 <in_climb_process+0x1e8>
 8003754:	4b18      	ldr	r3, [pc, #96]	; (80037b8 <in_climb_process+0x230>)
 8003756:	edd3 7a01 	vldr	s15, [r3, #4]
 800375a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800375e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003762:	d105      	bne.n	8003770 <in_climb_process+0x1e8>
		send_HubMotor(0, 0);
 8003764:	eddf 0a18 	vldr	s1, [pc, #96]	; 80037c8 <in_climb_process+0x240>
 8003768:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80037c8 <in_climb_process+0x240>
 800376c:	f7fd fe50 	bl	8001410 <send_HubMotor>

	if (!is_lifting)
 8003770:	7dfb      	ldrb	r3, [r7, #23]
 8003772:	f083 0301 	eor.w	r3, r3, #1
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <in_climb_process+0x1fa>
		first_loop = true;
 800377c:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <in_climb_process+0x218>)
 800377e:	2201      	movs	r2, #1
 8003780:	701a      	strb	r2, [r3, #0]
	return is_lifting;
 8003782:	7dfb      	ldrb	r3, [r7, #23]

}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800378e:	bf00      	nop
 8003790:	54442d18 	.word	0x54442d18
 8003794:	400921fb 	.word	0x400921fb
 8003798:	916872b0 	.word	0x916872b0
 800379c:	3faf7ced 	.word	0x3faf7ced
 80037a0:	20000129 	.word	0x20000129
 80037a4:	20000374 	.word	0x20000374
 80037a8:	20000240 	.word	0x20000240
 80037ac:	20000244 	.word	0x20000244
 80037b0:	200004d4 	.word	0x200004d4
 80037b4:	20000520 	.word	0x20000520
 80037b8:	200001c8 	.word	0x200001c8
 80037bc:	447a0000 	.word	0x447a0000
 80037c0:	3eb2b021 	.word	0x3eb2b021
 80037c4:	40668000 	.word	0x40668000
 80037c8:	00000000 	.word	0x00000000

080037cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_TIM_PWM_Stop(&MOTOR_TIM, TIM_CHANNEL_1);
 80037d0:	2100      	movs	r1, #0
 80037d2:	4808      	ldr	r0, [pc, #32]	; (80037f4 <Error_Handler+0x28>)
 80037d4:	f004 fac8 	bl	8007d68 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&MOTOR_TIM, TIM_CHANNEL_2);
 80037d8:	2104      	movs	r1, #4
 80037da:	4806      	ldr	r0, [pc, #24]	; (80037f4 <Error_Handler+0x28>)
 80037dc:	f004 fac4 	bl	8007d68 <HAL_TIM_PWM_Stop>
	brakeMotor(&backMotor, 1);
 80037e0:	2101      	movs	r1, #1
 80037e2:	4805      	ldr	r0, [pc, #20]	; (80037f8 <Error_Handler+0x2c>)
 80037e4:	f7fd ff90 	bl	8001708 <brakeMotor>
	brakeMotor(&backMotor, 1);
 80037e8:	2101      	movs	r1, #1
 80037ea:	4803      	ldr	r0, [pc, #12]	; (80037f8 <Error_Handler+0x2c>)
 80037ec:	f7fd ff8c 	bl	8001708 <brakeMotor>
  /* USER CODE END Error_Handler_Debug */
}
 80037f0:	bf00      	nop
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20000564 	.word	0x20000564
 80037f8:	20000034 	.word	0x20000034

080037fc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003800:	4b18      	ldr	r3, [pc, #96]	; (8003864 <MX_SPI1_Init+0x68>)
 8003802:	4a19      	ldr	r2, [pc, #100]	; (8003868 <MX_SPI1_Init+0x6c>)
 8003804:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003806:	4b17      	ldr	r3, [pc, #92]	; (8003864 <MX_SPI1_Init+0x68>)
 8003808:	f44f 7282 	mov.w	r2, #260	; 0x104
 800380c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800380e:	4b15      	ldr	r3, [pc, #84]	; (8003864 <MX_SPI1_Init+0x68>)
 8003810:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003814:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003816:	4b13      	ldr	r3, [pc, #76]	; (8003864 <MX_SPI1_Init+0x68>)
 8003818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800381c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800381e:	4b11      	ldr	r3, [pc, #68]	; (8003864 <MX_SPI1_Init+0x68>)
 8003820:	2202      	movs	r2, #2
 8003822:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003824:	4b0f      	ldr	r3, [pc, #60]	; (8003864 <MX_SPI1_Init+0x68>)
 8003826:	2200      	movs	r2, #0
 8003828:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800382a:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <MX_SPI1_Init+0x68>)
 800382c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003830:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003832:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <MX_SPI1_Init+0x68>)
 8003834:	2228      	movs	r2, #40	; 0x28
 8003836:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <MX_SPI1_Init+0x68>)
 800383a:	2200      	movs	r2, #0
 800383c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800383e:	4b09      	ldr	r3, [pc, #36]	; (8003864 <MX_SPI1_Init+0x68>)
 8003840:	2200      	movs	r2, #0
 8003842:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003844:	4b07      	ldr	r3, [pc, #28]	; (8003864 <MX_SPI1_Init+0x68>)
 8003846:	2200      	movs	r2, #0
 8003848:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800384a:	4b06      	ldr	r3, [pc, #24]	; (8003864 <MX_SPI1_Init+0x68>)
 800384c:	220a      	movs	r2, #10
 800384e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003850:	4804      	ldr	r0, [pc, #16]	; (8003864 <MX_SPI1_Init+0x68>)
 8003852:	f003 fda7 	bl	80073a4 <HAL_SPI_Init>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 800385c:	f7ff ffb6 	bl	80037cc <Error_Handler>
  }

}
 8003860:	bf00      	nop
 8003862:	bd80      	pop	{r7, pc}
 8003864:	20000274 	.word	0x20000274
 8003868:	40013000 	.word	0x40013000

0800386c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08a      	sub	sp, #40	; 0x28
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003874:	f107 0314 	add.w	r3, r7, #20
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	609a      	str	r2, [r3, #8]
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a19      	ldr	r2, [pc, #100]	; (80038f0 <HAL_SPI_MspInit+0x84>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d12b      	bne.n	80038e6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	4b18      	ldr	r3, [pc, #96]	; (80038f4 <HAL_SPI_MspInit+0x88>)
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	4a17      	ldr	r2, [pc, #92]	; (80038f4 <HAL_SPI_MspInit+0x88>)
 8003898:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800389c:	6453      	str	r3, [r2, #68]	; 0x44
 800389e:	4b15      	ldr	r3, [pc, #84]	; (80038f4 <HAL_SPI_MspInit+0x88>)
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <HAL_SPI_MspInit+0x88>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	4a10      	ldr	r2, [pc, #64]	; (80038f4 <HAL_SPI_MspInit+0x88>)
 80038b4:	f043 0301 	orr.w	r3, r3, #1
 80038b8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ba:	4b0e      	ldr	r3, [pc, #56]	; (80038f4 <HAL_SPI_MspInit+0x88>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 80038c6:	2360      	movs	r3, #96	; 0x60
 80038c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ca:	2302      	movs	r3, #2
 80038cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d2:	2303      	movs	r3, #3
 80038d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80038d6:	2305      	movs	r3, #5
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038da:	f107 0314 	add.w	r3, r7, #20
 80038de:	4619      	mov	r1, r3
 80038e0:	4805      	ldr	r0, [pc, #20]	; (80038f8 <HAL_SPI_MspInit+0x8c>)
 80038e2:	f002 fcef 	bl	80062c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80038e6:	bf00      	nop
 80038e8:	3728      	adds	r7, #40	; 0x28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40013000 	.word	0x40013000
 80038f4:	40023800 	.word	0x40023800
 80038f8:	40020000 	.word	0x40020000

080038fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	607b      	str	r3, [r7, #4]
 8003906:	4b10      	ldr	r3, [pc, #64]	; (8003948 <HAL_MspInit+0x4c>)
 8003908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390a:	4a0f      	ldr	r2, [pc, #60]	; (8003948 <HAL_MspInit+0x4c>)
 800390c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003910:	6453      	str	r3, [r2, #68]	; 0x44
 8003912:	4b0d      	ldr	r3, [pc, #52]	; (8003948 <HAL_MspInit+0x4c>)
 8003914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800391a:	607b      	str	r3, [r7, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	603b      	str	r3, [r7, #0]
 8003922:	4b09      	ldr	r3, [pc, #36]	; (8003948 <HAL_MspInit+0x4c>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	4a08      	ldr	r2, [pc, #32]	; (8003948 <HAL_MspInit+0x4c>)
 8003928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392c:	6413      	str	r3, [r2, #64]	; 0x40
 800392e:	4b06      	ldr	r3, [pc, #24]	; (8003948 <HAL_MspInit+0x4c>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40023800 	.word	0x40023800

0800394c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003950:	bf00      	nop
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800395a:	b480      	push	{r7}
 800395c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800395e:	e7fe      	b.n	800395e <HardFault_Handler+0x4>

08003960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003964:	e7fe      	b.n	8003964 <MemManage_Handler+0x4>

08003966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003966:	b480      	push	{r7}
 8003968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800396a:	e7fe      	b.n	800396a <BusFault_Handler+0x4>

0800396c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003970:	e7fe      	b.n	8003970 <UsageFault_Handler+0x4>

08003972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003972:	b480      	push	{r7}
 8003974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800398e:	b480      	push	{r7}
 8003990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003992:	bf00      	nop
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039a0:	f001 f92a 	bl	8004bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039a4:	bf00      	nop
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80039ac:	4802      	ldr	r0, [pc, #8]	; (80039b8 <DMA1_Stream1_IRQHandler+0x10>)
 80039ae:	f002 fa1f 	bl	8005df0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000624 	.word	0x20000624

080039bc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80039c0:	4802      	ldr	r0, [pc, #8]	; (80039cc <DMA1_Stream3_IRQHandler+0x10>)
 80039c2:	f002 fa15 	bl	8005df0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80039c6:	bf00      	nop
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	200006c4 	.word	0x200006c4

080039d0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80039d4:	4802      	ldr	r0, [pc, #8]	; (80039e0 <CAN1_RX0_IRQHandler+0x10>)
 80039d6:	f001 fd86 	bl	80054e6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	200002cc 	.word	0x200002cc

080039e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80039e8:	2080      	movs	r0, #128	; 0x80
 80039ea:	f002 fe49 	bl	8006680 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80039ee:	bf00      	nop
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80039f8:	4802      	ldr	r0, [pc, #8]	; (8003a04 <USART3_IRQHandler+0x10>)
 80039fa:	f005 fcc7 	bl	800938c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20000684 	.word	0x20000684

08003a08 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003a0c:	4802      	ldr	r0, [pc, #8]	; (8003a18 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003a0e:	f004 faa1 	bl	8007f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000524 	.word	0x20000524

08003a1c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003a20:	4802      	ldr	r0, [pc, #8]	; (8003a2c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003a22:	f004 fa97 	bl	8007f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003a26:	bf00      	nop
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	20000524 	.word	0x20000524

08003a30 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003a34:	4802      	ldr	r0, [pc, #8]	; (8003a40 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003a36:	f004 fa8d 	bl	8007f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003a3a:	bf00      	nop
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000524 	.word	0x20000524

08003a44 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003a48:	4802      	ldr	r0, [pc, #8]	; (8003a54 <TIM8_CC_IRQHandler+0x10>)
 8003a4a:	f004 fa83 	bl	8007f54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	20000524 	.word	0x20000524

08003a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a5c:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <SystemInit+0x28>)
 8003a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a62:	4a07      	ldr	r2, [pc, #28]	; (8003a80 <SystemInit+0x28>)
 8003a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a6c:	4b04      	ldr	r3, [pc, #16]	; (8003a80 <SystemInit+0x28>)
 8003a6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a72:	609a      	str	r2, [r3, #8]
#endif
}
 8003a74:	bf00      	nop
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	e000ed00 	.word	0xe000ed00

08003a84 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b096      	sub	sp, #88	; 0x58
 8003a88:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	605a      	str	r2, [r3, #4]
 8003a94:	609a      	str	r2, [r3, #8]
 8003a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	605a      	str	r2, [r3, #4]
 8003aac:	609a      	str	r2, [r3, #8]
 8003aae:	60da      	str	r2, [r3, #12]
 8003ab0:	611a      	str	r2, [r3, #16]
 8003ab2:	615a      	str	r2, [r3, #20]
 8003ab4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003ab6:	1d3b      	adds	r3, r7, #4
 8003ab8:	2220      	movs	r2, #32
 8003aba:	2100      	movs	r1, #0
 8003abc:	4618      	mov	r0, r3
 8003abe:	f006 fb57 	bl	800a170 <memset>

  htim1.Instance = TIM1;
 8003ac2:	4b3e      	ldr	r3, [pc, #248]	; (8003bbc <MX_TIM1_Init+0x138>)
 8003ac4:	4a3e      	ldr	r2, [pc, #248]	; (8003bc0 <MX_TIM1_Init+0x13c>)
 8003ac6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8003ac8:	4b3c      	ldr	r3, [pc, #240]	; (8003bbc <MX_TIM1_Init+0x138>)
 8003aca:	22b3      	movs	r2, #179	; 0xb3
 8003acc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ace:	4b3b      	ldr	r3, [pc, #236]	; (8003bbc <MX_TIM1_Init+0x138>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8003ad4:	4b39      	ldr	r3, [pc, #228]	; (8003bbc <MX_TIM1_Init+0x138>)
 8003ad6:	2263      	movs	r2, #99	; 0x63
 8003ad8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ada:	4b38      	ldr	r3, [pc, #224]	; (8003bbc <MX_TIM1_Init+0x138>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ae0:	4b36      	ldr	r3, [pc, #216]	; (8003bbc <MX_TIM1_Init+0x138>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ae6:	4b35      	ldr	r3, [pc, #212]	; (8003bbc <MX_TIM1_Init+0x138>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003aec:	4833      	ldr	r0, [pc, #204]	; (8003bbc <MX_TIM1_Init+0x138>)
 8003aee:	f004 f879 	bl	8007be4 <HAL_TIM_Base_Init>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003af8:	f7ff fe68 	bl	80037cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b00:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003b02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003b06:	4619      	mov	r1, r3
 8003b08:	482c      	ldr	r0, [pc, #176]	; (8003bbc <MX_TIM1_Init+0x138>)
 8003b0a:	f004 fc8d 	bl	8008428 <HAL_TIM_ConfigClockSource>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003b14:	f7ff fe5a 	bl	80037cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003b18:	4828      	ldr	r0, [pc, #160]	; (8003bbc <MX_TIM1_Init+0x138>)
 8003b1a:	f004 f8b2 	bl	8007c82 <HAL_TIM_PWM_Init>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003b24:	f7ff fe52 	bl	80037cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b34:	4619      	mov	r1, r3
 8003b36:	4821      	ldr	r0, [pc, #132]	; (8003bbc <MX_TIM1_Init+0x138>)
 8003b38:	f005 f9e0 	bl	8008efc <HAL_TIMEx_MasterConfigSynchronization>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8003b42:	f7ff fe43 	bl	80037cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b46:	2360      	movs	r3, #96	; 0x60
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b52:	2300      	movs	r3, #0
 8003b54:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b56:	2300      	movs	r3, #0
 8003b58:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b66:	2204      	movs	r2, #4
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4814      	ldr	r0, [pc, #80]	; (8003bbc <MX_TIM1_Init+0x138>)
 8003b6c:	f004 fb96 	bl	800829c <HAL_TIM_PWM_ConfigChannel>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8003b76:	f7ff fe29 	bl	80037cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b94:	2300      	movs	r3, #0
 8003b96:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003b98:	1d3b      	adds	r3, r7, #4
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4807      	ldr	r0, [pc, #28]	; (8003bbc <MX_TIM1_Init+0x138>)
 8003b9e:	f005 fa29 	bl	8008ff4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003ba8:	f7ff fe10 	bl	80037cc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8003bac:	4803      	ldr	r0, [pc, #12]	; (8003bbc <MX_TIM1_Init+0x138>)
 8003bae:	f000 fa1b 	bl	8003fe8 <HAL_TIM_MspPostInit>

}
 8003bb2:	bf00      	nop
 8003bb4:	3758      	adds	r7, #88	; 0x58
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	200005a4 	.word	0x200005a4
 8003bc0:	40010000 	.word	0x40010000

08003bc4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08e      	sub	sp, #56	; 0x38
 8003bc8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	605a      	str	r2, [r3, #4]
 8003bd4:	609a      	str	r2, [r3, #8]
 8003bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bd8:	f107 0320 	add.w	r3, r7, #32
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003be2:	1d3b      	adds	r3, r7, #4
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	605a      	str	r2, [r3, #4]
 8003bea:	609a      	str	r2, [r3, #8]
 8003bec:	60da      	str	r2, [r3, #12]
 8003bee:	611a      	str	r2, [r3, #16]
 8003bf0:	615a      	str	r2, [r3, #20]
 8003bf2:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8003bf4:	4b2c      	ldr	r3, [pc, #176]	; (8003ca8 <MX_TIM2_Init+0xe4>)
 8003bf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003bfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8003bfc:	4b2a      	ldr	r3, [pc, #168]	; (8003ca8 <MX_TIM2_Init+0xe4>)
 8003bfe:	2259      	movs	r2, #89	; 0x59
 8003c00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c02:	4b29      	ldr	r3, [pc, #164]	; (8003ca8 <MX_TIM2_Init+0xe4>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8003c08:	4b27      	ldr	r3, [pc, #156]	; (8003ca8 <MX_TIM2_Init+0xe4>)
 8003c0a:	2263      	movs	r2, #99	; 0x63
 8003c0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c0e:	4b26      	ldr	r3, [pc, #152]	; (8003ca8 <MX_TIM2_Init+0xe4>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c14:	4b24      	ldr	r3, [pc, #144]	; (8003ca8 <MX_TIM2_Init+0xe4>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c1a:	4823      	ldr	r0, [pc, #140]	; (8003ca8 <MX_TIM2_Init+0xe4>)
 8003c1c:	f003 ffe2 	bl	8007be4 <HAL_TIM_Base_Init>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8003c26:	f7ff fdd1 	bl	80037cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c34:	4619      	mov	r1, r3
 8003c36:	481c      	ldr	r0, [pc, #112]	; (8003ca8 <MX_TIM2_Init+0xe4>)
 8003c38:	f004 fbf6 	bl	8008428 <HAL_TIM_ConfigClockSource>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8003c42:	f7ff fdc3 	bl	80037cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003c46:	4818      	ldr	r0, [pc, #96]	; (8003ca8 <MX_TIM2_Init+0xe4>)
 8003c48:	f004 f81b 	bl	8007c82 <HAL_TIM_PWM_Init>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8003c52:	f7ff fdbb 	bl	80037cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c56:	2300      	movs	r3, #0
 8003c58:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c5e:	f107 0320 	add.w	r3, r7, #32
 8003c62:	4619      	mov	r1, r3
 8003c64:	4810      	ldr	r0, [pc, #64]	; (8003ca8 <MX_TIM2_Init+0xe4>)
 8003c66:	f005 f949 	bl	8008efc <HAL_TIMEx_MasterConfigSynchronization>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8003c70:	f7ff fdac 	bl	80037cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c74:	2360      	movs	r3, #96	; 0x60
 8003c76:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c80:	2300      	movs	r3, #0
 8003c82:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c84:	1d3b      	adds	r3, r7, #4
 8003c86:	2208      	movs	r2, #8
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4807      	ldr	r0, [pc, #28]	; (8003ca8 <MX_TIM2_Init+0xe4>)
 8003c8c:	f004 fb06 	bl	800829c <HAL_TIM_PWM_ConfigChannel>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8003c96:	f7ff fd99 	bl	80037cc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8003c9a:	4803      	ldr	r0, [pc, #12]	; (8003ca8 <MX_TIM2_Init+0xe4>)
 8003c9c:	f000 f9a4 	bl	8003fe8 <HAL_TIM_MspPostInit>

}
 8003ca0:	bf00      	nop
 8003ca2:	3738      	adds	r7, #56	; 0x38
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	200005e4 	.word	0x200005e4

08003cac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08e      	sub	sp, #56	; 0x38
 8003cb0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	605a      	str	r2, [r3, #4]
 8003cbc:	609a      	str	r2, [r3, #8]
 8003cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cc0:	f107 0320 	add.w	r3, r7, #32
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cca:	1d3b      	adds	r3, r7, #4
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	609a      	str	r2, [r3, #8]
 8003cd4:	60da      	str	r2, [r3, #12]
 8003cd6:	611a      	str	r2, [r3, #16]
 8003cd8:	615a      	str	r2, [r3, #20]
 8003cda:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8003cdc:	4b32      	ldr	r3, [pc, #200]	; (8003da8 <MX_TIM3_Init+0xfc>)
 8003cde:	4a33      	ldr	r2, [pc, #204]	; (8003dac <MX_TIM3_Init+0x100>)
 8003ce0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8003ce2:	4b31      	ldr	r3, [pc, #196]	; (8003da8 <MX_TIM3_Init+0xfc>)
 8003ce4:	2259      	movs	r2, #89	; 0x59
 8003ce6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ce8:	4b2f      	ldr	r3, [pc, #188]	; (8003da8 <MX_TIM3_Init+0xfc>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8003cee:	4b2e      	ldr	r3, [pc, #184]	; (8003da8 <MX_TIM3_Init+0xfc>)
 8003cf0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003cf4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cf6:	4b2c      	ldr	r3, [pc, #176]	; (8003da8 <MX_TIM3_Init+0xfc>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cfc:	4b2a      	ldr	r3, [pc, #168]	; (8003da8 <MX_TIM3_Init+0xfc>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003d02:	4829      	ldr	r0, [pc, #164]	; (8003da8 <MX_TIM3_Init+0xfc>)
 8003d04:	f003 ff6e 	bl	8007be4 <HAL_TIM_Base_Init>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003d0e:	f7ff fd5d 	bl	80037cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003d18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4822      	ldr	r0, [pc, #136]	; (8003da8 <MX_TIM3_Init+0xfc>)
 8003d20:	f004 fb82 	bl	8008428 <HAL_TIM_ConfigClockSource>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003d2a:	f7ff fd4f 	bl	80037cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003d2e:	481e      	ldr	r0, [pc, #120]	; (8003da8 <MX_TIM3_Init+0xfc>)
 8003d30:	f003 ffa7 	bl	8007c82 <HAL_TIM_PWM_Init>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003d3a:	f7ff fd47 	bl	80037cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d42:	2300      	movs	r3, #0
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d46:	f107 0320 	add.w	r3, r7, #32
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4816      	ldr	r0, [pc, #88]	; (8003da8 <MX_TIM3_Init+0xfc>)
 8003d4e:	f005 f8d5 	bl	8008efc <HAL_TIMEx_MasterConfigSynchronization>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003d58:	f7ff fd38 	bl	80037cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d5c:	2360      	movs	r3, #96	; 0x60
 8003d5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8003d60:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003d64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d6e:	1d3b      	adds	r3, r7, #4
 8003d70:	2200      	movs	r2, #0
 8003d72:	4619      	mov	r1, r3
 8003d74:	480c      	ldr	r0, [pc, #48]	; (8003da8 <MX_TIM3_Init+0xfc>)
 8003d76:	f004 fa91 	bl	800829c <HAL_TIM_PWM_ConfigChannel>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003d80:	f7ff fd24 	bl	80037cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d84:	1d3b      	adds	r3, r7, #4
 8003d86:	2204      	movs	r2, #4
 8003d88:	4619      	mov	r1, r3
 8003d8a:	4807      	ldr	r0, [pc, #28]	; (8003da8 <MX_TIM3_Init+0xfc>)
 8003d8c:	f004 fa86 	bl	800829c <HAL_TIM_PWM_ConfigChannel>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003d96:	f7ff fd19 	bl	80037cc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8003d9a:	4803      	ldr	r0, [pc, #12]	; (8003da8 <MX_TIM3_Init+0xfc>)
 8003d9c:	f000 f924 	bl	8003fe8 <HAL_TIM_MspPostInit>

}
 8003da0:	bf00      	nop
 8003da2:	3738      	adds	r7, #56	; 0x38
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000564 	.word	0x20000564
 8003dac:	40000400 	.word	0x40000400

08003db0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08a      	sub	sp, #40	; 0x28
 8003db4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003db6:	f107 0318 	add.w	r3, r7, #24
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	605a      	str	r2, [r3, #4]
 8003dc0:	609a      	str	r2, [r3, #8]
 8003dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dc4:	f107 0310 	add.w	r3, r7, #16
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003dce:	463b      	mov	r3, r7
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	605a      	str	r2, [r3, #4]
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	60da      	str	r2, [r3, #12]

  htim8.Instance = TIM8;
 8003dda:	4b2d      	ldr	r3, [pc, #180]	; (8003e90 <MX_TIM8_Init+0xe0>)
 8003ddc:	4a2d      	ldr	r2, [pc, #180]	; (8003e94 <MX_TIM8_Init+0xe4>)
 8003dde:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 90-1;
 8003de0:	4b2b      	ldr	r3, [pc, #172]	; (8003e90 <MX_TIM8_Init+0xe0>)
 8003de2:	2259      	movs	r2, #89	; 0x59
 8003de4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003de6:	4b2a      	ldr	r3, [pc, #168]	; (8003e90 <MX_TIM8_Init+0xe0>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003dec:	4b28      	ldr	r3, [pc, #160]	; (8003e90 <MX_TIM8_Init+0xe0>)
 8003dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003df2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003df4:	4b26      	ldr	r3, [pc, #152]	; (8003e90 <MX_TIM8_Init+0xe0>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003dfa:	4b25      	ldr	r3, [pc, #148]	; (8003e90 <MX_TIM8_Init+0xe0>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e00:	4b23      	ldr	r3, [pc, #140]	; (8003e90 <MX_TIM8_Init+0xe0>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003e06:	4822      	ldr	r0, [pc, #136]	; (8003e90 <MX_TIM8_Init+0xe0>)
 8003e08:	f003 feec 	bl	8007be4 <HAL_TIM_Base_Init>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8003e12:	f7ff fcdb 	bl	80037cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e1a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003e1c:	f107 0318 	add.w	r3, r7, #24
 8003e20:	4619      	mov	r1, r3
 8003e22:	481b      	ldr	r0, [pc, #108]	; (8003e90 <MX_TIM8_Init+0xe0>)
 8003e24:	f004 fb00 	bl	8008428 <HAL_TIM_ConfigClockSource>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8003e2e:	f7ff fccd 	bl	80037cc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8003e32:	4817      	ldr	r0, [pc, #92]	; (8003e90 <MX_TIM8_Init+0xe0>)
 8003e34:	f003 fff0 	bl	8007e18 <HAL_TIM_IC_Init>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8003e3e:	f7ff fcc5 	bl	80037cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e42:	2300      	movs	r3, #0
 8003e44:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e46:	2300      	movs	r3, #0
 8003e48:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003e4a:	f107 0310 	add.w	r3, r7, #16
 8003e4e:	4619      	mov	r1, r3
 8003e50:	480f      	ldr	r0, [pc, #60]	; (8003e90 <MX_TIM8_Init+0xe0>)
 8003e52:	f005 f853 	bl	8008efc <HAL_TIMEx_MasterConfigSynchronization>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 8003e5c:	f7ff fcb6 	bl	80037cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003e60:	2300      	movs	r3, #0
 8003e62:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003e64:	2301      	movs	r3, #1
 8003e66:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003e70:	463b      	mov	r3, r7
 8003e72:	220c      	movs	r2, #12
 8003e74:	4619      	mov	r1, r3
 8003e76:	4806      	ldr	r0, [pc, #24]	; (8003e90 <MX_TIM8_Init+0xe0>)
 8003e78:	f004 f974 	bl	8008164 <HAL_TIM_IC_ConfigChannel>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8003e82:	f7ff fca3 	bl	80037cc <Error_Handler>
  }

}
 8003e86:	bf00      	nop
 8003e88:	3728      	adds	r7, #40	; 0x28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20000524 	.word	0x20000524
 8003e94:	40010400 	.word	0x40010400

08003e98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08c      	sub	sp, #48	; 0x30
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea0:	f107 031c 	add.w	r3, r7, #28
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	605a      	str	r2, [r3, #4]
 8003eaa:	609a      	str	r2, [r3, #8]
 8003eac:	60da      	str	r2, [r3, #12]
 8003eae:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a47      	ldr	r2, [pc, #284]	; (8003fd4 <HAL_TIM_Base_MspInit+0x13c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d10e      	bne.n	8003ed8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61bb      	str	r3, [r7, #24]
 8003ebe:	4b46      	ldr	r3, [pc, #280]	; (8003fd8 <HAL_TIM_Base_MspInit+0x140>)
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec2:	4a45      	ldr	r2, [pc, #276]	; (8003fd8 <HAL_TIM_Base_MspInit+0x140>)
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8003eca:	4b43      	ldr	r3, [pc, #268]	; (8003fd8 <HAL_TIM_Base_MspInit+0x140>)
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	61bb      	str	r3, [r7, #24]
 8003ed4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003ed6:	e079      	b.n	8003fcc <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM2)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee0:	d10e      	bne.n	8003f00 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	4b3c      	ldr	r3, [pc, #240]	; (8003fd8 <HAL_TIM_Base_MspInit+0x140>)
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	4a3b      	ldr	r2, [pc, #236]	; (8003fd8 <HAL_TIM_Base_MspInit+0x140>)
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ef2:	4b39      	ldr	r3, [pc, #228]	; (8003fd8 <HAL_TIM_Base_MspInit+0x140>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	697b      	ldr	r3, [r7, #20]
}
 8003efe:	e065      	b.n	8003fcc <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM3)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a35      	ldr	r2, [pc, #212]	; (8003fdc <HAL_TIM_Base_MspInit+0x144>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d10e      	bne.n	8003f28 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	613b      	str	r3, [r7, #16]
 8003f0e:	4b32      	ldr	r3, [pc, #200]	; (8003fd8 <HAL_TIM_Base_MspInit+0x140>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	4a31      	ldr	r2, [pc, #196]	; (8003fd8 <HAL_TIM_Base_MspInit+0x140>)
 8003f14:	f043 0302 	orr.w	r3, r3, #2
 8003f18:	6413      	str	r3, [r2, #64]	; 0x40
 8003f1a:	4b2f      	ldr	r3, [pc, #188]	; (8003fd8 <HAL_TIM_Base_MspInit+0x140>)
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	613b      	str	r3, [r7, #16]
 8003f24:	693b      	ldr	r3, [r7, #16]
}
 8003f26:	e051      	b.n	8003fcc <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM8)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a2c      	ldr	r2, [pc, #176]	; (8003fe0 <HAL_TIM_Base_MspInit+0x148>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d14c      	bne.n	8003fcc <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003f32:	2300      	movs	r3, #0
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	4b28      	ldr	r3, [pc, #160]	; (8003fd8 <HAL_TIM_Base_MspInit+0x140>)
 8003f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3a:	4a27      	ldr	r2, [pc, #156]	; (8003fd8 <HAL_TIM_Base_MspInit+0x140>)
 8003f3c:	f043 0302 	orr.w	r3, r3, #2
 8003f40:	6453      	str	r3, [r2, #68]	; 0x44
 8003f42:	4b25      	ldr	r3, [pc, #148]	; (8003fd8 <HAL_TIM_Base_MspInit+0x140>)
 8003f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60bb      	str	r3, [r7, #8]
 8003f52:	4b21      	ldr	r3, [pc, #132]	; (8003fd8 <HAL_TIM_Base_MspInit+0x140>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f56:	4a20      	ldr	r2, [pc, #128]	; (8003fd8 <HAL_TIM_Base_MspInit+0x140>)
 8003f58:	f043 0304 	orr.w	r3, r3, #4
 8003f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f5e:	4b1e      	ldr	r3, [pc, #120]	; (8003fd8 <HAL_TIM_Base_MspInit+0x140>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	60bb      	str	r3, [r7, #8]
 8003f68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003f6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f70:	2302      	movs	r3, #2
 8003f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f80:	f107 031c 	add.w	r3, r7, #28
 8003f84:	4619      	mov	r1, r3
 8003f86:	4817      	ldr	r0, [pc, #92]	; (8003fe4 <HAL_TIM_Base_MspInit+0x14c>)
 8003f88:	f002 f99c 	bl	80062c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	2100      	movs	r1, #0
 8003f90:	202b      	movs	r0, #43	; 0x2b
 8003f92:	f001 fdb2 	bl	8005afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003f96:	202b      	movs	r0, #43	; 0x2b
 8003f98:	f001 fdcb 	bl	8005b32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	202c      	movs	r0, #44	; 0x2c
 8003fa2:	f001 fdaa 	bl	8005afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003fa6:	202c      	movs	r0, #44	; 0x2c
 8003fa8:	f001 fdc3 	bl	8005b32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8003fac:	2200      	movs	r2, #0
 8003fae:	2100      	movs	r1, #0
 8003fb0:	202d      	movs	r0, #45	; 0x2d
 8003fb2:	f001 fda2 	bl	8005afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003fb6:	202d      	movs	r0, #45	; 0x2d
 8003fb8:	f001 fdbb 	bl	8005b32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	202e      	movs	r0, #46	; 0x2e
 8003fc2:	f001 fd9a 	bl	8005afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8003fc6:	202e      	movs	r0, #46	; 0x2e
 8003fc8:	f001 fdb3 	bl	8005b32 <HAL_NVIC_EnableIRQ>
}
 8003fcc:	bf00      	nop
 8003fce:	3730      	adds	r7, #48	; 0x30
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40010000 	.word	0x40010000
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	40000400 	.word	0x40000400
 8003fe0:	40010400 	.word	0x40010400
 8003fe4:	40020800 	.word	0x40020800

08003fe8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b08a      	sub	sp, #40	; 0x28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff0:	f107 0314 	add.w	r3, r7, #20
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	605a      	str	r2, [r3, #4]
 8003ffa:	609a      	str	r2, [r3, #8]
 8003ffc:	60da      	str	r2, [r3, #12]
 8003ffe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a37      	ldr	r2, [pc, #220]	; (80040e4 <HAL_TIM_MspPostInit+0xfc>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d11f      	bne.n	800404a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800400a:	2300      	movs	r3, #0
 800400c:	613b      	str	r3, [r7, #16]
 800400e:	4b36      	ldr	r3, [pc, #216]	; (80040e8 <HAL_TIM_MspPostInit+0x100>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	4a35      	ldr	r2, [pc, #212]	; (80040e8 <HAL_TIM_MspPostInit+0x100>)
 8004014:	f043 0310 	orr.w	r3, r3, #16
 8004018:	6313      	str	r3, [r2, #48]	; 0x30
 800401a:	4b33      	ldr	r3, [pc, #204]	; (80040e8 <HAL_TIM_MspPostInit+0x100>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	f003 0310 	and.w	r3, r3, #16
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 8004026:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800402a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402c:	2302      	movs	r3, #2
 800402e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004030:	2300      	movs	r3, #0
 8004032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004034:	2300      	movs	r3, #0
 8004036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004038:	2301      	movs	r3, #1
 800403a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 800403c:	f107 0314 	add.w	r3, r7, #20
 8004040:	4619      	mov	r1, r3
 8004042:	482a      	ldr	r0, [pc, #168]	; (80040ec <HAL_TIM_MspPostInit+0x104>)
 8004044:	f002 f93e 	bl	80062c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004048:	e047      	b.n	80040da <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM2)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004052:	d11f      	bne.n	8004094 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	4b23      	ldr	r3, [pc, #140]	; (80040e8 <HAL_TIM_MspPostInit+0x100>)
 800405a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405c:	4a22      	ldr	r2, [pc, #136]	; (80040e8 <HAL_TIM_MspPostInit+0x100>)
 800405e:	f043 0302 	orr.w	r3, r3, #2
 8004062:	6313      	str	r3, [r2, #48]	; 0x30
 8004064:	4b20      	ldr	r3, [pc, #128]	; (80040e8 <HAL_TIM_MspPostInit+0x100>)
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin;
 8004070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004076:	2302      	movs	r3, #2
 8004078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800407e:	2300      	movs	r3, #0
 8004080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004082:	2301      	movs	r3, #1
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ClimbSpeed_TIM2_CH3_GPIO_Port, &GPIO_InitStruct);
 8004086:	f107 0314 	add.w	r3, r7, #20
 800408a:	4619      	mov	r1, r3
 800408c:	4818      	ldr	r0, [pc, #96]	; (80040f0 <HAL_TIM_MspPostInit+0x108>)
 800408e:	f002 f919 	bl	80062c4 <HAL_GPIO_Init>
}
 8004092:	e022      	b.n	80040da <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a16      	ldr	r2, [pc, #88]	; (80040f4 <HAL_TIM_MspPostInit+0x10c>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d11d      	bne.n	80040da <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800409e:	2300      	movs	r3, #0
 80040a0:	60bb      	str	r3, [r7, #8]
 80040a2:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <HAL_TIM_MspPostInit+0x100>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	4a10      	ldr	r2, [pc, #64]	; (80040e8 <HAL_TIM_MspPostInit+0x100>)
 80040a8:	f043 0304 	orr.w	r3, r3, #4
 80040ac:	6313      	str	r3, [r2, #48]	; 0x30
 80040ae:	4b0e      	ldr	r3, [pc, #56]	; (80040e8 <HAL_TIM_MspPostInit+0x100>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	60bb      	str	r3, [r7, #8]
 80040b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 80040ba:	23c0      	movs	r3, #192	; 0xc0
 80040bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040be:	2302      	movs	r3, #2
 80040c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c6:	2300      	movs	r3, #0
 80040c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80040ca:	2302      	movs	r3, #2
 80040cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040ce:	f107 0314 	add.w	r3, r7, #20
 80040d2:	4619      	mov	r1, r3
 80040d4:	4808      	ldr	r0, [pc, #32]	; (80040f8 <HAL_TIM_MspPostInit+0x110>)
 80040d6:	f002 f8f5 	bl	80062c4 <HAL_GPIO_Init>
}
 80040da:	bf00      	nop
 80040dc:	3728      	adds	r7, #40	; 0x28
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40010000 	.word	0x40010000
 80040e8:	40023800 	.word	0x40023800
 80040ec:	40021000 	.word	0x40021000
 80040f0:	40020400 	.word	0x40020400
 80040f4:	40000400 	.word	0x40000400
 80040f8:	40020800 	.word	0x40020800

080040fc <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8004100:	4b11      	ldr	r3, [pc, #68]	; (8004148 <MX_USART3_UART_Init+0x4c>)
 8004102:	4a12      	ldr	r2, [pc, #72]	; (800414c <MX_USART3_UART_Init+0x50>)
 8004104:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004106:	4b10      	ldr	r3, [pc, #64]	; (8004148 <MX_USART3_UART_Init+0x4c>)
 8004108:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800410c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800410e:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <MX_USART3_UART_Init+0x4c>)
 8004110:	2200      	movs	r2, #0
 8004112:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004114:	4b0c      	ldr	r3, [pc, #48]	; (8004148 <MX_USART3_UART_Init+0x4c>)
 8004116:	2200      	movs	r2, #0
 8004118:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800411a:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <MX_USART3_UART_Init+0x4c>)
 800411c:	2200      	movs	r2, #0
 800411e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004120:	4b09      	ldr	r3, [pc, #36]	; (8004148 <MX_USART3_UART_Init+0x4c>)
 8004122:	220c      	movs	r2, #12
 8004124:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004126:	4b08      	ldr	r3, [pc, #32]	; (8004148 <MX_USART3_UART_Init+0x4c>)
 8004128:	2200      	movs	r2, #0
 800412a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800412c:	4b06      	ldr	r3, [pc, #24]	; (8004148 <MX_USART3_UART_Init+0x4c>)
 800412e:	2200      	movs	r2, #0
 8004130:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004132:	4805      	ldr	r0, [pc, #20]	; (8004148 <MX_USART3_UART_Init+0x4c>)
 8004134:	f004 ffc4 	bl	80090c0 <HAL_UART_Init>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800413e:	f7ff fb45 	bl	80037cc <Error_Handler>
  }

}
 8004142:	bf00      	nop
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20000684 	.word	0x20000684
 800414c:	40004800 	.word	0x40004800

08004150 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b08a      	sub	sp, #40	; 0x28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004158:	f107 0314 	add.w	r3, r7, #20
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	605a      	str	r2, [r3, #4]
 8004162:	609a      	str	r2, [r3, #8]
 8004164:	60da      	str	r2, [r3, #12]
 8004166:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a4c      	ldr	r2, [pc, #304]	; (80042a0 <HAL_UART_MspInit+0x150>)
 800416e:	4293      	cmp	r3, r2
 8004170:	f040 8091 	bne.w	8004296 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004174:	2300      	movs	r3, #0
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	4b4a      	ldr	r3, [pc, #296]	; (80042a4 <HAL_UART_MspInit+0x154>)
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	4a49      	ldr	r2, [pc, #292]	; (80042a4 <HAL_UART_MspInit+0x154>)
 800417e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004182:	6413      	str	r3, [r2, #64]	; 0x40
 8004184:	4b47      	ldr	r3, [pc, #284]	; (80042a4 <HAL_UART_MspInit+0x154>)
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800418c:	613b      	str	r3, [r7, #16]
 800418e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004190:	2300      	movs	r3, #0
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	4b43      	ldr	r3, [pc, #268]	; (80042a4 <HAL_UART_MspInit+0x154>)
 8004196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004198:	4a42      	ldr	r2, [pc, #264]	; (80042a4 <HAL_UART_MspInit+0x154>)
 800419a:	f043 0308 	orr.w	r3, r3, #8
 800419e:	6313      	str	r3, [r2, #48]	; 0x30
 80041a0:	4b40      	ldr	r3, [pc, #256]	; (80042a4 <HAL_UART_MspInit+0x154>)
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	60fb      	str	r3, [r7, #12]
 80041aa:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 80041ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80041b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b2:	2302      	movs	r3, #2
 80041b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ba:	2303      	movs	r3, #3
 80041bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80041be:	2307      	movs	r3, #7
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041c2:	f107 0314 	add.w	r3, r7, #20
 80041c6:	4619      	mov	r1, r3
 80041c8:	4837      	ldr	r0, [pc, #220]	; (80042a8 <HAL_UART_MspInit+0x158>)
 80041ca:	f002 f87b 	bl	80062c4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80041ce:	4b37      	ldr	r3, [pc, #220]	; (80042ac <HAL_UART_MspInit+0x15c>)
 80041d0:	4a37      	ldr	r2, [pc, #220]	; (80042b0 <HAL_UART_MspInit+0x160>)
 80041d2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80041d4:	4b35      	ldr	r3, [pc, #212]	; (80042ac <HAL_UART_MspInit+0x15c>)
 80041d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80041da:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041dc:	4b33      	ldr	r3, [pc, #204]	; (80042ac <HAL_UART_MspInit+0x15c>)
 80041de:	2200      	movs	r2, #0
 80041e0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041e2:	4b32      	ldr	r3, [pc, #200]	; (80042ac <HAL_UART_MspInit+0x15c>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041e8:	4b30      	ldr	r3, [pc, #192]	; (80042ac <HAL_UART_MspInit+0x15c>)
 80041ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041ee:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041f0:	4b2e      	ldr	r3, [pc, #184]	; (80042ac <HAL_UART_MspInit+0x15c>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041f6:	4b2d      	ldr	r3, [pc, #180]	; (80042ac <HAL_UART_MspInit+0x15c>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80041fc:	4b2b      	ldr	r3, [pc, #172]	; (80042ac <HAL_UART_MspInit+0x15c>)
 80041fe:	2200      	movs	r2, #0
 8004200:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004202:	4b2a      	ldr	r3, [pc, #168]	; (80042ac <HAL_UART_MspInit+0x15c>)
 8004204:	2200      	movs	r2, #0
 8004206:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004208:	4b28      	ldr	r3, [pc, #160]	; (80042ac <HAL_UART_MspInit+0x15c>)
 800420a:	2200      	movs	r2, #0
 800420c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800420e:	4827      	ldr	r0, [pc, #156]	; (80042ac <HAL_UART_MspInit+0x15c>)
 8004210:	f001 fcc6 	bl	8005ba0 <HAL_DMA_Init>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800421a:	f7ff fad7 	bl	80037cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a22      	ldr	r2, [pc, #136]	; (80042ac <HAL_UART_MspInit+0x15c>)
 8004222:	635a      	str	r2, [r3, #52]	; 0x34
 8004224:	4a21      	ldr	r2, [pc, #132]	; (80042ac <HAL_UART_MspInit+0x15c>)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800422a:	4b22      	ldr	r3, [pc, #136]	; (80042b4 <HAL_UART_MspInit+0x164>)
 800422c:	4a22      	ldr	r2, [pc, #136]	; (80042b8 <HAL_UART_MspInit+0x168>)
 800422e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004230:	4b20      	ldr	r3, [pc, #128]	; (80042b4 <HAL_UART_MspInit+0x164>)
 8004232:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004236:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004238:	4b1e      	ldr	r3, [pc, #120]	; (80042b4 <HAL_UART_MspInit+0x164>)
 800423a:	2240      	movs	r2, #64	; 0x40
 800423c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800423e:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <HAL_UART_MspInit+0x164>)
 8004240:	2200      	movs	r2, #0
 8004242:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004244:	4b1b      	ldr	r3, [pc, #108]	; (80042b4 <HAL_UART_MspInit+0x164>)
 8004246:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800424a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800424c:	4b19      	ldr	r3, [pc, #100]	; (80042b4 <HAL_UART_MspInit+0x164>)
 800424e:	2200      	movs	r2, #0
 8004250:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004252:	4b18      	ldr	r3, [pc, #96]	; (80042b4 <HAL_UART_MspInit+0x164>)
 8004254:	2200      	movs	r2, #0
 8004256:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004258:	4b16      	ldr	r3, [pc, #88]	; (80042b4 <HAL_UART_MspInit+0x164>)
 800425a:	2200      	movs	r2, #0
 800425c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800425e:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <HAL_UART_MspInit+0x164>)
 8004260:	2200      	movs	r2, #0
 8004262:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004264:	4b13      	ldr	r3, [pc, #76]	; (80042b4 <HAL_UART_MspInit+0x164>)
 8004266:	2200      	movs	r2, #0
 8004268:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800426a:	4812      	ldr	r0, [pc, #72]	; (80042b4 <HAL_UART_MspInit+0x164>)
 800426c:	f001 fc98 	bl	8005ba0 <HAL_DMA_Init>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8004276:	f7ff faa9 	bl	80037cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a0d      	ldr	r2, [pc, #52]	; (80042b4 <HAL_UART_MspInit+0x164>)
 800427e:	631a      	str	r2, [r3, #48]	; 0x30
 8004280:	4a0c      	ldr	r2, [pc, #48]	; (80042b4 <HAL_UART_MspInit+0x164>)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004286:	2200      	movs	r2, #0
 8004288:	2100      	movs	r1, #0
 800428a:	2027      	movs	r0, #39	; 0x27
 800428c:	f001 fc35 	bl	8005afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004290:	2027      	movs	r0, #39	; 0x27
 8004292:	f001 fc4e 	bl	8005b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004296:	bf00      	nop
 8004298:	3728      	adds	r7, #40	; 0x28
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40004800 	.word	0x40004800
 80042a4:	40023800 	.word	0x40023800
 80042a8:	40020c00 	.word	0x40020c00
 80042ac:	20000624 	.word	0x20000624
 80042b0:	40026028 	.word	0x40026028
 80042b4:	200006c4 	.word	0x200006c4
 80042b8:	40026058 	.word	0x40026058

080042bc <joystick_Init>:
static int joyPosBuffer[2][5] = {0};
static int joy_pos_buffer_cnt = 0;
static const float JoyForwardAngle = 1.57;
static const float JoyForwardAngleDeadzone = 0.1;

void joystick_Init(void){
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  memset(joyPosBuffer, 0, sizeof(joyPosBuffer));
 80042c0:	2228      	movs	r2, #40	; 0x28
 80042c2:	2100      	movs	r1, #0
 80042c4:	4802      	ldr	r0, [pc, #8]	; (80042d0 <joystick_Init+0x14>)
 80042c6:	f005 ff53 	bl	800a170 <memset>
}
 80042ca:	bf00      	nop
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20000248 	.word	0x20000248
 80042d4:	00000000 	.word	0x00000000

080042d8 <joystickCalculatePos>:

void joystickCalculatePos(void)
{
 80042d8:	b5b0      	push	{r4, r5, r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
  // update joystick reading into buffer array
  if (joy_pos_buffer_cnt == JoyPosBufferSize)
 80042de:	4b20      	ldr	r3, [pc, #128]	; (8004360 <joystickCalculatePos+0x88>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2205      	movs	r2, #5
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d102      	bne.n	80042ee <joystickCalculatePos+0x16>
    joy_pos_buffer_cnt = 0;
 80042e8:	4b1d      	ldr	r3, [pc, #116]	; (8004360 <joystickCalculatePos+0x88>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	601a      	str	r2, [r3, #0]

  tempJoyRawDataX = (tempJoyRawDataX < 0)? tempJoyRawDataX + JoystickCenterX : tempJoyRawDataX - JoystickCenterX;
 80042ee:	4b1d      	ldr	r3, [pc, #116]	; (8004364 <joystickCalculatePos+0x8c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	da05      	bge.n	8004302 <joystickCalculatePos+0x2a>
 80042f6:	4b1b      	ldr	r3, [pc, #108]	; (8004364 <joystickCalculatePos+0x8c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80042fe:	4413      	add	r3, r2
 8004300:	e004      	b.n	800430c <joystickCalculatePos+0x34>
 8004302:	4b18      	ldr	r3, [pc, #96]	; (8004364 <joystickCalculatePos+0x8c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800430a:	1a9b      	subs	r3, r3, r2
 800430c:	4a15      	ldr	r2, [pc, #84]	; (8004364 <joystickCalculatePos+0x8c>)
 800430e:	6013      	str	r3, [r2, #0]
  tempJoyRawDataY = (tempJoyRawDataY > 0)? JoystickCenterY - tempJoyRawDataY:  -tempJoyRawDataY - JoystickCenterX;
 8004310:	4b15      	ldr	r3, [pc, #84]	; (8004368 <joystickCalculatePos+0x90>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	dd05      	ble.n	8004324 <joystickCalculatePos+0x4c>
 8004318:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800431c:	4b12      	ldr	r3, [pc, #72]	; (8004368 <joystickCalculatePos+0x90>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	e005      	b.n	8004330 <joystickCalculatePos+0x58>
 8004324:	4b10      	ldr	r3, [pc, #64]	; (8004368 <joystickCalculatePos+0x90>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	425b      	negs	r3, r3
 800432a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800432e:	1a9b      	subs	r3, r3, r2
 8004330:	4a0d      	ldr	r2, [pc, #52]	; (8004368 <joystickCalculatePos+0x90>)
 8004332:	6013      	str	r3, [r2, #0]

  joyPosBuffer[0][joy_pos_buffer_cnt] = tempJoyRawDataX;
 8004334:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <joystickCalculatePos+0x88>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a0a      	ldr	r2, [pc, #40]	; (8004364 <joystickCalculatePos+0x8c>)
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	490b      	ldr	r1, [pc, #44]	; (800436c <joystickCalculatePos+0x94>)
 800433e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  joyPosBuffer[1][joy_pos_buffer_cnt] = tempJoyRawDataY;
 8004342:	4b07      	ldr	r3, [pc, #28]	; (8004360 <joystickCalculatePos+0x88>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a08      	ldr	r2, [pc, #32]	; (8004368 <joystickCalculatePos+0x90>)
 8004348:	6812      	ldr	r2, [r2, #0]
 800434a:	4908      	ldr	r1, [pc, #32]	; (800436c <joystickCalculatePos+0x94>)
 800434c:	3305      	adds	r3, #5
 800434e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  // calculate joystick position average from the buffer
  int sum_x = 0;
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
  int sum_y = 0;
 8004356:	2300      	movs	r3, #0
 8004358:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < JoyPosBufferSize; i++)
 800435a:	2300      	movs	r3, #0
 800435c:	607b      	str	r3, [r7, #4]
 800435e:	e019      	b.n	8004394 <joystickCalculatePos+0xbc>
 8004360:	20000270 	.word	0x20000270
 8004364:	2000051c 	.word	0x2000051c
 8004368:	20000420 	.word	0x20000420
 800436c:	20000248 	.word	0x20000248
  {
    sum_x += joyPosBuffer[0][i];
 8004370:	4aaf      	ldr	r2, [pc, #700]	; (8004630 <joystickCalculatePos+0x358>)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	4413      	add	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
    sum_y += joyPosBuffer[1][i];
 800437e:	4aac      	ldr	r2, [pc, #688]	; (8004630 <joystickCalculatePos+0x358>)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3305      	adds	r3, #5
 8004384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	4413      	add	r3, r2
 800438c:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < JoyPosBufferSize; i++)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3301      	adds	r3, #1
 8004392:	607b      	str	r3, [r7, #4]
 8004394:	2205      	movs	r2, #5
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4293      	cmp	r3, r2
 800439a:	dbe9      	blt.n	8004370 <joystickCalculatePos+0x98>
  }

  hJoystick.x = sum_x / JoyPosBufferSize;
 800439c:	2205      	movs	r2, #5
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80043a4:	b21a      	sxth	r2, r3
 80043a6:	4ba3      	ldr	r3, [pc, #652]	; (8004634 <joystickCalculatePos+0x35c>)
 80043a8:	801a      	strh	r2, [r3, #0]
  hJoystick.y = sum_y / JoyPosBufferSize;
 80043aa:	2205      	movs	r2, #5
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80043b2:	b21a      	sxth	r2, r3
 80043b4:	4b9f      	ldr	r3, [pc, #636]	; (8004634 <joystickCalculatePos+0x35c>)
 80043b6:	805a      	strh	r2, [r3, #2]

  // calculate magnitude and angle
  hJoystick.magnitude = sqrt(pow(hJoystick.x, 2) + pow(hJoystick.y,2));
 80043b8:	4b9e      	ldr	r3, [pc, #632]	; (8004634 <joystickCalculatePos+0x35c>)
 80043ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fc f868 	bl	8000494 <__aeabi_i2d>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	ed9f 1b95 	vldr	d1, [pc, #596]	; 8004620 <joystickCalculatePos+0x348>
 80043cc:	ec43 2b10 	vmov	d0, r2, r3
 80043d0:	f006 f962 	bl	800a698 <pow>
 80043d4:	ec55 4b10 	vmov	r4, r5, d0
 80043d8:	4b96      	ldr	r3, [pc, #600]	; (8004634 <joystickCalculatePos+0x35c>)
 80043da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fc f858 	bl	8000494 <__aeabi_i2d>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	ed9f 1b8d 	vldr	d1, [pc, #564]	; 8004620 <joystickCalculatePos+0x348>
 80043ec:	ec43 2b10 	vmov	d0, r2, r3
 80043f0:	f006 f952 	bl	800a698 <pow>
 80043f4:	ec53 2b10 	vmov	r2, r3, d0
 80043f8:	4620      	mov	r0, r4
 80043fa:	4629      	mov	r1, r5
 80043fc:	f7fb fefe 	bl	80001fc <__adddf3>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	ec43 2b17 	vmov	d7, r2, r3
 8004408:	eeb0 0a47 	vmov.f32	s0, s14
 800440c:	eef0 0a67 	vmov.f32	s1, s15
 8004410:	f006 f9f0 	bl	800a7f4 <sqrt>
 8004414:	ec53 2b10 	vmov	r2, r3, d0
 8004418:	4610      	mov	r0, r2
 800441a:	4619      	mov	r1, r3
 800441c:	f7fc fb9c 	bl	8000b58 <__aeabi_d2f>
 8004420:	4603      	mov	r3, r0
 8004422:	4a84      	ldr	r2, [pc, #528]	; (8004634 <joystickCalculatePos+0x35c>)
 8004424:	6053      	str	r3, [r2, #4]
  hJoystick.angle = atan2(hJoystick.y, hJoystick.x);
 8004426:	4b83      	ldr	r3, [pc, #524]	; (8004634 <joystickCalculatePos+0x35c>)
 8004428:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800442c:	4618      	mov	r0, r3
 800442e:	f7fc f831 	bl	8000494 <__aeabi_i2d>
 8004432:	4604      	mov	r4, r0
 8004434:	460d      	mov	r5, r1
 8004436:	4b7f      	ldr	r3, [pc, #508]	; (8004634 <joystickCalculatePos+0x35c>)
 8004438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800443c:	4618      	mov	r0, r3
 800443e:	f7fc f829 	bl	8000494 <__aeabi_i2d>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	ec43 2b11 	vmov	d1, r2, r3
 800444a:	ec45 4b10 	vmov	d0, r4, r5
 800444e:	f006 f921 	bl	800a694 <atan2>
 8004452:	ec53 2b10 	vmov	r2, r3, d0
 8004456:	4610      	mov	r0, r2
 8004458:	4619      	mov	r1, r3
 800445a:	f7fc fb7d 	bl	8000b58 <__aeabi_d2f>
 800445e:	4603      	mov	r3, r0
 8004460:	4a74      	ldr	r2, [pc, #464]	; (8004634 <joystickCalculatePos+0x35c>)
 8004462:	6093      	str	r3, [r2, #8]

  // limit magnitude
  if (hJoystick.magnitude > JoystickMagnitudeMax)
 8004464:	4b73      	ldr	r3, [pc, #460]	; (8004634 <joystickCalculatePos+0x35c>)
 8004466:	ed93 7a01 	vldr	s14, [r3, #4]
 800446a:	eddf 7a73 	vldr	s15, [pc, #460]	; 8004638 <joystickCalculatePos+0x360>
 800446e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004472:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800447a:	dd06      	ble.n	800448a <joystickCalculatePos+0x1b2>
    hJoystick.magnitude = JoystickMagnitudeMax;
 800447c:	eddf 7a6e 	vldr	s15, [pc, #440]	; 8004638 <joystickCalculatePos+0x360>
 8004480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004484:	4b6b      	ldr	r3, [pc, #428]	; (8004634 <joystickCalculatePos+0x35c>)
 8004486:	edc3 7a01 	vstr	s15, [r3, #4]

  // filter joystick forward deadzone
  if (hJoystick.angle > JoyForwardAngle - JoyForwardAngleDeadzone &&
 800448a:	4b6a      	ldr	r3, [pc, #424]	; (8004634 <joystickCalculatePos+0x35c>)
 800448c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004490:	eddf 6a6a 	vldr	s13, [pc, #424]	; 800463c <joystickCalculatePos+0x364>
 8004494:	eddf 7a6a 	vldr	s15, [pc, #424]	; 8004640 <joystickCalculatePos+0x368>
 8004498:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800449c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a4:	dd10      	ble.n	80044c8 <joystickCalculatePos+0x1f0>
      hJoystick.angle < JoyForwardAngle + JoyForwardAngleDeadzone)
 80044a6:	4b63      	ldr	r3, [pc, #396]	; (8004634 <joystickCalculatePos+0x35c>)
 80044a8:	ed93 7a02 	vldr	s14, [r3, #8]
 80044ac:	eddf 6a63 	vldr	s13, [pc, #396]	; 800463c <joystickCalculatePos+0x364>
 80044b0:	eddf 7a63 	vldr	s15, [pc, #396]	; 8004640 <joystickCalculatePos+0x368>
 80044b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
  if (hJoystick.angle > JoyForwardAngle - JoyForwardAngleDeadzone &&
 80044b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c0:	d502      	bpl.n	80044c8 <joystickCalculatePos+0x1f0>
    hJoystick.angle = JoyForwardAngle;
 80044c2:	4a60      	ldr	r2, [pc, #384]	; (8004644 <joystickCalculatePos+0x36c>)
 80044c4:	4b5b      	ldr	r3, [pc, #364]	; (8004634 <joystickCalculatePos+0x35c>)
 80044c6:	609a      	str	r2, [r3, #8]

  // filter joystick backward deadzone
  if (hJoystick.angle > -(JoyForwardAngle + JoyForwardAngleDeadzone) &&
 80044c8:	4b5a      	ldr	r3, [pc, #360]	; (8004634 <joystickCalculatePos+0x35c>)
 80044ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80044ce:	eddf 6a5b 	vldr	s13, [pc, #364]	; 800463c <joystickCalculatePos+0x364>
 80044d2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8004640 <joystickCalculatePos+0x368>
 80044d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044da:	eef1 7a67 	vneg.f32	s15, s15
 80044de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e6:	dd16      	ble.n	8004516 <joystickCalculatePos+0x23e>
      hJoystick.angle < -(JoyForwardAngle - JoyForwardAngleDeadzone))
 80044e8:	4b52      	ldr	r3, [pc, #328]	; (8004634 <joystickCalculatePos+0x35c>)
 80044ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80044ee:	eddf 6a53 	vldr	s13, [pc, #332]	; 800463c <joystickCalculatePos+0x364>
 80044f2:	eddf 7a53 	vldr	s15, [pc, #332]	; 8004640 <joystickCalculatePos+0x368>
 80044f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80044fa:	eef1 7a67 	vneg.f32	s15, s15
  if (hJoystick.angle > -(JoyForwardAngle + JoyForwardAngleDeadzone) &&
 80044fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004506:	d506      	bpl.n	8004516 <joystickCalculatePos+0x23e>
    hJoystick.angle = -JoyForwardAngle;
 8004508:	eddf 7a4c 	vldr	s15, [pc, #304]	; 800463c <joystickCalculatePos+0x364>
 800450c:	eef1 7a67 	vneg.f32	s15, s15
 8004510:	4b48      	ldr	r3, [pc, #288]	; (8004634 <joystickCalculatePos+0x35c>)
 8004512:	edc3 7a02 	vstr	s15, [r3, #8]

  // normalize joystick reading
  hJoystick.linear = hJoystick.magnitude/JoystickMagnitudeMax * sin(hJoystick.angle);
 8004516:	4b47      	ldr	r3, [pc, #284]	; (8004634 <joystickCalculatePos+0x35c>)
 8004518:	ed93 7a01 	vldr	s14, [r3, #4]
 800451c:	eddf 7a46 	vldr	s15, [pc, #280]	; 8004638 <joystickCalculatePos+0x360>
 8004520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004524:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004528:	ee16 0a90 	vmov	r0, s13
 800452c:	f7fb ffc4 	bl	80004b8 <__aeabi_f2d>
 8004530:	4604      	mov	r4, r0
 8004532:	460d      	mov	r5, r1
 8004534:	4b3f      	ldr	r3, [pc, #252]	; (8004634 <joystickCalculatePos+0x35c>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	4618      	mov	r0, r3
 800453a:	f7fb ffbd 	bl	80004b8 <__aeabi_f2d>
 800453e:	4602      	mov	r2, r0
 8004540:	460b      	mov	r3, r1
 8004542:	ec43 2b10 	vmov	d0, r2, r3
 8004546:	f006 f817 	bl	800a578 <sin>
 800454a:	ec53 2b10 	vmov	r2, r3, d0
 800454e:	4620      	mov	r0, r4
 8004550:	4629      	mov	r1, r5
 8004552:	f7fc f809 	bl	8000568 <__aeabi_dmul>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4610      	mov	r0, r2
 800455c:	4619      	mov	r1, r3
 800455e:	f7fc fafb 	bl	8000b58 <__aeabi_d2f>
 8004562:	4603      	mov	r3, r0
 8004564:	4a33      	ldr	r2, [pc, #204]	; (8004634 <joystickCalculatePos+0x35c>)
 8004566:	60d3      	str	r3, [r2, #12]
  hJoystick.angular = hJoystick.magnitude/JoystickMagnitudeMax * cos(hJoystick.angle);
 8004568:	4b32      	ldr	r3, [pc, #200]	; (8004634 <joystickCalculatePos+0x35c>)
 800456a:	ed93 7a01 	vldr	s14, [r3, #4]
 800456e:	eddf 7a32 	vldr	s15, [pc, #200]	; 8004638 <joystickCalculatePos+0x360>
 8004572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004576:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800457a:	ee16 0a90 	vmov	r0, s13
 800457e:	f7fb ff9b 	bl	80004b8 <__aeabi_f2d>
 8004582:	4604      	mov	r4, r0
 8004584:	460d      	mov	r5, r1
 8004586:	4b2b      	ldr	r3, [pc, #172]	; (8004634 <joystickCalculatePos+0x35c>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	4618      	mov	r0, r3
 800458c:	f7fb ff94 	bl	80004b8 <__aeabi_f2d>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	ec43 2b10 	vmov	d0, r2, r3
 8004598:	f005 ff92 	bl	800a4c0 <cos>
 800459c:	ec53 2b10 	vmov	r2, r3, d0
 80045a0:	4620      	mov	r0, r4
 80045a2:	4629      	mov	r1, r5
 80045a4:	f7fb ffe0 	bl	8000568 <__aeabi_dmul>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4610      	mov	r0, r2
 80045ae:	4619      	mov	r1, r3
 80045b0:	f7fc fad2 	bl	8000b58 <__aeabi_d2f>
 80045b4:	4603      	mov	r3, r0
 80045b6:	4a1f      	ldr	r2, [pc, #124]	; (8004634 <joystickCalculatePos+0x35c>)
 80045b8:	6113      	str	r3, [r2, #16]

  if (fabs(hJoystick.linear) < 0.05)
 80045ba:	4b1e      	ldr	r3, [pc, #120]	; (8004634 <joystickCalculatePos+0x35c>)
 80045bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80045c0:	eef0 7ae7 	vabs.f32	s15, s15
 80045c4:	ee17 0a90 	vmov	r0, s15
 80045c8:	f7fb ff76 	bl	80004b8 <__aeabi_f2d>
 80045cc:	a316      	add	r3, pc, #88	; (adr r3, 8004628 <joystickCalculatePos+0x350>)
 80045ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d2:	f7fc fa3b 	bl	8000a4c <__aeabi_dcmplt>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <joystickCalculatePos+0x30c>
    hJoystick.linear = 0;
 80045dc:	4b15      	ldr	r3, [pc, #84]	; (8004634 <joystickCalculatePos+0x35c>)
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	60da      	str	r2, [r3, #12]
  if (fabs(hJoystick.angular) < 0.05)
 80045e4:	4b13      	ldr	r3, [pc, #76]	; (8004634 <joystickCalculatePos+0x35c>)
 80045e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80045ea:	eef0 7ae7 	vabs.f32	s15, s15
 80045ee:	ee17 0a90 	vmov	r0, s15
 80045f2:	f7fb ff61 	bl	80004b8 <__aeabi_f2d>
 80045f6:	a30c      	add	r3, pc, #48	; (adr r3, 8004628 <joystickCalculatePos+0x350>)
 80045f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fc:	f7fc fa26 	bl	8000a4c <__aeabi_dcmplt>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <joystickCalculatePos+0x336>
    hJoystick.angular = 0;
 8004606:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <joystickCalculatePos+0x35c>)
 8004608:	f04f 0200 	mov.w	r2, #0
 800460c:	611a      	str	r2, [r3, #16]

  joy_pos_buffer_cnt++;
 800460e:	4b0e      	ldr	r3, [pc, #56]	; (8004648 <joystickCalculatePos+0x370>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3301      	adds	r3, #1
 8004614:	4a0c      	ldr	r2, [pc, #48]	; (8004648 <joystickCalculatePos+0x370>)
 8004616:	6013      	str	r3, [r2, #0]
}
 8004618:	bf00      	nop
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bdb0      	pop	{r4, r5, r7, pc}
 8004620:	00000000 	.word	0x00000000
 8004624:	40000000 	.word	0x40000000
 8004628:	9999999a 	.word	0x9999999a
 800462c:	3fa99999 	.word	0x3fa99999
 8004630:	20000248 	.word	0x20000248
 8004634:	20000724 	.word	0x20000724
 8004638:	00004650 	.word	0x00004650
 800463c:	3fc8f5c3 	.word	0x3fc8f5c3
 8004640:	3dcccccd 	.word	0x3dcccccd
 8004644:	3fc8f5c3 	.word	0x3fc8f5c3
 8004648:	20000270 	.word	0x20000270

0800464c <wheelSpeedControl_Init>:

void wheelSpeedControl_Init(WheelSpeed* wheel, float max_lin_speed, float max_ang_speed)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	ed87 0a02 	vstr	s0, [r7, #8]
 8004658:	edc7 0a01 	vstr	s1, [r7, #4]
  wheel->stable_cnt = 0;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	611a      	str	r2, [r3, #16]
  wheel->cur_r = 0.0f;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	605a      	str	r2, [r3, #4]
  wheel->cur_l = 0.0f;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	601a      	str	r2, [r3, #0]
  wheel->pre_l= 0.0f;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	609a      	str	r2, [r3, #8]
  wheel->pre_r = 0.0f;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	60da      	str	r2, [r3, #12]
  wheel->max_angular_speed = max_ang_speed;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	619a      	str	r2, [r3, #24]
  wheel->max_linear_speed = max_lin_speed;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	615a      	str	r2, [r3, #20]
  wheel->start_from_stationary = false;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	771a      	strb	r2, [r3, #28]
}
 8004694:	bf00      	nop
 8004696:	3714      	adds	r7, #20
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <wheel_Control>:

void wheel_Control(WheelSpeed* wheel)
{
 80046a0:	b5b0      	push	{r4, r5, r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  if (wheel->stable_cnt < 25)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	2b18      	cmp	r3, #24
 80046ae:	dc05      	bgt.n	80046bc <wheel_Control+0x1c>
  {
      wheel->stable_cnt++;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	611a      	str	r2, [r3, #16]
    return;
 80046ba:	e1c9      	b.n	8004a50 <wheel_Control+0x3b0>
  }

  joystickCalculatePos();
 80046bc:	f7ff fe0c 	bl	80042d8 <joystickCalculatePos>
  wheelCalculateSpeed(wheel);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f9c9 	bl	8004a58 <wheelCalculateSpeed>

  if (wheel->pre_l == 0 && wheel->pre_r == 0)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80046cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d4:	d10a      	bne.n	80046ec <wheel_Control+0x4c>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80046dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e4:	d102      	bne.n	80046ec <wheel_Control+0x4c>
    wheel->start_from_stationary = true;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	771a      	strb	r2, [r3, #28]

  if (hJoystick.magnitude > JoystickMagnitudeMin)
 80046ec:	4baa      	ldr	r3, [pc, #680]	; (8004998 <wheel_Control+0x2f8>)
 80046ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80046f2:	eddf 7aaa 	vldr	s15, [pc, #680]	; 800499c <wheel_Control+0x2fc>
 80046f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004702:	f340 80e8 	ble.w	80048d6 <wheel_Control+0x236>
  {
    float left_speed_step = wheel->left_speed_step;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470a:	617b      	str	r3, [r7, #20]
    float right_speed_step = wheel->right_speed_step;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	613b      	str	r3, [r7, #16]

    if (wheel->start_from_stationary)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	7f1b      	ldrb	r3, [r3, #28]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d072      	beq.n	8004800 <wheel_Control+0x160>
    {
    	//deadzone 25, speed up initial speed
      left_speed_step = 25 + fabs( wheel->cur_l) / wheel->accel_loop;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	edd3 7a00 	vldr	s15, [r3]
 8004720:	eef0 7ae7 	vabs.f32	s15, s15
 8004724:	ee17 0a90 	vmov	r0, s15
 8004728:	f7fb fec6 	bl	80004b8 <__aeabi_f2d>
 800472c:	4604      	mov	r4, r0
 800472e:	460d      	mov	r5, r1
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	4618      	mov	r0, r3
 8004736:	f7fb febf 	bl	80004b8 <__aeabi_f2d>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4620      	mov	r0, r4
 8004740:	4629      	mov	r1, r5
 8004742:	f7fc f83b 	bl	80007bc <__aeabi_ddiv>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4610      	mov	r0, r2
 800474c:	4619      	mov	r1, r3
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	4b93      	ldr	r3, [pc, #588]	; (80049a0 <wheel_Control+0x300>)
 8004754:	f7fb fd52 	bl	80001fc <__adddf3>
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4610      	mov	r0, r2
 800475e:	4619      	mov	r1, r3
 8004760:	f7fc f9fa 	bl	8000b58 <__aeabi_d2f>
 8004764:	4603      	mov	r3, r0
 8004766:	617b      	str	r3, [r7, #20]
      right_speed_step = 25 + fabs( wheel->cur_l) / wheel->accel_loop;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	edd3 7a00 	vldr	s15, [r3]
 800476e:	eef0 7ae7 	vabs.f32	s15, s15
 8004772:	ee17 0a90 	vmov	r0, s15
 8004776:	f7fb fe9f 	bl	80004b8 <__aeabi_f2d>
 800477a:	4604      	mov	r4, r0
 800477c:	460d      	mov	r5, r1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	4618      	mov	r0, r3
 8004784:	f7fb fe98 	bl	80004b8 <__aeabi_f2d>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4620      	mov	r0, r4
 800478e:	4629      	mov	r1, r5
 8004790:	f7fc f814 	bl	80007bc <__aeabi_ddiv>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4610      	mov	r0, r2
 800479a:	4619      	mov	r1, r3
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	4b7f      	ldr	r3, [pc, #508]	; (80049a0 <wheel_Control+0x300>)
 80047a2:	f7fb fd2b 	bl	80001fc <__adddf3>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	4610      	mov	r0, r2
 80047ac:	4619      	mov	r1, r3
 80047ae:	f7fc f9d3 	bl	8000b58 <__aeabi_d2f>
 80047b2:	4603      	mov	r3, r0
 80047b4:	613b      	str	r3, [r7, #16]

      if (fabs(wheel->pre_l) > 0.5f * wheel->max_angular_speed &&
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80047bc:	eeb0 7ae7 	vabs.f32	s14, s15
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	edd3 7a06 	vldr	s15, [r3, #24]
 80047c6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80047ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80047ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d6:	dd13      	ble.n	8004800 <wheel_Control+0x160>
          fabs(wheel->pre_r) > 0.5f * wheel->max_angular_speed)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	edd3 7a03 	vldr	s15, [r3, #12]
 80047de:	eeb0 7ae7 	vabs.f32	s14, s15
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	edd3 7a06 	vldr	s15, [r3, #24]
 80047e8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80047ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
      if (fabs(wheel->pre_l) > 0.5f * wheel->max_angular_speed &&
 80047f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f8:	dd02      	ble.n	8004800 <wheel_Control+0x160>
      {
	  wheel->start_from_stationary = false;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	771a      	strb	r2, [r3, #28]
      }
    }

    if (( wheel->cur_l - wheel->pre_l) > left_speed_step)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	ed93 7a00 	vldr	s14, [r3]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	edd3 7a02 	vldr	s15, [r3, #8]
 800480c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004810:	ed97 7a05 	vldr	s14, [r7, #20]
 8004814:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800481c:	d50a      	bpl.n	8004834 <wheel_Control+0x194>
      wheel->cur_l = wheel->pre_l + left_speed_step;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	ed93 7a02 	vldr	s14, [r3, #8]
 8004824:	edd7 7a05 	vldr	s15, [r7, #20]
 8004828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	edc3 7a00 	vstr	s15, [r3]
 8004832:	e01a      	b.n	800486a <wheel_Control+0x1ca>
    else if ((wheel->cur_l - wheel->pre_l) < -left_speed_step)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	ed93 7a00 	vldr	s14, [r3]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004840:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004844:	edd7 7a05 	vldr	s15, [r7, #20]
 8004848:	eef1 7a67 	vneg.f32	s15, s15
 800484c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004854:	d509      	bpl.n	800486a <wheel_Control+0x1ca>
      wheel->cur_l = wheel->pre_l - left_speed_step;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	ed93 7a02 	vldr	s14, [r3, #8]
 800485c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	edc3 7a00 	vstr	s15, [r3]

    if ((wheel->cur_r - wheel->pre_r) > right_speed_step)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	edd3 7a03 	vldr	s15, [r3, #12]
 8004876:	ee77 7a67 	vsub.f32	s15, s14, s15
 800487a:	ed97 7a04 	vldr	s14, [r7, #16]
 800487e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004886:	d50a      	bpl.n	800489e <wheel_Control+0x1fe>
      wheel->cur_r = wheel->pre_r + right_speed_step;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	ed93 7a03 	vldr	s14, [r3, #12]
 800488e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	edc3 7a01 	vstr	s15, [r3, #4]
 800489c:	e088      	b.n	80049b0 <wheel_Control+0x310>
    else if ((wheel->cur_r - wheel->pre_r) < -right_speed_step)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80048aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80048b2:	eef1 7a67 	vneg.f32	s15, s15
 80048b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048be:	d577      	bpl.n	80049b0 <wheel_Control+0x310>
      wheel->cur_r = wheel->pre_r - right_speed_step;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	ed93 7a03 	vldr	s14, [r3, #12]
 80048c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80048ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	edc3 7a01 	vstr	s15, [r3, #4]
 80048d4:	e06c      	b.n	80049b0 <wheel_Control+0x310>
//      wheel->cur_r = 0;

//    float left_speed_step = fabs(wheel->cur_l) / wheel->decel_loop;
//    float right_speed_step = fabs(wheel->cur_r) / wheel->decel_loop;
//
    float left_speed_step = 10;
 80048d6:	4b33      	ldr	r3, [pc, #204]	; (80049a4 <wheel_Control+0x304>)
 80048d8:	60fb      	str	r3, [r7, #12]
    float right_speed_step = 10;
 80048da:	4b32      	ldr	r3, [pc, #200]	; (80049a4 <wheel_Control+0x304>)
 80048dc:	60bb      	str	r3, [r7, #8]
//    else if (wheel->cur_r < -right_speed_step)
//      wheel->cur_r = wheel->pre_r + right_speed_step;
//    else
//      wheel->cur_r = 0;

    if (wheel->pre_l > left_speed_step)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80048e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80048e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f0:	d50a      	bpl.n	8004908 <wheel_Control+0x268>
      wheel->cur_l = wheel->pre_l - left_speed_step;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	ed93 7a02 	vldr	s14, [r3, #8]
 80048f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80048fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	edc3 7a00 	vstr	s15, [r3]
 8004906:	e01a      	b.n	800493e <wheel_Control+0x29e>
    else if (wheel->pre_l < -left_speed_step)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	ed93 7a02 	vldr	s14, [r3, #8]
 800490e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004912:	eef1 7a67 	vneg.f32	s15, s15
 8004916:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800491a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491e:	d50a      	bpl.n	8004936 <wheel_Control+0x296>
      wheel->cur_l = wheel->pre_l + left_speed_step;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	ed93 7a02 	vldr	s14, [r3, #8]
 8004926:	edd7 7a03 	vldr	s15, [r7, #12]
 800492a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	edc3 7a00 	vstr	s15, [r3]
 8004934:	e003      	b.n	800493e <wheel_Control+0x29e>
    else
      wheel->cur_l = 0;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	601a      	str	r2, [r3, #0]
    
    if (wheel->pre_r > right_speed_step)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	edd3 7a03 	vldr	s15, [r3, #12]
 8004944:	ed97 7a02 	vldr	s14, [r7, #8]
 8004948:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800494c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004950:	d50a      	bpl.n	8004968 <wheel_Control+0x2c8>
      wheel->cur_r = wheel->pre_r - right_speed_step;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	ed93 7a03 	vldr	s14, [r3, #12]
 8004958:	edd7 7a02 	vldr	s15, [r7, #8]
 800495c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	edc3 7a01 	vstr	s15, [r3, #4]
 8004966:	e023      	b.n	80049b0 <wheel_Control+0x310>
    else if (wheel->pre_r < -right_speed_step)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	ed93 7a03 	vldr	s14, [r3, #12]
 800496e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004972:	eef1 7a67 	vneg.f32	s15, s15
 8004976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800497a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800497e:	d513      	bpl.n	80049a8 <wheel_Control+0x308>
      wheel->cur_r = wheel->pre_r + right_speed_step;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	ed93 7a03 	vldr	s14, [r3, #12]
 8004986:	edd7 7a02 	vldr	s15, [r7, #8]
 800498a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	edc3 7a01 	vstr	s15, [r3, #4]
 8004994:	e00c      	b.n	80049b0 <wheel_Control+0x310>
 8004996:	bf00      	nop
 8004998:	20000724 	.word	0x20000724
 800499c:	00000bb8 	.word	0x00000bb8
 80049a0:	40390000 	.word	0x40390000
 80049a4:	41200000 	.word	0x41200000
    else
      wheel->cur_r = 0;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	605a      	str	r2, [r3, #4]



  }

  if (wheel->cur_l > wheel->max_linear_speed)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	ed93 7a00 	vldr	s14, [r3]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	edd3 7a05 	vldr	s15, [r3, #20]
 80049bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c4:	dd03      	ble.n	80049ce <wheel_Control+0x32e>
    wheel->cur_l = wheel->max_linear_speed;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695a      	ldr	r2, [r3, #20]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	601a      	str	r2, [r3, #0]
  if (wheel->cur_r > wheel->max_linear_speed)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	edd3 7a05 	vldr	s15, [r3, #20]
 80049da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e2:	dd03      	ble.n	80049ec <wheel_Control+0x34c>
    wheel->cur_r = wheel->max_linear_speed;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	695a      	ldr	r2, [r3, #20]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	605a      	str	r2, [r3, #4]

  if (wheel->cur_l < -wheel->max_linear_speed)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	ed93 7a00 	vldr	s14, [r3]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80049f8:	eef1 7a67 	vneg.f32	s15, s15
 80049fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a04:	d507      	bpl.n	8004a16 <wheel_Control+0x376>
    wheel->cur_l = -wheel->max_linear_speed;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	edd3 7a05 	vldr	s15, [r3, #20]
 8004a0c:	eef1 7a67 	vneg.f32	s15, s15
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	edc3 7a00 	vstr	s15, [r3]
  if (wheel->cur_r < -wheel->max_linear_speed)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	ed93 7a01 	vldr	s14, [r3, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	edd3 7a05 	vldr	s15, [r3, #20]
 8004a22:	eef1 7a67 	vneg.f32	s15, s15
 8004a26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a2e:	d507      	bpl.n	8004a40 <wheel_Control+0x3a0>
    wheel->cur_r = -wheel->max_linear_speed;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	edd3 7a05 	vldr	s15, [r3, #20]
 8004a36:	eef1 7a67 	vneg.f32	s15, s15
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	edc3 7a01 	vstr	s15, [r3, #4]

  wheel->pre_l = wheel->cur_l;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	609a      	str	r2, [r3, #8]
  wheel->pre_r = wheel->cur_r;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	60da      	str	r2, [r3, #12]
  
}
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bdb0      	pop	{r4, r5, r7, pc}
 8004a56:	bf00      	nop

08004a58 <wheelCalculateSpeed>:



void wheelCalculateSpeed(WheelSpeed* wheel)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  float linearSpeed = wheel->max_linear_speed * hJoystick.linear;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	ed93 7a05 	vldr	s14, [r3, #20]
 8004a66:	4b25      	ldr	r3, [pc, #148]	; (8004afc <wheelCalculateSpeed+0xa4>)
 8004a68:	edd3 7a03 	vldr	s15, [r3, #12]
 8004a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a70:	edc7 7a03 	vstr	s15, [r7, #12]
  float angularSpeed = wheel->max_angular_speed *  hJoystick.angular;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	ed93 7a06 	vldr	s14, [r3, #24]
 8004a7a:	4b20      	ldr	r3, [pc, #128]	; (8004afc <wheelCalculateSpeed+0xa4>)
 8004a7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a84:	edc7 7a02 	vstr	s15, [r7, #8]

  wheel->cur_l = linearSpeed + angularSpeed;
 8004a88:	ed97 7a03 	vldr	s14, [r7, #12]
 8004a8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	edc3 7a00 	vstr	s15, [r3]
  wheel->cur_r = linearSpeed - angularSpeed;
 8004a9a:	ed97 7a03 	vldr	s14, [r7, #12]
 8004a9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	edc3 7a01 	vstr	s15, [r3, #4]

  // direct step to 0 if speed is small enough50
  // direct step to 0 if speed is small enough50
  if(fabs(wheel->cur_l) < 25)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	edd3 7a00 	vldr	s15, [r3]
 8004ab2:	eef0 7ae7 	vabs.f32	s15, s15
 8004ab6:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac2:	d503      	bpl.n	8004acc <wheelCalculateSpeed+0x74>
    wheel->cur_l = 0;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]
  if(fabs(  wheel->cur_r) < 25)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ad2:	eef0 7ae7 	vabs.f32	s15, s15
 8004ad6:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004ada:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae2:	d400      	bmi.n	8004ae6 <wheelCalculateSpeed+0x8e>
    wheel->cur_r = 0;
}
 8004ae4:	e003      	b.n	8004aee <wheelCalculateSpeed+0x96>
    wheel->cur_r = 0;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	605a      	str	r2, [r3, #4]
}
 8004aee:	bf00      	nop
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	20000724 	.word	0x20000724

08004b00 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler: 



  ldr   sp, =_estack       /* set stack pointer */
 8004b00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b38 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004b04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004b06:	e003      	b.n	8004b10 <LoopCopyDataInit>

08004b08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004b08:	4b0c      	ldr	r3, [pc, #48]	; (8004b3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004b0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004b0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004b0e:	3104      	adds	r1, #4

08004b10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004b10:	480b      	ldr	r0, [pc, #44]	; (8004b40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004b12:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004b14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004b16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004b18:	d3f6      	bcc.n	8004b08 <CopyDataInit>
  ldr  r2, =_sbss
 8004b1a:	4a0b      	ldr	r2, [pc, #44]	; (8004b48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004b1c:	e002      	b.n	8004b24 <LoopFillZerobss>

08004b1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004b1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004b20:	f842 3b04 	str.w	r3, [r2], #4

08004b24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004b24:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004b26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004b28:	d3f9      	bcc.n	8004b1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004b2a:	f7fe ff95 	bl	8003a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b2e:	f005 fafb 	bl	800a128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b32:	f7fd fb2d 	bl	8002190 <main>
  bx  lr    
 8004b36:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004b38:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004b3c:	0800ce50 	.word	0x0800ce50
  ldr  r0, =_sdata
 8004b40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004b44:	200001a0 	.word	0x200001a0
  ldr  r2, =_sbss
 8004b48:	200001a0 	.word	0x200001a0
  ldr  r3, = _ebss
 8004b4c:	2000073c 	.word	0x2000073c

08004b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b50:	e7fe      	b.n	8004b50 <ADC_IRQHandler>
	...

08004b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b58:	4b0e      	ldr	r3, [pc, #56]	; (8004b94 <HAL_Init+0x40>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a0d      	ldr	r2, [pc, #52]	; (8004b94 <HAL_Init+0x40>)
 8004b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b64:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <HAL_Init+0x40>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a0a      	ldr	r2, [pc, #40]	; (8004b94 <HAL_Init+0x40>)
 8004b6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b70:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <HAL_Init+0x40>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a07      	ldr	r2, [pc, #28]	; (8004b94 <HAL_Init+0x40>)
 8004b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b7c:	2003      	movs	r0, #3
 8004b7e:	f000 ffb1 	bl	8005ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b82:	2000      	movs	r0, #0
 8004b84:	f000 f808 	bl	8004b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b88:	f7fe feb8 	bl	80038fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	40023c00 	.word	0x40023c00

08004b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ba0:	4b12      	ldr	r3, [pc, #72]	; (8004bec <HAL_InitTick+0x54>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <HAL_InitTick+0x58>)
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	4619      	mov	r1, r3
 8004baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 ffc9 	bl	8005b4e <HAL_SYSTICK_Config>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e00e      	b.n	8004be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b0f      	cmp	r3, #15
 8004bca:	d80a      	bhi.n	8004be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bcc:	2200      	movs	r2, #0
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bd4:	f000 ff91 	bl	8005afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004bd8:	4a06      	ldr	r2, [pc, #24]	; (8004bf4 <HAL_InitTick+0x5c>)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
 8004be0:	e000      	b.n	8004be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	2000012c 	.word	0x2000012c
 8004bf0:	20000134 	.word	0x20000134
 8004bf4:	20000130 	.word	0x20000130

08004bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bfc:	4b06      	ldr	r3, [pc, #24]	; (8004c18 <HAL_IncTick+0x20>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <HAL_IncTick+0x24>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4413      	add	r3, r2
 8004c08:	4a04      	ldr	r2, [pc, #16]	; (8004c1c <HAL_IncTick+0x24>)
 8004c0a:	6013      	str	r3, [r2, #0]
}
 8004c0c:	bf00      	nop
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	20000134 	.word	0x20000134
 8004c1c:	20000738 	.word	0x20000738

08004c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c20:	b480      	push	{r7}
 8004c22:	af00      	add	r7, sp, #0
  return uwTick;
 8004c24:	4b03      	ldr	r3, [pc, #12]	; (8004c34 <HAL_GetTick+0x14>)
 8004c26:	681b      	ldr	r3, [r3, #0]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	20000738 	.word	0x20000738

08004c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c40:	f7ff ffee 	bl	8004c20 <HAL_GetTick>
 8004c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c50:	d005      	beq.n	8004c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c52:	4b0a      	ldr	r3, [pc, #40]	; (8004c7c <HAL_Delay+0x44>)
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c5e:	bf00      	nop
 8004c60:	f7ff ffde 	bl	8004c20 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d8f7      	bhi.n	8004c60 <HAL_Delay+0x28>
  {
  }
}
 8004c70:	bf00      	nop
 8004c72:	bf00      	nop
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20000134 	.word	0x20000134

08004c80 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e0ed      	b.n	8004e6e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d102      	bne.n	8004ca4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7fc ff1e 	bl	8001ae0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0202 	bic.w	r2, r2, #2
 8004cb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cb4:	f7ff ffb4 	bl	8004c20 <HAL_GetTick>
 8004cb8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004cba:	e012      	b.n	8004ce2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004cbc:	f7ff ffb0 	bl	8004c20 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b0a      	cmp	r3, #10
 8004cc8:	d90b      	bls.n	8004ce2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2205      	movs	r2, #5
 8004cda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e0c5      	b.n	8004e6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1e5      	bne.n	8004cbc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0201 	orr.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d00:	f7ff ff8e 	bl	8004c20 <HAL_GetTick>
 8004d04:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d06:	e012      	b.n	8004d2e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d08:	f7ff ff8a 	bl	8004c20 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b0a      	cmp	r3, #10
 8004d14:	d90b      	bls.n	8004d2e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2205      	movs	r2, #5
 8004d26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e09f      	b.n	8004e6e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0e5      	beq.n	8004d08 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	7e1b      	ldrb	r3, [r3, #24]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d108      	bne.n	8004d56 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	e007      	b.n	8004d66 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	7e5b      	ldrb	r3, [r3, #25]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d108      	bne.n	8004d80 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	e007      	b.n	8004d90 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	7e9b      	ldrb	r3, [r3, #26]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d108      	bne.n	8004daa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0220 	orr.w	r2, r2, #32
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	e007      	b.n	8004dba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0220 	bic.w	r2, r2, #32
 8004db8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	7edb      	ldrb	r3, [r3, #27]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d108      	bne.n	8004dd4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0210 	bic.w	r2, r2, #16
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	e007      	b.n	8004de4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0210 	orr.w	r2, r2, #16
 8004de2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	7f1b      	ldrb	r3, [r3, #28]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d108      	bne.n	8004dfe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0208 	orr.w	r2, r2, #8
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	e007      	b.n	8004e0e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0208 	bic.w	r2, r2, #8
 8004e0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	7f5b      	ldrb	r3, [r3, #29]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d108      	bne.n	8004e28 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f042 0204 	orr.w	r2, r2, #4
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	e007      	b.n	8004e38 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0204 	bic.w	r2, r2, #4
 8004e36:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	431a      	orrs	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	ea42 0103 	orr.w	r1, r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	1e5a      	subs	r2, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e8e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004e90:	7cfb      	ldrb	r3, [r7, #19]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d003      	beq.n	8004e9e <HAL_CAN_ConfigFilter+0x26>
 8004e96:	7cfb      	ldrb	r3, [r7, #19]
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	f040 80be 	bne.w	800501a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004e9e:	4b65      	ldr	r3, [pc, #404]	; (8005034 <HAL_CAN_ConfigFilter+0x1bc>)
 8004ea0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ea8:	f043 0201 	orr.w	r2, r3, #1
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004eb8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	021b      	lsls	r3, r3, #8
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	f003 031f 	and.w	r3, r3, #31
 8004ede:	2201      	movs	r2, #1
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	43db      	mvns	r3, r3
 8004ef0:	401a      	ands	r2, r3
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d123      	bne.n	8004f48 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	401a      	ands	r2, r3
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004f22:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	3248      	adds	r2, #72	; 0x48
 8004f28:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f3c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f3e:	6979      	ldr	r1, [r7, #20]
 8004f40:	3348      	adds	r3, #72	; 0x48
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	440b      	add	r3, r1
 8004f46:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d122      	bne.n	8004f96 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004f70:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	3248      	adds	r2, #72	; 0x48
 8004f76:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f8a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f8c:	6979      	ldr	r1, [r7, #20]
 8004f8e:	3348      	adds	r3, #72	; 0x48
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	440b      	add	r3, r1
 8004f94:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d109      	bne.n	8004fb2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	401a      	ands	r2, r3
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004fb0:	e007      	b.n	8004fc2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d109      	bne.n	8004fde <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	43db      	mvns	r3, r3
 8004fd4:	401a      	ands	r2, r3
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004fdc:	e007      	b.n	8004fee <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d107      	bne.n	8005006 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	431a      	orrs	r2, r3
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800500c:	f023 0201 	bic.w	r2, r3, #1
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	e006      	b.n	8005028 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
  }
}
 8005028:	4618      	mov	r0, r3
 800502a:	371c      	adds	r7, #28
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	40006400 	.word	0x40006400

08005038 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b01      	cmp	r3, #1
 800504a:	d12e      	bne.n	80050aa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0201 	bic.w	r2, r2, #1
 8005062:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005064:	f7ff fddc 	bl	8004c20 <HAL_GetTick>
 8005068:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800506a:	e012      	b.n	8005092 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800506c:	f7ff fdd8 	bl	8004c20 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b0a      	cmp	r3, #10
 8005078:	d90b      	bls.n	8005092 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2205      	movs	r2, #5
 800508a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e012      	b.n	80050b8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1e5      	bne.n	800506c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	e006      	b.n	80050b8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
  }
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b089      	sub	sp, #36	; 0x24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050d4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80050de:	7ffb      	ldrb	r3, [r7, #31]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d003      	beq.n	80050ec <HAL_CAN_AddTxMessage+0x2c>
 80050e4:	7ffb      	ldrb	r3, [r7, #31]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	f040 80b8 	bne.w	800525c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10a      	bne.n	800510c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d105      	bne.n	800510c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 80a0 	beq.w	800524c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	0e1b      	lsrs	r3, r3, #24
 8005110:	f003 0303 	and.w	r3, r3, #3
 8005114:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2b02      	cmp	r3, #2
 800511a:	d907      	bls.n	800512c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e09e      	b.n	800526a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800512c:	2201      	movs	r2, #1
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	409a      	lsls	r2, r3
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10d      	bne.n	800515a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005148:	68f9      	ldr	r1, [r7, #12]
 800514a:	6809      	ldr	r1, [r1, #0]
 800514c:	431a      	orrs	r2, r3
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	3318      	adds	r3, #24
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	440b      	add	r3, r1
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	e00f      	b.n	800517a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005164:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800516a:	68f9      	ldr	r1, [r7, #12]
 800516c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800516e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	3318      	adds	r3, #24
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	440b      	add	r3, r1
 8005178:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6819      	ldr	r1, [r3, #0]
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	691a      	ldr	r2, [r3, #16]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	3318      	adds	r3, #24
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	440b      	add	r3, r1
 800518a:	3304      	adds	r3, #4
 800518c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	7d1b      	ldrb	r3, [r3, #20]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d111      	bne.n	80051ba <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	3318      	adds	r3, #24
 800519e:	011b      	lsls	r3, r3, #4
 80051a0:	4413      	add	r3, r2
 80051a2:	3304      	adds	r3, #4
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	6811      	ldr	r1, [r2, #0]
 80051aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	3318      	adds	r3, #24
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	440b      	add	r3, r1
 80051b6:	3304      	adds	r3, #4
 80051b8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3307      	adds	r3, #7
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	061a      	lsls	r2, r3, #24
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3306      	adds	r3, #6
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	041b      	lsls	r3, r3, #16
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	3305      	adds	r3, #5
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	021b      	lsls	r3, r3, #8
 80051d4:	4313      	orrs	r3, r2
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	3204      	adds	r2, #4
 80051da:	7812      	ldrb	r2, [r2, #0]
 80051dc:	4610      	mov	r0, r2
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	6811      	ldr	r1, [r2, #0]
 80051e2:	ea43 0200 	orr.w	r2, r3, r0
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	440b      	add	r3, r1
 80051ec:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80051f0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3303      	adds	r3, #3
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	061a      	lsls	r2, r3, #24
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	3302      	adds	r3, #2
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	041b      	lsls	r3, r3, #16
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	3301      	adds	r3, #1
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	021b      	lsls	r3, r3, #8
 800520c:	4313      	orrs	r3, r2
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	7812      	ldrb	r2, [r2, #0]
 8005212:	4610      	mov	r0, r2
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	6811      	ldr	r1, [r2, #0]
 8005218:	ea43 0200 	orr.w	r2, r3, r0
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	440b      	add	r3, r1
 8005222:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005226:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	3318      	adds	r3, #24
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	4413      	add	r3, r2
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	6811      	ldr	r1, [r2, #0]
 800523a:	f043 0201 	orr.w	r2, r3, #1
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	3318      	adds	r3, #24
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	440b      	add	r3, r1
 8005246:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	e00e      	b.n	800526a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e006      	b.n	800526a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
  }
}
 800526a:	4618      	mov	r0, r3
 800526c:	3724      	adds	r7, #36	; 0x24
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005276:	b480      	push	{r7}
 8005278:	b087      	sub	sp, #28
 800527a:	af00      	add	r7, sp, #0
 800527c:	60f8      	str	r0, [r7, #12]
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	607a      	str	r2, [r7, #4]
 8005282:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f893 3020 	ldrb.w	r3, [r3, #32]
 800528a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800528c:	7dfb      	ldrb	r3, [r7, #23]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d003      	beq.n	800529a <HAL_CAN_GetRxMessage+0x24>
 8005292:	7dfb      	ldrb	r3, [r7, #23]
 8005294:	2b02      	cmp	r3, #2
 8005296:	f040 80f3 	bne.w	8005480 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10e      	bne.n	80052be <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d116      	bne.n	80052dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e0e7      	b.n	800548e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	f003 0303 	and.w	r3, r3, #3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d107      	bne.n	80052dc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e0d8      	b.n	800548e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	331b      	adds	r3, #27
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	4413      	add	r3, r2
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0204 	and.w	r2, r3, #4
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10c      	bne.n	8005314 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	331b      	adds	r3, #27
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	4413      	add	r3, r2
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	0d5b      	lsrs	r3, r3, #21
 800530a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	e00b      	b.n	800532c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	331b      	adds	r3, #27
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	4413      	add	r3, r2
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	08db      	lsrs	r3, r3, #3
 8005324:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	331b      	adds	r3, #27
 8005334:	011b      	lsls	r3, r3, #4
 8005336:	4413      	add	r3, r2
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0202 	and.w	r2, r3, #2
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	331b      	adds	r3, #27
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	4413      	add	r3, r2
 800534e:	3304      	adds	r3, #4
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 020f 	and.w	r2, r3, #15
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	331b      	adds	r3, #27
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	4413      	add	r3, r2
 8005366:	3304      	adds	r3, #4
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	0a1b      	lsrs	r3, r3, #8
 800536c:	b2da      	uxtb	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	331b      	adds	r3, #27
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	4413      	add	r3, r2
 800537e:	3304      	adds	r3, #4
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	0c1b      	lsrs	r3, r3, #16
 8005384:	b29a      	uxth	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	4413      	add	r3, r2
 8005394:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	b2da      	uxtb	r2, r3
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	0a1a      	lsrs	r2, r3, #8
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	3301      	adds	r3, #1
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	011b      	lsls	r3, r3, #4
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	0c1a      	lsrs	r2, r3, #16
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	3302      	adds	r3, #2
 80053d0:	b2d2      	uxtb	r2, r2
 80053d2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	4413      	add	r3, r2
 80053de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	0e1a      	lsrs	r2, r3, #24
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	3303      	adds	r3, #3
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	011b      	lsls	r3, r3, #4
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	3304      	adds	r3, #4
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	4413      	add	r3, r2
 8005410:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	0a1a      	lsrs	r2, r3, #8
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	3305      	adds	r3, #5
 800541c:	b2d2      	uxtb	r2, r2
 800541e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	4413      	add	r3, r2
 800542a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	0c1a      	lsrs	r2, r3, #16
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	3306      	adds	r3, #6
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	4413      	add	r3, r2
 8005444:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	0e1a      	lsrs	r2, r3, #24
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	3307      	adds	r3, #7
 8005450:	b2d2      	uxtb	r2, r2
 8005452:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d108      	bne.n	800546c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68da      	ldr	r2, [r3, #12]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f042 0220 	orr.w	r2, r2, #32
 8005468:	60da      	str	r2, [r3, #12]
 800546a:	e007      	b.n	800547c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691a      	ldr	r2, [r3, #16]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0220 	orr.w	r2, r2, #32
 800547a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	e006      	b.n	800548e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
  }
}
 800548e:	4618      	mov	r0, r3
 8005490:	371c      	adds	r7, #28
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800549a:	b480      	push	{r7}
 800549c:	b085      	sub	sp, #20
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054aa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d002      	beq.n	80054b8 <HAL_CAN_ActivateNotification+0x1e>
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d109      	bne.n	80054cc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6959      	ldr	r1, [r3, #20]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	e006      	b.n	80054da <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
  }
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b08a      	sub	sp, #40	; 0x28
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80054ee:	2300      	movs	r3, #0
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	2b00      	cmp	r3, #0
 800552a:	d07c      	beq.n	8005626 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d023      	beq.n	800557e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2201      	movs	r2, #1
 800553c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f983 	bl	8005854 <HAL_CAN_TxMailbox0CompleteCallback>
 800554e:	e016      	b.n	800557e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	f003 0304 	and.w	r3, r3, #4
 8005556:	2b00      	cmp	r3, #0
 8005558:	d004      	beq.n	8005564 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
 8005562:	e00c      	b.n	800557e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	2b00      	cmp	r3, #0
 800556c:	d004      	beq.n	8005578 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005574:	627b      	str	r3, [r7, #36]	; 0x24
 8005576:	e002      	b.n	800557e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f989 	bl	8005890 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005584:	2b00      	cmp	r3, #0
 8005586:	d024      	beq.n	80055d2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005590:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f963 	bl	8005868 <HAL_CAN_TxMailbox1CompleteCallback>
 80055a2:	e016      	b.n	80055d2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d004      	beq.n	80055b8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
 80055b6:	e00c      	b.n	80055d2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d004      	beq.n	80055cc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055c8:	627b      	str	r3, [r7, #36]	; 0x24
 80055ca:	e002      	b.n	80055d2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f969 	bl	80058a4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d024      	beq.n	8005626 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80055e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f943 	bl	800587c <HAL_CAN_TxMailbox2CompleteCallback>
 80055f6:	e016      	b.n	8005626 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d004      	beq.n	800560c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005608:	627b      	str	r3, [r7, #36]	; 0x24
 800560a:	e00c      	b.n	8005626 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d004      	beq.n	8005620 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
 800561e:	e002      	b.n	8005626 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f949 	bl	80058b8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	f003 0308 	and.w	r3, r3, #8
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00c      	beq.n	800564a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f003 0310 	and.w	r3, r3, #16
 8005636:	2b00      	cmp	r3, #0
 8005638:	d007      	beq.n	800564a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005640:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2210      	movs	r2, #16
 8005648:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00b      	beq.n	800566c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f003 0308 	and.w	r3, r3, #8
 800565a:	2b00      	cmp	r3, #0
 800565c:	d006      	beq.n	800566c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2208      	movs	r2, #8
 8005664:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f930 	bl	80058cc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d009      	beq.n	800568a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f003 0303 	and.w	r3, r3, #3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7fd fc23 	bl	8002ed0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00c      	beq.n	80056ae <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f003 0310 	and.w	r3, r3, #16
 800569a:	2b00      	cmp	r3, #0
 800569c:	d007      	beq.n	80056ae <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2210      	movs	r2, #16
 80056ac:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	f003 0320 	and.w	r3, r3, #32
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00b      	beq.n	80056d0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	f003 0308 	and.w	r3, r3, #8
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d006      	beq.n	80056d0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2208      	movs	r2, #8
 80056c8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f912 	bl	80058f4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	f003 0310 	and.w	r3, r3, #16
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d009      	beq.n	80056ee <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	f003 0303 	and.w	r3, r3, #3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d002      	beq.n	80056ee <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 f8f9 	bl	80058e0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00b      	beq.n	8005710 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	f003 0310 	and.w	r3, r3, #16
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d006      	beq.n	8005710 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2210      	movs	r2, #16
 8005708:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f8fc 	bl	8005908 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00b      	beq.n	8005732 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	f003 0308 	and.w	r3, r3, #8
 8005720:	2b00      	cmp	r3, #0
 8005722:	d006      	beq.n	8005732 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2208      	movs	r2, #8
 800572a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f8f5 	bl	800591c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d07b      	beq.n	8005834 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	f003 0304 	and.w	r3, r3, #4
 8005742:	2b00      	cmp	r3, #0
 8005744:	d072      	beq.n	800582c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574c:	2b00      	cmp	r3, #0
 800574e:	d008      	beq.n	8005762 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	f043 0301 	orr.w	r3, r3, #1
 8005760:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005768:	2b00      	cmp	r3, #0
 800576a:	d008      	beq.n	800577e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	f043 0302 	orr.w	r3, r3, #2
 800577c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005784:	2b00      	cmp	r3, #0
 8005786:	d008      	beq.n	800579a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	f043 0304 	orr.w	r3, r3, #4
 8005798:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d043      	beq.n	800582c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d03e      	beq.n	800582c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057b4:	2b60      	cmp	r3, #96	; 0x60
 80057b6:	d02b      	beq.n	8005810 <HAL_CAN_IRQHandler+0x32a>
 80057b8:	2b60      	cmp	r3, #96	; 0x60
 80057ba:	d82e      	bhi.n	800581a <HAL_CAN_IRQHandler+0x334>
 80057bc:	2b50      	cmp	r3, #80	; 0x50
 80057be:	d022      	beq.n	8005806 <HAL_CAN_IRQHandler+0x320>
 80057c0:	2b50      	cmp	r3, #80	; 0x50
 80057c2:	d82a      	bhi.n	800581a <HAL_CAN_IRQHandler+0x334>
 80057c4:	2b40      	cmp	r3, #64	; 0x40
 80057c6:	d019      	beq.n	80057fc <HAL_CAN_IRQHandler+0x316>
 80057c8:	2b40      	cmp	r3, #64	; 0x40
 80057ca:	d826      	bhi.n	800581a <HAL_CAN_IRQHandler+0x334>
 80057cc:	2b30      	cmp	r3, #48	; 0x30
 80057ce:	d010      	beq.n	80057f2 <HAL_CAN_IRQHandler+0x30c>
 80057d0:	2b30      	cmp	r3, #48	; 0x30
 80057d2:	d822      	bhi.n	800581a <HAL_CAN_IRQHandler+0x334>
 80057d4:	2b10      	cmp	r3, #16
 80057d6:	d002      	beq.n	80057de <HAL_CAN_IRQHandler+0x2f8>
 80057d8:	2b20      	cmp	r3, #32
 80057da:	d005      	beq.n	80057e8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80057dc:	e01d      	b.n	800581a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	f043 0308 	orr.w	r3, r3, #8
 80057e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80057e6:	e019      	b.n	800581c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	f043 0310 	orr.w	r3, r3, #16
 80057ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80057f0:	e014      	b.n	800581c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	f043 0320 	orr.w	r3, r3, #32
 80057f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80057fa:	e00f      	b.n	800581c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005802:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005804:	e00a      	b.n	800581c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800580e:	e005      	b.n	800581c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005816:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005818:	e000      	b.n	800581c <HAL_CAN_IRQHandler+0x336>
            break;
 800581a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800582a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2204      	movs	r2, #4
 8005832:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	2b00      	cmp	r3, #0
 8005838:	d008      	beq.n	800584c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f872 	bl	8005930 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800584c:	bf00      	nop
 800584e:	3728      	adds	r7, #40	; 0x28
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f003 0307 	and.w	r3, r3, #7
 8005952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005954:	4b0c      	ldr	r3, [pc, #48]	; (8005988 <__NVIC_SetPriorityGrouping+0x44>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005960:	4013      	ands	r3, r2
 8005962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800596c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005976:	4a04      	ldr	r2, [pc, #16]	; (8005988 <__NVIC_SetPriorityGrouping+0x44>)
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	60d3      	str	r3, [r2, #12]
}
 800597c:	bf00      	nop
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	e000ed00 	.word	0xe000ed00

0800598c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005990:	4b04      	ldr	r3, [pc, #16]	; (80059a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	0a1b      	lsrs	r3, r3, #8
 8005996:	f003 0307 	and.w	r3, r3, #7
}
 800599a:	4618      	mov	r0, r3
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	e000ed00 	.word	0xe000ed00

080059a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4603      	mov	r3, r0
 80059b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	db0b      	blt.n	80059d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059ba:	79fb      	ldrb	r3, [r7, #7]
 80059bc:	f003 021f 	and.w	r2, r3, #31
 80059c0:	4907      	ldr	r1, [pc, #28]	; (80059e0 <__NVIC_EnableIRQ+0x38>)
 80059c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	2001      	movs	r0, #1
 80059ca:	fa00 f202 	lsl.w	r2, r0, r2
 80059ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80059d2:	bf00      	nop
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	e000e100 	.word	0xe000e100

080059e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	4603      	mov	r3, r0
 80059ec:	6039      	str	r1, [r7, #0]
 80059ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	db0a      	blt.n	8005a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	490c      	ldr	r1, [pc, #48]	; (8005a30 <__NVIC_SetPriority+0x4c>)
 80059fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a02:	0112      	lsls	r2, r2, #4
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	440b      	add	r3, r1
 8005a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a0c:	e00a      	b.n	8005a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	b2da      	uxtb	r2, r3
 8005a12:	4908      	ldr	r1, [pc, #32]	; (8005a34 <__NVIC_SetPriority+0x50>)
 8005a14:	79fb      	ldrb	r3, [r7, #7]
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	3b04      	subs	r3, #4
 8005a1c:	0112      	lsls	r2, r2, #4
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	440b      	add	r3, r1
 8005a22:	761a      	strb	r2, [r3, #24]
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	e000e100 	.word	0xe000e100
 8005a34:	e000ed00 	.word	0xe000ed00

08005a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b089      	sub	sp, #36	; 0x24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f003 0307 	and.w	r3, r3, #7
 8005a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	f1c3 0307 	rsb	r3, r3, #7
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	bf28      	it	cs
 8005a56:	2304      	movcs	r3, #4
 8005a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	2b06      	cmp	r3, #6
 8005a60:	d902      	bls.n	8005a68 <NVIC_EncodePriority+0x30>
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	3b03      	subs	r3, #3
 8005a66:	e000      	b.n	8005a6a <NVIC_EncodePriority+0x32>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	fa02 f303 	lsl.w	r3, r2, r3
 8005a76:	43da      	mvns	r2, r3
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	401a      	ands	r2, r3
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8a:	43d9      	mvns	r1, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a90:	4313      	orrs	r3, r2
         );
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3724      	adds	r7, #36	; 0x24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
	...

08005aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ab0:	d301      	bcc.n	8005ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e00f      	b.n	8005ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ab6:	4a0a      	ldr	r2, [pc, #40]	; (8005ae0 <SysTick_Config+0x40>)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005abe:	210f      	movs	r1, #15
 8005ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ac4:	f7ff ff8e 	bl	80059e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ac8:	4b05      	ldr	r3, [pc, #20]	; (8005ae0 <SysTick_Config+0x40>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ace:	4b04      	ldr	r3, [pc, #16]	; (8005ae0 <SysTick_Config+0x40>)
 8005ad0:	2207      	movs	r2, #7
 8005ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	e000e010 	.word	0xe000e010

08005ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7ff ff29 	bl	8005944 <__NVIC_SetPriorityGrouping>
}
 8005af2:	bf00      	nop
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b086      	sub	sp, #24
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	4603      	mov	r3, r0
 8005b02:	60b9      	str	r1, [r7, #8]
 8005b04:	607a      	str	r2, [r7, #4]
 8005b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b0c:	f7ff ff3e 	bl	800598c <__NVIC_GetPriorityGrouping>
 8005b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	68b9      	ldr	r1, [r7, #8]
 8005b16:	6978      	ldr	r0, [r7, #20]
 8005b18:	f7ff ff8e 	bl	8005a38 <NVIC_EncodePriority>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b22:	4611      	mov	r1, r2
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7ff ff5d 	bl	80059e4 <__NVIC_SetPriority>
}
 8005b2a:	bf00      	nop
 8005b2c:	3718      	adds	r7, #24
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b082      	sub	sp, #8
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	4603      	mov	r3, r0
 8005b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7ff ff31 	bl	80059a8 <__NVIC_EnableIRQ>
}
 8005b46:	bf00      	nop
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b082      	sub	sp, #8
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7ff ffa2 	bl	8005aa0 <SysTick_Config>
 8005b5c:	4603      	mov	r3, r0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
	...

08005b68 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d106      	bne.n	8005b84 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8005b76:	4b09      	ldr	r3, [pc, #36]	; (8005b9c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a08      	ldr	r2, [pc, #32]	; (8005b9c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005b7c:	f043 0304 	orr.w	r3, r3, #4
 8005b80:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8005b82:	e005      	b.n	8005b90 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8005b84:	4b05      	ldr	r3, [pc, #20]	; (8005b9c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a04      	ldr	r2, [pc, #16]	; (8005b9c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8005b8a:	f023 0304 	bic.w	r3, r3, #4
 8005b8e:	6013      	str	r3, [r2, #0]
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	e000e010 	.word	0xe000e010

08005ba0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005bac:	f7ff f838 	bl	8004c20 <HAL_GetTick>
 8005bb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e099      	b.n	8005cf0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 0201 	bic.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bdc:	e00f      	b.n	8005bfe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bde:	f7ff f81f 	bl	8004c20 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	2b05      	cmp	r3, #5
 8005bea:	d908      	bls.n	8005bfe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2203      	movs	r2, #3
 8005bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e078      	b.n	8005cf0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1e8      	bne.n	8005bde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	4b38      	ldr	r3, [pc, #224]	; (8005cf8 <HAL_DMA_Init+0x158>)
 8005c18:	4013      	ands	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	2b04      	cmp	r3, #4
 8005c56:	d107      	bne.n	8005c68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c60:	4313      	orrs	r3, r2
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f023 0307 	bic.w	r3, r3, #7
 8005c7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d117      	bne.n	8005cc2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00e      	beq.n	8005cc2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fa91 	bl	80061cc <DMA_CheckFifoParam>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d008      	beq.n	8005cc2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2240      	movs	r2, #64	; 0x40
 8005cb4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e016      	b.n	8005cf0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fa48 	bl	8006160 <DMA_CalcBaseAndBitshift>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd8:	223f      	movs	r2, #63	; 0x3f
 8005cda:	409a      	lsls	r2, r3
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3718      	adds	r7, #24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	f010803f 	.word	0xf010803f

08005cfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
 8005d08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d101      	bne.n	8005d22 <HAL_DMA_Start_IT+0x26>
 8005d1e:	2302      	movs	r3, #2
 8005d20:	e040      	b.n	8005da4 <HAL_DMA_Start_IT+0xa8>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d12f      	bne.n	8005d96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2202      	movs	r2, #2
 8005d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	68b9      	ldr	r1, [r7, #8]
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f000 f9da 	bl	8006104 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d54:	223f      	movs	r2, #63	; 0x3f
 8005d56:	409a      	lsls	r2, r3
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0216 	orr.w	r2, r2, #22
 8005d6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d007      	beq.n	8005d84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f042 0208 	orr.w	r2, r2, #8
 8005d82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0201 	orr.w	r2, r2, #1
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	e005      	b.n	8005da2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005d9e:	2302      	movs	r3, #2
 8005da0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d004      	beq.n	8005dca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2280      	movs	r2, #128	; 0x80
 8005dc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e00c      	b.n	8005de4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2205      	movs	r2, #5
 8005dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0201 	bic.w	r2, r2, #1
 8005de0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005dfc:	4b92      	ldr	r3, [pc, #584]	; (8006048 <HAL_DMA_IRQHandler+0x258>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a92      	ldr	r2, [pc, #584]	; (800604c <HAL_DMA_IRQHandler+0x25c>)
 8005e02:	fba2 2303 	umull	r2, r3, r2, r3
 8005e06:	0a9b      	lsrs	r3, r3, #10
 8005e08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e1a:	2208      	movs	r2, #8
 8005e1c:	409a      	lsls	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4013      	ands	r3, r2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d01a      	beq.n	8005e5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0304 	and.w	r3, r3, #4
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d013      	beq.n	8005e5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 0204 	bic.w	r2, r2, #4
 8005e42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e48:	2208      	movs	r2, #8
 8005e4a:	409a      	lsls	r2, r3
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e54:	f043 0201 	orr.w	r2, r3, #1
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e60:	2201      	movs	r2, #1
 8005e62:	409a      	lsls	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4013      	ands	r3, r2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d012      	beq.n	8005e92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00b      	beq.n	8005e92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e7e:	2201      	movs	r2, #1
 8005e80:	409a      	lsls	r2, r3
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8a:	f043 0202 	orr.w	r2, r3, #2
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e96:	2204      	movs	r2, #4
 8005e98:	409a      	lsls	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d012      	beq.n	8005ec8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00b      	beq.n	8005ec8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb4:	2204      	movs	r2, #4
 8005eb6:	409a      	lsls	r2, r3
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec0:	f043 0204 	orr.w	r2, r3, #4
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ecc:	2210      	movs	r2, #16
 8005ece:	409a      	lsls	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d043      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0308 	and.w	r3, r3, #8
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d03c      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eea:	2210      	movs	r2, #16
 8005eec:	409a      	lsls	r2, r3
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d018      	beq.n	8005f32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d108      	bne.n	8005f20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d024      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	4798      	blx	r3
 8005f1e:	e01f      	b.n	8005f60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01b      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	4798      	blx	r3
 8005f30:	e016      	b.n	8005f60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d107      	bne.n	8005f50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 0208 	bic.w	r2, r2, #8
 8005f4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f64:	2220      	movs	r2, #32
 8005f66:	409a      	lsls	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 808e 	beq.w	800608e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0310 	and.w	r3, r3, #16
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 8086 	beq.w	800608e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f86:	2220      	movs	r2, #32
 8005f88:	409a      	lsls	r2, r3
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	2b05      	cmp	r3, #5
 8005f98:	d136      	bne.n	8006008 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f022 0216 	bic.w	r2, r2, #22
 8005fa8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	695a      	ldr	r2, [r3, #20]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d103      	bne.n	8005fca <HAL_DMA_IRQHandler+0x1da>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d007      	beq.n	8005fda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 0208 	bic.w	r2, r2, #8
 8005fd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fde:	223f      	movs	r2, #63	; 0x3f
 8005fe0:	409a      	lsls	r2, r3
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d07d      	beq.n	80060fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	4798      	blx	r3
        }
        return;
 8006006:	e078      	b.n	80060fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d01c      	beq.n	8006050 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d108      	bne.n	8006036 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006028:	2b00      	cmp	r3, #0
 800602a:	d030      	beq.n	800608e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	4798      	blx	r3
 8006034:	e02b      	b.n	800608e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603a:	2b00      	cmp	r3, #0
 800603c:	d027      	beq.n	800608e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	4798      	blx	r3
 8006046:	e022      	b.n	800608e <HAL_DMA_IRQHandler+0x29e>
 8006048:	2000012c 	.word	0x2000012c
 800604c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10f      	bne.n	800607e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0210 	bic.w	r2, r2, #16
 800606c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006092:	2b00      	cmp	r3, #0
 8006094:	d032      	beq.n	80060fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d022      	beq.n	80060e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2205      	movs	r2, #5
 80060a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0201 	bic.w	r2, r2, #1
 80060b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	3301      	adds	r3, #1
 80060be:	60bb      	str	r3, [r7, #8]
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d307      	bcc.n	80060d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1f2      	bne.n	80060ba <HAL_DMA_IRQHandler+0x2ca>
 80060d4:	e000      	b.n	80060d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80060d6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d005      	beq.n	80060fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	4798      	blx	r3
 80060f8:	e000      	b.n	80060fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80060fa:	bf00      	nop
    }
  }
}
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop

08006104 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006120:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	2b40      	cmp	r3, #64	; 0x40
 8006130:	d108      	bne.n	8006144 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006142:	e007      	b.n	8006154 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	60da      	str	r2, [r3, #12]
}
 8006154:	bf00      	nop
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	b2db      	uxtb	r3, r3
 800616e:	3b10      	subs	r3, #16
 8006170:	4a14      	ldr	r2, [pc, #80]	; (80061c4 <DMA_CalcBaseAndBitshift+0x64>)
 8006172:	fba2 2303 	umull	r2, r3, r2, r3
 8006176:	091b      	lsrs	r3, r3, #4
 8006178:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800617a:	4a13      	ldr	r2, [pc, #76]	; (80061c8 <DMA_CalcBaseAndBitshift+0x68>)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4413      	add	r3, r2
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2b03      	cmp	r3, #3
 800618c:	d909      	bls.n	80061a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006196:	f023 0303 	bic.w	r3, r3, #3
 800619a:	1d1a      	adds	r2, r3, #4
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	659a      	str	r2, [r3, #88]	; 0x58
 80061a0:	e007      	b.n	80061b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80061aa:	f023 0303 	bic.w	r3, r3, #3
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	aaaaaaab 	.word	0xaaaaaaab
 80061c8:	0800cba8 	.word	0x0800cba8

080061cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061d4:	2300      	movs	r3, #0
 80061d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d11f      	bne.n	8006226 <DMA_CheckFifoParam+0x5a>
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2b03      	cmp	r3, #3
 80061ea:	d856      	bhi.n	800629a <DMA_CheckFifoParam+0xce>
 80061ec:	a201      	add	r2, pc, #4	; (adr r2, 80061f4 <DMA_CheckFifoParam+0x28>)
 80061ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f2:	bf00      	nop
 80061f4:	08006205 	.word	0x08006205
 80061f8:	08006217 	.word	0x08006217
 80061fc:	08006205 	.word	0x08006205
 8006200:	0800629b 	.word	0x0800629b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006208:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d046      	beq.n	800629e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006214:	e043      	b.n	800629e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800621e:	d140      	bne.n	80062a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006224:	e03d      	b.n	80062a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800622e:	d121      	bne.n	8006274 <DMA_CheckFifoParam+0xa8>
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2b03      	cmp	r3, #3
 8006234:	d837      	bhi.n	80062a6 <DMA_CheckFifoParam+0xda>
 8006236:	a201      	add	r2, pc, #4	; (adr r2, 800623c <DMA_CheckFifoParam+0x70>)
 8006238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623c:	0800624d 	.word	0x0800624d
 8006240:	08006253 	.word	0x08006253
 8006244:	0800624d 	.word	0x0800624d
 8006248:	08006265 	.word	0x08006265
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	73fb      	strb	r3, [r7, #15]
      break;
 8006250:	e030      	b.n	80062b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006256:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d025      	beq.n	80062aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006262:	e022      	b.n	80062aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006268:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800626c:	d11f      	bne.n	80062ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006272:	e01c      	b.n	80062ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2b02      	cmp	r3, #2
 8006278:	d903      	bls.n	8006282 <DMA_CheckFifoParam+0xb6>
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2b03      	cmp	r3, #3
 800627e:	d003      	beq.n	8006288 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006280:	e018      	b.n	80062b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	73fb      	strb	r3, [r7, #15]
      break;
 8006286:	e015      	b.n	80062b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00e      	beq.n	80062b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	73fb      	strb	r3, [r7, #15]
      break;
 8006298:	e00b      	b.n	80062b2 <DMA_CheckFifoParam+0xe6>
      break;
 800629a:	bf00      	nop
 800629c:	e00a      	b.n	80062b4 <DMA_CheckFifoParam+0xe8>
      break;
 800629e:	bf00      	nop
 80062a0:	e008      	b.n	80062b4 <DMA_CheckFifoParam+0xe8>
      break;
 80062a2:	bf00      	nop
 80062a4:	e006      	b.n	80062b4 <DMA_CheckFifoParam+0xe8>
      break;
 80062a6:	bf00      	nop
 80062a8:	e004      	b.n	80062b4 <DMA_CheckFifoParam+0xe8>
      break;
 80062aa:	bf00      	nop
 80062ac:	e002      	b.n	80062b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80062ae:	bf00      	nop
 80062b0:	e000      	b.n	80062b4 <DMA_CheckFifoParam+0xe8>
      break;
 80062b2:	bf00      	nop
    }
  } 
  
  return status; 
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop

080062c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b089      	sub	sp, #36	; 0x24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062da:	2300      	movs	r3, #0
 80062dc:	61fb      	str	r3, [r7, #28]
 80062de:	e177      	b.n	80065d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80062e0:	2201      	movs	r2, #1
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	fa02 f303 	lsl.w	r3, r2, r3
 80062e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	4013      	ands	r3, r2
 80062f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	f040 8166 	bne.w	80065ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d00b      	beq.n	800631e <HAL_GPIO_Init+0x5a>
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	2b02      	cmp	r3, #2
 800630c:	d007      	beq.n	800631e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006312:	2b11      	cmp	r3, #17
 8006314:	d003      	beq.n	800631e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	2b12      	cmp	r3, #18
 800631c:	d130      	bne.n	8006380 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	2203      	movs	r2, #3
 800632a:	fa02 f303 	lsl.w	r3, r2, r3
 800632e:	43db      	mvns	r3, r3
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	4013      	ands	r3, r2
 8006334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	fa02 f303 	lsl.w	r3, r2, r3
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	4313      	orrs	r3, r2
 8006346:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006354:	2201      	movs	r2, #1
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	fa02 f303 	lsl.w	r3, r2, r3
 800635c:	43db      	mvns	r3, r3
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	4013      	ands	r3, r2
 8006362:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	091b      	lsrs	r3, r3, #4
 800636a:	f003 0201 	and.w	r2, r3, #1
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	fa02 f303 	lsl.w	r3, r2, r3
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	4313      	orrs	r3, r2
 8006378:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	2203      	movs	r2, #3
 800638c:	fa02 f303 	lsl.w	r3, r2, r3
 8006390:	43db      	mvns	r3, r3
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	4013      	ands	r3, r2
 8006396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	fa02 f303 	lsl.w	r3, r2, r3
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d003      	beq.n	80063c0 <HAL_GPIO_Init+0xfc>
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	2b12      	cmp	r3, #18
 80063be:	d123      	bne.n	8006408 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	08da      	lsrs	r2, r3, #3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3208      	adds	r2, #8
 80063c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	f003 0307 	and.w	r3, r3, #7
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	220f      	movs	r2, #15
 80063d8:	fa02 f303 	lsl.w	r3, r2, r3
 80063dc:	43db      	mvns	r3, r3
 80063de:	69ba      	ldr	r2, [r7, #24]
 80063e0:	4013      	ands	r3, r2
 80063e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	691a      	ldr	r2, [r3, #16]
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	f003 0307 	and.w	r3, r3, #7
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	fa02 f303 	lsl.w	r3, r2, r3
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	08da      	lsrs	r2, r3, #3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	3208      	adds	r2, #8
 8006402:	69b9      	ldr	r1, [r7, #24]
 8006404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	005b      	lsls	r3, r3, #1
 8006412:	2203      	movs	r2, #3
 8006414:	fa02 f303 	lsl.w	r3, r2, r3
 8006418:	43db      	mvns	r3, r3
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	4013      	ands	r3, r2
 800641e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f003 0203 	and.w	r2, r3, #3
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	005b      	lsls	r3, r3, #1
 800642c:	fa02 f303 	lsl.w	r3, r2, r3
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	4313      	orrs	r3, r2
 8006434:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 80c0 	beq.w	80065ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800644a:	2300      	movs	r3, #0
 800644c:	60fb      	str	r3, [r7, #12]
 800644e:	4b66      	ldr	r3, [pc, #408]	; (80065e8 <HAL_GPIO_Init+0x324>)
 8006450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006452:	4a65      	ldr	r2, [pc, #404]	; (80065e8 <HAL_GPIO_Init+0x324>)
 8006454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006458:	6453      	str	r3, [r2, #68]	; 0x44
 800645a:	4b63      	ldr	r3, [pc, #396]	; (80065e8 <HAL_GPIO_Init+0x324>)
 800645c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006466:	4a61      	ldr	r2, [pc, #388]	; (80065ec <HAL_GPIO_Init+0x328>)
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	089b      	lsrs	r3, r3, #2
 800646c:	3302      	adds	r3, #2
 800646e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	f003 0303 	and.w	r3, r3, #3
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	220f      	movs	r2, #15
 800647e:	fa02 f303 	lsl.w	r3, r2, r3
 8006482:	43db      	mvns	r3, r3
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	4013      	ands	r3, r2
 8006488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a58      	ldr	r2, [pc, #352]	; (80065f0 <HAL_GPIO_Init+0x32c>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d037      	beq.n	8006502 <HAL_GPIO_Init+0x23e>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a57      	ldr	r2, [pc, #348]	; (80065f4 <HAL_GPIO_Init+0x330>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d031      	beq.n	80064fe <HAL_GPIO_Init+0x23a>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a56      	ldr	r2, [pc, #344]	; (80065f8 <HAL_GPIO_Init+0x334>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d02b      	beq.n	80064fa <HAL_GPIO_Init+0x236>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a55      	ldr	r2, [pc, #340]	; (80065fc <HAL_GPIO_Init+0x338>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d025      	beq.n	80064f6 <HAL_GPIO_Init+0x232>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a54      	ldr	r2, [pc, #336]	; (8006600 <HAL_GPIO_Init+0x33c>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d01f      	beq.n	80064f2 <HAL_GPIO_Init+0x22e>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a53      	ldr	r2, [pc, #332]	; (8006604 <HAL_GPIO_Init+0x340>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d019      	beq.n	80064ee <HAL_GPIO_Init+0x22a>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a52      	ldr	r2, [pc, #328]	; (8006608 <HAL_GPIO_Init+0x344>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d013      	beq.n	80064ea <HAL_GPIO_Init+0x226>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a51      	ldr	r2, [pc, #324]	; (800660c <HAL_GPIO_Init+0x348>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d00d      	beq.n	80064e6 <HAL_GPIO_Init+0x222>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a50      	ldr	r2, [pc, #320]	; (8006610 <HAL_GPIO_Init+0x34c>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d007      	beq.n	80064e2 <HAL_GPIO_Init+0x21e>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a4f      	ldr	r2, [pc, #316]	; (8006614 <HAL_GPIO_Init+0x350>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d101      	bne.n	80064de <HAL_GPIO_Init+0x21a>
 80064da:	2309      	movs	r3, #9
 80064dc:	e012      	b.n	8006504 <HAL_GPIO_Init+0x240>
 80064de:	230a      	movs	r3, #10
 80064e0:	e010      	b.n	8006504 <HAL_GPIO_Init+0x240>
 80064e2:	2308      	movs	r3, #8
 80064e4:	e00e      	b.n	8006504 <HAL_GPIO_Init+0x240>
 80064e6:	2307      	movs	r3, #7
 80064e8:	e00c      	b.n	8006504 <HAL_GPIO_Init+0x240>
 80064ea:	2306      	movs	r3, #6
 80064ec:	e00a      	b.n	8006504 <HAL_GPIO_Init+0x240>
 80064ee:	2305      	movs	r3, #5
 80064f0:	e008      	b.n	8006504 <HAL_GPIO_Init+0x240>
 80064f2:	2304      	movs	r3, #4
 80064f4:	e006      	b.n	8006504 <HAL_GPIO_Init+0x240>
 80064f6:	2303      	movs	r3, #3
 80064f8:	e004      	b.n	8006504 <HAL_GPIO_Init+0x240>
 80064fa:	2302      	movs	r3, #2
 80064fc:	e002      	b.n	8006504 <HAL_GPIO_Init+0x240>
 80064fe:	2301      	movs	r3, #1
 8006500:	e000      	b.n	8006504 <HAL_GPIO_Init+0x240>
 8006502:	2300      	movs	r3, #0
 8006504:	69fa      	ldr	r2, [r7, #28]
 8006506:	f002 0203 	and.w	r2, r2, #3
 800650a:	0092      	lsls	r2, r2, #2
 800650c:	4093      	lsls	r3, r2
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	4313      	orrs	r3, r2
 8006512:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006514:	4935      	ldr	r1, [pc, #212]	; (80065ec <HAL_GPIO_Init+0x328>)
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	089b      	lsrs	r3, r3, #2
 800651a:	3302      	adds	r3, #2
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006522:	4b3d      	ldr	r3, [pc, #244]	; (8006618 <HAL_GPIO_Init+0x354>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	43db      	mvns	r3, r3
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	4013      	ands	r3, r2
 8006530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	4313      	orrs	r3, r2
 8006544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006546:	4a34      	ldr	r2, [pc, #208]	; (8006618 <HAL_GPIO_Init+0x354>)
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800654c:	4b32      	ldr	r3, [pc, #200]	; (8006618 <HAL_GPIO_Init+0x354>)
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	43db      	mvns	r3, r3
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	4013      	ands	r3, r2
 800655a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d003      	beq.n	8006570 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	4313      	orrs	r3, r2
 800656e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006570:	4a29      	ldr	r2, [pc, #164]	; (8006618 <HAL_GPIO_Init+0x354>)
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006576:	4b28      	ldr	r3, [pc, #160]	; (8006618 <HAL_GPIO_Init+0x354>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	43db      	mvns	r3, r3
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	4013      	ands	r3, r2
 8006584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	4313      	orrs	r3, r2
 8006598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800659a:	4a1f      	ldr	r2, [pc, #124]	; (8006618 <HAL_GPIO_Init+0x354>)
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80065a0:	4b1d      	ldr	r3, [pc, #116]	; (8006618 <HAL_GPIO_Init+0x354>)
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	43db      	mvns	r3, r3
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	4013      	ands	r3, r2
 80065ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d003      	beq.n	80065c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065c4:	4a14      	ldr	r2, [pc, #80]	; (8006618 <HAL_GPIO_Init+0x354>)
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	3301      	adds	r3, #1
 80065ce:	61fb      	str	r3, [r7, #28]
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	2b0f      	cmp	r3, #15
 80065d4:	f67f ae84 	bls.w	80062e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80065d8:	bf00      	nop
 80065da:	bf00      	nop
 80065dc:	3724      	adds	r7, #36	; 0x24
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	40023800 	.word	0x40023800
 80065ec:	40013800 	.word	0x40013800
 80065f0:	40020000 	.word	0x40020000
 80065f4:	40020400 	.word	0x40020400
 80065f8:	40020800 	.word	0x40020800
 80065fc:	40020c00 	.word	0x40020c00
 8006600:	40021000 	.word	0x40021000
 8006604:	40021400 	.word	0x40021400
 8006608:	40021800 	.word	0x40021800
 800660c:	40021c00 	.word	0x40021c00
 8006610:	40022000 	.word	0x40022000
 8006614:	40022400 	.word	0x40022400
 8006618:	40013c00 	.word	0x40013c00

0800661c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691a      	ldr	r2, [r3, #16]
 800662c:	887b      	ldrh	r3, [r7, #2]
 800662e:	4013      	ands	r3, r2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d002      	beq.n	800663a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006634:	2301      	movs	r3, #1
 8006636:	73fb      	strb	r3, [r7, #15]
 8006638:	e001      	b.n	800663e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800663a:	2300      	movs	r3, #0
 800663c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800663e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	807b      	strh	r3, [r7, #2]
 8006658:	4613      	mov	r3, r2
 800665a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800665c:	787b      	ldrb	r3, [r7, #1]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d003      	beq.n	800666a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006662:	887a      	ldrh	r2, [r7, #2]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006668:	e003      	b.n	8006672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800666a:	887b      	ldrh	r3, [r7, #2]
 800666c:	041a      	lsls	r2, r3, #16
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	619a      	str	r2, [r3, #24]
}
 8006672:	bf00      	nop
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
	...

08006680 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	4603      	mov	r3, r0
 8006688:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800668a:	4b08      	ldr	r3, [pc, #32]	; (80066ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800668c:	695a      	ldr	r2, [r3, #20]
 800668e:	88fb      	ldrh	r3, [r7, #6]
 8006690:	4013      	ands	r3, r2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d006      	beq.n	80066a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006696:	4a05      	ldr	r2, [pc, #20]	; (80066ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006698:	88fb      	ldrh	r3, [r7, #6]
 800669a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800669c:	88fb      	ldrh	r3, [r7, #6]
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fc fb56 	bl	8002d50 <HAL_GPIO_EXTI_Callback>
  }
}
 80066a4:	bf00      	nop
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	40013c00 	.word	0x40013c00

080066b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e12b      	b.n	800691a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d106      	bne.n	80066dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7fb fcb0 	bl	800203c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2224      	movs	r2, #36	; 0x24
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0201 	bic.w	r2, r2, #1
 80066f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006702:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006712:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006714:	f000 fe1e 	bl	8007354 <HAL_RCC_GetPCLK1Freq>
 8006718:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	4a81      	ldr	r2, [pc, #516]	; (8006924 <HAL_I2C_Init+0x274>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d807      	bhi.n	8006734 <HAL_I2C_Init+0x84>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4a80      	ldr	r2, [pc, #512]	; (8006928 <HAL_I2C_Init+0x278>)
 8006728:	4293      	cmp	r3, r2
 800672a:	bf94      	ite	ls
 800672c:	2301      	movls	r3, #1
 800672e:	2300      	movhi	r3, #0
 8006730:	b2db      	uxtb	r3, r3
 8006732:	e006      	b.n	8006742 <HAL_I2C_Init+0x92>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4a7d      	ldr	r2, [pc, #500]	; (800692c <HAL_I2C_Init+0x27c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	bf94      	ite	ls
 800673c:	2301      	movls	r3, #1
 800673e:	2300      	movhi	r3, #0
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e0e7      	b.n	800691a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4a78      	ldr	r2, [pc, #480]	; (8006930 <HAL_I2C_Init+0x280>)
 800674e:	fba2 2303 	umull	r2, r3, r2, r3
 8006752:	0c9b      	lsrs	r3, r3, #18
 8006754:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	430a      	orrs	r2, r1
 8006768:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	6a1b      	ldr	r3, [r3, #32]
 8006770:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	4a6a      	ldr	r2, [pc, #424]	; (8006924 <HAL_I2C_Init+0x274>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d802      	bhi.n	8006784 <HAL_I2C_Init+0xd4>
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	3301      	adds	r3, #1
 8006782:	e009      	b.n	8006798 <HAL_I2C_Init+0xe8>
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800678a:	fb02 f303 	mul.w	r3, r2, r3
 800678e:	4a69      	ldr	r2, [pc, #420]	; (8006934 <HAL_I2C_Init+0x284>)
 8006790:	fba2 2303 	umull	r2, r3, r2, r3
 8006794:	099b      	lsrs	r3, r3, #6
 8006796:	3301      	adds	r3, #1
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	6812      	ldr	r2, [r2, #0]
 800679c:	430b      	orrs	r3, r1
 800679e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80067aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	495c      	ldr	r1, [pc, #368]	; (8006924 <HAL_I2C_Init+0x274>)
 80067b4:	428b      	cmp	r3, r1
 80067b6:	d819      	bhi.n	80067ec <HAL_I2C_Init+0x13c>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	1e59      	subs	r1, r3, #1
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	005b      	lsls	r3, r3, #1
 80067c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80067c6:	1c59      	adds	r1, r3, #1
 80067c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80067cc:	400b      	ands	r3, r1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00a      	beq.n	80067e8 <HAL_I2C_Init+0x138>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	1e59      	subs	r1, r3, #1
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	005b      	lsls	r3, r3, #1
 80067dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80067e0:	3301      	adds	r3, #1
 80067e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067e6:	e051      	b.n	800688c <HAL_I2C_Init+0x1dc>
 80067e8:	2304      	movs	r3, #4
 80067ea:	e04f      	b.n	800688c <HAL_I2C_Init+0x1dc>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d111      	bne.n	8006818 <HAL_I2C_Init+0x168>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	1e58      	subs	r0, r3, #1
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6859      	ldr	r1, [r3, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	440b      	add	r3, r1
 8006802:	fbb0 f3f3 	udiv	r3, r0, r3
 8006806:	3301      	adds	r3, #1
 8006808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800680c:	2b00      	cmp	r3, #0
 800680e:	bf0c      	ite	eq
 8006810:	2301      	moveq	r3, #1
 8006812:	2300      	movne	r3, #0
 8006814:	b2db      	uxtb	r3, r3
 8006816:	e012      	b.n	800683e <HAL_I2C_Init+0x18e>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	1e58      	subs	r0, r3, #1
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6859      	ldr	r1, [r3, #4]
 8006820:	460b      	mov	r3, r1
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	440b      	add	r3, r1
 8006826:	0099      	lsls	r1, r3, #2
 8006828:	440b      	add	r3, r1
 800682a:	fbb0 f3f3 	udiv	r3, r0, r3
 800682e:	3301      	adds	r3, #1
 8006830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006834:	2b00      	cmp	r3, #0
 8006836:	bf0c      	ite	eq
 8006838:	2301      	moveq	r3, #1
 800683a:	2300      	movne	r3, #0
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <HAL_I2C_Init+0x196>
 8006842:	2301      	movs	r3, #1
 8006844:	e022      	b.n	800688c <HAL_I2C_Init+0x1dc>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10e      	bne.n	800686c <HAL_I2C_Init+0x1bc>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	1e58      	subs	r0, r3, #1
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6859      	ldr	r1, [r3, #4]
 8006856:	460b      	mov	r3, r1
 8006858:	005b      	lsls	r3, r3, #1
 800685a:	440b      	add	r3, r1
 800685c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006860:	3301      	adds	r3, #1
 8006862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800686a:	e00f      	b.n	800688c <HAL_I2C_Init+0x1dc>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	1e58      	subs	r0, r3, #1
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6859      	ldr	r1, [r3, #4]
 8006874:	460b      	mov	r3, r1
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	440b      	add	r3, r1
 800687a:	0099      	lsls	r1, r3, #2
 800687c:	440b      	add	r3, r1
 800687e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006882:	3301      	adds	r3, #1
 8006884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006888:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800688c:	6879      	ldr	r1, [r7, #4]
 800688e:	6809      	ldr	r1, [r1, #0]
 8006890:	4313      	orrs	r3, r2
 8006892:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	69da      	ldr	r2, [r3, #28]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	431a      	orrs	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80068ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	6911      	ldr	r1, [r2, #16]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	68d2      	ldr	r2, [r2, #12]
 80068c6:	4311      	orrs	r1, r2
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	6812      	ldr	r2, [r2, #0]
 80068cc:	430b      	orrs	r3, r1
 80068ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	695a      	ldr	r2, [r3, #20]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0201 	orr.w	r2, r2, #1
 80068fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2220      	movs	r2, #32
 8006906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	000186a0 	.word	0x000186a0
 8006928:	001e847f 	.word	0x001e847f
 800692c:	003d08ff 	.word	0x003d08ff
 8006930:	431bde83 	.word	0x431bde83
 8006934:	10624dd3 	.word	0x10624dd3

08006938 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b20      	cmp	r3, #32
 800694c:	d129      	bne.n	80069a2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2224      	movs	r2, #36	; 0x24
 8006952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 0201 	bic.w	r2, r2, #1
 8006964:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 0210 	bic.w	r2, r2, #16
 8006974:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f042 0201 	orr.w	r2, r2, #1
 8006994:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2220      	movs	r2, #32
 800699a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800699e:	2300      	movs	r3, #0
 80069a0:	e000      	b.n	80069a4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80069a2:	2302      	movs	r3, #2
  }
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80069ba:	2300      	movs	r3, #0
 80069bc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	2b20      	cmp	r3, #32
 80069c8:	d12a      	bne.n	8006a20 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2224      	movs	r2, #36	; 0x24
 80069ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 0201 	bic.w	r2, r2, #1
 80069e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80069ea:	89fb      	ldrh	r3, [r7, #14]
 80069ec:	f023 030f 	bic.w	r3, r3, #15
 80069f0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	89fb      	ldrh	r3, [r7, #14]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	89fa      	ldrh	r2, [r7, #14]
 8006a02:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f042 0201 	orr.w	r2, r2, #1
 8006a12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2220      	movs	r2, #32
 8006a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	e000      	b.n	8006a22 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006a20:	2302      	movs	r3, #2
  }
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
	...

08006a30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006a36:	2300      	movs	r3, #0
 8006a38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	603b      	str	r3, [r7, #0]
 8006a3e:	4b20      	ldr	r3, [pc, #128]	; (8006ac0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a42:	4a1f      	ldr	r2, [pc, #124]	; (8006ac0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a48:	6413      	str	r3, [r2, #64]	; 0x40
 8006a4a:	4b1d      	ldr	r3, [pc, #116]	; (8006ac0 <HAL_PWREx_EnableOverDrive+0x90>)
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a52:	603b      	str	r3, [r7, #0]
 8006a54:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006a56:	4b1b      	ldr	r3, [pc, #108]	; (8006ac4 <HAL_PWREx_EnableOverDrive+0x94>)
 8006a58:	2201      	movs	r2, #1
 8006a5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a5c:	f7fe f8e0 	bl	8004c20 <HAL_GetTick>
 8006a60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006a62:	e009      	b.n	8006a78 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006a64:	f7fe f8dc 	bl	8004c20 <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a72:	d901      	bls.n	8006a78 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e01f      	b.n	8006ab8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006a78:	4b13      	ldr	r3, [pc, #76]	; (8006ac8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a84:	d1ee      	bne.n	8006a64 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006a86:	4b11      	ldr	r3, [pc, #68]	; (8006acc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a88:	2201      	movs	r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a8c:	f7fe f8c8 	bl	8004c20 <HAL_GetTick>
 8006a90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006a92:	e009      	b.n	8006aa8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006a94:	f7fe f8c4 	bl	8004c20 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006aa2:	d901      	bls.n	8006aa8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e007      	b.n	8006ab8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006aa8:	4b07      	ldr	r3, [pc, #28]	; (8006ac8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ab0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ab4:	d1ee      	bne.n	8006a94 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3708      	adds	r7, #8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	40023800 	.word	0x40023800
 8006ac4:	420e0040 	.word	0x420e0040
 8006ac8:	40007000 	.word	0x40007000
 8006acc:	420e0044 	.word	0x420e0044

08006ad0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e25b      	b.n	8006f9a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d075      	beq.n	8006bda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006aee:	4ba3      	ldr	r3, [pc, #652]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f003 030c 	and.w	r3, r3, #12
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	d00c      	beq.n	8006b14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006afa:	4ba0      	ldr	r3, [pc, #640]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b02:	2b08      	cmp	r3, #8
 8006b04:	d112      	bne.n	8006b2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b06:	4b9d      	ldr	r3, [pc, #628]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b12:	d10b      	bne.n	8006b2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b14:	4b99      	ldr	r3, [pc, #612]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d05b      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x108>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d157      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e236      	b.n	8006f9a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b34:	d106      	bne.n	8006b44 <HAL_RCC_OscConfig+0x74>
 8006b36:	4b91      	ldr	r3, [pc, #580]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a90      	ldr	r2, [pc, #576]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b40:	6013      	str	r3, [r2, #0]
 8006b42:	e01d      	b.n	8006b80 <HAL_RCC_OscConfig+0xb0>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b4c:	d10c      	bne.n	8006b68 <HAL_RCC_OscConfig+0x98>
 8006b4e:	4b8b      	ldr	r3, [pc, #556]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a8a      	ldr	r2, [pc, #552]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b58:	6013      	str	r3, [r2, #0]
 8006b5a:	4b88      	ldr	r3, [pc, #544]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a87      	ldr	r2, [pc, #540]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	e00b      	b.n	8006b80 <HAL_RCC_OscConfig+0xb0>
 8006b68:	4b84      	ldr	r3, [pc, #528]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a83      	ldr	r2, [pc, #524]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b72:	6013      	str	r3, [r2, #0]
 8006b74:	4b81      	ldr	r3, [pc, #516]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a80      	ldr	r2, [pc, #512]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d013      	beq.n	8006bb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b88:	f7fe f84a 	bl	8004c20 <HAL_GetTick>
 8006b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b8e:	e008      	b.n	8006ba2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b90:	f7fe f846 	bl	8004c20 <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	2b64      	cmp	r3, #100	; 0x64
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e1fb      	b.n	8006f9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ba2:	4b76      	ldr	r3, [pc, #472]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0f0      	beq.n	8006b90 <HAL_RCC_OscConfig+0xc0>
 8006bae:	e014      	b.n	8006bda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb0:	f7fe f836 	bl	8004c20 <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bb6:	e008      	b.n	8006bca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bb8:	f7fe f832 	bl	8004c20 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b64      	cmp	r3, #100	; 0x64
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e1e7      	b.n	8006f9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bca:	4b6c      	ldr	r3, [pc, #432]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1f0      	bne.n	8006bb8 <HAL_RCC_OscConfig+0xe8>
 8006bd6:	e000      	b.n	8006bda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d063      	beq.n	8006cae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006be6:	4b65      	ldr	r3, [pc, #404]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f003 030c 	and.w	r3, r3, #12
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00b      	beq.n	8006c0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bf2:	4b62      	ldr	r3, [pc, #392]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bfa:	2b08      	cmp	r3, #8
 8006bfc:	d11c      	bne.n	8006c38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bfe:	4b5f      	ldr	r3, [pc, #380]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d116      	bne.n	8006c38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c0a:	4b5c      	ldr	r3, [pc, #368]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d005      	beq.n	8006c22 <HAL_RCC_OscConfig+0x152>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d001      	beq.n	8006c22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e1bb      	b.n	8006f9a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c22:	4b56      	ldr	r3, [pc, #344]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	00db      	lsls	r3, r3, #3
 8006c30:	4952      	ldr	r1, [pc, #328]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c36:	e03a      	b.n	8006cae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d020      	beq.n	8006c82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c40:	4b4f      	ldr	r3, [pc, #316]	; (8006d80 <HAL_RCC_OscConfig+0x2b0>)
 8006c42:	2201      	movs	r2, #1
 8006c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c46:	f7fd ffeb 	bl	8004c20 <HAL_GetTick>
 8006c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c4c:	e008      	b.n	8006c60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c4e:	f7fd ffe7 	bl	8004c20 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d901      	bls.n	8006c60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e19c      	b.n	8006f9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c60:	4b46      	ldr	r3, [pc, #280]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0f0      	beq.n	8006c4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c6c:	4b43      	ldr	r3, [pc, #268]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	4940      	ldr	r1, [pc, #256]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	600b      	str	r3, [r1, #0]
 8006c80:	e015      	b.n	8006cae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c82:	4b3f      	ldr	r3, [pc, #252]	; (8006d80 <HAL_RCC_OscConfig+0x2b0>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c88:	f7fd ffca 	bl	8004c20 <HAL_GetTick>
 8006c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c8e:	e008      	b.n	8006ca2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c90:	f7fd ffc6 	bl	8004c20 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d901      	bls.n	8006ca2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e17b      	b.n	8006f9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ca2:	4b36      	ldr	r3, [pc, #216]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1f0      	bne.n	8006c90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0308 	and.w	r3, r3, #8
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d030      	beq.n	8006d1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d016      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cc2:	4b30      	ldr	r3, [pc, #192]	; (8006d84 <HAL_RCC_OscConfig+0x2b4>)
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cc8:	f7fd ffaa 	bl	8004c20 <HAL_GetTick>
 8006ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cce:	e008      	b.n	8006ce2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cd0:	f7fd ffa6 	bl	8004c20 <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d901      	bls.n	8006ce2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e15b      	b.n	8006f9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ce2:	4b26      	ldr	r3, [pc, #152]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d0f0      	beq.n	8006cd0 <HAL_RCC_OscConfig+0x200>
 8006cee:	e015      	b.n	8006d1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cf0:	4b24      	ldr	r3, [pc, #144]	; (8006d84 <HAL_RCC_OscConfig+0x2b4>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cf6:	f7fd ff93 	bl	8004c20 <HAL_GetTick>
 8006cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cfc:	e008      	b.n	8006d10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cfe:	f7fd ff8f 	bl	8004c20 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d901      	bls.n	8006d10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e144      	b.n	8006f9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d10:	4b1a      	ldr	r3, [pc, #104]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1f0      	bne.n	8006cfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0304 	and.w	r3, r3, #4
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 80a0 	beq.w	8006e6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d2e:	4b13      	ldr	r3, [pc, #76]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10f      	bne.n	8006d5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60bb      	str	r3, [r7, #8]
 8006d3e:	4b0f      	ldr	r3, [pc, #60]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d42:	4a0e      	ldr	r2, [pc, #56]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d48:	6413      	str	r3, [r2, #64]	; 0x40
 8006d4a:	4b0c      	ldr	r3, [pc, #48]	; (8006d7c <HAL_RCC_OscConfig+0x2ac>)
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d52:	60bb      	str	r3, [r7, #8]
 8006d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d56:	2301      	movs	r3, #1
 8006d58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d5a:	4b0b      	ldr	r3, [pc, #44]	; (8006d88 <HAL_RCC_OscConfig+0x2b8>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d121      	bne.n	8006daa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d66:	4b08      	ldr	r3, [pc, #32]	; (8006d88 <HAL_RCC_OscConfig+0x2b8>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a07      	ldr	r2, [pc, #28]	; (8006d88 <HAL_RCC_OscConfig+0x2b8>)
 8006d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d72:	f7fd ff55 	bl	8004c20 <HAL_GetTick>
 8006d76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d78:	e011      	b.n	8006d9e <HAL_RCC_OscConfig+0x2ce>
 8006d7a:	bf00      	nop
 8006d7c:	40023800 	.word	0x40023800
 8006d80:	42470000 	.word	0x42470000
 8006d84:	42470e80 	.word	0x42470e80
 8006d88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d8c:	f7fd ff48 	bl	8004c20 <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e0fd      	b.n	8006f9a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d9e:	4b81      	ldr	r3, [pc, #516]	; (8006fa4 <HAL_RCC_OscConfig+0x4d4>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0f0      	beq.n	8006d8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d106      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x2f0>
 8006db2:	4b7d      	ldr	r3, [pc, #500]	; (8006fa8 <HAL_RCC_OscConfig+0x4d8>)
 8006db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db6:	4a7c      	ldr	r2, [pc, #496]	; (8006fa8 <HAL_RCC_OscConfig+0x4d8>)
 8006db8:	f043 0301 	orr.w	r3, r3, #1
 8006dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8006dbe:	e01c      	b.n	8006dfa <HAL_RCC_OscConfig+0x32a>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	2b05      	cmp	r3, #5
 8006dc6:	d10c      	bne.n	8006de2 <HAL_RCC_OscConfig+0x312>
 8006dc8:	4b77      	ldr	r3, [pc, #476]	; (8006fa8 <HAL_RCC_OscConfig+0x4d8>)
 8006dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dcc:	4a76      	ldr	r2, [pc, #472]	; (8006fa8 <HAL_RCC_OscConfig+0x4d8>)
 8006dce:	f043 0304 	orr.w	r3, r3, #4
 8006dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8006dd4:	4b74      	ldr	r3, [pc, #464]	; (8006fa8 <HAL_RCC_OscConfig+0x4d8>)
 8006dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd8:	4a73      	ldr	r2, [pc, #460]	; (8006fa8 <HAL_RCC_OscConfig+0x4d8>)
 8006dda:	f043 0301 	orr.w	r3, r3, #1
 8006dde:	6713      	str	r3, [r2, #112]	; 0x70
 8006de0:	e00b      	b.n	8006dfa <HAL_RCC_OscConfig+0x32a>
 8006de2:	4b71      	ldr	r3, [pc, #452]	; (8006fa8 <HAL_RCC_OscConfig+0x4d8>)
 8006de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de6:	4a70      	ldr	r2, [pc, #448]	; (8006fa8 <HAL_RCC_OscConfig+0x4d8>)
 8006de8:	f023 0301 	bic.w	r3, r3, #1
 8006dec:	6713      	str	r3, [r2, #112]	; 0x70
 8006dee:	4b6e      	ldr	r3, [pc, #440]	; (8006fa8 <HAL_RCC_OscConfig+0x4d8>)
 8006df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df2:	4a6d      	ldr	r2, [pc, #436]	; (8006fa8 <HAL_RCC_OscConfig+0x4d8>)
 8006df4:	f023 0304 	bic.w	r3, r3, #4
 8006df8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d015      	beq.n	8006e2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e02:	f7fd ff0d 	bl	8004c20 <HAL_GetTick>
 8006e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e08:	e00a      	b.n	8006e20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e0a:	f7fd ff09 	bl	8004c20 <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d901      	bls.n	8006e20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e0bc      	b.n	8006f9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e20:	4b61      	ldr	r3, [pc, #388]	; (8006fa8 <HAL_RCC_OscConfig+0x4d8>)
 8006e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e24:	f003 0302 	and.w	r3, r3, #2
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d0ee      	beq.n	8006e0a <HAL_RCC_OscConfig+0x33a>
 8006e2c:	e014      	b.n	8006e58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e2e:	f7fd fef7 	bl	8004c20 <HAL_GetTick>
 8006e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e34:	e00a      	b.n	8006e4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e36:	f7fd fef3 	bl	8004c20 <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d901      	bls.n	8006e4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e0a6      	b.n	8006f9a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e4c:	4b56      	ldr	r3, [pc, #344]	; (8006fa8 <HAL_RCC_OscConfig+0x4d8>)
 8006e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1ee      	bne.n	8006e36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e58:	7dfb      	ldrb	r3, [r7, #23]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d105      	bne.n	8006e6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e5e:	4b52      	ldr	r3, [pc, #328]	; (8006fa8 <HAL_RCC_OscConfig+0x4d8>)
 8006e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e62:	4a51      	ldr	r2, [pc, #324]	; (8006fa8 <HAL_RCC_OscConfig+0x4d8>)
 8006e64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 8092 	beq.w	8006f98 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e74:	4b4c      	ldr	r3, [pc, #304]	; (8006fa8 <HAL_RCC_OscConfig+0x4d8>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f003 030c 	and.w	r3, r3, #12
 8006e7c:	2b08      	cmp	r3, #8
 8006e7e:	d05c      	beq.n	8006f3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d141      	bne.n	8006f0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e88:	4b48      	ldr	r3, [pc, #288]	; (8006fac <HAL_RCC_OscConfig+0x4dc>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e8e:	f7fd fec7 	bl	8004c20 <HAL_GetTick>
 8006e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e94:	e008      	b.n	8006ea8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e96:	f7fd fec3 	bl	8004c20 <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d901      	bls.n	8006ea8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e078      	b.n	8006f9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ea8:	4b3f      	ldr	r3, [pc, #252]	; (8006fa8 <HAL_RCC_OscConfig+0x4d8>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1f0      	bne.n	8006e96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	69da      	ldr	r2, [r3, #28]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	019b      	lsls	r3, r3, #6
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eca:	085b      	lsrs	r3, r3, #1
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	041b      	lsls	r3, r3, #16
 8006ed0:	431a      	orrs	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed6:	061b      	lsls	r3, r3, #24
 8006ed8:	4933      	ldr	r1, [pc, #204]	; (8006fa8 <HAL_RCC_OscConfig+0x4d8>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ede:	4b33      	ldr	r3, [pc, #204]	; (8006fac <HAL_RCC_OscConfig+0x4dc>)
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ee4:	f7fd fe9c 	bl	8004c20 <HAL_GetTick>
 8006ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eea:	e008      	b.n	8006efe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006eec:	f7fd fe98 	bl	8004c20 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e04d      	b.n	8006f9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006efe:	4b2a      	ldr	r3, [pc, #168]	; (8006fa8 <HAL_RCC_OscConfig+0x4d8>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d0f0      	beq.n	8006eec <HAL_RCC_OscConfig+0x41c>
 8006f0a:	e045      	b.n	8006f98 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f0c:	4b27      	ldr	r3, [pc, #156]	; (8006fac <HAL_RCC_OscConfig+0x4dc>)
 8006f0e:	2200      	movs	r2, #0
 8006f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f12:	f7fd fe85 	bl	8004c20 <HAL_GetTick>
 8006f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f18:	e008      	b.n	8006f2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f1a:	f7fd fe81 	bl	8004c20 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d901      	bls.n	8006f2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e036      	b.n	8006f9a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f2c:	4b1e      	ldr	r3, [pc, #120]	; (8006fa8 <HAL_RCC_OscConfig+0x4d8>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1f0      	bne.n	8006f1a <HAL_RCC_OscConfig+0x44a>
 8006f38:	e02e      	b.n	8006f98 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d101      	bne.n	8006f46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e029      	b.n	8006f9a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f46:	4b18      	ldr	r3, [pc, #96]	; (8006fa8 <HAL_RCC_OscConfig+0x4d8>)
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d11c      	bne.n	8006f94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d115      	bne.n	8006f94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f6e:	4013      	ands	r3, r2
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d10d      	bne.n	8006f94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d106      	bne.n	8006f94 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d001      	beq.n	8006f98 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e000      	b.n	8006f9a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3718      	adds	r7, #24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	40007000 	.word	0x40007000
 8006fa8:	40023800 	.word	0x40023800
 8006fac:	42470060 	.word	0x42470060

08006fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d101      	bne.n	8006fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e0cc      	b.n	800715e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fc4:	4b68      	ldr	r3, [pc, #416]	; (8007168 <HAL_RCC_ClockConfig+0x1b8>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 030f 	and.w	r3, r3, #15
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d90c      	bls.n	8006fec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fd2:	4b65      	ldr	r3, [pc, #404]	; (8007168 <HAL_RCC_ClockConfig+0x1b8>)
 8006fd4:	683a      	ldr	r2, [r7, #0]
 8006fd6:	b2d2      	uxtb	r2, r2
 8006fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fda:	4b63      	ldr	r3, [pc, #396]	; (8007168 <HAL_RCC_ClockConfig+0x1b8>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 030f 	and.w	r3, r3, #15
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d001      	beq.n	8006fec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e0b8      	b.n	800715e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d020      	beq.n	800703a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b00      	cmp	r3, #0
 8007002:	d005      	beq.n	8007010 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007004:	4b59      	ldr	r3, [pc, #356]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	4a58      	ldr	r2, [pc, #352]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 800700a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800700e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0308 	and.w	r3, r3, #8
 8007018:	2b00      	cmp	r3, #0
 800701a:	d005      	beq.n	8007028 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800701c:	4b53      	ldr	r3, [pc, #332]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	4a52      	ldr	r2, [pc, #328]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007022:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007026:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007028:	4b50      	ldr	r3, [pc, #320]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	494d      	ldr	r1, [pc, #308]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007036:	4313      	orrs	r3, r2
 8007038:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b00      	cmp	r3, #0
 8007044:	d044      	beq.n	80070d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	2b01      	cmp	r3, #1
 800704c:	d107      	bne.n	800705e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800704e:	4b47      	ldr	r3, [pc, #284]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d119      	bne.n	800708e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e07f      	b.n	800715e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2b02      	cmp	r3, #2
 8007064:	d003      	beq.n	800706e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800706a:	2b03      	cmp	r3, #3
 800706c:	d107      	bne.n	800707e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800706e:	4b3f      	ldr	r3, [pc, #252]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d109      	bne.n	800708e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e06f      	b.n	800715e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800707e:	4b3b      	ldr	r3, [pc, #236]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e067      	b.n	800715e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800708e:	4b37      	ldr	r3, [pc, #220]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f023 0203 	bic.w	r2, r3, #3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	4934      	ldr	r1, [pc, #208]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 800709c:	4313      	orrs	r3, r2
 800709e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070a0:	f7fd fdbe 	bl	8004c20 <HAL_GetTick>
 80070a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070a6:	e00a      	b.n	80070be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070a8:	f7fd fdba 	bl	8004c20 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d901      	bls.n	80070be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e04f      	b.n	800715e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070be:	4b2b      	ldr	r3, [pc, #172]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f003 020c 	and.w	r2, r3, #12
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d1eb      	bne.n	80070a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070d0:	4b25      	ldr	r3, [pc, #148]	; (8007168 <HAL_RCC_ClockConfig+0x1b8>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 030f 	and.w	r3, r3, #15
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d20c      	bcs.n	80070f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070de:	4b22      	ldr	r3, [pc, #136]	; (8007168 <HAL_RCC_ClockConfig+0x1b8>)
 80070e0:	683a      	ldr	r2, [r7, #0]
 80070e2:	b2d2      	uxtb	r2, r2
 80070e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070e6:	4b20      	ldr	r3, [pc, #128]	; (8007168 <HAL_RCC_ClockConfig+0x1b8>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 030f 	and.w	r3, r3, #15
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d001      	beq.n	80070f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e032      	b.n	800715e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b00      	cmp	r3, #0
 8007102:	d008      	beq.n	8007116 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007104:	4b19      	ldr	r3, [pc, #100]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	4916      	ldr	r1, [pc, #88]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007112:	4313      	orrs	r3, r2
 8007114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0308 	and.w	r3, r3, #8
 800711e:	2b00      	cmp	r3, #0
 8007120:	d009      	beq.n	8007136 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007122:	4b12      	ldr	r3, [pc, #72]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	00db      	lsls	r3, r3, #3
 8007130:	490e      	ldr	r1, [pc, #56]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 8007132:	4313      	orrs	r3, r2
 8007134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007136:	f000 f821 	bl	800717c <HAL_RCC_GetSysClockFreq>
 800713a:	4602      	mov	r2, r0
 800713c:	4b0b      	ldr	r3, [pc, #44]	; (800716c <HAL_RCC_ClockConfig+0x1bc>)
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	091b      	lsrs	r3, r3, #4
 8007142:	f003 030f 	and.w	r3, r3, #15
 8007146:	490a      	ldr	r1, [pc, #40]	; (8007170 <HAL_RCC_ClockConfig+0x1c0>)
 8007148:	5ccb      	ldrb	r3, [r1, r3]
 800714a:	fa22 f303 	lsr.w	r3, r2, r3
 800714e:	4a09      	ldr	r2, [pc, #36]	; (8007174 <HAL_RCC_ClockConfig+0x1c4>)
 8007150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007152:	4b09      	ldr	r3, [pc, #36]	; (8007178 <HAL_RCC_ClockConfig+0x1c8>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4618      	mov	r0, r3
 8007158:	f7fd fd1e 	bl	8004b98 <HAL_InitTick>

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	40023c00 	.word	0x40023c00
 800716c:	40023800 	.word	0x40023800
 8007170:	0800cb90 	.word	0x0800cb90
 8007174:	2000012c 	.word	0x2000012c
 8007178:	20000130 	.word	0x20000130

0800717c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800717c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007180:	b084      	sub	sp, #16
 8007182:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007184:	2300      	movs	r3, #0
 8007186:	607b      	str	r3, [r7, #4]
 8007188:	2300      	movs	r3, #0
 800718a:	60fb      	str	r3, [r7, #12]
 800718c:	2300      	movs	r3, #0
 800718e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007194:	4b67      	ldr	r3, [pc, #412]	; (8007334 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f003 030c 	and.w	r3, r3, #12
 800719c:	2b08      	cmp	r3, #8
 800719e:	d00d      	beq.n	80071bc <HAL_RCC_GetSysClockFreq+0x40>
 80071a0:	2b08      	cmp	r3, #8
 80071a2:	f200 80bd 	bhi.w	8007320 <HAL_RCC_GetSysClockFreq+0x1a4>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d002      	beq.n	80071b0 <HAL_RCC_GetSysClockFreq+0x34>
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d003      	beq.n	80071b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80071ae:	e0b7      	b.n	8007320 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071b0:	4b61      	ldr	r3, [pc, #388]	; (8007338 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80071b2:	60bb      	str	r3, [r7, #8]
       break;
 80071b4:	e0b7      	b.n	8007326 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071b6:	4b60      	ldr	r3, [pc, #384]	; (8007338 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80071b8:	60bb      	str	r3, [r7, #8]
      break;
 80071ba:	e0b4      	b.n	8007326 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071bc:	4b5d      	ldr	r3, [pc, #372]	; (8007334 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071c6:	4b5b      	ldr	r3, [pc, #364]	; (8007334 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d04d      	beq.n	800726e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071d2:	4b58      	ldr	r3, [pc, #352]	; (8007334 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	099b      	lsrs	r3, r3, #6
 80071d8:	461a      	mov	r2, r3
 80071da:	f04f 0300 	mov.w	r3, #0
 80071de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80071e2:	f04f 0100 	mov.w	r1, #0
 80071e6:	ea02 0800 	and.w	r8, r2, r0
 80071ea:	ea03 0901 	and.w	r9, r3, r1
 80071ee:	4640      	mov	r0, r8
 80071f0:	4649      	mov	r1, r9
 80071f2:	f04f 0200 	mov.w	r2, #0
 80071f6:	f04f 0300 	mov.w	r3, #0
 80071fa:	014b      	lsls	r3, r1, #5
 80071fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007200:	0142      	lsls	r2, r0, #5
 8007202:	4610      	mov	r0, r2
 8007204:	4619      	mov	r1, r3
 8007206:	ebb0 0008 	subs.w	r0, r0, r8
 800720a:	eb61 0109 	sbc.w	r1, r1, r9
 800720e:	f04f 0200 	mov.w	r2, #0
 8007212:	f04f 0300 	mov.w	r3, #0
 8007216:	018b      	lsls	r3, r1, #6
 8007218:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800721c:	0182      	lsls	r2, r0, #6
 800721e:	1a12      	subs	r2, r2, r0
 8007220:	eb63 0301 	sbc.w	r3, r3, r1
 8007224:	f04f 0000 	mov.w	r0, #0
 8007228:	f04f 0100 	mov.w	r1, #0
 800722c:	00d9      	lsls	r1, r3, #3
 800722e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007232:	00d0      	lsls	r0, r2, #3
 8007234:	4602      	mov	r2, r0
 8007236:	460b      	mov	r3, r1
 8007238:	eb12 0208 	adds.w	r2, r2, r8
 800723c:	eb43 0309 	adc.w	r3, r3, r9
 8007240:	f04f 0000 	mov.w	r0, #0
 8007244:	f04f 0100 	mov.w	r1, #0
 8007248:	0299      	lsls	r1, r3, #10
 800724a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800724e:	0290      	lsls	r0, r2, #10
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
 8007254:	4610      	mov	r0, r2
 8007256:	4619      	mov	r1, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	461a      	mov	r2, r3
 800725c:	f04f 0300 	mov.w	r3, #0
 8007260:	f7f9 fcca 	bl	8000bf8 <__aeabi_uldivmod>
 8007264:	4602      	mov	r2, r0
 8007266:	460b      	mov	r3, r1
 8007268:	4613      	mov	r3, r2
 800726a:	60fb      	str	r3, [r7, #12]
 800726c:	e04a      	b.n	8007304 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800726e:	4b31      	ldr	r3, [pc, #196]	; (8007334 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	099b      	lsrs	r3, r3, #6
 8007274:	461a      	mov	r2, r3
 8007276:	f04f 0300 	mov.w	r3, #0
 800727a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800727e:	f04f 0100 	mov.w	r1, #0
 8007282:	ea02 0400 	and.w	r4, r2, r0
 8007286:	ea03 0501 	and.w	r5, r3, r1
 800728a:	4620      	mov	r0, r4
 800728c:	4629      	mov	r1, r5
 800728e:	f04f 0200 	mov.w	r2, #0
 8007292:	f04f 0300 	mov.w	r3, #0
 8007296:	014b      	lsls	r3, r1, #5
 8007298:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800729c:	0142      	lsls	r2, r0, #5
 800729e:	4610      	mov	r0, r2
 80072a0:	4619      	mov	r1, r3
 80072a2:	1b00      	subs	r0, r0, r4
 80072a4:	eb61 0105 	sbc.w	r1, r1, r5
 80072a8:	f04f 0200 	mov.w	r2, #0
 80072ac:	f04f 0300 	mov.w	r3, #0
 80072b0:	018b      	lsls	r3, r1, #6
 80072b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80072b6:	0182      	lsls	r2, r0, #6
 80072b8:	1a12      	subs	r2, r2, r0
 80072ba:	eb63 0301 	sbc.w	r3, r3, r1
 80072be:	f04f 0000 	mov.w	r0, #0
 80072c2:	f04f 0100 	mov.w	r1, #0
 80072c6:	00d9      	lsls	r1, r3, #3
 80072c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072cc:	00d0      	lsls	r0, r2, #3
 80072ce:	4602      	mov	r2, r0
 80072d0:	460b      	mov	r3, r1
 80072d2:	1912      	adds	r2, r2, r4
 80072d4:	eb45 0303 	adc.w	r3, r5, r3
 80072d8:	f04f 0000 	mov.w	r0, #0
 80072dc:	f04f 0100 	mov.w	r1, #0
 80072e0:	0299      	lsls	r1, r3, #10
 80072e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80072e6:	0290      	lsls	r0, r2, #10
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	4610      	mov	r0, r2
 80072ee:	4619      	mov	r1, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	461a      	mov	r2, r3
 80072f4:	f04f 0300 	mov.w	r3, #0
 80072f8:	f7f9 fc7e 	bl	8000bf8 <__aeabi_uldivmod>
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	4613      	mov	r3, r2
 8007302:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007304:	4b0b      	ldr	r3, [pc, #44]	; (8007334 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	0c1b      	lsrs	r3, r3, #16
 800730a:	f003 0303 	and.w	r3, r3, #3
 800730e:	3301      	adds	r3, #1
 8007310:	005b      	lsls	r3, r3, #1
 8007312:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	fbb2 f3f3 	udiv	r3, r2, r3
 800731c:	60bb      	str	r3, [r7, #8]
      break;
 800731e:	e002      	b.n	8007326 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007320:	4b05      	ldr	r3, [pc, #20]	; (8007338 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007322:	60bb      	str	r3, [r7, #8]
      break;
 8007324:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007326:	68bb      	ldr	r3, [r7, #8]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007332:	bf00      	nop
 8007334:	40023800 	.word	0x40023800
 8007338:	00f42400 	.word	0x00f42400

0800733c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800733c:	b480      	push	{r7}
 800733e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007340:	4b03      	ldr	r3, [pc, #12]	; (8007350 <HAL_RCC_GetHCLKFreq+0x14>)
 8007342:	681b      	ldr	r3, [r3, #0]
}
 8007344:	4618      	mov	r0, r3
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	2000012c 	.word	0x2000012c

08007354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007358:	f7ff fff0 	bl	800733c <HAL_RCC_GetHCLKFreq>
 800735c:	4602      	mov	r2, r0
 800735e:	4b05      	ldr	r3, [pc, #20]	; (8007374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	0a9b      	lsrs	r3, r3, #10
 8007364:	f003 0307 	and.w	r3, r3, #7
 8007368:	4903      	ldr	r1, [pc, #12]	; (8007378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800736a:	5ccb      	ldrb	r3, [r1, r3]
 800736c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007370:	4618      	mov	r0, r3
 8007372:	bd80      	pop	{r7, pc}
 8007374:	40023800 	.word	0x40023800
 8007378:	0800cba0 	.word	0x0800cba0

0800737c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007380:	f7ff ffdc 	bl	800733c <HAL_RCC_GetHCLKFreq>
 8007384:	4602      	mov	r2, r0
 8007386:	4b05      	ldr	r3, [pc, #20]	; (800739c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	0b5b      	lsrs	r3, r3, #13
 800738c:	f003 0307 	and.w	r3, r3, #7
 8007390:	4903      	ldr	r1, [pc, #12]	; (80073a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007392:	5ccb      	ldrb	r3, [r1, r3]
 8007394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007398:	4618      	mov	r0, r3
 800739a:	bd80      	pop	{r7, pc}
 800739c:	40023800 	.word	0x40023800
 80073a0:	0800cba0 	.word	0x0800cba0

080073a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d101      	bne.n	80073b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e056      	b.n	8007464 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d106      	bne.n	80073d6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7fc fa4b 	bl	800386c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2202      	movs	r2, #2
 80073da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073ec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	431a      	orrs	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	431a      	orrs	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	431a      	orrs	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	695b      	ldr	r3, [r3, #20]
 8007408:	431a      	orrs	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007412:	431a      	orrs	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	431a      	orrs	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	ea42 0103 	orr.w	r1, r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	0c1b      	lsrs	r3, r3, #16
 8007434:	f003 0104 	and.w	r1, r3, #4
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	430a      	orrs	r2, r1
 8007442:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	69da      	ldr	r2, [r3, #28]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007452:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af02      	add	r7, sp, #8
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	603b      	str	r3, [r7, #0]
 8007478:	4613      	mov	r3, r2
 800747a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800747c:	2300      	movs	r3, #0
 800747e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007488:	d112      	bne.n	80074b0 <HAL_SPI_Receive+0x44>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10e      	bne.n	80074b0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2204      	movs	r2, #4
 8007496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800749a:	88fa      	ldrh	r2, [r7, #6]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	4613      	mov	r3, r2
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	68b9      	ldr	r1, [r7, #8]
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f000 f8e9 	bl	800767e <HAL_SPI_TransmitReceive>
 80074ac:	4603      	mov	r3, r0
 80074ae:	e0e2      	b.n	8007676 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d101      	bne.n	80074be <HAL_SPI_Receive+0x52>
 80074ba:	2302      	movs	r3, #2
 80074bc:	e0db      	b.n	8007676 <HAL_SPI_Receive+0x20a>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074c6:	f7fd fbab 	bl	8004c20 <HAL_GetTick>
 80074ca:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d002      	beq.n	80074de <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80074d8:	2302      	movs	r3, #2
 80074da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074dc:	e0c2      	b.n	8007664 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d002      	beq.n	80074ea <HAL_SPI_Receive+0x7e>
 80074e4:	88fb      	ldrh	r3, [r7, #6]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d102      	bne.n	80074f0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074ee:	e0b9      	b.n	8007664 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2204      	movs	r2, #4
 80074f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	88fa      	ldrh	r2, [r7, #6]
 8007508:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	88fa      	ldrh	r2, [r7, #6]
 800750e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007536:	d107      	bne.n	8007548 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007546:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007552:	2b40      	cmp	r3, #64	; 0x40
 8007554:	d007      	beq.n	8007566 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007564:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d162      	bne.n	8007634 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800756e:	e02e      	b.n	80075ce <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b01      	cmp	r3, #1
 800757c:	d115      	bne.n	80075aa <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f103 020c 	add.w	r2, r3, #12
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758a:	7812      	ldrb	r2, [r2, #0]
 800758c:	b2d2      	uxtb	r2, r2
 800758e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007594:	1c5a      	adds	r2, r3, #1
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800759e:	b29b      	uxth	r3, r3
 80075a0:	3b01      	subs	r3, #1
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075a8:	e011      	b.n	80075ce <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075aa:	f7fd fb39 	bl	8004c20 <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d803      	bhi.n	80075c2 <HAL_SPI_Receive+0x156>
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075c0:	d102      	bne.n	80075c8 <HAL_SPI_Receive+0x15c>
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d102      	bne.n	80075ce <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 80075cc:	e04a      	b.n	8007664 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1cb      	bne.n	8007570 <HAL_SPI_Receive+0x104>
 80075d8:	e031      	b.n	800763e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d113      	bne.n	8007610 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68da      	ldr	r2, [r3, #12]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f2:	b292      	uxth	r2, r2
 80075f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fa:	1c9a      	adds	r2, r3, #2
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007604:	b29b      	uxth	r3, r3
 8007606:	3b01      	subs	r3, #1
 8007608:	b29a      	uxth	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800760e:	e011      	b.n	8007634 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007610:	f7fd fb06 	bl	8004c20 <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	429a      	cmp	r2, r3
 800761e:	d803      	bhi.n	8007628 <HAL_SPI_Receive+0x1bc>
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007626:	d102      	bne.n	800762e <HAL_SPI_Receive+0x1c2>
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d102      	bne.n	8007634 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007632:	e017      	b.n	8007664 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007638:	b29b      	uxth	r3, r3
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1cd      	bne.n	80075da <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f000 fa27 	bl	8007a96 <SPI_EndRxTransaction>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d002      	beq.n	8007654 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2220      	movs	r2, #32
 8007652:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007658:	2b00      	cmp	r3, #0
 800765a:	d002      	beq.n	8007662 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	75fb      	strb	r3, [r7, #23]
 8007660:	e000      	b.n	8007664 <HAL_SPI_Receive+0x1f8>
  }

error :
 8007662:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007674:	7dfb      	ldrb	r3, [r7, #23]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b08c      	sub	sp, #48	; 0x30
 8007682:	af00      	add	r7, sp, #0
 8007684:	60f8      	str	r0, [r7, #12]
 8007686:	60b9      	str	r1, [r7, #8]
 8007688:	607a      	str	r2, [r7, #4]
 800768a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800768c:	2301      	movs	r3, #1
 800768e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800769c:	2b01      	cmp	r3, #1
 800769e:	d101      	bne.n	80076a4 <HAL_SPI_TransmitReceive+0x26>
 80076a0:	2302      	movs	r3, #2
 80076a2:	e18a      	b.n	80079ba <HAL_SPI_TransmitReceive+0x33c>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076ac:	f7fd fab8 	bl	8004c20 <HAL_GetTick>
 80076b0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80076c2:	887b      	ldrh	r3, [r7, #2]
 80076c4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80076c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d00f      	beq.n	80076ee <HAL_SPI_TransmitReceive+0x70>
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076d4:	d107      	bne.n	80076e6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d103      	bne.n	80076e6 <HAL_SPI_TransmitReceive+0x68>
 80076de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076e2:	2b04      	cmp	r3, #4
 80076e4:	d003      	beq.n	80076ee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80076e6:	2302      	movs	r3, #2
 80076e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80076ec:	e15b      	b.n	80079a6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d005      	beq.n	8007700 <HAL_SPI_TransmitReceive+0x82>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d002      	beq.n	8007700 <HAL_SPI_TransmitReceive+0x82>
 80076fa:	887b      	ldrh	r3, [r7, #2]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d103      	bne.n	8007708 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007706:	e14e      	b.n	80079a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800770e:	b2db      	uxtb	r3, r3
 8007710:	2b04      	cmp	r3, #4
 8007712:	d003      	beq.n	800771c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2205      	movs	r2, #5
 8007718:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	887a      	ldrh	r2, [r7, #2]
 800772c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	887a      	ldrh	r2, [r7, #2]
 8007732:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	887a      	ldrh	r2, [r7, #2]
 800773e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	887a      	ldrh	r2, [r7, #2]
 8007744:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800775c:	2b40      	cmp	r3, #64	; 0x40
 800775e:	d007      	beq.n	8007770 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800776e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007778:	d178      	bne.n	800786c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d002      	beq.n	8007788 <HAL_SPI_TransmitReceive+0x10a>
 8007782:	8b7b      	ldrh	r3, [r7, #26]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d166      	bne.n	8007856 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778c:	881a      	ldrh	r2, [r3, #0]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007798:	1c9a      	adds	r2, r3, #2
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	3b01      	subs	r3, #1
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077ac:	e053      	b.n	8007856 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d11b      	bne.n	80077f4 <HAL_SPI_TransmitReceive+0x176>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d016      	beq.n	80077f4 <HAL_SPI_TransmitReceive+0x176>
 80077c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d113      	bne.n	80077f4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d0:	881a      	ldrh	r2, [r3, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077dc:	1c9a      	adds	r2, r3, #2
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	3b01      	subs	r3, #1
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077f0:	2300      	movs	r3, #0
 80077f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d119      	bne.n	8007836 <HAL_SPI_TransmitReceive+0x1b8>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007806:	b29b      	uxth	r3, r3
 8007808:	2b00      	cmp	r3, #0
 800780a:	d014      	beq.n	8007836 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68da      	ldr	r2, [r3, #12]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007816:	b292      	uxth	r2, r2
 8007818:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781e:	1c9a      	adds	r2, r3, #2
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007828:	b29b      	uxth	r3, r3
 800782a:	3b01      	subs	r3, #1
 800782c:	b29a      	uxth	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007832:	2301      	movs	r3, #1
 8007834:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007836:	f7fd f9f3 	bl	8004c20 <HAL_GetTick>
 800783a:	4602      	mov	r2, r0
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007842:	429a      	cmp	r2, r3
 8007844:	d807      	bhi.n	8007856 <HAL_SPI_TransmitReceive+0x1d8>
 8007846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007848:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800784c:	d003      	beq.n	8007856 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007854:	e0a7      	b.n	80079a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800785a:	b29b      	uxth	r3, r3
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1a6      	bne.n	80077ae <HAL_SPI_TransmitReceive+0x130>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007864:	b29b      	uxth	r3, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1a1      	bne.n	80077ae <HAL_SPI_TransmitReceive+0x130>
 800786a:	e07c      	b.n	8007966 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d002      	beq.n	800787a <HAL_SPI_TransmitReceive+0x1fc>
 8007874:	8b7b      	ldrh	r3, [r7, #26]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d16b      	bne.n	8007952 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	330c      	adds	r3, #12
 8007884:	7812      	ldrb	r2, [r2, #0]
 8007886:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788c:	1c5a      	adds	r2, r3, #1
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007896:	b29b      	uxth	r3, r3
 8007898:	3b01      	subs	r3, #1
 800789a:	b29a      	uxth	r2, r3
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078a0:	e057      	b.n	8007952 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f003 0302 	and.w	r3, r3, #2
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d11c      	bne.n	80078ea <HAL_SPI_TransmitReceive+0x26c>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d017      	beq.n	80078ea <HAL_SPI_TransmitReceive+0x26c>
 80078ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d114      	bne.n	80078ea <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	330c      	adds	r3, #12
 80078ca:	7812      	ldrb	r2, [r2, #0]
 80078cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d2:	1c5a      	adds	r2, r3, #1
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078dc:	b29b      	uxth	r3, r3
 80078de:	3b01      	subs	r3, #1
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078e6:	2300      	movs	r3, #0
 80078e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d119      	bne.n	800792c <HAL_SPI_TransmitReceive+0x2ae>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d014      	beq.n	800792c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68da      	ldr	r2, [r3, #12]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790c:	b2d2      	uxtb	r2, r2
 800790e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800791e:	b29b      	uxth	r3, r3
 8007920:	3b01      	subs	r3, #1
 8007922:	b29a      	uxth	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007928:	2301      	movs	r3, #1
 800792a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800792c:	f7fd f978 	bl	8004c20 <HAL_GetTick>
 8007930:	4602      	mov	r2, r0
 8007932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007934:	1ad3      	subs	r3, r2, r3
 8007936:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007938:	429a      	cmp	r2, r3
 800793a:	d803      	bhi.n	8007944 <HAL_SPI_TransmitReceive+0x2c6>
 800793c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007942:	d102      	bne.n	800794a <HAL_SPI_TransmitReceive+0x2cc>
 8007944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007946:	2b00      	cmp	r3, #0
 8007948:	d103      	bne.n	8007952 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007950:	e029      	b.n	80079a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007956:	b29b      	uxth	r3, r3
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1a2      	bne.n	80078a2 <HAL_SPI_TransmitReceive+0x224>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007960:	b29b      	uxth	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d19d      	bne.n	80078a2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007968:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	f000 f8f8 	bl	8007b60 <SPI_EndRxTxTransaction>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d006      	beq.n	8007984 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2220      	movs	r2, #32
 8007980:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007982:	e010      	b.n	80079a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10b      	bne.n	80079a4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800798c:	2300      	movs	r3, #0
 800798e:	617b      	str	r3, [r7, #20]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	617b      	str	r3, [r7, #20]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	617b      	str	r3, [r7, #20]
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	e000      	b.n	80079a6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80079a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3730      	adds	r7, #48	; 0x30
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b084      	sub	sp, #16
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	60f8      	str	r0, [r7, #12]
 80079ca:	60b9      	str	r1, [r7, #8]
 80079cc:	603b      	str	r3, [r7, #0]
 80079ce:	4613      	mov	r3, r2
 80079d0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079d2:	e04c      	b.n	8007a6e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079da:	d048      	beq.n	8007a6e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80079dc:	f7fd f920 	bl	8004c20 <HAL_GetTick>
 80079e0:	4602      	mov	r2, r0
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	683a      	ldr	r2, [r7, #0]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d902      	bls.n	80079f2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d13d      	bne.n	8007a6e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a0a:	d111      	bne.n	8007a30 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a14:	d004      	beq.n	8007a20 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a1e:	d107      	bne.n	8007a30 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a38:	d10f      	bne.n	8007a5a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a48:	601a      	str	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e00f      	b.n	8007a8e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	689a      	ldr	r2, [r3, #8]
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	4013      	ands	r3, r2
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	bf0c      	ite	eq
 8007a7e:	2301      	moveq	r3, #1
 8007a80:	2300      	movne	r3, #0
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	461a      	mov	r2, r3
 8007a86:	79fb      	ldrb	r3, [r7, #7]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d1a3      	bne.n	80079d4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b086      	sub	sp, #24
 8007a9a:	af02      	add	r7, sp, #8
 8007a9c:	60f8      	str	r0, [r7, #12]
 8007a9e:	60b9      	str	r1, [r7, #8]
 8007aa0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007aaa:	d111      	bne.n	8007ad0 <SPI_EndRxTransaction+0x3a>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ab4:	d004      	beq.n	8007ac0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007abe:	d107      	bne.n	8007ad0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ace:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ad8:	d12a      	bne.n	8007b30 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ae2:	d012      	beq.n	8007b0a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2200      	movs	r2, #0
 8007aec:	2180      	movs	r1, #128	; 0x80
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f7ff ff67 	bl	80079c2 <SPI_WaitFlagStateUntilTimeout>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d02d      	beq.n	8007b56 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007afe:	f043 0220 	orr.w	r2, r3, #32
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e026      	b.n	8007b58 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	2200      	movs	r2, #0
 8007b12:	2101      	movs	r1, #1
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f7ff ff54 	bl	80079c2 <SPI_WaitFlagStateUntilTimeout>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d01a      	beq.n	8007b56 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b24:	f043 0220 	orr.w	r2, r3, #32
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e013      	b.n	8007b58 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	2200      	movs	r2, #0
 8007b38:	2101      	movs	r1, #1
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f7ff ff41 	bl	80079c2 <SPI_WaitFlagStateUntilTimeout>
 8007b40:	4603      	mov	r3, r0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d007      	beq.n	8007b56 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4a:	f043 0220 	orr.w	r2, r3, #32
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007b52:	2303      	movs	r3, #3
 8007b54:	e000      	b.n	8007b58 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b088      	sub	sp, #32
 8007b64:	af02      	add	r7, sp, #8
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007b6c:	4b1b      	ldr	r3, [pc, #108]	; (8007bdc <SPI_EndRxTxTransaction+0x7c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a1b      	ldr	r2, [pc, #108]	; (8007be0 <SPI_EndRxTxTransaction+0x80>)
 8007b72:	fba2 2303 	umull	r2, r3, r2, r3
 8007b76:	0d5b      	lsrs	r3, r3, #21
 8007b78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b7c:	fb02 f303 	mul.w	r3, r2, r3
 8007b80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b8a:	d112      	bne.n	8007bb2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	2200      	movs	r2, #0
 8007b94:	2180      	movs	r1, #128	; 0x80
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f7ff ff13 	bl	80079c2 <SPI_WaitFlagStateUntilTimeout>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d016      	beq.n	8007bd0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ba6:	f043 0220 	orr.w	r2, r3, #32
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e00f      	b.n	8007bd2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00a      	beq.n	8007bce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bc8:	2b80      	cmp	r3, #128	; 0x80
 8007bca:	d0f2      	beq.n	8007bb2 <SPI_EndRxTxTransaction+0x52>
 8007bcc:	e000      	b.n	8007bd0 <SPI_EndRxTxTransaction+0x70>
        break;
 8007bce:	bf00      	nop
  }

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3718      	adds	r7, #24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	2000012c 	.word	0x2000012c
 8007be0:	165e9f81 	.word	0x165e9f81

08007be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d101      	bne.n	8007bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e01d      	b.n	8007c32 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d106      	bne.n	8007c10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7fc f944 	bl	8003e98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2202      	movs	r2, #2
 8007c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	3304      	adds	r3, #4
 8007c20:	4619      	mov	r1, r3
 8007c22:	4610      	mov	r0, r2
 8007c24:	f000 fd30 	bl	8008688 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b085      	sub	sp, #20
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2202      	movs	r2, #2
 8007c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	f003 0307 	and.w	r3, r3, #7
 8007c54:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2b06      	cmp	r3, #6
 8007c5a:	d007      	beq.n	8007c6c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f042 0201 	orr.w	r2, r2, #1
 8007c6a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3714      	adds	r7, #20
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b082      	sub	sp, #8
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d101      	bne.n	8007c94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	e01d      	b.n	8007cd0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d106      	bne.n	8007cae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f815 	bl	8007cd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	3304      	adds	r3, #4
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	4610      	mov	r0, r2
 8007cc2:	f000 fce1 	bl	8008688 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	6839      	ldr	r1, [r7, #0]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f001 f8d6 	bl	8008eb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a15      	ldr	r2, [pc, #84]	; (8007d60 <HAL_TIM_PWM_Start+0x74>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d004      	beq.n	8007d18 <HAL_TIM_PWM_Start+0x2c>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a14      	ldr	r2, [pc, #80]	; (8007d64 <HAL_TIM_PWM_Start+0x78>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d101      	bne.n	8007d1c <HAL_TIM_PWM_Start+0x30>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e000      	b.n	8007d1e <HAL_TIM_PWM_Start+0x32>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d007      	beq.n	8007d32 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f003 0307 	and.w	r3, r3, #7
 8007d3c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2b06      	cmp	r3, #6
 8007d42:	d007      	beq.n	8007d54 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f042 0201 	orr.w	r2, r2, #1
 8007d52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	40010000 	.word	0x40010000
 8007d64:	40010400 	.word	0x40010400

08007d68 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2200      	movs	r2, #0
 8007d78:	6839      	ldr	r1, [r7, #0]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f001 f898 	bl	8008eb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a22      	ldr	r2, [pc, #136]	; (8007e10 <HAL_TIM_PWM_Stop+0xa8>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d004      	beq.n	8007d94 <HAL_TIM_PWM_Stop+0x2c>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a21      	ldr	r2, [pc, #132]	; (8007e14 <HAL_TIM_PWM_Stop+0xac>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d101      	bne.n	8007d98 <HAL_TIM_PWM_Stop+0x30>
 8007d94:	2301      	movs	r3, #1
 8007d96:	e000      	b.n	8007d9a <HAL_TIM_PWM_Stop+0x32>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d017      	beq.n	8007dce <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	6a1a      	ldr	r2, [r3, #32]
 8007da4:	f241 1311 	movw	r3, #4369	; 0x1111
 8007da8:	4013      	ands	r3, r2
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10f      	bne.n	8007dce <HAL_TIM_PWM_Stop+0x66>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	6a1a      	ldr	r2, [r3, #32]
 8007db4:	f240 4344 	movw	r3, #1092	; 0x444
 8007db8:	4013      	ands	r3, r2
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d107      	bne.n	8007dce <HAL_TIM_PWM_Stop+0x66>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007dcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	6a1a      	ldr	r2, [r3, #32]
 8007dd4:	f241 1311 	movw	r3, #4369	; 0x1111
 8007dd8:	4013      	ands	r3, r2
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10f      	bne.n	8007dfe <HAL_TIM_PWM_Stop+0x96>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	6a1a      	ldr	r2, [r3, #32]
 8007de4:	f240 4344 	movw	r3, #1092	; 0x444
 8007de8:	4013      	ands	r3, r2
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d107      	bne.n	8007dfe <HAL_TIM_PWM_Stop+0x96>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f022 0201 	bic.w	r2, r2, #1
 8007dfc:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	40010000 	.word	0x40010000
 8007e14:	40010400 	.word	0x40010400

08007e18 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e01d      	b.n	8007e66 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d106      	bne.n	8007e44 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f815 	bl	8007e6e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	3304      	adds	r3, #4
 8007e54:	4619      	mov	r1, r3
 8007e56:	4610      	mov	r0, r2
 8007e58:	f000 fc16 	bl	8008688 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b083      	sub	sp, #12
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007e76:	bf00      	nop
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
	...

08007e84 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b0c      	cmp	r3, #12
 8007e92:	d841      	bhi.n	8007f18 <HAL_TIM_IC_Start_IT+0x94>
 8007e94:	a201      	add	r2, pc, #4	; (adr r2, 8007e9c <HAL_TIM_IC_Start_IT+0x18>)
 8007e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9a:	bf00      	nop
 8007e9c:	08007ed1 	.word	0x08007ed1
 8007ea0:	08007f19 	.word	0x08007f19
 8007ea4:	08007f19 	.word	0x08007f19
 8007ea8:	08007f19 	.word	0x08007f19
 8007eac:	08007ee3 	.word	0x08007ee3
 8007eb0:	08007f19 	.word	0x08007f19
 8007eb4:	08007f19 	.word	0x08007f19
 8007eb8:	08007f19 	.word	0x08007f19
 8007ebc:	08007ef5 	.word	0x08007ef5
 8007ec0:	08007f19 	.word	0x08007f19
 8007ec4:	08007f19 	.word	0x08007f19
 8007ec8:	08007f19 	.word	0x08007f19
 8007ecc:	08007f07 	.word	0x08007f07
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68da      	ldr	r2, [r3, #12]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f042 0202 	orr.w	r2, r2, #2
 8007ede:	60da      	str	r2, [r3, #12]
      break;
 8007ee0:	e01b      	b.n	8007f1a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68da      	ldr	r2, [r3, #12]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f042 0204 	orr.w	r2, r2, #4
 8007ef0:	60da      	str	r2, [r3, #12]
      break;
 8007ef2:	e012      	b.n	8007f1a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68da      	ldr	r2, [r3, #12]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f042 0208 	orr.w	r2, r2, #8
 8007f02:	60da      	str	r2, [r3, #12]
      break;
 8007f04:	e009      	b.n	8007f1a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68da      	ldr	r2, [r3, #12]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f042 0210 	orr.w	r2, r2, #16
 8007f14:	60da      	str	r2, [r3, #12]
      break;
 8007f16:	e000      	b.n	8007f1a <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8007f18:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	4618      	mov	r0, r3
 8007f24:	f000 ffc4 	bl	8008eb0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f003 0307 	and.w	r3, r3, #7
 8007f32:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2b06      	cmp	r3, #6
 8007f38:	d007      	beq.n	8007f4a <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f042 0201 	orr.w	r2, r2, #1
 8007f48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	f003 0302 	and.w	r3, r3, #2
 8007f66:	2b02      	cmp	r3, #2
 8007f68:	d122      	bne.n	8007fb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	f003 0302 	and.w	r3, r3, #2
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d11b      	bne.n	8007fb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f06f 0202 	mvn.w	r2, #2
 8007f80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2201      	movs	r2, #1
 8007f86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	f003 0303 	and.w	r3, r3, #3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d003      	beq.n	8007f9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7fa f898 	bl	80020cc <HAL_TIM_IC_CaptureCallback>
 8007f9c:	e005      	b.n	8007faa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fb54 	bl	800864c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fb5b 	bl	8008660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	f003 0304 	and.w	r3, r3, #4
 8007fba:	2b04      	cmp	r3, #4
 8007fbc:	d122      	bne.n	8008004 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	f003 0304 	and.w	r3, r3, #4
 8007fc8:	2b04      	cmp	r3, #4
 8007fca:	d11b      	bne.n	8008004 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f06f 0204 	mvn.w	r2, #4
 8007fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2202      	movs	r2, #2
 8007fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f7fa f86e 	bl	80020cc <HAL_TIM_IC_CaptureCallback>
 8007ff0:	e005      	b.n	8007ffe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fb2a 	bl	800864c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fb31 	bl	8008660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	f003 0308 	and.w	r3, r3, #8
 800800e:	2b08      	cmp	r3, #8
 8008010:	d122      	bne.n	8008058 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	f003 0308 	and.w	r3, r3, #8
 800801c:	2b08      	cmp	r3, #8
 800801e:	d11b      	bne.n	8008058 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f06f 0208 	mvn.w	r2, #8
 8008028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2204      	movs	r2, #4
 800802e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	69db      	ldr	r3, [r3, #28]
 8008036:	f003 0303 	and.w	r3, r3, #3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7fa f844 	bl	80020cc <HAL_TIM_IC_CaptureCallback>
 8008044:	e005      	b.n	8008052 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fb00 	bl	800864c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fb07 	bl	8008660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	f003 0310 	and.w	r3, r3, #16
 8008062:	2b10      	cmp	r3, #16
 8008064:	d122      	bne.n	80080ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	f003 0310 	and.w	r3, r3, #16
 8008070:	2b10      	cmp	r3, #16
 8008072:	d11b      	bne.n	80080ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f06f 0210 	mvn.w	r2, #16
 800807c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2208      	movs	r2, #8
 8008082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800808e:	2b00      	cmp	r3, #0
 8008090:	d003      	beq.n	800809a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f7fa f81a 	bl	80020cc <HAL_TIM_IC_CaptureCallback>
 8008098:	e005      	b.n	80080a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fad6 	bl	800864c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fadd 	bl	8008660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d10e      	bne.n	80080d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	f003 0301 	and.w	r3, r3, #1
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d107      	bne.n	80080d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f06f 0201 	mvn.w	r2, #1
 80080d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 fab0 	bl	8008638 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e2:	2b80      	cmp	r3, #128	; 0x80
 80080e4:	d10e      	bne.n	8008104 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080f0:	2b80      	cmp	r3, #128	; 0x80
 80080f2:	d107      	bne.n	8008104 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80080fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 ffd4 	bl	80090ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800810e:	2b40      	cmp	r3, #64	; 0x40
 8008110:	d10e      	bne.n	8008130 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800811c:	2b40      	cmp	r3, #64	; 0x40
 800811e:	d107      	bne.n	8008130 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 faa2 	bl	8008674 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	f003 0320 	and.w	r3, r3, #32
 800813a:	2b20      	cmp	r3, #32
 800813c:	d10e      	bne.n	800815c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f003 0320 	and.w	r3, r3, #32
 8008148:	2b20      	cmp	r3, #32
 800814a:	d107      	bne.n	800815c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f06f 0220 	mvn.w	r2, #32
 8008154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 ff9e 	bl	8009098 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800815c:	bf00      	nop
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008176:	2b01      	cmp	r3, #1
 8008178:	d101      	bne.n	800817e <HAL_TIM_IC_ConfigChannel+0x1a>
 800817a:	2302      	movs	r3, #2
 800817c:	e08a      	b.n	8008294 <HAL_TIM_IC_ConfigChannel+0x130>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2202      	movs	r2, #2
 800818a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d11b      	bne.n	80081cc <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6818      	ldr	r0, [r3, #0]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	6819      	ldr	r1, [r3, #0]
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	f000 fcc0 	bl	8008b28 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	699a      	ldr	r2, [r3, #24]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f022 020c 	bic.w	r2, r2, #12
 80081b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	6999      	ldr	r1, [r3, #24]
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	689a      	ldr	r2, [r3, #8]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	430a      	orrs	r2, r1
 80081c8:	619a      	str	r2, [r3, #24]
 80081ca:	e05a      	b.n	8008282 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b04      	cmp	r3, #4
 80081d0:	d11c      	bne.n	800820c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6818      	ldr	r0, [r3, #0]
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	6819      	ldr	r1, [r3, #0]
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	685a      	ldr	r2, [r3, #4]
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	f000 fd44 	bl	8008c6e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	699a      	ldr	r2, [r3, #24]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80081f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6999      	ldr	r1, [r3, #24]
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	021a      	lsls	r2, r3, #8
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	430a      	orrs	r2, r1
 8008208:	619a      	str	r2, [r3, #24]
 800820a:	e03a      	b.n	8008282 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b08      	cmp	r3, #8
 8008210:	d11b      	bne.n	800824a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6818      	ldr	r0, [r3, #0]
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	6819      	ldr	r1, [r3, #0]
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	685a      	ldr	r2, [r3, #4]
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	f000 fd91 	bl	8008d48 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	69da      	ldr	r2, [r3, #28]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f022 020c 	bic.w	r2, r2, #12
 8008234:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	69d9      	ldr	r1, [r3, #28]
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	689a      	ldr	r2, [r3, #8]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	430a      	orrs	r2, r1
 8008246:	61da      	str	r2, [r3, #28]
 8008248:	e01b      	b.n	8008282 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6818      	ldr	r0, [r3, #0]
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	6819      	ldr	r1, [r3, #0]
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	685a      	ldr	r2, [r3, #4]
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	f000 fdb1 	bl	8008dc0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	69da      	ldr	r2, [r3, #28]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800826c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	69d9      	ldr	r1, [r3, #28]
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	021a      	lsls	r2, r3, #8
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	430a      	orrs	r2, r1
 8008280:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2201      	movs	r2, #1
 8008286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d101      	bne.n	80082b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80082b2:	2302      	movs	r3, #2
 80082b4:	e0b4      	b.n	8008420 <HAL_TIM_PWM_ConfigChannel+0x184>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2202      	movs	r2, #2
 80082c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2b0c      	cmp	r3, #12
 80082ca:	f200 809f 	bhi.w	800840c <HAL_TIM_PWM_ConfigChannel+0x170>
 80082ce:	a201      	add	r2, pc, #4	; (adr r2, 80082d4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80082d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d4:	08008309 	.word	0x08008309
 80082d8:	0800840d 	.word	0x0800840d
 80082dc:	0800840d 	.word	0x0800840d
 80082e0:	0800840d 	.word	0x0800840d
 80082e4:	08008349 	.word	0x08008349
 80082e8:	0800840d 	.word	0x0800840d
 80082ec:	0800840d 	.word	0x0800840d
 80082f0:	0800840d 	.word	0x0800840d
 80082f4:	0800838b 	.word	0x0800838b
 80082f8:	0800840d 	.word	0x0800840d
 80082fc:	0800840d 	.word	0x0800840d
 8008300:	0800840d 	.word	0x0800840d
 8008304:	080083cb 	.word	0x080083cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68b9      	ldr	r1, [r7, #8]
 800830e:	4618      	mov	r0, r3
 8008310:	f000 fa5a 	bl	80087c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	699a      	ldr	r2, [r3, #24]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f042 0208 	orr.w	r2, r2, #8
 8008322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	699a      	ldr	r2, [r3, #24]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f022 0204 	bic.w	r2, r2, #4
 8008332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	6999      	ldr	r1, [r3, #24]
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	691a      	ldr	r2, [r3, #16]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	430a      	orrs	r2, r1
 8008344:	619a      	str	r2, [r3, #24]
      break;
 8008346:	e062      	b.n	800840e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68b9      	ldr	r1, [r7, #8]
 800834e:	4618      	mov	r0, r3
 8008350:	f000 faaa 	bl	80088a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	699a      	ldr	r2, [r3, #24]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	699a      	ldr	r2, [r3, #24]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	6999      	ldr	r1, [r3, #24]
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	021a      	lsls	r2, r3, #8
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	430a      	orrs	r2, r1
 8008386:	619a      	str	r2, [r3, #24]
      break;
 8008388:	e041      	b.n	800840e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	68b9      	ldr	r1, [r7, #8]
 8008390:	4618      	mov	r0, r3
 8008392:	f000 faff 	bl	8008994 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	69da      	ldr	r2, [r3, #28]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f042 0208 	orr.w	r2, r2, #8
 80083a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	69da      	ldr	r2, [r3, #28]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f022 0204 	bic.w	r2, r2, #4
 80083b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	69d9      	ldr	r1, [r3, #28]
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	691a      	ldr	r2, [r3, #16]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	430a      	orrs	r2, r1
 80083c6:	61da      	str	r2, [r3, #28]
      break;
 80083c8:	e021      	b.n	800840e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	68b9      	ldr	r1, [r7, #8]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f000 fb53 	bl	8008a7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	69da      	ldr	r2, [r3, #28]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	69da      	ldr	r2, [r3, #28]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	69d9      	ldr	r1, [r3, #28]
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	021a      	lsls	r2, r3, #8
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	430a      	orrs	r2, r1
 8008408:	61da      	str	r2, [r3, #28]
      break;
 800840a:	e000      	b.n	800840e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800840c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2200      	movs	r2, #0
 800841a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008438:	2b01      	cmp	r3, #1
 800843a:	d101      	bne.n	8008440 <HAL_TIM_ConfigClockSource+0x18>
 800843c:	2302      	movs	r3, #2
 800843e:	e0b3      	b.n	80085a8 <HAL_TIM_ConfigClockSource+0x180>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2202      	movs	r2, #2
 800844c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800845e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008466:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008478:	d03e      	beq.n	80084f8 <HAL_TIM_ConfigClockSource+0xd0>
 800847a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800847e:	f200 8087 	bhi.w	8008590 <HAL_TIM_ConfigClockSource+0x168>
 8008482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008486:	f000 8085 	beq.w	8008594 <HAL_TIM_ConfigClockSource+0x16c>
 800848a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800848e:	d87f      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x168>
 8008490:	2b70      	cmp	r3, #112	; 0x70
 8008492:	d01a      	beq.n	80084ca <HAL_TIM_ConfigClockSource+0xa2>
 8008494:	2b70      	cmp	r3, #112	; 0x70
 8008496:	d87b      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x168>
 8008498:	2b60      	cmp	r3, #96	; 0x60
 800849a:	d050      	beq.n	800853e <HAL_TIM_ConfigClockSource+0x116>
 800849c:	2b60      	cmp	r3, #96	; 0x60
 800849e:	d877      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x168>
 80084a0:	2b50      	cmp	r3, #80	; 0x50
 80084a2:	d03c      	beq.n	800851e <HAL_TIM_ConfigClockSource+0xf6>
 80084a4:	2b50      	cmp	r3, #80	; 0x50
 80084a6:	d873      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x168>
 80084a8:	2b40      	cmp	r3, #64	; 0x40
 80084aa:	d058      	beq.n	800855e <HAL_TIM_ConfigClockSource+0x136>
 80084ac:	2b40      	cmp	r3, #64	; 0x40
 80084ae:	d86f      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x168>
 80084b0:	2b30      	cmp	r3, #48	; 0x30
 80084b2:	d064      	beq.n	800857e <HAL_TIM_ConfigClockSource+0x156>
 80084b4:	2b30      	cmp	r3, #48	; 0x30
 80084b6:	d86b      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x168>
 80084b8:	2b20      	cmp	r3, #32
 80084ba:	d060      	beq.n	800857e <HAL_TIM_ConfigClockSource+0x156>
 80084bc:	2b20      	cmp	r3, #32
 80084be:	d867      	bhi.n	8008590 <HAL_TIM_ConfigClockSource+0x168>
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d05c      	beq.n	800857e <HAL_TIM_ConfigClockSource+0x156>
 80084c4:	2b10      	cmp	r3, #16
 80084c6:	d05a      	beq.n	800857e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80084c8:	e062      	b.n	8008590 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6818      	ldr	r0, [r3, #0]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	6899      	ldr	r1, [r3, #8]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	f000 fcc9 	bl	8008e70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80084ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	609a      	str	r2, [r3, #8]
      break;
 80084f6:	e04e      	b.n	8008596 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6818      	ldr	r0, [r3, #0]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	6899      	ldr	r1, [r3, #8]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	685a      	ldr	r2, [r3, #4]
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	f000 fcb2 	bl	8008e70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	689a      	ldr	r2, [r3, #8]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800851a:	609a      	str	r2, [r3, #8]
      break;
 800851c:	e03b      	b.n	8008596 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6818      	ldr	r0, [r3, #0]
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	6859      	ldr	r1, [r3, #4]
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	461a      	mov	r2, r3
 800852c:	f000 fb70 	bl	8008c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2150      	movs	r1, #80	; 0x50
 8008536:	4618      	mov	r0, r3
 8008538:	f000 fc7f 	bl	8008e3a <TIM_ITRx_SetConfig>
      break;
 800853c:	e02b      	b.n	8008596 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6818      	ldr	r0, [r3, #0]
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	6859      	ldr	r1, [r3, #4]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	461a      	mov	r2, r3
 800854c:	f000 fbcc 	bl	8008ce8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2160      	movs	r1, #96	; 0x60
 8008556:	4618      	mov	r0, r3
 8008558:	f000 fc6f 	bl	8008e3a <TIM_ITRx_SetConfig>
      break;
 800855c:	e01b      	b.n	8008596 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6818      	ldr	r0, [r3, #0]
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	6859      	ldr	r1, [r3, #4]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	461a      	mov	r2, r3
 800856c:	f000 fb50 	bl	8008c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2140      	movs	r1, #64	; 0x40
 8008576:	4618      	mov	r0, r3
 8008578:	f000 fc5f 	bl	8008e3a <TIM_ITRx_SetConfig>
      break;
 800857c:	e00b      	b.n	8008596 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4619      	mov	r1, r3
 8008588:	4610      	mov	r0, r2
 800858a:	f000 fc56 	bl	8008e3a <TIM_ITRx_SetConfig>
      break;
 800858e:	e002      	b.n	8008596 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008590:	bf00      	nop
 8008592:	e000      	b.n	8008596 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008594:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	60fb      	str	r3, [r7, #12]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	2b0c      	cmp	r3, #12
 80085c2:	d831      	bhi.n	8008628 <HAL_TIM_ReadCapturedValue+0x78>
 80085c4:	a201      	add	r2, pc, #4	; (adr r2, 80085cc <HAL_TIM_ReadCapturedValue+0x1c>)
 80085c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ca:	bf00      	nop
 80085cc:	08008601 	.word	0x08008601
 80085d0:	08008629 	.word	0x08008629
 80085d4:	08008629 	.word	0x08008629
 80085d8:	08008629 	.word	0x08008629
 80085dc:	0800860b 	.word	0x0800860b
 80085e0:	08008629 	.word	0x08008629
 80085e4:	08008629 	.word	0x08008629
 80085e8:	08008629 	.word	0x08008629
 80085ec:	08008615 	.word	0x08008615
 80085f0:	08008629 	.word	0x08008629
 80085f4:	08008629 	.word	0x08008629
 80085f8:	08008629 	.word	0x08008629
 80085fc:	0800861f 	.word	0x0800861f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008606:	60fb      	str	r3, [r7, #12]

      break;
 8008608:	e00f      	b.n	800862a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008610:	60fb      	str	r3, [r7, #12]

      break;
 8008612:	e00a      	b.n	800862a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861a:	60fb      	str	r3, [r7, #12]

      break;
 800861c:	e005      	b.n	800862a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008624:	60fb      	str	r3, [r7, #12]

      break;
 8008626:	e000      	b.n	800862a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008628:	bf00      	nop
  }

  return tmpreg;
 800862a:	68fb      	ldr	r3, [r7, #12]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3714      	adds	r7, #20
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008654:	bf00      	nop
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a40      	ldr	r2, [pc, #256]	; (800879c <TIM_Base_SetConfig+0x114>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d013      	beq.n	80086c8 <TIM_Base_SetConfig+0x40>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086a6:	d00f      	beq.n	80086c8 <TIM_Base_SetConfig+0x40>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a3d      	ldr	r2, [pc, #244]	; (80087a0 <TIM_Base_SetConfig+0x118>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d00b      	beq.n	80086c8 <TIM_Base_SetConfig+0x40>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a3c      	ldr	r2, [pc, #240]	; (80087a4 <TIM_Base_SetConfig+0x11c>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d007      	beq.n	80086c8 <TIM_Base_SetConfig+0x40>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a3b      	ldr	r2, [pc, #236]	; (80087a8 <TIM_Base_SetConfig+0x120>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d003      	beq.n	80086c8 <TIM_Base_SetConfig+0x40>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a3a      	ldr	r2, [pc, #232]	; (80087ac <TIM_Base_SetConfig+0x124>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d108      	bne.n	80086da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a2f      	ldr	r2, [pc, #188]	; (800879c <TIM_Base_SetConfig+0x114>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d02b      	beq.n	800873a <TIM_Base_SetConfig+0xb2>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086e8:	d027      	beq.n	800873a <TIM_Base_SetConfig+0xb2>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a2c      	ldr	r2, [pc, #176]	; (80087a0 <TIM_Base_SetConfig+0x118>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d023      	beq.n	800873a <TIM_Base_SetConfig+0xb2>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a2b      	ldr	r2, [pc, #172]	; (80087a4 <TIM_Base_SetConfig+0x11c>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d01f      	beq.n	800873a <TIM_Base_SetConfig+0xb2>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a2a      	ldr	r2, [pc, #168]	; (80087a8 <TIM_Base_SetConfig+0x120>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d01b      	beq.n	800873a <TIM_Base_SetConfig+0xb2>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a29      	ldr	r2, [pc, #164]	; (80087ac <TIM_Base_SetConfig+0x124>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d017      	beq.n	800873a <TIM_Base_SetConfig+0xb2>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a28      	ldr	r2, [pc, #160]	; (80087b0 <TIM_Base_SetConfig+0x128>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d013      	beq.n	800873a <TIM_Base_SetConfig+0xb2>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a27      	ldr	r2, [pc, #156]	; (80087b4 <TIM_Base_SetConfig+0x12c>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d00f      	beq.n	800873a <TIM_Base_SetConfig+0xb2>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a26      	ldr	r2, [pc, #152]	; (80087b8 <TIM_Base_SetConfig+0x130>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d00b      	beq.n	800873a <TIM_Base_SetConfig+0xb2>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a25      	ldr	r2, [pc, #148]	; (80087bc <TIM_Base_SetConfig+0x134>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d007      	beq.n	800873a <TIM_Base_SetConfig+0xb2>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a24      	ldr	r2, [pc, #144]	; (80087c0 <TIM_Base_SetConfig+0x138>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d003      	beq.n	800873a <TIM_Base_SetConfig+0xb2>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a23      	ldr	r2, [pc, #140]	; (80087c4 <TIM_Base_SetConfig+0x13c>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d108      	bne.n	800874c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	4313      	orrs	r3, r2
 800874a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	4313      	orrs	r3, r2
 8008758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	689a      	ldr	r2, [r3, #8]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a0a      	ldr	r2, [pc, #40]	; (800879c <TIM_Base_SetConfig+0x114>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d003      	beq.n	8008780 <TIM_Base_SetConfig+0xf8>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a0c      	ldr	r2, [pc, #48]	; (80087ac <TIM_Base_SetConfig+0x124>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d103      	bne.n	8008788 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	691a      	ldr	r2, [r3, #16]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	615a      	str	r2, [r3, #20]
}
 800878e:	bf00      	nop
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	40010000 	.word	0x40010000
 80087a0:	40000400 	.word	0x40000400
 80087a4:	40000800 	.word	0x40000800
 80087a8:	40000c00 	.word	0x40000c00
 80087ac:	40010400 	.word	0x40010400
 80087b0:	40014000 	.word	0x40014000
 80087b4:	40014400 	.word	0x40014400
 80087b8:	40014800 	.word	0x40014800
 80087bc:	40001800 	.word	0x40001800
 80087c0:	40001c00 	.word	0x40001c00
 80087c4:	40002000 	.word	0x40002000

080087c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b087      	sub	sp, #28
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a1b      	ldr	r3, [r3, #32]
 80087d6:	f023 0201 	bic.w	r2, r3, #1
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f023 0303 	bic.w	r3, r3, #3
 80087fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	4313      	orrs	r3, r2
 8008808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	f023 0302 	bic.w	r3, r3, #2
 8008810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	4313      	orrs	r3, r2
 800881a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a20      	ldr	r2, [pc, #128]	; (80088a0 <TIM_OC1_SetConfig+0xd8>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d003      	beq.n	800882c <TIM_OC1_SetConfig+0x64>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a1f      	ldr	r2, [pc, #124]	; (80088a4 <TIM_OC1_SetConfig+0xdc>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d10c      	bne.n	8008846 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	f023 0308 	bic.w	r3, r3, #8
 8008832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	697a      	ldr	r2, [r7, #20]
 800883a:	4313      	orrs	r3, r2
 800883c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	f023 0304 	bic.w	r3, r3, #4
 8008844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a15      	ldr	r2, [pc, #84]	; (80088a0 <TIM_OC1_SetConfig+0xd8>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d003      	beq.n	8008856 <TIM_OC1_SetConfig+0x8e>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a14      	ldr	r2, [pc, #80]	; (80088a4 <TIM_OC1_SetConfig+0xdc>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d111      	bne.n	800887a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800885c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	695b      	ldr	r3, [r3, #20]
 800886a:	693a      	ldr	r2, [r7, #16]
 800886c:	4313      	orrs	r3, r2
 800886e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	699b      	ldr	r3, [r3, #24]
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	4313      	orrs	r3, r2
 8008878:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	685a      	ldr	r2, [r3, #4]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	697a      	ldr	r2, [r7, #20]
 8008892:	621a      	str	r2, [r3, #32]
}
 8008894:	bf00      	nop
 8008896:	371c      	adds	r7, #28
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr
 80088a0:	40010000 	.word	0x40010000
 80088a4:	40010400 	.word	0x40010400

080088a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b087      	sub	sp, #28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a1b      	ldr	r3, [r3, #32]
 80088b6:	f023 0210 	bic.w	r2, r3, #16
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	021b      	lsls	r3, r3, #8
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	f023 0320 	bic.w	r3, r3, #32
 80088f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	011b      	lsls	r3, r3, #4
 80088fa:	697a      	ldr	r2, [r7, #20]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a22      	ldr	r2, [pc, #136]	; (800898c <TIM_OC2_SetConfig+0xe4>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d003      	beq.n	8008910 <TIM_OC2_SetConfig+0x68>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a21      	ldr	r2, [pc, #132]	; (8008990 <TIM_OC2_SetConfig+0xe8>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d10d      	bne.n	800892c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	011b      	lsls	r3, r3, #4
 800891e:	697a      	ldr	r2, [r7, #20]
 8008920:	4313      	orrs	r3, r2
 8008922:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800892a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4a17      	ldr	r2, [pc, #92]	; (800898c <TIM_OC2_SetConfig+0xe4>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d003      	beq.n	800893c <TIM_OC2_SetConfig+0x94>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a16      	ldr	r2, [pc, #88]	; (8008990 <TIM_OC2_SetConfig+0xe8>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d113      	bne.n	8008964 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008942:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800894a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	695b      	ldr	r3, [r3, #20]
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	693a      	ldr	r2, [r7, #16]
 8008954:	4313      	orrs	r3, r2
 8008956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	699b      	ldr	r3, [r3, #24]
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	693a      	ldr	r2, [r7, #16]
 8008960:	4313      	orrs	r3, r2
 8008962:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	685a      	ldr	r2, [r3, #4]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	697a      	ldr	r2, [r7, #20]
 800897c:	621a      	str	r2, [r3, #32]
}
 800897e:	bf00      	nop
 8008980:	371c      	adds	r7, #28
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
 800898a:	bf00      	nop
 800898c:	40010000 	.word	0x40010000
 8008990:	40010400 	.word	0x40010400

08008994 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008994:	b480      	push	{r7}
 8008996:	b087      	sub	sp, #28
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a1b      	ldr	r3, [r3, #32]
 80089a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6a1b      	ldr	r3, [r3, #32]
 80089ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	69db      	ldr	r3, [r3, #28]
 80089ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f023 0303 	bic.w	r3, r3, #3
 80089ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	021b      	lsls	r3, r3, #8
 80089e4:	697a      	ldr	r2, [r7, #20]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a21      	ldr	r2, [pc, #132]	; (8008a74 <TIM_OC3_SetConfig+0xe0>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d003      	beq.n	80089fa <TIM_OC3_SetConfig+0x66>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a20      	ldr	r2, [pc, #128]	; (8008a78 <TIM_OC3_SetConfig+0xe4>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d10d      	bne.n	8008a16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	021b      	lsls	r3, r3, #8
 8008a08:	697a      	ldr	r2, [r7, #20]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a16      	ldr	r2, [pc, #88]	; (8008a74 <TIM_OC3_SetConfig+0xe0>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d003      	beq.n	8008a26 <TIM_OC3_SetConfig+0x92>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4a15      	ldr	r2, [pc, #84]	; (8008a78 <TIM_OC3_SetConfig+0xe4>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d113      	bne.n	8008a4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	011b      	lsls	r3, r3, #4
 8008a3c:	693a      	ldr	r2, [r7, #16]
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	011b      	lsls	r3, r3, #4
 8008a48:	693a      	ldr	r2, [r7, #16]
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	685a      	ldr	r2, [r3, #4]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	621a      	str	r2, [r3, #32]
}
 8008a68:	bf00      	nop
 8008a6a:	371c      	adds	r7, #28
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr
 8008a74:	40010000 	.word	0x40010000
 8008a78:	40010400 	.word	0x40010400

08008a7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b087      	sub	sp, #28
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a1b      	ldr	r3, [r3, #32]
 8008a8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	69db      	ldr	r3, [r3, #28]
 8008aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	021b      	lsls	r3, r3, #8
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ac6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	031b      	lsls	r3, r3, #12
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a12      	ldr	r2, [pc, #72]	; (8008b20 <TIM_OC4_SetConfig+0xa4>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d003      	beq.n	8008ae4 <TIM_OC4_SetConfig+0x68>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a11      	ldr	r2, [pc, #68]	; (8008b24 <TIM_OC4_SetConfig+0xa8>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d109      	bne.n	8008af8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008aea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	695b      	ldr	r3, [r3, #20]
 8008af0:	019b      	lsls	r3, r3, #6
 8008af2:	697a      	ldr	r2, [r7, #20]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	685a      	ldr	r2, [r3, #4]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	693a      	ldr	r2, [r7, #16]
 8008b10:	621a      	str	r2, [r3, #32]
}
 8008b12:	bf00      	nop
 8008b14:	371c      	adds	r7, #28
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	40010000 	.word	0x40010000
 8008b24:	40010400 	.word	0x40010400

08008b28 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b087      	sub	sp, #28
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	607a      	str	r2, [r7, #4]
 8008b34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6a1b      	ldr	r3, [r3, #32]
 8008b3a:	f023 0201 	bic.w	r2, r3, #1
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6a1b      	ldr	r3, [r3, #32]
 8008b4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	4a28      	ldr	r2, [pc, #160]	; (8008bf4 <TIM_TI1_SetConfig+0xcc>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d01b      	beq.n	8008b8e <TIM_TI1_SetConfig+0x66>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b5c:	d017      	beq.n	8008b8e <TIM_TI1_SetConfig+0x66>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	4a25      	ldr	r2, [pc, #148]	; (8008bf8 <TIM_TI1_SetConfig+0xd0>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d013      	beq.n	8008b8e <TIM_TI1_SetConfig+0x66>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	4a24      	ldr	r2, [pc, #144]	; (8008bfc <TIM_TI1_SetConfig+0xd4>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d00f      	beq.n	8008b8e <TIM_TI1_SetConfig+0x66>
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	4a23      	ldr	r2, [pc, #140]	; (8008c00 <TIM_TI1_SetConfig+0xd8>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d00b      	beq.n	8008b8e <TIM_TI1_SetConfig+0x66>
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	4a22      	ldr	r2, [pc, #136]	; (8008c04 <TIM_TI1_SetConfig+0xdc>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d007      	beq.n	8008b8e <TIM_TI1_SetConfig+0x66>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	4a21      	ldr	r2, [pc, #132]	; (8008c08 <TIM_TI1_SetConfig+0xe0>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d003      	beq.n	8008b8e <TIM_TI1_SetConfig+0x66>
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	4a20      	ldr	r2, [pc, #128]	; (8008c0c <TIM_TI1_SetConfig+0xe4>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d101      	bne.n	8008b92 <TIM_TI1_SetConfig+0x6a>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e000      	b.n	8008b94 <TIM_TI1_SetConfig+0x6c>
 8008b92:	2300      	movs	r3, #0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d008      	beq.n	8008baa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	f023 0303 	bic.w	r3, r3, #3
 8008b9e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008ba0:	697a      	ldr	r2, [r7, #20]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	617b      	str	r3, [r7, #20]
 8008ba8:	e003      	b.n	8008bb2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	f043 0301 	orr.w	r3, r3, #1
 8008bb0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	011b      	lsls	r3, r3, #4
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	697a      	ldr	r2, [r7, #20]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	f023 030a 	bic.w	r3, r3, #10
 8008bcc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	f003 030a 	and.w	r3, r3, #10
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	621a      	str	r2, [r3, #32]
}
 8008be6:	bf00      	nop
 8008be8:	371c      	adds	r7, #28
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	40010000 	.word	0x40010000
 8008bf8:	40000400 	.word	0x40000400
 8008bfc:	40000800 	.word	0x40000800
 8008c00:	40000c00 	.word	0x40000c00
 8008c04:	40010400 	.word	0x40010400
 8008c08:	40014000 	.word	0x40014000
 8008c0c:	40001800 	.word	0x40001800

08008c10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b087      	sub	sp, #28
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
 8008c20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	f023 0201 	bic.w	r2, r3, #1
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	011b      	lsls	r3, r3, #4
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	f023 030a 	bic.w	r3, r3, #10
 8008c4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	693a      	ldr	r2, [r7, #16]
 8008c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	697a      	ldr	r2, [r7, #20]
 8008c60:	621a      	str	r2, [r3, #32]
}
 8008c62:	bf00      	nop
 8008c64:	371c      	adds	r7, #28
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr

08008c6e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008c6e:	b480      	push	{r7}
 8008c70:	b087      	sub	sp, #28
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	60f8      	str	r0, [r7, #12]
 8008c76:	60b9      	str	r1, [r7, #8]
 8008c78:	607a      	str	r2, [r7, #4]
 8008c7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6a1b      	ldr	r3, [r3, #32]
 8008c80:	f023 0210 	bic.w	r2, r3, #16
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6a1b      	ldr	r3, [r3, #32]
 8008c92:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	021b      	lsls	r3, r3, #8
 8008ca0:	697a      	ldr	r2, [r7, #20]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008cac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	031b      	lsls	r3, r3, #12
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	697a      	ldr	r2, [r7, #20]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008cc0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	011b      	lsls	r3, r3, #4
 8008cc6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008cca:	693a      	ldr	r2, [r7, #16]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	697a      	ldr	r2, [r7, #20]
 8008cd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	621a      	str	r2, [r3, #32]
}
 8008cdc:	bf00      	nop
 8008cde:	371c      	adds	r7, #28
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b087      	sub	sp, #28
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6a1b      	ldr	r3, [r3, #32]
 8008cf8:	f023 0210 	bic.w	r2, r3, #16
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	699b      	ldr	r3, [r3, #24]
 8008d04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6a1b      	ldr	r3, [r3, #32]
 8008d0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d12:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	031b      	lsls	r3, r3, #12
 8008d18:	697a      	ldr	r2, [r7, #20]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	011b      	lsls	r3, r3, #4
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	697a      	ldr	r2, [r7, #20]
 8008d34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	693a      	ldr	r2, [r7, #16]
 8008d3a:	621a      	str	r2, [r3, #32]
}
 8008d3c:	bf00      	nop
 8008d3e:	371c      	adds	r7, #28
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b087      	sub	sp, #28
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
 8008d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6a1b      	ldr	r3, [r3, #32]
 8008d5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	69db      	ldr	r3, [r3, #28]
 8008d66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6a1b      	ldr	r3, [r3, #32]
 8008d6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	f023 0303 	bic.w	r3, r3, #3
 8008d74:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008d76:	697a      	ldr	r2, [r7, #20]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	011b      	lsls	r3, r3, #4
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	697a      	ldr	r2, [r7, #20]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008d98:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	021b      	lsls	r3, r3, #8
 8008d9e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	697a      	ldr	r2, [r7, #20]
 8008dac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	693a      	ldr	r2, [r7, #16]
 8008db2:	621a      	str	r2, [r3, #32]
}
 8008db4:	bf00      	nop
 8008db6:	371c      	adds	r7, #28
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b087      	sub	sp, #28
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	60f8      	str	r0, [r7, #12]
 8008dc8:	60b9      	str	r1, [r7, #8]
 8008dca:	607a      	str	r2, [r7, #4]
 8008dcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6a1b      	ldr	r3, [r3, #32]
 8008dd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	69db      	ldr	r3, [r3, #28]
 8008dde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6a1b      	ldr	r3, [r3, #32]
 8008de4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	021b      	lsls	r3, r3, #8
 8008df2:	697a      	ldr	r2, [r7, #20]
 8008df4:	4313      	orrs	r3, r2
 8008df6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008dfe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	031b      	lsls	r3, r3, #12
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	697a      	ldr	r2, [r7, #20]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008e12:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	031b      	lsls	r3, r3, #12
 8008e18:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	697a      	ldr	r2, [r7, #20]
 8008e26:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	693a      	ldr	r2, [r7, #16]
 8008e2c:	621a      	str	r2, [r3, #32]
}
 8008e2e:	bf00      	nop
 8008e30:	371c      	adds	r7, #28
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr

08008e3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e3a:	b480      	push	{r7}
 8008e3c:	b085      	sub	sp, #20
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	f043 0307 	orr.w	r3, r3, #7
 8008e5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	609a      	str	r2, [r3, #8]
}
 8008e64:	bf00      	nop
 8008e66:	3714      	adds	r7, #20
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b087      	sub	sp, #28
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
 8008e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	021a      	lsls	r2, r3, #8
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	431a      	orrs	r2, r3
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	697a      	ldr	r2, [r7, #20]
 8008ea2:	609a      	str	r2, [r3, #8]
}
 8008ea4:	bf00      	nop
 8008ea6:	371c      	adds	r7, #28
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b087      	sub	sp, #28
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f003 031f 	and.w	r3, r3, #31
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6a1a      	ldr	r2, [r3, #32]
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	43db      	mvns	r3, r3
 8008ed2:	401a      	ands	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6a1a      	ldr	r2, [r3, #32]
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	f003 031f 	and.w	r3, r3, #31
 8008ee2:	6879      	ldr	r1, [r7, #4]
 8008ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ee8:	431a      	orrs	r2, r3
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	621a      	str	r2, [r3, #32]
}
 8008eee:	bf00      	nop
 8008ef0:	371c      	adds	r7, #28
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
	...

08008efc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d101      	bne.n	8008f14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f10:	2302      	movs	r3, #2
 8008f12:	e05a      	b.n	8008fca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2202      	movs	r2, #2
 8008f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a21      	ldr	r2, [pc, #132]	; (8008fd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d022      	beq.n	8008f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f60:	d01d      	beq.n	8008f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a1d      	ldr	r2, [pc, #116]	; (8008fdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d018      	beq.n	8008f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a1b      	ldr	r2, [pc, #108]	; (8008fe0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d013      	beq.n	8008f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a1a      	ldr	r2, [pc, #104]	; (8008fe4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d00e      	beq.n	8008f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a18      	ldr	r2, [pc, #96]	; (8008fe8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d009      	beq.n	8008f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a17      	ldr	r2, [pc, #92]	; (8008fec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d004      	beq.n	8008f9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a15      	ldr	r2, [pc, #84]	; (8008ff0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d10c      	bne.n	8008fb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3714      	adds	r7, #20
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	40010000 	.word	0x40010000
 8008fdc:	40000400 	.word	0x40000400
 8008fe0:	40000800 	.word	0x40000800
 8008fe4:	40000c00 	.word	0x40000c00
 8008fe8:	40010400 	.word	0x40010400
 8008fec:	40014000 	.word	0x40014000
 8008ff0:	40001800 	.word	0x40001800

08008ff4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008ffe:	2300      	movs	r3, #0
 8009000:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009008:	2b01      	cmp	r3, #1
 800900a:	d101      	bne.n	8009010 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800900c:	2302      	movs	r3, #2
 800900e:	e03d      	b.n	800908c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	4313      	orrs	r3, r2
 8009024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	4313      	orrs	r3, r2
 8009032:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	4313      	orrs	r3, r2
 8009040:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4313      	orrs	r3, r2
 800904e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	4313      	orrs	r3, r2
 800905c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	695b      	ldr	r3, [r3, #20]
 8009068:	4313      	orrs	r3, r2
 800906a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	69db      	ldr	r3, [r3, #28]
 8009076:	4313      	orrs	r3, r2
 8009078:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d101      	bne.n	80090d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	e03f      	b.n	8009152 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d106      	bne.n	80090ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f7fb f832 	bl	8004150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2224      	movs	r2, #36	; 0x24
 80090f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68da      	ldr	r2, [r3, #12]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009102:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 fc6d 	bl	80099e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	691a      	ldr	r2, [r3, #16]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009118:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	695a      	ldr	r2, [r3, #20]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009128:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68da      	ldr	r2, [r3, #12]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009138:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2220      	movs	r2, #32
 8009144:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2220      	movs	r2, #32
 800914c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b088      	sub	sp, #32
 800915e:	af02      	add	r7, sp, #8
 8009160:	60f8      	str	r0, [r7, #12]
 8009162:	60b9      	str	r1, [r7, #8]
 8009164:	603b      	str	r3, [r7, #0]
 8009166:	4613      	mov	r3, r2
 8009168:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800916a:	2300      	movs	r3, #0
 800916c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b20      	cmp	r3, #32
 8009178:	f040 8083 	bne.w	8009282 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d002      	beq.n	8009188 <HAL_UART_Transmit+0x2e>
 8009182:	88fb      	ldrh	r3, [r7, #6]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d101      	bne.n	800918c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e07b      	b.n	8009284 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009192:	2b01      	cmp	r3, #1
 8009194:	d101      	bne.n	800919a <HAL_UART_Transmit+0x40>
 8009196:	2302      	movs	r3, #2
 8009198:	e074      	b.n	8009284 <HAL_UART_Transmit+0x12a>
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2201      	movs	r2, #1
 800919e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2221      	movs	r2, #33	; 0x21
 80091ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80091b0:	f7fb fd36 	bl	8004c20 <HAL_GetTick>
 80091b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	88fa      	ldrh	r2, [r7, #6]
 80091ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	88fa      	ldrh	r2, [r7, #6]
 80091c0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80091ca:	e042      	b.n	8009252 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	3b01      	subs	r3, #1
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091e2:	d122      	bne.n	800922a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	2200      	movs	r2, #0
 80091ec:	2180      	movs	r1, #128	; 0x80
 80091ee:	68f8      	ldr	r0, [r7, #12]
 80091f0:	f000 fa76 	bl	80096e0 <UART_WaitOnFlagUntilTimeout>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80091fa:	2303      	movs	r3, #3
 80091fc:	e042      	b.n	8009284 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	881b      	ldrh	r3, [r3, #0]
 8009206:	461a      	mov	r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009210:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d103      	bne.n	8009222 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	3302      	adds	r3, #2
 800921e:	60bb      	str	r3, [r7, #8]
 8009220:	e017      	b.n	8009252 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	3301      	adds	r3, #1
 8009226:	60bb      	str	r3, [r7, #8]
 8009228:	e013      	b.n	8009252 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	9300      	str	r3, [sp, #0]
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	2200      	movs	r2, #0
 8009232:	2180      	movs	r1, #128	; 0x80
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 fa53 	bl	80096e0 <UART_WaitOnFlagUntilTimeout>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d001      	beq.n	8009244 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8009240:	2303      	movs	r3, #3
 8009242:	e01f      	b.n	8009284 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	1c5a      	adds	r2, r3, #1
 8009248:	60ba      	str	r2, [r7, #8]
 800924a:	781a      	ldrb	r2, [r3, #0]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009256:	b29b      	uxth	r3, r3
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1b7      	bne.n	80091cc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	2200      	movs	r2, #0
 8009264:	2140      	movs	r1, #64	; 0x40
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f000 fa3a 	bl	80096e0 <UART_WaitOnFlagUntilTimeout>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d001      	beq.n	8009276 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8009272:	2303      	movs	r3, #3
 8009274:	e006      	b.n	8009284 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2220      	movs	r2, #32
 800927a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800927e:	2300      	movs	r3, #0
 8009280:	e000      	b.n	8009284 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8009282:	2302      	movs	r3, #2
  }
}
 8009284:	4618      	mov	r0, r3
 8009286:	3718      	adds	r7, #24
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b086      	sub	sp, #24
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	4613      	mov	r3, r2
 8009298:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2b20      	cmp	r3, #32
 80092a4:	d166      	bne.n	8009374 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d002      	beq.n	80092b2 <HAL_UART_Receive_DMA+0x26>
 80092ac:	88fb      	ldrh	r3, [r7, #6]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d101      	bne.n	80092b6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e05f      	b.n	8009376 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d101      	bne.n	80092c4 <HAL_UART_Receive_DMA+0x38>
 80092c0:	2302      	movs	r3, #2
 80092c2:	e058      	b.n	8009376 <HAL_UART_Receive_DMA+0xea>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80092cc:	68ba      	ldr	r2, [r7, #8]
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	88fa      	ldrh	r2, [r7, #6]
 80092d6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2200      	movs	r2, #0
 80092dc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2222      	movs	r2, #34	; 0x22
 80092e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ea:	4a25      	ldr	r2, [pc, #148]	; (8009380 <HAL_UART_Receive_DMA+0xf4>)
 80092ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f2:	4a24      	ldr	r2, [pc, #144]	; (8009384 <HAL_UART_Receive_DMA+0xf8>)
 80092f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092fa:	4a23      	ldr	r2, [pc, #140]	; (8009388 <HAL_UART_Receive_DMA+0xfc>)
 80092fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009302:	2200      	movs	r2, #0
 8009304:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8009306:	f107 0308 	add.w	r3, r7, #8
 800930a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	3304      	adds	r3, #4
 8009316:	4619      	mov	r1, r3
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	88fb      	ldrh	r3, [r7, #6]
 800931e:	f7fc fced 	bl	8005cfc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8009322:	2300      	movs	r3, #0
 8009324:	613b      	str	r3, [r7, #16]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	613b      	str	r3, [r7, #16]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	613b      	str	r3, [r7, #16]
 8009336:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68da      	ldr	r2, [r3, #12]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800934e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	695a      	ldr	r2, [r3, #20]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f042 0201 	orr.w	r2, r2, #1
 800935e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	695a      	ldr	r2, [r3, #20]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800936e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8009370:	2300      	movs	r3, #0
 8009372:	e000      	b.n	8009376 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009374:	2302      	movs	r3, #2
  }
}
 8009376:	4618      	mov	r0, r3
 8009378:	3718      	adds	r7, #24
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	080095c9 	.word	0x080095c9
 8009384:	08009631 	.word	0x08009631
 8009388:	0800964d 	.word	0x0800964d

0800938c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b088      	sub	sp, #32
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	695b      	ldr	r3, [r3, #20]
 80093aa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80093ac:	2300      	movs	r3, #0
 80093ae:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80093b0:	2300      	movs	r3, #0
 80093b2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	f003 030f 	and.w	r3, r3, #15
 80093ba:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d10d      	bne.n	80093de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	f003 0320 	and.w	r3, r3, #32
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d008      	beq.n	80093de <HAL_UART_IRQHandler+0x52>
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	f003 0320 	and.w	r3, r3, #32
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d003      	beq.n	80093de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 fa82 	bl	80098e0 <UART_Receive_IT>
      return;
 80093dc:	e0d0      	b.n	8009580 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f000 80b0 	beq.w	8009546 <HAL_UART_IRQHandler+0x1ba>
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	f003 0301 	and.w	r3, r3, #1
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d105      	bne.n	80093fc <HAL_UART_IRQHandler+0x70>
 80093f0:	69bb      	ldr	r3, [r7, #24]
 80093f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f000 80a5 	beq.w	8009546 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	f003 0301 	and.w	r3, r3, #1
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00a      	beq.n	800941c <HAL_UART_IRQHandler+0x90>
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800940c:	2b00      	cmp	r3, #0
 800940e:	d005      	beq.n	800941c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009414:	f043 0201 	orr.w	r2, r3, #1
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	f003 0304 	and.w	r3, r3, #4
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00a      	beq.n	800943c <HAL_UART_IRQHandler+0xb0>
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	f003 0301 	and.w	r3, r3, #1
 800942c:	2b00      	cmp	r3, #0
 800942e:	d005      	beq.n	800943c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009434:	f043 0202 	orr.w	r2, r3, #2
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	f003 0302 	and.w	r3, r3, #2
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00a      	beq.n	800945c <HAL_UART_IRQHandler+0xd0>
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	f003 0301 	and.w	r3, r3, #1
 800944c:	2b00      	cmp	r3, #0
 800944e:	d005      	beq.n	800945c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009454:	f043 0204 	orr.w	r2, r3, #4
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	f003 0308 	and.w	r3, r3, #8
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00f      	beq.n	8009486 <HAL_UART_IRQHandler+0xfa>
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	f003 0320 	and.w	r3, r3, #32
 800946c:	2b00      	cmp	r3, #0
 800946e:	d104      	bne.n	800947a <HAL_UART_IRQHandler+0xee>
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	2b00      	cmp	r3, #0
 8009478:	d005      	beq.n	8009486 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800947e:	f043 0208 	orr.w	r2, r3, #8
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800948a:	2b00      	cmp	r3, #0
 800948c:	d077      	beq.n	800957e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	f003 0320 	and.w	r3, r3, #32
 8009494:	2b00      	cmp	r3, #0
 8009496:	d007      	beq.n	80094a8 <HAL_UART_IRQHandler+0x11c>
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	f003 0320 	and.w	r3, r3, #32
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d002      	beq.n	80094a8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 fa1c 	bl	80098e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	695b      	ldr	r3, [r3, #20]
 80094ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b2:	2b40      	cmp	r3, #64	; 0x40
 80094b4:	bf0c      	ite	eq
 80094b6:	2301      	moveq	r3, #1
 80094b8:	2300      	movne	r3, #0
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094c2:	f003 0308 	and.w	r3, r3, #8
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d102      	bne.n	80094d0 <HAL_UART_IRQHandler+0x144>
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d031      	beq.n	8009534 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f965 	bl	80097a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	695b      	ldr	r3, [r3, #20]
 80094dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094e0:	2b40      	cmp	r3, #64	; 0x40
 80094e2:	d123      	bne.n	800952c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	695a      	ldr	r2, [r3, #20]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094f2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d013      	beq.n	8009524 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009500:	4a21      	ldr	r2, [pc, #132]	; (8009588 <HAL_UART_IRQHandler+0x1fc>)
 8009502:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009508:	4618      	mov	r0, r3
 800950a:	f7fc fc4f 	bl	8005dac <HAL_DMA_Abort_IT>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d016      	beq.n	8009542 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800951e:	4610      	mov	r0, r2
 8009520:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009522:	e00e      	b.n	8009542 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f845 	bl	80095b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800952a:	e00a      	b.n	8009542 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 f841 	bl	80095b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009532:	e006      	b.n	8009542 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 f83d 	bl	80095b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009540:	e01d      	b.n	800957e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009542:	bf00      	nop
    return;
 8009544:	e01b      	b.n	800957e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800954c:	2b00      	cmp	r3, #0
 800954e:	d008      	beq.n	8009562 <HAL_UART_IRQHandler+0x1d6>
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009556:	2b00      	cmp	r3, #0
 8009558:	d003      	beq.n	8009562 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f952 	bl	8009804 <UART_Transmit_IT>
    return;
 8009560:	e00e      	b.n	8009580 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009568:	2b00      	cmp	r3, #0
 800956a:	d009      	beq.n	8009580 <HAL_UART_IRQHandler+0x1f4>
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009572:	2b00      	cmp	r3, #0
 8009574:	d004      	beq.n	8009580 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f99a 	bl	80098b0 <UART_EndTransmit_IT>
    return;
 800957c:	e000      	b.n	8009580 <HAL_UART_IRQHandler+0x1f4>
    return;
 800957e:	bf00      	nop
  }
}
 8009580:	3720      	adds	r7, #32
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	080097dd 	.word	0x080097dd

0800958c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009594:	bf00      	nop
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80095a8:	bf00      	nop
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80095bc:	bf00      	nop
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d11e      	bne.n	8009622 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68da      	ldr	r2, [r3, #12]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80095f8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	695a      	ldr	r2, [r3, #20]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f022 0201 	bic.w	r2, r2, #1
 8009608:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	695a      	ldr	r2, [r3, #20]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009618:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2220      	movs	r2, #32
 800961e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	f7f9 fbc8 	bl	8002db8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009628:	bf00      	nop
 800962a:	3710      	adds	r7, #16
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800963e:	68f8      	ldr	r0, [r7, #12]
 8009640:	f7ff ffae 	bl	80095a0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009644:	bf00      	nop
 8009646:	3710      	adds	r7, #16
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009654:	2300      	movs	r3, #0
 8009656:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800965c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	695b      	ldr	r3, [r3, #20]
 8009664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009668:	2b80      	cmp	r3, #128	; 0x80
 800966a:	bf0c      	ite	eq
 800966c:	2301      	moveq	r3, #1
 800966e:	2300      	movne	r3, #0
 8009670:	b2db      	uxtb	r3, r3
 8009672:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800967a:	b2db      	uxtb	r3, r3
 800967c:	2b21      	cmp	r3, #33	; 0x21
 800967e:	d108      	bne.n	8009692 <UART_DMAError+0x46>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d005      	beq.n	8009692 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	2200      	movs	r2, #0
 800968a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800968c:	68b8      	ldr	r0, [r7, #8]
 800968e:	f000 f871 	bl	8009774 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	695b      	ldr	r3, [r3, #20]
 8009698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800969c:	2b40      	cmp	r3, #64	; 0x40
 800969e:	bf0c      	ite	eq
 80096a0:	2301      	moveq	r3, #1
 80096a2:	2300      	movne	r3, #0
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2b22      	cmp	r3, #34	; 0x22
 80096b2:	d108      	bne.n	80096c6 <UART_DMAError+0x7a>
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d005      	beq.n	80096c6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	2200      	movs	r2, #0
 80096be:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80096c0:	68b8      	ldr	r0, [r7, #8]
 80096c2:	f000 f86d 	bl	80097a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ca:	f043 0210 	orr.w	r2, r3, #16
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096d2:	68b8      	ldr	r0, [r7, #8]
 80096d4:	f7ff ff6e 	bl	80095b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096d8:	bf00      	nop
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	603b      	str	r3, [r7, #0]
 80096ec:	4613      	mov	r3, r2
 80096ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096f0:	e02c      	b.n	800974c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096f8:	d028      	beq.n	800974c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d007      	beq.n	8009710 <UART_WaitOnFlagUntilTimeout+0x30>
 8009700:	f7fb fa8e 	bl	8004c20 <HAL_GetTick>
 8009704:	4602      	mov	r2, r0
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	1ad3      	subs	r3, r2, r3
 800970a:	69ba      	ldr	r2, [r7, #24]
 800970c:	429a      	cmp	r2, r3
 800970e:	d21d      	bcs.n	800974c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	68da      	ldr	r2, [r3, #12]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800971e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	695a      	ldr	r2, [r3, #20]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f022 0201 	bic.w	r2, r2, #1
 800972e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2220      	movs	r2, #32
 8009734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2220      	movs	r2, #32
 800973c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2200      	movs	r2, #0
 8009744:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8009748:	2303      	movs	r3, #3
 800974a:	e00f      	b.n	800976c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	4013      	ands	r3, r2
 8009756:	68ba      	ldr	r2, [r7, #8]
 8009758:	429a      	cmp	r2, r3
 800975a:	bf0c      	ite	eq
 800975c:	2301      	moveq	r3, #1
 800975e:	2300      	movne	r3, #0
 8009760:	b2db      	uxtb	r3, r3
 8009762:	461a      	mov	r2, r3
 8009764:	79fb      	ldrb	r3, [r7, #7]
 8009766:	429a      	cmp	r2, r3
 8009768:	d0c3      	beq.n	80096f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	68da      	ldr	r2, [r3, #12]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800978a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2220      	movs	r2, #32
 8009790:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8009794:	bf00      	nop
 8009796:	370c      	adds	r7, #12
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr

080097a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	68da      	ldr	r2, [r3, #12]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80097b6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	695a      	ldr	r2, [r3, #20]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f022 0201 	bic.w	r2, r2, #1
 80097c6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2220      	movs	r2, #32
 80097cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80097d0:	bf00      	nop
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2200      	movs	r2, #0
 80097f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f7ff fedc 	bl	80095b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097fc:	bf00      	nop
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009812:	b2db      	uxtb	r3, r3
 8009814:	2b21      	cmp	r3, #33	; 0x21
 8009816:	d144      	bne.n	80098a2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009820:	d11a      	bne.n	8009858 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	881b      	ldrh	r3, [r3, #0]
 800982c:	461a      	mov	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009836:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d105      	bne.n	800984c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6a1b      	ldr	r3, [r3, #32]
 8009844:	1c9a      	adds	r2, r3, #2
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	621a      	str	r2, [r3, #32]
 800984a:	e00e      	b.n	800986a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a1b      	ldr	r3, [r3, #32]
 8009850:	1c5a      	adds	r2, r3, #1
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	621a      	str	r2, [r3, #32]
 8009856:	e008      	b.n	800986a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6a1b      	ldr	r3, [r3, #32]
 800985c:	1c59      	adds	r1, r3, #1
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	6211      	str	r1, [r2, #32]
 8009862:	781a      	ldrb	r2, [r3, #0]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800986e:	b29b      	uxth	r3, r3
 8009870:	3b01      	subs	r3, #1
 8009872:	b29b      	uxth	r3, r3
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	4619      	mov	r1, r3
 8009878:	84d1      	strh	r1, [r2, #38]	; 0x26
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10f      	bne.n	800989e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	68da      	ldr	r2, [r3, #12]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800988c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	68da      	ldr	r2, [r3, #12]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800989c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	e000      	b.n	80098a4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80098a2:	2302      	movs	r3, #2
  }
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3714      	adds	r7, #20
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	68da      	ldr	r2, [r3, #12]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2220      	movs	r2, #32
 80098cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f7ff fe5b 	bl	800958c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	2b22      	cmp	r3, #34	; 0x22
 80098f2:	d171      	bne.n	80099d8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098fc:	d123      	bne.n	8009946 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009902:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10e      	bne.n	800992a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	b29b      	uxth	r3, r3
 8009914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009918:	b29a      	uxth	r2, r3
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009922:	1c9a      	adds	r2, r3, #2
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	629a      	str	r2, [r3, #40]	; 0x28
 8009928:	e029      	b.n	800997e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	b29b      	uxth	r3, r3
 8009932:	b2db      	uxtb	r3, r3
 8009934:	b29a      	uxth	r2, r3
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800993e:	1c5a      	adds	r2, r3, #1
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	629a      	str	r2, [r3, #40]	; 0x28
 8009944:	e01b      	b.n	800997e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d10a      	bne.n	8009964 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	6858      	ldr	r0, [r3, #4]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009958:	1c59      	adds	r1, r3, #1
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	6291      	str	r1, [r2, #40]	; 0x28
 800995e:	b2c2      	uxtb	r2, r0
 8009960:	701a      	strb	r2, [r3, #0]
 8009962:	e00c      	b.n	800997e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	b2da      	uxtb	r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009970:	1c58      	adds	r0, r3, #1
 8009972:	6879      	ldr	r1, [r7, #4]
 8009974:	6288      	str	r0, [r1, #40]	; 0x28
 8009976:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800997a:	b2d2      	uxtb	r2, r2
 800997c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009982:	b29b      	uxth	r3, r3
 8009984:	3b01      	subs	r3, #1
 8009986:	b29b      	uxth	r3, r3
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	4619      	mov	r1, r3
 800998c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800998e:	2b00      	cmp	r3, #0
 8009990:	d120      	bne.n	80099d4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	68da      	ldr	r2, [r3, #12]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f022 0220 	bic.w	r2, r2, #32
 80099a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	68da      	ldr	r2, [r3, #12]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80099b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	695a      	ldr	r2, [r3, #20]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f022 0201 	bic.w	r2, r2, #1
 80099c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2220      	movs	r2, #32
 80099c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7f9 f9f4 	bl	8002db8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80099d0:	2300      	movs	r3, #0
 80099d2:	e002      	b.n	80099da <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80099d4:	2300      	movs	r3, #0
 80099d6:	e000      	b.n	80099da <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80099d8:	2302      	movs	r3, #2
  }
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
	...

080099e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e8:	b0bd      	sub	sp, #244	; 0xf4
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80099fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a00:	68d9      	ldr	r1, [r3, #12]
 8009a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	ea40 0301 	orr.w	r3, r0, r1
 8009a0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a12:	689a      	ldr	r2, [r3, #8]
 8009a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a18:	691b      	ldr	r3, [r3, #16]
 8009a1a:	431a      	orrs	r2, r3
 8009a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a20:	695b      	ldr	r3, [r3, #20]
 8009a22:	431a      	orrs	r2, r3
 8009a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a28:	69db      	ldr	r3, [r3, #28]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8009a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009a3c:	f021 010c 	bic.w	r1, r1, #12
 8009a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009a4a:	430b      	orrs	r3, r1
 8009a4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	695b      	ldr	r3, [r3, #20]
 8009a56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a5e:	6999      	ldr	r1, [r3, #24]
 8009a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	ea40 0301 	orr.w	r3, r0, r1
 8009a6a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a70:	69db      	ldr	r3, [r3, #28]
 8009a72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a76:	f040 81a5 	bne.w	8009dc4 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	4bcd      	ldr	r3, [pc, #820]	; (8009db8 <UART_SetConfig+0x3d4>)
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d006      	beq.n	8009a94 <UART_SetConfig+0xb0>
 8009a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	4bcb      	ldr	r3, [pc, #812]	; (8009dbc <UART_SetConfig+0x3d8>)
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	f040 80cb 	bne.w	8009c2a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a94:	f7fd fc72 	bl	800737c <HAL_RCC_GetPCLK2Freq>
 8009a98:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009a9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009aa0:	461c      	mov	r4, r3
 8009aa2:	f04f 0500 	mov.w	r5, #0
 8009aa6:	4622      	mov	r2, r4
 8009aa8:	462b      	mov	r3, r5
 8009aaa:	1891      	adds	r1, r2, r2
 8009aac:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8009ab0:	415b      	adcs	r3, r3
 8009ab2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009ab6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009aba:	1912      	adds	r2, r2, r4
 8009abc:	eb45 0303 	adc.w	r3, r5, r3
 8009ac0:	f04f 0000 	mov.w	r0, #0
 8009ac4:	f04f 0100 	mov.w	r1, #0
 8009ac8:	00d9      	lsls	r1, r3, #3
 8009aca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009ace:	00d0      	lsls	r0, r2, #3
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	1911      	adds	r1, r2, r4
 8009ad6:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8009ada:	416b      	adcs	r3, r5
 8009adc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	f04f 0300 	mov.w	r3, #0
 8009aec:	1891      	adds	r1, r2, r2
 8009aee:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8009af2:	415b      	adcs	r3, r3
 8009af4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009af8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009afc:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8009b00:	f7f7 f87a 	bl	8000bf8 <__aeabi_uldivmod>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	4bad      	ldr	r3, [pc, #692]	; (8009dc0 <UART_SetConfig+0x3dc>)
 8009b0a:	fba3 2302 	umull	r2, r3, r3, r2
 8009b0e:	095b      	lsrs	r3, r3, #5
 8009b10:	011e      	lsls	r6, r3, #4
 8009b12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009b16:	461c      	mov	r4, r3
 8009b18:	f04f 0500 	mov.w	r5, #0
 8009b1c:	4622      	mov	r2, r4
 8009b1e:	462b      	mov	r3, r5
 8009b20:	1891      	adds	r1, r2, r2
 8009b22:	67b9      	str	r1, [r7, #120]	; 0x78
 8009b24:	415b      	adcs	r3, r3
 8009b26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009b28:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009b2c:	1912      	adds	r2, r2, r4
 8009b2e:	eb45 0303 	adc.w	r3, r5, r3
 8009b32:	f04f 0000 	mov.w	r0, #0
 8009b36:	f04f 0100 	mov.w	r1, #0
 8009b3a:	00d9      	lsls	r1, r3, #3
 8009b3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009b40:	00d0      	lsls	r0, r2, #3
 8009b42:	4602      	mov	r2, r0
 8009b44:	460b      	mov	r3, r1
 8009b46:	1911      	adds	r1, r2, r4
 8009b48:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8009b4c:	416b      	adcs	r3, r5
 8009b4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	461a      	mov	r2, r3
 8009b5a:	f04f 0300 	mov.w	r3, #0
 8009b5e:	1891      	adds	r1, r2, r2
 8009b60:	6739      	str	r1, [r7, #112]	; 0x70
 8009b62:	415b      	adcs	r3, r3
 8009b64:	677b      	str	r3, [r7, #116]	; 0x74
 8009b66:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8009b6a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8009b6e:	f7f7 f843 	bl	8000bf8 <__aeabi_uldivmod>
 8009b72:	4602      	mov	r2, r0
 8009b74:	460b      	mov	r3, r1
 8009b76:	4b92      	ldr	r3, [pc, #584]	; (8009dc0 <UART_SetConfig+0x3dc>)
 8009b78:	fba3 1302 	umull	r1, r3, r3, r2
 8009b7c:	095b      	lsrs	r3, r3, #5
 8009b7e:	2164      	movs	r1, #100	; 0x64
 8009b80:	fb01 f303 	mul.w	r3, r1, r3
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	00db      	lsls	r3, r3, #3
 8009b88:	3332      	adds	r3, #50	; 0x32
 8009b8a:	4a8d      	ldr	r2, [pc, #564]	; (8009dc0 <UART_SetConfig+0x3dc>)
 8009b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8009b90:	095b      	lsrs	r3, r3, #5
 8009b92:	005b      	lsls	r3, r3, #1
 8009b94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009b98:	441e      	add	r6, r3
 8009b9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f04f 0100 	mov.w	r1, #0
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	1894      	adds	r4, r2, r2
 8009baa:	66bc      	str	r4, [r7, #104]	; 0x68
 8009bac:	415b      	adcs	r3, r3
 8009bae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009bb0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009bb4:	1812      	adds	r2, r2, r0
 8009bb6:	eb41 0303 	adc.w	r3, r1, r3
 8009bba:	f04f 0400 	mov.w	r4, #0
 8009bbe:	f04f 0500 	mov.w	r5, #0
 8009bc2:	00dd      	lsls	r5, r3, #3
 8009bc4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009bc8:	00d4      	lsls	r4, r2, #3
 8009bca:	4622      	mov	r2, r4
 8009bcc:	462b      	mov	r3, r5
 8009bce:	1814      	adds	r4, r2, r0
 8009bd0:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8009bd4:	414b      	adcs	r3, r1
 8009bd6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	461a      	mov	r2, r3
 8009be2:	f04f 0300 	mov.w	r3, #0
 8009be6:	1891      	adds	r1, r2, r2
 8009be8:	6639      	str	r1, [r7, #96]	; 0x60
 8009bea:	415b      	adcs	r3, r3
 8009bec:	667b      	str	r3, [r7, #100]	; 0x64
 8009bee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009bf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009bf6:	f7f6 ffff 	bl	8000bf8 <__aeabi_uldivmod>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	4b70      	ldr	r3, [pc, #448]	; (8009dc0 <UART_SetConfig+0x3dc>)
 8009c00:	fba3 1302 	umull	r1, r3, r3, r2
 8009c04:	095b      	lsrs	r3, r3, #5
 8009c06:	2164      	movs	r1, #100	; 0x64
 8009c08:	fb01 f303 	mul.w	r3, r1, r3
 8009c0c:	1ad3      	subs	r3, r2, r3
 8009c0e:	00db      	lsls	r3, r3, #3
 8009c10:	3332      	adds	r3, #50	; 0x32
 8009c12:	4a6b      	ldr	r2, [pc, #428]	; (8009dc0 <UART_SetConfig+0x3dc>)
 8009c14:	fba2 2303 	umull	r2, r3, r2, r3
 8009c18:	095b      	lsrs	r3, r3, #5
 8009c1a:	f003 0207 	and.w	r2, r3, #7
 8009c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4432      	add	r2, r6
 8009c26:	609a      	str	r2, [r3, #8]
 8009c28:	e26d      	b.n	800a106 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009c2a:	f7fd fb93 	bl	8007354 <HAL_RCC_GetPCLK1Freq>
 8009c2e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009c36:	461c      	mov	r4, r3
 8009c38:	f04f 0500 	mov.w	r5, #0
 8009c3c:	4622      	mov	r2, r4
 8009c3e:	462b      	mov	r3, r5
 8009c40:	1891      	adds	r1, r2, r2
 8009c42:	65b9      	str	r1, [r7, #88]	; 0x58
 8009c44:	415b      	adcs	r3, r3
 8009c46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c48:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c4c:	1912      	adds	r2, r2, r4
 8009c4e:	eb45 0303 	adc.w	r3, r5, r3
 8009c52:	f04f 0000 	mov.w	r0, #0
 8009c56:	f04f 0100 	mov.w	r1, #0
 8009c5a:	00d9      	lsls	r1, r3, #3
 8009c5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009c60:	00d0      	lsls	r0, r2, #3
 8009c62:	4602      	mov	r2, r0
 8009c64:	460b      	mov	r3, r1
 8009c66:	1911      	adds	r1, r2, r4
 8009c68:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8009c6c:	416b      	adcs	r3, r5
 8009c6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	461a      	mov	r2, r3
 8009c7a:	f04f 0300 	mov.w	r3, #0
 8009c7e:	1891      	adds	r1, r2, r2
 8009c80:	6539      	str	r1, [r7, #80]	; 0x50
 8009c82:	415b      	adcs	r3, r3
 8009c84:	657b      	str	r3, [r7, #84]	; 0x54
 8009c86:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009c8a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8009c8e:	f7f6 ffb3 	bl	8000bf8 <__aeabi_uldivmod>
 8009c92:	4602      	mov	r2, r0
 8009c94:	460b      	mov	r3, r1
 8009c96:	4b4a      	ldr	r3, [pc, #296]	; (8009dc0 <UART_SetConfig+0x3dc>)
 8009c98:	fba3 2302 	umull	r2, r3, r3, r2
 8009c9c:	095b      	lsrs	r3, r3, #5
 8009c9e:	011e      	lsls	r6, r3, #4
 8009ca0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009ca4:	461c      	mov	r4, r3
 8009ca6:	f04f 0500 	mov.w	r5, #0
 8009caa:	4622      	mov	r2, r4
 8009cac:	462b      	mov	r3, r5
 8009cae:	1891      	adds	r1, r2, r2
 8009cb0:	64b9      	str	r1, [r7, #72]	; 0x48
 8009cb2:	415b      	adcs	r3, r3
 8009cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cb6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009cba:	1912      	adds	r2, r2, r4
 8009cbc:	eb45 0303 	adc.w	r3, r5, r3
 8009cc0:	f04f 0000 	mov.w	r0, #0
 8009cc4:	f04f 0100 	mov.w	r1, #0
 8009cc8:	00d9      	lsls	r1, r3, #3
 8009cca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009cce:	00d0      	lsls	r0, r2, #3
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	1911      	adds	r1, r2, r4
 8009cd6:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8009cda:	416b      	adcs	r3, r5
 8009cdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	f04f 0300 	mov.w	r3, #0
 8009cec:	1891      	adds	r1, r2, r2
 8009cee:	6439      	str	r1, [r7, #64]	; 0x40
 8009cf0:	415b      	adcs	r3, r3
 8009cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8009cf4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009cf8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8009cfc:	f7f6 ff7c 	bl	8000bf8 <__aeabi_uldivmod>
 8009d00:	4602      	mov	r2, r0
 8009d02:	460b      	mov	r3, r1
 8009d04:	4b2e      	ldr	r3, [pc, #184]	; (8009dc0 <UART_SetConfig+0x3dc>)
 8009d06:	fba3 1302 	umull	r1, r3, r3, r2
 8009d0a:	095b      	lsrs	r3, r3, #5
 8009d0c:	2164      	movs	r1, #100	; 0x64
 8009d0e:	fb01 f303 	mul.w	r3, r1, r3
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	00db      	lsls	r3, r3, #3
 8009d16:	3332      	adds	r3, #50	; 0x32
 8009d18:	4a29      	ldr	r2, [pc, #164]	; (8009dc0 <UART_SetConfig+0x3dc>)
 8009d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d1e:	095b      	lsrs	r3, r3, #5
 8009d20:	005b      	lsls	r3, r3, #1
 8009d22:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009d26:	441e      	add	r6, r3
 8009d28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f04f 0100 	mov.w	r1, #0
 8009d32:	4602      	mov	r2, r0
 8009d34:	460b      	mov	r3, r1
 8009d36:	1894      	adds	r4, r2, r2
 8009d38:	63bc      	str	r4, [r7, #56]	; 0x38
 8009d3a:	415b      	adcs	r3, r3
 8009d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d3e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009d42:	1812      	adds	r2, r2, r0
 8009d44:	eb41 0303 	adc.w	r3, r1, r3
 8009d48:	f04f 0400 	mov.w	r4, #0
 8009d4c:	f04f 0500 	mov.w	r5, #0
 8009d50:	00dd      	lsls	r5, r3, #3
 8009d52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009d56:	00d4      	lsls	r4, r2, #3
 8009d58:	4622      	mov	r2, r4
 8009d5a:	462b      	mov	r3, r5
 8009d5c:	1814      	adds	r4, r2, r0
 8009d5e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8009d62:	414b      	adcs	r3, r1
 8009d64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	f04f 0300 	mov.w	r3, #0
 8009d74:	1891      	adds	r1, r2, r2
 8009d76:	6339      	str	r1, [r7, #48]	; 0x30
 8009d78:	415b      	adcs	r3, r3
 8009d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8009d7c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009d80:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009d84:	f7f6 ff38 	bl	8000bf8 <__aeabi_uldivmod>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	4b0c      	ldr	r3, [pc, #48]	; (8009dc0 <UART_SetConfig+0x3dc>)
 8009d8e:	fba3 1302 	umull	r1, r3, r3, r2
 8009d92:	095b      	lsrs	r3, r3, #5
 8009d94:	2164      	movs	r1, #100	; 0x64
 8009d96:	fb01 f303 	mul.w	r3, r1, r3
 8009d9a:	1ad3      	subs	r3, r2, r3
 8009d9c:	00db      	lsls	r3, r3, #3
 8009d9e:	3332      	adds	r3, #50	; 0x32
 8009da0:	4a07      	ldr	r2, [pc, #28]	; (8009dc0 <UART_SetConfig+0x3dc>)
 8009da2:	fba2 2303 	umull	r2, r3, r2, r3
 8009da6:	095b      	lsrs	r3, r3, #5
 8009da8:	f003 0207 	and.w	r2, r3, #7
 8009dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4432      	add	r2, r6
 8009db4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009db6:	e1a6      	b.n	800a106 <UART_SetConfig+0x722>
 8009db8:	40011000 	.word	0x40011000
 8009dbc:	40011400 	.word	0x40011400
 8009dc0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	4bd1      	ldr	r3, [pc, #836]	; (800a110 <UART_SetConfig+0x72c>)
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d006      	beq.n	8009dde <UART_SetConfig+0x3fa>
 8009dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	4bcf      	ldr	r3, [pc, #828]	; (800a114 <UART_SetConfig+0x730>)
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	f040 80ca 	bne.w	8009f72 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009dde:	f7fd facd 	bl	800737c <HAL_RCC_GetPCLK2Freq>
 8009de2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009de6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009dea:	461c      	mov	r4, r3
 8009dec:	f04f 0500 	mov.w	r5, #0
 8009df0:	4622      	mov	r2, r4
 8009df2:	462b      	mov	r3, r5
 8009df4:	1891      	adds	r1, r2, r2
 8009df6:	62b9      	str	r1, [r7, #40]	; 0x28
 8009df8:	415b      	adcs	r3, r3
 8009dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009dfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e00:	1912      	adds	r2, r2, r4
 8009e02:	eb45 0303 	adc.w	r3, r5, r3
 8009e06:	f04f 0000 	mov.w	r0, #0
 8009e0a:	f04f 0100 	mov.w	r1, #0
 8009e0e:	00d9      	lsls	r1, r3, #3
 8009e10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009e14:	00d0      	lsls	r0, r2, #3
 8009e16:	4602      	mov	r2, r0
 8009e18:	460b      	mov	r3, r1
 8009e1a:	eb12 0a04 	adds.w	sl, r2, r4
 8009e1e:	eb43 0b05 	adc.w	fp, r3, r5
 8009e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f04f 0100 	mov.w	r1, #0
 8009e2e:	f04f 0200 	mov.w	r2, #0
 8009e32:	f04f 0300 	mov.w	r3, #0
 8009e36:	008b      	lsls	r3, r1, #2
 8009e38:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009e3c:	0082      	lsls	r2, r0, #2
 8009e3e:	4650      	mov	r0, sl
 8009e40:	4659      	mov	r1, fp
 8009e42:	f7f6 fed9 	bl	8000bf8 <__aeabi_uldivmod>
 8009e46:	4602      	mov	r2, r0
 8009e48:	460b      	mov	r3, r1
 8009e4a:	4bb3      	ldr	r3, [pc, #716]	; (800a118 <UART_SetConfig+0x734>)
 8009e4c:	fba3 2302 	umull	r2, r3, r3, r2
 8009e50:	095b      	lsrs	r3, r3, #5
 8009e52:	011e      	lsls	r6, r3, #4
 8009e54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f04f 0100 	mov.w	r1, #0
 8009e5e:	4602      	mov	r2, r0
 8009e60:	460b      	mov	r3, r1
 8009e62:	1894      	adds	r4, r2, r2
 8009e64:	623c      	str	r4, [r7, #32]
 8009e66:	415b      	adcs	r3, r3
 8009e68:	627b      	str	r3, [r7, #36]	; 0x24
 8009e6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e6e:	1812      	adds	r2, r2, r0
 8009e70:	eb41 0303 	adc.w	r3, r1, r3
 8009e74:	f04f 0400 	mov.w	r4, #0
 8009e78:	f04f 0500 	mov.w	r5, #0
 8009e7c:	00dd      	lsls	r5, r3, #3
 8009e7e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009e82:	00d4      	lsls	r4, r2, #3
 8009e84:	4622      	mov	r2, r4
 8009e86:	462b      	mov	r3, r5
 8009e88:	1814      	adds	r4, r2, r0
 8009e8a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8009e8e:	414b      	adcs	r3, r1
 8009e90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f04f 0100 	mov.w	r1, #0
 8009ea0:	f04f 0200 	mov.w	r2, #0
 8009ea4:	f04f 0300 	mov.w	r3, #0
 8009ea8:	008b      	lsls	r3, r1, #2
 8009eaa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009eae:	0082      	lsls	r2, r0, #2
 8009eb0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009eb4:	f7f6 fea0 	bl	8000bf8 <__aeabi_uldivmod>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	460b      	mov	r3, r1
 8009ebc:	4b96      	ldr	r3, [pc, #600]	; (800a118 <UART_SetConfig+0x734>)
 8009ebe:	fba3 1302 	umull	r1, r3, r3, r2
 8009ec2:	095b      	lsrs	r3, r3, #5
 8009ec4:	2164      	movs	r1, #100	; 0x64
 8009ec6:	fb01 f303 	mul.w	r3, r1, r3
 8009eca:	1ad3      	subs	r3, r2, r3
 8009ecc:	011b      	lsls	r3, r3, #4
 8009ece:	3332      	adds	r3, #50	; 0x32
 8009ed0:	4a91      	ldr	r2, [pc, #580]	; (800a118 <UART_SetConfig+0x734>)
 8009ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ed6:	095b      	lsrs	r3, r3, #5
 8009ed8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009edc:	441e      	add	r6, r3
 8009ede:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f04f 0100 	mov.w	r1, #0
 8009ee8:	4602      	mov	r2, r0
 8009eea:	460b      	mov	r3, r1
 8009eec:	1894      	adds	r4, r2, r2
 8009eee:	61bc      	str	r4, [r7, #24]
 8009ef0:	415b      	adcs	r3, r3
 8009ef2:	61fb      	str	r3, [r7, #28]
 8009ef4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ef8:	1812      	adds	r2, r2, r0
 8009efa:	eb41 0303 	adc.w	r3, r1, r3
 8009efe:	f04f 0400 	mov.w	r4, #0
 8009f02:	f04f 0500 	mov.w	r5, #0
 8009f06:	00dd      	lsls	r5, r3, #3
 8009f08:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009f0c:	00d4      	lsls	r4, r2, #3
 8009f0e:	4622      	mov	r2, r4
 8009f10:	462b      	mov	r3, r5
 8009f12:	1814      	adds	r4, r2, r0
 8009f14:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8009f18:	414b      	adcs	r3, r1
 8009f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	4618      	mov	r0, r3
 8009f26:	f04f 0100 	mov.w	r1, #0
 8009f2a:	f04f 0200 	mov.w	r2, #0
 8009f2e:	f04f 0300 	mov.w	r3, #0
 8009f32:	008b      	lsls	r3, r1, #2
 8009f34:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009f38:	0082      	lsls	r2, r0, #2
 8009f3a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009f3e:	f7f6 fe5b 	bl	8000bf8 <__aeabi_uldivmod>
 8009f42:	4602      	mov	r2, r0
 8009f44:	460b      	mov	r3, r1
 8009f46:	4b74      	ldr	r3, [pc, #464]	; (800a118 <UART_SetConfig+0x734>)
 8009f48:	fba3 1302 	umull	r1, r3, r3, r2
 8009f4c:	095b      	lsrs	r3, r3, #5
 8009f4e:	2164      	movs	r1, #100	; 0x64
 8009f50:	fb01 f303 	mul.w	r3, r1, r3
 8009f54:	1ad3      	subs	r3, r2, r3
 8009f56:	011b      	lsls	r3, r3, #4
 8009f58:	3332      	adds	r3, #50	; 0x32
 8009f5a:	4a6f      	ldr	r2, [pc, #444]	; (800a118 <UART_SetConfig+0x734>)
 8009f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f60:	095b      	lsrs	r3, r3, #5
 8009f62:	f003 020f 	and.w	r2, r3, #15
 8009f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4432      	add	r2, r6
 8009f6e:	609a      	str	r2, [r3, #8]
 8009f70:	e0c9      	b.n	800a106 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009f72:	f7fd f9ef 	bl	8007354 <HAL_RCC_GetPCLK1Freq>
 8009f76:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009f7e:	461c      	mov	r4, r3
 8009f80:	f04f 0500 	mov.w	r5, #0
 8009f84:	4622      	mov	r2, r4
 8009f86:	462b      	mov	r3, r5
 8009f88:	1891      	adds	r1, r2, r2
 8009f8a:	6139      	str	r1, [r7, #16]
 8009f8c:	415b      	adcs	r3, r3
 8009f8e:	617b      	str	r3, [r7, #20]
 8009f90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009f94:	1912      	adds	r2, r2, r4
 8009f96:	eb45 0303 	adc.w	r3, r5, r3
 8009f9a:	f04f 0000 	mov.w	r0, #0
 8009f9e:	f04f 0100 	mov.w	r1, #0
 8009fa2:	00d9      	lsls	r1, r3, #3
 8009fa4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009fa8:	00d0      	lsls	r0, r2, #3
 8009faa:	4602      	mov	r2, r0
 8009fac:	460b      	mov	r3, r1
 8009fae:	eb12 0804 	adds.w	r8, r2, r4
 8009fb2:	eb43 0905 	adc.w	r9, r3, r5
 8009fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f04f 0100 	mov.w	r1, #0
 8009fc2:	f04f 0200 	mov.w	r2, #0
 8009fc6:	f04f 0300 	mov.w	r3, #0
 8009fca:	008b      	lsls	r3, r1, #2
 8009fcc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009fd0:	0082      	lsls	r2, r0, #2
 8009fd2:	4640      	mov	r0, r8
 8009fd4:	4649      	mov	r1, r9
 8009fd6:	f7f6 fe0f 	bl	8000bf8 <__aeabi_uldivmod>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	460b      	mov	r3, r1
 8009fde:	4b4e      	ldr	r3, [pc, #312]	; (800a118 <UART_SetConfig+0x734>)
 8009fe0:	fba3 2302 	umull	r2, r3, r3, r2
 8009fe4:	095b      	lsrs	r3, r3, #5
 8009fe6:	011e      	lsls	r6, r3, #4
 8009fe8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009fec:	4618      	mov	r0, r3
 8009fee:	f04f 0100 	mov.w	r1, #0
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	1894      	adds	r4, r2, r2
 8009ff8:	60bc      	str	r4, [r7, #8]
 8009ffa:	415b      	adcs	r3, r3
 8009ffc:	60fb      	str	r3, [r7, #12]
 8009ffe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a002:	1812      	adds	r2, r2, r0
 800a004:	eb41 0303 	adc.w	r3, r1, r3
 800a008:	f04f 0400 	mov.w	r4, #0
 800a00c:	f04f 0500 	mov.w	r5, #0
 800a010:	00dd      	lsls	r5, r3, #3
 800a012:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a016:	00d4      	lsls	r4, r2, #3
 800a018:	4622      	mov	r2, r4
 800a01a:	462b      	mov	r3, r5
 800a01c:	1814      	adds	r4, r2, r0
 800a01e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800a022:	414b      	adcs	r3, r1
 800a024:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	4618      	mov	r0, r3
 800a030:	f04f 0100 	mov.w	r1, #0
 800a034:	f04f 0200 	mov.w	r2, #0
 800a038:	f04f 0300 	mov.w	r3, #0
 800a03c:	008b      	lsls	r3, r1, #2
 800a03e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a042:	0082      	lsls	r2, r0, #2
 800a044:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a048:	f7f6 fdd6 	bl	8000bf8 <__aeabi_uldivmod>
 800a04c:	4602      	mov	r2, r0
 800a04e:	460b      	mov	r3, r1
 800a050:	4b31      	ldr	r3, [pc, #196]	; (800a118 <UART_SetConfig+0x734>)
 800a052:	fba3 1302 	umull	r1, r3, r3, r2
 800a056:	095b      	lsrs	r3, r3, #5
 800a058:	2164      	movs	r1, #100	; 0x64
 800a05a:	fb01 f303 	mul.w	r3, r1, r3
 800a05e:	1ad3      	subs	r3, r2, r3
 800a060:	011b      	lsls	r3, r3, #4
 800a062:	3332      	adds	r3, #50	; 0x32
 800a064:	4a2c      	ldr	r2, [pc, #176]	; (800a118 <UART_SetConfig+0x734>)
 800a066:	fba2 2303 	umull	r2, r3, r2, r3
 800a06a:	095b      	lsrs	r3, r3, #5
 800a06c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a070:	441e      	add	r6, r3
 800a072:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a076:	4618      	mov	r0, r3
 800a078:	f04f 0100 	mov.w	r1, #0
 800a07c:	4602      	mov	r2, r0
 800a07e:	460b      	mov	r3, r1
 800a080:	1894      	adds	r4, r2, r2
 800a082:	603c      	str	r4, [r7, #0]
 800a084:	415b      	adcs	r3, r3
 800a086:	607b      	str	r3, [r7, #4]
 800a088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a08c:	1812      	adds	r2, r2, r0
 800a08e:	eb41 0303 	adc.w	r3, r1, r3
 800a092:	f04f 0400 	mov.w	r4, #0
 800a096:	f04f 0500 	mov.w	r5, #0
 800a09a:	00dd      	lsls	r5, r3, #3
 800a09c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a0a0:	00d4      	lsls	r4, r2, #3
 800a0a2:	4622      	mov	r2, r4
 800a0a4:	462b      	mov	r3, r5
 800a0a6:	1814      	adds	r4, r2, r0
 800a0a8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800a0ac:	414b      	adcs	r3, r1
 800a0ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a0b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f04f 0100 	mov.w	r1, #0
 800a0be:	f04f 0200 	mov.w	r2, #0
 800a0c2:	f04f 0300 	mov.w	r3, #0
 800a0c6:	008b      	lsls	r3, r1, #2
 800a0c8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a0cc:	0082      	lsls	r2, r0, #2
 800a0ce:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800a0d2:	f7f6 fd91 	bl	8000bf8 <__aeabi_uldivmod>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	460b      	mov	r3, r1
 800a0da:	4b0f      	ldr	r3, [pc, #60]	; (800a118 <UART_SetConfig+0x734>)
 800a0dc:	fba3 1302 	umull	r1, r3, r3, r2
 800a0e0:	095b      	lsrs	r3, r3, #5
 800a0e2:	2164      	movs	r1, #100	; 0x64
 800a0e4:	fb01 f303 	mul.w	r3, r1, r3
 800a0e8:	1ad3      	subs	r3, r2, r3
 800a0ea:	011b      	lsls	r3, r3, #4
 800a0ec:	3332      	adds	r3, #50	; 0x32
 800a0ee:	4a0a      	ldr	r2, [pc, #40]	; (800a118 <UART_SetConfig+0x734>)
 800a0f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a0f4:	095b      	lsrs	r3, r3, #5
 800a0f6:	f003 020f 	and.w	r2, r3, #15
 800a0fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4432      	add	r2, r6
 800a102:	609a      	str	r2, [r3, #8]
}
 800a104:	e7ff      	b.n	800a106 <UART_SetConfig+0x722>
 800a106:	bf00      	nop
 800a108:	37f4      	adds	r7, #244	; 0xf4
 800a10a:	46bd      	mov	sp, r7
 800a10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a110:	40011000 	.word	0x40011000
 800a114:	40011400 	.word	0x40011400
 800a118:	51eb851f 	.word	0x51eb851f

0800a11c <__errno>:
 800a11c:	4b01      	ldr	r3, [pc, #4]	; (800a124 <__errno+0x8>)
 800a11e:	6818      	ldr	r0, [r3, #0]
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	20000138 	.word	0x20000138

0800a128 <__libc_init_array>:
 800a128:	b570      	push	{r4, r5, r6, lr}
 800a12a:	4d0d      	ldr	r5, [pc, #52]	; (800a160 <__libc_init_array+0x38>)
 800a12c:	4c0d      	ldr	r4, [pc, #52]	; (800a164 <__libc_init_array+0x3c>)
 800a12e:	1b64      	subs	r4, r4, r5
 800a130:	10a4      	asrs	r4, r4, #2
 800a132:	2600      	movs	r6, #0
 800a134:	42a6      	cmp	r6, r4
 800a136:	d109      	bne.n	800a14c <__libc_init_array+0x24>
 800a138:	4d0b      	ldr	r5, [pc, #44]	; (800a168 <__libc_init_array+0x40>)
 800a13a:	4c0c      	ldr	r4, [pc, #48]	; (800a16c <__libc_init_array+0x44>)
 800a13c:	f002 fd0e 	bl	800cb5c <_init>
 800a140:	1b64      	subs	r4, r4, r5
 800a142:	10a4      	asrs	r4, r4, #2
 800a144:	2600      	movs	r6, #0
 800a146:	42a6      	cmp	r6, r4
 800a148:	d105      	bne.n	800a156 <__libc_init_array+0x2e>
 800a14a:	bd70      	pop	{r4, r5, r6, pc}
 800a14c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a150:	4798      	blx	r3
 800a152:	3601      	adds	r6, #1
 800a154:	e7ee      	b.n	800a134 <__libc_init_array+0xc>
 800a156:	f855 3b04 	ldr.w	r3, [r5], #4
 800a15a:	4798      	blx	r3
 800a15c:	3601      	adds	r6, #1
 800a15e:	e7f2      	b.n	800a146 <__libc_init_array+0x1e>
 800a160:	0800ce48 	.word	0x0800ce48
 800a164:	0800ce48 	.word	0x0800ce48
 800a168:	0800ce48 	.word	0x0800ce48
 800a16c:	0800ce4c 	.word	0x0800ce4c

0800a170 <memset>:
 800a170:	4402      	add	r2, r0
 800a172:	4603      	mov	r3, r0
 800a174:	4293      	cmp	r3, r2
 800a176:	d100      	bne.n	800a17a <memset+0xa>
 800a178:	4770      	bx	lr
 800a17a:	f803 1b01 	strb.w	r1, [r3], #1
 800a17e:	e7f9      	b.n	800a174 <memset+0x4>

0800a180 <atan>:
 800a180:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a184:	ec55 4b10 	vmov	r4, r5, d0
 800a188:	4bc3      	ldr	r3, [pc, #780]	; (800a498 <atan+0x318>)
 800a18a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a18e:	429e      	cmp	r6, r3
 800a190:	46ab      	mov	fp, r5
 800a192:	dd18      	ble.n	800a1c6 <atan+0x46>
 800a194:	4bc1      	ldr	r3, [pc, #772]	; (800a49c <atan+0x31c>)
 800a196:	429e      	cmp	r6, r3
 800a198:	dc01      	bgt.n	800a19e <atan+0x1e>
 800a19a:	d109      	bne.n	800a1b0 <atan+0x30>
 800a19c:	b144      	cbz	r4, 800a1b0 <atan+0x30>
 800a19e:	4622      	mov	r2, r4
 800a1a0:	462b      	mov	r3, r5
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	4629      	mov	r1, r5
 800a1a6:	f7f6 f829 	bl	80001fc <__adddf3>
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	460d      	mov	r5, r1
 800a1ae:	e006      	b.n	800a1be <atan+0x3e>
 800a1b0:	f1bb 0f00 	cmp.w	fp, #0
 800a1b4:	f300 8131 	bgt.w	800a41a <atan+0x29a>
 800a1b8:	a59b      	add	r5, pc, #620	; (adr r5, 800a428 <atan+0x2a8>)
 800a1ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a1be:	ec45 4b10 	vmov	d0, r4, r5
 800a1c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c6:	4bb6      	ldr	r3, [pc, #728]	; (800a4a0 <atan+0x320>)
 800a1c8:	429e      	cmp	r6, r3
 800a1ca:	dc14      	bgt.n	800a1f6 <atan+0x76>
 800a1cc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a1d0:	429e      	cmp	r6, r3
 800a1d2:	dc0d      	bgt.n	800a1f0 <atan+0x70>
 800a1d4:	a396      	add	r3, pc, #600	; (adr r3, 800a430 <atan+0x2b0>)
 800a1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1da:	ee10 0a10 	vmov	r0, s0
 800a1de:	4629      	mov	r1, r5
 800a1e0:	f7f6 f80c 	bl	80001fc <__adddf3>
 800a1e4:	4baf      	ldr	r3, [pc, #700]	; (800a4a4 <atan+0x324>)
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f7f6 fc4e 	bl	8000a88 <__aeabi_dcmpgt>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	d1e6      	bne.n	800a1be <atan+0x3e>
 800a1f0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a1f4:	e02b      	b.n	800a24e <atan+0xce>
 800a1f6:	f000 f9b3 	bl	800a560 <fabs>
 800a1fa:	4bab      	ldr	r3, [pc, #684]	; (800a4a8 <atan+0x328>)
 800a1fc:	429e      	cmp	r6, r3
 800a1fe:	ec55 4b10 	vmov	r4, r5, d0
 800a202:	f300 80bf 	bgt.w	800a384 <atan+0x204>
 800a206:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a20a:	429e      	cmp	r6, r3
 800a20c:	f300 80a0 	bgt.w	800a350 <atan+0x1d0>
 800a210:	ee10 2a10 	vmov	r2, s0
 800a214:	ee10 0a10 	vmov	r0, s0
 800a218:	462b      	mov	r3, r5
 800a21a:	4629      	mov	r1, r5
 800a21c:	f7f5 ffee 	bl	80001fc <__adddf3>
 800a220:	4ba0      	ldr	r3, [pc, #640]	; (800a4a4 <atan+0x324>)
 800a222:	2200      	movs	r2, #0
 800a224:	f7f5 ffe8 	bl	80001f8 <__aeabi_dsub>
 800a228:	2200      	movs	r2, #0
 800a22a:	4606      	mov	r6, r0
 800a22c:	460f      	mov	r7, r1
 800a22e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a232:	4620      	mov	r0, r4
 800a234:	4629      	mov	r1, r5
 800a236:	f7f5 ffe1 	bl	80001fc <__adddf3>
 800a23a:	4602      	mov	r2, r0
 800a23c:	460b      	mov	r3, r1
 800a23e:	4630      	mov	r0, r6
 800a240:	4639      	mov	r1, r7
 800a242:	f7f6 fabb 	bl	80007bc <__aeabi_ddiv>
 800a246:	f04f 0a00 	mov.w	sl, #0
 800a24a:	4604      	mov	r4, r0
 800a24c:	460d      	mov	r5, r1
 800a24e:	4622      	mov	r2, r4
 800a250:	462b      	mov	r3, r5
 800a252:	4620      	mov	r0, r4
 800a254:	4629      	mov	r1, r5
 800a256:	f7f6 f987 	bl	8000568 <__aeabi_dmul>
 800a25a:	4602      	mov	r2, r0
 800a25c:	460b      	mov	r3, r1
 800a25e:	4680      	mov	r8, r0
 800a260:	4689      	mov	r9, r1
 800a262:	f7f6 f981 	bl	8000568 <__aeabi_dmul>
 800a266:	a374      	add	r3, pc, #464	; (adr r3, 800a438 <atan+0x2b8>)
 800a268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26c:	4606      	mov	r6, r0
 800a26e:	460f      	mov	r7, r1
 800a270:	f7f6 f97a 	bl	8000568 <__aeabi_dmul>
 800a274:	a372      	add	r3, pc, #456	; (adr r3, 800a440 <atan+0x2c0>)
 800a276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27a:	f7f5 ffbf 	bl	80001fc <__adddf3>
 800a27e:	4632      	mov	r2, r6
 800a280:	463b      	mov	r3, r7
 800a282:	f7f6 f971 	bl	8000568 <__aeabi_dmul>
 800a286:	a370      	add	r3, pc, #448	; (adr r3, 800a448 <atan+0x2c8>)
 800a288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28c:	f7f5 ffb6 	bl	80001fc <__adddf3>
 800a290:	4632      	mov	r2, r6
 800a292:	463b      	mov	r3, r7
 800a294:	f7f6 f968 	bl	8000568 <__aeabi_dmul>
 800a298:	a36d      	add	r3, pc, #436	; (adr r3, 800a450 <atan+0x2d0>)
 800a29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29e:	f7f5 ffad 	bl	80001fc <__adddf3>
 800a2a2:	4632      	mov	r2, r6
 800a2a4:	463b      	mov	r3, r7
 800a2a6:	f7f6 f95f 	bl	8000568 <__aeabi_dmul>
 800a2aa:	a36b      	add	r3, pc, #428	; (adr r3, 800a458 <atan+0x2d8>)
 800a2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b0:	f7f5 ffa4 	bl	80001fc <__adddf3>
 800a2b4:	4632      	mov	r2, r6
 800a2b6:	463b      	mov	r3, r7
 800a2b8:	f7f6 f956 	bl	8000568 <__aeabi_dmul>
 800a2bc:	a368      	add	r3, pc, #416	; (adr r3, 800a460 <atan+0x2e0>)
 800a2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c2:	f7f5 ff9b 	bl	80001fc <__adddf3>
 800a2c6:	4642      	mov	r2, r8
 800a2c8:	464b      	mov	r3, r9
 800a2ca:	f7f6 f94d 	bl	8000568 <__aeabi_dmul>
 800a2ce:	a366      	add	r3, pc, #408	; (adr r3, 800a468 <atan+0x2e8>)
 800a2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d4:	4680      	mov	r8, r0
 800a2d6:	4689      	mov	r9, r1
 800a2d8:	4630      	mov	r0, r6
 800a2da:	4639      	mov	r1, r7
 800a2dc:	f7f6 f944 	bl	8000568 <__aeabi_dmul>
 800a2e0:	a363      	add	r3, pc, #396	; (adr r3, 800a470 <atan+0x2f0>)
 800a2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e6:	f7f5 ff87 	bl	80001f8 <__aeabi_dsub>
 800a2ea:	4632      	mov	r2, r6
 800a2ec:	463b      	mov	r3, r7
 800a2ee:	f7f6 f93b 	bl	8000568 <__aeabi_dmul>
 800a2f2:	a361      	add	r3, pc, #388	; (adr r3, 800a478 <atan+0x2f8>)
 800a2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f8:	f7f5 ff7e 	bl	80001f8 <__aeabi_dsub>
 800a2fc:	4632      	mov	r2, r6
 800a2fe:	463b      	mov	r3, r7
 800a300:	f7f6 f932 	bl	8000568 <__aeabi_dmul>
 800a304:	a35e      	add	r3, pc, #376	; (adr r3, 800a480 <atan+0x300>)
 800a306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30a:	f7f5 ff75 	bl	80001f8 <__aeabi_dsub>
 800a30e:	4632      	mov	r2, r6
 800a310:	463b      	mov	r3, r7
 800a312:	f7f6 f929 	bl	8000568 <__aeabi_dmul>
 800a316:	a35c      	add	r3, pc, #368	; (adr r3, 800a488 <atan+0x308>)
 800a318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31c:	f7f5 ff6c 	bl	80001f8 <__aeabi_dsub>
 800a320:	4632      	mov	r2, r6
 800a322:	463b      	mov	r3, r7
 800a324:	f7f6 f920 	bl	8000568 <__aeabi_dmul>
 800a328:	4602      	mov	r2, r0
 800a32a:	460b      	mov	r3, r1
 800a32c:	4640      	mov	r0, r8
 800a32e:	4649      	mov	r1, r9
 800a330:	f7f5 ff64 	bl	80001fc <__adddf3>
 800a334:	4622      	mov	r2, r4
 800a336:	462b      	mov	r3, r5
 800a338:	f7f6 f916 	bl	8000568 <__aeabi_dmul>
 800a33c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800a340:	4602      	mov	r2, r0
 800a342:	460b      	mov	r3, r1
 800a344:	d14b      	bne.n	800a3de <atan+0x25e>
 800a346:	4620      	mov	r0, r4
 800a348:	4629      	mov	r1, r5
 800a34a:	f7f5 ff55 	bl	80001f8 <__aeabi_dsub>
 800a34e:	e72c      	b.n	800a1aa <atan+0x2a>
 800a350:	ee10 0a10 	vmov	r0, s0
 800a354:	4b53      	ldr	r3, [pc, #332]	; (800a4a4 <atan+0x324>)
 800a356:	2200      	movs	r2, #0
 800a358:	4629      	mov	r1, r5
 800a35a:	f7f5 ff4d 	bl	80001f8 <__aeabi_dsub>
 800a35e:	4b51      	ldr	r3, [pc, #324]	; (800a4a4 <atan+0x324>)
 800a360:	4606      	mov	r6, r0
 800a362:	460f      	mov	r7, r1
 800a364:	2200      	movs	r2, #0
 800a366:	4620      	mov	r0, r4
 800a368:	4629      	mov	r1, r5
 800a36a:	f7f5 ff47 	bl	80001fc <__adddf3>
 800a36e:	4602      	mov	r2, r0
 800a370:	460b      	mov	r3, r1
 800a372:	4630      	mov	r0, r6
 800a374:	4639      	mov	r1, r7
 800a376:	f7f6 fa21 	bl	80007bc <__aeabi_ddiv>
 800a37a:	f04f 0a01 	mov.w	sl, #1
 800a37e:	4604      	mov	r4, r0
 800a380:	460d      	mov	r5, r1
 800a382:	e764      	b.n	800a24e <atan+0xce>
 800a384:	4b49      	ldr	r3, [pc, #292]	; (800a4ac <atan+0x32c>)
 800a386:	429e      	cmp	r6, r3
 800a388:	da1d      	bge.n	800a3c6 <atan+0x246>
 800a38a:	ee10 0a10 	vmov	r0, s0
 800a38e:	4b48      	ldr	r3, [pc, #288]	; (800a4b0 <atan+0x330>)
 800a390:	2200      	movs	r2, #0
 800a392:	4629      	mov	r1, r5
 800a394:	f7f5 ff30 	bl	80001f8 <__aeabi_dsub>
 800a398:	4b45      	ldr	r3, [pc, #276]	; (800a4b0 <atan+0x330>)
 800a39a:	4606      	mov	r6, r0
 800a39c:	460f      	mov	r7, r1
 800a39e:	2200      	movs	r2, #0
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	4629      	mov	r1, r5
 800a3a4:	f7f6 f8e0 	bl	8000568 <__aeabi_dmul>
 800a3a8:	4b3e      	ldr	r3, [pc, #248]	; (800a4a4 <atan+0x324>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f7f5 ff26 	bl	80001fc <__adddf3>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	4630      	mov	r0, r6
 800a3b6:	4639      	mov	r1, r7
 800a3b8:	f7f6 fa00 	bl	80007bc <__aeabi_ddiv>
 800a3bc:	f04f 0a02 	mov.w	sl, #2
 800a3c0:	4604      	mov	r4, r0
 800a3c2:	460d      	mov	r5, r1
 800a3c4:	e743      	b.n	800a24e <atan+0xce>
 800a3c6:	462b      	mov	r3, r5
 800a3c8:	ee10 2a10 	vmov	r2, s0
 800a3cc:	4939      	ldr	r1, [pc, #228]	; (800a4b4 <atan+0x334>)
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	f7f6 f9f4 	bl	80007bc <__aeabi_ddiv>
 800a3d4:	f04f 0a03 	mov.w	sl, #3
 800a3d8:	4604      	mov	r4, r0
 800a3da:	460d      	mov	r5, r1
 800a3dc:	e737      	b.n	800a24e <atan+0xce>
 800a3de:	4b36      	ldr	r3, [pc, #216]	; (800a4b8 <atan+0x338>)
 800a3e0:	4e36      	ldr	r6, [pc, #216]	; (800a4bc <atan+0x33c>)
 800a3e2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a3e6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800a3ea:	e9da 2300 	ldrd	r2, r3, [sl]
 800a3ee:	f7f5 ff03 	bl	80001f8 <__aeabi_dsub>
 800a3f2:	4622      	mov	r2, r4
 800a3f4:	462b      	mov	r3, r5
 800a3f6:	f7f5 feff 	bl	80001f8 <__aeabi_dsub>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a402:	f7f5 fef9 	bl	80001f8 <__aeabi_dsub>
 800a406:	f1bb 0f00 	cmp.w	fp, #0
 800a40a:	4604      	mov	r4, r0
 800a40c:	460d      	mov	r5, r1
 800a40e:	f6bf aed6 	bge.w	800a1be <atan+0x3e>
 800a412:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a416:	461d      	mov	r5, r3
 800a418:	e6d1      	b.n	800a1be <atan+0x3e>
 800a41a:	a51d      	add	r5, pc, #116	; (adr r5, 800a490 <atan+0x310>)
 800a41c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a420:	e6cd      	b.n	800a1be <atan+0x3e>
 800a422:	bf00      	nop
 800a424:	f3af 8000 	nop.w
 800a428:	54442d18 	.word	0x54442d18
 800a42c:	bff921fb 	.word	0xbff921fb
 800a430:	8800759c 	.word	0x8800759c
 800a434:	7e37e43c 	.word	0x7e37e43c
 800a438:	e322da11 	.word	0xe322da11
 800a43c:	3f90ad3a 	.word	0x3f90ad3a
 800a440:	24760deb 	.word	0x24760deb
 800a444:	3fa97b4b 	.word	0x3fa97b4b
 800a448:	a0d03d51 	.word	0xa0d03d51
 800a44c:	3fb10d66 	.word	0x3fb10d66
 800a450:	c54c206e 	.word	0xc54c206e
 800a454:	3fb745cd 	.word	0x3fb745cd
 800a458:	920083ff 	.word	0x920083ff
 800a45c:	3fc24924 	.word	0x3fc24924
 800a460:	5555550d 	.word	0x5555550d
 800a464:	3fd55555 	.word	0x3fd55555
 800a468:	2c6a6c2f 	.word	0x2c6a6c2f
 800a46c:	bfa2b444 	.word	0xbfa2b444
 800a470:	52defd9a 	.word	0x52defd9a
 800a474:	3fadde2d 	.word	0x3fadde2d
 800a478:	af749a6d 	.word	0xaf749a6d
 800a47c:	3fb3b0f2 	.word	0x3fb3b0f2
 800a480:	fe231671 	.word	0xfe231671
 800a484:	3fbc71c6 	.word	0x3fbc71c6
 800a488:	9998ebc4 	.word	0x9998ebc4
 800a48c:	3fc99999 	.word	0x3fc99999
 800a490:	54442d18 	.word	0x54442d18
 800a494:	3ff921fb 	.word	0x3ff921fb
 800a498:	440fffff 	.word	0x440fffff
 800a49c:	7ff00000 	.word	0x7ff00000
 800a4a0:	3fdbffff 	.word	0x3fdbffff
 800a4a4:	3ff00000 	.word	0x3ff00000
 800a4a8:	3ff2ffff 	.word	0x3ff2ffff
 800a4ac:	40038000 	.word	0x40038000
 800a4b0:	3ff80000 	.word	0x3ff80000
 800a4b4:	bff00000 	.word	0xbff00000
 800a4b8:	0800cbd0 	.word	0x0800cbd0
 800a4bc:	0800cbb0 	.word	0x0800cbb0

0800a4c0 <cos>:
 800a4c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4c2:	ec53 2b10 	vmov	r2, r3, d0
 800a4c6:	4824      	ldr	r0, [pc, #144]	; (800a558 <cos+0x98>)
 800a4c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a4cc:	4281      	cmp	r1, r0
 800a4ce:	dc06      	bgt.n	800a4de <cos+0x1e>
 800a4d0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800a550 <cos+0x90>
 800a4d4:	f001 fcd4 	bl	800be80 <__kernel_cos>
 800a4d8:	ec51 0b10 	vmov	r0, r1, d0
 800a4dc:	e007      	b.n	800a4ee <cos+0x2e>
 800a4de:	481f      	ldr	r0, [pc, #124]	; (800a55c <cos+0x9c>)
 800a4e0:	4281      	cmp	r1, r0
 800a4e2:	dd09      	ble.n	800a4f8 <cos+0x38>
 800a4e4:	ee10 0a10 	vmov	r0, s0
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	f7f5 fe85 	bl	80001f8 <__aeabi_dsub>
 800a4ee:	ec41 0b10 	vmov	d0, r0, r1
 800a4f2:	b005      	add	sp, #20
 800a4f4:	f85d fb04 	ldr.w	pc, [sp], #4
 800a4f8:	4668      	mov	r0, sp
 800a4fa:	f001 fa01 	bl	800b900 <__ieee754_rem_pio2>
 800a4fe:	f000 0003 	and.w	r0, r0, #3
 800a502:	2801      	cmp	r0, #1
 800a504:	d007      	beq.n	800a516 <cos+0x56>
 800a506:	2802      	cmp	r0, #2
 800a508:	d012      	beq.n	800a530 <cos+0x70>
 800a50a:	b9c0      	cbnz	r0, 800a53e <cos+0x7e>
 800a50c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a510:	ed9d 0b00 	vldr	d0, [sp]
 800a514:	e7de      	b.n	800a4d4 <cos+0x14>
 800a516:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a51a:	ed9d 0b00 	vldr	d0, [sp]
 800a51e:	f002 f8b7 	bl	800c690 <__kernel_sin>
 800a522:	ec53 2b10 	vmov	r2, r3, d0
 800a526:	ee10 0a10 	vmov	r0, s0
 800a52a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a52e:	e7de      	b.n	800a4ee <cos+0x2e>
 800a530:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a534:	ed9d 0b00 	vldr	d0, [sp]
 800a538:	f001 fca2 	bl	800be80 <__kernel_cos>
 800a53c:	e7f1      	b.n	800a522 <cos+0x62>
 800a53e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a542:	ed9d 0b00 	vldr	d0, [sp]
 800a546:	2001      	movs	r0, #1
 800a548:	f002 f8a2 	bl	800c690 <__kernel_sin>
 800a54c:	e7c4      	b.n	800a4d8 <cos+0x18>
 800a54e:	bf00      	nop
	...
 800a558:	3fe921fb 	.word	0x3fe921fb
 800a55c:	7fefffff 	.word	0x7fefffff

0800a560 <fabs>:
 800a560:	ec51 0b10 	vmov	r0, r1, d0
 800a564:	ee10 2a10 	vmov	r2, s0
 800a568:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a56c:	ec43 2b10 	vmov	d0, r2, r3
 800a570:	4770      	bx	lr
 800a572:	0000      	movs	r0, r0
 800a574:	0000      	movs	r0, r0
	...

0800a578 <sin>:
 800a578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a57a:	ec53 2b10 	vmov	r2, r3, d0
 800a57e:	4826      	ldr	r0, [pc, #152]	; (800a618 <sin+0xa0>)
 800a580:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a584:	4281      	cmp	r1, r0
 800a586:	dc07      	bgt.n	800a598 <sin+0x20>
 800a588:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a610 <sin+0x98>
 800a58c:	2000      	movs	r0, #0
 800a58e:	f002 f87f 	bl	800c690 <__kernel_sin>
 800a592:	ec51 0b10 	vmov	r0, r1, d0
 800a596:	e007      	b.n	800a5a8 <sin+0x30>
 800a598:	4820      	ldr	r0, [pc, #128]	; (800a61c <sin+0xa4>)
 800a59a:	4281      	cmp	r1, r0
 800a59c:	dd09      	ble.n	800a5b2 <sin+0x3a>
 800a59e:	ee10 0a10 	vmov	r0, s0
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	f7f5 fe28 	bl	80001f8 <__aeabi_dsub>
 800a5a8:	ec41 0b10 	vmov	d0, r0, r1
 800a5ac:	b005      	add	sp, #20
 800a5ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800a5b2:	4668      	mov	r0, sp
 800a5b4:	f001 f9a4 	bl	800b900 <__ieee754_rem_pio2>
 800a5b8:	f000 0003 	and.w	r0, r0, #3
 800a5bc:	2801      	cmp	r0, #1
 800a5be:	d008      	beq.n	800a5d2 <sin+0x5a>
 800a5c0:	2802      	cmp	r0, #2
 800a5c2:	d00d      	beq.n	800a5e0 <sin+0x68>
 800a5c4:	b9d0      	cbnz	r0, 800a5fc <sin+0x84>
 800a5c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5ca:	ed9d 0b00 	vldr	d0, [sp]
 800a5ce:	2001      	movs	r0, #1
 800a5d0:	e7dd      	b.n	800a58e <sin+0x16>
 800a5d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5d6:	ed9d 0b00 	vldr	d0, [sp]
 800a5da:	f001 fc51 	bl	800be80 <__kernel_cos>
 800a5de:	e7d8      	b.n	800a592 <sin+0x1a>
 800a5e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5e4:	ed9d 0b00 	vldr	d0, [sp]
 800a5e8:	2001      	movs	r0, #1
 800a5ea:	f002 f851 	bl	800c690 <__kernel_sin>
 800a5ee:	ec53 2b10 	vmov	r2, r3, d0
 800a5f2:	ee10 0a10 	vmov	r0, s0
 800a5f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a5fa:	e7d5      	b.n	800a5a8 <sin+0x30>
 800a5fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a600:	ed9d 0b00 	vldr	d0, [sp]
 800a604:	f001 fc3c 	bl	800be80 <__kernel_cos>
 800a608:	e7f1      	b.n	800a5ee <sin+0x76>
 800a60a:	bf00      	nop
 800a60c:	f3af 8000 	nop.w
	...
 800a618:	3fe921fb 	.word	0x3fe921fb
 800a61c:	7fefffff 	.word	0x7fefffff

0800a620 <acos>:
 800a620:	b538      	push	{r3, r4, r5, lr}
 800a622:	ed2d 8b02 	vpush	{d8}
 800a626:	ec55 4b10 	vmov	r4, r5, d0
 800a62a:	f000 f919 	bl	800a860 <__ieee754_acos>
 800a62e:	4b16      	ldr	r3, [pc, #88]	; (800a688 <acos+0x68>)
 800a630:	eeb0 8a40 	vmov.f32	s16, s0
 800a634:	eef0 8a60 	vmov.f32	s17, s1
 800a638:	f993 3000 	ldrsb.w	r3, [r3]
 800a63c:	3301      	adds	r3, #1
 800a63e:	d01c      	beq.n	800a67a <acos+0x5a>
 800a640:	4622      	mov	r2, r4
 800a642:	462b      	mov	r3, r5
 800a644:	4620      	mov	r0, r4
 800a646:	4629      	mov	r1, r5
 800a648:	f7f6 fa28 	bl	8000a9c <__aeabi_dcmpun>
 800a64c:	b9a8      	cbnz	r0, 800a67a <acos+0x5a>
 800a64e:	ec45 4b10 	vmov	d0, r4, r5
 800a652:	f7ff ff85 	bl	800a560 <fabs>
 800a656:	4b0d      	ldr	r3, [pc, #52]	; (800a68c <acos+0x6c>)
 800a658:	ec51 0b10 	vmov	r0, r1, d0
 800a65c:	2200      	movs	r2, #0
 800a65e:	f7f6 fa13 	bl	8000a88 <__aeabi_dcmpgt>
 800a662:	b150      	cbz	r0, 800a67a <acos+0x5a>
 800a664:	f7ff fd5a 	bl	800a11c <__errno>
 800a668:	ecbd 8b02 	vpop	{d8}
 800a66c:	2321      	movs	r3, #33	; 0x21
 800a66e:	6003      	str	r3, [r0, #0]
 800a670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a674:	4806      	ldr	r0, [pc, #24]	; (800a690 <acos+0x70>)
 800a676:	f002 b957 	b.w	800c928 <nan>
 800a67a:	eeb0 0a48 	vmov.f32	s0, s16
 800a67e:	eef0 0a68 	vmov.f32	s1, s17
 800a682:	ecbd 8b02 	vpop	{d8}
 800a686:	bd38      	pop	{r3, r4, r5, pc}
 800a688:	2000019c 	.word	0x2000019c
 800a68c:	3ff00000 	.word	0x3ff00000
 800a690:	0800cbf0 	.word	0x0800cbf0

0800a694 <atan2>:
 800a694:	f000 bb44 	b.w	800ad20 <__ieee754_atan2>

0800a698 <pow>:
 800a698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a69c:	ec59 8b10 	vmov	r8, r9, d0
 800a6a0:	ec57 6b11 	vmov	r6, r7, d1
 800a6a4:	f000 fc08 	bl	800aeb8 <__ieee754_pow>
 800a6a8:	4b4e      	ldr	r3, [pc, #312]	; (800a7e4 <pow+0x14c>)
 800a6aa:	f993 3000 	ldrsb.w	r3, [r3]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	ec55 4b10 	vmov	r4, r5, d0
 800a6b4:	d015      	beq.n	800a6e2 <pow+0x4a>
 800a6b6:	4632      	mov	r2, r6
 800a6b8:	463b      	mov	r3, r7
 800a6ba:	4630      	mov	r0, r6
 800a6bc:	4639      	mov	r1, r7
 800a6be:	f7f6 f9ed 	bl	8000a9c <__aeabi_dcmpun>
 800a6c2:	b970      	cbnz	r0, 800a6e2 <pow+0x4a>
 800a6c4:	4642      	mov	r2, r8
 800a6c6:	464b      	mov	r3, r9
 800a6c8:	4640      	mov	r0, r8
 800a6ca:	4649      	mov	r1, r9
 800a6cc:	f7f6 f9e6 	bl	8000a9c <__aeabi_dcmpun>
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	b148      	cbz	r0, 800a6ea <pow+0x52>
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	4639      	mov	r1, r7
 800a6da:	f7f6 f9ad 	bl	8000a38 <__aeabi_dcmpeq>
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	d17d      	bne.n	800a7de <pow+0x146>
 800a6e2:	ec45 4b10 	vmov	d0, r4, r5
 800a6e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6ea:	4640      	mov	r0, r8
 800a6ec:	4649      	mov	r1, r9
 800a6ee:	f7f6 f9a3 	bl	8000a38 <__aeabi_dcmpeq>
 800a6f2:	b1e0      	cbz	r0, 800a72e <pow+0x96>
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	4639      	mov	r1, r7
 800a6fc:	f7f6 f99c 	bl	8000a38 <__aeabi_dcmpeq>
 800a700:	2800      	cmp	r0, #0
 800a702:	d16c      	bne.n	800a7de <pow+0x146>
 800a704:	ec47 6b10 	vmov	d0, r6, r7
 800a708:	f002 f880 	bl	800c80c <finite>
 800a70c:	2800      	cmp	r0, #0
 800a70e:	d0e8      	beq.n	800a6e2 <pow+0x4a>
 800a710:	2200      	movs	r2, #0
 800a712:	2300      	movs	r3, #0
 800a714:	4630      	mov	r0, r6
 800a716:	4639      	mov	r1, r7
 800a718:	f7f6 f998 	bl	8000a4c <__aeabi_dcmplt>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	d0e0      	beq.n	800a6e2 <pow+0x4a>
 800a720:	f7ff fcfc 	bl	800a11c <__errno>
 800a724:	2321      	movs	r3, #33	; 0x21
 800a726:	6003      	str	r3, [r0, #0]
 800a728:	2400      	movs	r4, #0
 800a72a:	4d2f      	ldr	r5, [pc, #188]	; (800a7e8 <pow+0x150>)
 800a72c:	e7d9      	b.n	800a6e2 <pow+0x4a>
 800a72e:	ec45 4b10 	vmov	d0, r4, r5
 800a732:	f002 f86b 	bl	800c80c <finite>
 800a736:	bbb8      	cbnz	r0, 800a7a8 <pow+0x110>
 800a738:	ec49 8b10 	vmov	d0, r8, r9
 800a73c:	f002 f866 	bl	800c80c <finite>
 800a740:	b390      	cbz	r0, 800a7a8 <pow+0x110>
 800a742:	ec47 6b10 	vmov	d0, r6, r7
 800a746:	f002 f861 	bl	800c80c <finite>
 800a74a:	b368      	cbz	r0, 800a7a8 <pow+0x110>
 800a74c:	4622      	mov	r2, r4
 800a74e:	462b      	mov	r3, r5
 800a750:	4620      	mov	r0, r4
 800a752:	4629      	mov	r1, r5
 800a754:	f7f6 f9a2 	bl	8000a9c <__aeabi_dcmpun>
 800a758:	b160      	cbz	r0, 800a774 <pow+0xdc>
 800a75a:	f7ff fcdf 	bl	800a11c <__errno>
 800a75e:	2321      	movs	r3, #33	; 0x21
 800a760:	6003      	str	r3, [r0, #0]
 800a762:	2200      	movs	r2, #0
 800a764:	2300      	movs	r3, #0
 800a766:	4610      	mov	r0, r2
 800a768:	4619      	mov	r1, r3
 800a76a:	f7f6 f827 	bl	80007bc <__aeabi_ddiv>
 800a76e:	4604      	mov	r4, r0
 800a770:	460d      	mov	r5, r1
 800a772:	e7b6      	b.n	800a6e2 <pow+0x4a>
 800a774:	f7ff fcd2 	bl	800a11c <__errno>
 800a778:	2322      	movs	r3, #34	; 0x22
 800a77a:	6003      	str	r3, [r0, #0]
 800a77c:	2200      	movs	r2, #0
 800a77e:	2300      	movs	r3, #0
 800a780:	4640      	mov	r0, r8
 800a782:	4649      	mov	r1, r9
 800a784:	f7f6 f962 	bl	8000a4c <__aeabi_dcmplt>
 800a788:	2400      	movs	r4, #0
 800a78a:	b158      	cbz	r0, 800a7a4 <pow+0x10c>
 800a78c:	ec47 6b10 	vmov	d0, r6, r7
 800a790:	f002 f8d2 	bl	800c938 <rint>
 800a794:	4632      	mov	r2, r6
 800a796:	ec51 0b10 	vmov	r0, r1, d0
 800a79a:	463b      	mov	r3, r7
 800a79c:	f7f6 f94c 	bl	8000a38 <__aeabi_dcmpeq>
 800a7a0:	2800      	cmp	r0, #0
 800a7a2:	d0c2      	beq.n	800a72a <pow+0x92>
 800a7a4:	4d11      	ldr	r5, [pc, #68]	; (800a7ec <pow+0x154>)
 800a7a6:	e79c      	b.n	800a6e2 <pow+0x4a>
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	4620      	mov	r0, r4
 800a7ae:	4629      	mov	r1, r5
 800a7b0:	f7f6 f942 	bl	8000a38 <__aeabi_dcmpeq>
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	d094      	beq.n	800a6e2 <pow+0x4a>
 800a7b8:	ec49 8b10 	vmov	d0, r8, r9
 800a7bc:	f002 f826 	bl	800c80c <finite>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	d08e      	beq.n	800a6e2 <pow+0x4a>
 800a7c4:	ec47 6b10 	vmov	d0, r6, r7
 800a7c8:	f002 f820 	bl	800c80c <finite>
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	d088      	beq.n	800a6e2 <pow+0x4a>
 800a7d0:	f7ff fca4 	bl	800a11c <__errno>
 800a7d4:	2322      	movs	r3, #34	; 0x22
 800a7d6:	6003      	str	r3, [r0, #0]
 800a7d8:	2400      	movs	r4, #0
 800a7da:	2500      	movs	r5, #0
 800a7dc:	e781      	b.n	800a6e2 <pow+0x4a>
 800a7de:	4d04      	ldr	r5, [pc, #16]	; (800a7f0 <pow+0x158>)
 800a7e0:	2400      	movs	r4, #0
 800a7e2:	e77e      	b.n	800a6e2 <pow+0x4a>
 800a7e4:	2000019c 	.word	0x2000019c
 800a7e8:	fff00000 	.word	0xfff00000
 800a7ec:	7ff00000 	.word	0x7ff00000
 800a7f0:	3ff00000 	.word	0x3ff00000

0800a7f4 <sqrt>:
 800a7f4:	b538      	push	{r3, r4, r5, lr}
 800a7f6:	ed2d 8b02 	vpush	{d8}
 800a7fa:	ec55 4b10 	vmov	r4, r5, d0
 800a7fe:	f001 fa89 	bl	800bd14 <__ieee754_sqrt>
 800a802:	4b15      	ldr	r3, [pc, #84]	; (800a858 <sqrt+0x64>)
 800a804:	eeb0 8a40 	vmov.f32	s16, s0
 800a808:	eef0 8a60 	vmov.f32	s17, s1
 800a80c:	f993 3000 	ldrsb.w	r3, [r3]
 800a810:	3301      	adds	r3, #1
 800a812:	d019      	beq.n	800a848 <sqrt+0x54>
 800a814:	4622      	mov	r2, r4
 800a816:	462b      	mov	r3, r5
 800a818:	4620      	mov	r0, r4
 800a81a:	4629      	mov	r1, r5
 800a81c:	f7f6 f93e 	bl	8000a9c <__aeabi_dcmpun>
 800a820:	b990      	cbnz	r0, 800a848 <sqrt+0x54>
 800a822:	2200      	movs	r2, #0
 800a824:	2300      	movs	r3, #0
 800a826:	4620      	mov	r0, r4
 800a828:	4629      	mov	r1, r5
 800a82a:	f7f6 f90f 	bl	8000a4c <__aeabi_dcmplt>
 800a82e:	b158      	cbz	r0, 800a848 <sqrt+0x54>
 800a830:	f7ff fc74 	bl	800a11c <__errno>
 800a834:	2321      	movs	r3, #33	; 0x21
 800a836:	6003      	str	r3, [r0, #0]
 800a838:	2200      	movs	r2, #0
 800a83a:	2300      	movs	r3, #0
 800a83c:	4610      	mov	r0, r2
 800a83e:	4619      	mov	r1, r3
 800a840:	f7f5 ffbc 	bl	80007bc <__aeabi_ddiv>
 800a844:	ec41 0b18 	vmov	d8, r0, r1
 800a848:	eeb0 0a48 	vmov.f32	s0, s16
 800a84c:	eef0 0a68 	vmov.f32	s1, s17
 800a850:	ecbd 8b02 	vpop	{d8}
 800a854:	bd38      	pop	{r3, r4, r5, pc}
 800a856:	bf00      	nop
 800a858:	2000019c 	.word	0x2000019c
 800a85c:	00000000 	.word	0x00000000

0800a860 <__ieee754_acos>:
 800a860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a864:	ec55 4b10 	vmov	r4, r5, d0
 800a868:	49b7      	ldr	r1, [pc, #732]	; (800ab48 <__ieee754_acos+0x2e8>)
 800a86a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a86e:	428b      	cmp	r3, r1
 800a870:	dd1b      	ble.n	800a8aa <__ieee754_acos+0x4a>
 800a872:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800a876:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a87a:	4323      	orrs	r3, r4
 800a87c:	d106      	bne.n	800a88c <__ieee754_acos+0x2c>
 800a87e:	2d00      	cmp	r5, #0
 800a880:	f300 8211 	bgt.w	800aca6 <__ieee754_acos+0x446>
 800a884:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800aae0 <__ieee754_acos+0x280>
 800a888:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a88c:	ee10 2a10 	vmov	r2, s0
 800a890:	462b      	mov	r3, r5
 800a892:	ee10 0a10 	vmov	r0, s0
 800a896:	4629      	mov	r1, r5
 800a898:	f7f5 fcae 	bl	80001f8 <__aeabi_dsub>
 800a89c:	4602      	mov	r2, r0
 800a89e:	460b      	mov	r3, r1
 800a8a0:	f7f5 ff8c 	bl	80007bc <__aeabi_ddiv>
 800a8a4:	ec41 0b10 	vmov	d0, r0, r1
 800a8a8:	e7ee      	b.n	800a888 <__ieee754_acos+0x28>
 800a8aa:	49a8      	ldr	r1, [pc, #672]	; (800ab4c <__ieee754_acos+0x2ec>)
 800a8ac:	428b      	cmp	r3, r1
 800a8ae:	f300 8087 	bgt.w	800a9c0 <__ieee754_acos+0x160>
 800a8b2:	4aa7      	ldr	r2, [pc, #668]	; (800ab50 <__ieee754_acos+0x2f0>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	f340 81f9 	ble.w	800acac <__ieee754_acos+0x44c>
 800a8ba:	ee10 2a10 	vmov	r2, s0
 800a8be:	ee10 0a10 	vmov	r0, s0
 800a8c2:	462b      	mov	r3, r5
 800a8c4:	4629      	mov	r1, r5
 800a8c6:	f7f5 fe4f 	bl	8000568 <__aeabi_dmul>
 800a8ca:	a387      	add	r3, pc, #540	; (adr r3, 800aae8 <__ieee754_acos+0x288>)
 800a8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d0:	4606      	mov	r6, r0
 800a8d2:	460f      	mov	r7, r1
 800a8d4:	f7f5 fe48 	bl	8000568 <__aeabi_dmul>
 800a8d8:	a385      	add	r3, pc, #532	; (adr r3, 800aaf0 <__ieee754_acos+0x290>)
 800a8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8de:	f7f5 fc8d 	bl	80001fc <__adddf3>
 800a8e2:	4632      	mov	r2, r6
 800a8e4:	463b      	mov	r3, r7
 800a8e6:	f7f5 fe3f 	bl	8000568 <__aeabi_dmul>
 800a8ea:	a383      	add	r3, pc, #524	; (adr r3, 800aaf8 <__ieee754_acos+0x298>)
 800a8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f0:	f7f5 fc82 	bl	80001f8 <__aeabi_dsub>
 800a8f4:	4632      	mov	r2, r6
 800a8f6:	463b      	mov	r3, r7
 800a8f8:	f7f5 fe36 	bl	8000568 <__aeabi_dmul>
 800a8fc:	a380      	add	r3, pc, #512	; (adr r3, 800ab00 <__ieee754_acos+0x2a0>)
 800a8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a902:	f7f5 fc7b 	bl	80001fc <__adddf3>
 800a906:	4632      	mov	r2, r6
 800a908:	463b      	mov	r3, r7
 800a90a:	f7f5 fe2d 	bl	8000568 <__aeabi_dmul>
 800a90e:	a37e      	add	r3, pc, #504	; (adr r3, 800ab08 <__ieee754_acos+0x2a8>)
 800a910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a914:	f7f5 fc70 	bl	80001f8 <__aeabi_dsub>
 800a918:	4632      	mov	r2, r6
 800a91a:	463b      	mov	r3, r7
 800a91c:	f7f5 fe24 	bl	8000568 <__aeabi_dmul>
 800a920:	a37b      	add	r3, pc, #492	; (adr r3, 800ab10 <__ieee754_acos+0x2b0>)
 800a922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a926:	f7f5 fc69 	bl	80001fc <__adddf3>
 800a92a:	4632      	mov	r2, r6
 800a92c:	463b      	mov	r3, r7
 800a92e:	f7f5 fe1b 	bl	8000568 <__aeabi_dmul>
 800a932:	a379      	add	r3, pc, #484	; (adr r3, 800ab18 <__ieee754_acos+0x2b8>)
 800a934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a938:	4680      	mov	r8, r0
 800a93a:	4689      	mov	r9, r1
 800a93c:	4630      	mov	r0, r6
 800a93e:	4639      	mov	r1, r7
 800a940:	f7f5 fe12 	bl	8000568 <__aeabi_dmul>
 800a944:	a376      	add	r3, pc, #472	; (adr r3, 800ab20 <__ieee754_acos+0x2c0>)
 800a946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94a:	f7f5 fc55 	bl	80001f8 <__aeabi_dsub>
 800a94e:	4632      	mov	r2, r6
 800a950:	463b      	mov	r3, r7
 800a952:	f7f5 fe09 	bl	8000568 <__aeabi_dmul>
 800a956:	a374      	add	r3, pc, #464	; (adr r3, 800ab28 <__ieee754_acos+0x2c8>)
 800a958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95c:	f7f5 fc4e 	bl	80001fc <__adddf3>
 800a960:	4632      	mov	r2, r6
 800a962:	463b      	mov	r3, r7
 800a964:	f7f5 fe00 	bl	8000568 <__aeabi_dmul>
 800a968:	a371      	add	r3, pc, #452	; (adr r3, 800ab30 <__ieee754_acos+0x2d0>)
 800a96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96e:	f7f5 fc43 	bl	80001f8 <__aeabi_dsub>
 800a972:	4632      	mov	r2, r6
 800a974:	463b      	mov	r3, r7
 800a976:	f7f5 fdf7 	bl	8000568 <__aeabi_dmul>
 800a97a:	4b76      	ldr	r3, [pc, #472]	; (800ab54 <__ieee754_acos+0x2f4>)
 800a97c:	2200      	movs	r2, #0
 800a97e:	f7f5 fc3d 	bl	80001fc <__adddf3>
 800a982:	4602      	mov	r2, r0
 800a984:	460b      	mov	r3, r1
 800a986:	4640      	mov	r0, r8
 800a988:	4649      	mov	r1, r9
 800a98a:	f7f5 ff17 	bl	80007bc <__aeabi_ddiv>
 800a98e:	4622      	mov	r2, r4
 800a990:	462b      	mov	r3, r5
 800a992:	f7f5 fde9 	bl	8000568 <__aeabi_dmul>
 800a996:	4602      	mov	r2, r0
 800a998:	460b      	mov	r3, r1
 800a99a:	a167      	add	r1, pc, #412	; (adr r1, 800ab38 <__ieee754_acos+0x2d8>)
 800a99c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9a0:	f7f5 fc2a 	bl	80001f8 <__aeabi_dsub>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	4629      	mov	r1, r5
 800a9ac:	f7f5 fc24 	bl	80001f8 <__aeabi_dsub>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	a162      	add	r1, pc, #392	; (adr r1, 800ab40 <__ieee754_acos+0x2e0>)
 800a9b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9ba:	f7f5 fc1d 	bl	80001f8 <__aeabi_dsub>
 800a9be:	e771      	b.n	800a8a4 <__ieee754_acos+0x44>
 800a9c0:	2d00      	cmp	r5, #0
 800a9c2:	f280 80cb 	bge.w	800ab5c <__ieee754_acos+0x2fc>
 800a9c6:	ee10 0a10 	vmov	r0, s0
 800a9ca:	4b62      	ldr	r3, [pc, #392]	; (800ab54 <__ieee754_acos+0x2f4>)
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	4629      	mov	r1, r5
 800a9d0:	f7f5 fc14 	bl	80001fc <__adddf3>
 800a9d4:	4b60      	ldr	r3, [pc, #384]	; (800ab58 <__ieee754_acos+0x2f8>)
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f7f5 fdc6 	bl	8000568 <__aeabi_dmul>
 800a9dc:	a342      	add	r3, pc, #264	; (adr r3, 800aae8 <__ieee754_acos+0x288>)
 800a9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e2:	4604      	mov	r4, r0
 800a9e4:	460d      	mov	r5, r1
 800a9e6:	f7f5 fdbf 	bl	8000568 <__aeabi_dmul>
 800a9ea:	a341      	add	r3, pc, #260	; (adr r3, 800aaf0 <__ieee754_acos+0x290>)
 800a9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f0:	f7f5 fc04 	bl	80001fc <__adddf3>
 800a9f4:	4622      	mov	r2, r4
 800a9f6:	462b      	mov	r3, r5
 800a9f8:	f7f5 fdb6 	bl	8000568 <__aeabi_dmul>
 800a9fc:	a33e      	add	r3, pc, #248	; (adr r3, 800aaf8 <__ieee754_acos+0x298>)
 800a9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa02:	f7f5 fbf9 	bl	80001f8 <__aeabi_dsub>
 800aa06:	4622      	mov	r2, r4
 800aa08:	462b      	mov	r3, r5
 800aa0a:	f7f5 fdad 	bl	8000568 <__aeabi_dmul>
 800aa0e:	a33c      	add	r3, pc, #240	; (adr r3, 800ab00 <__ieee754_acos+0x2a0>)
 800aa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa14:	f7f5 fbf2 	bl	80001fc <__adddf3>
 800aa18:	4622      	mov	r2, r4
 800aa1a:	462b      	mov	r3, r5
 800aa1c:	f7f5 fda4 	bl	8000568 <__aeabi_dmul>
 800aa20:	a339      	add	r3, pc, #228	; (adr r3, 800ab08 <__ieee754_acos+0x2a8>)
 800aa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa26:	f7f5 fbe7 	bl	80001f8 <__aeabi_dsub>
 800aa2a:	4622      	mov	r2, r4
 800aa2c:	462b      	mov	r3, r5
 800aa2e:	f7f5 fd9b 	bl	8000568 <__aeabi_dmul>
 800aa32:	a337      	add	r3, pc, #220	; (adr r3, 800ab10 <__ieee754_acos+0x2b0>)
 800aa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa38:	f7f5 fbe0 	bl	80001fc <__adddf3>
 800aa3c:	4622      	mov	r2, r4
 800aa3e:	462b      	mov	r3, r5
 800aa40:	f7f5 fd92 	bl	8000568 <__aeabi_dmul>
 800aa44:	ec45 4b10 	vmov	d0, r4, r5
 800aa48:	4680      	mov	r8, r0
 800aa4a:	4689      	mov	r9, r1
 800aa4c:	f001 f962 	bl	800bd14 <__ieee754_sqrt>
 800aa50:	a331      	add	r3, pc, #196	; (adr r3, 800ab18 <__ieee754_acos+0x2b8>)
 800aa52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa56:	4620      	mov	r0, r4
 800aa58:	4629      	mov	r1, r5
 800aa5a:	ec57 6b10 	vmov	r6, r7, d0
 800aa5e:	f7f5 fd83 	bl	8000568 <__aeabi_dmul>
 800aa62:	a32f      	add	r3, pc, #188	; (adr r3, 800ab20 <__ieee754_acos+0x2c0>)
 800aa64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa68:	f7f5 fbc6 	bl	80001f8 <__aeabi_dsub>
 800aa6c:	4622      	mov	r2, r4
 800aa6e:	462b      	mov	r3, r5
 800aa70:	f7f5 fd7a 	bl	8000568 <__aeabi_dmul>
 800aa74:	a32c      	add	r3, pc, #176	; (adr r3, 800ab28 <__ieee754_acos+0x2c8>)
 800aa76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7a:	f7f5 fbbf 	bl	80001fc <__adddf3>
 800aa7e:	4622      	mov	r2, r4
 800aa80:	462b      	mov	r3, r5
 800aa82:	f7f5 fd71 	bl	8000568 <__aeabi_dmul>
 800aa86:	a32a      	add	r3, pc, #168	; (adr r3, 800ab30 <__ieee754_acos+0x2d0>)
 800aa88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8c:	f7f5 fbb4 	bl	80001f8 <__aeabi_dsub>
 800aa90:	4622      	mov	r2, r4
 800aa92:	462b      	mov	r3, r5
 800aa94:	f7f5 fd68 	bl	8000568 <__aeabi_dmul>
 800aa98:	4b2e      	ldr	r3, [pc, #184]	; (800ab54 <__ieee754_acos+0x2f4>)
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f7f5 fbae 	bl	80001fc <__adddf3>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	4640      	mov	r0, r8
 800aaa6:	4649      	mov	r1, r9
 800aaa8:	f7f5 fe88 	bl	80007bc <__aeabi_ddiv>
 800aaac:	4632      	mov	r2, r6
 800aaae:	463b      	mov	r3, r7
 800aab0:	f7f5 fd5a 	bl	8000568 <__aeabi_dmul>
 800aab4:	a320      	add	r3, pc, #128	; (adr r3, 800ab38 <__ieee754_acos+0x2d8>)
 800aab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaba:	f7f5 fb9d 	bl	80001f8 <__aeabi_dsub>
 800aabe:	4632      	mov	r2, r6
 800aac0:	463b      	mov	r3, r7
 800aac2:	f7f5 fb9b 	bl	80001fc <__adddf3>
 800aac6:	4602      	mov	r2, r0
 800aac8:	460b      	mov	r3, r1
 800aaca:	f7f5 fb97 	bl	80001fc <__adddf3>
 800aace:	4602      	mov	r2, r0
 800aad0:	460b      	mov	r3, r1
 800aad2:	a103      	add	r1, pc, #12	; (adr r1, 800aae0 <__ieee754_acos+0x280>)
 800aad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aad8:	e76f      	b.n	800a9ba <__ieee754_acos+0x15a>
 800aada:	bf00      	nop
 800aadc:	f3af 8000 	nop.w
 800aae0:	54442d18 	.word	0x54442d18
 800aae4:	400921fb 	.word	0x400921fb
 800aae8:	0dfdf709 	.word	0x0dfdf709
 800aaec:	3f023de1 	.word	0x3f023de1
 800aaf0:	7501b288 	.word	0x7501b288
 800aaf4:	3f49efe0 	.word	0x3f49efe0
 800aaf8:	b5688f3b 	.word	0xb5688f3b
 800aafc:	3fa48228 	.word	0x3fa48228
 800ab00:	0e884455 	.word	0x0e884455
 800ab04:	3fc9c155 	.word	0x3fc9c155
 800ab08:	03eb6f7d 	.word	0x03eb6f7d
 800ab0c:	3fd4d612 	.word	0x3fd4d612
 800ab10:	55555555 	.word	0x55555555
 800ab14:	3fc55555 	.word	0x3fc55555
 800ab18:	b12e9282 	.word	0xb12e9282
 800ab1c:	3fb3b8c5 	.word	0x3fb3b8c5
 800ab20:	1b8d0159 	.word	0x1b8d0159
 800ab24:	3fe6066c 	.word	0x3fe6066c
 800ab28:	9c598ac8 	.word	0x9c598ac8
 800ab2c:	40002ae5 	.word	0x40002ae5
 800ab30:	1c8a2d4b 	.word	0x1c8a2d4b
 800ab34:	40033a27 	.word	0x40033a27
 800ab38:	33145c07 	.word	0x33145c07
 800ab3c:	3c91a626 	.word	0x3c91a626
 800ab40:	54442d18 	.word	0x54442d18
 800ab44:	3ff921fb 	.word	0x3ff921fb
 800ab48:	3fefffff 	.word	0x3fefffff
 800ab4c:	3fdfffff 	.word	0x3fdfffff
 800ab50:	3c600000 	.word	0x3c600000
 800ab54:	3ff00000 	.word	0x3ff00000
 800ab58:	3fe00000 	.word	0x3fe00000
 800ab5c:	ee10 2a10 	vmov	r2, s0
 800ab60:	462b      	mov	r3, r5
 800ab62:	496d      	ldr	r1, [pc, #436]	; (800ad18 <__ieee754_acos+0x4b8>)
 800ab64:	2000      	movs	r0, #0
 800ab66:	f7f5 fb47 	bl	80001f8 <__aeabi_dsub>
 800ab6a:	4b6c      	ldr	r3, [pc, #432]	; (800ad1c <__ieee754_acos+0x4bc>)
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	f7f5 fcfb 	bl	8000568 <__aeabi_dmul>
 800ab72:	4604      	mov	r4, r0
 800ab74:	460d      	mov	r5, r1
 800ab76:	ec45 4b10 	vmov	d0, r4, r5
 800ab7a:	f001 f8cb 	bl	800bd14 <__ieee754_sqrt>
 800ab7e:	a34e      	add	r3, pc, #312	; (adr r3, 800acb8 <__ieee754_acos+0x458>)
 800ab80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab84:	4620      	mov	r0, r4
 800ab86:	4629      	mov	r1, r5
 800ab88:	ec59 8b10 	vmov	r8, r9, d0
 800ab8c:	f7f5 fcec 	bl	8000568 <__aeabi_dmul>
 800ab90:	a34b      	add	r3, pc, #300	; (adr r3, 800acc0 <__ieee754_acos+0x460>)
 800ab92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab96:	f7f5 fb31 	bl	80001fc <__adddf3>
 800ab9a:	4622      	mov	r2, r4
 800ab9c:	462b      	mov	r3, r5
 800ab9e:	f7f5 fce3 	bl	8000568 <__aeabi_dmul>
 800aba2:	a349      	add	r3, pc, #292	; (adr r3, 800acc8 <__ieee754_acos+0x468>)
 800aba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba8:	f7f5 fb26 	bl	80001f8 <__aeabi_dsub>
 800abac:	4622      	mov	r2, r4
 800abae:	462b      	mov	r3, r5
 800abb0:	f7f5 fcda 	bl	8000568 <__aeabi_dmul>
 800abb4:	a346      	add	r3, pc, #280	; (adr r3, 800acd0 <__ieee754_acos+0x470>)
 800abb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abba:	f7f5 fb1f 	bl	80001fc <__adddf3>
 800abbe:	4622      	mov	r2, r4
 800abc0:	462b      	mov	r3, r5
 800abc2:	f7f5 fcd1 	bl	8000568 <__aeabi_dmul>
 800abc6:	a344      	add	r3, pc, #272	; (adr r3, 800acd8 <__ieee754_acos+0x478>)
 800abc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abcc:	f7f5 fb14 	bl	80001f8 <__aeabi_dsub>
 800abd0:	4622      	mov	r2, r4
 800abd2:	462b      	mov	r3, r5
 800abd4:	f7f5 fcc8 	bl	8000568 <__aeabi_dmul>
 800abd8:	a341      	add	r3, pc, #260	; (adr r3, 800ace0 <__ieee754_acos+0x480>)
 800abda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abde:	f7f5 fb0d 	bl	80001fc <__adddf3>
 800abe2:	4622      	mov	r2, r4
 800abe4:	462b      	mov	r3, r5
 800abe6:	f7f5 fcbf 	bl	8000568 <__aeabi_dmul>
 800abea:	a33f      	add	r3, pc, #252	; (adr r3, 800ace8 <__ieee754_acos+0x488>)
 800abec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf0:	4682      	mov	sl, r0
 800abf2:	468b      	mov	fp, r1
 800abf4:	4620      	mov	r0, r4
 800abf6:	4629      	mov	r1, r5
 800abf8:	f7f5 fcb6 	bl	8000568 <__aeabi_dmul>
 800abfc:	a33c      	add	r3, pc, #240	; (adr r3, 800acf0 <__ieee754_acos+0x490>)
 800abfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac02:	f7f5 faf9 	bl	80001f8 <__aeabi_dsub>
 800ac06:	4622      	mov	r2, r4
 800ac08:	462b      	mov	r3, r5
 800ac0a:	f7f5 fcad 	bl	8000568 <__aeabi_dmul>
 800ac0e:	a33a      	add	r3, pc, #232	; (adr r3, 800acf8 <__ieee754_acos+0x498>)
 800ac10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac14:	f7f5 faf2 	bl	80001fc <__adddf3>
 800ac18:	4622      	mov	r2, r4
 800ac1a:	462b      	mov	r3, r5
 800ac1c:	f7f5 fca4 	bl	8000568 <__aeabi_dmul>
 800ac20:	a337      	add	r3, pc, #220	; (adr r3, 800ad00 <__ieee754_acos+0x4a0>)
 800ac22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac26:	f7f5 fae7 	bl	80001f8 <__aeabi_dsub>
 800ac2a:	4622      	mov	r2, r4
 800ac2c:	462b      	mov	r3, r5
 800ac2e:	f7f5 fc9b 	bl	8000568 <__aeabi_dmul>
 800ac32:	4b39      	ldr	r3, [pc, #228]	; (800ad18 <__ieee754_acos+0x4b8>)
 800ac34:	2200      	movs	r2, #0
 800ac36:	f7f5 fae1 	bl	80001fc <__adddf3>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	4650      	mov	r0, sl
 800ac40:	4659      	mov	r1, fp
 800ac42:	f7f5 fdbb 	bl	80007bc <__aeabi_ddiv>
 800ac46:	4642      	mov	r2, r8
 800ac48:	464b      	mov	r3, r9
 800ac4a:	f7f5 fc8d 	bl	8000568 <__aeabi_dmul>
 800ac4e:	2600      	movs	r6, #0
 800ac50:	4682      	mov	sl, r0
 800ac52:	468b      	mov	fp, r1
 800ac54:	4632      	mov	r2, r6
 800ac56:	464b      	mov	r3, r9
 800ac58:	4630      	mov	r0, r6
 800ac5a:	4649      	mov	r1, r9
 800ac5c:	f7f5 fc84 	bl	8000568 <__aeabi_dmul>
 800ac60:	4602      	mov	r2, r0
 800ac62:	460b      	mov	r3, r1
 800ac64:	4620      	mov	r0, r4
 800ac66:	4629      	mov	r1, r5
 800ac68:	f7f5 fac6 	bl	80001f8 <__aeabi_dsub>
 800ac6c:	4632      	mov	r2, r6
 800ac6e:	4604      	mov	r4, r0
 800ac70:	460d      	mov	r5, r1
 800ac72:	464b      	mov	r3, r9
 800ac74:	4640      	mov	r0, r8
 800ac76:	4649      	mov	r1, r9
 800ac78:	f7f5 fac0 	bl	80001fc <__adddf3>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	460b      	mov	r3, r1
 800ac80:	4620      	mov	r0, r4
 800ac82:	4629      	mov	r1, r5
 800ac84:	f7f5 fd9a 	bl	80007bc <__aeabi_ddiv>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	4650      	mov	r0, sl
 800ac8e:	4659      	mov	r1, fp
 800ac90:	f7f5 fab4 	bl	80001fc <__adddf3>
 800ac94:	4632      	mov	r2, r6
 800ac96:	464b      	mov	r3, r9
 800ac98:	f7f5 fab0 	bl	80001fc <__adddf3>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	460b      	mov	r3, r1
 800aca0:	f7f5 faac 	bl	80001fc <__adddf3>
 800aca4:	e5fe      	b.n	800a8a4 <__ieee754_acos+0x44>
 800aca6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800ad08 <__ieee754_acos+0x4a8>
 800acaa:	e5ed      	b.n	800a888 <__ieee754_acos+0x28>
 800acac:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800ad10 <__ieee754_acos+0x4b0>
 800acb0:	e5ea      	b.n	800a888 <__ieee754_acos+0x28>
 800acb2:	bf00      	nop
 800acb4:	f3af 8000 	nop.w
 800acb8:	0dfdf709 	.word	0x0dfdf709
 800acbc:	3f023de1 	.word	0x3f023de1
 800acc0:	7501b288 	.word	0x7501b288
 800acc4:	3f49efe0 	.word	0x3f49efe0
 800acc8:	b5688f3b 	.word	0xb5688f3b
 800accc:	3fa48228 	.word	0x3fa48228
 800acd0:	0e884455 	.word	0x0e884455
 800acd4:	3fc9c155 	.word	0x3fc9c155
 800acd8:	03eb6f7d 	.word	0x03eb6f7d
 800acdc:	3fd4d612 	.word	0x3fd4d612
 800ace0:	55555555 	.word	0x55555555
 800ace4:	3fc55555 	.word	0x3fc55555
 800ace8:	b12e9282 	.word	0xb12e9282
 800acec:	3fb3b8c5 	.word	0x3fb3b8c5
 800acf0:	1b8d0159 	.word	0x1b8d0159
 800acf4:	3fe6066c 	.word	0x3fe6066c
 800acf8:	9c598ac8 	.word	0x9c598ac8
 800acfc:	40002ae5 	.word	0x40002ae5
 800ad00:	1c8a2d4b 	.word	0x1c8a2d4b
 800ad04:	40033a27 	.word	0x40033a27
	...
 800ad10:	54442d18 	.word	0x54442d18
 800ad14:	3ff921fb 	.word	0x3ff921fb
 800ad18:	3ff00000 	.word	0x3ff00000
 800ad1c:	3fe00000 	.word	0x3fe00000

0800ad20 <__ieee754_atan2>:
 800ad20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad24:	ec57 6b11 	vmov	r6, r7, d1
 800ad28:	4273      	negs	r3, r6
 800ad2a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800aeb0 <__ieee754_atan2+0x190>
 800ad2e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ad32:	4333      	orrs	r3, r6
 800ad34:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ad38:	4573      	cmp	r3, lr
 800ad3a:	ec51 0b10 	vmov	r0, r1, d0
 800ad3e:	ee11 8a10 	vmov	r8, s2
 800ad42:	d80a      	bhi.n	800ad5a <__ieee754_atan2+0x3a>
 800ad44:	4244      	negs	r4, r0
 800ad46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad4a:	4304      	orrs	r4, r0
 800ad4c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ad50:	4574      	cmp	r4, lr
 800ad52:	ee10 9a10 	vmov	r9, s0
 800ad56:	468c      	mov	ip, r1
 800ad58:	d907      	bls.n	800ad6a <__ieee754_atan2+0x4a>
 800ad5a:	4632      	mov	r2, r6
 800ad5c:	463b      	mov	r3, r7
 800ad5e:	f7f5 fa4d 	bl	80001fc <__adddf3>
 800ad62:	ec41 0b10 	vmov	d0, r0, r1
 800ad66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad6a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ad6e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ad72:	4334      	orrs	r4, r6
 800ad74:	d103      	bne.n	800ad7e <__ieee754_atan2+0x5e>
 800ad76:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad7a:	f7ff ba01 	b.w	800a180 <atan>
 800ad7e:	17bc      	asrs	r4, r7, #30
 800ad80:	f004 0402 	and.w	r4, r4, #2
 800ad84:	ea53 0909 	orrs.w	r9, r3, r9
 800ad88:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ad8c:	d107      	bne.n	800ad9e <__ieee754_atan2+0x7e>
 800ad8e:	2c02      	cmp	r4, #2
 800ad90:	d060      	beq.n	800ae54 <__ieee754_atan2+0x134>
 800ad92:	2c03      	cmp	r4, #3
 800ad94:	d1e5      	bne.n	800ad62 <__ieee754_atan2+0x42>
 800ad96:	a142      	add	r1, pc, #264	; (adr r1, 800aea0 <__ieee754_atan2+0x180>)
 800ad98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad9c:	e7e1      	b.n	800ad62 <__ieee754_atan2+0x42>
 800ad9e:	ea52 0808 	orrs.w	r8, r2, r8
 800ada2:	d106      	bne.n	800adb2 <__ieee754_atan2+0x92>
 800ada4:	f1bc 0f00 	cmp.w	ip, #0
 800ada8:	da5f      	bge.n	800ae6a <__ieee754_atan2+0x14a>
 800adaa:	a13f      	add	r1, pc, #252	; (adr r1, 800aea8 <__ieee754_atan2+0x188>)
 800adac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adb0:	e7d7      	b.n	800ad62 <__ieee754_atan2+0x42>
 800adb2:	4572      	cmp	r2, lr
 800adb4:	d10f      	bne.n	800add6 <__ieee754_atan2+0xb6>
 800adb6:	4293      	cmp	r3, r2
 800adb8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800adbc:	d107      	bne.n	800adce <__ieee754_atan2+0xae>
 800adbe:	2c02      	cmp	r4, #2
 800adc0:	d84c      	bhi.n	800ae5c <__ieee754_atan2+0x13c>
 800adc2:	4b35      	ldr	r3, [pc, #212]	; (800ae98 <__ieee754_atan2+0x178>)
 800adc4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800adc8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800adcc:	e7c9      	b.n	800ad62 <__ieee754_atan2+0x42>
 800adce:	2c02      	cmp	r4, #2
 800add0:	d848      	bhi.n	800ae64 <__ieee754_atan2+0x144>
 800add2:	4b32      	ldr	r3, [pc, #200]	; (800ae9c <__ieee754_atan2+0x17c>)
 800add4:	e7f6      	b.n	800adc4 <__ieee754_atan2+0xa4>
 800add6:	4573      	cmp	r3, lr
 800add8:	d0e4      	beq.n	800ada4 <__ieee754_atan2+0x84>
 800adda:	1a9b      	subs	r3, r3, r2
 800addc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ade0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ade4:	da1e      	bge.n	800ae24 <__ieee754_atan2+0x104>
 800ade6:	2f00      	cmp	r7, #0
 800ade8:	da01      	bge.n	800adee <__ieee754_atan2+0xce>
 800adea:	323c      	adds	r2, #60	; 0x3c
 800adec:	db1e      	blt.n	800ae2c <__ieee754_atan2+0x10c>
 800adee:	4632      	mov	r2, r6
 800adf0:	463b      	mov	r3, r7
 800adf2:	f7f5 fce3 	bl	80007bc <__aeabi_ddiv>
 800adf6:	ec41 0b10 	vmov	d0, r0, r1
 800adfa:	f7ff fbb1 	bl	800a560 <fabs>
 800adfe:	f7ff f9bf 	bl	800a180 <atan>
 800ae02:	ec51 0b10 	vmov	r0, r1, d0
 800ae06:	2c01      	cmp	r4, #1
 800ae08:	d013      	beq.n	800ae32 <__ieee754_atan2+0x112>
 800ae0a:	2c02      	cmp	r4, #2
 800ae0c:	d015      	beq.n	800ae3a <__ieee754_atan2+0x11a>
 800ae0e:	2c00      	cmp	r4, #0
 800ae10:	d0a7      	beq.n	800ad62 <__ieee754_atan2+0x42>
 800ae12:	a319      	add	r3, pc, #100	; (adr r3, 800ae78 <__ieee754_atan2+0x158>)
 800ae14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae18:	f7f5 f9ee 	bl	80001f8 <__aeabi_dsub>
 800ae1c:	a318      	add	r3, pc, #96	; (adr r3, 800ae80 <__ieee754_atan2+0x160>)
 800ae1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae22:	e014      	b.n	800ae4e <__ieee754_atan2+0x12e>
 800ae24:	a118      	add	r1, pc, #96	; (adr r1, 800ae88 <__ieee754_atan2+0x168>)
 800ae26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae2a:	e7ec      	b.n	800ae06 <__ieee754_atan2+0xe6>
 800ae2c:	2000      	movs	r0, #0
 800ae2e:	2100      	movs	r1, #0
 800ae30:	e7e9      	b.n	800ae06 <__ieee754_atan2+0xe6>
 800ae32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae36:	4619      	mov	r1, r3
 800ae38:	e793      	b.n	800ad62 <__ieee754_atan2+0x42>
 800ae3a:	a30f      	add	r3, pc, #60	; (adr r3, 800ae78 <__ieee754_atan2+0x158>)
 800ae3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae40:	f7f5 f9da 	bl	80001f8 <__aeabi_dsub>
 800ae44:	4602      	mov	r2, r0
 800ae46:	460b      	mov	r3, r1
 800ae48:	a10d      	add	r1, pc, #52	; (adr r1, 800ae80 <__ieee754_atan2+0x160>)
 800ae4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae4e:	f7f5 f9d3 	bl	80001f8 <__aeabi_dsub>
 800ae52:	e786      	b.n	800ad62 <__ieee754_atan2+0x42>
 800ae54:	a10a      	add	r1, pc, #40	; (adr r1, 800ae80 <__ieee754_atan2+0x160>)
 800ae56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae5a:	e782      	b.n	800ad62 <__ieee754_atan2+0x42>
 800ae5c:	a10c      	add	r1, pc, #48	; (adr r1, 800ae90 <__ieee754_atan2+0x170>)
 800ae5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae62:	e77e      	b.n	800ad62 <__ieee754_atan2+0x42>
 800ae64:	2000      	movs	r0, #0
 800ae66:	2100      	movs	r1, #0
 800ae68:	e77b      	b.n	800ad62 <__ieee754_atan2+0x42>
 800ae6a:	a107      	add	r1, pc, #28	; (adr r1, 800ae88 <__ieee754_atan2+0x168>)
 800ae6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae70:	e777      	b.n	800ad62 <__ieee754_atan2+0x42>
 800ae72:	bf00      	nop
 800ae74:	f3af 8000 	nop.w
 800ae78:	33145c07 	.word	0x33145c07
 800ae7c:	3ca1a626 	.word	0x3ca1a626
 800ae80:	54442d18 	.word	0x54442d18
 800ae84:	400921fb 	.word	0x400921fb
 800ae88:	54442d18 	.word	0x54442d18
 800ae8c:	3ff921fb 	.word	0x3ff921fb
 800ae90:	54442d18 	.word	0x54442d18
 800ae94:	3fe921fb 	.word	0x3fe921fb
 800ae98:	0800cbf8 	.word	0x0800cbf8
 800ae9c:	0800cc10 	.word	0x0800cc10
 800aea0:	54442d18 	.word	0x54442d18
 800aea4:	c00921fb 	.word	0xc00921fb
 800aea8:	54442d18 	.word	0x54442d18
 800aeac:	bff921fb 	.word	0xbff921fb
 800aeb0:	7ff00000 	.word	0x7ff00000
 800aeb4:	00000000 	.word	0x00000000

0800aeb8 <__ieee754_pow>:
 800aeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aebc:	ed2d 8b06 	vpush	{d8-d10}
 800aec0:	b08d      	sub	sp, #52	; 0x34
 800aec2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800aec6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800aeca:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800aece:	ea56 0100 	orrs.w	r1, r6, r0
 800aed2:	ec53 2b10 	vmov	r2, r3, d0
 800aed6:	f000 84d1 	beq.w	800b87c <__ieee754_pow+0x9c4>
 800aeda:	497f      	ldr	r1, [pc, #508]	; (800b0d8 <__ieee754_pow+0x220>)
 800aedc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800aee0:	428c      	cmp	r4, r1
 800aee2:	ee10 8a10 	vmov	r8, s0
 800aee6:	4699      	mov	r9, r3
 800aee8:	dc09      	bgt.n	800aefe <__ieee754_pow+0x46>
 800aeea:	d103      	bne.n	800aef4 <__ieee754_pow+0x3c>
 800aeec:	b97a      	cbnz	r2, 800af0e <__ieee754_pow+0x56>
 800aeee:	42a6      	cmp	r6, r4
 800aef0:	dd02      	ble.n	800aef8 <__ieee754_pow+0x40>
 800aef2:	e00c      	b.n	800af0e <__ieee754_pow+0x56>
 800aef4:	428e      	cmp	r6, r1
 800aef6:	dc02      	bgt.n	800aefe <__ieee754_pow+0x46>
 800aef8:	428e      	cmp	r6, r1
 800aefa:	d110      	bne.n	800af1e <__ieee754_pow+0x66>
 800aefc:	b178      	cbz	r0, 800af1e <__ieee754_pow+0x66>
 800aefe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800af02:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800af06:	ea54 0308 	orrs.w	r3, r4, r8
 800af0a:	f000 84b7 	beq.w	800b87c <__ieee754_pow+0x9c4>
 800af0e:	4873      	ldr	r0, [pc, #460]	; (800b0dc <__ieee754_pow+0x224>)
 800af10:	b00d      	add	sp, #52	; 0x34
 800af12:	ecbd 8b06 	vpop	{d8-d10}
 800af16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af1a:	f001 bd05 	b.w	800c928 <nan>
 800af1e:	f1b9 0f00 	cmp.w	r9, #0
 800af22:	da36      	bge.n	800af92 <__ieee754_pow+0xda>
 800af24:	496e      	ldr	r1, [pc, #440]	; (800b0e0 <__ieee754_pow+0x228>)
 800af26:	428e      	cmp	r6, r1
 800af28:	dc51      	bgt.n	800afce <__ieee754_pow+0x116>
 800af2a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800af2e:	428e      	cmp	r6, r1
 800af30:	f340 84af 	ble.w	800b892 <__ieee754_pow+0x9da>
 800af34:	1531      	asrs	r1, r6, #20
 800af36:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800af3a:	2914      	cmp	r1, #20
 800af3c:	dd0f      	ble.n	800af5e <__ieee754_pow+0xa6>
 800af3e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800af42:	fa20 fc01 	lsr.w	ip, r0, r1
 800af46:	fa0c f101 	lsl.w	r1, ip, r1
 800af4a:	4281      	cmp	r1, r0
 800af4c:	f040 84a1 	bne.w	800b892 <__ieee754_pow+0x9da>
 800af50:	f00c 0c01 	and.w	ip, ip, #1
 800af54:	f1cc 0102 	rsb	r1, ip, #2
 800af58:	9100      	str	r1, [sp, #0]
 800af5a:	b180      	cbz	r0, 800af7e <__ieee754_pow+0xc6>
 800af5c:	e059      	b.n	800b012 <__ieee754_pow+0x15a>
 800af5e:	2800      	cmp	r0, #0
 800af60:	d155      	bne.n	800b00e <__ieee754_pow+0x156>
 800af62:	f1c1 0114 	rsb	r1, r1, #20
 800af66:	fa46 fc01 	asr.w	ip, r6, r1
 800af6a:	fa0c f101 	lsl.w	r1, ip, r1
 800af6e:	42b1      	cmp	r1, r6
 800af70:	f040 848c 	bne.w	800b88c <__ieee754_pow+0x9d4>
 800af74:	f00c 0c01 	and.w	ip, ip, #1
 800af78:	f1cc 0102 	rsb	r1, ip, #2
 800af7c:	9100      	str	r1, [sp, #0]
 800af7e:	4959      	ldr	r1, [pc, #356]	; (800b0e4 <__ieee754_pow+0x22c>)
 800af80:	428e      	cmp	r6, r1
 800af82:	d12d      	bne.n	800afe0 <__ieee754_pow+0x128>
 800af84:	2f00      	cmp	r7, #0
 800af86:	da79      	bge.n	800b07c <__ieee754_pow+0x1c4>
 800af88:	4956      	ldr	r1, [pc, #344]	; (800b0e4 <__ieee754_pow+0x22c>)
 800af8a:	2000      	movs	r0, #0
 800af8c:	f7f5 fc16 	bl	80007bc <__aeabi_ddiv>
 800af90:	e016      	b.n	800afc0 <__ieee754_pow+0x108>
 800af92:	2100      	movs	r1, #0
 800af94:	9100      	str	r1, [sp, #0]
 800af96:	2800      	cmp	r0, #0
 800af98:	d13b      	bne.n	800b012 <__ieee754_pow+0x15a>
 800af9a:	494f      	ldr	r1, [pc, #316]	; (800b0d8 <__ieee754_pow+0x220>)
 800af9c:	428e      	cmp	r6, r1
 800af9e:	d1ee      	bne.n	800af7e <__ieee754_pow+0xc6>
 800afa0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800afa4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800afa8:	ea53 0308 	orrs.w	r3, r3, r8
 800afac:	f000 8466 	beq.w	800b87c <__ieee754_pow+0x9c4>
 800afb0:	4b4d      	ldr	r3, [pc, #308]	; (800b0e8 <__ieee754_pow+0x230>)
 800afb2:	429c      	cmp	r4, r3
 800afb4:	dd0d      	ble.n	800afd2 <__ieee754_pow+0x11a>
 800afb6:	2f00      	cmp	r7, #0
 800afb8:	f280 8464 	bge.w	800b884 <__ieee754_pow+0x9cc>
 800afbc:	2000      	movs	r0, #0
 800afbe:	2100      	movs	r1, #0
 800afc0:	ec41 0b10 	vmov	d0, r0, r1
 800afc4:	b00d      	add	sp, #52	; 0x34
 800afc6:	ecbd 8b06 	vpop	{d8-d10}
 800afca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afce:	2102      	movs	r1, #2
 800afd0:	e7e0      	b.n	800af94 <__ieee754_pow+0xdc>
 800afd2:	2f00      	cmp	r7, #0
 800afd4:	daf2      	bge.n	800afbc <__ieee754_pow+0x104>
 800afd6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800afda:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800afde:	e7ef      	b.n	800afc0 <__ieee754_pow+0x108>
 800afe0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800afe4:	d104      	bne.n	800aff0 <__ieee754_pow+0x138>
 800afe6:	4610      	mov	r0, r2
 800afe8:	4619      	mov	r1, r3
 800afea:	f7f5 fabd 	bl	8000568 <__aeabi_dmul>
 800afee:	e7e7      	b.n	800afc0 <__ieee754_pow+0x108>
 800aff0:	493e      	ldr	r1, [pc, #248]	; (800b0ec <__ieee754_pow+0x234>)
 800aff2:	428f      	cmp	r7, r1
 800aff4:	d10d      	bne.n	800b012 <__ieee754_pow+0x15a>
 800aff6:	f1b9 0f00 	cmp.w	r9, #0
 800affa:	db0a      	blt.n	800b012 <__ieee754_pow+0x15a>
 800affc:	ec43 2b10 	vmov	d0, r2, r3
 800b000:	b00d      	add	sp, #52	; 0x34
 800b002:	ecbd 8b06 	vpop	{d8-d10}
 800b006:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b00a:	f000 be83 	b.w	800bd14 <__ieee754_sqrt>
 800b00e:	2100      	movs	r1, #0
 800b010:	9100      	str	r1, [sp, #0]
 800b012:	ec43 2b10 	vmov	d0, r2, r3
 800b016:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b01a:	f7ff faa1 	bl	800a560 <fabs>
 800b01e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b022:	ec51 0b10 	vmov	r0, r1, d0
 800b026:	f1b8 0f00 	cmp.w	r8, #0
 800b02a:	d12a      	bne.n	800b082 <__ieee754_pow+0x1ca>
 800b02c:	b12c      	cbz	r4, 800b03a <__ieee754_pow+0x182>
 800b02e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800b0e4 <__ieee754_pow+0x22c>
 800b032:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800b036:	45e6      	cmp	lr, ip
 800b038:	d123      	bne.n	800b082 <__ieee754_pow+0x1ca>
 800b03a:	2f00      	cmp	r7, #0
 800b03c:	da05      	bge.n	800b04a <__ieee754_pow+0x192>
 800b03e:	4602      	mov	r2, r0
 800b040:	460b      	mov	r3, r1
 800b042:	2000      	movs	r0, #0
 800b044:	4927      	ldr	r1, [pc, #156]	; (800b0e4 <__ieee754_pow+0x22c>)
 800b046:	f7f5 fbb9 	bl	80007bc <__aeabi_ddiv>
 800b04a:	f1b9 0f00 	cmp.w	r9, #0
 800b04e:	dab7      	bge.n	800afc0 <__ieee754_pow+0x108>
 800b050:	9b00      	ldr	r3, [sp, #0]
 800b052:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b056:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b05a:	4323      	orrs	r3, r4
 800b05c:	d108      	bne.n	800b070 <__ieee754_pow+0x1b8>
 800b05e:	4602      	mov	r2, r0
 800b060:	460b      	mov	r3, r1
 800b062:	4610      	mov	r0, r2
 800b064:	4619      	mov	r1, r3
 800b066:	f7f5 f8c7 	bl	80001f8 <__aeabi_dsub>
 800b06a:	4602      	mov	r2, r0
 800b06c:	460b      	mov	r3, r1
 800b06e:	e78d      	b.n	800af8c <__ieee754_pow+0xd4>
 800b070:	9b00      	ldr	r3, [sp, #0]
 800b072:	2b01      	cmp	r3, #1
 800b074:	d1a4      	bne.n	800afc0 <__ieee754_pow+0x108>
 800b076:	4602      	mov	r2, r0
 800b078:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b07c:	4610      	mov	r0, r2
 800b07e:	4619      	mov	r1, r3
 800b080:	e79e      	b.n	800afc0 <__ieee754_pow+0x108>
 800b082:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800b086:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800b08a:	950a      	str	r5, [sp, #40]	; 0x28
 800b08c:	9d00      	ldr	r5, [sp, #0]
 800b08e:	46ac      	mov	ip, r5
 800b090:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b092:	ea5c 0505 	orrs.w	r5, ip, r5
 800b096:	d0e4      	beq.n	800b062 <__ieee754_pow+0x1aa>
 800b098:	4b15      	ldr	r3, [pc, #84]	; (800b0f0 <__ieee754_pow+0x238>)
 800b09a:	429e      	cmp	r6, r3
 800b09c:	f340 80fc 	ble.w	800b298 <__ieee754_pow+0x3e0>
 800b0a0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b0a4:	429e      	cmp	r6, r3
 800b0a6:	4b10      	ldr	r3, [pc, #64]	; (800b0e8 <__ieee754_pow+0x230>)
 800b0a8:	dd07      	ble.n	800b0ba <__ieee754_pow+0x202>
 800b0aa:	429c      	cmp	r4, r3
 800b0ac:	dc0a      	bgt.n	800b0c4 <__ieee754_pow+0x20c>
 800b0ae:	2f00      	cmp	r7, #0
 800b0b0:	da84      	bge.n	800afbc <__ieee754_pow+0x104>
 800b0b2:	a307      	add	r3, pc, #28	; (adr r3, 800b0d0 <__ieee754_pow+0x218>)
 800b0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b8:	e795      	b.n	800afe6 <__ieee754_pow+0x12e>
 800b0ba:	429c      	cmp	r4, r3
 800b0bc:	dbf7      	blt.n	800b0ae <__ieee754_pow+0x1f6>
 800b0be:	4b09      	ldr	r3, [pc, #36]	; (800b0e4 <__ieee754_pow+0x22c>)
 800b0c0:	429c      	cmp	r4, r3
 800b0c2:	dd17      	ble.n	800b0f4 <__ieee754_pow+0x23c>
 800b0c4:	2f00      	cmp	r7, #0
 800b0c6:	dcf4      	bgt.n	800b0b2 <__ieee754_pow+0x1fa>
 800b0c8:	e778      	b.n	800afbc <__ieee754_pow+0x104>
 800b0ca:	bf00      	nop
 800b0cc:	f3af 8000 	nop.w
 800b0d0:	8800759c 	.word	0x8800759c
 800b0d4:	7e37e43c 	.word	0x7e37e43c
 800b0d8:	7ff00000 	.word	0x7ff00000
 800b0dc:	0800cbf0 	.word	0x0800cbf0
 800b0e0:	433fffff 	.word	0x433fffff
 800b0e4:	3ff00000 	.word	0x3ff00000
 800b0e8:	3fefffff 	.word	0x3fefffff
 800b0ec:	3fe00000 	.word	0x3fe00000
 800b0f0:	41e00000 	.word	0x41e00000
 800b0f4:	4b64      	ldr	r3, [pc, #400]	; (800b288 <__ieee754_pow+0x3d0>)
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	f7f5 f87e 	bl	80001f8 <__aeabi_dsub>
 800b0fc:	a356      	add	r3, pc, #344	; (adr r3, 800b258 <__ieee754_pow+0x3a0>)
 800b0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b102:	4604      	mov	r4, r0
 800b104:	460d      	mov	r5, r1
 800b106:	f7f5 fa2f 	bl	8000568 <__aeabi_dmul>
 800b10a:	a355      	add	r3, pc, #340	; (adr r3, 800b260 <__ieee754_pow+0x3a8>)
 800b10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b110:	4606      	mov	r6, r0
 800b112:	460f      	mov	r7, r1
 800b114:	4620      	mov	r0, r4
 800b116:	4629      	mov	r1, r5
 800b118:	f7f5 fa26 	bl	8000568 <__aeabi_dmul>
 800b11c:	4b5b      	ldr	r3, [pc, #364]	; (800b28c <__ieee754_pow+0x3d4>)
 800b11e:	4682      	mov	sl, r0
 800b120:	468b      	mov	fp, r1
 800b122:	2200      	movs	r2, #0
 800b124:	4620      	mov	r0, r4
 800b126:	4629      	mov	r1, r5
 800b128:	f7f5 fa1e 	bl	8000568 <__aeabi_dmul>
 800b12c:	4602      	mov	r2, r0
 800b12e:	460b      	mov	r3, r1
 800b130:	a14d      	add	r1, pc, #308	; (adr r1, 800b268 <__ieee754_pow+0x3b0>)
 800b132:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b136:	f7f5 f85f 	bl	80001f8 <__aeabi_dsub>
 800b13a:	4622      	mov	r2, r4
 800b13c:	462b      	mov	r3, r5
 800b13e:	f7f5 fa13 	bl	8000568 <__aeabi_dmul>
 800b142:	4602      	mov	r2, r0
 800b144:	460b      	mov	r3, r1
 800b146:	2000      	movs	r0, #0
 800b148:	4951      	ldr	r1, [pc, #324]	; (800b290 <__ieee754_pow+0x3d8>)
 800b14a:	f7f5 f855 	bl	80001f8 <__aeabi_dsub>
 800b14e:	4622      	mov	r2, r4
 800b150:	4680      	mov	r8, r0
 800b152:	4689      	mov	r9, r1
 800b154:	462b      	mov	r3, r5
 800b156:	4620      	mov	r0, r4
 800b158:	4629      	mov	r1, r5
 800b15a:	f7f5 fa05 	bl	8000568 <__aeabi_dmul>
 800b15e:	4602      	mov	r2, r0
 800b160:	460b      	mov	r3, r1
 800b162:	4640      	mov	r0, r8
 800b164:	4649      	mov	r1, r9
 800b166:	f7f5 f9ff 	bl	8000568 <__aeabi_dmul>
 800b16a:	a341      	add	r3, pc, #260	; (adr r3, 800b270 <__ieee754_pow+0x3b8>)
 800b16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b170:	f7f5 f9fa 	bl	8000568 <__aeabi_dmul>
 800b174:	4602      	mov	r2, r0
 800b176:	460b      	mov	r3, r1
 800b178:	4650      	mov	r0, sl
 800b17a:	4659      	mov	r1, fp
 800b17c:	f7f5 f83c 	bl	80001f8 <__aeabi_dsub>
 800b180:	4602      	mov	r2, r0
 800b182:	460b      	mov	r3, r1
 800b184:	4680      	mov	r8, r0
 800b186:	4689      	mov	r9, r1
 800b188:	4630      	mov	r0, r6
 800b18a:	4639      	mov	r1, r7
 800b18c:	f7f5 f836 	bl	80001fc <__adddf3>
 800b190:	2400      	movs	r4, #0
 800b192:	4632      	mov	r2, r6
 800b194:	463b      	mov	r3, r7
 800b196:	4620      	mov	r0, r4
 800b198:	460d      	mov	r5, r1
 800b19a:	f7f5 f82d 	bl	80001f8 <__aeabi_dsub>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	4640      	mov	r0, r8
 800b1a4:	4649      	mov	r1, r9
 800b1a6:	f7f5 f827 	bl	80001f8 <__aeabi_dsub>
 800b1aa:	9b00      	ldr	r3, [sp, #0]
 800b1ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1ae:	3b01      	subs	r3, #1
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	4682      	mov	sl, r0
 800b1b4:	468b      	mov	fp, r1
 800b1b6:	f040 81f1 	bne.w	800b59c <__ieee754_pow+0x6e4>
 800b1ba:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800b278 <__ieee754_pow+0x3c0>
 800b1be:	eeb0 8a47 	vmov.f32	s16, s14
 800b1c2:	eef0 8a67 	vmov.f32	s17, s15
 800b1c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b1ca:	2600      	movs	r6, #0
 800b1cc:	4632      	mov	r2, r6
 800b1ce:	463b      	mov	r3, r7
 800b1d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1d4:	f7f5 f810 	bl	80001f8 <__aeabi_dsub>
 800b1d8:	4622      	mov	r2, r4
 800b1da:	462b      	mov	r3, r5
 800b1dc:	f7f5 f9c4 	bl	8000568 <__aeabi_dmul>
 800b1e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1e4:	4680      	mov	r8, r0
 800b1e6:	4689      	mov	r9, r1
 800b1e8:	4650      	mov	r0, sl
 800b1ea:	4659      	mov	r1, fp
 800b1ec:	f7f5 f9bc 	bl	8000568 <__aeabi_dmul>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	4640      	mov	r0, r8
 800b1f6:	4649      	mov	r1, r9
 800b1f8:	f7f5 f800 	bl	80001fc <__adddf3>
 800b1fc:	4632      	mov	r2, r6
 800b1fe:	463b      	mov	r3, r7
 800b200:	4680      	mov	r8, r0
 800b202:	4689      	mov	r9, r1
 800b204:	4620      	mov	r0, r4
 800b206:	4629      	mov	r1, r5
 800b208:	f7f5 f9ae 	bl	8000568 <__aeabi_dmul>
 800b20c:	460b      	mov	r3, r1
 800b20e:	4604      	mov	r4, r0
 800b210:	460d      	mov	r5, r1
 800b212:	4602      	mov	r2, r0
 800b214:	4649      	mov	r1, r9
 800b216:	4640      	mov	r0, r8
 800b218:	f7f4 fff0 	bl	80001fc <__adddf3>
 800b21c:	4b1d      	ldr	r3, [pc, #116]	; (800b294 <__ieee754_pow+0x3dc>)
 800b21e:	4299      	cmp	r1, r3
 800b220:	ec45 4b19 	vmov	d9, r4, r5
 800b224:	4606      	mov	r6, r0
 800b226:	460f      	mov	r7, r1
 800b228:	468b      	mov	fp, r1
 800b22a:	f340 82fe 	ble.w	800b82a <__ieee754_pow+0x972>
 800b22e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b232:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b236:	4303      	orrs	r3, r0
 800b238:	f000 81f0 	beq.w	800b61c <__ieee754_pow+0x764>
 800b23c:	a310      	add	r3, pc, #64	; (adr r3, 800b280 <__ieee754_pow+0x3c8>)
 800b23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b242:	ec51 0b18 	vmov	r0, r1, d8
 800b246:	f7f5 f98f 	bl	8000568 <__aeabi_dmul>
 800b24a:	a30d      	add	r3, pc, #52	; (adr r3, 800b280 <__ieee754_pow+0x3c8>)
 800b24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b250:	e6cb      	b.n	800afea <__ieee754_pow+0x132>
 800b252:	bf00      	nop
 800b254:	f3af 8000 	nop.w
 800b258:	60000000 	.word	0x60000000
 800b25c:	3ff71547 	.word	0x3ff71547
 800b260:	f85ddf44 	.word	0xf85ddf44
 800b264:	3e54ae0b 	.word	0x3e54ae0b
 800b268:	55555555 	.word	0x55555555
 800b26c:	3fd55555 	.word	0x3fd55555
 800b270:	652b82fe 	.word	0x652b82fe
 800b274:	3ff71547 	.word	0x3ff71547
 800b278:	00000000 	.word	0x00000000
 800b27c:	bff00000 	.word	0xbff00000
 800b280:	8800759c 	.word	0x8800759c
 800b284:	7e37e43c 	.word	0x7e37e43c
 800b288:	3ff00000 	.word	0x3ff00000
 800b28c:	3fd00000 	.word	0x3fd00000
 800b290:	3fe00000 	.word	0x3fe00000
 800b294:	408fffff 	.word	0x408fffff
 800b298:	4bd7      	ldr	r3, [pc, #860]	; (800b5f8 <__ieee754_pow+0x740>)
 800b29a:	ea03 0309 	and.w	r3, r3, r9
 800b29e:	2200      	movs	r2, #0
 800b2a0:	b92b      	cbnz	r3, 800b2ae <__ieee754_pow+0x3f6>
 800b2a2:	4bd6      	ldr	r3, [pc, #856]	; (800b5fc <__ieee754_pow+0x744>)
 800b2a4:	f7f5 f960 	bl	8000568 <__aeabi_dmul>
 800b2a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b2ac:	460c      	mov	r4, r1
 800b2ae:	1523      	asrs	r3, r4, #20
 800b2b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b2b4:	4413      	add	r3, r2
 800b2b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b2b8:	4bd1      	ldr	r3, [pc, #836]	; (800b600 <__ieee754_pow+0x748>)
 800b2ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b2be:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b2c2:	429c      	cmp	r4, r3
 800b2c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b2c8:	dd08      	ble.n	800b2dc <__ieee754_pow+0x424>
 800b2ca:	4bce      	ldr	r3, [pc, #824]	; (800b604 <__ieee754_pow+0x74c>)
 800b2cc:	429c      	cmp	r4, r3
 800b2ce:	f340 8163 	ble.w	800b598 <__ieee754_pow+0x6e0>
 800b2d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b2d8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b2dc:	2400      	movs	r4, #0
 800b2de:	00e3      	lsls	r3, r4, #3
 800b2e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2e2:	4bc9      	ldr	r3, [pc, #804]	; (800b608 <__ieee754_pow+0x750>)
 800b2e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b2e8:	ed93 7b00 	vldr	d7, [r3]
 800b2ec:	4629      	mov	r1, r5
 800b2ee:	ec53 2b17 	vmov	r2, r3, d7
 800b2f2:	eeb0 8a47 	vmov.f32	s16, s14
 800b2f6:	eef0 8a67 	vmov.f32	s17, s15
 800b2fa:	4682      	mov	sl, r0
 800b2fc:	f7f4 ff7c 	bl	80001f8 <__aeabi_dsub>
 800b300:	4652      	mov	r2, sl
 800b302:	4606      	mov	r6, r0
 800b304:	460f      	mov	r7, r1
 800b306:	462b      	mov	r3, r5
 800b308:	ec51 0b18 	vmov	r0, r1, d8
 800b30c:	f7f4 ff76 	bl	80001fc <__adddf3>
 800b310:	4602      	mov	r2, r0
 800b312:	460b      	mov	r3, r1
 800b314:	2000      	movs	r0, #0
 800b316:	49bd      	ldr	r1, [pc, #756]	; (800b60c <__ieee754_pow+0x754>)
 800b318:	f7f5 fa50 	bl	80007bc <__aeabi_ddiv>
 800b31c:	ec41 0b19 	vmov	d9, r0, r1
 800b320:	4602      	mov	r2, r0
 800b322:	460b      	mov	r3, r1
 800b324:	4630      	mov	r0, r6
 800b326:	4639      	mov	r1, r7
 800b328:	f7f5 f91e 	bl	8000568 <__aeabi_dmul>
 800b32c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b330:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b334:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b338:	2300      	movs	r3, #0
 800b33a:	9304      	str	r3, [sp, #16]
 800b33c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b340:	46ab      	mov	fp, r5
 800b342:	106d      	asrs	r5, r5, #1
 800b344:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b348:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b34c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b350:	2200      	movs	r2, #0
 800b352:	4640      	mov	r0, r8
 800b354:	4649      	mov	r1, r9
 800b356:	4614      	mov	r4, r2
 800b358:	461d      	mov	r5, r3
 800b35a:	f7f5 f905 	bl	8000568 <__aeabi_dmul>
 800b35e:	4602      	mov	r2, r0
 800b360:	460b      	mov	r3, r1
 800b362:	4630      	mov	r0, r6
 800b364:	4639      	mov	r1, r7
 800b366:	f7f4 ff47 	bl	80001f8 <__aeabi_dsub>
 800b36a:	ec53 2b18 	vmov	r2, r3, d8
 800b36e:	4606      	mov	r6, r0
 800b370:	460f      	mov	r7, r1
 800b372:	4620      	mov	r0, r4
 800b374:	4629      	mov	r1, r5
 800b376:	f7f4 ff3f 	bl	80001f8 <__aeabi_dsub>
 800b37a:	4602      	mov	r2, r0
 800b37c:	460b      	mov	r3, r1
 800b37e:	4650      	mov	r0, sl
 800b380:	4659      	mov	r1, fp
 800b382:	f7f4 ff39 	bl	80001f8 <__aeabi_dsub>
 800b386:	4642      	mov	r2, r8
 800b388:	464b      	mov	r3, r9
 800b38a:	f7f5 f8ed 	bl	8000568 <__aeabi_dmul>
 800b38e:	4602      	mov	r2, r0
 800b390:	460b      	mov	r3, r1
 800b392:	4630      	mov	r0, r6
 800b394:	4639      	mov	r1, r7
 800b396:	f7f4 ff2f 	bl	80001f8 <__aeabi_dsub>
 800b39a:	ec53 2b19 	vmov	r2, r3, d9
 800b39e:	f7f5 f8e3 	bl	8000568 <__aeabi_dmul>
 800b3a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b3a6:	ec41 0b18 	vmov	d8, r0, r1
 800b3aa:	4610      	mov	r0, r2
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	f7f5 f8db 	bl	8000568 <__aeabi_dmul>
 800b3b2:	a37d      	add	r3, pc, #500	; (adr r3, 800b5a8 <__ieee754_pow+0x6f0>)
 800b3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b8:	4604      	mov	r4, r0
 800b3ba:	460d      	mov	r5, r1
 800b3bc:	f7f5 f8d4 	bl	8000568 <__aeabi_dmul>
 800b3c0:	a37b      	add	r3, pc, #492	; (adr r3, 800b5b0 <__ieee754_pow+0x6f8>)
 800b3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c6:	f7f4 ff19 	bl	80001fc <__adddf3>
 800b3ca:	4622      	mov	r2, r4
 800b3cc:	462b      	mov	r3, r5
 800b3ce:	f7f5 f8cb 	bl	8000568 <__aeabi_dmul>
 800b3d2:	a379      	add	r3, pc, #484	; (adr r3, 800b5b8 <__ieee754_pow+0x700>)
 800b3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d8:	f7f4 ff10 	bl	80001fc <__adddf3>
 800b3dc:	4622      	mov	r2, r4
 800b3de:	462b      	mov	r3, r5
 800b3e0:	f7f5 f8c2 	bl	8000568 <__aeabi_dmul>
 800b3e4:	a376      	add	r3, pc, #472	; (adr r3, 800b5c0 <__ieee754_pow+0x708>)
 800b3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ea:	f7f4 ff07 	bl	80001fc <__adddf3>
 800b3ee:	4622      	mov	r2, r4
 800b3f0:	462b      	mov	r3, r5
 800b3f2:	f7f5 f8b9 	bl	8000568 <__aeabi_dmul>
 800b3f6:	a374      	add	r3, pc, #464	; (adr r3, 800b5c8 <__ieee754_pow+0x710>)
 800b3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fc:	f7f4 fefe 	bl	80001fc <__adddf3>
 800b400:	4622      	mov	r2, r4
 800b402:	462b      	mov	r3, r5
 800b404:	f7f5 f8b0 	bl	8000568 <__aeabi_dmul>
 800b408:	a371      	add	r3, pc, #452	; (adr r3, 800b5d0 <__ieee754_pow+0x718>)
 800b40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40e:	f7f4 fef5 	bl	80001fc <__adddf3>
 800b412:	4622      	mov	r2, r4
 800b414:	4606      	mov	r6, r0
 800b416:	460f      	mov	r7, r1
 800b418:	462b      	mov	r3, r5
 800b41a:	4620      	mov	r0, r4
 800b41c:	4629      	mov	r1, r5
 800b41e:	f7f5 f8a3 	bl	8000568 <__aeabi_dmul>
 800b422:	4602      	mov	r2, r0
 800b424:	460b      	mov	r3, r1
 800b426:	4630      	mov	r0, r6
 800b428:	4639      	mov	r1, r7
 800b42a:	f7f5 f89d 	bl	8000568 <__aeabi_dmul>
 800b42e:	4642      	mov	r2, r8
 800b430:	4604      	mov	r4, r0
 800b432:	460d      	mov	r5, r1
 800b434:	464b      	mov	r3, r9
 800b436:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b43a:	f7f4 fedf 	bl	80001fc <__adddf3>
 800b43e:	ec53 2b18 	vmov	r2, r3, d8
 800b442:	f7f5 f891 	bl	8000568 <__aeabi_dmul>
 800b446:	4622      	mov	r2, r4
 800b448:	462b      	mov	r3, r5
 800b44a:	f7f4 fed7 	bl	80001fc <__adddf3>
 800b44e:	4642      	mov	r2, r8
 800b450:	4682      	mov	sl, r0
 800b452:	468b      	mov	fp, r1
 800b454:	464b      	mov	r3, r9
 800b456:	4640      	mov	r0, r8
 800b458:	4649      	mov	r1, r9
 800b45a:	f7f5 f885 	bl	8000568 <__aeabi_dmul>
 800b45e:	4b6c      	ldr	r3, [pc, #432]	; (800b610 <__ieee754_pow+0x758>)
 800b460:	2200      	movs	r2, #0
 800b462:	4606      	mov	r6, r0
 800b464:	460f      	mov	r7, r1
 800b466:	f7f4 fec9 	bl	80001fc <__adddf3>
 800b46a:	4652      	mov	r2, sl
 800b46c:	465b      	mov	r3, fp
 800b46e:	f7f4 fec5 	bl	80001fc <__adddf3>
 800b472:	9c04      	ldr	r4, [sp, #16]
 800b474:	460d      	mov	r5, r1
 800b476:	4622      	mov	r2, r4
 800b478:	460b      	mov	r3, r1
 800b47a:	4640      	mov	r0, r8
 800b47c:	4649      	mov	r1, r9
 800b47e:	f7f5 f873 	bl	8000568 <__aeabi_dmul>
 800b482:	4b63      	ldr	r3, [pc, #396]	; (800b610 <__ieee754_pow+0x758>)
 800b484:	4680      	mov	r8, r0
 800b486:	4689      	mov	r9, r1
 800b488:	2200      	movs	r2, #0
 800b48a:	4620      	mov	r0, r4
 800b48c:	4629      	mov	r1, r5
 800b48e:	f7f4 feb3 	bl	80001f8 <__aeabi_dsub>
 800b492:	4632      	mov	r2, r6
 800b494:	463b      	mov	r3, r7
 800b496:	f7f4 feaf 	bl	80001f8 <__aeabi_dsub>
 800b49a:	4602      	mov	r2, r0
 800b49c:	460b      	mov	r3, r1
 800b49e:	4650      	mov	r0, sl
 800b4a0:	4659      	mov	r1, fp
 800b4a2:	f7f4 fea9 	bl	80001f8 <__aeabi_dsub>
 800b4a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4aa:	f7f5 f85d 	bl	8000568 <__aeabi_dmul>
 800b4ae:	4622      	mov	r2, r4
 800b4b0:	4606      	mov	r6, r0
 800b4b2:	460f      	mov	r7, r1
 800b4b4:	462b      	mov	r3, r5
 800b4b6:	ec51 0b18 	vmov	r0, r1, d8
 800b4ba:	f7f5 f855 	bl	8000568 <__aeabi_dmul>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	4639      	mov	r1, r7
 800b4c6:	f7f4 fe99 	bl	80001fc <__adddf3>
 800b4ca:	4606      	mov	r6, r0
 800b4cc:	460f      	mov	r7, r1
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	4640      	mov	r0, r8
 800b4d4:	4649      	mov	r1, r9
 800b4d6:	f7f4 fe91 	bl	80001fc <__adddf3>
 800b4da:	9c04      	ldr	r4, [sp, #16]
 800b4dc:	a33e      	add	r3, pc, #248	; (adr r3, 800b5d8 <__ieee754_pow+0x720>)
 800b4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	460d      	mov	r5, r1
 800b4e6:	f7f5 f83f 	bl	8000568 <__aeabi_dmul>
 800b4ea:	4642      	mov	r2, r8
 800b4ec:	ec41 0b18 	vmov	d8, r0, r1
 800b4f0:	464b      	mov	r3, r9
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	4629      	mov	r1, r5
 800b4f6:	f7f4 fe7f 	bl	80001f8 <__aeabi_dsub>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	4630      	mov	r0, r6
 800b500:	4639      	mov	r1, r7
 800b502:	f7f4 fe79 	bl	80001f8 <__aeabi_dsub>
 800b506:	a336      	add	r3, pc, #216	; (adr r3, 800b5e0 <__ieee754_pow+0x728>)
 800b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50c:	f7f5 f82c 	bl	8000568 <__aeabi_dmul>
 800b510:	a335      	add	r3, pc, #212	; (adr r3, 800b5e8 <__ieee754_pow+0x730>)
 800b512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b516:	4606      	mov	r6, r0
 800b518:	460f      	mov	r7, r1
 800b51a:	4620      	mov	r0, r4
 800b51c:	4629      	mov	r1, r5
 800b51e:	f7f5 f823 	bl	8000568 <__aeabi_dmul>
 800b522:	4602      	mov	r2, r0
 800b524:	460b      	mov	r3, r1
 800b526:	4630      	mov	r0, r6
 800b528:	4639      	mov	r1, r7
 800b52a:	f7f4 fe67 	bl	80001fc <__adddf3>
 800b52e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b530:	4b38      	ldr	r3, [pc, #224]	; (800b614 <__ieee754_pow+0x75c>)
 800b532:	4413      	add	r3, r2
 800b534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b538:	f7f4 fe60 	bl	80001fc <__adddf3>
 800b53c:	4682      	mov	sl, r0
 800b53e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b540:	468b      	mov	fp, r1
 800b542:	f7f4 ffa7 	bl	8000494 <__aeabi_i2d>
 800b546:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b548:	4b33      	ldr	r3, [pc, #204]	; (800b618 <__ieee754_pow+0x760>)
 800b54a:	4413      	add	r3, r2
 800b54c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b550:	4606      	mov	r6, r0
 800b552:	460f      	mov	r7, r1
 800b554:	4652      	mov	r2, sl
 800b556:	465b      	mov	r3, fp
 800b558:	ec51 0b18 	vmov	r0, r1, d8
 800b55c:	f7f4 fe4e 	bl	80001fc <__adddf3>
 800b560:	4642      	mov	r2, r8
 800b562:	464b      	mov	r3, r9
 800b564:	f7f4 fe4a 	bl	80001fc <__adddf3>
 800b568:	4632      	mov	r2, r6
 800b56a:	463b      	mov	r3, r7
 800b56c:	f7f4 fe46 	bl	80001fc <__adddf3>
 800b570:	9c04      	ldr	r4, [sp, #16]
 800b572:	4632      	mov	r2, r6
 800b574:	463b      	mov	r3, r7
 800b576:	4620      	mov	r0, r4
 800b578:	460d      	mov	r5, r1
 800b57a:	f7f4 fe3d 	bl	80001f8 <__aeabi_dsub>
 800b57e:	4642      	mov	r2, r8
 800b580:	464b      	mov	r3, r9
 800b582:	f7f4 fe39 	bl	80001f8 <__aeabi_dsub>
 800b586:	ec53 2b18 	vmov	r2, r3, d8
 800b58a:	f7f4 fe35 	bl	80001f8 <__aeabi_dsub>
 800b58e:	4602      	mov	r2, r0
 800b590:	460b      	mov	r3, r1
 800b592:	4650      	mov	r0, sl
 800b594:	4659      	mov	r1, fp
 800b596:	e606      	b.n	800b1a6 <__ieee754_pow+0x2ee>
 800b598:	2401      	movs	r4, #1
 800b59a:	e6a0      	b.n	800b2de <__ieee754_pow+0x426>
 800b59c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800b5f0 <__ieee754_pow+0x738>
 800b5a0:	e60d      	b.n	800b1be <__ieee754_pow+0x306>
 800b5a2:	bf00      	nop
 800b5a4:	f3af 8000 	nop.w
 800b5a8:	4a454eef 	.word	0x4a454eef
 800b5ac:	3fca7e28 	.word	0x3fca7e28
 800b5b0:	93c9db65 	.word	0x93c9db65
 800b5b4:	3fcd864a 	.word	0x3fcd864a
 800b5b8:	a91d4101 	.word	0xa91d4101
 800b5bc:	3fd17460 	.word	0x3fd17460
 800b5c0:	518f264d 	.word	0x518f264d
 800b5c4:	3fd55555 	.word	0x3fd55555
 800b5c8:	db6fabff 	.word	0xdb6fabff
 800b5cc:	3fdb6db6 	.word	0x3fdb6db6
 800b5d0:	33333303 	.word	0x33333303
 800b5d4:	3fe33333 	.word	0x3fe33333
 800b5d8:	e0000000 	.word	0xe0000000
 800b5dc:	3feec709 	.word	0x3feec709
 800b5e0:	dc3a03fd 	.word	0xdc3a03fd
 800b5e4:	3feec709 	.word	0x3feec709
 800b5e8:	145b01f5 	.word	0x145b01f5
 800b5ec:	be3e2fe0 	.word	0xbe3e2fe0
 800b5f0:	00000000 	.word	0x00000000
 800b5f4:	3ff00000 	.word	0x3ff00000
 800b5f8:	7ff00000 	.word	0x7ff00000
 800b5fc:	43400000 	.word	0x43400000
 800b600:	0003988e 	.word	0x0003988e
 800b604:	000bb679 	.word	0x000bb679
 800b608:	0800cc28 	.word	0x0800cc28
 800b60c:	3ff00000 	.word	0x3ff00000
 800b610:	40080000 	.word	0x40080000
 800b614:	0800cc48 	.word	0x0800cc48
 800b618:	0800cc38 	.word	0x0800cc38
 800b61c:	a3b5      	add	r3, pc, #724	; (adr r3, 800b8f4 <__ieee754_pow+0xa3c>)
 800b61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b622:	4640      	mov	r0, r8
 800b624:	4649      	mov	r1, r9
 800b626:	f7f4 fde9 	bl	80001fc <__adddf3>
 800b62a:	4622      	mov	r2, r4
 800b62c:	ec41 0b1a 	vmov	d10, r0, r1
 800b630:	462b      	mov	r3, r5
 800b632:	4630      	mov	r0, r6
 800b634:	4639      	mov	r1, r7
 800b636:	f7f4 fddf 	bl	80001f8 <__aeabi_dsub>
 800b63a:	4602      	mov	r2, r0
 800b63c:	460b      	mov	r3, r1
 800b63e:	ec51 0b1a 	vmov	r0, r1, d10
 800b642:	f7f5 fa21 	bl	8000a88 <__aeabi_dcmpgt>
 800b646:	2800      	cmp	r0, #0
 800b648:	f47f adf8 	bne.w	800b23c <__ieee754_pow+0x384>
 800b64c:	4aa4      	ldr	r2, [pc, #656]	; (800b8e0 <__ieee754_pow+0xa28>)
 800b64e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b652:	4293      	cmp	r3, r2
 800b654:	f340 810b 	ble.w	800b86e <__ieee754_pow+0x9b6>
 800b658:	151b      	asrs	r3, r3, #20
 800b65a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b65e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b662:	fa4a f303 	asr.w	r3, sl, r3
 800b666:	445b      	add	r3, fp
 800b668:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b66c:	4e9d      	ldr	r6, [pc, #628]	; (800b8e4 <__ieee754_pow+0xa2c>)
 800b66e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b672:	4116      	asrs	r6, r2
 800b674:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b678:	2000      	movs	r0, #0
 800b67a:	ea23 0106 	bic.w	r1, r3, r6
 800b67e:	f1c2 0214 	rsb	r2, r2, #20
 800b682:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b686:	fa4a fa02 	asr.w	sl, sl, r2
 800b68a:	f1bb 0f00 	cmp.w	fp, #0
 800b68e:	4602      	mov	r2, r0
 800b690:	460b      	mov	r3, r1
 800b692:	4620      	mov	r0, r4
 800b694:	4629      	mov	r1, r5
 800b696:	bfb8      	it	lt
 800b698:	f1ca 0a00 	rsblt	sl, sl, #0
 800b69c:	f7f4 fdac 	bl	80001f8 <__aeabi_dsub>
 800b6a0:	ec41 0b19 	vmov	d9, r0, r1
 800b6a4:	4642      	mov	r2, r8
 800b6a6:	464b      	mov	r3, r9
 800b6a8:	ec51 0b19 	vmov	r0, r1, d9
 800b6ac:	f7f4 fda6 	bl	80001fc <__adddf3>
 800b6b0:	2400      	movs	r4, #0
 800b6b2:	a379      	add	r3, pc, #484	; (adr r3, 800b898 <__ieee754_pow+0x9e0>)
 800b6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b8:	4620      	mov	r0, r4
 800b6ba:	460d      	mov	r5, r1
 800b6bc:	f7f4 ff54 	bl	8000568 <__aeabi_dmul>
 800b6c0:	ec53 2b19 	vmov	r2, r3, d9
 800b6c4:	4606      	mov	r6, r0
 800b6c6:	460f      	mov	r7, r1
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	f7f4 fd94 	bl	80001f8 <__aeabi_dsub>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	4640      	mov	r0, r8
 800b6d6:	4649      	mov	r1, r9
 800b6d8:	f7f4 fd8e 	bl	80001f8 <__aeabi_dsub>
 800b6dc:	a370      	add	r3, pc, #448	; (adr r3, 800b8a0 <__ieee754_pow+0x9e8>)
 800b6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e2:	f7f4 ff41 	bl	8000568 <__aeabi_dmul>
 800b6e6:	a370      	add	r3, pc, #448	; (adr r3, 800b8a8 <__ieee754_pow+0x9f0>)
 800b6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ec:	4680      	mov	r8, r0
 800b6ee:	4689      	mov	r9, r1
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	4629      	mov	r1, r5
 800b6f4:	f7f4 ff38 	bl	8000568 <__aeabi_dmul>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	4640      	mov	r0, r8
 800b6fe:	4649      	mov	r1, r9
 800b700:	f7f4 fd7c 	bl	80001fc <__adddf3>
 800b704:	4604      	mov	r4, r0
 800b706:	460d      	mov	r5, r1
 800b708:	4602      	mov	r2, r0
 800b70a:	460b      	mov	r3, r1
 800b70c:	4630      	mov	r0, r6
 800b70e:	4639      	mov	r1, r7
 800b710:	f7f4 fd74 	bl	80001fc <__adddf3>
 800b714:	4632      	mov	r2, r6
 800b716:	463b      	mov	r3, r7
 800b718:	4680      	mov	r8, r0
 800b71a:	4689      	mov	r9, r1
 800b71c:	f7f4 fd6c 	bl	80001f8 <__aeabi_dsub>
 800b720:	4602      	mov	r2, r0
 800b722:	460b      	mov	r3, r1
 800b724:	4620      	mov	r0, r4
 800b726:	4629      	mov	r1, r5
 800b728:	f7f4 fd66 	bl	80001f8 <__aeabi_dsub>
 800b72c:	4642      	mov	r2, r8
 800b72e:	4606      	mov	r6, r0
 800b730:	460f      	mov	r7, r1
 800b732:	464b      	mov	r3, r9
 800b734:	4640      	mov	r0, r8
 800b736:	4649      	mov	r1, r9
 800b738:	f7f4 ff16 	bl	8000568 <__aeabi_dmul>
 800b73c:	a35c      	add	r3, pc, #368	; (adr r3, 800b8b0 <__ieee754_pow+0x9f8>)
 800b73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b742:	4604      	mov	r4, r0
 800b744:	460d      	mov	r5, r1
 800b746:	f7f4 ff0f 	bl	8000568 <__aeabi_dmul>
 800b74a:	a35b      	add	r3, pc, #364	; (adr r3, 800b8b8 <__ieee754_pow+0xa00>)
 800b74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b750:	f7f4 fd52 	bl	80001f8 <__aeabi_dsub>
 800b754:	4622      	mov	r2, r4
 800b756:	462b      	mov	r3, r5
 800b758:	f7f4 ff06 	bl	8000568 <__aeabi_dmul>
 800b75c:	a358      	add	r3, pc, #352	; (adr r3, 800b8c0 <__ieee754_pow+0xa08>)
 800b75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b762:	f7f4 fd4b 	bl	80001fc <__adddf3>
 800b766:	4622      	mov	r2, r4
 800b768:	462b      	mov	r3, r5
 800b76a:	f7f4 fefd 	bl	8000568 <__aeabi_dmul>
 800b76e:	a356      	add	r3, pc, #344	; (adr r3, 800b8c8 <__ieee754_pow+0xa10>)
 800b770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b774:	f7f4 fd40 	bl	80001f8 <__aeabi_dsub>
 800b778:	4622      	mov	r2, r4
 800b77a:	462b      	mov	r3, r5
 800b77c:	f7f4 fef4 	bl	8000568 <__aeabi_dmul>
 800b780:	a353      	add	r3, pc, #332	; (adr r3, 800b8d0 <__ieee754_pow+0xa18>)
 800b782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b786:	f7f4 fd39 	bl	80001fc <__adddf3>
 800b78a:	4622      	mov	r2, r4
 800b78c:	462b      	mov	r3, r5
 800b78e:	f7f4 feeb 	bl	8000568 <__aeabi_dmul>
 800b792:	4602      	mov	r2, r0
 800b794:	460b      	mov	r3, r1
 800b796:	4640      	mov	r0, r8
 800b798:	4649      	mov	r1, r9
 800b79a:	f7f4 fd2d 	bl	80001f8 <__aeabi_dsub>
 800b79e:	4604      	mov	r4, r0
 800b7a0:	460d      	mov	r5, r1
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	4640      	mov	r0, r8
 800b7a8:	4649      	mov	r1, r9
 800b7aa:	f7f4 fedd 	bl	8000568 <__aeabi_dmul>
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	ec41 0b19 	vmov	d9, r0, r1
 800b7b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	4629      	mov	r1, r5
 800b7bc:	f7f4 fd1c 	bl	80001f8 <__aeabi_dsub>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	ec51 0b19 	vmov	r0, r1, d9
 800b7c8:	f7f4 fff8 	bl	80007bc <__aeabi_ddiv>
 800b7cc:	4632      	mov	r2, r6
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	460d      	mov	r5, r1
 800b7d2:	463b      	mov	r3, r7
 800b7d4:	4640      	mov	r0, r8
 800b7d6:	4649      	mov	r1, r9
 800b7d8:	f7f4 fec6 	bl	8000568 <__aeabi_dmul>
 800b7dc:	4632      	mov	r2, r6
 800b7de:	463b      	mov	r3, r7
 800b7e0:	f7f4 fd0c 	bl	80001fc <__adddf3>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	4629      	mov	r1, r5
 800b7ec:	f7f4 fd04 	bl	80001f8 <__aeabi_dsub>
 800b7f0:	4642      	mov	r2, r8
 800b7f2:	464b      	mov	r3, r9
 800b7f4:	f7f4 fd00 	bl	80001f8 <__aeabi_dsub>
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	493a      	ldr	r1, [pc, #232]	; (800b8e8 <__ieee754_pow+0xa30>)
 800b7fe:	2000      	movs	r0, #0
 800b800:	f7f4 fcfa 	bl	80001f8 <__aeabi_dsub>
 800b804:	e9cd 0100 	strd	r0, r1, [sp]
 800b808:	9b01      	ldr	r3, [sp, #4]
 800b80a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b80e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b812:	da2f      	bge.n	800b874 <__ieee754_pow+0x9bc>
 800b814:	4650      	mov	r0, sl
 800b816:	ed9d 0b00 	vldr	d0, [sp]
 800b81a:	f001 f919 	bl	800ca50 <scalbn>
 800b81e:	ec51 0b10 	vmov	r0, r1, d0
 800b822:	ec53 2b18 	vmov	r2, r3, d8
 800b826:	f7ff bbe0 	b.w	800afea <__ieee754_pow+0x132>
 800b82a:	4b30      	ldr	r3, [pc, #192]	; (800b8ec <__ieee754_pow+0xa34>)
 800b82c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b830:	429e      	cmp	r6, r3
 800b832:	f77f af0b 	ble.w	800b64c <__ieee754_pow+0x794>
 800b836:	4b2e      	ldr	r3, [pc, #184]	; (800b8f0 <__ieee754_pow+0xa38>)
 800b838:	440b      	add	r3, r1
 800b83a:	4303      	orrs	r3, r0
 800b83c:	d00b      	beq.n	800b856 <__ieee754_pow+0x99e>
 800b83e:	a326      	add	r3, pc, #152	; (adr r3, 800b8d8 <__ieee754_pow+0xa20>)
 800b840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b844:	ec51 0b18 	vmov	r0, r1, d8
 800b848:	f7f4 fe8e 	bl	8000568 <__aeabi_dmul>
 800b84c:	a322      	add	r3, pc, #136	; (adr r3, 800b8d8 <__ieee754_pow+0xa20>)
 800b84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b852:	f7ff bbca 	b.w	800afea <__ieee754_pow+0x132>
 800b856:	4622      	mov	r2, r4
 800b858:	462b      	mov	r3, r5
 800b85a:	f7f4 fccd 	bl	80001f8 <__aeabi_dsub>
 800b85e:	4642      	mov	r2, r8
 800b860:	464b      	mov	r3, r9
 800b862:	f7f5 f907 	bl	8000a74 <__aeabi_dcmpge>
 800b866:	2800      	cmp	r0, #0
 800b868:	f43f aef0 	beq.w	800b64c <__ieee754_pow+0x794>
 800b86c:	e7e7      	b.n	800b83e <__ieee754_pow+0x986>
 800b86e:	f04f 0a00 	mov.w	sl, #0
 800b872:	e717      	b.n	800b6a4 <__ieee754_pow+0x7ec>
 800b874:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b878:	4619      	mov	r1, r3
 800b87a:	e7d2      	b.n	800b822 <__ieee754_pow+0x96a>
 800b87c:	491a      	ldr	r1, [pc, #104]	; (800b8e8 <__ieee754_pow+0xa30>)
 800b87e:	2000      	movs	r0, #0
 800b880:	f7ff bb9e 	b.w	800afc0 <__ieee754_pow+0x108>
 800b884:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b888:	f7ff bb9a 	b.w	800afc0 <__ieee754_pow+0x108>
 800b88c:	9000      	str	r0, [sp, #0]
 800b88e:	f7ff bb76 	b.w	800af7e <__ieee754_pow+0xc6>
 800b892:	2100      	movs	r1, #0
 800b894:	f7ff bb60 	b.w	800af58 <__ieee754_pow+0xa0>
 800b898:	00000000 	.word	0x00000000
 800b89c:	3fe62e43 	.word	0x3fe62e43
 800b8a0:	fefa39ef 	.word	0xfefa39ef
 800b8a4:	3fe62e42 	.word	0x3fe62e42
 800b8a8:	0ca86c39 	.word	0x0ca86c39
 800b8ac:	be205c61 	.word	0xbe205c61
 800b8b0:	72bea4d0 	.word	0x72bea4d0
 800b8b4:	3e663769 	.word	0x3e663769
 800b8b8:	c5d26bf1 	.word	0xc5d26bf1
 800b8bc:	3ebbbd41 	.word	0x3ebbbd41
 800b8c0:	af25de2c 	.word	0xaf25de2c
 800b8c4:	3f11566a 	.word	0x3f11566a
 800b8c8:	16bebd93 	.word	0x16bebd93
 800b8cc:	3f66c16c 	.word	0x3f66c16c
 800b8d0:	5555553e 	.word	0x5555553e
 800b8d4:	3fc55555 	.word	0x3fc55555
 800b8d8:	c2f8f359 	.word	0xc2f8f359
 800b8dc:	01a56e1f 	.word	0x01a56e1f
 800b8e0:	3fe00000 	.word	0x3fe00000
 800b8e4:	000fffff 	.word	0x000fffff
 800b8e8:	3ff00000 	.word	0x3ff00000
 800b8ec:	4090cbff 	.word	0x4090cbff
 800b8f0:	3f6f3400 	.word	0x3f6f3400
 800b8f4:	652b82fe 	.word	0x652b82fe
 800b8f8:	3c971547 	.word	0x3c971547
 800b8fc:	00000000 	.word	0x00000000

0800b900 <__ieee754_rem_pio2>:
 800b900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b904:	ed2d 8b02 	vpush	{d8}
 800b908:	ec55 4b10 	vmov	r4, r5, d0
 800b90c:	4bca      	ldr	r3, [pc, #808]	; (800bc38 <__ieee754_rem_pio2+0x338>)
 800b90e:	b08b      	sub	sp, #44	; 0x2c
 800b910:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b914:	4598      	cmp	r8, r3
 800b916:	4682      	mov	sl, r0
 800b918:	9502      	str	r5, [sp, #8]
 800b91a:	dc08      	bgt.n	800b92e <__ieee754_rem_pio2+0x2e>
 800b91c:	2200      	movs	r2, #0
 800b91e:	2300      	movs	r3, #0
 800b920:	ed80 0b00 	vstr	d0, [r0]
 800b924:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b928:	f04f 0b00 	mov.w	fp, #0
 800b92c:	e028      	b.n	800b980 <__ieee754_rem_pio2+0x80>
 800b92e:	4bc3      	ldr	r3, [pc, #780]	; (800bc3c <__ieee754_rem_pio2+0x33c>)
 800b930:	4598      	cmp	r8, r3
 800b932:	dc78      	bgt.n	800ba26 <__ieee754_rem_pio2+0x126>
 800b934:	9b02      	ldr	r3, [sp, #8]
 800b936:	4ec2      	ldr	r6, [pc, #776]	; (800bc40 <__ieee754_rem_pio2+0x340>)
 800b938:	2b00      	cmp	r3, #0
 800b93a:	ee10 0a10 	vmov	r0, s0
 800b93e:	a3b0      	add	r3, pc, #704	; (adr r3, 800bc00 <__ieee754_rem_pio2+0x300>)
 800b940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b944:	4629      	mov	r1, r5
 800b946:	dd39      	ble.n	800b9bc <__ieee754_rem_pio2+0xbc>
 800b948:	f7f4 fc56 	bl	80001f8 <__aeabi_dsub>
 800b94c:	45b0      	cmp	r8, r6
 800b94e:	4604      	mov	r4, r0
 800b950:	460d      	mov	r5, r1
 800b952:	d01b      	beq.n	800b98c <__ieee754_rem_pio2+0x8c>
 800b954:	a3ac      	add	r3, pc, #688	; (adr r3, 800bc08 <__ieee754_rem_pio2+0x308>)
 800b956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95a:	f7f4 fc4d 	bl	80001f8 <__aeabi_dsub>
 800b95e:	4602      	mov	r2, r0
 800b960:	460b      	mov	r3, r1
 800b962:	e9ca 2300 	strd	r2, r3, [sl]
 800b966:	4620      	mov	r0, r4
 800b968:	4629      	mov	r1, r5
 800b96a:	f7f4 fc45 	bl	80001f8 <__aeabi_dsub>
 800b96e:	a3a6      	add	r3, pc, #664	; (adr r3, 800bc08 <__ieee754_rem_pio2+0x308>)
 800b970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b974:	f7f4 fc40 	bl	80001f8 <__aeabi_dsub>
 800b978:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b97c:	f04f 0b01 	mov.w	fp, #1
 800b980:	4658      	mov	r0, fp
 800b982:	b00b      	add	sp, #44	; 0x2c
 800b984:	ecbd 8b02 	vpop	{d8}
 800b988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b98c:	a3a0      	add	r3, pc, #640	; (adr r3, 800bc10 <__ieee754_rem_pio2+0x310>)
 800b98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b992:	f7f4 fc31 	bl	80001f8 <__aeabi_dsub>
 800b996:	a3a0      	add	r3, pc, #640	; (adr r3, 800bc18 <__ieee754_rem_pio2+0x318>)
 800b998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99c:	4604      	mov	r4, r0
 800b99e:	460d      	mov	r5, r1
 800b9a0:	f7f4 fc2a 	bl	80001f8 <__aeabi_dsub>
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	e9ca 2300 	strd	r2, r3, [sl]
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	4629      	mov	r1, r5
 800b9b0:	f7f4 fc22 	bl	80001f8 <__aeabi_dsub>
 800b9b4:	a398      	add	r3, pc, #608	; (adr r3, 800bc18 <__ieee754_rem_pio2+0x318>)
 800b9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ba:	e7db      	b.n	800b974 <__ieee754_rem_pio2+0x74>
 800b9bc:	f7f4 fc1e 	bl	80001fc <__adddf3>
 800b9c0:	45b0      	cmp	r8, r6
 800b9c2:	4604      	mov	r4, r0
 800b9c4:	460d      	mov	r5, r1
 800b9c6:	d016      	beq.n	800b9f6 <__ieee754_rem_pio2+0xf6>
 800b9c8:	a38f      	add	r3, pc, #572	; (adr r3, 800bc08 <__ieee754_rem_pio2+0x308>)
 800b9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ce:	f7f4 fc15 	bl	80001fc <__adddf3>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	e9ca 2300 	strd	r2, r3, [sl]
 800b9da:	4620      	mov	r0, r4
 800b9dc:	4629      	mov	r1, r5
 800b9de:	f7f4 fc0b 	bl	80001f8 <__aeabi_dsub>
 800b9e2:	a389      	add	r3, pc, #548	; (adr r3, 800bc08 <__ieee754_rem_pio2+0x308>)
 800b9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e8:	f7f4 fc08 	bl	80001fc <__adddf3>
 800b9ec:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800b9f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b9f4:	e7c4      	b.n	800b980 <__ieee754_rem_pio2+0x80>
 800b9f6:	a386      	add	r3, pc, #536	; (adr r3, 800bc10 <__ieee754_rem_pio2+0x310>)
 800b9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fc:	f7f4 fbfe 	bl	80001fc <__adddf3>
 800ba00:	a385      	add	r3, pc, #532	; (adr r3, 800bc18 <__ieee754_rem_pio2+0x318>)
 800ba02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba06:	4604      	mov	r4, r0
 800ba08:	460d      	mov	r5, r1
 800ba0a:	f7f4 fbf7 	bl	80001fc <__adddf3>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	460b      	mov	r3, r1
 800ba12:	e9ca 2300 	strd	r2, r3, [sl]
 800ba16:	4620      	mov	r0, r4
 800ba18:	4629      	mov	r1, r5
 800ba1a:	f7f4 fbed 	bl	80001f8 <__aeabi_dsub>
 800ba1e:	a37e      	add	r3, pc, #504	; (adr r3, 800bc18 <__ieee754_rem_pio2+0x318>)
 800ba20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba24:	e7e0      	b.n	800b9e8 <__ieee754_rem_pio2+0xe8>
 800ba26:	4b87      	ldr	r3, [pc, #540]	; (800bc44 <__ieee754_rem_pio2+0x344>)
 800ba28:	4598      	cmp	r8, r3
 800ba2a:	f300 80d9 	bgt.w	800bbe0 <__ieee754_rem_pio2+0x2e0>
 800ba2e:	f7fe fd97 	bl	800a560 <fabs>
 800ba32:	ec55 4b10 	vmov	r4, r5, d0
 800ba36:	ee10 0a10 	vmov	r0, s0
 800ba3a:	a379      	add	r3, pc, #484	; (adr r3, 800bc20 <__ieee754_rem_pio2+0x320>)
 800ba3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba40:	4629      	mov	r1, r5
 800ba42:	f7f4 fd91 	bl	8000568 <__aeabi_dmul>
 800ba46:	4b80      	ldr	r3, [pc, #512]	; (800bc48 <__ieee754_rem_pio2+0x348>)
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f7f4 fbd7 	bl	80001fc <__adddf3>
 800ba4e:	f7f5 f83b 	bl	8000ac8 <__aeabi_d2iz>
 800ba52:	4683      	mov	fp, r0
 800ba54:	f7f4 fd1e 	bl	8000494 <__aeabi_i2d>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	ec43 2b18 	vmov	d8, r2, r3
 800ba60:	a367      	add	r3, pc, #412	; (adr r3, 800bc00 <__ieee754_rem_pio2+0x300>)
 800ba62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba66:	f7f4 fd7f 	bl	8000568 <__aeabi_dmul>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	4620      	mov	r0, r4
 800ba70:	4629      	mov	r1, r5
 800ba72:	f7f4 fbc1 	bl	80001f8 <__aeabi_dsub>
 800ba76:	a364      	add	r3, pc, #400	; (adr r3, 800bc08 <__ieee754_rem_pio2+0x308>)
 800ba78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7c:	4606      	mov	r6, r0
 800ba7e:	460f      	mov	r7, r1
 800ba80:	ec51 0b18 	vmov	r0, r1, d8
 800ba84:	f7f4 fd70 	bl	8000568 <__aeabi_dmul>
 800ba88:	f1bb 0f1f 	cmp.w	fp, #31
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	460d      	mov	r5, r1
 800ba90:	dc0d      	bgt.n	800baae <__ieee754_rem_pio2+0x1ae>
 800ba92:	4b6e      	ldr	r3, [pc, #440]	; (800bc4c <__ieee754_rem_pio2+0x34c>)
 800ba94:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800ba98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba9c:	4543      	cmp	r3, r8
 800ba9e:	d006      	beq.n	800baae <__ieee754_rem_pio2+0x1ae>
 800baa0:	4622      	mov	r2, r4
 800baa2:	462b      	mov	r3, r5
 800baa4:	4630      	mov	r0, r6
 800baa6:	4639      	mov	r1, r7
 800baa8:	f7f4 fba6 	bl	80001f8 <__aeabi_dsub>
 800baac:	e00f      	b.n	800bace <__ieee754_rem_pio2+0x1ce>
 800baae:	462b      	mov	r3, r5
 800bab0:	4622      	mov	r2, r4
 800bab2:	4630      	mov	r0, r6
 800bab4:	4639      	mov	r1, r7
 800bab6:	f7f4 fb9f 	bl	80001f8 <__aeabi_dsub>
 800baba:	ea4f 5328 	mov.w	r3, r8, asr #20
 800babe:	9303      	str	r3, [sp, #12]
 800bac0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bac4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800bac8:	f1b8 0f10 	cmp.w	r8, #16
 800bacc:	dc02      	bgt.n	800bad4 <__ieee754_rem_pio2+0x1d4>
 800bace:	e9ca 0100 	strd	r0, r1, [sl]
 800bad2:	e039      	b.n	800bb48 <__ieee754_rem_pio2+0x248>
 800bad4:	a34e      	add	r3, pc, #312	; (adr r3, 800bc10 <__ieee754_rem_pio2+0x310>)
 800bad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bada:	ec51 0b18 	vmov	r0, r1, d8
 800bade:	f7f4 fd43 	bl	8000568 <__aeabi_dmul>
 800bae2:	4604      	mov	r4, r0
 800bae4:	460d      	mov	r5, r1
 800bae6:	4602      	mov	r2, r0
 800bae8:	460b      	mov	r3, r1
 800baea:	4630      	mov	r0, r6
 800baec:	4639      	mov	r1, r7
 800baee:	f7f4 fb83 	bl	80001f8 <__aeabi_dsub>
 800baf2:	4602      	mov	r2, r0
 800baf4:	460b      	mov	r3, r1
 800baf6:	4680      	mov	r8, r0
 800baf8:	4689      	mov	r9, r1
 800bafa:	4630      	mov	r0, r6
 800bafc:	4639      	mov	r1, r7
 800bafe:	f7f4 fb7b 	bl	80001f8 <__aeabi_dsub>
 800bb02:	4622      	mov	r2, r4
 800bb04:	462b      	mov	r3, r5
 800bb06:	f7f4 fb77 	bl	80001f8 <__aeabi_dsub>
 800bb0a:	a343      	add	r3, pc, #268	; (adr r3, 800bc18 <__ieee754_rem_pio2+0x318>)
 800bb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb10:	4604      	mov	r4, r0
 800bb12:	460d      	mov	r5, r1
 800bb14:	ec51 0b18 	vmov	r0, r1, d8
 800bb18:	f7f4 fd26 	bl	8000568 <__aeabi_dmul>
 800bb1c:	4622      	mov	r2, r4
 800bb1e:	462b      	mov	r3, r5
 800bb20:	f7f4 fb6a 	bl	80001f8 <__aeabi_dsub>
 800bb24:	4602      	mov	r2, r0
 800bb26:	460b      	mov	r3, r1
 800bb28:	4604      	mov	r4, r0
 800bb2a:	460d      	mov	r5, r1
 800bb2c:	4640      	mov	r0, r8
 800bb2e:	4649      	mov	r1, r9
 800bb30:	f7f4 fb62 	bl	80001f8 <__aeabi_dsub>
 800bb34:	9a03      	ldr	r2, [sp, #12]
 800bb36:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bb3a:	1ad3      	subs	r3, r2, r3
 800bb3c:	2b31      	cmp	r3, #49	; 0x31
 800bb3e:	dc24      	bgt.n	800bb8a <__ieee754_rem_pio2+0x28a>
 800bb40:	e9ca 0100 	strd	r0, r1, [sl]
 800bb44:	4646      	mov	r6, r8
 800bb46:	464f      	mov	r7, r9
 800bb48:	e9da 8900 	ldrd	r8, r9, [sl]
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	4642      	mov	r2, r8
 800bb50:	464b      	mov	r3, r9
 800bb52:	4639      	mov	r1, r7
 800bb54:	f7f4 fb50 	bl	80001f8 <__aeabi_dsub>
 800bb58:	462b      	mov	r3, r5
 800bb5a:	4622      	mov	r2, r4
 800bb5c:	f7f4 fb4c 	bl	80001f8 <__aeabi_dsub>
 800bb60:	9b02      	ldr	r3, [sp, #8]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bb68:	f6bf af0a 	bge.w	800b980 <__ieee754_rem_pio2+0x80>
 800bb6c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bb70:	f8ca 3004 	str.w	r3, [sl, #4]
 800bb74:	f8ca 8000 	str.w	r8, [sl]
 800bb78:	f8ca 0008 	str.w	r0, [sl, #8]
 800bb7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb80:	f8ca 300c 	str.w	r3, [sl, #12]
 800bb84:	f1cb 0b00 	rsb	fp, fp, #0
 800bb88:	e6fa      	b.n	800b980 <__ieee754_rem_pio2+0x80>
 800bb8a:	a327      	add	r3, pc, #156	; (adr r3, 800bc28 <__ieee754_rem_pio2+0x328>)
 800bb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb90:	ec51 0b18 	vmov	r0, r1, d8
 800bb94:	f7f4 fce8 	bl	8000568 <__aeabi_dmul>
 800bb98:	4604      	mov	r4, r0
 800bb9a:	460d      	mov	r5, r1
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	460b      	mov	r3, r1
 800bba0:	4640      	mov	r0, r8
 800bba2:	4649      	mov	r1, r9
 800bba4:	f7f4 fb28 	bl	80001f8 <__aeabi_dsub>
 800bba8:	4602      	mov	r2, r0
 800bbaa:	460b      	mov	r3, r1
 800bbac:	4606      	mov	r6, r0
 800bbae:	460f      	mov	r7, r1
 800bbb0:	4640      	mov	r0, r8
 800bbb2:	4649      	mov	r1, r9
 800bbb4:	f7f4 fb20 	bl	80001f8 <__aeabi_dsub>
 800bbb8:	4622      	mov	r2, r4
 800bbba:	462b      	mov	r3, r5
 800bbbc:	f7f4 fb1c 	bl	80001f8 <__aeabi_dsub>
 800bbc0:	a31b      	add	r3, pc, #108	; (adr r3, 800bc30 <__ieee754_rem_pio2+0x330>)
 800bbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc6:	4604      	mov	r4, r0
 800bbc8:	460d      	mov	r5, r1
 800bbca:	ec51 0b18 	vmov	r0, r1, d8
 800bbce:	f7f4 fccb 	bl	8000568 <__aeabi_dmul>
 800bbd2:	4622      	mov	r2, r4
 800bbd4:	462b      	mov	r3, r5
 800bbd6:	f7f4 fb0f 	bl	80001f8 <__aeabi_dsub>
 800bbda:	4604      	mov	r4, r0
 800bbdc:	460d      	mov	r5, r1
 800bbde:	e75f      	b.n	800baa0 <__ieee754_rem_pio2+0x1a0>
 800bbe0:	4b1b      	ldr	r3, [pc, #108]	; (800bc50 <__ieee754_rem_pio2+0x350>)
 800bbe2:	4598      	cmp	r8, r3
 800bbe4:	dd36      	ble.n	800bc54 <__ieee754_rem_pio2+0x354>
 800bbe6:	ee10 2a10 	vmov	r2, s0
 800bbea:	462b      	mov	r3, r5
 800bbec:	4620      	mov	r0, r4
 800bbee:	4629      	mov	r1, r5
 800bbf0:	f7f4 fb02 	bl	80001f8 <__aeabi_dsub>
 800bbf4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bbf8:	e9ca 0100 	strd	r0, r1, [sl]
 800bbfc:	e694      	b.n	800b928 <__ieee754_rem_pio2+0x28>
 800bbfe:	bf00      	nop
 800bc00:	54400000 	.word	0x54400000
 800bc04:	3ff921fb 	.word	0x3ff921fb
 800bc08:	1a626331 	.word	0x1a626331
 800bc0c:	3dd0b461 	.word	0x3dd0b461
 800bc10:	1a600000 	.word	0x1a600000
 800bc14:	3dd0b461 	.word	0x3dd0b461
 800bc18:	2e037073 	.word	0x2e037073
 800bc1c:	3ba3198a 	.word	0x3ba3198a
 800bc20:	6dc9c883 	.word	0x6dc9c883
 800bc24:	3fe45f30 	.word	0x3fe45f30
 800bc28:	2e000000 	.word	0x2e000000
 800bc2c:	3ba3198a 	.word	0x3ba3198a
 800bc30:	252049c1 	.word	0x252049c1
 800bc34:	397b839a 	.word	0x397b839a
 800bc38:	3fe921fb 	.word	0x3fe921fb
 800bc3c:	4002d97b 	.word	0x4002d97b
 800bc40:	3ff921fb 	.word	0x3ff921fb
 800bc44:	413921fb 	.word	0x413921fb
 800bc48:	3fe00000 	.word	0x3fe00000
 800bc4c:	0800cc58 	.word	0x0800cc58
 800bc50:	7fefffff 	.word	0x7fefffff
 800bc54:	ea4f 5428 	mov.w	r4, r8, asr #20
 800bc58:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800bc5c:	ee10 0a10 	vmov	r0, s0
 800bc60:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800bc64:	ee10 6a10 	vmov	r6, s0
 800bc68:	460f      	mov	r7, r1
 800bc6a:	f7f4 ff2d 	bl	8000ac8 <__aeabi_d2iz>
 800bc6e:	f7f4 fc11 	bl	8000494 <__aeabi_i2d>
 800bc72:	4602      	mov	r2, r0
 800bc74:	460b      	mov	r3, r1
 800bc76:	4630      	mov	r0, r6
 800bc78:	4639      	mov	r1, r7
 800bc7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bc7e:	f7f4 fabb 	bl	80001f8 <__aeabi_dsub>
 800bc82:	4b22      	ldr	r3, [pc, #136]	; (800bd0c <__ieee754_rem_pio2+0x40c>)
 800bc84:	2200      	movs	r2, #0
 800bc86:	f7f4 fc6f 	bl	8000568 <__aeabi_dmul>
 800bc8a:	460f      	mov	r7, r1
 800bc8c:	4606      	mov	r6, r0
 800bc8e:	f7f4 ff1b 	bl	8000ac8 <__aeabi_d2iz>
 800bc92:	f7f4 fbff 	bl	8000494 <__aeabi_i2d>
 800bc96:	4602      	mov	r2, r0
 800bc98:	460b      	mov	r3, r1
 800bc9a:	4630      	mov	r0, r6
 800bc9c:	4639      	mov	r1, r7
 800bc9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bca2:	f7f4 faa9 	bl	80001f8 <__aeabi_dsub>
 800bca6:	4b19      	ldr	r3, [pc, #100]	; (800bd0c <__ieee754_rem_pio2+0x40c>)
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f7f4 fc5d 	bl	8000568 <__aeabi_dmul>
 800bcae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bcb2:	ad04      	add	r5, sp, #16
 800bcb4:	f04f 0803 	mov.w	r8, #3
 800bcb8:	46a9      	mov	r9, r5
 800bcba:	2600      	movs	r6, #0
 800bcbc:	2700      	movs	r7, #0
 800bcbe:	4632      	mov	r2, r6
 800bcc0:	463b      	mov	r3, r7
 800bcc2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800bcc6:	46c3      	mov	fp, r8
 800bcc8:	3d08      	subs	r5, #8
 800bcca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bcce:	f7f4 feb3 	bl	8000a38 <__aeabi_dcmpeq>
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	d1f3      	bne.n	800bcbe <__ieee754_rem_pio2+0x3be>
 800bcd6:	4b0e      	ldr	r3, [pc, #56]	; (800bd10 <__ieee754_rem_pio2+0x410>)
 800bcd8:	9301      	str	r3, [sp, #4]
 800bcda:	2302      	movs	r3, #2
 800bcdc:	9300      	str	r3, [sp, #0]
 800bcde:	4622      	mov	r2, r4
 800bce0:	465b      	mov	r3, fp
 800bce2:	4651      	mov	r1, sl
 800bce4:	4648      	mov	r0, r9
 800bce6:	f000 f993 	bl	800c010 <__kernel_rem_pio2>
 800bcea:	9b02      	ldr	r3, [sp, #8]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	4683      	mov	fp, r0
 800bcf0:	f6bf ae46 	bge.w	800b980 <__ieee754_rem_pio2+0x80>
 800bcf4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bcf8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bcfc:	f8ca 3004 	str.w	r3, [sl, #4]
 800bd00:	f8da 300c 	ldr.w	r3, [sl, #12]
 800bd04:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bd08:	e73a      	b.n	800bb80 <__ieee754_rem_pio2+0x280>
 800bd0a:	bf00      	nop
 800bd0c:	41700000 	.word	0x41700000
 800bd10:	0800ccd8 	.word	0x0800ccd8

0800bd14 <__ieee754_sqrt>:
 800bd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd18:	ec55 4b10 	vmov	r4, r5, d0
 800bd1c:	4e56      	ldr	r6, [pc, #344]	; (800be78 <__ieee754_sqrt+0x164>)
 800bd1e:	43ae      	bics	r6, r5
 800bd20:	ee10 0a10 	vmov	r0, s0
 800bd24:	ee10 3a10 	vmov	r3, s0
 800bd28:	4629      	mov	r1, r5
 800bd2a:	462a      	mov	r2, r5
 800bd2c:	d110      	bne.n	800bd50 <__ieee754_sqrt+0x3c>
 800bd2e:	ee10 2a10 	vmov	r2, s0
 800bd32:	462b      	mov	r3, r5
 800bd34:	f7f4 fc18 	bl	8000568 <__aeabi_dmul>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	4629      	mov	r1, r5
 800bd40:	f7f4 fa5c 	bl	80001fc <__adddf3>
 800bd44:	4604      	mov	r4, r0
 800bd46:	460d      	mov	r5, r1
 800bd48:	ec45 4b10 	vmov	d0, r4, r5
 800bd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd50:	2d00      	cmp	r5, #0
 800bd52:	dc10      	bgt.n	800bd76 <__ieee754_sqrt+0x62>
 800bd54:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bd58:	4330      	orrs	r0, r6
 800bd5a:	d0f5      	beq.n	800bd48 <__ieee754_sqrt+0x34>
 800bd5c:	b15d      	cbz	r5, 800bd76 <__ieee754_sqrt+0x62>
 800bd5e:	ee10 2a10 	vmov	r2, s0
 800bd62:	462b      	mov	r3, r5
 800bd64:	ee10 0a10 	vmov	r0, s0
 800bd68:	f7f4 fa46 	bl	80001f8 <__aeabi_dsub>
 800bd6c:	4602      	mov	r2, r0
 800bd6e:	460b      	mov	r3, r1
 800bd70:	f7f4 fd24 	bl	80007bc <__aeabi_ddiv>
 800bd74:	e7e6      	b.n	800bd44 <__ieee754_sqrt+0x30>
 800bd76:	1509      	asrs	r1, r1, #20
 800bd78:	d076      	beq.n	800be68 <__ieee754_sqrt+0x154>
 800bd7a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bd7e:	07ce      	lsls	r6, r1, #31
 800bd80:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800bd84:	bf5e      	ittt	pl
 800bd86:	0fda      	lsrpl	r2, r3, #31
 800bd88:	005b      	lslpl	r3, r3, #1
 800bd8a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800bd8e:	0fda      	lsrs	r2, r3, #31
 800bd90:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800bd94:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800bd98:	2000      	movs	r0, #0
 800bd9a:	106d      	asrs	r5, r5, #1
 800bd9c:	005b      	lsls	r3, r3, #1
 800bd9e:	f04f 0e16 	mov.w	lr, #22
 800bda2:	4684      	mov	ip, r0
 800bda4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bda8:	eb0c 0401 	add.w	r4, ip, r1
 800bdac:	4294      	cmp	r4, r2
 800bdae:	bfde      	ittt	le
 800bdb0:	1b12      	suble	r2, r2, r4
 800bdb2:	eb04 0c01 	addle.w	ip, r4, r1
 800bdb6:	1840      	addle	r0, r0, r1
 800bdb8:	0052      	lsls	r2, r2, #1
 800bdba:	f1be 0e01 	subs.w	lr, lr, #1
 800bdbe:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bdc2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bdc6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bdca:	d1ed      	bne.n	800bda8 <__ieee754_sqrt+0x94>
 800bdcc:	4671      	mov	r1, lr
 800bdce:	2720      	movs	r7, #32
 800bdd0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bdd4:	4562      	cmp	r2, ip
 800bdd6:	eb04 060e 	add.w	r6, r4, lr
 800bdda:	dc02      	bgt.n	800bde2 <__ieee754_sqrt+0xce>
 800bddc:	d113      	bne.n	800be06 <__ieee754_sqrt+0xf2>
 800bdde:	429e      	cmp	r6, r3
 800bde0:	d811      	bhi.n	800be06 <__ieee754_sqrt+0xf2>
 800bde2:	2e00      	cmp	r6, #0
 800bde4:	eb06 0e04 	add.w	lr, r6, r4
 800bde8:	da43      	bge.n	800be72 <__ieee754_sqrt+0x15e>
 800bdea:	f1be 0f00 	cmp.w	lr, #0
 800bdee:	db40      	blt.n	800be72 <__ieee754_sqrt+0x15e>
 800bdf0:	f10c 0801 	add.w	r8, ip, #1
 800bdf4:	eba2 020c 	sub.w	r2, r2, ip
 800bdf8:	429e      	cmp	r6, r3
 800bdfa:	bf88      	it	hi
 800bdfc:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800be00:	1b9b      	subs	r3, r3, r6
 800be02:	4421      	add	r1, r4
 800be04:	46c4      	mov	ip, r8
 800be06:	0052      	lsls	r2, r2, #1
 800be08:	3f01      	subs	r7, #1
 800be0a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800be0e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800be12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800be16:	d1dd      	bne.n	800bdd4 <__ieee754_sqrt+0xc0>
 800be18:	4313      	orrs	r3, r2
 800be1a:	d006      	beq.n	800be2a <__ieee754_sqrt+0x116>
 800be1c:	1c4c      	adds	r4, r1, #1
 800be1e:	bf13      	iteet	ne
 800be20:	3101      	addne	r1, #1
 800be22:	3001      	addeq	r0, #1
 800be24:	4639      	moveq	r1, r7
 800be26:	f021 0101 	bicne.w	r1, r1, #1
 800be2a:	1043      	asrs	r3, r0, #1
 800be2c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800be30:	0849      	lsrs	r1, r1, #1
 800be32:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800be36:	07c2      	lsls	r2, r0, #31
 800be38:	bf48      	it	mi
 800be3a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800be3e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800be42:	460c      	mov	r4, r1
 800be44:	463d      	mov	r5, r7
 800be46:	e77f      	b.n	800bd48 <__ieee754_sqrt+0x34>
 800be48:	0ada      	lsrs	r2, r3, #11
 800be4a:	3815      	subs	r0, #21
 800be4c:	055b      	lsls	r3, r3, #21
 800be4e:	2a00      	cmp	r2, #0
 800be50:	d0fa      	beq.n	800be48 <__ieee754_sqrt+0x134>
 800be52:	02d7      	lsls	r7, r2, #11
 800be54:	d50a      	bpl.n	800be6c <__ieee754_sqrt+0x158>
 800be56:	f1c1 0420 	rsb	r4, r1, #32
 800be5a:	fa23 f404 	lsr.w	r4, r3, r4
 800be5e:	1e4d      	subs	r5, r1, #1
 800be60:	408b      	lsls	r3, r1
 800be62:	4322      	orrs	r2, r4
 800be64:	1b41      	subs	r1, r0, r5
 800be66:	e788      	b.n	800bd7a <__ieee754_sqrt+0x66>
 800be68:	4608      	mov	r0, r1
 800be6a:	e7f0      	b.n	800be4e <__ieee754_sqrt+0x13a>
 800be6c:	0052      	lsls	r2, r2, #1
 800be6e:	3101      	adds	r1, #1
 800be70:	e7ef      	b.n	800be52 <__ieee754_sqrt+0x13e>
 800be72:	46e0      	mov	r8, ip
 800be74:	e7be      	b.n	800bdf4 <__ieee754_sqrt+0xe0>
 800be76:	bf00      	nop
 800be78:	7ff00000 	.word	0x7ff00000
 800be7c:	00000000 	.word	0x00000000

0800be80 <__kernel_cos>:
 800be80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be84:	ec57 6b10 	vmov	r6, r7, d0
 800be88:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800be8c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800be90:	ed8d 1b00 	vstr	d1, [sp]
 800be94:	da07      	bge.n	800bea6 <__kernel_cos+0x26>
 800be96:	ee10 0a10 	vmov	r0, s0
 800be9a:	4639      	mov	r1, r7
 800be9c:	f7f4 fe14 	bl	8000ac8 <__aeabi_d2iz>
 800bea0:	2800      	cmp	r0, #0
 800bea2:	f000 8088 	beq.w	800bfb6 <__kernel_cos+0x136>
 800bea6:	4632      	mov	r2, r6
 800bea8:	463b      	mov	r3, r7
 800beaa:	4630      	mov	r0, r6
 800beac:	4639      	mov	r1, r7
 800beae:	f7f4 fb5b 	bl	8000568 <__aeabi_dmul>
 800beb2:	4b51      	ldr	r3, [pc, #324]	; (800bff8 <__kernel_cos+0x178>)
 800beb4:	2200      	movs	r2, #0
 800beb6:	4604      	mov	r4, r0
 800beb8:	460d      	mov	r5, r1
 800beba:	f7f4 fb55 	bl	8000568 <__aeabi_dmul>
 800bebe:	a340      	add	r3, pc, #256	; (adr r3, 800bfc0 <__kernel_cos+0x140>)
 800bec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec4:	4682      	mov	sl, r0
 800bec6:	468b      	mov	fp, r1
 800bec8:	4620      	mov	r0, r4
 800beca:	4629      	mov	r1, r5
 800becc:	f7f4 fb4c 	bl	8000568 <__aeabi_dmul>
 800bed0:	a33d      	add	r3, pc, #244	; (adr r3, 800bfc8 <__kernel_cos+0x148>)
 800bed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed6:	f7f4 f991 	bl	80001fc <__adddf3>
 800beda:	4622      	mov	r2, r4
 800bedc:	462b      	mov	r3, r5
 800bede:	f7f4 fb43 	bl	8000568 <__aeabi_dmul>
 800bee2:	a33b      	add	r3, pc, #236	; (adr r3, 800bfd0 <__kernel_cos+0x150>)
 800bee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee8:	f7f4 f986 	bl	80001f8 <__aeabi_dsub>
 800beec:	4622      	mov	r2, r4
 800beee:	462b      	mov	r3, r5
 800bef0:	f7f4 fb3a 	bl	8000568 <__aeabi_dmul>
 800bef4:	a338      	add	r3, pc, #224	; (adr r3, 800bfd8 <__kernel_cos+0x158>)
 800bef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befa:	f7f4 f97f 	bl	80001fc <__adddf3>
 800befe:	4622      	mov	r2, r4
 800bf00:	462b      	mov	r3, r5
 800bf02:	f7f4 fb31 	bl	8000568 <__aeabi_dmul>
 800bf06:	a336      	add	r3, pc, #216	; (adr r3, 800bfe0 <__kernel_cos+0x160>)
 800bf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0c:	f7f4 f974 	bl	80001f8 <__aeabi_dsub>
 800bf10:	4622      	mov	r2, r4
 800bf12:	462b      	mov	r3, r5
 800bf14:	f7f4 fb28 	bl	8000568 <__aeabi_dmul>
 800bf18:	a333      	add	r3, pc, #204	; (adr r3, 800bfe8 <__kernel_cos+0x168>)
 800bf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1e:	f7f4 f96d 	bl	80001fc <__adddf3>
 800bf22:	4622      	mov	r2, r4
 800bf24:	462b      	mov	r3, r5
 800bf26:	f7f4 fb1f 	bl	8000568 <__aeabi_dmul>
 800bf2a:	4622      	mov	r2, r4
 800bf2c:	462b      	mov	r3, r5
 800bf2e:	f7f4 fb1b 	bl	8000568 <__aeabi_dmul>
 800bf32:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf36:	4604      	mov	r4, r0
 800bf38:	460d      	mov	r5, r1
 800bf3a:	4630      	mov	r0, r6
 800bf3c:	4639      	mov	r1, r7
 800bf3e:	f7f4 fb13 	bl	8000568 <__aeabi_dmul>
 800bf42:	460b      	mov	r3, r1
 800bf44:	4602      	mov	r2, r0
 800bf46:	4629      	mov	r1, r5
 800bf48:	4620      	mov	r0, r4
 800bf4a:	f7f4 f955 	bl	80001f8 <__aeabi_dsub>
 800bf4e:	4b2b      	ldr	r3, [pc, #172]	; (800bffc <__kernel_cos+0x17c>)
 800bf50:	4598      	cmp	r8, r3
 800bf52:	4606      	mov	r6, r0
 800bf54:	460f      	mov	r7, r1
 800bf56:	dc10      	bgt.n	800bf7a <__kernel_cos+0xfa>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	4650      	mov	r0, sl
 800bf5e:	4659      	mov	r1, fp
 800bf60:	f7f4 f94a 	bl	80001f8 <__aeabi_dsub>
 800bf64:	460b      	mov	r3, r1
 800bf66:	4926      	ldr	r1, [pc, #152]	; (800c000 <__kernel_cos+0x180>)
 800bf68:	4602      	mov	r2, r0
 800bf6a:	2000      	movs	r0, #0
 800bf6c:	f7f4 f944 	bl	80001f8 <__aeabi_dsub>
 800bf70:	ec41 0b10 	vmov	d0, r0, r1
 800bf74:	b003      	add	sp, #12
 800bf76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf7a:	4b22      	ldr	r3, [pc, #136]	; (800c004 <__kernel_cos+0x184>)
 800bf7c:	4920      	ldr	r1, [pc, #128]	; (800c000 <__kernel_cos+0x180>)
 800bf7e:	4598      	cmp	r8, r3
 800bf80:	bfcc      	ite	gt
 800bf82:	4d21      	ldrgt	r5, [pc, #132]	; (800c008 <__kernel_cos+0x188>)
 800bf84:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800bf88:	2400      	movs	r4, #0
 800bf8a:	4622      	mov	r2, r4
 800bf8c:	462b      	mov	r3, r5
 800bf8e:	2000      	movs	r0, #0
 800bf90:	f7f4 f932 	bl	80001f8 <__aeabi_dsub>
 800bf94:	4622      	mov	r2, r4
 800bf96:	4680      	mov	r8, r0
 800bf98:	4689      	mov	r9, r1
 800bf9a:	462b      	mov	r3, r5
 800bf9c:	4650      	mov	r0, sl
 800bf9e:	4659      	mov	r1, fp
 800bfa0:	f7f4 f92a 	bl	80001f8 <__aeabi_dsub>
 800bfa4:	4632      	mov	r2, r6
 800bfa6:	463b      	mov	r3, r7
 800bfa8:	f7f4 f926 	bl	80001f8 <__aeabi_dsub>
 800bfac:	4602      	mov	r2, r0
 800bfae:	460b      	mov	r3, r1
 800bfb0:	4640      	mov	r0, r8
 800bfb2:	4649      	mov	r1, r9
 800bfb4:	e7da      	b.n	800bf6c <__kernel_cos+0xec>
 800bfb6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bff0 <__kernel_cos+0x170>
 800bfba:	e7db      	b.n	800bf74 <__kernel_cos+0xf4>
 800bfbc:	f3af 8000 	nop.w
 800bfc0:	be8838d4 	.word	0xbe8838d4
 800bfc4:	bda8fae9 	.word	0xbda8fae9
 800bfc8:	bdb4b1c4 	.word	0xbdb4b1c4
 800bfcc:	3e21ee9e 	.word	0x3e21ee9e
 800bfd0:	809c52ad 	.word	0x809c52ad
 800bfd4:	3e927e4f 	.word	0x3e927e4f
 800bfd8:	19cb1590 	.word	0x19cb1590
 800bfdc:	3efa01a0 	.word	0x3efa01a0
 800bfe0:	16c15177 	.word	0x16c15177
 800bfe4:	3f56c16c 	.word	0x3f56c16c
 800bfe8:	5555554c 	.word	0x5555554c
 800bfec:	3fa55555 	.word	0x3fa55555
 800bff0:	00000000 	.word	0x00000000
 800bff4:	3ff00000 	.word	0x3ff00000
 800bff8:	3fe00000 	.word	0x3fe00000
 800bffc:	3fd33332 	.word	0x3fd33332
 800c000:	3ff00000 	.word	0x3ff00000
 800c004:	3fe90000 	.word	0x3fe90000
 800c008:	3fd20000 	.word	0x3fd20000
 800c00c:	00000000 	.word	0x00000000

0800c010 <__kernel_rem_pio2>:
 800c010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c014:	ed2d 8b02 	vpush	{d8}
 800c018:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c01c:	f112 0f14 	cmn.w	r2, #20
 800c020:	9308      	str	r3, [sp, #32]
 800c022:	9101      	str	r1, [sp, #4]
 800c024:	4bc6      	ldr	r3, [pc, #792]	; (800c340 <__kernel_rem_pio2+0x330>)
 800c026:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800c028:	9009      	str	r0, [sp, #36]	; 0x24
 800c02a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c02e:	9304      	str	r3, [sp, #16]
 800c030:	9b08      	ldr	r3, [sp, #32]
 800c032:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800c036:	bfa8      	it	ge
 800c038:	1ed4      	subge	r4, r2, #3
 800c03a:	9306      	str	r3, [sp, #24]
 800c03c:	bfb2      	itee	lt
 800c03e:	2400      	movlt	r4, #0
 800c040:	2318      	movge	r3, #24
 800c042:	fb94 f4f3 	sdivge	r4, r4, r3
 800c046:	f06f 0317 	mvn.w	r3, #23
 800c04a:	fb04 3303 	mla	r3, r4, r3, r3
 800c04e:	eb03 0a02 	add.w	sl, r3, r2
 800c052:	9b04      	ldr	r3, [sp, #16]
 800c054:	9a06      	ldr	r2, [sp, #24]
 800c056:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800c330 <__kernel_rem_pio2+0x320>
 800c05a:	eb03 0802 	add.w	r8, r3, r2
 800c05e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c060:	1aa7      	subs	r7, r4, r2
 800c062:	ae20      	add	r6, sp, #128	; 0x80
 800c064:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c068:	2500      	movs	r5, #0
 800c06a:	4545      	cmp	r5, r8
 800c06c:	dd18      	ble.n	800c0a0 <__kernel_rem_pio2+0x90>
 800c06e:	9b08      	ldr	r3, [sp, #32]
 800c070:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c074:	aa20      	add	r2, sp, #128	; 0x80
 800c076:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800c330 <__kernel_rem_pio2+0x320>
 800c07a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c07e:	f1c3 0301 	rsb	r3, r3, #1
 800c082:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800c086:	9307      	str	r3, [sp, #28]
 800c088:	9b07      	ldr	r3, [sp, #28]
 800c08a:	9a04      	ldr	r2, [sp, #16]
 800c08c:	4443      	add	r3, r8
 800c08e:	429a      	cmp	r2, r3
 800c090:	db2f      	blt.n	800c0f2 <__kernel_rem_pio2+0xe2>
 800c092:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c096:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c09a:	462f      	mov	r7, r5
 800c09c:	2600      	movs	r6, #0
 800c09e:	e01b      	b.n	800c0d8 <__kernel_rem_pio2+0xc8>
 800c0a0:	42ef      	cmn	r7, r5
 800c0a2:	d407      	bmi.n	800c0b4 <__kernel_rem_pio2+0xa4>
 800c0a4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c0a8:	f7f4 f9f4 	bl	8000494 <__aeabi_i2d>
 800c0ac:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c0b0:	3501      	adds	r5, #1
 800c0b2:	e7da      	b.n	800c06a <__kernel_rem_pio2+0x5a>
 800c0b4:	ec51 0b18 	vmov	r0, r1, d8
 800c0b8:	e7f8      	b.n	800c0ac <__kernel_rem_pio2+0x9c>
 800c0ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0be:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c0c2:	f7f4 fa51 	bl	8000568 <__aeabi_dmul>
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0ce:	f7f4 f895 	bl	80001fc <__adddf3>
 800c0d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0d6:	3601      	adds	r6, #1
 800c0d8:	9b06      	ldr	r3, [sp, #24]
 800c0da:	429e      	cmp	r6, r3
 800c0dc:	f1a7 0708 	sub.w	r7, r7, #8
 800c0e0:	ddeb      	ble.n	800c0ba <__kernel_rem_pio2+0xaa>
 800c0e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c0e6:	3508      	adds	r5, #8
 800c0e8:	ecab 7b02 	vstmia	fp!, {d7}
 800c0ec:	f108 0801 	add.w	r8, r8, #1
 800c0f0:	e7ca      	b.n	800c088 <__kernel_rem_pio2+0x78>
 800c0f2:	9b04      	ldr	r3, [sp, #16]
 800c0f4:	aa0c      	add	r2, sp, #48	; 0x30
 800c0f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c0fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0fc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c0fe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c102:	9c04      	ldr	r4, [sp, #16]
 800c104:	930a      	str	r3, [sp, #40]	; 0x28
 800c106:	ab98      	add	r3, sp, #608	; 0x260
 800c108:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c10c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c110:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800c114:	f8cd b008 	str.w	fp, [sp, #8]
 800c118:	4625      	mov	r5, r4
 800c11a:	2d00      	cmp	r5, #0
 800c11c:	dc78      	bgt.n	800c210 <__kernel_rem_pio2+0x200>
 800c11e:	ec47 6b10 	vmov	d0, r6, r7
 800c122:	4650      	mov	r0, sl
 800c124:	f000 fc94 	bl	800ca50 <scalbn>
 800c128:	ec57 6b10 	vmov	r6, r7, d0
 800c12c:	2200      	movs	r2, #0
 800c12e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c132:	ee10 0a10 	vmov	r0, s0
 800c136:	4639      	mov	r1, r7
 800c138:	f7f4 fa16 	bl	8000568 <__aeabi_dmul>
 800c13c:	ec41 0b10 	vmov	d0, r0, r1
 800c140:	f000 fb72 	bl	800c828 <floor>
 800c144:	4b7f      	ldr	r3, [pc, #508]	; (800c344 <__kernel_rem_pio2+0x334>)
 800c146:	ec51 0b10 	vmov	r0, r1, d0
 800c14a:	2200      	movs	r2, #0
 800c14c:	f7f4 fa0c 	bl	8000568 <__aeabi_dmul>
 800c150:	4602      	mov	r2, r0
 800c152:	460b      	mov	r3, r1
 800c154:	4630      	mov	r0, r6
 800c156:	4639      	mov	r1, r7
 800c158:	f7f4 f84e 	bl	80001f8 <__aeabi_dsub>
 800c15c:	460f      	mov	r7, r1
 800c15e:	4606      	mov	r6, r0
 800c160:	f7f4 fcb2 	bl	8000ac8 <__aeabi_d2iz>
 800c164:	9007      	str	r0, [sp, #28]
 800c166:	f7f4 f995 	bl	8000494 <__aeabi_i2d>
 800c16a:	4602      	mov	r2, r0
 800c16c:	460b      	mov	r3, r1
 800c16e:	4630      	mov	r0, r6
 800c170:	4639      	mov	r1, r7
 800c172:	f7f4 f841 	bl	80001f8 <__aeabi_dsub>
 800c176:	f1ba 0f00 	cmp.w	sl, #0
 800c17a:	4606      	mov	r6, r0
 800c17c:	460f      	mov	r7, r1
 800c17e:	dd70      	ble.n	800c262 <__kernel_rem_pio2+0x252>
 800c180:	1e62      	subs	r2, r4, #1
 800c182:	ab0c      	add	r3, sp, #48	; 0x30
 800c184:	9d07      	ldr	r5, [sp, #28]
 800c186:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c18a:	f1ca 0118 	rsb	r1, sl, #24
 800c18e:	fa40 f301 	asr.w	r3, r0, r1
 800c192:	441d      	add	r5, r3
 800c194:	408b      	lsls	r3, r1
 800c196:	1ac0      	subs	r0, r0, r3
 800c198:	ab0c      	add	r3, sp, #48	; 0x30
 800c19a:	9507      	str	r5, [sp, #28]
 800c19c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c1a0:	f1ca 0317 	rsb	r3, sl, #23
 800c1a4:	fa40 f303 	asr.w	r3, r0, r3
 800c1a8:	9302      	str	r3, [sp, #8]
 800c1aa:	9b02      	ldr	r3, [sp, #8]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	dd66      	ble.n	800c27e <__kernel_rem_pio2+0x26e>
 800c1b0:	9b07      	ldr	r3, [sp, #28]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	9307      	str	r3, [sp, #28]
 800c1b8:	4615      	mov	r5, r2
 800c1ba:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c1be:	4294      	cmp	r4, r2
 800c1c0:	f300 8099 	bgt.w	800c2f6 <__kernel_rem_pio2+0x2e6>
 800c1c4:	f1ba 0f00 	cmp.w	sl, #0
 800c1c8:	dd07      	ble.n	800c1da <__kernel_rem_pio2+0x1ca>
 800c1ca:	f1ba 0f01 	cmp.w	sl, #1
 800c1ce:	f000 80a5 	beq.w	800c31c <__kernel_rem_pio2+0x30c>
 800c1d2:	f1ba 0f02 	cmp.w	sl, #2
 800c1d6:	f000 80c1 	beq.w	800c35c <__kernel_rem_pio2+0x34c>
 800c1da:	9b02      	ldr	r3, [sp, #8]
 800c1dc:	2b02      	cmp	r3, #2
 800c1de:	d14e      	bne.n	800c27e <__kernel_rem_pio2+0x26e>
 800c1e0:	4632      	mov	r2, r6
 800c1e2:	463b      	mov	r3, r7
 800c1e4:	4958      	ldr	r1, [pc, #352]	; (800c348 <__kernel_rem_pio2+0x338>)
 800c1e6:	2000      	movs	r0, #0
 800c1e8:	f7f4 f806 	bl	80001f8 <__aeabi_dsub>
 800c1ec:	4606      	mov	r6, r0
 800c1ee:	460f      	mov	r7, r1
 800c1f0:	2d00      	cmp	r5, #0
 800c1f2:	d044      	beq.n	800c27e <__kernel_rem_pio2+0x26e>
 800c1f4:	4650      	mov	r0, sl
 800c1f6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800c338 <__kernel_rem_pio2+0x328>
 800c1fa:	f000 fc29 	bl	800ca50 <scalbn>
 800c1fe:	4630      	mov	r0, r6
 800c200:	4639      	mov	r1, r7
 800c202:	ec53 2b10 	vmov	r2, r3, d0
 800c206:	f7f3 fff7 	bl	80001f8 <__aeabi_dsub>
 800c20a:	4606      	mov	r6, r0
 800c20c:	460f      	mov	r7, r1
 800c20e:	e036      	b.n	800c27e <__kernel_rem_pio2+0x26e>
 800c210:	4b4e      	ldr	r3, [pc, #312]	; (800c34c <__kernel_rem_pio2+0x33c>)
 800c212:	2200      	movs	r2, #0
 800c214:	4630      	mov	r0, r6
 800c216:	4639      	mov	r1, r7
 800c218:	f7f4 f9a6 	bl	8000568 <__aeabi_dmul>
 800c21c:	f7f4 fc54 	bl	8000ac8 <__aeabi_d2iz>
 800c220:	f7f4 f938 	bl	8000494 <__aeabi_i2d>
 800c224:	4b4a      	ldr	r3, [pc, #296]	; (800c350 <__kernel_rem_pio2+0x340>)
 800c226:	2200      	movs	r2, #0
 800c228:	4680      	mov	r8, r0
 800c22a:	4689      	mov	r9, r1
 800c22c:	f7f4 f99c 	bl	8000568 <__aeabi_dmul>
 800c230:	4602      	mov	r2, r0
 800c232:	460b      	mov	r3, r1
 800c234:	4630      	mov	r0, r6
 800c236:	4639      	mov	r1, r7
 800c238:	f7f3 ffde 	bl	80001f8 <__aeabi_dsub>
 800c23c:	f7f4 fc44 	bl	8000ac8 <__aeabi_d2iz>
 800c240:	9b02      	ldr	r3, [sp, #8]
 800c242:	f843 0b04 	str.w	r0, [r3], #4
 800c246:	3d01      	subs	r5, #1
 800c248:	9302      	str	r3, [sp, #8]
 800c24a:	ab70      	add	r3, sp, #448	; 0x1c0
 800c24c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c254:	4640      	mov	r0, r8
 800c256:	4649      	mov	r1, r9
 800c258:	f7f3 ffd0 	bl	80001fc <__adddf3>
 800c25c:	4606      	mov	r6, r0
 800c25e:	460f      	mov	r7, r1
 800c260:	e75b      	b.n	800c11a <__kernel_rem_pio2+0x10a>
 800c262:	d105      	bne.n	800c270 <__kernel_rem_pio2+0x260>
 800c264:	1e63      	subs	r3, r4, #1
 800c266:	aa0c      	add	r2, sp, #48	; 0x30
 800c268:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c26c:	15c3      	asrs	r3, r0, #23
 800c26e:	e79b      	b.n	800c1a8 <__kernel_rem_pio2+0x198>
 800c270:	4b38      	ldr	r3, [pc, #224]	; (800c354 <__kernel_rem_pio2+0x344>)
 800c272:	2200      	movs	r2, #0
 800c274:	f7f4 fbfe 	bl	8000a74 <__aeabi_dcmpge>
 800c278:	2800      	cmp	r0, #0
 800c27a:	d139      	bne.n	800c2f0 <__kernel_rem_pio2+0x2e0>
 800c27c:	9002      	str	r0, [sp, #8]
 800c27e:	2200      	movs	r2, #0
 800c280:	2300      	movs	r3, #0
 800c282:	4630      	mov	r0, r6
 800c284:	4639      	mov	r1, r7
 800c286:	f7f4 fbd7 	bl	8000a38 <__aeabi_dcmpeq>
 800c28a:	2800      	cmp	r0, #0
 800c28c:	f000 80b4 	beq.w	800c3f8 <__kernel_rem_pio2+0x3e8>
 800c290:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800c294:	465b      	mov	r3, fp
 800c296:	2200      	movs	r2, #0
 800c298:	9904      	ldr	r1, [sp, #16]
 800c29a:	428b      	cmp	r3, r1
 800c29c:	da65      	bge.n	800c36a <__kernel_rem_pio2+0x35a>
 800c29e:	2a00      	cmp	r2, #0
 800c2a0:	d07b      	beq.n	800c39a <__kernel_rem_pio2+0x38a>
 800c2a2:	ab0c      	add	r3, sp, #48	; 0x30
 800c2a4:	f1aa 0a18 	sub.w	sl, sl, #24
 800c2a8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	f000 80a0 	beq.w	800c3f2 <__kernel_rem_pio2+0x3e2>
 800c2b2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800c338 <__kernel_rem_pio2+0x328>
 800c2b6:	4650      	mov	r0, sl
 800c2b8:	f000 fbca 	bl	800ca50 <scalbn>
 800c2bc:	4f23      	ldr	r7, [pc, #140]	; (800c34c <__kernel_rem_pio2+0x33c>)
 800c2be:	ec55 4b10 	vmov	r4, r5, d0
 800c2c2:	46d8      	mov	r8, fp
 800c2c4:	2600      	movs	r6, #0
 800c2c6:	f1b8 0f00 	cmp.w	r8, #0
 800c2ca:	f280 80cf 	bge.w	800c46c <__kernel_rem_pio2+0x45c>
 800c2ce:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800c330 <__kernel_rem_pio2+0x320>
 800c2d2:	465f      	mov	r7, fp
 800c2d4:	f04f 0800 	mov.w	r8, #0
 800c2d8:	2f00      	cmp	r7, #0
 800c2da:	f2c0 80fd 	blt.w	800c4d8 <__kernel_rem_pio2+0x4c8>
 800c2de:	ab70      	add	r3, sp, #448	; 0x1c0
 800c2e0:	f8df a074 	ldr.w	sl, [pc, #116]	; 800c358 <__kernel_rem_pio2+0x348>
 800c2e4:	ec55 4b18 	vmov	r4, r5, d8
 800c2e8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800c2ec:	2600      	movs	r6, #0
 800c2ee:	e0e5      	b.n	800c4bc <__kernel_rem_pio2+0x4ac>
 800c2f0:	2302      	movs	r3, #2
 800c2f2:	9302      	str	r3, [sp, #8]
 800c2f4:	e75c      	b.n	800c1b0 <__kernel_rem_pio2+0x1a0>
 800c2f6:	f8db 3000 	ldr.w	r3, [fp]
 800c2fa:	b955      	cbnz	r5, 800c312 <__kernel_rem_pio2+0x302>
 800c2fc:	b123      	cbz	r3, 800c308 <__kernel_rem_pio2+0x2f8>
 800c2fe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c302:	f8cb 3000 	str.w	r3, [fp]
 800c306:	2301      	movs	r3, #1
 800c308:	3201      	adds	r2, #1
 800c30a:	f10b 0b04 	add.w	fp, fp, #4
 800c30e:	461d      	mov	r5, r3
 800c310:	e755      	b.n	800c1be <__kernel_rem_pio2+0x1ae>
 800c312:	1acb      	subs	r3, r1, r3
 800c314:	f8cb 3000 	str.w	r3, [fp]
 800c318:	462b      	mov	r3, r5
 800c31a:	e7f5      	b.n	800c308 <__kernel_rem_pio2+0x2f8>
 800c31c:	1e62      	subs	r2, r4, #1
 800c31e:	ab0c      	add	r3, sp, #48	; 0x30
 800c320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c324:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c328:	a90c      	add	r1, sp, #48	; 0x30
 800c32a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c32e:	e754      	b.n	800c1da <__kernel_rem_pio2+0x1ca>
	...
 800c33c:	3ff00000 	.word	0x3ff00000
 800c340:	0800ce20 	.word	0x0800ce20
 800c344:	40200000 	.word	0x40200000
 800c348:	3ff00000 	.word	0x3ff00000
 800c34c:	3e700000 	.word	0x3e700000
 800c350:	41700000 	.word	0x41700000
 800c354:	3fe00000 	.word	0x3fe00000
 800c358:	0800cde0 	.word	0x0800cde0
 800c35c:	1e62      	subs	r2, r4, #1
 800c35e:	ab0c      	add	r3, sp, #48	; 0x30
 800c360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c364:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c368:	e7de      	b.n	800c328 <__kernel_rem_pio2+0x318>
 800c36a:	a90c      	add	r1, sp, #48	; 0x30
 800c36c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c370:	3b01      	subs	r3, #1
 800c372:	430a      	orrs	r2, r1
 800c374:	e790      	b.n	800c298 <__kernel_rem_pio2+0x288>
 800c376:	3301      	adds	r3, #1
 800c378:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c37c:	2900      	cmp	r1, #0
 800c37e:	d0fa      	beq.n	800c376 <__kernel_rem_pio2+0x366>
 800c380:	9a08      	ldr	r2, [sp, #32]
 800c382:	18e3      	adds	r3, r4, r3
 800c384:	18a6      	adds	r6, r4, r2
 800c386:	aa20      	add	r2, sp, #128	; 0x80
 800c388:	1c65      	adds	r5, r4, #1
 800c38a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800c38e:	9302      	str	r3, [sp, #8]
 800c390:	9b02      	ldr	r3, [sp, #8]
 800c392:	42ab      	cmp	r3, r5
 800c394:	da04      	bge.n	800c3a0 <__kernel_rem_pio2+0x390>
 800c396:	461c      	mov	r4, r3
 800c398:	e6b5      	b.n	800c106 <__kernel_rem_pio2+0xf6>
 800c39a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c39c:	2301      	movs	r3, #1
 800c39e:	e7eb      	b.n	800c378 <__kernel_rem_pio2+0x368>
 800c3a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c3a6:	f7f4 f875 	bl	8000494 <__aeabi_i2d>
 800c3aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c3ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3b0:	46b3      	mov	fp, r6
 800c3b2:	461c      	mov	r4, r3
 800c3b4:	2700      	movs	r7, #0
 800c3b6:	f04f 0800 	mov.w	r8, #0
 800c3ba:	f04f 0900 	mov.w	r9, #0
 800c3be:	9b06      	ldr	r3, [sp, #24]
 800c3c0:	429f      	cmp	r7, r3
 800c3c2:	dd06      	ble.n	800c3d2 <__kernel_rem_pio2+0x3c2>
 800c3c4:	ab70      	add	r3, sp, #448	; 0x1c0
 800c3c6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c3ca:	e9c3 8900 	strd	r8, r9, [r3]
 800c3ce:	3501      	adds	r5, #1
 800c3d0:	e7de      	b.n	800c390 <__kernel_rem_pio2+0x380>
 800c3d2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c3d6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c3da:	f7f4 f8c5 	bl	8000568 <__aeabi_dmul>
 800c3de:	4602      	mov	r2, r0
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	4640      	mov	r0, r8
 800c3e4:	4649      	mov	r1, r9
 800c3e6:	f7f3 ff09 	bl	80001fc <__adddf3>
 800c3ea:	3701      	adds	r7, #1
 800c3ec:	4680      	mov	r8, r0
 800c3ee:	4689      	mov	r9, r1
 800c3f0:	e7e5      	b.n	800c3be <__kernel_rem_pio2+0x3ae>
 800c3f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c3f6:	e754      	b.n	800c2a2 <__kernel_rem_pio2+0x292>
 800c3f8:	ec47 6b10 	vmov	d0, r6, r7
 800c3fc:	f1ca 0000 	rsb	r0, sl, #0
 800c400:	f000 fb26 	bl	800ca50 <scalbn>
 800c404:	ec57 6b10 	vmov	r6, r7, d0
 800c408:	4b9f      	ldr	r3, [pc, #636]	; (800c688 <__kernel_rem_pio2+0x678>)
 800c40a:	ee10 0a10 	vmov	r0, s0
 800c40e:	2200      	movs	r2, #0
 800c410:	4639      	mov	r1, r7
 800c412:	f7f4 fb2f 	bl	8000a74 <__aeabi_dcmpge>
 800c416:	b300      	cbz	r0, 800c45a <__kernel_rem_pio2+0x44a>
 800c418:	4b9c      	ldr	r3, [pc, #624]	; (800c68c <__kernel_rem_pio2+0x67c>)
 800c41a:	2200      	movs	r2, #0
 800c41c:	4630      	mov	r0, r6
 800c41e:	4639      	mov	r1, r7
 800c420:	f7f4 f8a2 	bl	8000568 <__aeabi_dmul>
 800c424:	f7f4 fb50 	bl	8000ac8 <__aeabi_d2iz>
 800c428:	4605      	mov	r5, r0
 800c42a:	f7f4 f833 	bl	8000494 <__aeabi_i2d>
 800c42e:	4b96      	ldr	r3, [pc, #600]	; (800c688 <__kernel_rem_pio2+0x678>)
 800c430:	2200      	movs	r2, #0
 800c432:	f7f4 f899 	bl	8000568 <__aeabi_dmul>
 800c436:	460b      	mov	r3, r1
 800c438:	4602      	mov	r2, r0
 800c43a:	4639      	mov	r1, r7
 800c43c:	4630      	mov	r0, r6
 800c43e:	f7f3 fedb 	bl	80001f8 <__aeabi_dsub>
 800c442:	f7f4 fb41 	bl	8000ac8 <__aeabi_d2iz>
 800c446:	f104 0b01 	add.w	fp, r4, #1
 800c44a:	ab0c      	add	r3, sp, #48	; 0x30
 800c44c:	f10a 0a18 	add.w	sl, sl, #24
 800c450:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c454:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800c458:	e72b      	b.n	800c2b2 <__kernel_rem_pio2+0x2a2>
 800c45a:	4630      	mov	r0, r6
 800c45c:	4639      	mov	r1, r7
 800c45e:	f7f4 fb33 	bl	8000ac8 <__aeabi_d2iz>
 800c462:	ab0c      	add	r3, sp, #48	; 0x30
 800c464:	46a3      	mov	fp, r4
 800c466:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c46a:	e722      	b.n	800c2b2 <__kernel_rem_pio2+0x2a2>
 800c46c:	ab70      	add	r3, sp, #448	; 0x1c0
 800c46e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800c472:	ab0c      	add	r3, sp, #48	; 0x30
 800c474:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c478:	f7f4 f80c 	bl	8000494 <__aeabi_i2d>
 800c47c:	4622      	mov	r2, r4
 800c47e:	462b      	mov	r3, r5
 800c480:	f7f4 f872 	bl	8000568 <__aeabi_dmul>
 800c484:	4632      	mov	r2, r6
 800c486:	e9c9 0100 	strd	r0, r1, [r9]
 800c48a:	463b      	mov	r3, r7
 800c48c:	4620      	mov	r0, r4
 800c48e:	4629      	mov	r1, r5
 800c490:	f7f4 f86a 	bl	8000568 <__aeabi_dmul>
 800c494:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c498:	4604      	mov	r4, r0
 800c49a:	460d      	mov	r5, r1
 800c49c:	e713      	b.n	800c2c6 <__kernel_rem_pio2+0x2b6>
 800c49e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c4a2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c4a6:	f7f4 f85f 	bl	8000568 <__aeabi_dmul>
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	4629      	mov	r1, r5
 800c4b2:	f7f3 fea3 	bl	80001fc <__adddf3>
 800c4b6:	3601      	adds	r6, #1
 800c4b8:	4604      	mov	r4, r0
 800c4ba:	460d      	mov	r5, r1
 800c4bc:	9b04      	ldr	r3, [sp, #16]
 800c4be:	429e      	cmp	r6, r3
 800c4c0:	dc01      	bgt.n	800c4c6 <__kernel_rem_pio2+0x4b6>
 800c4c2:	45b0      	cmp	r8, r6
 800c4c4:	daeb      	bge.n	800c49e <__kernel_rem_pio2+0x48e>
 800c4c6:	ab48      	add	r3, sp, #288	; 0x120
 800c4c8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c4cc:	e9c3 4500 	strd	r4, r5, [r3]
 800c4d0:	3f01      	subs	r7, #1
 800c4d2:	f108 0801 	add.w	r8, r8, #1
 800c4d6:	e6ff      	b.n	800c2d8 <__kernel_rem_pio2+0x2c8>
 800c4d8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c4da:	2b02      	cmp	r3, #2
 800c4dc:	dc0b      	bgt.n	800c4f6 <__kernel_rem_pio2+0x4e6>
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	dc6e      	bgt.n	800c5c0 <__kernel_rem_pio2+0x5b0>
 800c4e2:	d045      	beq.n	800c570 <__kernel_rem_pio2+0x560>
 800c4e4:	9b07      	ldr	r3, [sp, #28]
 800c4e6:	f003 0007 	and.w	r0, r3, #7
 800c4ea:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c4ee:	ecbd 8b02 	vpop	{d8}
 800c4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4f6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800c4f8:	2b03      	cmp	r3, #3
 800c4fa:	d1f3      	bne.n	800c4e4 <__kernel_rem_pio2+0x4d4>
 800c4fc:	ab48      	add	r3, sp, #288	; 0x120
 800c4fe:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800c502:	46d0      	mov	r8, sl
 800c504:	46d9      	mov	r9, fp
 800c506:	f1b9 0f00 	cmp.w	r9, #0
 800c50a:	f1a8 0808 	sub.w	r8, r8, #8
 800c50e:	dc64      	bgt.n	800c5da <__kernel_rem_pio2+0x5ca>
 800c510:	465c      	mov	r4, fp
 800c512:	2c01      	cmp	r4, #1
 800c514:	f1aa 0a08 	sub.w	sl, sl, #8
 800c518:	dc7e      	bgt.n	800c618 <__kernel_rem_pio2+0x608>
 800c51a:	2000      	movs	r0, #0
 800c51c:	2100      	movs	r1, #0
 800c51e:	f1bb 0f01 	cmp.w	fp, #1
 800c522:	f300 8097 	bgt.w	800c654 <__kernel_rem_pio2+0x644>
 800c526:	9b02      	ldr	r3, [sp, #8]
 800c528:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800c52c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800c530:	2b00      	cmp	r3, #0
 800c532:	f040 8099 	bne.w	800c668 <__kernel_rem_pio2+0x658>
 800c536:	9b01      	ldr	r3, [sp, #4]
 800c538:	e9c3 5600 	strd	r5, r6, [r3]
 800c53c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c540:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c544:	e7ce      	b.n	800c4e4 <__kernel_rem_pio2+0x4d4>
 800c546:	ab48      	add	r3, sp, #288	; 0x120
 800c548:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c550:	f7f3 fe54 	bl	80001fc <__adddf3>
 800c554:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c558:	f1bb 0f00 	cmp.w	fp, #0
 800c55c:	daf3      	bge.n	800c546 <__kernel_rem_pio2+0x536>
 800c55e:	9b02      	ldr	r3, [sp, #8]
 800c560:	b113      	cbz	r3, 800c568 <__kernel_rem_pio2+0x558>
 800c562:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c566:	4619      	mov	r1, r3
 800c568:	9b01      	ldr	r3, [sp, #4]
 800c56a:	e9c3 0100 	strd	r0, r1, [r3]
 800c56e:	e7b9      	b.n	800c4e4 <__kernel_rem_pio2+0x4d4>
 800c570:	2000      	movs	r0, #0
 800c572:	2100      	movs	r1, #0
 800c574:	e7f0      	b.n	800c558 <__kernel_rem_pio2+0x548>
 800c576:	ab48      	add	r3, sp, #288	; 0x120
 800c578:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c580:	f7f3 fe3c 	bl	80001fc <__adddf3>
 800c584:	3c01      	subs	r4, #1
 800c586:	2c00      	cmp	r4, #0
 800c588:	daf5      	bge.n	800c576 <__kernel_rem_pio2+0x566>
 800c58a:	9b02      	ldr	r3, [sp, #8]
 800c58c:	b1e3      	cbz	r3, 800c5c8 <__kernel_rem_pio2+0x5b8>
 800c58e:	4602      	mov	r2, r0
 800c590:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c594:	9c01      	ldr	r4, [sp, #4]
 800c596:	e9c4 2300 	strd	r2, r3, [r4]
 800c59a:	4602      	mov	r2, r0
 800c59c:	460b      	mov	r3, r1
 800c59e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c5a2:	f7f3 fe29 	bl	80001f8 <__aeabi_dsub>
 800c5a6:	ad4a      	add	r5, sp, #296	; 0x128
 800c5a8:	2401      	movs	r4, #1
 800c5aa:	45a3      	cmp	fp, r4
 800c5ac:	da0f      	bge.n	800c5ce <__kernel_rem_pio2+0x5be>
 800c5ae:	9b02      	ldr	r3, [sp, #8]
 800c5b0:	b113      	cbz	r3, 800c5b8 <__kernel_rem_pio2+0x5a8>
 800c5b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5b6:	4619      	mov	r1, r3
 800c5b8:	9b01      	ldr	r3, [sp, #4]
 800c5ba:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c5be:	e791      	b.n	800c4e4 <__kernel_rem_pio2+0x4d4>
 800c5c0:	465c      	mov	r4, fp
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	2100      	movs	r1, #0
 800c5c6:	e7de      	b.n	800c586 <__kernel_rem_pio2+0x576>
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	460b      	mov	r3, r1
 800c5cc:	e7e2      	b.n	800c594 <__kernel_rem_pio2+0x584>
 800c5ce:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c5d2:	f7f3 fe13 	bl	80001fc <__adddf3>
 800c5d6:	3401      	adds	r4, #1
 800c5d8:	e7e7      	b.n	800c5aa <__kernel_rem_pio2+0x59a>
 800c5da:	e9d8 4500 	ldrd	r4, r5, [r8]
 800c5de:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	4632      	mov	r2, r6
 800c5e6:	463b      	mov	r3, r7
 800c5e8:	4629      	mov	r1, r5
 800c5ea:	f7f3 fe07 	bl	80001fc <__adddf3>
 800c5ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	4629      	mov	r1, r5
 800c5fa:	f7f3 fdfd 	bl	80001f8 <__aeabi_dsub>
 800c5fe:	4632      	mov	r2, r6
 800c600:	463b      	mov	r3, r7
 800c602:	f7f3 fdfb 	bl	80001fc <__adddf3>
 800c606:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c60a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800c60e:	ed88 7b00 	vstr	d7, [r8]
 800c612:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c616:	e776      	b.n	800c506 <__kernel_rem_pio2+0x4f6>
 800c618:	e9da 8900 	ldrd	r8, r9, [sl]
 800c61c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c620:	4640      	mov	r0, r8
 800c622:	4632      	mov	r2, r6
 800c624:	463b      	mov	r3, r7
 800c626:	4649      	mov	r1, r9
 800c628:	f7f3 fde8 	bl	80001fc <__adddf3>
 800c62c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c630:	4602      	mov	r2, r0
 800c632:	460b      	mov	r3, r1
 800c634:	4640      	mov	r0, r8
 800c636:	4649      	mov	r1, r9
 800c638:	f7f3 fdde 	bl	80001f8 <__aeabi_dsub>
 800c63c:	4632      	mov	r2, r6
 800c63e:	463b      	mov	r3, r7
 800c640:	f7f3 fddc 	bl	80001fc <__adddf3>
 800c644:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c648:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c64c:	ed8a 7b00 	vstr	d7, [sl]
 800c650:	3c01      	subs	r4, #1
 800c652:	e75e      	b.n	800c512 <__kernel_rem_pio2+0x502>
 800c654:	ab48      	add	r3, sp, #288	; 0x120
 800c656:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65e:	f7f3 fdcd 	bl	80001fc <__adddf3>
 800c662:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c666:	e75a      	b.n	800c51e <__kernel_rem_pio2+0x50e>
 800c668:	9b01      	ldr	r3, [sp, #4]
 800c66a:	9a01      	ldr	r2, [sp, #4]
 800c66c:	601d      	str	r5, [r3, #0]
 800c66e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c672:	605c      	str	r4, [r3, #4]
 800c674:	609f      	str	r7, [r3, #8]
 800c676:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c67a:	60d3      	str	r3, [r2, #12]
 800c67c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c680:	6110      	str	r0, [r2, #16]
 800c682:	6153      	str	r3, [r2, #20]
 800c684:	e72e      	b.n	800c4e4 <__kernel_rem_pio2+0x4d4>
 800c686:	bf00      	nop
 800c688:	41700000 	.word	0x41700000
 800c68c:	3e700000 	.word	0x3e700000

0800c690 <__kernel_sin>:
 800c690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c694:	ed2d 8b04 	vpush	{d8-d9}
 800c698:	eeb0 8a41 	vmov.f32	s16, s2
 800c69c:	eef0 8a61 	vmov.f32	s17, s3
 800c6a0:	ec55 4b10 	vmov	r4, r5, d0
 800c6a4:	b083      	sub	sp, #12
 800c6a6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c6aa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c6ae:	9001      	str	r0, [sp, #4]
 800c6b0:	da06      	bge.n	800c6c0 <__kernel_sin+0x30>
 800c6b2:	ee10 0a10 	vmov	r0, s0
 800c6b6:	4629      	mov	r1, r5
 800c6b8:	f7f4 fa06 	bl	8000ac8 <__aeabi_d2iz>
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	d051      	beq.n	800c764 <__kernel_sin+0xd4>
 800c6c0:	4622      	mov	r2, r4
 800c6c2:	462b      	mov	r3, r5
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	4629      	mov	r1, r5
 800c6c8:	f7f3 ff4e 	bl	8000568 <__aeabi_dmul>
 800c6cc:	4682      	mov	sl, r0
 800c6ce:	468b      	mov	fp, r1
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	4629      	mov	r1, r5
 800c6d8:	f7f3 ff46 	bl	8000568 <__aeabi_dmul>
 800c6dc:	a341      	add	r3, pc, #260	; (adr r3, 800c7e4 <__kernel_sin+0x154>)
 800c6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e2:	4680      	mov	r8, r0
 800c6e4:	4689      	mov	r9, r1
 800c6e6:	4650      	mov	r0, sl
 800c6e8:	4659      	mov	r1, fp
 800c6ea:	f7f3 ff3d 	bl	8000568 <__aeabi_dmul>
 800c6ee:	a33f      	add	r3, pc, #252	; (adr r3, 800c7ec <__kernel_sin+0x15c>)
 800c6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f4:	f7f3 fd80 	bl	80001f8 <__aeabi_dsub>
 800c6f8:	4652      	mov	r2, sl
 800c6fa:	465b      	mov	r3, fp
 800c6fc:	f7f3 ff34 	bl	8000568 <__aeabi_dmul>
 800c700:	a33c      	add	r3, pc, #240	; (adr r3, 800c7f4 <__kernel_sin+0x164>)
 800c702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c706:	f7f3 fd79 	bl	80001fc <__adddf3>
 800c70a:	4652      	mov	r2, sl
 800c70c:	465b      	mov	r3, fp
 800c70e:	f7f3 ff2b 	bl	8000568 <__aeabi_dmul>
 800c712:	a33a      	add	r3, pc, #232	; (adr r3, 800c7fc <__kernel_sin+0x16c>)
 800c714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c718:	f7f3 fd6e 	bl	80001f8 <__aeabi_dsub>
 800c71c:	4652      	mov	r2, sl
 800c71e:	465b      	mov	r3, fp
 800c720:	f7f3 ff22 	bl	8000568 <__aeabi_dmul>
 800c724:	a337      	add	r3, pc, #220	; (adr r3, 800c804 <__kernel_sin+0x174>)
 800c726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72a:	f7f3 fd67 	bl	80001fc <__adddf3>
 800c72e:	9b01      	ldr	r3, [sp, #4]
 800c730:	4606      	mov	r6, r0
 800c732:	460f      	mov	r7, r1
 800c734:	b9eb      	cbnz	r3, 800c772 <__kernel_sin+0xe2>
 800c736:	4602      	mov	r2, r0
 800c738:	460b      	mov	r3, r1
 800c73a:	4650      	mov	r0, sl
 800c73c:	4659      	mov	r1, fp
 800c73e:	f7f3 ff13 	bl	8000568 <__aeabi_dmul>
 800c742:	a325      	add	r3, pc, #148	; (adr r3, 800c7d8 <__kernel_sin+0x148>)
 800c744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c748:	f7f3 fd56 	bl	80001f8 <__aeabi_dsub>
 800c74c:	4642      	mov	r2, r8
 800c74e:	464b      	mov	r3, r9
 800c750:	f7f3 ff0a 	bl	8000568 <__aeabi_dmul>
 800c754:	4602      	mov	r2, r0
 800c756:	460b      	mov	r3, r1
 800c758:	4620      	mov	r0, r4
 800c75a:	4629      	mov	r1, r5
 800c75c:	f7f3 fd4e 	bl	80001fc <__adddf3>
 800c760:	4604      	mov	r4, r0
 800c762:	460d      	mov	r5, r1
 800c764:	ec45 4b10 	vmov	d0, r4, r5
 800c768:	b003      	add	sp, #12
 800c76a:	ecbd 8b04 	vpop	{d8-d9}
 800c76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c772:	4b1b      	ldr	r3, [pc, #108]	; (800c7e0 <__kernel_sin+0x150>)
 800c774:	ec51 0b18 	vmov	r0, r1, d8
 800c778:	2200      	movs	r2, #0
 800c77a:	f7f3 fef5 	bl	8000568 <__aeabi_dmul>
 800c77e:	4632      	mov	r2, r6
 800c780:	ec41 0b19 	vmov	d9, r0, r1
 800c784:	463b      	mov	r3, r7
 800c786:	4640      	mov	r0, r8
 800c788:	4649      	mov	r1, r9
 800c78a:	f7f3 feed 	bl	8000568 <__aeabi_dmul>
 800c78e:	4602      	mov	r2, r0
 800c790:	460b      	mov	r3, r1
 800c792:	ec51 0b19 	vmov	r0, r1, d9
 800c796:	f7f3 fd2f 	bl	80001f8 <__aeabi_dsub>
 800c79a:	4652      	mov	r2, sl
 800c79c:	465b      	mov	r3, fp
 800c79e:	f7f3 fee3 	bl	8000568 <__aeabi_dmul>
 800c7a2:	ec53 2b18 	vmov	r2, r3, d8
 800c7a6:	f7f3 fd27 	bl	80001f8 <__aeabi_dsub>
 800c7aa:	a30b      	add	r3, pc, #44	; (adr r3, 800c7d8 <__kernel_sin+0x148>)
 800c7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b0:	4606      	mov	r6, r0
 800c7b2:	460f      	mov	r7, r1
 800c7b4:	4640      	mov	r0, r8
 800c7b6:	4649      	mov	r1, r9
 800c7b8:	f7f3 fed6 	bl	8000568 <__aeabi_dmul>
 800c7bc:	4602      	mov	r2, r0
 800c7be:	460b      	mov	r3, r1
 800c7c0:	4630      	mov	r0, r6
 800c7c2:	4639      	mov	r1, r7
 800c7c4:	f7f3 fd1a 	bl	80001fc <__adddf3>
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	4629      	mov	r1, r5
 800c7d0:	f7f3 fd12 	bl	80001f8 <__aeabi_dsub>
 800c7d4:	e7c4      	b.n	800c760 <__kernel_sin+0xd0>
 800c7d6:	bf00      	nop
 800c7d8:	55555549 	.word	0x55555549
 800c7dc:	3fc55555 	.word	0x3fc55555
 800c7e0:	3fe00000 	.word	0x3fe00000
 800c7e4:	5acfd57c 	.word	0x5acfd57c
 800c7e8:	3de5d93a 	.word	0x3de5d93a
 800c7ec:	8a2b9ceb 	.word	0x8a2b9ceb
 800c7f0:	3e5ae5e6 	.word	0x3e5ae5e6
 800c7f4:	57b1fe7d 	.word	0x57b1fe7d
 800c7f8:	3ec71de3 	.word	0x3ec71de3
 800c7fc:	19c161d5 	.word	0x19c161d5
 800c800:	3f2a01a0 	.word	0x3f2a01a0
 800c804:	1110f8a6 	.word	0x1110f8a6
 800c808:	3f811111 	.word	0x3f811111

0800c80c <finite>:
 800c80c:	b082      	sub	sp, #8
 800c80e:	ed8d 0b00 	vstr	d0, [sp]
 800c812:	9801      	ldr	r0, [sp, #4]
 800c814:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c818:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c81c:	0fc0      	lsrs	r0, r0, #31
 800c81e:	b002      	add	sp, #8
 800c820:	4770      	bx	lr
 800c822:	0000      	movs	r0, r0
 800c824:	0000      	movs	r0, r0
	...

0800c828 <floor>:
 800c828:	ec51 0b10 	vmov	r0, r1, d0
 800c82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c830:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c834:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c838:	2e13      	cmp	r6, #19
 800c83a:	ee10 5a10 	vmov	r5, s0
 800c83e:	ee10 8a10 	vmov	r8, s0
 800c842:	460c      	mov	r4, r1
 800c844:	dc32      	bgt.n	800c8ac <floor+0x84>
 800c846:	2e00      	cmp	r6, #0
 800c848:	da14      	bge.n	800c874 <floor+0x4c>
 800c84a:	a333      	add	r3, pc, #204	; (adr r3, 800c918 <floor+0xf0>)
 800c84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c850:	f7f3 fcd4 	bl	80001fc <__adddf3>
 800c854:	2200      	movs	r2, #0
 800c856:	2300      	movs	r3, #0
 800c858:	f7f4 f916 	bl	8000a88 <__aeabi_dcmpgt>
 800c85c:	b138      	cbz	r0, 800c86e <floor+0x46>
 800c85e:	2c00      	cmp	r4, #0
 800c860:	da57      	bge.n	800c912 <floor+0xea>
 800c862:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c866:	431d      	orrs	r5, r3
 800c868:	d001      	beq.n	800c86e <floor+0x46>
 800c86a:	4c2d      	ldr	r4, [pc, #180]	; (800c920 <floor+0xf8>)
 800c86c:	2500      	movs	r5, #0
 800c86e:	4621      	mov	r1, r4
 800c870:	4628      	mov	r0, r5
 800c872:	e025      	b.n	800c8c0 <floor+0x98>
 800c874:	4f2b      	ldr	r7, [pc, #172]	; (800c924 <floor+0xfc>)
 800c876:	4137      	asrs	r7, r6
 800c878:	ea01 0307 	and.w	r3, r1, r7
 800c87c:	4303      	orrs	r3, r0
 800c87e:	d01f      	beq.n	800c8c0 <floor+0x98>
 800c880:	a325      	add	r3, pc, #148	; (adr r3, 800c918 <floor+0xf0>)
 800c882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c886:	f7f3 fcb9 	bl	80001fc <__adddf3>
 800c88a:	2200      	movs	r2, #0
 800c88c:	2300      	movs	r3, #0
 800c88e:	f7f4 f8fb 	bl	8000a88 <__aeabi_dcmpgt>
 800c892:	2800      	cmp	r0, #0
 800c894:	d0eb      	beq.n	800c86e <floor+0x46>
 800c896:	2c00      	cmp	r4, #0
 800c898:	bfbe      	ittt	lt
 800c89a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c89e:	fa43 f606 	asrlt.w	r6, r3, r6
 800c8a2:	19a4      	addlt	r4, r4, r6
 800c8a4:	ea24 0407 	bic.w	r4, r4, r7
 800c8a8:	2500      	movs	r5, #0
 800c8aa:	e7e0      	b.n	800c86e <floor+0x46>
 800c8ac:	2e33      	cmp	r6, #51	; 0x33
 800c8ae:	dd0b      	ble.n	800c8c8 <floor+0xa0>
 800c8b0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c8b4:	d104      	bne.n	800c8c0 <floor+0x98>
 800c8b6:	ee10 2a10 	vmov	r2, s0
 800c8ba:	460b      	mov	r3, r1
 800c8bc:	f7f3 fc9e 	bl	80001fc <__adddf3>
 800c8c0:	ec41 0b10 	vmov	d0, r0, r1
 800c8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8c8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c8cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8d0:	fa23 f707 	lsr.w	r7, r3, r7
 800c8d4:	4207      	tst	r7, r0
 800c8d6:	d0f3      	beq.n	800c8c0 <floor+0x98>
 800c8d8:	a30f      	add	r3, pc, #60	; (adr r3, 800c918 <floor+0xf0>)
 800c8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8de:	f7f3 fc8d 	bl	80001fc <__adddf3>
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	f7f4 f8cf 	bl	8000a88 <__aeabi_dcmpgt>
 800c8ea:	2800      	cmp	r0, #0
 800c8ec:	d0bf      	beq.n	800c86e <floor+0x46>
 800c8ee:	2c00      	cmp	r4, #0
 800c8f0:	da02      	bge.n	800c8f8 <floor+0xd0>
 800c8f2:	2e14      	cmp	r6, #20
 800c8f4:	d103      	bne.n	800c8fe <floor+0xd6>
 800c8f6:	3401      	adds	r4, #1
 800c8f8:	ea25 0507 	bic.w	r5, r5, r7
 800c8fc:	e7b7      	b.n	800c86e <floor+0x46>
 800c8fe:	2301      	movs	r3, #1
 800c900:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c904:	fa03 f606 	lsl.w	r6, r3, r6
 800c908:	4435      	add	r5, r6
 800c90a:	4545      	cmp	r5, r8
 800c90c:	bf38      	it	cc
 800c90e:	18e4      	addcc	r4, r4, r3
 800c910:	e7f2      	b.n	800c8f8 <floor+0xd0>
 800c912:	2500      	movs	r5, #0
 800c914:	462c      	mov	r4, r5
 800c916:	e7aa      	b.n	800c86e <floor+0x46>
 800c918:	8800759c 	.word	0x8800759c
 800c91c:	7e37e43c 	.word	0x7e37e43c
 800c920:	bff00000 	.word	0xbff00000
 800c924:	000fffff 	.word	0x000fffff

0800c928 <nan>:
 800c928:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c930 <nan+0x8>
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop
 800c930:	00000000 	.word	0x00000000
 800c934:	7ff80000 	.word	0x7ff80000

0800c938 <rint>:
 800c938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c93a:	ec51 0b10 	vmov	r0, r1, d0
 800c93e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c942:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c946:	2e13      	cmp	r6, #19
 800c948:	ee10 4a10 	vmov	r4, s0
 800c94c:	460b      	mov	r3, r1
 800c94e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800c952:	dc58      	bgt.n	800ca06 <rint+0xce>
 800c954:	2e00      	cmp	r6, #0
 800c956:	da2b      	bge.n	800c9b0 <rint+0x78>
 800c958:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c95c:	4302      	orrs	r2, r0
 800c95e:	d023      	beq.n	800c9a8 <rint+0x70>
 800c960:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c964:	4302      	orrs	r2, r0
 800c966:	4254      	negs	r4, r2
 800c968:	4314      	orrs	r4, r2
 800c96a:	0c4b      	lsrs	r3, r1, #17
 800c96c:	0b24      	lsrs	r4, r4, #12
 800c96e:	045b      	lsls	r3, r3, #17
 800c970:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800c974:	ea44 0103 	orr.w	r1, r4, r3
 800c978:	4b32      	ldr	r3, [pc, #200]	; (800ca44 <rint+0x10c>)
 800c97a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c97e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c982:	4602      	mov	r2, r0
 800c984:	460b      	mov	r3, r1
 800c986:	4630      	mov	r0, r6
 800c988:	4639      	mov	r1, r7
 800c98a:	f7f3 fc37 	bl	80001fc <__adddf3>
 800c98e:	e9cd 0100 	strd	r0, r1, [sp]
 800c992:	463b      	mov	r3, r7
 800c994:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c998:	4632      	mov	r2, r6
 800c99a:	f7f3 fc2d 	bl	80001f8 <__aeabi_dsub>
 800c99e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c9a2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800c9a6:	4639      	mov	r1, r7
 800c9a8:	ec41 0b10 	vmov	d0, r0, r1
 800c9ac:	b003      	add	sp, #12
 800c9ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9b0:	4a25      	ldr	r2, [pc, #148]	; (800ca48 <rint+0x110>)
 800c9b2:	4132      	asrs	r2, r6
 800c9b4:	ea01 0702 	and.w	r7, r1, r2
 800c9b8:	4307      	orrs	r7, r0
 800c9ba:	d0f5      	beq.n	800c9a8 <rint+0x70>
 800c9bc:	0851      	lsrs	r1, r2, #1
 800c9be:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800c9c2:	4314      	orrs	r4, r2
 800c9c4:	d00c      	beq.n	800c9e0 <rint+0xa8>
 800c9c6:	ea23 0201 	bic.w	r2, r3, r1
 800c9ca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c9ce:	2e13      	cmp	r6, #19
 800c9d0:	fa43 f606 	asr.w	r6, r3, r6
 800c9d4:	bf0c      	ite	eq
 800c9d6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800c9da:	2400      	movne	r4, #0
 800c9dc:	ea42 0306 	orr.w	r3, r2, r6
 800c9e0:	4918      	ldr	r1, [pc, #96]	; (800ca44 <rint+0x10c>)
 800c9e2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800c9e6:	4622      	mov	r2, r4
 800c9e8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	4629      	mov	r1, r5
 800c9f0:	f7f3 fc04 	bl	80001fc <__adddf3>
 800c9f4:	e9cd 0100 	strd	r0, r1, [sp]
 800c9f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c9fc:	4622      	mov	r2, r4
 800c9fe:	462b      	mov	r3, r5
 800ca00:	f7f3 fbfa 	bl	80001f8 <__aeabi_dsub>
 800ca04:	e7d0      	b.n	800c9a8 <rint+0x70>
 800ca06:	2e33      	cmp	r6, #51	; 0x33
 800ca08:	dd07      	ble.n	800ca1a <rint+0xe2>
 800ca0a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ca0e:	d1cb      	bne.n	800c9a8 <rint+0x70>
 800ca10:	ee10 2a10 	vmov	r2, s0
 800ca14:	f7f3 fbf2 	bl	80001fc <__adddf3>
 800ca18:	e7c6      	b.n	800c9a8 <rint+0x70>
 800ca1a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800ca1e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800ca22:	40d6      	lsrs	r6, r2
 800ca24:	4230      	tst	r0, r6
 800ca26:	d0bf      	beq.n	800c9a8 <rint+0x70>
 800ca28:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800ca2c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800ca30:	bf1f      	itttt	ne
 800ca32:	ea24 0101 	bicne.w	r1, r4, r1
 800ca36:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800ca3a:	fa44 f202 	asrne.w	r2, r4, r2
 800ca3e:	ea41 0402 	orrne.w	r4, r1, r2
 800ca42:	e7cd      	b.n	800c9e0 <rint+0xa8>
 800ca44:	0800ce30 	.word	0x0800ce30
 800ca48:	000fffff 	.word	0x000fffff
 800ca4c:	00000000 	.word	0x00000000

0800ca50 <scalbn>:
 800ca50:	b570      	push	{r4, r5, r6, lr}
 800ca52:	ec55 4b10 	vmov	r4, r5, d0
 800ca56:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ca5a:	4606      	mov	r6, r0
 800ca5c:	462b      	mov	r3, r5
 800ca5e:	b99a      	cbnz	r2, 800ca88 <scalbn+0x38>
 800ca60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ca64:	4323      	orrs	r3, r4
 800ca66:	d036      	beq.n	800cad6 <scalbn+0x86>
 800ca68:	4b39      	ldr	r3, [pc, #228]	; (800cb50 <scalbn+0x100>)
 800ca6a:	4629      	mov	r1, r5
 800ca6c:	ee10 0a10 	vmov	r0, s0
 800ca70:	2200      	movs	r2, #0
 800ca72:	f7f3 fd79 	bl	8000568 <__aeabi_dmul>
 800ca76:	4b37      	ldr	r3, [pc, #220]	; (800cb54 <scalbn+0x104>)
 800ca78:	429e      	cmp	r6, r3
 800ca7a:	4604      	mov	r4, r0
 800ca7c:	460d      	mov	r5, r1
 800ca7e:	da10      	bge.n	800caa2 <scalbn+0x52>
 800ca80:	a32b      	add	r3, pc, #172	; (adr r3, 800cb30 <scalbn+0xe0>)
 800ca82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca86:	e03a      	b.n	800cafe <scalbn+0xae>
 800ca88:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ca8c:	428a      	cmp	r2, r1
 800ca8e:	d10c      	bne.n	800caaa <scalbn+0x5a>
 800ca90:	ee10 2a10 	vmov	r2, s0
 800ca94:	4620      	mov	r0, r4
 800ca96:	4629      	mov	r1, r5
 800ca98:	f7f3 fbb0 	bl	80001fc <__adddf3>
 800ca9c:	4604      	mov	r4, r0
 800ca9e:	460d      	mov	r5, r1
 800caa0:	e019      	b.n	800cad6 <scalbn+0x86>
 800caa2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800caa6:	460b      	mov	r3, r1
 800caa8:	3a36      	subs	r2, #54	; 0x36
 800caaa:	4432      	add	r2, r6
 800caac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cab0:	428a      	cmp	r2, r1
 800cab2:	dd08      	ble.n	800cac6 <scalbn+0x76>
 800cab4:	2d00      	cmp	r5, #0
 800cab6:	a120      	add	r1, pc, #128	; (adr r1, 800cb38 <scalbn+0xe8>)
 800cab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cabc:	da1c      	bge.n	800caf8 <scalbn+0xa8>
 800cabe:	a120      	add	r1, pc, #128	; (adr r1, 800cb40 <scalbn+0xf0>)
 800cac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cac4:	e018      	b.n	800caf8 <scalbn+0xa8>
 800cac6:	2a00      	cmp	r2, #0
 800cac8:	dd08      	ble.n	800cadc <scalbn+0x8c>
 800caca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cace:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cad2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cad6:	ec45 4b10 	vmov	d0, r4, r5
 800cada:	bd70      	pop	{r4, r5, r6, pc}
 800cadc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cae0:	da19      	bge.n	800cb16 <scalbn+0xc6>
 800cae2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cae6:	429e      	cmp	r6, r3
 800cae8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800caec:	dd0a      	ble.n	800cb04 <scalbn+0xb4>
 800caee:	a112      	add	r1, pc, #72	; (adr r1, 800cb38 <scalbn+0xe8>)
 800caf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d1e2      	bne.n	800cabe <scalbn+0x6e>
 800caf8:	a30f      	add	r3, pc, #60	; (adr r3, 800cb38 <scalbn+0xe8>)
 800cafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafe:	f7f3 fd33 	bl	8000568 <__aeabi_dmul>
 800cb02:	e7cb      	b.n	800ca9c <scalbn+0x4c>
 800cb04:	a10a      	add	r1, pc, #40	; (adr r1, 800cb30 <scalbn+0xe0>)
 800cb06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d0b8      	beq.n	800ca80 <scalbn+0x30>
 800cb0e:	a10e      	add	r1, pc, #56	; (adr r1, 800cb48 <scalbn+0xf8>)
 800cb10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb14:	e7b4      	b.n	800ca80 <scalbn+0x30>
 800cb16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cb1a:	3236      	adds	r2, #54	; 0x36
 800cb1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cb20:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800cb24:	4620      	mov	r0, r4
 800cb26:	4b0c      	ldr	r3, [pc, #48]	; (800cb58 <scalbn+0x108>)
 800cb28:	2200      	movs	r2, #0
 800cb2a:	e7e8      	b.n	800cafe <scalbn+0xae>
 800cb2c:	f3af 8000 	nop.w
 800cb30:	c2f8f359 	.word	0xc2f8f359
 800cb34:	01a56e1f 	.word	0x01a56e1f
 800cb38:	8800759c 	.word	0x8800759c
 800cb3c:	7e37e43c 	.word	0x7e37e43c
 800cb40:	8800759c 	.word	0x8800759c
 800cb44:	fe37e43c 	.word	0xfe37e43c
 800cb48:	c2f8f359 	.word	0xc2f8f359
 800cb4c:	81a56e1f 	.word	0x81a56e1f
 800cb50:	43500000 	.word	0x43500000
 800cb54:	ffff3cb0 	.word	0xffff3cb0
 800cb58:	3c900000 	.word	0x3c900000

0800cb5c <_init>:
 800cb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb5e:	bf00      	nop
 800cb60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb62:	bc08      	pop	{r3}
 800cb64:	469e      	mov	lr, r3
 800cb66:	4770      	bx	lr

0800cb68 <_fini>:
 800cb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb6a:	bf00      	nop
 800cb6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb6e:	bc08      	pop	{r3}
 800cb70:	469e      	mov	lr, r3
 800cb72:	4770      	bx	lr
