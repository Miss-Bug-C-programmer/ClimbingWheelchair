
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e42c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800e5e0  0800e5e0  0001e5e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb00  0800eb00  00020274  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb00  0800eb00  0001eb00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb08  0800eb08  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb08  0800eb08  0001eb08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb0c  0800eb0c  0001eb0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  0800eb10  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  20000278  0800ed84  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000774  0800ed84  00020774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d39e  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040b8  00000000  00000000  0003d642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  00041700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001368  00000000  00000000  00042c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b2f  00000000  00000000  00043fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001edb9  00000000  00000000  0006badf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e228c  00000000  00000000  0008a898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016cb24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cf8  00000000  00000000  0016cb78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000278 	.word	0x20000278
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e5c4 	.word	0x0800e5c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000027c 	.word	0x2000027c
 80001ec:	0800e5c4 	.word	0x0800e5c4

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <pid_create>:
	Author e-mail: ruben at geekfactory dot mx
 */
#include "PID.h"

PID_t pid_create(PID_t pid, float* in, float* out, float* set, float kp, float ki, float kd)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	61f8      	str	r0, [r7, #28]
 8000ef8:	61b9      	str	r1, [r7, #24]
 8000efa:	617a      	str	r2, [r7, #20]
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f02:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f06:	ed87 1a01 	vstr	s2, [r7, #4]
	pid->input = in;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	601a      	str	r2, [r3, #0]
	pid->output = out;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	605a      	str	r2, [r3, #4]
	pid->setpoint = set;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	609a      	str	r2, [r3, #8]
	pid->automode = false;
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	pid_limits(pid, 0, 255);
 8000f24:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000f6c <pid_create+0x7c>
 8000f28:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000f70 <pid_create+0x80>
 8000f2c:	69f8      	ldr	r0, [r7, #28]
 8000f2e:	f000 f96b 	bl	8001208 <pid_limits>

	// Set default sample time to 100 ms
	pid->sampletime = 100 * (FREQUENCY / 1000);
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	2264      	movs	r2, #100	; 0x64
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c

	pid_direction(pid, E_PID_DIRECT);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	69f8      	ldr	r0, [r7, #28]
 8000f3c:	f000 fa06 	bl	800134c <pid_direction>
	PID_tune(pid, kp, ki, kd);
 8000f40:	ed97 1a01 	vldr	s2, [r7, #4]
 8000f44:	edd7 0a02 	vldr	s1, [r7, #8]
 8000f48:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f4c:	69f8      	ldr	r0, [r7, #28]
 8000f4e:	f000 f8b9 	bl	80010c4 <PID_tune>

	pid->lasttime = HAL_GetTick() - pid->sampletime;
 8000f52:	f003 fcf9 	bl	8004948 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5c:	1ad2      	subs	r2, r2, r3
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28

	return pid;
 8000f62:	69fb      	ldr	r3, [r7, #28]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	437f0000 	.word	0x437f0000
 8000f70:	00000000 	.word	0x00000000

08000f74 <pid_need_compute>:

bool pid_need_compute(PID_t pid)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	// Check if the PID period has elapsed
	return(HAL_GetTick() - pid->lasttime >= pid->sampletime) ? true : false;
 8000f7c:	f003 fce4 	bl	8004948 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f86:	1ad2      	subs	r2, r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	bf2c      	ite	cs
 8000f90:	2301      	movcs	r3, #1
 8000f92:	2300      	movcc	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <pid_compute>:
void pid_compute(PID_t pid)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
	// Check if control is enabled
	if (!pid->automode)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 8084 	beq.w	80010ba <pid_compute+0x11c>
		return ;
	
	float in = *(pid->input);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	613b      	str	r3, [r7, #16]
	// Compute error
	float error = (*(pid->setpoint)) - in;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	ed93 7a00 	vldr	s14, [r3]
 8000fc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fca:	edc7 7a03 	vstr	s15, [r7, #12]
	// Compute integral
	pid->iterm += (pid->Ki * error);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	ed93 7a08 	vldr	s14, [r3, #32]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edd3 6a04 	vldr	s13, [r3, #16]
 8000fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	edc3 7a08 	vstr	s15, [r3, #32]
	if (pid->iterm > pid->omax)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	ed93 7a08 	vldr	s14, [r3, #32]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001000:	dd04      	ble.n	800100c <pid_compute+0x6e>
		pid->iterm = pid->omax;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69da      	ldr	r2, [r3, #28]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	621a      	str	r2, [r3, #32]
 800100a:	e00e      	b.n	800102a <pid_compute+0x8c>
	else if (pid->iterm < pid->omin)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	edd3 7a06 	vldr	s15, [r3, #24]
 8001018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	d503      	bpl.n	800102a <pid_compute+0x8c>
		pid->iterm = pid->omin;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	699a      	ldr	r2, [r3, #24]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	621a      	str	r2, [r3, #32]
	// Compute differential on input
	float dinput = in - pid->lastin;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001030:	ed97 7a04 	vldr	s14, [r7, #16]
 8001034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001038:	edc7 7a02 	vstr	s15, [r7, #8]
	// Compute PID output
	float out = pid->Kp * error + pid->iterm - pid->Kd * dinput;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001042:	edd7 7a03 	vldr	s15, [r7, #12]
 8001046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	edd3 6a05 	vldr	s13, [r3, #20]
 800105a:	edd7 7a02 	vldr	s15, [r7, #8]
 800105e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001066:	edc7 7a05 	vstr	s15, [r7, #20]
	// Apply limit to output value
	if (out > pid->omax)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001070:	ed97 7a05 	vldr	s14, [r7, #20]
 8001074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107c:	dd03      	ble.n	8001086 <pid_compute+0xe8>
		out = pid->omax;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e00c      	b.n	80010a0 <pid_compute+0x102>
	else if (out < pid->omin)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	edd3 7a06 	vldr	s15, [r3, #24]
 800108c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	d502      	bpl.n	80010a0 <pid_compute+0x102>
		out = pid->omin;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	617b      	str	r3, [r7, #20]
	// Output to pointed variable
	(*pid->output) = out;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	601a      	str	r2, [r3, #0]
	// Keep track of some variables for next execution
	pid->lastin = in;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
	pid->lasttime = HAL_GetTick();
 80010ae:	f003 fc4b 	bl	8004948 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
 80010b8:	e000      	b.n	80010bc <pid_compute+0x11e>
		return ;
 80010ba:	bf00      	nop
}
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <PID_tune>:

void PID_tune(PID_t pid, float kp, float ki, float kd)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80010d0:	edc7 0a01 	vstr	s1, [r7, #4]
 80010d4:	ed87 1a00 	vstr	s2, [r7]
	// Check for validity
	if (kp < 0 || ki < 0 || kd < 0)
 80010d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80010dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	d452      	bmi.n	800118c <PID_tune+0xc8>
 80010e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f2:	d44b      	bmi.n	800118c <PID_tune+0xc8>
 80010f4:	edd7 7a00 	vldr	s15, [r7]
 80010f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001100:	d444      	bmi.n	800118c <PID_tune+0xc8>
		return;
	
	//Compute sample time in seconds
	float ssec = ((float) pid->sampletime) / ((float) FREQUENCY);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800110e:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001198 <PID_tune+0xd4>
 8001112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001116:	edc7 7a05 	vstr	s15, [r7, #20]

	pid->Kp = kp;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	60da      	str	r2, [r3, #12]
	pid->Ki = ki * ssec;
 8001120:	ed97 7a01 	vldr	s14, [r7, #4]
 8001124:	edd7 7a05 	vldr	s15, [r7, #20]
 8001128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->Kd = kd / ssec;
 8001132:	edd7 6a00 	vldr	s13, [r7]
 8001136:	ed97 7a05 	vldr	s14, [r7, #20]
 800113a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	edc3 7a05 	vstr	s15, [r3, #20]

	if (pid->direction == E_PID_REVERSE) {
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800114a:	2b01      	cmp	r3, #1
 800114c:	d11f      	bne.n	800118e <PID_tune+0xca>
		pid->Kp = 0 - pid->Kp;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	edd3 7a03 	vldr	s15, [r3, #12]
 8001154:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800119c <PID_tune+0xd8>
 8001158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = 0 - pid->Ki;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	edd3 7a04 	vldr	s15, [r3, #16]
 8001168:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800119c <PID_tune+0xd8>
 800116c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = 0 - pid->Kd;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	edd3 7a05 	vldr	s15, [r3, #20]
 800117c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800119c <PID_tune+0xd8>
 8001180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	edc3 7a05 	vstr	s15, [r3, #20]
 800118a:	e000      	b.n	800118e <PID_tune+0xca>
		return;
 800118c:	bf00      	nop
	}
}
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	447a0000 	.word	0x447a0000
 800119c:	00000000 	.word	0x00000000

080011a0 <pid_sample>:

void pid_sample(PID_t pid, uint32_t time)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	if (time > 0) {
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d025      	beq.n	80011fc <pid_sample+0x5c>
		float ratio = (float) (time * (FREQUENCY / 1000)) / (float) pid->sampletime;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	ee07 3a90 	vmov	s15, r3
 80011c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ca:	edc7 7a03 	vstr	s15, [r7, #12]
		pid->Ki *= ratio;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80011d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd /= ratio;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edd3 6a05 	vldr	s13, [r3, #20]
 80011e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80011ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edc3 7a05 	vstr	s15, [r3, #20]
		pid->sampletime = time * (FREQUENCY / 1000);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <pid_limits>:

void pid_limits(PID_t pid, float min, float max)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	ed87 0a02 	vstr	s0, [r7, #8]
 8001214:	edc7 0a01 	vstr	s1, [r7, #4]
	if (min >= max) return;
 8001218:	ed97 7a02 	vldr	s14, [r7, #8]
 800121c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001228:	da4d      	bge.n	80012c6 <pid_limits+0xbe>
	pid->omin = min;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	619a      	str	r2, [r3, #24]
	pid->omax = max;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	61da      	str	r2, [r3, #28]
	//Adjust output to new limits
	if (pid->automode) {
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800123c:	2b00      	cmp	r3, #0
 800123e:	d043      	beq.n	80012c8 <pid_limits+0xc0>
		if (*(pid->output) > pid->omax)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	ed93 7a00 	vldr	s14, [r3]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	edd3 7a07 	vldr	s15, [r3, #28]
 800124e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	dd05      	ble.n	8001264 <pid_limits+0x5c>
			*(pid->output) = pid->omax;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	69d2      	ldr	r2, [r2, #28]
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e010      	b.n	8001286 <pid_limits+0x7e>
		else if (*(pid->output) < pid->omin)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	ed93 7a00 	vldr	s14, [r3]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	d504      	bpl.n	8001286 <pid_limits+0x7e>
			*(pid->output) = pid->omin;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	6992      	ldr	r2, [r2, #24]
 8001284:	601a      	str	r2, [r3, #0]

		if (pid->iterm > pid->omax)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	ed93 7a08 	vldr	s14, [r3, #32]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	dd04      	ble.n	80012a6 <pid_limits+0x9e>
			pid->iterm = pid->omax;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	69da      	ldr	r2, [r3, #28]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	621a      	str	r2, [r3, #32]
 80012a4:	e010      	b.n	80012c8 <pid_limits+0xc0>
		else if (pid->iterm < pid->omin)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	ed93 7a08 	vldr	s14, [r3, #32]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80012b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	d505      	bpl.n	80012c8 <pid_limits+0xc0>
			pid->iterm = pid->omin;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	699a      	ldr	r2, [r3, #24]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	621a      	str	r2, [r3, #32]
 80012c4:	e000      	b.n	80012c8 <pid_limits+0xc0>
	if (min >= max) return;
 80012c6:	bf00      	nop
	}
}
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <pid_auto>:

void pid_auto(PID_t pid)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
	// If going from manual to auto
	if (!pid->automode) {
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d12c      	bne.n	800133e <pid_auto+0x6c>
		pid->iterm = *(pid->output);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	621a      	str	r2, [r3, #32]
		pid->lastin = *(pid->input);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
		if (pid->iterm > pid->omax)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	ed93 7a08 	vldr	s14, [r3, #32]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edd3 7a07 	vldr	s15, [r3, #28]
 8001304:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130c:	dd04      	ble.n	8001318 <pid_auto+0x46>
			pid->iterm = pid->omax;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69da      	ldr	r2, [r3, #28]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	621a      	str	r2, [r3, #32]
 8001316:	e00e      	b.n	8001336 <pid_auto+0x64>
		else if (pid->iterm < pid->omin)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	ed93 7a08 	vldr	s14, [r3, #32]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	edd3 7a06 	vldr	s15, [r3, #24]
 8001324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132c:	d503      	bpl.n	8001336 <pid_auto+0x64>
			pid->iterm = pid->omin;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699a      	ldr	r2, [r3, #24]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	621a      	str	r2, [r3, #32]
		pid->automode = true;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <pid_direction>:
{
	pid->automode = false;
}

void pid_direction(PID_t pid, enum pid_control_directions dir)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
	if (pid->automode && pid->direction != dir) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800135e:	2b00      	cmp	r3, #0
 8001360:	d023      	beq.n	80013aa <pid_direction+0x5e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001368:	78fa      	ldrb	r2, [r7, #3]
 800136a:	429a      	cmp	r2, r3
 800136c:	d01d      	beq.n	80013aa <pid_direction+0x5e>
		pid->Kp = (0 - pid->Kp);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	edd3 7a03 	vldr	s15, [r3, #12]
 8001374:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80013c0 <pid_direction+0x74>
 8001378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = (0 - pid->Ki);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	edd3 7a04 	vldr	s15, [r3, #16]
 8001388:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80013c0 <pid_direction+0x74>
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = (0 - pid->Kd);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	edd3 7a05 	vldr	s15, [r3, #20]
 800139c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013c0 <pid_direction+0x74>
 80013a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	pid->direction = dir;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	78fa      	ldrb	r2, [r7, #3]
 80013ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	00000000 	.word	0x00000000

080013c4 <pid_reset>:

void pid_reset(PID_t pid){
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	*(pid->output) = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
	*(pid->input)  = 0;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f04f 0200 	mov.w	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
	pid->iterm = *(pid->output);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	621a      	str	r2, [r3, #32]
	pid->lastin = *(pid->input);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <hubMotor_Init>:
#include "X2_6010S.h"
extern uint8_t receive_buf[15];



void hubMotor_Init(){
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HubM_IO_SON_GPIO_Port, HubM_IO_SON_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800140a:	4808      	ldr	r0, [pc, #32]	; (800142c <hubMotor_Init+0x2c>)
 800140c:	f005 fcc4 	bl	8006d98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_NOT_GPIO_Port, HubM_IO_NOT_Pin, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <hubMotor_Init+0x2c>)
 8001418:	f005 fcbe 	bl	8006d98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_POT_GPIO_Port, HubM_IO_POT_Pin, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001422:	4802      	ldr	r0, [pc, #8]	; (800142c <hubMotor_Init+0x2c>)
 8001424:	f005 fcb8 	bl	8006d98 <HAL_GPIO_WritePin>
}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40020c00 	.word	0x40020c00

08001430 <send_HubMotor>:

void send_HubMotor(float m1_ang_speed, float m2_ang_speed){
 8001430:	b580      	push	{r7, lr}
 8001432:	b08c      	sub	sp, #48	; 0x30
 8001434:	af00      	add	r7, sp, #0
 8001436:	ed87 0a01 	vstr	s0, [r7, #4]
 800143a:	edc7 0a00 	vstr	s1, [r7]
	int16_t motor1_speed, motor2_speed;
	//convert velocity into pulse/second
	motor1_speed = -(int16_t)(m1_ang_speed * 4096.0 / (2 * M_PI));
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff f83a 	bl	80004b8 <__aeabi_f2d>
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	4b63      	ldr	r3, [pc, #396]	; (80015d8 <send_HubMotor+0x1a8>)
 800144a:	f7ff f88d 	bl	8000568 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	a35e      	add	r3, pc, #376	; (adr r3, 80015d0 <send_HubMotor+0x1a0>)
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	f7ff f9ae 	bl	80007bc <__aeabi_ddiv>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	f7ff fb2e 	bl	8000ac8 <__aeabi_d2iz>
 800146c:	4603      	mov	r3, r0
 800146e:	b21b      	sxth	r3, r3
 8001470:	b29b      	uxth	r3, r3
 8001472:	425b      	negs	r3, r3
 8001474:	b29b      	uxth	r3, r3
 8001476:	85fb      	strh	r3, [r7, #46]	; 0x2e
	motor2_speed = (int16_t)(m2_ang_speed * 4096.0/ (2 * M_PI));
 8001478:	6838      	ldr	r0, [r7, #0]
 800147a:	f7ff f81d 	bl	80004b8 <__aeabi_f2d>
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	4b55      	ldr	r3, [pc, #340]	; (80015d8 <send_HubMotor+0x1a8>)
 8001484:	f7ff f870 	bl	8000568 <__aeabi_dmul>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	a34f      	add	r3, pc, #316	; (adr r3, 80015d0 <send_HubMotor+0x1a0>)
 8001492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001496:	f7ff f991 	bl	80007bc <__aeabi_ddiv>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	f7ff fb11 	bl	8000ac8 <__aeabi_d2iz>
 80014a6:	4603      	mov	r3, r0
 80014a8:	85bb      	strh	r3, [r7, #44]	; 0x2c
//	motor1_speed = -(int16_t)(m1_speed);
//	motor2_speed = (int16_t)(m2_speed);

	uint8_t send_buf[15];
	send_buf[0] = 0xAA;
 80014aa:	23aa      	movs	r3, #170	; 0xaa
 80014ac:	733b      	strb	r3, [r7, #12]
	send_buf[1] = 0xA4;
 80014ae:	23a4      	movs	r3, #164	; 0xa4
 80014b0:	737b      	strb	r3, [r7, #13]
	send_buf[2] = 0x0E;
 80014b2:	230e      	movs	r3, #14
 80014b4:	73bb      	strb	r3, [r7, #14]
	send_buf[3] = 0x00;
 80014b6:	2300      	movs	r3, #0
 80014b8:	73fb      	strb	r3, [r7, #15]
	send_buf[4] = MOTOR_ENABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	743b      	strb	r3, [r7, #16]
	send_buf[5] = MOTOR_ENCODER_FEEDBACK;
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	747b      	strb	r3, [r7, #17]

	//Set acceleration to constant by default
	//time taken from 0 to 1000rpm
	uint16_t acceleration = 200;
 80014c2:	23c8      	movs	r3, #200	; 0xc8
 80014c4:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t msb_acce = (uint8_t)((acceleration & 0xFF00) >> 8);
 80014c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t lsb_acce = (uint8_t)(acceleration & 0x00FF);
 80014d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014d2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	send_buf[6] = lsb_acce;
 80014d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014da:	74bb      	strb	r3, [r7, #18]
	send_buf[7] = msb_acce;
 80014dc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80014e0:	74fb      	strb	r3, [r7, #19]

	//Set maximum torque
	//Value: 0 - 450 (300 by default)
	uint16_t max_torque = 300;
 80014e2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80014e6:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t msb_max_torque = (uint8_t)((max_torque & 0xFF00) >> 8);
 80014e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014ea:	0a1b      	lsrs	r3, r3, #8
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t lsb_max_torque = (uint8_t)(max_torque & 0x00FF);
 80014f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	send_buf[8] = lsb_max_torque;
 80014f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014fc:	753b      	strb	r3, [r7, #20]
	send_buf[9] = msb_max_torque;
 80014fe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001502:	757b      	strb	r3, [r7, #21]

	//Set motor1 speed
	uint8_t msb_motor1_speed = (uint8_t)((motor1_speed & 0xFF00) >> 8);
 8001504:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001508:	121b      	asrs	r3, r3, #8
 800150a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t lsb_motor1_speed = (uint8_t)(motor1_speed & 0x00FF);
 800150e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001510:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	send_buf[10] = lsb_motor1_speed;
 8001514:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001518:	75bb      	strb	r3, [r7, #22]
	send_buf[11] = msb_motor1_speed;
 800151a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800151e:	75fb      	strb	r3, [r7, #23]

	//Set motor2 speed
	uint8_t msb_motor2_speed = (uint8_t)((motor2_speed & 0xFF00) >> 8);
 8001520:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001524:	121b      	asrs	r3, r3, #8
 8001526:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t lsb_motor2_speed = (uint8_t)(motor2_speed & 0x00FF);
 800152a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800152c:	f887 3020 	strb.w	r3, [r7, #32]
	send_buf[12] = lsb_motor2_speed;
 8001530:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001534:	763b      	strb	r3, [r7, #24]
	send_buf[13] = msb_motor2_speed;
 8001536:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800153a:	767b      	strb	r3, [r7, #25]

	//checksum byte
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 800153c:	7b3b      	ldrb	r3, [r7, #12]
 800153e:	b29a      	uxth	r2, r3
 8001540:	7b7b      	ldrb	r3, [r7, #13]
 8001542:	b29b      	uxth	r3, r3
 8001544:	4413      	add	r3, r2
 8001546:	b29a      	uxth	r2, r3
 8001548:	7bbb      	ldrb	r3, [r7, #14]
 800154a:	b29b      	uxth	r3, r3
 800154c:	4413      	add	r3, r2
 800154e:	b29a      	uxth	r2, r3
 8001550:	7bfb      	ldrb	r3, [r7, #15]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4413      	add	r3, r2
 8001556:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[4] + (uint16_t)send_buf[5] + (uint16_t)send_buf[6]
 8001558:	7c3b      	ldrb	r3, [r7, #16]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b29a      	uxth	r2, r3
 8001560:	7c7b      	ldrb	r3, [r7, #17]
 8001562:	b29b      	uxth	r3, r3
 8001564:	4413      	add	r3, r2
 8001566:	b29a      	uxth	r2, r3
 8001568:	7cbb      	ldrb	r3, [r7, #18]
 800156a:	b29b      	uxth	r3, r3
 800156c:	4413      	add	r3, r2
 800156e:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[7] + (uint16_t)send_buf[8] + (uint16_t)send_buf[9]
 8001570:	7cfb      	ldrb	r3, [r7, #19]
 8001572:	b29b      	uxth	r3, r3
 8001574:	4413      	add	r3, r2
 8001576:	b29a      	uxth	r2, r3
 8001578:	7d3b      	ldrb	r3, [r7, #20]
 800157a:	b29b      	uxth	r3, r3
 800157c:	4413      	add	r3, r2
 800157e:	b29a      	uxth	r2, r3
 8001580:	7d7b      	ldrb	r3, [r7, #21]
 8001582:	b29b      	uxth	r3, r3
 8001584:	4413      	add	r3, r2
 8001586:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[10] + (uint16_t)send_buf[11] + (uint16_t)send_buf[12]
 8001588:	7dbb      	ldrb	r3, [r7, #22]
 800158a:	b29b      	uxth	r3, r3
 800158c:	4413      	add	r3, r2
 800158e:	b29a      	uxth	r2, r3
 8001590:	7dfb      	ldrb	r3, [r7, #23]
 8001592:	b29b      	uxth	r3, r3
 8001594:	4413      	add	r3, r2
 8001596:	b29a      	uxth	r2, r3
 8001598:	7e3b      	ldrb	r3, [r7, #24]
 800159a:	b29b      	uxth	r3, r3
 800159c:	4413      	add	r3, r2
 800159e:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[13];
 80015a0:	7e7b      	ldrb	r3, [r7, #25]
 80015a2:	b29b      	uxth	r3, r3
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 80015a4:	4413      	add	r3, r2
 80015a6:	83fb      	strh	r3, [r7, #30]

	send_buf[14] = (uint8_t)(sum & 0x00FF);
 80015a8:	8bfb      	ldrh	r3, [r7, #30]
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	76bb      	strb	r3, [r7, #26]

	HAL_UART_Transmit(&huart3, send_buf, 15, 50);
 80015ae:	f107 010c 	add.w	r1, r7, #12
 80015b2:	2332      	movs	r3, #50	; 0x32
 80015b4:	220f      	movs	r2, #15
 80015b6:	4809      	ldr	r0, [pc, #36]	; (80015dc <send_HubMotor+0x1ac>)
 80015b8:	f00a fb32 	bl	800bc20 <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart3, receive_buf, 15);
 80015bc:	220f      	movs	r2, #15
 80015be:	4908      	ldr	r1, [pc, #32]	; (80015e0 <send_HubMotor+0x1b0>)
 80015c0:	4806      	ldr	r0, [pc, #24]	; (80015dc <send_HubMotor+0x1ac>)
 80015c2:	f00a fbc7 	bl	800bd54 <HAL_UART_Receive_DMA>
}
 80015c6:	bf00      	nop
 80015c8:	3730      	adds	r7, #48	; 0x30
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	54442d18 	.word	0x54442d18
 80015d4:	401921fb 	.word	0x401921fb
 80015d8:	40b00000 	.word	0x40b00000
 80015dc:	20000730 	.word	0x20000730
 80015e0:	200005b4 	.word	0x200005b4

080015e4 <ADC_Read>:
//		      HAL_Delay(5000);
}


void ADC_Read(int16_t *data)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 80015ec:	2200      	movs	r2, #0
 80015ee:	2110      	movs	r1, #16
 80015f0:	4808      	ldr	r0, [pc, #32]	; (8001614 <ADC_Read+0x30>)
 80015f2:	f005 fbd1 	bl	8006d98 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 80015f6:	2302      	movs	r3, #2
 80015f8:	2208      	movs	r2, #8
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	4806      	ldr	r0, [pc, #24]	; (8001618 <ADC_Read+0x34>)
 80015fe:	f007 fc93 	bl	8008f28 <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 8001602:	2201      	movs	r2, #1
 8001604:	2110      	movs	r1, #16
 8001606:	4803      	ldr	r0, [pc, #12]	; (8001614 <ADC_Read+0x30>)
 8001608:	f005 fbc6 	bl	8006d98 <HAL_GPIO_WritePin>
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40020000 	.word	0x40020000
 8001618:	20000318 	.word	0x20000318

0800161c <bd25l_Init>:
	.DIR_pin	= ClimbM_IO_FR2_Pin,
	.pole		= 4,
	.ID		= 2,
};

void bd25l_Init(Motor_TypeDef* motor){
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	enableMotor(motor, 0);
 8001624:	2100      	movs	r1, #0
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f808 	bl	800163c <enableMotor>
	brakeMotor(motor, 0);
 800162c:	2100      	movs	r1, #0
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f828 	bl	8001684 <brakeMotor>
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <enableMotor>:
	brakeMotor(motor, 1);
	enableMotor(motor, 0);

}

void enableMotor(Motor_TypeDef* motor, uint8_t state){
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->EN_port, motor->EN_pin, state);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001650:	78fa      	ldrb	r2, [r7, #3]
 8001652:	4619      	mov	r1, r3
 8001654:	f005 fba0 	bl	8006d98 <HAL_GPIO_WritePin>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <emBrakeMotor>:

void emBrakeMotor(uint8_t state){
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Brake_Wheel_GPIO_Port, Brake_Wheel_Pin, state);
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	461a      	mov	r2, r3
 800166e:	2108      	movs	r1, #8
 8001670:	4803      	ldr	r0, [pc, #12]	; (8001680 <emBrakeMotor+0x20>)
 8001672:	f005 fb91 	bl	8006d98 <HAL_GPIO_WritePin>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40020c00 	.word	0x40020c00

08001684 <brakeMotor>:

void brakeMotor(Motor_TypeDef* motor, uint8_t state){
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->BRK_port, motor->BRK_pin, state);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69d8      	ldr	r0, [r3, #28]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	8c1b      	ldrh	r3, [r3, #32]
 8001698:	78fa      	ldrb	r2, [r7, #3]
 800169a:	4619      	mov	r1, r3
 800169c:	f005 fb7c 	bl	8006d98 <HAL_GPIO_WritePin>
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <setMotorDir>:

void setMotorDir(Motor_TypeDef* motor, uint8_t dir){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin, dir);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80016bc:	78fa      	ldrb	r2, [r7, #3]
 80016be:	4619      	mov	r1, r3
 80016c0:	f005 fb6a 	bl	8006d98 <HAL_GPIO_WritePin>
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	0000      	movs	r0, r0
	...

080016d0 <setMotorSpeed>:

void setMotorSpeed(Motor_TypeDef* motor, float speed){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	ed87 0a00 	vstr	s0, [r7]

	float frequency = 0;
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
	uint16_t period;
	uint32_t duty_cycle; //50%

	if (speed > 100) speed = 100.0;
 80016e2:	edd7 7a00 	vldr	s15, [r7]
 80016e6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001818 <setMotorSpeed+0x148>
 80016ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f2:	dd01      	ble.n	80016f8 <setMotorSpeed+0x28>
 80016f4:	4b49      	ldr	r3, [pc, #292]	; (800181c <setMotorSpeed+0x14c>)
 80016f6:	603b      	str	r3, [r7, #0]
	//Frequency equation derived from data sheet
	frequency = (uint16_t)((speed - 0.2597)/0.02494);
 80016f8:	6838      	ldr	r0, [r7, #0]
 80016fa:	f7fe fedd 	bl	80004b8 <__aeabi_f2d>
 80016fe:	a340      	add	r3, pc, #256	; (adr r3, 8001800 <setMotorSpeed+0x130>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7fe fd78 	bl	80001f8 <__aeabi_dsub>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	a33d      	add	r3, pc, #244	; (adr r3, 8001808 <setMotorSpeed+0x138>)
 8001712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001716:	f7ff f851 	bl	80007bc <__aeabi_ddiv>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f7ff f9f9 	bl	8000b18 <__aeabi_d2uiz>
 8001726:	4603      	mov	r3, r0
 8001728:	b29b      	uxth	r3, r3
 800172a:	ee07 3a90 	vmov	s15, r3
 800172e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001732:	edc7 7a05 	vstr	s15, [r7, #20]
	period = (int)(1e6/frequency)+1;
 8001736:	6978      	ldr	r0, [r7, #20]
 8001738:	f7fe febe 	bl	80004b8 <__aeabi_f2d>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	a133      	add	r1, pc, #204	; (adr r1, 8001810 <setMotorSpeed+0x140>)
 8001742:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001746:	f7ff f839 	bl	80007bc <__aeabi_ddiv>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4610      	mov	r0, r2
 8001750:	4619      	mov	r1, r3
 8001752:	f7ff f9b9 	bl	8000ac8 <__aeabi_d2iz>
 8001756:	4603      	mov	r3, r0
 8001758:	b29b      	uxth	r3, r3
 800175a:	3301      	adds	r3, #1
 800175c:	827b      	strh	r3, [r7, #18]
	duty_cycle = period / 2;
 800175e:	8a7b      	ldrh	r3, [r7, #18]
 8001760:	085b      	lsrs	r3, r3, #1
 8001762:	b29b      	uxth	r3, r3
 8001764:	60fb      	str	r3, [r7, #12]
//	      motor->outputPWM->Instance->CCR4 = duty_cycle;
//
//	    HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
//	}

	if (speed<4){
 8001766:	edd7 7a00 	vldr	s15, [r7]
 800176a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800176e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001776:	d503      	bpl.n	8001780 <setMotorSpeed+0xb0>
		brakeMotor(motor, 1);
 8001778:	2101      	movs	r1, #1
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ff82 	bl	8001684 <brakeMotor>
	}



	motor->outputPWM->Instance->ARR = period;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	8a7a      	ldrh	r2, [r7, #18]
 8001788:	62da      	str	r2, [r3, #44]	; 0x2c
	if(motor->PWM_channel == TIM_CHANNEL_1)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	8b1b      	ldrh	r3, [r3, #24]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d105      	bne.n	800179e <setMotorSpeed+0xce>
	  motor->outputPWM->Instance->CCR1 = duty_cycle;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	635a      	str	r2, [r3, #52]	; 0x34
 800179c:	e01c      	b.n	80017d8 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_2)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	8b1b      	ldrh	r3, [r3, #24]
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d105      	bne.n	80017b2 <setMotorSpeed+0xe2>
		  motor->outputPWM->Instance->CCR2 = duty_cycle;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	639a      	str	r2, [r3, #56]	; 0x38
 80017b0:	e012      	b.n	80017d8 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_3)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	8b1b      	ldrh	r3, [r3, #24]
 80017b6:	2b08      	cmp	r3, #8
 80017b8:	d105      	bne.n	80017c6 <setMotorSpeed+0xf6>
		  motor->outputPWM->Instance->CCR3 = duty_cycle;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80017c4:	e008      	b.n	80017d8 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_4)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	8b1b      	ldrh	r3, [r3, #24]
 80017ca:	2b0c      	cmp	r3, #12
 80017cc:	d104      	bne.n	80017d8 <setMotorSpeed+0x108>
	  motor->outputPWM->Instance->CCR4 = duty_cycle;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	695a      	ldr	r2, [r3, #20]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	8b1b      	ldrh	r3, [r3, #24]
 80017e0:	4619      	mov	r1, r3
 80017e2:	4610      	mov	r0, r2
 80017e4:	f008 f996 	bl	8009b14 <HAL_TIM_PWM_Start>



	motor->outputPWM->Instance->CNT = 0;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80017f2:	bf00      	nop
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	f3af 8000 	nop.w
 8001800:	bfb15b57 	.word	0xbfb15b57
 8001804:	3fd09eec 	.word	0x3fd09eec
 8001808:	1172ef0b 	.word	0x1172ef0b
 800180c:	3f9989df 	.word	0x3f9989df
 8001810:	00000000 	.word	0x00000000
 8001814:	412e8480 	.word	0x412e8480
 8001818:	42c80000 	.word	0x42c80000
 800181c:	42c80000 	.word	0x42c80000

08001820 <runMotor>:
		return -1;
	}
	else return 1;
}

void runMotor(Motor_TypeDef* motor, float speed){
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	ed87 0a00 	vstr	s0, [r7]
  //	    - positive speed Lift DOWN
  //	    - negative speed lift UP
    if (motor->ID == 1){
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001832:	2b01      	cmp	r3, #1
 8001834:	d129      	bne.n	800188a <runMotor+0x6a>
	if (fabs(speed)/speed  >= 0)
 8001836:	edd7 7a00 	vldr	s15, [r7]
 800183a:	eef0 7ae7 	vabs.f32	s15, s15
 800183e:	ee17 0a90 	vmov	r0, s15
 8001842:	f7fe fe39 	bl	80004b8 <__aeabi_f2d>
 8001846:	4604      	mov	r4, r0
 8001848:	460d      	mov	r5, r1
 800184a:	6838      	ldr	r0, [r7, #0]
 800184c:	f7fe fe34 	bl	80004b8 <__aeabi_f2d>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4620      	mov	r0, r4
 8001856:	4629      	mov	r1, r5
 8001858:	f7fe ffb0 	bl	80007bc <__aeabi_ddiv>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	f7ff f902 	bl	8000a74 <__aeabi_dcmpge>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d004      	beq.n	8001880 <runMotor+0x60>
	      setMotorDir(motor, 0);
 8001876:	2100      	movs	r1, #0
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff ff15 	bl	80016a8 <setMotorDir>
 800187e:	e032      	b.n	80018e6 <runMotor+0xc6>
	else
	  setMotorDir(motor, 1);
 8001880:	2101      	movs	r1, #1
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ff10 	bl	80016a8 <setMotorDir>
 8001888:	e02d      	b.n	80018e6 <runMotor+0xc6>
    }
    else if (motor->ID == 2){
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001890:	2b02      	cmp	r3, #2
 8001892:	d128      	bne.n	80018e6 <runMotor+0xc6>
	if (fabs(speed)/speed  >= 0)
 8001894:	edd7 7a00 	vldr	s15, [r7]
 8001898:	eef0 7ae7 	vabs.f32	s15, s15
 800189c:	ee17 0a90 	vmov	r0, s15
 80018a0:	f7fe fe0a 	bl	80004b8 <__aeabi_f2d>
 80018a4:	4604      	mov	r4, r0
 80018a6:	460d      	mov	r5, r1
 80018a8:	6838      	ldr	r0, [r7, #0]
 80018aa:	f7fe fe05 	bl	80004b8 <__aeabi_f2d>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4620      	mov	r0, r4
 80018b4:	4629      	mov	r1, r5
 80018b6:	f7fe ff81 	bl	80007bc <__aeabi_ddiv>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	f7ff f8d3 	bl	8000a74 <__aeabi_dcmpge>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d004      	beq.n	80018de <runMotor+0xbe>
	  setMotorDir(motor, 1);
 80018d4:	2101      	movs	r1, #1
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff fee6 	bl	80016a8 <setMotorDir>
 80018dc:	e003      	b.n	80018e6 <runMotor+0xc6>
	else
	  setMotorDir(motor, 0);
 80018de:	2100      	movs	r1, #0
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff fee1 	bl	80016a8 <setMotorDir>
    }

    HAL_Delay(50);
 80018e6:	2032      	movs	r0, #50	; 0x32
 80018e8:	f003 f83a 	bl	8004960 <HAL_Delay>
    brakeMotor(motor, 0);
 80018ec:	2100      	movs	r1, #0
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff fec8 	bl	8001684 <brakeMotor>
    setMotorSpeed(motor, fabs(speed));
 80018f4:	edd7 7a00 	vldr	s15, [r7]
 80018f8:	eef0 7ae7 	vabs.f32	s15, s15
 80018fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff fee5 	bl	80016d0 <setMotorSpeed>

}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bdb0      	pop	{r4, r5, r7, pc}

0800190e <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	889b      	ldrh	r3, [r3, #4]
 8001920:	4619      	mov	r1, r3
 8001922:	4610      	mov	r0, r2
 8001924:	f005 fa12 	bl	8006d4c <HAL_GPIO_ReadPin>
 8001928:	4603      	mov	r3, r0
 800192a:	461a      	mov	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	799a      	ldrb	r2, [r3, #6]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	79db      	ldrb	r3, [r3, #7]
 8001938:	429a      	cmp	r2, r3
 800193a:	d004      	beq.n	8001946 <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 800193c:	f003 f804 	bl	8004948 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 8001946:	f002 ffff 	bl	8004948 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d209      	bcs.n	800196c <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	799a      	ldrb	r2, [r3, #6]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	7a1b      	ldrb	r3, [r3, #8]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 8001968:	2301      	movs	r3, #1
 800196a:	e004      	b.n	8001976 <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	799a      	ldrb	r2, [r3, #6]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
 8001984:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001986:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <MX_CAN1_Init+0xc8>)
 8001988:	4a30      	ldr	r2, [pc, #192]	; (8001a4c <MX_CAN1_Init+0xcc>)
 800198a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 800198c:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <MX_CAN1_Init+0xc8>)
 800198e:	2209      	movs	r2, #9
 8001990:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001992:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <MX_CAN1_Init+0xc8>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001998:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <MX_CAN1_Init+0xc8>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800199e:	4b2a      	ldr	r3, [pc, #168]	; (8001a48 <MX_CAN1_Init+0xc8>)
 80019a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019a4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80019a6:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <MX_CAN1_Init+0xc8>)
 80019a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019ac:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80019ae:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <MX_CAN1_Init+0xc8>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80019b4:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <MX_CAN1_Init+0xc8>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80019ba:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <MX_CAN1_Init+0xc8>)
 80019bc:	2200      	movs	r2, #0
 80019be:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80019c0:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <MX_CAN1_Init+0xc8>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80019c6:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <MX_CAN1_Init+0xc8>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80019cc:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <MX_CAN1_Init+0xc8>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80019d2:	481d      	ldr	r0, [pc, #116]	; (8001a48 <MX_CAN1_Init+0xc8>)
 80019d4:	f002 ffe8 	bl	80049a8 <HAL_CAN_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80019de:	f001 fe53 	bl	8003688 <Error_Handler>
  }

  /* USER CODE BEGIN CAN1_Init 2 */
  	CAN_FilterTypeDef canfil_1;
  	canfil_1.FilterBank = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
  	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61bb      	str	r3, [r7, #24]
  	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 80019ea:	2301      	movs	r3, #1
 80019ec:	61fb      	str	r3, [r7, #28]
  	canfil_1.FilterIdHigh = 0x0000;
 80019ee:	2300      	movs	r3, #0
 80019f0:	603b      	str	r3, [r7, #0]
  	canfil_1.FilterIdLow = 0x0000;
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
  	canfil_1.FilterMaskIdHigh = 0x0000;
 80019f6:	2300      	movs	r3, #0
 80019f8:	60bb      	str	r3, [r7, #8]
  	canfil_1.FilterMaskIdLow = 0x0000;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
  	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
  	canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 8001a02:	2301      	movs	r3, #1
 8001a04:	623b      	str	r3, [r7, #32]
  	canfil_1.SlaveStartFilterBank = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24

  	if (HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK)
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	480e      	ldr	r0, [pc, #56]	; (8001a48 <MX_CAN1_Init+0xc8>)
 8001a10:	f003 f9e6 	bl	8004de0 <HAL_CAN_ConfigFilter>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_CAN1_Init+0x9e>
  		Error_Handler();
 8001a1a:	f001 fe35 	bl	8003688 <Error_Handler>

  	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING))
 8001a1e:	2102      	movs	r1, #2
 8001a20:	4809      	ldr	r0, [pc, #36]	; (8001a48 <MX_CAN1_Init+0xc8>)
 8001a22:	f003 fdb1 	bl	8005588 <HAL_CAN_ActivateNotification>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d002      	beq.n	8001a32 <MX_CAN1_Init+0xb2>
  		return Error_Handler();
 8001a2c:	f001 fe2c 	bl	8003688 <Error_Handler>
 8001a30:	e007      	b.n	8001a42 <MX_CAN1_Init+0xc2>

  	if (HAL_CAN_Start(&hcan1))
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_CAN1_Init+0xc8>)
 8001a34:	f003 fb22 	bl	800507c <HAL_CAN_Start>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_CAN1_Init+0xc2>
  		return Error_Handler();
 8001a3e:	f001 fe23 	bl	8003688 <Error_Handler>


    /* USER CODE END CAN1_Init 2 */

}
 8001a42:	3728      	adds	r7, #40	; 0x28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000370 	.word	0x20000370
 8001a4c:	40006400 	.word	0x40006400

08001a50 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a1d      	ldr	r2, [pc, #116]	; (8001ae4 <HAL_CAN_MspInit+0x94>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d133      	bne.n	8001ada <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <HAL_CAN_MspInit+0x98>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	4a1b      	ldr	r2, [pc, #108]	; (8001ae8 <HAL_CAN_MspInit+0x98>)
 8001a7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a80:	6413      	str	r3, [r2, #64]	; 0x40
 8001a82:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <HAL_CAN_MspInit+0x98>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <HAL_CAN_MspInit+0x98>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a14      	ldr	r2, [pc, #80]	; (8001ae8 <HAL_CAN_MspInit+0x98>)
 8001a98:	f043 0308 	orr.w	r3, r3, #8
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_CAN_MspInit+0x98>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001aba:	2309      	movs	r3, #9
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4809      	ldr	r0, [pc, #36]	; (8001aec <HAL_CAN_MspInit+0x9c>)
 8001ac6:	f004 fe15 	bl	80066f4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	2014      	movs	r0, #20
 8001ad0:	f004 f8ac 	bl	8005c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001ad4:	2014      	movs	r0, #20
 8001ad6:	f004 f8d5 	bl	8005c84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001ada:	bf00      	nop
 8001adc:	3728      	adds	r7, #40	; 0x28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40006400 	.word	0x40006400
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40020c00 	.word	0x40020c00

08001af0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <MX_DMA_Init+0x3c>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a0b      	ldr	r2, [pc, #44]	; (8001b2c <MX_DMA_Init+0x3c>)
 8001b00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <MX_DMA_Init+0x3c>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	200c      	movs	r0, #12
 8001b18:	f004 f888 	bl	8005c2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b1c:	200c      	movs	r0, #12
 8001b1e:	f004 f8b1 	bl	8005c84 <HAL_NVIC_EnableIRQ>

}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800

08001b30 <ENCODER_Init>:
CAN_HandleTypeDef hcan2;
//uint8_t incoming[8];
//CAN_RxHeaderTypeDef RxHeader;

void ENCODER_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  //Assign each encoder to one of the two CAN buses
	encoderBack.hcan = &hcan1;
 8001b34:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <ENCODER_Init+0x24>)
 8001b36:	4a08      	ldr	r2, [pc, #32]	; (8001b58 <ENCODER_Init+0x28>)
 8001b38:	601a      	str	r2, [r3, #0]
	encoderFront.hcan = &hcan1;
 8001b3a:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <ENCODER_Init+0x2c>)
 8001b3c:	4a06      	ldr	r2, [pc, #24]	; (8001b58 <ENCODER_Init+0x28>)
 8001b3e:	601a      	str	r2, [r3, #0]
	
	//Set Tx header for each encoder handle
	ENCODER_Set_TxHeader(&encoderBack, ENC_ADDR_LEFT);
 8001b40:	2101      	movs	r1, #1
 8001b42:	4804      	ldr	r0, [pc, #16]	; (8001b54 <ENCODER_Init+0x24>)
 8001b44:	f000 f83f 	bl	8001bc6 <ENCODER_Set_TxHeader>
	ENCODER_Set_TxHeader(&encoderFront, ENC_ADDR_RIGHT);
 8001b48:	2102      	movs	r1, #2
 8001b4a:	4804      	ldr	r0, [pc, #16]	; (8001b5c <ENCODER_Init+0x2c>)
 8001b4c:	f000 f83b 	bl	8001bc6 <ENCODER_Set_TxHeader>

}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000414 	.word	0x20000414
 8001b58:	20000370 	.word	0x20000370
 8001b5c:	200003c0 	.word	0x200003c0

08001b60 <ENCODER_Sort_Incoming>:

void ENCODER_Sort_Incoming(uint8_t* incoming_array, EncoderHandle* Encoder_ptr){
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
	Encoder_ptr->rawRead[0] = incoming_array[0];
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	781a      	ldrb	r2, [r3, #0]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Encoder_ptr->rawRead[1] = incoming_array[1];
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	785a      	ldrb	r2, [r3, #1]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Encoder_ptr->rawRead[2] = incoming_array[2];
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	789a      	ldrb	r2, [r3, #2]
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Encoder_ptr->rawRead[3] = incoming_array[3];
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	78da      	ldrb	r2, [r3, #3]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	Encoder_ptr->rawRead[4] = incoming_array[4];
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	791a      	ldrb	r2, [r3, #4]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Encoder_ptr->rawRead[5] = incoming_array[5];
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	795a      	ldrb	r2, [r3, #5]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Encoder_ptr->rawRead[6] = incoming_array[6];
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	799a      	ldrb	r2, [r3, #6]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Encoder_ptr->rawRead[7] = incoming_array[7];
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	79da      	ldrb	r2, [r3, #7]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <ENCODER_Set_TxHeader>:

void ENCODER_Set_TxHeader(EncoderHandle* Encoder_ptr, uint32_t Encoder_Address){
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]
	Encoder_ptr->canTxHeader.DLC = 4;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	631a      	str	r2, [r3, #48]	; 0x30
	Encoder_ptr->canTxHeader.IDE = CAN_ID_STD;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder_ptr->canTxHeader.RTR = CAN_RTR_DATA;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	62da      	str	r2, [r3, #44]	; 0x2c
	Encoder_ptr->canTxHeader.StdId = Encoder_Address;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	621a      	str	r2, [r3, #32]
	Encoder_ptr->canTxHeader.TransmitGlobalTime = DISABLE;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Encoder_ptr->canTxHeader.ExtId = 0;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <ENCODER_Read>:

void ENCODER_Read(EncoderHandle* Encoder_ptr){
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
	Encoder_ptr->sendData[0] = Encoder_ptr->canTxHeader.DLC;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Encoder_ptr->sendData[1] = Encoder_ptr->canTxHeader.StdId;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Encoder_ptr->sendData[2] = 0x01;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Encoder_ptr->sendData[3] = 0x00;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	
	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f103 0120 	add.w	r1, r3, #32
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3338      	adds	r3, #56	; 0x38
 8001c46:	f003 fa5d 	bl	8005104 <HAL_CAN_AddTxMessage>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <ENCODER_Get_Angle>:
	Encoder_ptr->sendData[3] = 0x01;

	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
}

void ENCODER_Get_Angle(EncoderHandle* Encoder_ptr){
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
	ENCODER_Read(Encoder_ptr);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ffd1 	bl	8001c02 <ENCODER_Read>
	Encoder_ptr->angle32Bit.b8[0] = Encoder_ptr->rawRead[3];
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Encoder_ptr->angle32Bit.b8[1] = Encoder_ptr->rawRead[4];
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Encoder_ptr->angle32Bit.b8[2] = Encoder_ptr->rawRead[5];
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Encoder_ptr->angle32Bit.b8[3] = Encoder_ptr->rawRead[6];
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	//Get the outer gear encoder position
	//Gear ration from inner to outer gear is 1:2. Therefore, (2*4096=)8192 is used
//	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)) ; //Get single turn encoder reading
	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)); //Get single turn encoder reading
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8001c96:	461a      	mov	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c9e:	021b      	lsls	r3, r3, #8
 8001ca0:	441a      	add	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ca8:	041b      	lsls	r3, r3, #16
 8001caa:	4413      	add	r3, r2
 8001cac:	461a      	mov	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	645a      	str	r2, [r3, #68]	; 0x44

	//Convert from encoder position to angle in degree
//	Encoder_ptr->angleDeg = (Encoder_ptr->encoder_pos * 360 /8192) ; //Get encoder angle

}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
	...

08001cbc <MX_GPIO_Init>:
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
     PB5   ------> CAN2_RX
*/
void MX_GPIO_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08c      	sub	sp, #48	; 0x30
 8001cc0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc2:	f107 031c 	add.w	r3, r7, #28
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	60da      	str	r2, [r3, #12]
 8001cd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	4b8a      	ldr	r3, [pc, #552]	; (8001f00 <MX_GPIO_Init+0x244>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a89      	ldr	r2, [pc, #548]	; (8001f00 <MX_GPIO_Init+0x244>)
 8001cdc:	f043 0310 	orr.w	r3, r3, #16
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b87      	ldr	r3, [pc, #540]	; (8001f00 <MX_GPIO_Init+0x244>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	61bb      	str	r3, [r7, #24]
 8001cec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	4b83      	ldr	r3, [pc, #524]	; (8001f00 <MX_GPIO_Init+0x244>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a82      	ldr	r2, [pc, #520]	; (8001f00 <MX_GPIO_Init+0x244>)
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b80      	ldr	r3, [pc, #512]	; (8001f00 <MX_GPIO_Init+0x244>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	4b7c      	ldr	r3, [pc, #496]	; (8001f00 <MX_GPIO_Init+0x244>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a7b      	ldr	r2, [pc, #492]	; (8001f00 <MX_GPIO_Init+0x244>)
 8001d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b79      	ldr	r3, [pc, #484]	; (8001f00 <MX_GPIO_Init+0x244>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	4b75      	ldr	r3, [pc, #468]	; (8001f00 <MX_GPIO_Init+0x244>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a74      	ldr	r2, [pc, #464]	; (8001f00 <MX_GPIO_Init+0x244>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b72      	ldr	r3, [pc, #456]	; (8001f00 <MX_GPIO_Init+0x244>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	4b6e      	ldr	r3, [pc, #440]	; (8001f00 <MX_GPIO_Init+0x244>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a6d      	ldr	r2, [pc, #436]	; (8001f00 <MX_GPIO_Init+0x244>)
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b6b      	ldr	r3, [pc, #428]	; (8001f00 <MX_GPIO_Init+0x244>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
 8001d62:	4b67      	ldr	r3, [pc, #412]	; (8001f00 <MX_GPIO_Init+0x244>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a66      	ldr	r2, [pc, #408]	; (8001f00 <MX_GPIO_Init+0x244>)
 8001d68:	f043 0308 	orr.w	r3, r3, #8
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b64      	ldr	r3, [pc, #400]	; (8001f00 <MX_GPIO_Init+0x244>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	607b      	str	r3, [r7, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	213f      	movs	r1, #63	; 0x3f
 8001d7e:	4861      	ldr	r0, [pc, #388]	; (8001f04 <MX_GPIO_Init+0x248>)
 8001d80:	f005 f80a 	bl	8006d98 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2110      	movs	r1, #16
 8001d88:	485f      	ldr	r0, [pc, #380]	; (8001f08 <MX_GPIO_Init+0x24c>)
 8001d8a:	f005 f805 	bl	8006d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001d8e:	2200      	movs	r2, #0
 8001d90:	219b      	movs	r1, #155	; 0x9b
 8001d92:	485e      	ldr	r0, [pc, #376]	; (8001f0c <MX_GPIO_Init+0x250>)
 8001d94:	f005 f800 	bl	8006d98 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8001d9e:	485c      	ldr	r0, [pc, #368]	; (8001f10 <MX_GPIO_Init+0x254>)
 8001da0:	f004 fffa 	bl	8006d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001da4:	2200      	movs	r2, #0
 8001da6:	f64e 4108 	movw	r1, #60424	; 0xec08
 8001daa:	485a      	ldr	r0, [pc, #360]	; (8001f14 <MX_GPIO_Init+0x258>)
 8001dac:	f004 fff4 	bl	8006d98 <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8001db0:	2307      	movs	r3, #7
 8001db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db4:	2300      	movs	r3, #0
 8001db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001db8:	2302      	movs	r3, #2
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4853      	ldr	r0, [pc, #332]	; (8001f10 <MX_GPIO_Init+0x254>)
 8001dc4:	f004 fc96 	bl	80066f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 8001dc8:	f248 1378 	movw	r3, #33144	; 0x8178
 8001dcc:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dd6:	f107 031c 	add.w	r3, r7, #28
 8001dda:	4619      	mov	r1, r3
 8001ddc:	484c      	ldr	r0, [pc, #304]	; (8001f10 <MX_GPIO_Init+0x254>)
 8001dde:	f004 fc89 	bl	80066f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001de2:	233f      	movs	r3, #63	; 0x3f
 8001de4:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de6:	2301      	movs	r3, #1
 8001de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dea:	2301      	movs	r3, #1
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df2:	f107 031c 	add.w	r3, r7, #28
 8001df6:	4619      	mov	r1, r3
 8001df8:	4842      	ldr	r0, [pc, #264]	; (8001f04 <MX_GPIO_Init+0x248>)
 8001dfa:	f004 fc7b 	bl	80066f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8001dfe:	2310      	movs	r3, #16
 8001e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e02:	2301      	movs	r3, #1
 8001e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e06:	2301      	movs	r3, #1
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001e0e:	f107 031c 	add.w	r3, r7, #28
 8001e12:	4619      	mov	r1, r3
 8001e14:	483c      	ldr	r0, [pc, #240]	; (8001f08 <MX_GPIO_Init+0x24c>)
 8001e16:	f004 fc6d 	bl	80066f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8001e1a:	2380      	movs	r3, #128	; 0x80
 8001e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e1e:	4b3e      	ldr	r3, [pc, #248]	; (8001f18 <MX_GPIO_Init+0x25c>)
 8001e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4836      	ldr	r0, [pc, #216]	; (8001f08 <MX_GPIO_Init+0x24c>)
 8001e2e:	f004 fc61 	bl	80066f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001e32:	239b      	movs	r3, #155	; 0x9b
 8001e34:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e36:	2301      	movs	r3, #1
 8001e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e42:	f107 031c 	add.w	r3, r7, #28
 8001e46:	4619      	mov	r1, r3
 8001e48:	4830      	ldr	r0, [pc, #192]	; (8001f0c <MX_GPIO_Init+0x250>)
 8001e4a:	f004 fc53 	bl	80066f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 8001e4e:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8001e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e54:	2301      	movs	r3, #1
 8001e56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e60:	f107 031c 	add.w	r3, r7, #28
 8001e64:	4619      	mov	r1, r3
 8001e66:	482a      	ldr	r0, [pc, #168]	; (8001f10 <MX_GPIO_Init+0x254>)
 8001e68:	f004 fc44 	bl	80066f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin|CUI_SPI2_MOSI_Pin;
 8001e6c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e7e:	2305      	movs	r3, #5
 8001e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e82:	f107 031c 	add.w	r3, r7, #28
 8001e86:	4619      	mov	r1, r3
 8001e88:	4820      	ldr	r0, [pc, #128]	; (8001f0c <MX_GPIO_Init+0x250>)
 8001e8a:	f004 fc33 	bl	80066f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001e8e:	f64e 4308 	movw	r3, #60424	; 0xec08
 8001e92:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e94:	2301      	movs	r3, #1
 8001e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ea0:	f107 031c 	add.w	r3, r7, #28
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	481b      	ldr	r0, [pc, #108]	; (8001f14 <MX_GPIO_Init+0x258>)
 8001ea8:	f004 fc24 	bl	80066f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 8001eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 8001eba:	f107 031c 	add.w	r3, r7, #28
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4814      	ldr	r0, [pc, #80]	; (8001f14 <MX_GPIO_Init+0x258>)
 8001ec2:	f004 fc17 	bl	80066f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ec6:	2320      	movs	r3, #32
 8001ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001ed6:	2309      	movs	r3, #9
 8001ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	4619      	mov	r1, r3
 8001ee0:	480a      	ldr	r0, [pc, #40]	; (8001f0c <MX_GPIO_Init+0x250>)
 8001ee2:	f004 fc07 	bl	80066f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	2017      	movs	r0, #23
 8001eec:	f003 fe9e 	bl	8005c2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ef0:	2017      	movs	r0, #23
 8001ef2:	f003 fec7 	bl	8005c84 <HAL_NVIC_EnableIRQ>

}
 8001ef6:	bf00      	nop
 8001ef8:	3730      	adds	r7, #48	; 0x30
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40020800 	.word	0x40020800
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40020c00 	.word	0x40020c00
 8001f18:	10210000 	.word	0x10210000

08001f1c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001f20:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f22:	4a1c      	ldr	r2, [pc, #112]	; (8001f94 <MX_I2C1_Init+0x78>)
 8001f24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f26:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f28:	4a1b      	ldr	r2, [pc, #108]	; (8001f98 <MX_I2C1_Init+0x7c>)
 8001f2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f2c:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f32:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f38:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f46:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f4c:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f58:	480d      	ldr	r0, [pc, #52]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f5a:	f004 ff67 	bl	8006e2c <HAL_I2C_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f64:	f001 fb90 	bl	8003688 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4809      	ldr	r0, [pc, #36]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f6c:	f005 ffbe 	bl	8007eec <HAL_I2CEx_ConfigAnalogFilter>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001f76:	f001 fb87 	bl	8003688 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4804      	ldr	r0, [pc, #16]	; (8001f90 <MX_I2C1_Init+0x74>)
 8001f7e:	f006 f815 	bl	8007fac <HAL_I2CEx_ConfigDigitalFilter>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001f88:	f001 fb7e 	bl	8003688 <Error_Handler>
  }

}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000468 	.word	0x20000468
 8001f94:	40005400 	.word	0x40005400
 8001f98:	00061a80 	.word	0x00061a80

08001f9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	; 0x28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a19      	ldr	r2, [pc, #100]	; (8002020 <HAL_I2C_MspInit+0x84>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d12c      	bne.n	8002018 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	4b18      	ldr	r3, [pc, #96]	; (8002024 <HAL_I2C_MspInit+0x88>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a17      	ldr	r2, [pc, #92]	; (8002024 <HAL_I2C_MspInit+0x88>)
 8001fc8:	f043 0302 	orr.w	r3, r3, #2
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <HAL_I2C_MspInit+0x88>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8001fda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fe0:	2312      	movs	r3, #18
 8001fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fec:	2304      	movs	r3, #4
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	480c      	ldr	r0, [pc, #48]	; (8002028 <HAL_I2C_MspInit+0x8c>)
 8001ff8:	f004 fb7c 	bl	80066f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	4b08      	ldr	r3, [pc, #32]	; (8002024 <HAL_I2C_MspInit+0x88>)
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	4a07      	ldr	r2, [pc, #28]	; (8002024 <HAL_I2C_MspInit+0x88>)
 8002006:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800200a:	6413      	str	r3, [r2, #64]	; 0x40
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_I2C_MspInit+0x88>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002018:	bf00      	nop
 800201a:	3728      	adds	r7, #40	; 0x28
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40005400 	.word	0x40005400
 8002024:	40023800 	.word	0x40023800
 8002028:	40020400 	.word	0x40020400
 800202c:	00000000 	.word	0x00000000

08002030 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002030:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002034:	b086      	sub	sp, #24
 8002036:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8002038:	f002 fc20 	bl	800487c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800203c:	f000 fee4 	bl	8002e08 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 8002040:	f006 fe0a 	bl	8008c58 <HAL_RCC_GetHCLKFreq>
 8002044:	4603      	mov	r3, r0
 8002046:	4aab      	ldr	r2, [pc, #684]	; (80022f4 <main+0x2c4>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	099b      	lsrs	r3, r3, #6
 800204e:	4618      	mov	r0, r3
 8002050:	f003 fe30 	bl	8005cb4 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002054:	2004      	movs	r0, #4
 8002056:	f003 fe39 	bl	8005ccc <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2100      	movs	r1, #0
 800205e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002062:	f003 fde3 	bl	8005c2c <HAL_NVIC_SetPriority>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002066:	f7ff fe29 	bl	8001cbc <MX_GPIO_Init>
	MX_DMA_Init();
 800206a:	f7ff fd41 	bl	8001af0 <MX_DMA_Init>
	MX_I2C1_Init();
 800206e:	f7ff ff55 	bl	8001f1c <MX_I2C1_Init>
	MX_TIM1_Init();
 8002072:	f001 ffbf 	bl	8003ff4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8002076:	f002 f85d 	bl	8004134 <MX_TIM2_Init>
	MX_USART3_UART_Init();
 800207a:	f002 fb07 	bl	800468c <MX_USART3_UART_Init>
	MX_TIM3_Init();
 800207e:	f002 f8d3 	bl	8004228 <MX_TIM3_Init>
	MX_TIM8_Init();
 8002082:	f002 f953 	bl	800432c <MX_TIM8_Init>
	MX_CAN1_Init();
 8002086:	f7ff fc7b 	bl	8001980 <MX_CAN1_Init>
	MX_SPI1_Init();
 800208a:	f001 feab 	bl	8003de4 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	//Initialize hardware communication
//	joystick_Init();
//	ADC_Init();
//	ADC_DataRequest();
	ENCODER_Init();
 800208e:	f7ff fd4f 	bl	8001b30 <ENCODER_Init>
//	  DWT_Init();

	uint32_t state_count = HAL_GetTick();
 8002092:	f002 fc59 	bl	8004948 <HAL_GetTick>
 8002096:	6178      	str	r0, [r7, #20]
	while (MPU6050_Init(&hi2c1) == 1)
 8002098:	e00a      	b.n	80020b0 <main+0x80>
	{
		if (HAL_GetTick() - state_count > 5000)
 800209a:	f002 fc55 	bl	8004948 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d901      	bls.n	80020b0 <main+0x80>
			Error_Handler();
 80020ac:	f001 faec 	bl	8003688 <Error_Handler>
	while (MPU6050_Init(&hi2c1) == 1)
 80020b0:	4891      	ldr	r0, [pc, #580]	; (80022f8 <main+0x2c8>)
 80020b2:	f001 fafb 	bl	80036ac <MPU6050_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d0ee      	beq.n	800209a <main+0x6a>
	}

	//Start base wheel PWM pin
	wheelSpeedControl_Init(&baseWheelSpeed, base_linSpeedLevel[base_speedLevel],
 80020bc:	4b8f      	ldr	r3, [pc, #572]	; (80022fc <main+0x2cc>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a8f      	ldr	r2, [pc, #572]	; (8002300 <main+0x2d0>)
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	edd3 7a00 	vldr	s15, [r3]
 80020ca:	4b8c      	ldr	r3, [pc, #560]	; (80022fc <main+0x2cc>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a8d      	ldr	r2, [pc, #564]	; (8002304 <main+0x2d4>)
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	ed93 7a00 	vldr	s14, [r3]
 80020d8:	eef0 0a47 	vmov.f32	s1, s14
 80020dc:	eeb0 0a67 	vmov.f32	s0, s15
 80020e0:	4889      	ldr	r0, [pc, #548]	; (8002308 <main+0x2d8>)
 80020e2:	f002 fb77 	bl	80047d4 <wheelSpeedControl_Init>
			base_angSpeedLevel[base_speedLevel]);
	HAL_TIM_Base_Start(&MOTOR_TIM);
 80020e6:	4889      	ldr	r0, [pc, #548]	; (800230c <main+0x2dc>)
 80020e8:	f007 fbb4 	bl	8009854 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_1);
 80020ec:	2100      	movs	r1, #0
 80020ee:	4887      	ldr	r0, [pc, #540]	; (800230c <main+0x2dc>)
 80020f0:	f007 fd10 	bl	8009b14 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_2);
 80020f4:	2104      	movs	r1, #4
 80020f6:	4885      	ldr	r0, [pc, #532]	; (800230c <main+0x2dc>)
 80020f8:	f007 fd0c 	bl	8009b14 <HAL_TIM_PWM_Start>
	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = 1500;
 80020fc:	4b83      	ldr	r3, [pc, #524]	; (800230c <main+0x2dc>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002104:	635a      	str	r2, [r3, #52]	; 0x34
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = 1500;
 8002106:	4b81      	ldr	r3, [pc, #516]	; (800230c <main+0x2dc>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800210e:	639a      	str	r2, [r3, #56]	; 0x38

//	//Initialize rear and back motor
	bd25l_Init(&rearMotor);
 8002110:	487f      	ldr	r0, [pc, #508]	; (8002310 <main+0x2e0>)
 8002112:	f7ff fa83 	bl	800161c <bd25l_Init>
	bd25l_Init(&backMotor);
 8002116:	487f      	ldr	r0, [pc, #508]	; (8002314 <main+0x2e4>)
 8002118:	f7ff fa80 	bl	800161c <bd25l_Init>
	runMotor(&rearMotor, 0);
 800211c:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8002318 <main+0x2e8>
 8002120:	487b      	ldr	r0, [pc, #492]	; (8002310 <main+0x2e0>)
 8002122:	f7ff fb7d 	bl	8001820 <runMotor>
	runMotor(&backMotor, 0);
 8002126:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8002318 <main+0x2e8>
 800212a:	487a      	ldr	r0, [pc, #488]	; (8002314 <main+0x2e4>)
 800212c:	f7ff fb78 	bl	8001820 <runMotor>
	emBrakeMotor(0);
 8002130:	2000      	movs	r0, #0
 8002132:	f7ff fa95 	bl	8001660 <emBrakeMotor>
//
	//Initialize hub motor provided joystick control
	hubMotor_Init();
 8002136:	f7ff f963 	bl	8001400 <hubMotor_Init>
	send_HubMotor(0, 0);
 800213a:	eddf 0a77 	vldr	s1, [pc, #476]	; 8002318 <main+0x2e8>
 800213e:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8002318 <main+0x2e8>
 8002142:	f7ff f975 	bl	8001430 <send_HubMotor>
	wheelSpeedControl_Init(&climbWheelSpeed,
 8002146:	4b75      	ldr	r3, [pc, #468]	; (800231c <main+0x2ec>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a75      	ldr	r2, [pc, #468]	; (8002320 <main+0x2f0>)
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	edd3 7a00 	vldr	s15, [r3]
 8002154:	4b71      	ldr	r3, [pc, #452]	; (800231c <main+0x2ec>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a72      	ldr	r2, [pc, #456]	; (8002324 <main+0x2f4>)
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	ed93 7a00 	vldr	s14, [r3]
 8002162:	eef0 0a47 	vmov.f32	s1, s14
 8002166:	eeb0 0a67 	vmov.f32	s0, s15
 800216a:	486f      	ldr	r0, [pc, #444]	; (8002328 <main+0x2f8>)
 800216c:	f002 fb32 	bl	80047d4 <wheelSpeedControl_Init>
			climb_linSpeedLevel[climb_speedLevel],
			climb_angSpeedLevel[climb_speedLevel]);

	//Initialize front and back climbing position controller
	frontClimb_pid = pid_create(&frontClimb_ctrl, &frontClimb_input,
 8002170:	4b6e      	ldr	r3, [pc, #440]	; (800232c <main+0x2fc>)
 8002172:	edd3 7a00 	vldr	s15, [r3]
 8002176:	4b6e      	ldr	r3, [pc, #440]	; (8002330 <main+0x300>)
 8002178:	ed93 7a00 	vldr	s14, [r3]
 800217c:	4b6d      	ldr	r3, [pc, #436]	; (8002334 <main+0x304>)
 800217e:	edd3 6a00 	vldr	s13, [r3]
 8002182:	eeb0 1a66 	vmov.f32	s2, s13
 8002186:	eef0 0a47 	vmov.f32	s1, s14
 800218a:	eeb0 0a67 	vmov.f32	s0, s15
 800218e:	4b6a      	ldr	r3, [pc, #424]	; (8002338 <main+0x308>)
 8002190:	4a6a      	ldr	r2, [pc, #424]	; (800233c <main+0x30c>)
 8002192:	496b      	ldr	r1, [pc, #428]	; (8002340 <main+0x310>)
 8002194:	486b      	ldr	r0, [pc, #428]	; (8002344 <main+0x314>)
 8002196:	f7fe feab 	bl	8000ef0 <pid_create>
 800219a:	4603      	mov	r3, r0
 800219c:	4a6a      	ldr	r2, [pc, #424]	; (8002348 <main+0x318>)
 800219e:	6013      	str	r3, [r2, #0]
			&frontClimb_output, &frontClimb_setpoint, frontClimb_kp,
			frontClimb_ki, frontClimb_kd);
	pid_limits(frontClimb_pid, -50, 50);
 80021a0:	4b69      	ldr	r3, [pc, #420]	; (8002348 <main+0x318>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	eddf 0a69 	vldr	s1, [pc, #420]	; 800234c <main+0x31c>
 80021a8:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8002350 <main+0x320>
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff f82b 	bl	8001208 <pid_limits>
	pid_sample(frontClimb_pid, 1);
 80021b2:	4b65      	ldr	r3, [pc, #404]	; (8002348 <main+0x318>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2101      	movs	r1, #1
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe fff1 	bl	80011a0 <pid_sample>
	pid_auto(frontClimb_pid);
 80021be:	4b62      	ldr	r3, [pc, #392]	; (8002348 <main+0x318>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff f885 	bl	80012d2 <pid_auto>

	backClimb_pid = pid_create(&backClimb_ctrl, &backClimb_input,
 80021c8:	4b62      	ldr	r3, [pc, #392]	; (8002354 <main+0x324>)
 80021ca:	edd3 7a00 	vldr	s15, [r3]
 80021ce:	4b62      	ldr	r3, [pc, #392]	; (8002358 <main+0x328>)
 80021d0:	ed93 7a00 	vldr	s14, [r3]
 80021d4:	4b61      	ldr	r3, [pc, #388]	; (800235c <main+0x32c>)
 80021d6:	edd3 6a00 	vldr	s13, [r3]
 80021da:	eeb0 1a66 	vmov.f32	s2, s13
 80021de:	eef0 0a47 	vmov.f32	s1, s14
 80021e2:	eeb0 0a67 	vmov.f32	s0, s15
 80021e6:	4b5e      	ldr	r3, [pc, #376]	; (8002360 <main+0x330>)
 80021e8:	4a5e      	ldr	r2, [pc, #376]	; (8002364 <main+0x334>)
 80021ea:	495f      	ldr	r1, [pc, #380]	; (8002368 <main+0x338>)
 80021ec:	485f      	ldr	r0, [pc, #380]	; (800236c <main+0x33c>)
 80021ee:	f7fe fe7f 	bl	8000ef0 <pid_create>
 80021f2:	4603      	mov	r3, r0
 80021f4:	4a5e      	ldr	r2, [pc, #376]	; (8002370 <main+0x340>)
 80021f6:	6013      	str	r3, [r2, #0]
			&backClimb_output, &backClimb_setpoint, backClimb_kp, backClimb_ki,
			backClimb_kd);
	pid_limits(backClimb_pid, -50, 50);
 80021f8:	4b5d      	ldr	r3, [pc, #372]	; (8002370 <main+0x340>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	eddf 0a53 	vldr	s1, [pc, #332]	; 800234c <main+0x31c>
 8002200:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8002350 <main+0x320>
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe ffff 	bl	8001208 <pid_limits>
	pid_sample(backClimb_pid, 1);
 800220a:	4b59      	ldr	r3, [pc, #356]	; (8002370 <main+0x340>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2101      	movs	r1, #1
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe ffc5 	bl	80011a0 <pid_sample>
	pid_auto(backClimb_pid);
 8002216:	4b56      	ldr	r3, [pc, #344]	; (8002370 <main+0x340>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff f859 	bl	80012d2 <pid_auto>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint32_t prev_time = HAL_GetTick();
 8002220:	f002 fb92 	bl	8004948 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]
	ENCODER_Get_Angle(&encoderBack);
 8002226:	4853      	ldr	r0, [pc, #332]	; (8002374 <main+0x344>)
 8002228:	f7ff fd13 	bl	8001c52 <ENCODER_Get_Angle>
	ENCODER_Get_Angle(&encoderFront);
 800222c:	4852      	ldr	r0, [pc, #328]	; (8002378 <main+0x348>)
 800222e:	f7ff fd10 	bl	8001c52 <ENCODER_Get_Angle>
	while (state_count++ < 1000)
 8002232:	e003      	b.n	800223c <main+0x20c>
		MPU6050_Read_All(&hi2c1, &MPU6050);
 8002234:	4951      	ldr	r1, [pc, #324]	; (800237c <main+0x34c>)
 8002236:	4830      	ldr	r0, [pc, #192]	; (80022f8 <main+0x2c8>)
 8002238:	f001 fa92 	bl	8003760 <MPU6050_Read_All>
	while (state_count++ < 1000)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	617a      	str	r2, [r7, #20]
 8002242:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002246:	d3f5      	bcc.n	8002234 <main+0x204>
	initial_angle = MPU6050.KalmanAngleX;
 8002248:	4b4c      	ldr	r3, [pc, #304]	; (800237c <main+0x34c>)
 800224a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800224e:	494c      	ldr	r1, [pc, #304]	; (8002380 <main+0x350>)
 8002250:	e9c1 2300 	strd	r2, r3, [r1]
	state_count = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
	emBrakeMotor(1);
 8002258:	2001      	movs	r0, #1
 800225a:	f7ff fa01 	bl	8001660 <emBrakeMotor>

		//      runMotor(&backMotor, speed++, 1);xia
//		ENCODER_Get_Angle(&encoderBack);
//		ENCODER_Get_Angle(&encoderFront);
		//Loop should execute once every 1 tick
		if (HAL_GetTick() - prev_time >= 1)
 800225e:	f002 fb73 	bl	8004948 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4293      	cmp	r3, r2
 8002268:	d0f9      	beq.n	800225e <main+0x22e>
		{
			//	ADC_DataRequest();
			ENCODER_Read(&encoderBack);
 800226a:	4842      	ldr	r0, [pc, #264]	; (8002374 <main+0x344>)
 800226c:	f7ff fcc9 	bl	8001c02 <ENCODER_Read>
			ENCODER_Read(&encoderFront);
 8002270:	4841      	ldr	r0, [pc, #260]	; (8002378 <main+0x348>)
 8002272:	f7ff fcc6 	bl	8001c02 <ENCODER_Read>

			//Get kamlan filtered angle from MPU6050
			MPU6050_Read_All(&hi2c1, &MPU6050);
 8002276:	4941      	ldr	r1, [pc, #260]	; (800237c <main+0x34c>)
 8002278:	481f      	ldr	r0, [pc, #124]	; (80022f8 <main+0x2c8>)
 800227a:	f001 fa71 	bl	8003760 <MPU6050_Read_All>
			GPIO_Digital_Filtered_Input(&button1, 30);
 800227e:	211e      	movs	r1, #30
 8002280:	4840      	ldr	r0, [pc, #256]	; (8002384 <main+0x354>)
 8002282:	f7ff fb44 	bl	800190e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button2, 30);
 8002286:	211e      	movs	r1, #30
 8002288:	483f      	ldr	r0, [pc, #252]	; (8002388 <main+0x358>)
 800228a:	f7ff fb40 	bl	800190e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button3, 30);
 800228e:	211e      	movs	r1, #30
 8002290:	483e      	ldr	r0, [pc, #248]	; (800238c <main+0x35c>)
 8002292:	f7ff fb3c 	bl	800190e <GPIO_Digital_Filtered_Input>

			GPIO_Digital_Filtered_Input(&rearLS1, 5);
 8002296:	2105      	movs	r1, #5
 8002298:	483d      	ldr	r0, [pc, #244]	; (8002390 <main+0x360>)
 800229a:	f7ff fb38 	bl	800190e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&rearLS2, 5);
 800229e:	2105      	movs	r1, #5
 80022a0:	483c      	ldr	r0, [pc, #240]	; (8002394 <main+0x364>)
 80022a2:	f7ff fb34 	bl	800190e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS1, 5);
 80022a6:	2105      	movs	r1, #5
 80022a8:	483b      	ldr	r0, [pc, #236]	; (8002398 <main+0x368>)
 80022aa:	f7ff fb30 	bl	800190e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS2, 5);
 80022ae:	2105      	movs	r1, #5
 80022b0:	483a      	ldr	r0, [pc, #232]	; (800239c <main+0x36c>)
 80022b2:	f7ff fb2c 	bl	800190e <GPIO_Digital_Filtered_Input>
			//1. Climbing wheel extension
			//2. Wheelchair lifting/dropping
			//3. Climbing wheel retraction
			//---------------------------------------------------------------------------------------------------
			//when button3 is pressed, Extend climbing wheel until both wheel touches the ground
			if (button3.state == 1 && front_touchdown == false
 80022b6:	4b35      	ldr	r3, [pc, #212]	; (800238c <main+0x35c>)
 80022b8:	7a1b      	ldrb	r3, [r3, #8]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	f040 8134 	bne.w	8002528 <main+0x4f8>
 80022c0:	4b37      	ldr	r3, [pc, #220]	; (80023a0 <main+0x370>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	f083 0301 	eor.w	r3, r3, #1
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 812c 	beq.w	8002528 <main+0x4f8>
					&& back_touchdown == false && lifting_mode == NORMAL)
 80022d0:	4b34      	ldr	r3, [pc, #208]	; (80023a4 <main+0x374>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	f083 0301 	eor.w	r3, r3, #1
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 8124 	beq.w	8002528 <main+0x4f8>
 80022e0:	4b31      	ldr	r3, [pc, #196]	; (80023a8 <main+0x378>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f040 811f 	bne.w	8002528 <main+0x4f8>
			{
				emBrakeMotor(1);
 80022ea:	2001      	movs	r0, #1
 80022ec:	f7ff f9b8 	bl	8001660 <emBrakeMotor>
				while (front_touchdown == false || back_touchdown == false)
 80022f0:	e0e7      	b.n	80024c2 <main+0x492>
 80022f2:	bf00      	nop
 80022f4:	10624dd3 	.word	0x10624dd3
 80022f8:	20000468 	.word	0x20000468
 80022fc:	20000108 	.word	0x20000108
 8002300:	0800e85c 	.word	0x0800e85c
 8002304:	0800e868 	.word	0x0800e868
 8002308:	200000d8 	.word	0x200000d8
 800230c:	20000610 	.word	0x20000610
 8002310:	20000000 	.word	0x20000000
 8002314:	20000034 	.word	0x20000034
 8002318:	00000000 	.word	0x00000000
 800231c:	200002e4 	.word	0x200002e4
 8002320:	0800e874 	.word	0x0800e874
 8002324:	0800e880 	.word	0x0800e880
 8002328:	20000134 	.word	0x20000134
 800232c:	2000011c 	.word	0x2000011c
 8002330:	20000120 	.word	0x20000120
 8002334:	20000124 	.word	0x20000124
 8002338:	200002c0 	.word	0x200002c0
 800233c:	200002bc 	.word	0x200002bc
 8002340:	200002b8 	.word	0x200002b8
 8002344:	20000578 	.word	0x20000578
 8002348:	20000574 	.word	0x20000574
 800234c:	42480000 	.word	0x42480000
 8002350:	c2480000 	.word	0xc2480000
 8002354:	20000128 	.word	0x20000128
 8002358:	2000012c 	.word	0x2000012c
 800235c:	20000130 	.word	0x20000130
 8002360:	200002cc 	.word	0x200002cc
 8002364:	200002c8 	.word	0x200002c8
 8002368:	200002c4 	.word	0x200002c4
 800236c:	20000530 	.word	0x20000530
 8002370:	200005c8 	.word	0x200005c8
 8002374:	20000414 	.word	0x20000414
 8002378:	200003c0 	.word	0x200003c0
 800237c:	200004d0 	.word	0x200004d0
 8002380:	200002a0 	.word	0x200002a0
 8002384:	200000a8 	.word	0x200000a8
 8002388:	200000b8 	.word	0x200000b8
 800238c:	200000c8 	.word	0x200000c8
 8002390:	20000068 	.word	0x20000068
 8002394:	20000078 	.word	0x20000078
 8002398:	20000088 	.word	0x20000088
 800239c:	20000098 	.word	0x20000098
 80023a0:	20000298 	.word	0x20000298
 80023a4:	20000299 	.word	0x20000299
 80023a8:	2000010c 	.word	0x2000010c
				{
					if (GPIO_Digital_Filtered_Input(&rearLS1, 5)
 80023ac:	2105      	movs	r1, #5
 80023ae:	4850      	ldr	r0, [pc, #320]	; (80024f0 <main+0x4c0>)
 80023b0:	f7ff faad 	bl	800190e <GPIO_Digital_Filtered_Input>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <main+0x398>
							|| GPIO_Digital_Filtered_Input(&rearLS2, 5))
 80023ba:	2105      	movs	r1, #5
 80023bc:	484d      	ldr	r0, [pc, #308]	; (80024f4 <main+0x4c4>)
 80023be:	f7ff faa6 	bl	800190e <GPIO_Digital_Filtered_Input>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <main+0x39e>
						front_touchdown = 1;
 80023c8:	4b4b      	ldr	r3, [pc, #300]	; (80024f8 <main+0x4c8>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
					if (GPIO_Digital_Filtered_Input(&backLS1, 5)
 80023ce:	2105      	movs	r1, #5
 80023d0:	484a      	ldr	r0, [pc, #296]	; (80024fc <main+0x4cc>)
 80023d2:	f7ff fa9c 	bl	800190e <GPIO_Digital_Filtered_Input>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d106      	bne.n	80023ea <main+0x3ba>
							|| GPIO_Digital_Filtered_Input(&backLS2, 5))
 80023dc:	2105      	movs	r1, #5
 80023de:	4848      	ldr	r0, [pc, #288]	; (8002500 <main+0x4d0>)
 80023e0:	f7ff fa95 	bl	800190e <GPIO_Digital_Filtered_Input>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d002      	beq.n	80023f0 <main+0x3c0>
						back_touchdown = 1;
 80023ea:	4b46      	ldr	r3, [pc, #280]	; (8002504 <main+0x4d4>)
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]

					//if front touch before back, climbing up process
					if (back_touchdown == 0 && front_touchdown == 1)
 80023f0:	4b44      	ldr	r3, [pc, #272]	; (8002504 <main+0x4d4>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	f083 0301 	eor.w	r3, r3, #1
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <main+0x3de>
 80023fe:	4b3e      	ldr	r3, [pc, #248]	; (80024f8 <main+0x4c8>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <main+0x3de>
						lifting_mode = CLIMB_UP;
 8002406:	4b40      	ldr	r3, [pc, #256]	; (8002508 <main+0x4d8>)
 8002408:	2201      	movs	r2, #1
 800240a:	701a      	strb	r2, [r3, #0]
 800240c:	e00d      	b.n	800242a <main+0x3fa>
					//if back touch before front, climbing down process
					else if (back_touchdown == 1 && front_touchdown == 0)
 800240e:	4b3d      	ldr	r3, [pc, #244]	; (8002504 <main+0x4d4>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d009      	beq.n	800242a <main+0x3fa>
 8002416:	4b38      	ldr	r3, [pc, #224]	; (80024f8 <main+0x4c8>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	f083 0301 	eor.w	r3, r3, #1
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <main+0x3fa>
						lifting_mode = CLIMB_DOWN;
 8002424:	4b38      	ldr	r3, [pc, #224]	; (8002508 <main+0x4d8>)
 8002426:	2202      	movs	r2, #2
 8002428:	701a      	strb	r2, [r3, #0]

					initial_angle = exp_angle_filter * MPU6050.KalmanAngleX
 800242a:	4b38      	ldr	r3, [pc, #224]	; (800250c <main+0x4dc>)
 800242c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002430:	4b37      	ldr	r3, [pc, #220]	; (8002510 <main+0x4e0>)
 8002432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002436:	f7fe f897 	bl	8000568 <__aeabi_dmul>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4614      	mov	r4, r2
 8002440:	461d      	mov	r5, r3
							+ (1 - exp_angle_filter) * initial_angle;
 8002442:	4b33      	ldr	r3, [pc, #204]	; (8002510 <main+0x4e0>)
 8002444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002448:	f04f 0000 	mov.w	r0, #0
 800244c:	4931      	ldr	r1, [pc, #196]	; (8002514 <main+0x4e4>)
 800244e:	f7fd fed3 	bl	80001f8 <__aeabi_dsub>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4610      	mov	r0, r2
 8002458:	4619      	mov	r1, r3
 800245a:	4b2f      	ldr	r3, [pc, #188]	; (8002518 <main+0x4e8>)
 800245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002460:	f7fe f882 	bl	8000568 <__aeabi_dmul>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4620      	mov	r0, r4
 800246a:	4629      	mov	r1, r5
 800246c:	f7fd fec6 	bl	80001fc <__adddf3>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
					initial_angle = exp_angle_filter * MPU6050.KalmanAngleX
 8002474:	4928      	ldr	r1, [pc, #160]	; (8002518 <main+0x4e8>)
 8002476:	e9c1 2300 	strd	r2, r3, [r1]

					if (back_touchdown == false)
 800247a:	4b22      	ldr	r3, [pc, #136]	; (8002504 <main+0x4d4>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	f083 0301 	eor.w	r3, r3, #1
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <main+0x464>
						runMotor(&backMotor, 5);
 8002488:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800248c:	4823      	ldr	r0, [pc, #140]	; (800251c <main+0x4ec>)
 800248e:	f7ff f9c7 	bl	8001820 <runMotor>
 8002492:	e004      	b.n	800249e <main+0x46e>
					else
						runMotor(&backMotor, 0);
 8002494:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8002520 <main+0x4f0>
 8002498:	4820      	ldr	r0, [pc, #128]	; (800251c <main+0x4ec>)
 800249a:	f7ff f9c1 	bl	8001820 <runMotor>

					if (front_touchdown == false)
 800249e:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <main+0x4c8>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	f083 0301 	eor.w	r3, r3, #1
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <main+0x488>
						runMotor(&rearMotor, 5);
 80024ac:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80024b0:	481c      	ldr	r0, [pc, #112]	; (8002524 <main+0x4f4>)
 80024b2:	f7ff f9b5 	bl	8001820 <runMotor>
 80024b6:	e004      	b.n	80024c2 <main+0x492>
					else
						runMotor(&rearMotor, 0);
 80024b8:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8002520 <main+0x4f0>
 80024bc:	4819      	ldr	r0, [pc, #100]	; (8002524 <main+0x4f4>)
 80024be:	f7ff f9af 	bl	8001820 <runMotor>
				while (front_touchdown == false || back_touchdown == false)
 80024c2:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <main+0x4c8>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	f083 0301 	eor.w	r3, r3, #1
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f47f af6d 	bne.w	80023ac <main+0x37c>
 80024d2:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <main+0x4d4>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	f083 0301 	eor.w	r3, r3, #1
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f47f af65 	bne.w	80023ac <main+0x37c>
				}

				HAL_Delay(500);
 80024e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024e6:	f002 fa3b 	bl	8004960 <HAL_Delay>
				continue; //to refresh the loop and get the latest encoder reading
 80024ea:	f000 bc60 	b.w	8002dae <main+0xd7e>
 80024ee:	bf00      	nop
 80024f0:	20000068 	.word	0x20000068
 80024f4:	20000078 	.word	0x20000078
 80024f8:	20000298 	.word	0x20000298
 80024fc:	20000088 	.word	0x20000088
 8002500:	20000098 	.word	0x20000098
 8002504:	20000299 	.word	0x20000299
 8002508:	2000010c 	.word	0x2000010c
 800250c:	200004d0 	.word	0x200004d0
 8002510:	20000110 	.word	0x20000110
 8002514:	3ff00000 	.word	0x3ff00000
 8002518:	200002a0 	.word	0x200002a0
 800251c:	20000034 	.word	0x20000034
 8002520:	00000000 	.word	0x00000000
 8002524:	20000000 	.word	0x20000000
			}
			//Normal wheelchair mode, basic joystick control mode
			if (lifting_mode == NORMAL)
 8002528:	4b9d      	ldr	r3, [pc, #628]	; (80027a0 <main+0x770>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d112      	bne.n	8002556 <main+0x526>
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002530:	2200      	movs	r2, #0
 8002532:	2108      	movs	r1, #8
 8002534:	489b      	ldr	r0, [pc, #620]	; (80027a4 <main+0x774>)
 8002536:	f004 fc2f 	bl	8006d98 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800253a:	2200      	movs	r2, #0
 800253c:	2110      	movs	r1, #16
 800253e:	4899      	ldr	r0, [pc, #612]	; (80027a4 <main+0x774>)
 8002540:	f004 fc2a 	bl	8006d98 <HAL_GPIO_WritePin>
//				wheel_Control(&baseWheelSpeed);
//				baseMotorCommand();
//				goto_pos(0, frontClimb_pid);
//				goto_pos(0, backClimb_pid);
				front_touchdown = false;
 8002544:	4b98      	ldr	r3, [pc, #608]	; (80027a8 <main+0x778>)
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
				back_touchdown = false;
 800254a:	4b98      	ldr	r3, [pc, #608]	; (80027ac <main+0x77c>)
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
				climb_first_iteration = true;
 8002550:	4b97      	ldr	r3, [pc, #604]	; (80027b0 <main+0x780>)
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]
			}
			//Climbing up process
			if (lifting_mode == CLIMB_UP)
 8002556:	4b92      	ldr	r3, [pc, #584]	; (80027a0 <main+0x770>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b01      	cmp	r3, #1
 800255c:	f040 8234 	bne.w	80029c8 <main+0x998>
			{
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002560:	2201      	movs	r2, #1
 8002562:	2108      	movs	r1, #8
 8002564:	488f      	ldr	r0, [pc, #572]	; (80027a4 <main+0x774>)
 8002566:	f004 fc17 	bl	8006d98 <HAL_GPIO_WritePin>
				if (climb_first_iteration)
 800256a:	4b91      	ldr	r3, [pc, #580]	; (80027b0 <main+0x780>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 80e1 	beq.w	8002736 <main+0x706>
				{
					//If curb_height is positive, should be climbing up process and vice versa
					curb_height = CLIMBING_LEG_LENGTH
							* cos(TO_RAD(encoderFront.angleDeg)) + BASE_HEIGHT
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <main+0x784>)
 8002576:	4618      	mov	r0, r3
 8002578:	f7fd ff9e 	bl	80004b8 <__aeabi_f2d>
 800257c:	4604      	mov	r4, r0
 800257e:	460d      	mov	r5, r1
 8002580:	4b8d      	ldr	r3, [pc, #564]	; (80027b8 <main+0x788>)
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	4618      	mov	r0, r3
 8002586:	f7fd ff97 	bl	80004b8 <__aeabi_f2d>
 800258a:	a37f      	add	r3, pc, #508	; (adr r3, 8002788 <main+0x758>)
 800258c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002590:	f7fd ffea 	bl	8000568 <__aeabi_dmul>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4610      	mov	r0, r2
 800259a:	4619      	mov	r1, r3
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	4b86      	ldr	r3, [pc, #536]	; (80027bc <main+0x78c>)
 80025a2:	f7fe f90b 	bl	80007bc <__aeabi_ddiv>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	ec43 2b17 	vmov	d7, r2, r3
 80025ae:	eeb0 0a47 	vmov.f32	s0, s14
 80025b2:	eef0 0a67 	vmov.f32	s1, s15
 80025b6:	f00a fb23 	bl	800cc00 <cos>
 80025ba:	ec53 2b10 	vmov	r2, r3, d0
 80025be:	4620      	mov	r0, r4
 80025c0:	4629      	mov	r1, r5
 80025c2:	f7fd ffd1 	bl	8000568 <__aeabi_dmul>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4614      	mov	r4, r2
 80025cc:	461d      	mov	r5, r3
 80025ce:	4b7c      	ldr	r3, [pc, #496]	; (80027c0 <main+0x790>)
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fd ff71 	bl	80004b8 <__aeabi_f2d>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4620      	mov	r0, r4
 80025dc:	4629      	mov	r1, r5
 80025de:	f7fd fe0d 	bl	80001fc <__adddf3>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4610      	mov	r0, r2
 80025e8:	4619      	mov	r1, r3
							- FRONT_CLIMB_WHEEL_DIAMETER / 2.0;
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	4b75      	ldr	r3, [pc, #468]	; (80027c4 <main+0x794>)
 80025f0:	f7fd fe02 	bl	80001f8 <__aeabi_dsub>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
 80025fc:	f7fe faac 	bl	8000b58 <__aeabi_d2f>
 8002600:	4603      	mov	r3, r0
					curb_height = CLIMBING_LEG_LENGTH
 8002602:	4a71      	ldr	r2, [pc, #452]	; (80027c8 <main+0x798>)
 8002604:	6013      	str	r3, [r2, #0]
					curb_height += 0.0205; //Small error correction 10%
 8002606:	4b70      	ldr	r3, [pc, #448]	; (80027c8 <main+0x798>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7fd ff54 	bl	80004b8 <__aeabi_f2d>
 8002610:	a35f      	add	r3, pc, #380	; (adr r3, 8002790 <main+0x760>)
 8002612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002616:	f7fd fdf1 	bl	80001fc <__adddf3>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4610      	mov	r0, r2
 8002620:	4619      	mov	r1, r3
 8002622:	f7fe fa99 	bl	8000b58 <__aeabi_d2f>
 8002626:	4603      	mov	r3, r0
 8002628:	4a67      	ldr	r2, [pc, #412]	; (80027c8 <main+0x798>)
 800262a:	6013      	str	r3, [r2, #0]

					//First determine whether is the height climb-able
					back_lifting_height = BACK_BASE_HEIGHT + curb_height
 800262c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80027cc <main+0x79c>
 8002630:	4b65      	ldr	r3, [pc, #404]	; (80027c8 <main+0x798>)
 8002632:	edd3 7a00 	vldr	s15, [r3]
 8002636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800263a:	ee17 0a90 	vmov	r0, s15
 800263e:	f7fd ff3b 	bl	80004b8 <__aeabi_f2d>
							- HUB_DIAMETER / 2;
 8002642:	a355      	add	r3, pc, #340	; (adr r3, 8002798 <main+0x768>)
 8002644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002648:	f7fd fdd6 	bl	80001f8 <__aeabi_dsub>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4610      	mov	r0, r2
 8002652:	4619      	mov	r1, r3
 8002654:	f7fe fa80 	bl	8000b58 <__aeabi_d2f>
 8002658:	4603      	mov	r3, r0
					back_lifting_height = BACK_BASE_HEIGHT + curb_height
 800265a:	4a5d      	ldr	r2, [pc, #372]	; (80027d0 <main+0x7a0>)
 800265c:	6013      	str	r3, [r2, #0]
					back_lifting_angle =
					TO_DEG(
 800265e:	4b5c      	ldr	r3, [pc, #368]	; (80027d0 <main+0x7a0>)
 8002660:	edd3 7a00 	vldr	s15, [r3]
 8002664:	eef1 7a67 	vneg.f32	s15, s15
 8002668:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 80027d4 <main+0x7a4>
 800266c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002670:	ee16 0a90 	vmov	r0, s13
 8002674:	f7fd ff20 	bl	80004b8 <__aeabi_f2d>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	ec43 2b10 	vmov	d0, r2, r3
 8002680:	f00a fb6e 	bl	800cd60 <acos>
 8002684:	ec53 2b10 	vmov	r2, r3, d0
 8002688:	4610      	mov	r0, r2
 800268a:	4619      	mov	r1, r3
 800268c:	f7fe fa64 	bl	8000b58 <__aeabi_d2f>
 8002690:	ee07 0a10 	vmov	s14, r0
 8002694:	eddf 7a50 	vldr	s15, [pc, #320]	; 80027d8 <main+0x7a8>
 8002698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800269c:	ee17 0a90 	vmov	r0, s15
 80026a0:	f7fd ff0a 	bl	80004b8 <__aeabi_f2d>
 80026a4:	a338      	add	r3, pc, #224	; (adr r3, 8002788 <main+0x758>)
 80026a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026aa:	f7fe f887 	bl	80007bc <__aeabi_ddiv>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4610      	mov	r0, r2
 80026b4:	4619      	mov	r1, r3
							(float )acos(
									-back_lifting_height
									/ CLIMBING_LEG_LENGTH)) - 30.0; //30.0 is the bending angle of the extender(originally 36.6).
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	4b48      	ldr	r3, [pc, #288]	; (80027dc <main+0x7ac>)
 80026bc:	f7fd fd9c 	bl	80001f8 <__aeabi_dsub>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4610      	mov	r0, r2
 80026c6:	4619      	mov	r1, r3
 80026c8:	f7fe fa46 	bl	8000b58 <__aeabi_d2f>
 80026cc:	4603      	mov	r3, r0
					back_lifting_angle =
 80026ce:	4a44      	ldr	r2, [pc, #272]	; (80027e0 <main+0x7b0>)
 80026d0:	6013      	str	r3, [r2, #0]
					back_encoder_input = (back_lifting_angle / 360.0)
 80026d2:	4b43      	ldr	r3, [pc, #268]	; (80027e0 <main+0x7b0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fd feee 	bl	80004b8 <__aeabi_f2d>
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	4b40      	ldr	r3, [pc, #256]	; (80027e4 <main+0x7b4>)
 80026e2:	f7fe f86b 	bl	80007bc <__aeabi_ddiv>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4610      	mov	r0, r2
 80026ec:	4619      	mov	r1, r3
							* (4096 * BACK_GEAR_RATIO);
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	4b3d      	ldr	r3, [pc, #244]	; (80027e8 <main+0x7b8>)
 80026f4:	f7fd ff38 	bl	8000568 <__aeabi_dmul>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
					back_encoder_input = (back_lifting_angle / 360.0)
 80026fc:	4610      	mov	r0, r2
 80026fe:	4619      	mov	r1, r3
 8002700:	f7fe f9e2 	bl	8000ac8 <__aeabi_d2iz>
 8002704:	4603      	mov	r3, r0
 8002706:	4a39      	ldr	r2, [pc, #228]	; (80027ec <main+0x7bc>)
 8002708:	6013      	str	r3, [r2, #0]

					if (isnan(back_lifting_angle)
 800270a:	4b35      	ldr	r3, [pc, #212]	; (80027e0 <main+0x7b0>)
 800270c:	edd3 7a00 	vldr	s15, [r3]
 8002710:	eef4 7a67 	vcmp.f32	s15, s15
 8002714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002718:	d606      	bvs.n	8002728 <main+0x6f8>
							|| back_encoder_input >= MAX_BACK_ALLOWABLE_ENC)
 800271a:	4b34      	ldr	r3, [pc, #208]	; (80027ec <main+0x7bc>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002724:	429a      	cmp	r2, r3
 8002726:	d303      	bcc.n	8002730 <main+0x700>
					{
						lifting_mode = NORMAL;
 8002728:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <main+0x770>)
 800272a:	2200      	movs	r2, #0
 800272c:	701a      	strb	r2, [r3, #0]
						continue;
 800272e:	e33e      	b.n	8002dae <main+0xd7e>
					}

					climb_first_iteration = false;
 8002730:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <main+0x780>)
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]
				}

				//1. lift the front climbing wheel up until it reach it maximum pos
				//The process is controlled by PID on the front climbing wheel
				//the maximum pos is when the climbing wheel is below the wheelchair base
				goto_pos(MAX_FRONT_CLIMBING_ENC, frontClimb_pid);
 8002736:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800273a:	461a      	mov	r2, r3
 800273c:	4b2c      	ldr	r3, [pc, #176]	; (80027f0 <main+0x7c0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4619      	mov	r1, r3
 8002742:	4610      	mov	r0, r2
 8002744:	f000 fe8c 	bl	8003460 <goto_pos>
				goto_pos(back_encoder_input, backClimb_pid);
 8002748:	4b28      	ldr	r3, [pc, #160]	; (80027ec <main+0x7bc>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a29      	ldr	r2, [pc, #164]	; (80027f4 <main+0x7c4>)
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	4611      	mov	r1, r2
 8002752:	4618      	mov	r0, r3
 8002754:	f000 fe84 	bl	8003460 <goto_pos>
				if (fabs(speed[FRONT_INDEX] >= 4)
 8002758:	4b27      	ldr	r3, [pc, #156]	; (80027f8 <main+0x7c8>)
 800275a:	edd3 7a00 	vldr	s15, [r3]
 800275e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002762:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276a:	da09      	bge.n	8002780 <main+0x750>
						|| fabs(speed[BACK_INDEX] >= 4))
 800276c:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <main+0x7c8>)
 800276e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002772:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800277a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800277e:	db3f      	blt.n	8002800 <main+0x7d0>
					is_lifting = true;
 8002780:	4b1e      	ldr	r3, [pc, #120]	; (80027fc <main+0x7cc>)
 8002782:	2201      	movs	r2, #1
 8002784:	701a      	strb	r2, [r3, #0]
 8002786:	e03e      	b.n	8002806 <main+0x7d6>
 8002788:	54442d18 	.word	0x54442d18
 800278c:	400921fb 	.word	0x400921fb
 8002790:	b645a1cb 	.word	0xb645a1cb
 8002794:	3f94fdf3 	.word	0x3f94fdf3
 8002798:	916872b0 	.word	0x916872b0
 800279c:	3faf7ced 	.word	0x3faf7ced
 80027a0:	2000010c 	.word	0x2000010c
 80027a4:	40020400 	.word	0x40020400
 80027a8:	20000298 	.word	0x20000298
 80027ac:	20000299 	.word	0x20000299
 80027b0:	20000118 	.word	0x20000118
 80027b4:	3eb2b021 	.word	0x3eb2b021
 80027b8:	200003c0 	.word	0x200003c0
 80027bc:	40668000 	.word	0x40668000
 80027c0:	3e19999a 	.word	0x3e19999a
 80027c4:	3fb00000 	.word	0x3fb00000
 80027c8:	200002d0 	.word	0x200002d0
 80027cc:	3e19999a 	.word	0x3e19999a
 80027d0:	200002d8 	.word	0x200002d8
 80027d4:	3eb2b021 	.word	0x3eb2b021
 80027d8:	43340000 	.word	0x43340000
 80027dc:	403e0000 	.word	0x403e0000
 80027e0:	200002dc 	.word	0x200002dc
 80027e4:	40768000 	.word	0x40768000
 80027e8:	40c00000 	.word	0x40c00000
 80027ec:	200002e0 	.word	0x200002e0
 80027f0:	20000574 	.word	0x20000574
 80027f4:	200005c8 	.word	0x200005c8
 80027f8:	200002a8 	.word	0x200002a8
 80027fc:	200002ec 	.word	0x200002ec
				else
					is_lifting = false;
 8002800:	4ba3      	ldr	r3, [pc, #652]	; (8002a90 <main+0xa60>)
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]

				//2. During lifting, due to fixed point at the back climbing wheel.
				//The wheelchair would be pulled back if the back wheel not traveling while the its lifting
				//Therefore, lifting of back wheel and hub motor need to work at the same time to make sure the wheelchair is not moving back.
				//Pull back of wheelchair would cause the front climbing wheel to slip from the curb
				if (is_lifting == true && speed[BACK_INDEX] != 0)
 8002806:	4ba2      	ldr	r3, [pc, #648]	; (8002a90 <main+0xa60>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80ac 	beq.w	8002968 <main+0x938>
 8002810:	4ba0      	ldr	r3, [pc, #640]	; (8002a94 <main+0xa64>)
 8002812:	edd3 7a01 	vldr	s15, [r3, #4]
 8002816:	eef5 7a40 	vcmp.f32	s15, #0.0
 800281a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281e:	f000 80a3 	beq.w	8002968 <main+0x938>
				{
					double dt = (HAL_GetTick() - prev_angle_tick)
 8002822:	f002 f891 	bl	8004948 <HAL_GetTick>
 8002826:	ee07 0a90 	vmov	s15, r0
 800282a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800282e:	4b9a      	ldr	r3, [pc, #616]	; (8002a98 <main+0xa68>)
 8002830:	edd3 7a00 	vldr	s15, [r3]
 8002834:	ee77 7a67 	vsub.f32	s15, s14, s15
							/ (float) FREQUENCY;
 8002838:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8002a9c <main+0xa6c>
 800283c:	eec7 6a87 	vdiv.f32	s13, s15, s14
					double dt = (HAL_GetTick() - prev_angle_tick)
 8002840:	ee16 0a90 	vmov	r0, s13
 8002844:	f7fd fe38 	bl	80004b8 <__aeabi_f2d>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	e9c7 2300 	strd	r2, r3, [r7]
					climbForward_speed = CLIMBING_LEG_LENGTH
							* (sin(TO_RAD(prev_angle))
 8002850:	4b93      	ldr	r3, [pc, #588]	; (8002aa0 <main+0xa70>)
 8002852:	4618      	mov	r0, r3
 8002854:	f7fd fe30 	bl	80004b8 <__aeabi_f2d>
 8002858:	4604      	mov	r4, r0
 800285a:	460d      	mov	r5, r1
 800285c:	4b91      	ldr	r3, [pc, #580]	; (8002aa4 <main+0xa74>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f7fd fe29 	bl	80004b8 <__aeabi_f2d>
 8002866:	a384      	add	r3, pc, #528	; (adr r3, 8002a78 <main+0xa48>)
 8002868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286c:	f7fd fe7c 	bl	8000568 <__aeabi_dmul>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4610      	mov	r0, r2
 8002876:	4619      	mov	r1, r3
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	4b8a      	ldr	r3, [pc, #552]	; (8002aa8 <main+0xa78>)
 800287e:	f7fd ff9d 	bl	80007bc <__aeabi_ddiv>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	ec43 2b17 	vmov	d7, r2, r3
 800288a:	eeb0 0a47 	vmov.f32	s0, s14
 800288e:	eef0 0a67 	vmov.f32	s1, s15
 8002892:	f00a fa11 	bl	800ccb8 <sin>
 8002896:	ec59 8b10 	vmov	r8, r9, d0
									- sin(TO_RAD(encoderBack.angleDeg))) / dt; //unit: m/s,
 800289a:	4b84      	ldr	r3, [pc, #528]	; (8002aac <main+0xa7c>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fd fe0a 	bl	80004b8 <__aeabi_f2d>
 80028a4:	a374      	add	r3, pc, #464	; (adr r3, 8002a78 <main+0xa48>)
 80028a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028aa:	f7fd fe5d 	bl	8000568 <__aeabi_dmul>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4610      	mov	r0, r2
 80028b4:	4619      	mov	r1, r3
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	4b7b      	ldr	r3, [pc, #492]	; (8002aa8 <main+0xa78>)
 80028bc:	f7fd ff7e 	bl	80007bc <__aeabi_ddiv>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	ec43 2b17 	vmov	d7, r2, r3
 80028c8:	eeb0 0a47 	vmov.f32	s0, s14
 80028cc:	eef0 0a67 	vmov.f32	s1, s15
 80028d0:	f00a f9f2 	bl	800ccb8 <sin>
 80028d4:	ec53 2b10 	vmov	r2, r3, d0
 80028d8:	4640      	mov	r0, r8
 80028da:	4649      	mov	r1, r9
 80028dc:	f7fd fc8c 	bl	80001f8 <__aeabi_dsub>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
							* (sin(TO_RAD(prev_angle))
 80028e4:	4620      	mov	r0, r4
 80028e6:	4629      	mov	r1, r5
 80028e8:	f7fd fe3e 	bl	8000568 <__aeabi_dmul>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4610      	mov	r0, r2
 80028f2:	4619      	mov	r1, r3
									- sin(TO_RAD(encoderBack.angleDeg))) / dt; //unit: m/s,
 80028f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028f8:	f7fd ff60 	bl	80007bc <__aeabi_ddiv>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4610      	mov	r0, r2
 8002902:	4619      	mov	r1, r3
 8002904:	f7fe f928 	bl	8000b58 <__aeabi_d2f>
 8002908:	4603      	mov	r3, r0
					climbForward_speed = CLIMBING_LEG_LENGTH
 800290a:	4a69      	ldr	r2, [pc, #420]	; (8002ab0 <main+0xa80>)
 800290c:	6013      	str	r3, [r2, #0]
					climbForward_speed = climbForward_speed
							/ (HUB_DIAMETER / 2);
 800290e:	4b68      	ldr	r3, [pc, #416]	; (8002ab0 <main+0xa80>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7fd fdd0 	bl	80004b8 <__aeabi_f2d>
 8002918:	a359      	add	r3, pc, #356	; (adr r3, 8002a80 <main+0xa50>)
 800291a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291e:	f7fd ff4d 	bl	80007bc <__aeabi_ddiv>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	4610      	mov	r0, r2
 8002928:	4619      	mov	r1, r3
 800292a:	f7fe f915 	bl	8000b58 <__aeabi_d2f>
 800292e:	4603      	mov	r3, r0
					climbForward_speed = climbForward_speed
 8002930:	4a5f      	ldr	r2, [pc, #380]	; (8002ab0 <main+0xa80>)
 8002932:	6013      	str	r3, [r2, #0]
					//Convert hub speed into pulse/second
					send_HubMotor(climbForward_speed, climbForward_speed);
 8002934:	4b5e      	ldr	r3, [pc, #376]	; (8002ab0 <main+0xa80>)
 8002936:	edd3 7a00 	vldr	s15, [r3]
 800293a:	4b5d      	ldr	r3, [pc, #372]	; (8002ab0 <main+0xa80>)
 800293c:	ed93 7a00 	vldr	s14, [r3]
 8002940:	eef0 0a47 	vmov.f32	s1, s14
 8002944:	eeb0 0a67 	vmov.f32	s0, s15
 8002948:	f7fe fd72 	bl	8001430 <send_HubMotor>
					prev_angle = encoderBack.angleDeg;
 800294c:	4b57      	ldr	r3, [pc, #348]	; (8002aac <main+0xa7c>)
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	4a54      	ldr	r2, [pc, #336]	; (8002aa4 <main+0xa74>)
 8002952:	6013      	str	r3, [r2, #0]
					prev_angle_tick = HAL_GetTick();
 8002954:	f001 fff8 	bl	8004948 <HAL_GetTick>
 8002958:	ee07 0a90 	vmov	s15, r0
 800295c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002960:	4b4d      	ldr	r3, [pc, #308]	; (8002a98 <main+0xa68>)
 8002962:	edc3 7a00 	vstr	s15, [r3]
				{
 8002966:	e011      	b.n	800298c <main+0x95c>
				}
				else if (is_lifting == true && speed[BACK_INDEX] == 0)
 8002968:	4b49      	ldr	r3, [pc, #292]	; (8002a90 <main+0xa60>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00d      	beq.n	800298c <main+0x95c>
 8002970:	4b48      	ldr	r3, [pc, #288]	; (8002a94 <main+0xa64>)
 8002972:	edd3 7a01 	vldr	s15, [r3, #4]
 8002976:	eef5 7a40 	vcmp.f32	s15, #0.0
 800297a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297e:	d105      	bne.n	800298c <main+0x95c>
					send_HubMotor(0, 0);
 8002980:	eddf 0a4c 	vldr	s1, [pc, #304]	; 8002ab4 <main+0xa84>
 8002984:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8002ab4 <main+0xa84>
 8002988:	f7fe fd52 	bl	8001430 <send_HubMotor>

				//If finish lifting and climbing forward, its safe to return back to normal operation mode
				if (is_lifting == false && !(climbingForward(forward_distance)))
 800298c:	4b40      	ldr	r3, [pc, #256]	; (8002a90 <main+0xa60>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	f083 0301 	eor.w	r3, r3, #1
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 8180 	beq.w	8002c9c <main+0xc6c>
 800299c:	4b46      	ldr	r3, [pc, #280]	; (8002ab8 <main+0xa88>)
 800299e:	edd3 7a00 	vldr	s15, [r3]
 80029a2:	eeb0 0a67 	vmov.f32	s0, s15
 80029a6:	f000 fc6b 	bl	8003280 <climbingForward>
 80029aa:	4603      	mov	r3, r0
 80029ac:	f083 0301 	eor.w	r3, r3, #1
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 8172 	beq.w	8002c9c <main+0xc6c>
				{
					lifting_mode = RETRACTION;
 80029b8:	4b40      	ldr	r3, [pc, #256]	; (8002abc <main+0xa8c>)
 80029ba:	2203      	movs	r2, #3
 80029bc:	701a      	strb	r2, [r3, #0]
					HAL_Delay(500);
 80029be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029c2:	f001 ffcd 	bl	8004960 <HAL_Delay>
 80029c6:	e169      	b.n	8002c9c <main+0xc6c>
				}
			}

			else if (lifting_mode == CLIMB_DOWN)
 80029c8:	4b3c      	ldr	r3, [pc, #240]	; (8002abc <main+0xa8c>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	f040 8165 	bne.w	8002c9c <main+0xc6c>
			{
				//Climbing down process
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80029d2:	2201      	movs	r2, #1
 80029d4:	2110      	movs	r1, #16
 80029d6:	483a      	ldr	r0, [pc, #232]	; (8002ac0 <main+0xa90>)
 80029d8:	f004 f9de 	bl	8006d98 <HAL_GPIO_WritePin>
				if (climb_first_iteration)
 80029dc:	4b39      	ldr	r3, [pc, #228]	; (8002ac4 <main+0xa94>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d020      	beq.n	8002a26 <main+0x9f6>
				{
					front_climbDown_enc = encoderFront.encoder_pos
 80029e4:	4b38      	ldr	r3, [pc, #224]	; (8002ac8 <main+0xa98>)
 80029e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							+ 3.0 / 360.0 * 4096 * FRONT_GEAR_RATIO;
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fd fd43 	bl	8000474 <__aeabi_ui2d>
 80029ee:	a326      	add	r3, pc, #152	; (adr r3, 8002a88 <main+0xa58>)
 80029f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f4:	f7fd fc02 	bl	80001fc <__adddf3>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
					front_climbDown_enc = encoderFront.encoder_pos
 80029fc:	4610      	mov	r0, r2
 80029fe:	4619      	mov	r1, r3
 8002a00:	f7fe f862 	bl	8000ac8 <__aeabi_d2iz>
 8002a04:	4603      	mov	r3, r0
 8002a06:	4a31      	ldr	r2, [pc, #196]	; (8002acc <main+0xa9c>)
 8002a08:	6013      	str	r3, [r2, #0]

					//First determine whether is the height climb-able
					if (front_climbDown_enc > MAX_FRONT_ALLOWABLE_ENC)
 8002a0a:	4b30      	ldr	r3, [pc, #192]	; (8002acc <main+0xa9c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	f640 431c 	movw	r3, #3100	; 0xc1c
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d903      	bls.n	8002a20 <main+0x9f0>
					{
						lifting_mode = NORMAL;
 8002a18:	4b28      	ldr	r3, [pc, #160]	; (8002abc <main+0xa8c>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
						continue;
 8002a1e:	e1c6      	b.n	8002dae <main+0xd7e>
					}
					climb_first_iteration = false;
 8002a20:	4b28      	ldr	r3, [pc, #160]	; (8002ac4 <main+0xa94>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	701a      	strb	r2, [r3, #0]
				}

				//1. Back lift until the wheel is below the base
				goto_pos(MAX_BACK_CLIMBING_ENC, backClimb_pid);
 8002a26:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4b28      	ldr	r3, [pc, #160]	; (8002ad0 <main+0xaa0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4619      	mov	r1, r3
 8002a32:	4610      	mov	r0, r2
 8002a34:	f000 fd14 	bl	8003460 <goto_pos>
				goto_pos(front_climbDown_enc, frontClimb_pid);
 8002a38:	4b24      	ldr	r3, [pc, #144]	; (8002acc <main+0xa9c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a25      	ldr	r2, [pc, #148]	; (8002ad4 <main+0xaa4>)
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 fd0c 	bl	8003460 <goto_pos>
				if (fabs(speed[FRONT_INDEX] >= 4)
 8002a48:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <main+0xa64>)
 8002a4a:	edd3 7a00 	vldr	s15, [r3]
 8002a4e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002a52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5a:	da09      	bge.n	8002a70 <main+0xa40>
						|| fabs(speed[BACK_INDEX] >= 4))
 8002a5c:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <main+0xa64>)
 8002a5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a62:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002a66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6e:	db33      	blt.n	8002ad8 <main+0xaa8>
					is_lifting = true;
 8002a70:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <main+0xa60>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	701a      	strb	r2, [r3, #0]
 8002a76:	e032      	b.n	8002ade <main+0xaae>
 8002a78:	54442d18 	.word	0x54442d18
 8002a7c:	400921fb 	.word	0x400921fb
 8002a80:	916872b0 	.word	0x916872b0
 8002a84:	3faf7ced 	.word	0x3faf7ced
 8002a88:	2c5f92c6 	.word	0x2c5f92c6
 8002a8c:	4052c5f9 	.word	0x4052c5f9
 8002a90:	200002ec 	.word	0x200002ec
 8002a94:	200002a8 	.word	0x200002a8
 8002a98:	200002b0 	.word	0x200002b0
 8002a9c:	447a0000 	.word	0x447a0000
 8002aa0:	3eb2b021 	.word	0x3eb2b021
 8002aa4:	200002b4 	.word	0x200002b4
 8002aa8:	40668000 	.word	0x40668000
 8002aac:	20000414 	.word	0x20000414
 8002ab0:	200002e8 	.word	0x200002e8
 8002ab4:	00000000 	.word	0x00000000
 8002ab8:	20000164 	.word	0x20000164
 8002abc:	2000010c 	.word	0x2000010c
 8002ac0:	40020400 	.word	0x40020400
 8002ac4:	20000118 	.word	0x20000118
 8002ac8:	200003c0 	.word	0x200003c0
 8002acc:	200002d4 	.word	0x200002d4
 8002ad0:	200005c8 	.word	0x200005c8
 8002ad4:	20000574 	.word	0x20000574
				else
					is_lifting = false;
 8002ad8:	4bbb      	ldr	r3, [pc, #748]	; (8002dc8 <main+0xd98>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	701a      	strb	r2, [r3, #0]

				//2. During lifting, due to fixed point at the back climbing wheel.
				//The wheelchair would be pulled back if the back wheel not traveling while the its lifting
				//Therefore, lifting of back wheel and hub motor need to work at the same time to make sure the wheelchair is not moving back.
				//Pull back of wheelchair would cause the front climbing wheel to slip from the curb
				if (is_lifting == true && speed[BACK_INDEX] != 0)
 8002ade:	4bba      	ldr	r3, [pc, #744]	; (8002dc8 <main+0xd98>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 80ac 	beq.w	8002c40 <main+0xc10>
 8002ae8:	4bb8      	ldr	r3, [pc, #736]	; (8002dcc <main+0xd9c>)
 8002aea:	edd3 7a01 	vldr	s15, [r3, #4]
 8002aee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af6:	f000 80a3 	beq.w	8002c40 <main+0xc10>
				{
					double dt = (HAL_GetTick() - prev_angle_tick)
 8002afa:	f001 ff25 	bl	8004948 <HAL_GetTick>
 8002afe:	ee07 0a90 	vmov	s15, r0
 8002b02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b06:	4bb2      	ldr	r3, [pc, #712]	; (8002dd0 <main+0xda0>)
 8002b08:	edd3 7a00 	vldr	s15, [r3]
 8002b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
							/ (float) FREQUENCY;
 8002b10:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8002dd4 <main+0xda4>
 8002b14:	eec7 6a87 	vdiv.f32	s13, s15, s14
					double dt = (HAL_GetTick() - prev_angle_tick)
 8002b18:	ee16 0a90 	vmov	r0, s13
 8002b1c:	f7fd fccc 	bl	80004b8 <__aeabi_f2d>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	e9c7 2302 	strd	r2, r3, [r7, #8]
					climbForward_speed = CLIMBING_LEG_LENGTH
							* (sin(TO_RAD(prev_angle))
 8002b28:	4bab      	ldr	r3, [pc, #684]	; (8002dd8 <main+0xda8>)
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd fcc4 	bl	80004b8 <__aeabi_f2d>
 8002b30:	4604      	mov	r4, r0
 8002b32:	460d      	mov	r5, r1
 8002b34:	4ba9      	ldr	r3, [pc, #676]	; (8002ddc <main+0xdac>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fd fcbd 	bl	80004b8 <__aeabi_f2d>
 8002b3e:	a39e      	add	r3, pc, #632	; (adr r3, 8002db8 <main+0xd88>)
 8002b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b44:	f7fd fd10 	bl	8000568 <__aeabi_dmul>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	4619      	mov	r1, r3
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	4ba2      	ldr	r3, [pc, #648]	; (8002de0 <main+0xdb0>)
 8002b56:	f7fd fe31 	bl	80007bc <__aeabi_ddiv>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	ec43 2b17 	vmov	d7, r2, r3
 8002b62:	eeb0 0a47 	vmov.f32	s0, s14
 8002b66:	eef0 0a67 	vmov.f32	s1, s15
 8002b6a:	f00a f8a5 	bl	800ccb8 <sin>
 8002b6e:	ec59 8b10 	vmov	r8, r9, d0
									- sin(TO_RAD(encoderBack.angleDeg))) / dt; //unit: m/s,
 8002b72:	4b9c      	ldr	r3, [pc, #624]	; (8002de4 <main+0xdb4>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd fc9e 	bl	80004b8 <__aeabi_f2d>
 8002b7c:	a38e      	add	r3, pc, #568	; (adr r3, 8002db8 <main+0xd88>)
 8002b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b82:	f7fd fcf1 	bl	8000568 <__aeabi_dmul>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	4b93      	ldr	r3, [pc, #588]	; (8002de0 <main+0xdb0>)
 8002b94:	f7fd fe12 	bl	80007bc <__aeabi_ddiv>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	ec43 2b17 	vmov	d7, r2, r3
 8002ba0:	eeb0 0a47 	vmov.f32	s0, s14
 8002ba4:	eef0 0a67 	vmov.f32	s1, s15
 8002ba8:	f00a f886 	bl	800ccb8 <sin>
 8002bac:	ec53 2b10 	vmov	r2, r3, d0
 8002bb0:	4640      	mov	r0, r8
 8002bb2:	4649      	mov	r1, r9
 8002bb4:	f7fd fb20 	bl	80001f8 <__aeabi_dsub>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
							* (sin(TO_RAD(prev_angle))
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	4629      	mov	r1, r5
 8002bc0:	f7fd fcd2 	bl	8000568 <__aeabi_dmul>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4619      	mov	r1, r3
									- sin(TO_RAD(encoderBack.angleDeg))) / dt; //unit: m/s,
 8002bcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bd0:	f7fd fdf4 	bl	80007bc <__aeabi_ddiv>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	f7fd ffbc 	bl	8000b58 <__aeabi_d2f>
 8002be0:	4603      	mov	r3, r0
					climbForward_speed = CLIMBING_LEG_LENGTH
 8002be2:	4a81      	ldr	r2, [pc, #516]	; (8002de8 <main+0xdb8>)
 8002be4:	6013      	str	r3, [r2, #0]
					climbForward_speed = climbForward_speed
							/ (HUB_DIAMETER / 2);
 8002be6:	4b80      	ldr	r3, [pc, #512]	; (8002de8 <main+0xdb8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fd fc64 	bl	80004b8 <__aeabi_f2d>
 8002bf0:	a373      	add	r3, pc, #460	; (adr r3, 8002dc0 <main+0xd90>)
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	f7fd fde1 	bl	80007bc <__aeabi_ddiv>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4610      	mov	r0, r2
 8002c00:	4619      	mov	r1, r3
 8002c02:	f7fd ffa9 	bl	8000b58 <__aeabi_d2f>
 8002c06:	4603      	mov	r3, r0
					climbForward_speed = climbForward_speed
 8002c08:	4a77      	ldr	r2, [pc, #476]	; (8002de8 <main+0xdb8>)
 8002c0a:	6013      	str	r3, [r2, #0]
					//Convert hub speed into pulse/second
					send_HubMotor(climbForward_speed, climbForward_speed);
 8002c0c:	4b76      	ldr	r3, [pc, #472]	; (8002de8 <main+0xdb8>)
 8002c0e:	edd3 7a00 	vldr	s15, [r3]
 8002c12:	4b75      	ldr	r3, [pc, #468]	; (8002de8 <main+0xdb8>)
 8002c14:	ed93 7a00 	vldr	s14, [r3]
 8002c18:	eef0 0a47 	vmov.f32	s1, s14
 8002c1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c20:	f7fe fc06 	bl	8001430 <send_HubMotor>
					prev_angle = encoderBack.angleDeg;
 8002c24:	4b6f      	ldr	r3, [pc, #444]	; (8002de4 <main+0xdb4>)
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	4a6c      	ldr	r2, [pc, #432]	; (8002ddc <main+0xdac>)
 8002c2a:	6013      	str	r3, [r2, #0]
					prev_angle_tick = HAL_GetTick();
 8002c2c:	f001 fe8c 	bl	8004948 <HAL_GetTick>
 8002c30:	ee07 0a90 	vmov	s15, r0
 8002c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c38:	4b65      	ldr	r3, [pc, #404]	; (8002dd0 <main+0xda0>)
 8002c3a:	edc3 7a00 	vstr	s15, [r3]
				{
 8002c3e:	e011      	b.n	8002c64 <main+0xc34>
				}
				else if (is_lifting == true && speed[BACK_INDEX] == 0)
 8002c40:	4b61      	ldr	r3, [pc, #388]	; (8002dc8 <main+0xd98>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00d      	beq.n	8002c64 <main+0xc34>
 8002c48:	4b60      	ldr	r3, [pc, #384]	; (8002dcc <main+0xd9c>)
 8002c4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c4e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c56:	d105      	bne.n	8002c64 <main+0xc34>
					send_HubMotor(0, 0);
 8002c58:	eddf 0a64 	vldr	s1, [pc, #400]	; 8002dec <main+0xdbc>
 8002c5c:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8002dec <main+0xdbc>
 8002c60:	f7fe fbe6 	bl	8001430 <send_HubMotor>

				//If finish lifting and climbing forward, its safe to return back to normal operation mode
				if (is_lifting == false && !(climbingForward(forward_distance)))
 8002c64:	4b58      	ldr	r3, [pc, #352]	; (8002dc8 <main+0xd98>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	f083 0301 	eor.w	r3, r3, #1
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d014      	beq.n	8002c9c <main+0xc6c>
 8002c72:	4b5f      	ldr	r3, [pc, #380]	; (8002df0 <main+0xdc0>)
 8002c74:	edd3 7a00 	vldr	s15, [r3]
 8002c78:	eeb0 0a67 	vmov.f32	s0, s15
 8002c7c:	f000 fb00 	bl	8003280 <climbingForward>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f083 0301 	eor.w	r3, r3, #1
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d007      	beq.n	8002c9c <main+0xc6c>
				{
					lifting_mode = RETRACTION;
 8002c8c:	4b59      	ldr	r3, [pc, #356]	; (8002df4 <main+0xdc4>)
 8002c8e:	2203      	movs	r2, #3
 8002c90:	701a      	strb	r2, [r3, #0]
					HAL_Delay(500);
 8002c92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c96:	f001 fe63 	bl	8004960 <HAL_Delay>
					continue;
 8002c9a:	e088      	b.n	8002dae <main+0xd7e>
				}
			}

			if (lifting_mode == RETRACTION)
 8002c9c:	4b55      	ldr	r3, [pc, #340]	; (8002df4 <main+0xdc4>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d13a      	bne.n	8002d1a <main+0xcea>
			{
				//retraction process
				goto_pos(MIN_FRONT_ALLOWABLE_ENC + 500, frontClimb_pid);
 8002ca4:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8002ca8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002cac:	461a      	mov	r2, r3
 8002cae:	4b52      	ldr	r3, [pc, #328]	; (8002df8 <main+0xdc8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	f000 fbd3 	bl	8003460 <goto_pos>
				goto_pos(MIN_BACK_ALLOWABLE_ENC + 500, backClimb_pid);
 8002cba:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8002cbe:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	4b4d      	ldr	r3, [pc, #308]	; (8002dfc <main+0xdcc>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4610      	mov	r0, r2
 8002ccc:	f000 fbc8 	bl	8003460 <goto_pos>
				if (fabs(speed[FRONT_INDEX] < 4) && fabs(speed[BACK_INDEX] < 4))
 8002cd0:	4b3e      	ldr	r3, [pc, #248]	; (8002dcc <main+0xd9c>)
 8002cd2:	edd3 7a00 	vldr	s15, [r3]
 8002cd6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002cda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce2:	d51a      	bpl.n	8002d1a <main+0xcea>
 8002ce4:	4b39      	ldr	r3, [pc, #228]	; (8002dcc <main+0xd9c>)
 8002ce6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cea:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf6:	d510      	bpl.n	8002d1a <main+0xcea>
				{
					pid_reset(frontClimb_pid);
 8002cf8:	4b3f      	ldr	r3, [pc, #252]	; (8002df8 <main+0xdc8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fe fb61 	bl	80013c4 <pid_reset>
					pid_reset(backClimb_pid);
 8002d02:	4b3e      	ldr	r3, [pc, #248]	; (8002dfc <main+0xdcc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe fb5c 	bl	80013c4 <pid_reset>
					lifting_mode = NORMAL;
 8002d0c:	4b39      	ldr	r3, [pc, #228]	; (8002df4 <main+0xdc4>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]
					HAL_Delay(500);
 8002d12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d16:	f001 fe23 	bl	8004960 <HAL_Delay>
				}
			}

			if (fabs(speed[FRONT_INDEX]) < 4)
 8002d1a:	4b2c      	ldr	r3, [pc, #176]	; (8002dcc <main+0xd9c>)
 8002d1c:	edd3 7a00 	vldr	s15, [r3]
 8002d20:	eef0 7ae7 	vabs.f32	s15, s15
 8002d24:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002d28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d30:	d503      	bpl.n	8002d3a <main+0xd0a>
				speed[FRONT_INDEX] = 0;
 8002d32:	4b26      	ldr	r3, [pc, #152]	; (8002dcc <main+0xd9c>)
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
			if (fabs(speed[BACK_INDEX]) < 4)
 8002d3a:	4b24      	ldr	r3, [pc, #144]	; (8002dcc <main+0xd9c>)
 8002d3c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d40:	eef0 7ae7 	vabs.f32	s15, s15
 8002d44:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d50:	d503      	bpl.n	8002d5a <main+0xd2a>
				speed[BACK_INDEX] = 0;
 8002d52:	4b1e      	ldr	r3, [pc, #120]	; (8002dcc <main+0xd9c>)
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	605a      	str	r2, [r3, #4]

			runMotor(&rearMotor, speed[FRONT_INDEX]);
 8002d5a:	4b1c      	ldr	r3, [pc, #112]	; (8002dcc <main+0xd9c>)
 8002d5c:	edd3 7a00 	vldr	s15, [r3]
 8002d60:	eeb0 0a67 	vmov.f32	s0, s15
 8002d64:	4826      	ldr	r0, [pc, #152]	; (8002e00 <main+0xdd0>)
 8002d66:	f7fe fd5b 	bl	8001820 <runMotor>
			runMotor(&backMotor, speed[BACK_INDEX]);
 8002d6a:	4b18      	ldr	r3, [pc, #96]	; (8002dcc <main+0xd9c>)
 8002d6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d70:	eeb0 0a67 	vmov.f32	s0, s15
 8002d74:	4823      	ldr	r0, [pc, #140]	; (8002e04 <main+0xdd4>)
 8002d76:	f7fe fd53 	bl	8001820 <runMotor>

			if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002d7a:	4b14      	ldr	r3, [pc, #80]	; (8002dcc <main+0xd9c>)
 8002d7c:	edd3 7a00 	vldr	s15, [r3]
 8002d80:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d88:	d10b      	bne.n	8002da2 <main+0xd72>
 8002d8a:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <main+0xd9c>)
 8002d8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d90:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d98:	d103      	bne.n	8002da2 <main+0xd72>
				emBrakeMotor(0);
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	f7fe fc60 	bl	8001660 <emBrakeMotor>
 8002da0:	e002      	b.n	8002da8 <main+0xd78>
			else
				emBrakeMotor(1);
 8002da2:	2001      	movs	r0, #1
 8002da4:	f7fe fc5c 	bl	8001660 <emBrakeMotor>

			prev_time = HAL_GetTick();
 8002da8:	f001 fdce 	bl	8004948 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]
		if (HAL_GetTick() - prev_time >= 1)
 8002dae:	f7ff ba56 	b.w	800225e <main+0x22e>
 8002db2:	bf00      	nop
 8002db4:	f3af 8000 	nop.w
 8002db8:	54442d18 	.word	0x54442d18
 8002dbc:	400921fb 	.word	0x400921fb
 8002dc0:	916872b0 	.word	0x916872b0
 8002dc4:	3faf7ced 	.word	0x3faf7ced
 8002dc8:	200002ec 	.word	0x200002ec
 8002dcc:	200002a8 	.word	0x200002a8
 8002dd0:	200002b0 	.word	0x200002b0
 8002dd4:	447a0000 	.word	0x447a0000
 8002dd8:	3eb2b021 	.word	0x3eb2b021
 8002ddc:	200002b4 	.word	0x200002b4
 8002de0:	40668000 	.word	0x40668000
 8002de4:	20000414 	.word	0x20000414
 8002de8:	200002e8 	.word	0x200002e8
 8002dec:	00000000 	.word	0x00000000
 8002df0:	20000164 	.word	0x20000164
 8002df4:	2000010c 	.word	0x2000010c
 8002df8:	20000574 	.word	0x20000574
 8002dfc:	200005c8 	.word	0x200005c8
 8002e00:	20000000 	.word	0x20000000
 8002e04:	20000034 	.word	0x20000034

08002e08 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b094      	sub	sp, #80	; 0x50
 8002e0c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8002e0e:	f107 0320 	add.w	r3, r7, #32
 8002e12:	2230      	movs	r2, #48	; 0x30
 8002e14:	2100      	movs	r1, #0
 8002e16:	4618      	mov	r0, r3
 8002e18:	f009 fd4a 	bl	800c8b0 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8002e1c:	f107 030c 	add.w	r3, r7, #12
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	60da      	str	r2, [r3, #12]
 8002e2a:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60bb      	str	r3, [r7, #8]
 8002e30:	4b2b      	ldr	r3, [pc, #172]	; (8002ee0 <SystemClock_Config+0xd8>)
 8002e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e34:	4a2a      	ldr	r2, [pc, #168]	; (8002ee0 <SystemClock_Config+0xd8>)
 8002e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3c:	4b28      	ldr	r3, [pc, #160]	; (8002ee0 <SystemClock_Config+0xd8>)
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e48:	2300      	movs	r3, #0
 8002e4a:	607b      	str	r3, [r7, #4]
 8002e4c:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <SystemClock_Config+0xdc>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a24      	ldr	r2, [pc, #144]	; (8002ee4 <SystemClock_Config+0xdc>)
 8002e52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e56:	6013      	str	r3, [r2, #0]
 8002e58:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <SystemClock_Config+0xdc>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e60:	607b      	str	r3, [r7, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e64:	2301      	movs	r3, #1
 8002e66:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e76:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002e78:	2308      	movs	r3, #8
 8002e7a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8002e7c:	23b4      	movs	r3, #180	; 0xb4
 8002e7e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e80:	2302      	movs	r3, #2
 8002e82:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e84:	2304      	movs	r3, #4
 8002e86:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e88:	f107 0320 	add.w	r3, r7, #32
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f005 f93d 	bl	800810c <HAL_RCC_OscConfig>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <SystemClock_Config+0x94>
	{
		Error_Handler();
 8002e98:	f000 fbf6 	bl	8003688 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002e9c:	f005 f8e6 	bl	800806c <HAL_PWREx_EnableOverDrive>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <SystemClock_Config+0xa2>
	{
		Error_Handler();
 8002ea6:	f000 fbef 	bl	8003688 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002eaa:	230f      	movs	r3, #15
 8002eac:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002eb6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002eba:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ec0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ec2:	f107 030c 	add.w	r3, r7, #12
 8002ec6:	2105      	movs	r1, #5
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f005 fc3f 	bl	800874c <HAL_RCC_ClockConfig>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <SystemClock_Config+0xd0>
	{
		Error_Handler();
 8002ed4:	f000 fbd8 	bl	8003688 <Error_Handler>
	}
}
 8002ed8:	bf00      	nop
 8002eda:	3750      	adds	r7, #80	; 0x50
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40007000 	.word	0x40007000

08002ee8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
 8002ef4:	2b80      	cmp	r3, #128	; 0x80
 8002ef6:	d11c      	bne.n	8002f32 <HAL_GPIO_EXTI_Callback+0x4a>
	{
	case AD_BUSY_Pin:
	{
		if (HAL_GetTick() - prev_adc_time > 1)
 8002ef8:	f001 fd26 	bl	8004948 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	4b10      	ldr	r3, [pc, #64]	; (8002f40 <HAL_GPIO_EXTI_Callback+0x58>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d916      	bls.n	8002f36 <HAL_GPIO_EXTI_Callback+0x4e>
		{
			ADC_Read(&adc_rawData[0]);
 8002f08:	480e      	ldr	r0, [pc, #56]	; (8002f44 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002f0a:	f7fe fb6b 	bl	80015e4 <ADC_Read>
			tempJoyRawDataX = adc_rawData[0];
 8002f0e:	4b0d      	ldr	r3, [pc, #52]	; (8002f44 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f14:	461a      	mov	r2, r3
 8002f16:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <HAL_GPIO_EXTI_Callback+0x60>)
 8002f18:	601a      	str	r2, [r3, #0]
			tempJoyRawDataY = adc_rawData[1];
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002f1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f20:	461a      	mov	r2, r3
 8002f22:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <HAL_GPIO_EXTI_Callback+0x64>)
 8002f24:	601a      	str	r2, [r3, #0]
			prev_adc_time = HAL_GetTick();
 8002f26:	f001 fd0f 	bl	8004948 <HAL_GetTick>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <HAL_GPIO_EXTI_Callback+0x58>)
 8002f2e:	6013      	str	r3, [r2, #0]
		}
	}
		break;
 8002f30:	e001      	b.n	8002f36 <HAL_GPIO_EXTI_Callback+0x4e>
	default:
		break;
 8002f32:	bf00      	nop
 8002f34:	e000      	b.n	8002f38 <HAL_GPIO_EXTI_Callback+0x50>
		break;
 8002f36:	bf00      	nop
	}
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	20000294 	.word	0x20000294
 8002f44:	20000564 	.word	0x20000564
 8002f48:	200005c4 	.word	0x200005c4
 8002f4c:	200004c0 	.word	0x200004c0

08002f50 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
	//Hub Encoder callback
	if (huart->Instance == USART3)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a3f      	ldr	r2, [pc, #252]	; (800305c <HAL_UART_RxCpltCallback+0x10c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d175      	bne.n	800304e <HAL_UART_RxCpltCallback+0xfe>
	{
		//Checksum, make sure that response is correct
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 8002f62:	4b3f      	ldr	r3, [pc, #252]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	4b3d      	ldr	r3, [pc, #244]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 8002f6a:	785b      	ldrb	r3, [r3, #1]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[2] + (uint16_t) receive_buf[3]
 8002f72:	4b3b      	ldr	r3, [pc, #236]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 8002f74:	789b      	ldrb	r3, [r3, #2]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	4b38      	ldr	r3, [pc, #224]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 8002f7e:	78db      	ldrb	r3, [r3, #3]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[4] + (uint16_t) receive_buf[5]
 8002f86:	4b36      	ldr	r3, [pc, #216]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 8002f88:	791b      	ldrb	r3, [r3, #4]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	4b33      	ldr	r3, [pc, #204]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 8002f92:	795b      	ldrb	r3, [r3, #5]
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[6] + (uint16_t) receive_buf[7]
 8002f9a:	4b31      	ldr	r3, [pc, #196]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 8002f9c:	799b      	ldrb	r3, [r3, #6]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	4b2e      	ldr	r3, [pc, #184]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 8002fa6:	79db      	ldrb	r3, [r3, #7]
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	4413      	add	r3, r2
 8002fac:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[8] + (uint16_t) receive_buf[9]
 8002fae:	4b2c      	ldr	r3, [pc, #176]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 8002fb0:	7a1b      	ldrb	r3, [r3, #8]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	4b29      	ldr	r3, [pc, #164]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 8002fba:	7a5b      	ldrb	r3, [r3, #9]
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[10] + (uint16_t) receive_buf[11]
 8002fc2:	4b27      	ldr	r3, [pc, #156]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 8002fc4:	7a9b      	ldrb	r3, [r3, #10]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	4413      	add	r3, r2
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	4b24      	ldr	r3, [pc, #144]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 8002fce:	7adb      	ldrb	r3, [r3, #11]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[12] + (uint16_t) receive_buf[13];
 8002fd6:	4b22      	ldr	r3, [pc, #136]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 8002fd8:	7b1b      	ldrb	r3, [r3, #12]
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	4413      	add	r3, r2
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	4b1f      	ldr	r3, [pc, #124]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 8002fe2:	7b5b      	ldrb	r3, [r3, #13]
 8002fe4:	b29b      	uxth	r3, r3
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	81fb      	strh	r3, [r7, #14]
		if ((uint8_t) sum == receive_buf[14])
 8002fea:	89fb      	ldrh	r3, [r7, #14]
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	4b1c      	ldr	r3, [pc, #112]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 8002ff0:	7b9b      	ldrb	r3, [r3, #14]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d12b      	bne.n	800304e <HAL_UART_RxCpltCallback+0xfe>
		{
			//Encoder Feedback
			if (receive_buf[0] == 0xAA && receive_buf[1] == 0xA4
 8002ff6:	4b1a      	ldr	r3, [pc, #104]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2baa      	cmp	r3, #170	; 0xaa
 8002ffc:	d127      	bne.n	800304e <HAL_UART_RxCpltCallback+0xfe>
 8002ffe:	4b18      	ldr	r3, [pc, #96]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 8003000:	785b      	ldrb	r3, [r3, #1]
 8003002:	2ba4      	cmp	r3, #164	; 0xa4
 8003004:	d123      	bne.n	800304e <HAL_UART_RxCpltCallback+0xfe>
					&& receive_buf[3] == 0x00)
 8003006:	4b16      	ldr	r3, [pc, #88]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 8003008:	78db      	ldrb	r3, [r3, #3]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d11f      	bne.n	800304e <HAL_UART_RxCpltCallback+0xfe>
			{
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 800300e:	4b14      	ldr	r3, [pc, #80]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 8003010:	7a5b      	ldrb	r3, [r3, #9]
 8003012:	061a      	lsls	r2, r3, #24
						+ (receive_buf[8] << 16) + (receive_buf[7] << 8)
 8003014:	4b12      	ldr	r3, [pc, #72]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 8003016:	7a1b      	ldrb	r3, [r3, #8]
 8003018:	041b      	lsls	r3, r3, #16
 800301a:	441a      	add	r2, r3
 800301c:	4b10      	ldr	r3, [pc, #64]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 800301e:	79db      	ldrb	r3, [r3, #7]
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	4413      	add	r3, r2
						+ (receive_buf[6]);
 8003024:	4a0e      	ldr	r2, [pc, #56]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 8003026:	7992      	ldrb	r2, [r2, #6]
 8003028:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 800302a:	4a0e      	ldr	r2, [pc, #56]	; (8003064 <HAL_UART_RxCpltCallback+0x114>)
 800302c:	6013      	str	r3, [r2, #0]
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 800302e:	4b0c      	ldr	r3, [pc, #48]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 8003030:	7b5b      	ldrb	r3, [r3, #13]
 8003032:	061a      	lsls	r2, r3, #24
						+ (receive_buf[12] << 16) + (receive_buf[11] << 8)
 8003034:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 8003036:	7b1b      	ldrb	r3, [r3, #12]
 8003038:	041b      	lsls	r3, r3, #16
 800303a:	441a      	add	r2, r3
 800303c:	4b08      	ldr	r3, [pc, #32]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 800303e:	7adb      	ldrb	r3, [r3, #11]
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	4413      	add	r3, r2
						+ (receive_buf[10]);
 8003044:	4a06      	ldr	r2, [pc, #24]	; (8003060 <HAL_UART_RxCpltCallback+0x110>)
 8003046:	7a92      	ldrb	r2, [r2, #10]
 8003048:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 800304a:	4a06      	ldr	r2, [pc, #24]	; (8003064 <HAL_UART_RxCpltCallback+0x114>)
 800304c:	6053      	str	r3, [r2, #4]
			}
		}
	}

}
 800304e:	bf00      	nop
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40004800 	.word	0x40004800
 8003060:	200005b4 	.word	0x200005b4
 8003064:	200004c4 	.word	0x200004c4

08003068 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	//Left Encoder Callback
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	if (hcan == &hcan1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a7b      	ldr	r2, [pc, #492]	; (8003260 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	f040 80e6 	bne.w	8003246 <HAL_CAN_RxFifo0MsgPendingCallback+0x1de>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 800307a:	f107 0308 	add.w	r3, r7, #8
 800307e:	4a79      	ldr	r2, [pc, #484]	; (8003264 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8003080:	2100      	movs	r1, #0
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f002 f962 	bl	800534c <HAL_CAN_GetRxMessage>
		if (incoming[1] == ENC_ADDR_LEFT)
 8003088:	7a7b      	ldrb	r3, [r7, #9]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d144      	bne.n	8003118 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
		{
			ENCODER_Sort_Incoming(incoming, &encoderBack);
 800308e:	f107 0308 	add.w	r3, r7, #8
 8003092:	4975      	ldr	r1, [pc, #468]	; (8003268 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8003094:	4618      	mov	r0, r3
 8003096:	f7fe fd63 	bl	8001b60 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderBack);
 800309a:	4873      	ldr	r0, [pc, #460]	; (8003268 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 800309c:	f7fe fdd9 	bl	8001c52 <ENCODER_Get_Angle>
			//Process the angle and GR
			//4096 is encoder single turn value
			//Need to check the encoder value in the correct direction
			encoderBack.encoder_pos = (uint32_t) (4096 * BACK_GEAR_RATIO)
					- encoderBack.encoder_pos
 80030a0:	4b71      	ldr	r3, [pc, #452]	; (8003268 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80030a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							% (uint32_t) (4096 * BACK_GEAR_RATIO);
 80030a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
					- encoderBack.encoder_pos
 80030a8:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
			encoderBack.encoder_pos = (uint32_t) (4096 * BACK_GEAR_RATIO)
 80030ac:	4a6e      	ldr	r2, [pc, #440]	; (8003268 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80030ae:	6453      	str	r3, [r2, #68]	; 0x44
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 80030b0:	4b6d      	ldr	r3, [pc, #436]	; (8003268 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80030b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b4:	ee07 3a90 	vmov	s15, r3
 80030b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					/ (4096 * BACK_GEAR_RATIO) * 360 + 36.587;
 80030bc:	eddf 6a6b 	vldr	s13, [pc, #428]	; 800326c <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 80030c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030c4:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8003270 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
 80030c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030cc:	ee17 0a90 	vmov	r0, s15
 80030d0:	f7fd f9f2 	bl	80004b8 <__aeabi_f2d>
 80030d4:	a35e      	add	r3, pc, #376	; (adr r3, 8003250 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 80030d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030da:	f7fd f88f 	bl	80001fc <__adddf3>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	4610      	mov	r0, r2
 80030e4:	4619      	mov	r1, r3
 80030e6:	f7fd fd37 	bl	8000b58 <__aeabi_d2f>
 80030ea:	4603      	mov	r3, r0
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 80030ec:	4a5e      	ldr	r2, [pc, #376]	; (8003268 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80030ee:	6413      	str	r3, [r2, #64]	; 0x40
			if (encoderBack.angleDeg > 360)
 80030f0:	4b5d      	ldr	r3, [pc, #372]	; (8003268 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80030f2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80030f6:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003270 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
 80030fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003102:	dd09      	ble.n	8003118 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
				encoderBack.angleDeg -= 360;
 8003104:	4b58      	ldr	r3, [pc, #352]	; (8003268 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8003106:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800310a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8003270 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
 800310e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003112:	4b55      	ldr	r3, [pc, #340]	; (8003268 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8003114:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		}
		if (incoming[1] == ENC_ADDR_RIGHT)
 8003118:	7a7b      	ldrb	r3, [r7, #9]
 800311a:	2b02      	cmp	r3, #2
 800311c:	f040 8093 	bne.w	8003246 <HAL_CAN_RxFifo0MsgPendingCallback+0x1de>
		{
			ENCODER_Sort_Incoming(incoming, &encoderFront);
 8003120:	f107 0308 	add.w	r3, r7, #8
 8003124:	4953      	ldr	r1, [pc, #332]	; (8003274 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe fd1a 	bl	8001b60 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderFront);
 800312c:	4851      	ldr	r0, [pc, #324]	; (8003274 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 800312e:	f7fe fd90 	bl	8001c52 <ENCODER_Get_Angle>
			if (4096 * 24 - encoderFront.encoder_pos < 30000)
 8003132:	4b50      	ldr	r3, [pc, #320]	; (8003274 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	f5c3 33c0 	rsb	r3, r3, #98304	; 0x18000
 800313a:	f247 522f 	movw	r2, #29999	; 0x752f
 800313e:	4293      	cmp	r3, r2
 8003140:	d839      	bhi.n	80031b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
			{
				encoderFront.encoder_pos =
						(4096 * 24 - encoderFront.encoder_pos)
 8003142:	4b4c      	ldr	r3, [pc, #304]	; (8003274 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	f5c3 32c0 	rsb	r2, r3, #98304	; 0x18000
								% (uint32_t) (4096 * FRONT_GEAR_RATIO);
 800314a:	4b4b      	ldr	r3, [pc, #300]	; (8003278 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 800314c:	fba3 1302 	umull	r1, r3, r3, r2
 8003150:	0b5b      	lsrs	r3, r3, #13
 8003152:	f242 3133 	movw	r1, #9011	; 0x2333
 8003156:	fb01 f303 	mul.w	r3, r1, r3
 800315a:	1ad3      	subs	r3, r2, r3
				encoderFront.encoder_pos =
 800315c:	4a45      	ldr	r2, [pc, #276]	; (8003274 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 800315e:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8003160:	4b44      	ldr	r3, [pc, #272]	; (8003274 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8003162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003164:	ee07 3a90 	vmov	s15, r3
 8003168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800316c:	ee17 0a90 	vmov	r0, s15
 8003170:	f7fd f9a2 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587;
 8003174:	a338      	add	r3, pc, #224	; (adr r3, 8003258 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8003176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317a:	f7fd fb1f 	bl	80007bc <__aeabi_ddiv>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4610      	mov	r0, r2
 8003184:	4619      	mov	r1, r3
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	4b3c      	ldr	r3, [pc, #240]	; (800327c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800318c:	f7fd f9ec 	bl	8000568 <__aeabi_dmul>
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4610      	mov	r0, r2
 8003196:	4619      	mov	r1, r3
 8003198:	a32d      	add	r3, pc, #180	; (adr r3, 8003250 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 800319a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319e:	f7fd f82d 	bl	80001fc <__adddf3>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	f7fd fcd5 	bl	8000b58 <__aeabi_d2f>
 80031ae:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 80031b0:	4a30      	ldr	r2, [pc, #192]	; (8003274 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80031b2:	6413      	str	r3, [r2, #64]	; 0x40
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587 - 360;
			}
		}
	}
}
 80031b4:	e047      	b.n	8003246 <HAL_CAN_RxFifo0MsgPendingCallback+0x1de>
						- encoderFront.encoder_pos;
 80031b6:	4b2f      	ldr	r3, [pc, #188]	; (8003274 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80031b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fd f95a 	bl	8000474 <__aeabi_ui2d>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	a124      	add	r1, pc, #144	; (adr r1, 8003258 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80031c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031ca:	f7fd f815 	bl	80001f8 <__aeabi_dsub>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
 80031d2:	4610      	mov	r0, r2
 80031d4:	4619      	mov	r1, r3
 80031d6:	f7fd fc9f 	bl	8000b18 <__aeabi_d2uiz>
 80031da:	4603      	mov	r3, r0
 80031dc:	4a25      	ldr	r2, [pc, #148]	; (8003274 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80031de:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 80031e0:	4b24      	ldr	r3, [pc, #144]	; (8003274 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 80031e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e4:	ee07 3a90 	vmov	s15, r3
 80031e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ec:	ee17 0a90 	vmov	r0, s15
 80031f0:	f7fd f962 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587 - 360;
 80031f4:	a318      	add	r3, pc, #96	; (adr r3, 8003258 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80031f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fa:	f7fd fadf 	bl	80007bc <__aeabi_ddiv>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4610      	mov	r0, r2
 8003204:	4619      	mov	r1, r3
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	4b1c      	ldr	r3, [pc, #112]	; (800327c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800320c:	f7fd f9ac 	bl	8000568 <__aeabi_dmul>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4610      	mov	r0, r2
 8003216:	4619      	mov	r1, r3
 8003218:	a30d      	add	r3, pc, #52	; (adr r3, 8003250 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 800321a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321e:	f7fc ffed 	bl	80001fc <__adddf3>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4610      	mov	r0, r2
 8003228:	4619      	mov	r1, r3
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	4b13      	ldr	r3, [pc, #76]	; (800327c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8003230:	f7fc ffe2 	bl	80001f8 <__aeabi_dsub>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4610      	mov	r0, r2
 800323a:	4619      	mov	r1, r3
 800323c:	f7fd fc8c 	bl	8000b58 <__aeabi_d2f>
 8003240:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8003242:	4a0c      	ldr	r2, [pc, #48]	; (8003274 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8003244:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003246:	bf00      	nop
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	d0e56042 	.word	0xd0e56042
 8003254:	40424b22 	.word	0x40424b22
 8003258:	9999999a 	.word	0x9999999a
 800325c:	40c19999 	.word	0x40c19999
 8003260:	20000370 	.word	0x20000370
 8003264:	200002f0 	.word	0x200002f0
 8003268:	20000414 	.word	0x20000414
 800326c:	46000000 	.word	0x46000000
 8003270:	43b40000 	.word	0x43b40000
 8003274:	200003c0 	.word	0x200003c0
 8003278:	e8bb8111 	.word	0xe8bb8111
 800327c:	40768000 	.word	0x40768000

08003280 <climbingForward>:
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = (int) baseWheelSpeed.cur_l + 1500;
}

//Move forward during climbing process
bool climbingForward(float dist)
{
 8003280:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003284:	b086      	sub	sp, #24
 8003286:	af00      	add	r7, sp, #0
 8003288:	ed87 0a01 	vstr	s0, [r7, #4]
	static int prev_tick = 0;
	static int32_t prev_enc;
	static bool first_loop = true;
	static float dist_remaining;

	float rps = (dist >= 0) ? 1.0 : -1.0; //rad/s
 800328c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003290:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003298:	db02      	blt.n	80032a0 <climbingForward+0x20>
 800329a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800329e:	e000      	b.n	80032a2 <climbingForward+0x22>
 80032a0:	4b65      	ldr	r3, [pc, #404]	; (8003438 <climbingForward+0x1b8>)
 80032a2:	617b      	str	r3, [r7, #20]

	if (first_loop)
 80032a4:	4b65      	ldr	r3, [pc, #404]	; (800343c <climbingForward+0x1bc>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00f      	beq.n	80032cc <climbingForward+0x4c>
	{
		prev_enc = hub_encoder_feedback.encoder_2;
 80032ac:	4b64      	ldr	r3, [pc, #400]	; (8003440 <climbingForward+0x1c0>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	4a64      	ldr	r2, [pc, #400]	; (8003444 <climbingForward+0x1c4>)
 80032b2:	6013      	str	r3, [r2, #0]
		prev_tick = HAL_GetTick();
 80032b4:	f001 fb48 	bl	8004948 <HAL_GetTick>
 80032b8:	4603      	mov	r3, r0
 80032ba:	461a      	mov	r2, r3
 80032bc:	4b62      	ldr	r3, [pc, #392]	; (8003448 <climbingForward+0x1c8>)
 80032be:	601a      	str	r2, [r3, #0]
		first_loop = false;
 80032c0:	4b5e      	ldr	r3, [pc, #376]	; (800343c <climbingForward+0x1bc>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	701a      	strb	r2, [r3, #0]
		dist_remaining = dist;
 80032c6:	4a61      	ldr	r2, [pc, #388]	; (800344c <climbingForward+0x1cc>)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6013      	str	r3, [r2, #0]
	}
	if (dist / dist_remaining >= 0 && first_loop == false)
 80032cc:	4b5f      	ldr	r3, [pc, #380]	; (800344c <climbingForward+0x1cc>)
 80032ce:	ed93 7a00 	vldr	s14, [r3]
 80032d2:	edd7 6a01 	vldr	s13, [r7, #4]
 80032d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e2:	f2c0 8090 	blt.w	8003406 <climbingForward+0x186>
 80032e6:	4b55      	ldr	r3, [pc, #340]	; (800343c <climbingForward+0x1bc>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	f083 0301 	eor.w	r3, r3, #1
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 8088 	beq.w	8003406 <climbingForward+0x186>
	{
		send_HubMotor(rps, rps);
 80032f6:	edd7 0a05 	vldr	s1, [r7, #20]
 80032fa:	ed97 0a05 	vldr	s0, [r7, #20]
 80032fe:	f7fe f897 	bl	8001430 <send_HubMotor>
		if (HAL_GetTick() - prev_tick > 1)
 8003302:	f001 fb21 	bl	8004948 <HAL_GetTick>
 8003306:	4603      	mov	r3, r0
 8003308:	4a4f      	ldr	r2, [pc, #316]	; (8003448 <climbingForward+0x1c8>)
 800330a:	6812      	ldr	r2, [r2, #0]
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	2b01      	cmp	r3, #1
 8003310:	d977      	bls.n	8003402 <climbingForward+0x182>
		{
			float dt = (float) (HAL_GetTick() - prev_tick) / FREQUENCY;
 8003312:	f001 fb19 	bl	8004948 <HAL_GetTick>
 8003316:	4603      	mov	r3, r0
 8003318:	4a4b      	ldr	r2, [pc, #300]	; (8003448 <climbingForward+0x1c8>)
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	ee07 3a90 	vmov	s15, r3
 8003322:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003326:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8003450 <climbingForward+0x1d0>
 800332a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800332e:	edc7 7a04 	vstr	s15, [r7, #16]
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 8003332:	4b43      	ldr	r3, [pc, #268]	; (8003440 <climbingForward+0x1c0>)
 8003334:	685a      	ldr	r2, [r3, #4]
					- prev_enc) / dt) * 2 * M_PI / 4096;
 8003336:	4b43      	ldr	r3, [pc, #268]	; (8003444 <climbingForward+0x1c4>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	1ad3      	subs	r3, r2, r3
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 800333c:	ee07 3a90 	vmov	s15, r3
 8003340:	eef8 6ae7 	vcvt.f32.s32	s13, s15
					- prev_enc) / dt) * 2 * M_PI / 4096;
 8003344:	ed97 7a04 	vldr	s14, [r7, #16]
 8003348:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800334c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003350:	ee17 0a90 	vmov	r0, s15
 8003354:	f7fd f8b0 	bl	80004b8 <__aeabi_f2d>
 8003358:	a333      	add	r3, pc, #204	; (adr r3, 8003428 <climbingForward+0x1a8>)
 800335a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335e:	f7fd f903 	bl	8000568 <__aeabi_dmul>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4610      	mov	r0, r2
 8003368:	4619      	mov	r1, r3
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	4b39      	ldr	r3, [pc, #228]	; (8003454 <climbingForward+0x1d4>)
 8003370:	f7fd fa24 	bl	80007bc <__aeabi_ddiv>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 8003378:	4610      	mov	r0, r2
 800337a:	4619      	mov	r1, r3
 800337c:	f7fd fbec 	bl	8000b58 <__aeabi_d2f>
 8003380:	4603      	mov	r3, r0
 8003382:	60fb      	str	r3, [r7, #12]
			dist_remaining -= (HUB_DIAMETER * rad_per_s * dt) / 2;
 8003384:	4b31      	ldr	r3, [pc, #196]	; (800344c <climbingForward+0x1cc>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f7fd f895 	bl	80004b8 <__aeabi_f2d>
 800338e:	4604      	mov	r4, r0
 8003390:	460d      	mov	r5, r1
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f7fd f890 	bl	80004b8 <__aeabi_f2d>
 8003398:	a325      	add	r3, pc, #148	; (adr r3, 8003430 <climbingForward+0x1b0>)
 800339a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339e:	f7fd f8e3 	bl	8000568 <__aeabi_dmul>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4690      	mov	r8, r2
 80033a8:	4699      	mov	r9, r3
 80033aa:	6938      	ldr	r0, [r7, #16]
 80033ac:	f7fd f884 	bl	80004b8 <__aeabi_f2d>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4640      	mov	r0, r8
 80033b6:	4649      	mov	r1, r9
 80033b8:	f7fd f8d6 	bl	8000568 <__aeabi_dmul>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4610      	mov	r0, r2
 80033c2:	4619      	mov	r1, r3
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033cc:	f7fd f9f6 	bl	80007bc <__aeabi_ddiv>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4620      	mov	r0, r4
 80033d6:	4629      	mov	r1, r5
 80033d8:	f7fc ff0e 	bl	80001f8 <__aeabi_dsub>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4610      	mov	r0, r2
 80033e2:	4619      	mov	r1, r3
 80033e4:	f7fd fbb8 	bl	8000b58 <__aeabi_d2f>
 80033e8:	4603      	mov	r3, r0
 80033ea:	4a18      	ldr	r2, [pc, #96]	; (800344c <climbingForward+0x1cc>)
 80033ec:	6013      	str	r3, [r2, #0]
			prev_tick = HAL_GetTick();
 80033ee:	f001 faab 	bl	8004948 <HAL_GetTick>
 80033f2:	4603      	mov	r3, r0
 80033f4:	461a      	mov	r2, r3
 80033f6:	4b14      	ldr	r3, [pc, #80]	; (8003448 <climbingForward+0x1c8>)
 80033f8:	601a      	str	r2, [r3, #0]
			prev_enc = hub_encoder_feedback.encoder_2;
 80033fa:	4b11      	ldr	r3, [pc, #68]	; (8003440 <climbingForward+0x1c0>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	4a11      	ldr	r2, [pc, #68]	; (8003444 <climbingForward+0x1c4>)
 8003400:	6013      	str	r3, [r2, #0]
		}
		return true;
 8003402:	2301      	movs	r3, #1
 8003404:	e009      	b.n	800341a <climbingForward+0x19a>
	}
	else
	{
		first_loop = true;
 8003406:	4b0d      	ldr	r3, [pc, #52]	; (800343c <climbingForward+0x1bc>)
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]
		send_HubMotor(0, 0);
 800340c:	eddf 0a12 	vldr	s1, [pc, #72]	; 8003458 <climbingForward+0x1d8>
 8003410:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8003458 <climbingForward+0x1d8>
 8003414:	f7fe f80c 	bl	8001430 <send_HubMotor>
		return false;
 8003418:	2300      	movs	r3, #0
	}
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003424:	f3af 8000 	nop.w
 8003428:	54442d18 	.word	0x54442d18
 800342c:	400921fb 	.word	0x400921fb
 8003430:	916872b0 	.word	0x916872b0
 8003434:	3fbf7ced 	.word	0x3fbf7ced
 8003438:	bf800000 	.word	0xbf800000
 800343c:	20000168 	.word	0x20000168
 8003440:	200004c4 	.word	0x200004c4
 8003444:	2000030c 	.word	0x2000030c
 8003448:	20000310 	.word	0x20000310
 800344c:	20000314 	.word	0x20000314
 8003450:	447a0000 	.word	0x447a0000
 8003454:	40b00000 	.word	0x40b00000
	...

08003460 <goto_pos>:

bool goto_pos(int enc, PID_t pid_t)
{
 8003460:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003464:	b084      	sub	sp, #16
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	6039      	str	r1, [r7, #0]
//	&& encoderFront.encoder_pos >= MIN_FRONT_ALLOWABLE_ENC 	&& cur_enc_pos <= MAX_FRONT_ALLOWABLE_ENC
	int cur_enc_pos;

	if (pid_t == frontClimb_pid)
 800346c:	4b7a      	ldr	r3, [pc, #488]	; (8003658 <goto_pos+0x1f8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d17c      	bne.n	8003570 <goto_pos+0x110>
	{
		cur_enc_pos = (int) encoderFront.encoder_pos;
 8003476:	4b79      	ldr	r3, [pc, #484]	; (800365c <goto_pos+0x1fc>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	60fb      	str	r3, [r7, #12]
		if (pid_need_compute(frontClimb_pid) && fabs(enc - cur_enc_pos) > 10
 800347c:	4b76      	ldr	r3, [pc, #472]	; (8003658 <goto_pos+0x1f8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f7fd fd77 	bl	8000f74 <pid_need_compute>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d06b      	beq.n	8003564 <goto_pos+0x104>
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	4618      	mov	r0, r3
 8003494:	f7fc fffe 	bl	8000494 <__aeabi_i2d>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4690      	mov	r8, r2
 800349e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	4b6e      	ldr	r3, [pc, #440]	; (8003660 <goto_pos+0x200>)
 80034a8:	4640      	mov	r0, r8
 80034aa:	4649      	mov	r1, r9
 80034ac:	f7fd faec 	bl	8000a88 <__aeabi_dcmpgt>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d056      	beq.n	8003564 <goto_pos+0x104>
				&& ((encoderFront.encoder_pos >= 0 && encoderFront.encoder_pos < MAX_FRONT_ALLOWABLE_ENC)
 80034b6:	4b69      	ldr	r3, [pc, #420]	; (800365c <goto_pos+0x1fc>)
 80034b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ba:	f640 421c 	movw	r2, #3100	; 0xc1c
 80034be:	4293      	cmp	r3, r2
 80034c0:	d30b      	bcc.n	80034da <goto_pos+0x7a>
						|| (encoderFront.encoder_pos > MIN_FRONT_ALLOWABLE_ENC && encoderFront.encoder_pos <= 4096 * FRONT_GEAR_RATIO)))
 80034c2:	4b66      	ldr	r3, [pc, #408]	; (800365c <goto_pos+0x1fc>)
 80034c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c6:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d94a      	bls.n	8003564 <goto_pos+0x104>
 80034ce:	4b63      	ldr	r3, [pc, #396]	; (800365c <goto_pos+0x1fc>)
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	f242 3233 	movw	r2, #9011	; 0x2333
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d844      	bhi.n	8003564 <goto_pos+0x104>
		{
			// Read process feedback
			if (cur_enc_pos > MAX_FRONT_ALLOWABLE_ENC)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f640 421c 	movw	r2, #3100	; 0xc1c
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d90f      	bls.n	8003504 <goto_pos+0xa4>
				cur_enc_pos -= 4096 * FRONT_GEAR_RATIO;
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f7fc ffd5 	bl	8000494 <__aeabi_i2d>
 80034ea:	a359      	add	r3, pc, #356	; (adr r3, 8003650 <goto_pos+0x1f0>)
 80034ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f0:	f7fc fe82 	bl	80001f8 <__aeabi_dsub>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4610      	mov	r0, r2
 80034fa:	4619      	mov	r1, r3
 80034fc:	f7fd fae4 	bl	8000ac8 <__aeabi_d2iz>
 8003500:	4603      	mov	r3, r0
 8003502:	60fb      	str	r3, [r7, #12]
			if (enc >= MAX_FRONT_ALLOWABLE_ENC)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f640 421c 	movw	r2, #3100	; 0xc1c
 800350a:	4293      	cmp	r3, r2
 800350c:	d30f      	bcc.n	800352e <goto_pos+0xce>
				enc -= 4096 * FRONT_GEAR_RATIO;
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7fc ffc0 	bl	8000494 <__aeabi_i2d>
 8003514:	a34e      	add	r3, pc, #312	; (adr r3, 8003650 <goto_pos+0x1f0>)
 8003516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351a:	f7fc fe6d 	bl	80001f8 <__aeabi_dsub>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4610      	mov	r0, r2
 8003524:	4619      	mov	r1, r3
 8003526:	f7fd facf 	bl	8000ac8 <__aeabi_d2iz>
 800352a:	4603      	mov	r3, r0
 800352c:	607b      	str	r3, [r7, #4]
			frontClimb_setpoint = enc;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	ee07 3a90 	vmov	s15, r3
 8003534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003538:	4b4a      	ldr	r3, [pc, #296]	; (8003664 <goto_pos+0x204>)
 800353a:	edc3 7a00 	vstr	s15, [r3]
			frontClimb_input = cur_enc_pos;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	ee07 3a90 	vmov	s15, r3
 8003544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003548:	4b47      	ldr	r3, [pc, #284]	; (8003668 <goto_pos+0x208>)
 800354a:	edc3 7a00 	vstr	s15, [r3]
			// Compute new PID output value
			pid_compute(frontClimb_pid);
 800354e:	4b42      	ldr	r3, [pc, #264]	; (8003658 <goto_pos+0x1f8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f7fd fd23 	bl	8000f9e <pid_compute>
			//Change actuator value
			speed[FRONT_INDEX] = frontClimb_output;
 8003558:	4b44      	ldr	r3, [pc, #272]	; (800366c <goto_pos+0x20c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a44      	ldr	r2, [pc, #272]	; (8003670 <goto_pos+0x210>)
 800355e:	6013      	str	r3, [r2, #0]
			return true;
 8003560:	2301      	movs	r3, #1
 8003562:	e06f      	b.n	8003644 <goto_pos+0x1e4>

		}
		else
		{
			speed[FRONT_INDEX] = 0;
 8003564:	4b42      	ldr	r3, [pc, #264]	; (8003670 <goto_pos+0x210>)
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
			return false;
 800356c:	2300      	movs	r3, #0
 800356e:	e069      	b.n	8003644 <goto_pos+0x1e4>
		}
	}
	else if (pid_t == backClimb_pid)
 8003570:	4b40      	ldr	r3, [pc, #256]	; (8003674 <goto_pos+0x214>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d163      	bne.n	8003642 <goto_pos+0x1e2>
	{
		cur_enc_pos = (int) encoderBack.encoder_pos;
 800357a:	4b3f      	ldr	r3, [pc, #252]	; (8003678 <goto_pos+0x218>)
 800357c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357e:	60fb      	str	r3, [r7, #12]
		if (pid_need_compute(backClimb_pid) && fabs(enc - cur_enc_pos) > 10
 8003580:	4b3c      	ldr	r3, [pc, #240]	; (8003674 <goto_pos+0x214>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f7fd fcf5 	bl	8000f74 <pid_need_compute>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d052      	beq.n	8003636 <goto_pos+0x1d6>
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	4618      	mov	r0, r3
 8003598:	f7fc ff7c 	bl	8000494 <__aeabi_i2d>
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	4614      	mov	r4, r2
 80035a2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	4b2d      	ldr	r3, [pc, #180]	; (8003660 <goto_pos+0x200>)
 80035ac:	4620      	mov	r0, r4
 80035ae:	4629      	mov	r1, r5
 80035b0:	f7fd fa6a 	bl	8000a88 <__aeabi_dcmpgt>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d03d      	beq.n	8003636 <goto_pos+0x1d6>
				&& ((encoderBack.encoder_pos >= 0 && encoderBack.encoder_pos < MAX_BACK_ALLOWABLE_ENC)
 80035ba:	4b2f      	ldr	r3, [pc, #188]	; (8003678 <goto_pos+0x218>)
 80035bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035be:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d30a      	bcc.n	80035dc <goto_pos+0x17c>
						|| (encoderBack.encoder_pos > MIN_BACK_ALLOWABLE_ENC && encoderBack.encoder_pos <= 4096 * BACK_GEAR_RATIO)))
 80035c6:	4b2c      	ldr	r3, [pc, #176]	; (8003678 <goto_pos+0x218>)
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d931      	bls.n	8003636 <goto_pos+0x1d6>
 80035d2:	4b29      	ldr	r3, [pc, #164]	; (8003678 <goto_pos+0x218>)
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035da:	d82c      	bhi.n	8003636 <goto_pos+0x1d6>
		{
			// Read process feedback
			if (cur_enc_pos > MAX_BACK_ALLOWABLE_ENC)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d903      	bls.n	80035ee <goto_pos+0x18e>
				cur_enc_pos -= 4096 * BACK_GEAR_RATIO;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80035ec:	60fb      	str	r3, [r7, #12]
			if (enc >= MAX_BACK_ALLOWABLE_ENC)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d303      	bcc.n	8003600 <goto_pos+0x1a0>
				enc -= 4096 * BACK_GEAR_RATIO;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80035fe:	607b      	str	r3, [r7, #4]
			backClimb_setpoint = enc;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	ee07 3a90 	vmov	s15, r3
 8003606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800360a:	4b1c      	ldr	r3, [pc, #112]	; (800367c <goto_pos+0x21c>)
 800360c:	edc3 7a00 	vstr	s15, [r3]
			backClimb_input = cur_enc_pos;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	ee07 3a90 	vmov	s15, r3
 8003616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800361a:	4b19      	ldr	r3, [pc, #100]	; (8003680 <goto_pos+0x220>)
 800361c:	edc3 7a00 	vstr	s15, [r3]
			// Compute new PID output value
			pid_compute(backClimb_pid);
 8003620:	4b14      	ldr	r3, [pc, #80]	; (8003674 <goto_pos+0x214>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f7fd fcba 	bl	8000f9e <pid_compute>
			//Change actuator value
			speed[BACK_INDEX] = backClimb_output;
 800362a:	4b16      	ldr	r3, [pc, #88]	; (8003684 <goto_pos+0x224>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a10      	ldr	r2, [pc, #64]	; (8003670 <goto_pos+0x210>)
 8003630:	6053      	str	r3, [r2, #4]
			return true;
 8003632:	2301      	movs	r3, #1
 8003634:	e006      	b.n	8003644 <goto_pos+0x1e4>
		}
		else
		{
			speed[BACK_INDEX] = 0;
 8003636:	4b0e      	ldr	r3, [pc, #56]	; (8003670 <goto_pos+0x210>)
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	605a      	str	r2, [r3, #4]
			return false;
 800363e:	2300      	movs	r3, #0
 8003640:	e000      	b.n	8003644 <goto_pos+0x1e4>
		}
	}
	return false;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800364e:	bf00      	nop
 8003650:	9999999a 	.word	0x9999999a
 8003654:	40c19999 	.word	0x40c19999
 8003658:	20000574 	.word	0x20000574
 800365c:	200003c0 	.word	0x200003c0
 8003660:	40240000 	.word	0x40240000
 8003664:	200002c0 	.word	0x200002c0
 8003668:	200002b8 	.word	0x200002b8
 800366c:	200002bc 	.word	0x200002bc
 8003670:	200002a8 	.word	0x200002a8
 8003674:	200005c8 	.word	0x200005c8
 8003678:	20000414 	.word	0x20000414
 800367c:	200002cc 	.word	0x200002cc
 8003680:	200002c4 	.word	0x200002c4
 8003684:	200002c8 	.word	0x200002c8

08003688 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800368c:	bf00      	nop
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af04      	add	r7, sp, #16
 80036b2:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80036b4:	2364      	movs	r3, #100	; 0x64
 80036b6:	9302      	str	r3, [sp, #8]
 80036b8:	2301      	movs	r3, #1
 80036ba:	9301      	str	r3, [sp, #4]
 80036bc:	f107 030f 	add.w	r3, r7, #15
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	2301      	movs	r3, #1
 80036c4:	2275      	movs	r2, #117	; 0x75
 80036c6:	21d0      	movs	r1, #208	; 0xd0
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f003 fe81 	bl	80073d0 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
 80036d0:	2b68      	cmp	r3, #104	; 0x68
 80036d2:	d13d      	bne.n	8003750 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80036d4:	2300      	movs	r3, #0
 80036d6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80036d8:	2364      	movs	r3, #100	; 0x64
 80036da:	9302      	str	r3, [sp, #8]
 80036dc:	2301      	movs	r3, #1
 80036de:	9301      	str	r3, [sp, #4]
 80036e0:	f107 030e 	add.w	r3, r7, #14
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	2301      	movs	r3, #1
 80036e8:	226b      	movs	r2, #107	; 0x6b
 80036ea:	21d0      	movs	r1, #208	; 0xd0
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f003 fd69 	bl	80071c4 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80036f2:	2307      	movs	r3, #7
 80036f4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80036f6:	2364      	movs	r3, #100	; 0x64
 80036f8:	9302      	str	r3, [sp, #8]
 80036fa:	2301      	movs	r3, #1
 80036fc:	9301      	str	r3, [sp, #4]
 80036fe:	f107 030e 	add.w	r3, r7, #14
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	2301      	movs	r3, #1
 8003706:	2219      	movs	r2, #25
 8003708:	21d0      	movs	r1, #208	; 0xd0
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f003 fd5a 	bl	80071c4 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8003710:	2300      	movs	r3, #0
 8003712:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8003714:	2364      	movs	r3, #100	; 0x64
 8003716:	9302      	str	r3, [sp, #8]
 8003718:	2301      	movs	r3, #1
 800371a:	9301      	str	r3, [sp, #4]
 800371c:	f107 030e 	add.w	r3, r7, #14
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	2301      	movs	r3, #1
 8003724:	221c      	movs	r2, #28
 8003726:	21d0      	movs	r1, #208	; 0xd0
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f003 fd4b 	bl	80071c4 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800372e:	2300      	movs	r3, #0
 8003730:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8003732:	2364      	movs	r3, #100	; 0x64
 8003734:	9302      	str	r3, [sp, #8]
 8003736:	2301      	movs	r3, #1
 8003738:	9301      	str	r3, [sp, #4]
 800373a:	f107 030e 	add.w	r3, r7, #14
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	2301      	movs	r3, #1
 8003742:	221b      	movs	r2, #27
 8003744:	21d0      	movs	r1, #208	; 0xd0
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f003 fd3c 	bl	80071c4 <HAL_I2C_Mem_Write>
        return 0;
 800374c:	2300      	movs	r3, #0
 800374e:	e000      	b.n	8003752 <MPU6050_Init+0xa6>
    }
    return 1;
 8003750:	2301      	movs	r3, #1
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	0000      	movs	r0, r0
 800375c:	0000      	movs	r0, r0
	...

08003760 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8003760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003764:	b094      	sub	sp, #80	; 0x50
 8003766:	af04      	add	r7, sp, #16
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800376c:	2364      	movs	r3, #100	; 0x64
 800376e:	9302      	str	r3, [sp, #8]
 8003770:	230e      	movs	r3, #14
 8003772:	9301      	str	r3, [sp, #4]
 8003774:	f107 0308 	add.w	r3, r7, #8
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	2301      	movs	r3, #1
 800377c:	223b      	movs	r2, #59	; 0x3b
 800377e:	21d0      	movs	r1, #208	; 0xd0
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f003 fe25 	bl	80073d0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8003786:	7a3b      	ldrb	r3, [r7, #8]
 8003788:	021b      	lsls	r3, r3, #8
 800378a:	b21a      	sxth	r2, r3
 800378c:	7a7b      	ldrb	r3, [r7, #9]
 800378e:	b21b      	sxth	r3, r3
 8003790:	4313      	orrs	r3, r2
 8003792:	b21a      	sxth	r2, r3
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8003798:	7abb      	ldrb	r3, [r7, #10]
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	b21a      	sxth	r2, r3
 800379e:	7afb      	ldrb	r3, [r7, #11]
 80037a0:	b21b      	sxth	r3, r3
 80037a2:	4313      	orrs	r3, r2
 80037a4:	b21a      	sxth	r2, r3
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80037aa:	7b3b      	ldrb	r3, [r7, #12]
 80037ac:	021b      	lsls	r3, r3, #8
 80037ae:	b21a      	sxth	r2, r3
 80037b0:	7b7b      	ldrb	r3, [r7, #13]
 80037b2:	b21b      	sxth	r3, r3
 80037b4:	4313      	orrs	r3, r2
 80037b6:	b21a      	sxth	r2, r3
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80037bc:	7bbb      	ldrb	r3, [r7, #14]
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	b21a      	sxth	r2, r3
 80037c2:	7bfb      	ldrb	r3, [r7, #15]
 80037c4:	b21b      	sxth	r3, r3
 80037c6:	4313      	orrs	r3, r2
 80037c8:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80037ca:	7c3b      	ldrb	r3, [r7, #16]
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	b21a      	sxth	r2, r3
 80037d0:	7c7b      	ldrb	r3, [r7, #17]
 80037d2:	b21b      	sxth	r3, r3
 80037d4:	4313      	orrs	r3, r2
 80037d6:	b21a      	sxth	r2, r3
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80037dc:	7cbb      	ldrb	r3, [r7, #18]
 80037de:	021b      	lsls	r3, r3, #8
 80037e0:	b21a      	sxth	r2, r3
 80037e2:	7cfb      	ldrb	r3, [r7, #19]
 80037e4:	b21b      	sxth	r3, r3
 80037e6:	4313      	orrs	r3, r2
 80037e8:	b21a      	sxth	r2, r3
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80037ee:	7d3b      	ldrb	r3, [r7, #20]
 80037f0:	021b      	lsls	r3, r3, #8
 80037f2:	b21a      	sxth	r2, r3
 80037f4:	7d7b      	ldrb	r3, [r7, #21]
 80037f6:	b21b      	sxth	r3, r3
 80037f8:	4313      	orrs	r3, r2
 80037fa:	b21a      	sxth	r2, r3
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003806:	4618      	mov	r0, r3
 8003808:	f7fc fe44 	bl	8000494 <__aeabi_i2d>
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	4bbd      	ldr	r3, [pc, #756]	; (8003b08 <MPU6050_Read_All+0x3a8>)
 8003812:	f7fc ffd3 	bl	80007bc <__aeabi_ddiv>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	6839      	ldr	r1, [r7, #0]
 800381c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fc fe34 	bl	8000494 <__aeabi_i2d>
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	4bb5      	ldr	r3, [pc, #724]	; (8003b08 <MPU6050_Read_All+0x3a8>)
 8003832:	f7fc ffc3 	bl	80007bc <__aeabi_ddiv>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	6839      	ldr	r1, [r7, #0]
 800383c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003846:	4618      	mov	r0, r3
 8003848:	f7fc fe24 	bl	8000494 <__aeabi_i2d>
 800384c:	a3a8      	add	r3, pc, #672	; (adr r3, 8003af0 <MPU6050_Read_All+0x390>)
 800384e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003852:	f7fc ffb3 	bl	80007bc <__aeabi_ddiv>
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	6839      	ldr	r1, [r7, #0]
 800385c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8003860:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003864:	ee07 3a90 	vmov	s15, r3
 8003868:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800386c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8003b0c <MPU6050_Read_All+0x3ac>
 8003870:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003874:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8003b10 <MPU6050_Read_All+0x3b0>
 8003878:	ee77 7a87 	vadd.f32	s15, s15, s14
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003888:	4618      	mov	r0, r3
 800388a:	f7fc fe03 	bl	8000494 <__aeabi_i2d>
 800388e:	a39a      	add	r3, pc, #616	; (adr r3, 8003af8 <MPU6050_Read_All+0x398>)
 8003890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003894:	f7fc ff92 	bl	80007bc <__aeabi_ddiv>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	6839      	ldr	r1, [r7, #0]
 800389e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fc fdf3 	bl	8000494 <__aeabi_i2d>
 80038ae:	a392      	add	r3, pc, #584	; (adr r3, 8003af8 <MPU6050_Read_All+0x398>)
 80038b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b4:	f7fc ff82 	bl	80007bc <__aeabi_ddiv>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	6839      	ldr	r1, [r7, #0]
 80038be:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fc fde3 	bl	8000494 <__aeabi_i2d>
 80038ce:	a38a      	add	r3, pc, #552	; (adr r3, 8003af8 <MPU6050_Read_All+0x398>)
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	f7fc ff72 	bl	80007bc <__aeabi_ddiv>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	6839      	ldr	r1, [r7, #0]
 80038de:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 80038e2:	f001 f831 	bl	8004948 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	4b8a      	ldr	r3, [pc, #552]	; (8003b14 <MPU6050_Read_All+0x3b4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fc fdc0 	bl	8000474 <__aeabi_ui2d>
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	4b87      	ldr	r3, [pc, #540]	; (8003b18 <MPU6050_Read_All+0x3b8>)
 80038fa:	f7fc ff5f 	bl	80007bc <__aeabi_ddiv>
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8003906:	f001 f81f 	bl	8004948 <HAL_GetTick>
 800390a:	4603      	mov	r3, r0
 800390c:	4a81      	ldr	r2, [pc, #516]	; (8003b14 <MPU6050_Read_All+0x3b4>)
 800390e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003916:	461a      	mov	r2, r3
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800391e:	fb03 f202 	mul.w	r2, r3, r2
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003928:	4619      	mov	r1, r3
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003930:	fb03 f301 	mul.w	r3, r3, r1
 8003934:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8003936:	4618      	mov	r0, r3
 8003938:	f7fc fdac 	bl	8000494 <__aeabi_i2d>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	ec43 2b10 	vmov	d0, r2, r3
 8003944:	f009 fa48 	bl	800cdd8 <sqrt>
 8003948:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003958:	f7fd f86e 	bl	8000a38 <__aeabi_dcmpeq>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d11f      	bne.n	80039a2 <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003968:	4618      	mov	r0, r3
 800396a:	f7fc fd93 	bl	8000494 <__aeabi_i2d>
 800396e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003972:	f7fc ff23 	bl	80007bc <__aeabi_ddiv>
 8003976:	4602      	mov	r2, r0
 8003978:	460b      	mov	r3, r1
 800397a:	ec43 2b17 	vmov	d7, r2, r3
 800397e:	eeb0 0a47 	vmov.f32	s0, s14
 8003982:	eef0 0a67 	vmov.f32	s1, s15
 8003986:	f008 ff9b 	bl	800c8c0 <atan>
 800398a:	ec51 0b10 	vmov	r0, r1, d0
 800398e:	a35c      	add	r3, pc, #368	; (adr r3, 8003b00 <MPU6050_Read_All+0x3a0>)
 8003990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003994:	f7fc fde8 	bl	8000568 <__aeabi_dmul>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80039a0:	e005      	b.n	80039ae <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039b4:	425b      	negs	r3, r3
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fc fd6c 	bl	8000494 <__aeabi_i2d>
 80039bc:	4682      	mov	sl, r0
 80039be:	468b      	mov	fp, r1
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fc fd64 	bl	8000494 <__aeabi_i2d>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	ec43 2b11 	vmov	d1, r2, r3
 80039d4:	ec4b ab10 	vmov	d0, sl, fp
 80039d8:	f009 f9fc 	bl	800cdd4 <atan2>
 80039dc:	ec51 0b10 	vmov	r0, r1, d0
 80039e0:	a347      	add	r3, pc, #284	; (adr r3, 8003b00 <MPU6050_Read_All+0x3a0>)
 80039e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e6:	f7fc fdbf 	bl	8000568 <__aeabi_dmul>
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	4b49      	ldr	r3, [pc, #292]	; (8003b1c <MPU6050_Read_All+0x3bc>)
 80039f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80039fc:	f7fd f826 	bl	8000a4c <__aeabi_dcmplt>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <MPU6050_Read_All+0x2bc>
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	4b43      	ldr	r3, [pc, #268]	; (8003b20 <MPU6050_Read_All+0x3c0>)
 8003a12:	f7fd f839 	bl	8000a88 <__aeabi_dcmpgt>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d114      	bne.n	8003a46 <MPU6050_Read_All+0x2e6>
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	4b3f      	ldr	r3, [pc, #252]	; (8003b20 <MPU6050_Read_All+0x3c0>)
 8003a22:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003a26:	f7fd f82f 	bl	8000a88 <__aeabi_dcmpgt>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d015      	beq.n	8003a5c <MPU6050_Read_All+0x2fc>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	4b38      	ldr	r3, [pc, #224]	; (8003b1c <MPU6050_Read_All+0x3bc>)
 8003a3c:	f7fd f806 	bl	8000a4c <__aeabi_dcmplt>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 8003a46:	4937      	ldr	r1, [pc, #220]	; (8003b24 <MPU6050_Read_All+0x3c4>)
 8003a48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a4c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8003a50:	6839      	ldr	r1, [r7, #0]
 8003a52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a56:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8003a5a:	e014      	b.n	8003a86 <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8003a62:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8003a66:	eeb0 1a47 	vmov.f32	s2, s14
 8003a6a:	eef0 1a67 	vmov.f32	s3, s15
 8003a6e:	ed97 0b06 	vldr	d0, [r7, #24]
 8003a72:	482c      	ldr	r0, [pc, #176]	; (8003b24 <MPU6050_Read_All+0x3c4>)
 8003a74:	f000 f85a 	bl	8003b2c <Kalman_getAngle>
 8003a78:	eeb0 7a40 	vmov.f32	s14, s0
 8003a7c:	eef0 7a60 	vmov.f32	s15, s1
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003a8c:	4690      	mov	r8, r2
 8003a8e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	4b22      	ldr	r3, [pc, #136]	; (8003b20 <MPU6050_Read_All+0x3c0>)
 8003a98:	4640      	mov	r0, r8
 8003a9a:	4649      	mov	r1, r9
 8003a9c:	f7fc fff4 	bl	8000a88 <__aeabi_dcmpgt>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d008      	beq.n	8003ab8 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003aac:	4614      	mov	r4, r2
 8003aae:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8003abe:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8003ac2:	eeb0 1a47 	vmov.f32	s2, s14
 8003ac6:	eef0 1a67 	vmov.f32	s3, s15
 8003aca:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8003ace:	4816      	ldr	r0, [pc, #88]	; (8003b28 <MPU6050_Read_All+0x3c8>)
 8003ad0:	f000 f82c 	bl	8003b2c <Kalman_getAngle>
 8003ad4:	eeb0 7a40 	vmov.f32	s14, s0
 8003ad8:	eef0 7a60 	vmov.f32	s15, s1
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 8003ae2:	bf00      	nop
 8003ae4:	3740      	adds	r7, #64	; 0x40
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aec:	f3af 8000 	nop.w
 8003af0:	00000000 	.word	0x00000000
 8003af4:	40cc2900 	.word	0x40cc2900
 8003af8:	00000000 	.word	0x00000000
 8003afc:	40606000 	.word	0x40606000
 8003b00:	1a63c1f8 	.word	0x1a63c1f8
 8003b04:	404ca5dc 	.word	0x404ca5dc
 8003b08:	40d00000 	.word	0x40d00000
 8003b0c:	43aa0000 	.word	0x43aa0000
 8003b10:	42121eb8 	.word	0x42121eb8
 8003b14:	200005cc 	.word	0x200005cc
 8003b18:	408f4000 	.word	0x408f4000
 8003b1c:	c0568000 	.word	0xc0568000
 8003b20:	40568000 	.word	0x40568000
 8003b24:	200001b8 	.word	0x200001b8
 8003b28:	20000170 	.word	0x20000170

08003b2c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8003b2c:	b5b0      	push	{r4, r5, r7, lr}
 8003b2e:	b096      	sub	sp, #88	; 0x58
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	61f8      	str	r0, [r7, #28]
 8003b34:	ed87 0b04 	vstr	d0, [r7, #16]
 8003b38:	ed87 1b02 	vstr	d1, [r7, #8]
 8003b3c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003b46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b4a:	f7fc fb55 	bl	80001f8 <__aeabi_dsub>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003b5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b64:	f7fc fd00 	bl	8000568 <__aeabi_dmul>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	4629      	mov	r1, r5
 8003b70:	f7fc fb44 	bl	80001fc <__adddf3>
 8003b74:	4602      	mov	r2, r0
 8003b76:	460b      	mov	r3, r1
 8003b78:	69f9      	ldr	r1, [r7, #28]
 8003b7a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003b8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b8e:	f7fc fceb 	bl	8000568 <__aeabi_dmul>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	4610      	mov	r0, r2
 8003b98:	4619      	mov	r1, r3
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003ba0:	f7fc fb2a 	bl	80001f8 <__aeabi_dsub>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4610      	mov	r0, r2
 8003baa:	4619      	mov	r1, r3
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003bb2:	f7fc fb21 	bl	80001f8 <__aeabi_dsub>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4610      	mov	r0, r2
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc4:	f7fc fb1a 	bl	80001fc <__adddf3>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4610      	mov	r0, r2
 8003bce:	4619      	mov	r1, r3
 8003bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bd4:	f7fc fcc8 	bl	8000568 <__aeabi_dmul>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4620      	mov	r0, r4
 8003bde:	4629      	mov	r1, r5
 8003be0:	f7fc fb0c 	bl	80001fc <__adddf3>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	69f9      	ldr	r1, [r7, #28]
 8003bea:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003bfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bfe:	f7fc fcb3 	bl	8000568 <__aeabi_dmul>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	4620      	mov	r0, r4
 8003c08:	4629      	mov	r1, r5
 8003c0a:	f7fc faf5 	bl	80001f8 <__aeabi_dsub>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	69f9      	ldr	r1, [r7, #28]
 8003c14:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8003c24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c28:	f7fc fc9e 	bl	8000568 <__aeabi_dmul>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4620      	mov	r0, r4
 8003c32:	4629      	mov	r1, r5
 8003c34:	f7fc fae0 	bl	80001f8 <__aeabi_dsub>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	69f9      	ldr	r1, [r7, #28]
 8003c3e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003c4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c52:	f7fc fc89 	bl	8000568 <__aeabi_dmul>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	4629      	mov	r1, r5
 8003c5e:	f7fc facd 	bl	80001fc <__adddf3>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	69f9      	ldr	r1, [r7, #28]
 8003c68:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003c78:	f7fc fac0 	bl	80001fc <__adddf3>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003c8a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c8e:	f7fc fd95 	bl	80007bc <__aeabi_ddiv>
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003ca0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ca4:	f7fc fd8a 	bl	80007bc <__aeabi_ddiv>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003cb6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003cba:	f7fc fa9d 	bl	80001f8 <__aeabi_dsub>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003ccc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003cd0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cd4:	f7fc fc48 	bl	8000568 <__aeabi_dmul>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4620      	mov	r0, r4
 8003cde:	4629      	mov	r1, r5
 8003ce0:	f7fc fa8c 	bl	80001fc <__adddf3>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	69f9      	ldr	r1, [r7, #28]
 8003cea:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003cf4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003cf8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cfc:	f7fc fc34 	bl	8000568 <__aeabi_dmul>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4620      	mov	r0, r4
 8003d06:	4629      	mov	r1, r5
 8003d08:	f7fc fa78 	bl	80001fc <__adddf3>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	69f9      	ldr	r1, [r7, #28]
 8003d12:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003d1c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003d26:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003d30:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003d34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d38:	f7fc fc16 	bl	8000568 <__aeabi_dmul>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4620      	mov	r0, r4
 8003d42:	4629      	mov	r1, r5
 8003d44:	f7fc fa58 	bl	80001f8 <__aeabi_dsub>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	69f9      	ldr	r1, [r7, #28]
 8003d4e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003d58:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003d5c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d60:	f7fc fc02 	bl	8000568 <__aeabi_dmul>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4620      	mov	r0, r4
 8003d6a:	4629      	mov	r1, r5
 8003d6c:	f7fc fa44 	bl	80001f8 <__aeabi_dsub>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	69f9      	ldr	r1, [r7, #28]
 8003d76:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003d80:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003d84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d88:	f7fc fbee 	bl	8000568 <__aeabi_dmul>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4620      	mov	r0, r4
 8003d92:	4629      	mov	r1, r5
 8003d94:	f7fc fa30 	bl	80001f8 <__aeabi_dsub>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	69f9      	ldr	r1, [r7, #28]
 8003d9e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003da8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003dac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003db0:	f7fc fbda 	bl	8000568 <__aeabi_dmul>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4620      	mov	r0, r4
 8003dba:	4629      	mov	r1, r5
 8003dbc:	f7fc fa1c 	bl	80001f8 <__aeabi_dsub>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	69f9      	ldr	r1, [r7, #28]
 8003dc6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003dd0:	ec43 2b17 	vmov	d7, r2, r3
};
 8003dd4:	eeb0 0a47 	vmov.f32	s0, s14
 8003dd8:	eef0 0a67 	vmov.f32	s1, s15
 8003ddc:	3758      	adds	r7, #88	; 0x58
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003de4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003de8:	4b18      	ldr	r3, [pc, #96]	; (8003e4c <MX_SPI1_Init+0x68>)
 8003dea:	4a19      	ldr	r2, [pc, #100]	; (8003e50 <MX_SPI1_Init+0x6c>)
 8003dec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003dee:	4b17      	ldr	r3, [pc, #92]	; (8003e4c <MX_SPI1_Init+0x68>)
 8003df0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003df4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8003df6:	4b15      	ldr	r3, [pc, #84]	; (8003e4c <MX_SPI1_Init+0x68>)
 8003df8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dfc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003dfe:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <MX_SPI1_Init+0x68>)
 8003e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003e06:	4b11      	ldr	r3, [pc, #68]	; (8003e4c <MX_SPI1_Init+0x68>)
 8003e08:	2202      	movs	r2, #2
 8003e0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e0c:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <MX_SPI1_Init+0x68>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003e12:	4b0e      	ldr	r3, [pc, #56]	; (8003e4c <MX_SPI1_Init+0x68>)
 8003e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003e1a:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <MX_SPI1_Init+0x68>)
 8003e1c:	2228      	movs	r2, #40	; 0x28
 8003e1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e20:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <MX_SPI1_Init+0x68>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <MX_SPI1_Init+0x68>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e2c:	4b07      	ldr	r3, [pc, #28]	; (8003e4c <MX_SPI1_Init+0x68>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003e32:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <MX_SPI1_Init+0x68>)
 8003e34:	220a      	movs	r2, #10
 8003e36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003e38:	4804      	ldr	r0, [pc, #16]	; (8003e4c <MX_SPI1_Init+0x68>)
 8003e3a:	f004 ff41 	bl	8008cc0 <HAL_SPI_Init>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8003e44:	f7ff fc20 	bl	8003688 <Error_Handler>
  }

}
 8003e48:	bf00      	nop
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	20000318 	.word	0x20000318
 8003e50:	40013000 	.word	0x40013000

08003e54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08a      	sub	sp, #40	; 0x28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e5c:	f107 0314 	add.w	r3, r7, #20
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	605a      	str	r2, [r3, #4]
 8003e66:	609a      	str	r2, [r3, #8]
 8003e68:	60da      	str	r2, [r3, #12]
 8003e6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a19      	ldr	r2, [pc, #100]	; (8003ed8 <HAL_SPI_MspInit+0x84>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d12b      	bne.n	8003ece <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e76:	2300      	movs	r3, #0
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	4b18      	ldr	r3, [pc, #96]	; (8003edc <HAL_SPI_MspInit+0x88>)
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	4a17      	ldr	r2, [pc, #92]	; (8003edc <HAL_SPI_MspInit+0x88>)
 8003e80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e84:	6453      	str	r3, [r2, #68]	; 0x44
 8003e86:	4b15      	ldr	r3, [pc, #84]	; (8003edc <HAL_SPI_MspInit+0x88>)
 8003e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e92:	2300      	movs	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	4b11      	ldr	r3, [pc, #68]	; (8003edc <HAL_SPI_MspInit+0x88>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	4a10      	ldr	r2, [pc, #64]	; (8003edc <HAL_SPI_MspInit+0x88>)
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea2:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <HAL_SPI_MspInit+0x88>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 8003eae:	2360      	movs	r3, #96	; 0x60
 8003eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ebe:	2305      	movs	r3, #5
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ec2:	f107 0314 	add.w	r3, r7, #20
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4805      	ldr	r0, [pc, #20]	; (8003ee0 <HAL_SPI_MspInit+0x8c>)
 8003eca:	f002 fc13 	bl	80066f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003ece:	bf00      	nop
 8003ed0:	3728      	adds	r7, #40	; 0x28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40013000 	.word	0x40013000
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	40020000 	.word	0x40020000

08003ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eea:	2300      	movs	r3, #0
 8003eec:	607b      	str	r3, [r7, #4]
 8003eee:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <HAL_MspInit+0x4c>)
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef2:	4a0f      	ldr	r2, [pc, #60]	; (8003f30 <HAL_MspInit+0x4c>)
 8003ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8003efa:	4b0d      	ldr	r3, [pc, #52]	; (8003f30 <HAL_MspInit+0x4c>)
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f02:	607b      	str	r3, [r7, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f06:	2300      	movs	r3, #0
 8003f08:	603b      	str	r3, [r7, #0]
 8003f0a:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <HAL_MspInit+0x4c>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	4a08      	ldr	r2, [pc, #32]	; (8003f30 <HAL_MspInit+0x4c>)
 8003f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f14:	6413      	str	r3, [r2, #64]	; 0x40
 8003f16:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <HAL_MspInit+0x4c>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40023800 	.word	0x40023800

08003f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003f38:	bf00      	nop
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f42:	b480      	push	{r7}
 8003f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f46:	e7fe      	b.n	8003f46 <HardFault_Handler+0x4>

08003f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f4c:	e7fe      	b.n	8003f4c <MemManage_Handler+0x4>

08003f4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f52:	e7fe      	b.n	8003f52 <BusFault_Handler+0x4>

08003f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f58:	e7fe      	b.n	8003f58 <UsageFault_Handler+0x4>

08003f5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f5e:	bf00      	nop
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f6c:	bf00      	nop
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f76:	b480      	push	{r7}
 8003f78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f7a:	bf00      	nop
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f88:	f000 fcca 	bl	8004920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f8c:	bf00      	nop
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003f94:	4802      	ldr	r0, [pc, #8]	; (8003fa0 <DMA1_Stream1_IRQHandler+0x10>)
 8003f96:	f002 f943 	bl	8006220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003f9a:	bf00      	nop
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	200006d0 	.word	0x200006d0

08003fa4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003fa8:	4802      	ldr	r0, [pc, #8]	; (8003fb4 <CAN1_RX0_IRQHandler+0x10>)
 8003faa:	f001 fb1f 	bl	80055ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003fae:	bf00      	nop
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000370 	.word	0x20000370

08003fb8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003fbc:	2080      	movs	r0, #128	; 0x80
 8003fbe:	f002 ff1d 	bl	8006dfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003fc2:	bf00      	nop
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fcc:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <SystemInit+0x28>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd2:	4a07      	ldr	r2, [pc, #28]	; (8003ff0 <SystemInit+0x28>)
 8003fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003fdc:	4b04      	ldr	r3, [pc, #16]	; (8003ff0 <SystemInit+0x28>)
 8003fde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003fe2:	609a      	str	r2, [r3, #8]
#endif
}
 8003fe4:	bf00      	nop
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	e000ed00 	.word	0xe000ed00

08003ff4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b096      	sub	sp, #88	; 0x58
 8003ff8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ffa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	605a      	str	r2, [r3, #4]
 8004004:	609a      	str	r2, [r3, #8]
 8004006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004008:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	605a      	str	r2, [r3, #4]
 800401c:	609a      	str	r2, [r3, #8]
 800401e:	60da      	str	r2, [r3, #12]
 8004020:	611a      	str	r2, [r3, #16]
 8004022:	615a      	str	r2, [r3, #20]
 8004024:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004026:	1d3b      	adds	r3, r7, #4
 8004028:	2220      	movs	r2, #32
 800402a:	2100      	movs	r1, #0
 800402c:	4618      	mov	r0, r3
 800402e:	f008 fc3f 	bl	800c8b0 <memset>

  htim1.Instance = TIM1;
 8004032:	4b3e      	ldr	r3, [pc, #248]	; (800412c <MX_TIM1_Init+0x138>)
 8004034:	4a3e      	ldr	r2, [pc, #248]	; (8004130 <MX_TIM1_Init+0x13c>)
 8004036:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8004038:	4b3c      	ldr	r3, [pc, #240]	; (800412c <MX_TIM1_Init+0x138>)
 800403a:	22b3      	movs	r2, #179	; 0xb3
 800403c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800403e:	4b3b      	ldr	r3, [pc, #236]	; (800412c <MX_TIM1_Init+0x138>)
 8004040:	2200      	movs	r2, #0
 8004042:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8004044:	4b39      	ldr	r3, [pc, #228]	; (800412c <MX_TIM1_Init+0x138>)
 8004046:	2263      	movs	r2, #99	; 0x63
 8004048:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800404a:	4b38      	ldr	r3, [pc, #224]	; (800412c <MX_TIM1_Init+0x138>)
 800404c:	2200      	movs	r2, #0
 800404e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004050:	4b36      	ldr	r3, [pc, #216]	; (800412c <MX_TIM1_Init+0x138>)
 8004052:	2200      	movs	r2, #0
 8004054:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004056:	4b35      	ldr	r3, [pc, #212]	; (800412c <MX_TIM1_Init+0x138>)
 8004058:	2200      	movs	r2, #0
 800405a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800405c:	4833      	ldr	r0, [pc, #204]	; (800412c <MX_TIM1_Init+0x138>)
 800405e:	f005 fb2d 	bl	80096bc <HAL_TIM_Base_Init>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8004068:	f7ff fb0e 	bl	8003688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800406c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004070:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004072:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004076:	4619      	mov	r1, r3
 8004078:	482c      	ldr	r0, [pc, #176]	; (800412c <MX_TIM1_Init+0x138>)
 800407a:	f006 faab 	bl	800a5d4 <HAL_TIM_ConfigClockSource>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8004084:	f7ff fb00 	bl	8003688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004088:	4828      	ldr	r0, [pc, #160]	; (800412c <MX_TIM1_Init+0x138>)
 800408a:	f005 fc6d 	bl	8009968 <HAL_TIM_PWM_Init>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8004094:	f7ff faf8 	bl	8003688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004098:	2300      	movs	r3, #0
 800409a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800409c:	2300      	movs	r3, #0
 800409e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80040a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80040a4:	4619      	mov	r1, r3
 80040a6:	4821      	ldr	r0, [pc, #132]	; (800412c <MX_TIM1_Init+0x138>)
 80040a8:	f007 fb32 	bl	800b710 <HAL_TIMEx_MasterConfigSynchronization>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80040b2:	f7ff fae9 	bl	8003688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040b6:	2360      	movs	r3, #96	; 0x60
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040be:	2300      	movs	r3, #0
 80040c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80040c2:	2300      	movs	r3, #0
 80040c4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040c6:	2300      	movs	r3, #0
 80040c8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80040ca:	2300      	movs	r3, #0
 80040cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80040ce:	2300      	movs	r3, #0
 80040d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80040d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040d6:	2204      	movs	r2, #4
 80040d8:	4619      	mov	r1, r3
 80040da:	4814      	ldr	r0, [pc, #80]	; (800412c <MX_TIM1_Init+0x138>)
 80040dc:	f006 f89e 	bl	800a21c <HAL_TIM_PWM_ConfigChannel>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80040e6:	f7ff facf 	bl	8003688 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80040ea:	2300      	movs	r3, #0
 80040ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80040f2:	2300      	movs	r3, #0
 80040f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80040f6:	2300      	movs	r3, #0
 80040f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80040fa:	2300      	movs	r3, #0
 80040fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80040fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004102:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004104:	2300      	movs	r3, #0
 8004106:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004108:	1d3b      	adds	r3, r7, #4
 800410a:	4619      	mov	r1, r3
 800410c:	4807      	ldr	r0, [pc, #28]	; (800412c <MX_TIM1_Init+0x138>)
 800410e:	f007 fbdd 	bl	800b8cc <HAL_TIMEx_ConfigBreakDeadTime>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8004118:	f7ff fab6 	bl	8003688 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800411c:	4803      	ldr	r0, [pc, #12]	; (800412c <MX_TIM1_Init+0x138>)
 800411e:	f000 fa2b 	bl	8004578 <HAL_TIM_MspPostInit>

}
 8004122:	bf00      	nop
 8004124:	3758      	adds	r7, #88	; 0x58
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	20000650 	.word	0x20000650
 8004130:	40010000 	.word	0x40010000

08004134 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08a      	sub	sp, #40	; 0x28
 8004138:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800413a:	f107 0318 	add.w	r3, r7, #24
 800413e:	2200      	movs	r2, #0
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	605a      	str	r2, [r3, #4]
 8004144:	609a      	str	r2, [r3, #8]
 8004146:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004148:	f107 0310 	add.w	r3, r7, #16
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004152:	463b      	mov	r3, r7
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	605a      	str	r2, [r3, #4]
 800415a:	609a      	str	r2, [r3, #8]
 800415c:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800415e:	4b31      	ldr	r3, [pc, #196]	; (8004224 <MX_TIM2_Init+0xf0>)
 8004160:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004164:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8004166:	4b2f      	ldr	r3, [pc, #188]	; (8004224 <MX_TIM2_Init+0xf0>)
 8004168:	22b3      	movs	r2, #179	; 0xb3
 800416a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800416c:	4b2d      	ldr	r3, [pc, #180]	; (8004224 <MX_TIM2_Init+0xf0>)
 800416e:	2200      	movs	r2, #0
 8004170:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536-1;
 8004172:	4b2c      	ldr	r3, [pc, #176]	; (8004224 <MX_TIM2_Init+0xf0>)
 8004174:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004178:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800417a:	4b2a      	ldr	r3, [pc, #168]	; (8004224 <MX_TIM2_Init+0xf0>)
 800417c:	2200      	movs	r2, #0
 800417e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004180:	4b28      	ldr	r3, [pc, #160]	; (8004224 <MX_TIM2_Init+0xf0>)
 8004182:	2200      	movs	r2, #0
 8004184:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004186:	4827      	ldr	r0, [pc, #156]	; (8004224 <MX_TIM2_Init+0xf0>)
 8004188:	f005 fa98 	bl	80096bc <HAL_TIM_Base_Init>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8004192:	f7ff fa79 	bl	8003688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800419a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800419c:	f107 0318 	add.w	r3, r7, #24
 80041a0:	4619      	mov	r1, r3
 80041a2:	4820      	ldr	r0, [pc, #128]	; (8004224 <MX_TIM2_Init+0xf0>)
 80041a4:	f006 fa16 	bl	800a5d4 <HAL_TIM_ConfigClockSource>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80041ae:	f7ff fa6b 	bl	8003688 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80041b2:	481c      	ldr	r0, [pc, #112]	; (8004224 <MX_TIM2_Init+0xf0>)
 80041b4:	f005 fda8 	bl	8009d08 <HAL_TIM_IC_Init>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80041be:	f7ff fa63 	bl	8003688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041c2:	2300      	movs	r3, #0
 80041c4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80041ca:	f107 0310 	add.w	r3, r7, #16
 80041ce:	4619      	mov	r1, r3
 80041d0:	4814      	ldr	r0, [pc, #80]	; (8004224 <MX_TIM2_Init+0xf0>)
 80041d2:	f007 fa9d 	bl	800b710 <HAL_TIMEx_MasterConfigSynchronization>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80041dc:	f7ff fa54 	bl	8003688 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80041e0:	2300      	movs	r3, #0
 80041e2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80041e4:	2301      	movs	r3, #1
 80041e6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80041f0:	463b      	mov	r3, r7
 80041f2:	2208      	movs	r2, #8
 80041f4:	4619      	mov	r1, r3
 80041f6:	480b      	ldr	r0, [pc, #44]	; (8004224 <MX_TIM2_Init+0xf0>)
 80041f8:	f005 fe5c 	bl	8009eb4 <HAL_TIM_IC_ConfigChannel>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8004202:	f7ff fa41 	bl	8003688 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8004206:	463b      	mov	r3, r7
 8004208:	220c      	movs	r2, #12
 800420a:	4619      	mov	r1, r3
 800420c:	4805      	ldr	r0, [pc, #20]	; (8004224 <MX_TIM2_Init+0xf0>)
 800420e:	f005 fe51 	bl	8009eb4 <HAL_TIM_IC_ConfigChannel>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8004218:	f7ff fa36 	bl	8003688 <Error_Handler>
  }

}
 800421c:	bf00      	nop
 800421e:	3728      	adds	r7, #40	; 0x28
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	20000690 	.word	0x20000690

08004228 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08e      	sub	sp, #56	; 0x38
 800422c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800422e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	605a      	str	r2, [r3, #4]
 8004238:	609a      	str	r2, [r3, #8]
 800423a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800423c:	f107 0320 	add.w	r3, r7, #32
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004246:	1d3b      	adds	r3, r7, #4
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	605a      	str	r2, [r3, #4]
 800424e:	609a      	str	r2, [r3, #8]
 8004250:	60da      	str	r2, [r3, #12]
 8004252:	611a      	str	r2, [r3, #16]
 8004254:	615a      	str	r2, [r3, #20]
 8004256:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8004258:	4b32      	ldr	r3, [pc, #200]	; (8004324 <MX_TIM3_Init+0xfc>)
 800425a:	4a33      	ldr	r2, [pc, #204]	; (8004328 <MX_TIM3_Init+0x100>)
 800425c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 800425e:	4b31      	ldr	r3, [pc, #196]	; (8004324 <MX_TIM3_Init+0xfc>)
 8004260:	2259      	movs	r2, #89	; 0x59
 8004262:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004264:	4b2f      	ldr	r3, [pc, #188]	; (8004324 <MX_TIM3_Init+0xfc>)
 8004266:	2200      	movs	r2, #0
 8004268:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800426a:	4b2e      	ldr	r3, [pc, #184]	; (8004324 <MX_TIM3_Init+0xfc>)
 800426c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004270:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004272:	4b2c      	ldr	r3, [pc, #176]	; (8004324 <MX_TIM3_Init+0xfc>)
 8004274:	2200      	movs	r2, #0
 8004276:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004278:	4b2a      	ldr	r3, [pc, #168]	; (8004324 <MX_TIM3_Init+0xfc>)
 800427a:	2200      	movs	r2, #0
 800427c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800427e:	4829      	ldr	r0, [pc, #164]	; (8004324 <MX_TIM3_Init+0xfc>)
 8004280:	f005 fa1c 	bl	80096bc <HAL_TIM_Base_Init>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800428a:	f7ff f9fd 	bl	8003688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800428e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004292:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004294:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004298:	4619      	mov	r1, r3
 800429a:	4822      	ldr	r0, [pc, #136]	; (8004324 <MX_TIM3_Init+0xfc>)
 800429c:	f006 f99a 	bl	800a5d4 <HAL_TIM_ConfigClockSource>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80042a6:	f7ff f9ef 	bl	8003688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80042aa:	481e      	ldr	r0, [pc, #120]	; (8004324 <MX_TIM3_Init+0xfc>)
 80042ac:	f005 fb5c 	bl	8009968 <HAL_TIM_PWM_Init>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80042b6:	f7ff f9e7 	bl	8003688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042ba:	2300      	movs	r3, #0
 80042bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042be:	2300      	movs	r3, #0
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042c2:	f107 0320 	add.w	r3, r7, #32
 80042c6:	4619      	mov	r1, r3
 80042c8:	4816      	ldr	r0, [pc, #88]	; (8004324 <MX_TIM3_Init+0xfc>)
 80042ca:	f007 fa21 	bl	800b710 <HAL_TIMEx_MasterConfigSynchronization>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80042d4:	f7ff f9d8 	bl	8003688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042d8:	2360      	movs	r3, #96	; 0x60
 80042da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 80042dc:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80042e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042e2:	2300      	movs	r3, #0
 80042e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042ea:	1d3b      	adds	r3, r7, #4
 80042ec:	2200      	movs	r2, #0
 80042ee:	4619      	mov	r1, r3
 80042f0:	480c      	ldr	r0, [pc, #48]	; (8004324 <MX_TIM3_Init+0xfc>)
 80042f2:	f005 ff93 	bl	800a21c <HAL_TIM_PWM_ConfigChannel>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80042fc:	f7ff f9c4 	bl	8003688 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004300:	1d3b      	adds	r3, r7, #4
 8004302:	2204      	movs	r2, #4
 8004304:	4619      	mov	r1, r3
 8004306:	4807      	ldr	r0, [pc, #28]	; (8004324 <MX_TIM3_Init+0xfc>)
 8004308:	f005 ff88 	bl	800a21c <HAL_TIM_PWM_ConfigChannel>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8004312:	f7ff f9b9 	bl	8003688 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8004316:	4803      	ldr	r0, [pc, #12]	; (8004324 <MX_TIM3_Init+0xfc>)
 8004318:	f000 f92e 	bl	8004578 <HAL_TIM_MspPostInit>

}
 800431c:	bf00      	nop
 800431e:	3738      	adds	r7, #56	; 0x38
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	20000610 	.word	0x20000610
 8004328:	40000400 	.word	0x40000400

0800432c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b096      	sub	sp, #88	; 0x58
 8004330:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004332:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	605a      	str	r2, [r3, #4]
 800433c:	609a      	str	r2, [r3, #8]
 800433e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004340:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800434a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	605a      	str	r2, [r3, #4]
 8004354:	609a      	str	r2, [r3, #8]
 8004356:	60da      	str	r2, [r3, #12]
 8004358:	611a      	str	r2, [r3, #16]
 800435a:	615a      	str	r2, [r3, #20]
 800435c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800435e:	1d3b      	adds	r3, r7, #4
 8004360:	2220      	movs	r2, #32
 8004362:	2100      	movs	r1, #0
 8004364:	4618      	mov	r0, r3
 8004366:	f008 faa3 	bl	800c8b0 <memset>

  htim8.Instance = TIM8;
 800436a:	4b3d      	ldr	r3, [pc, #244]	; (8004460 <MX_TIM8_Init+0x134>)
 800436c:	4a3d      	ldr	r2, [pc, #244]	; (8004464 <MX_TIM8_Init+0x138>)
 800436e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 8004370:	4b3b      	ldr	r3, [pc, #236]	; (8004460 <MX_TIM8_Init+0x134>)
 8004372:	22b3      	movs	r2, #179	; 0xb3
 8004374:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004376:	4b3a      	ldr	r3, [pc, #232]	; (8004460 <MX_TIM8_Init+0x134>)
 8004378:	2200      	movs	r2, #0
 800437a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 800437c:	4b38      	ldr	r3, [pc, #224]	; (8004460 <MX_TIM8_Init+0x134>)
 800437e:	2263      	movs	r2, #99	; 0x63
 8004380:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004382:	4b37      	ldr	r3, [pc, #220]	; (8004460 <MX_TIM8_Init+0x134>)
 8004384:	2200      	movs	r2, #0
 8004386:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004388:	4b35      	ldr	r3, [pc, #212]	; (8004460 <MX_TIM8_Init+0x134>)
 800438a:	2200      	movs	r2, #0
 800438c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800438e:	4b34      	ldr	r3, [pc, #208]	; (8004460 <MX_TIM8_Init+0x134>)
 8004390:	2200      	movs	r2, #0
 8004392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004394:	4832      	ldr	r0, [pc, #200]	; (8004460 <MX_TIM8_Init+0x134>)
 8004396:	f005 f991 	bl	80096bc <HAL_TIM_Base_Init>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80043a0:	f7ff f972 	bl	8003688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80043aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80043ae:	4619      	mov	r1, r3
 80043b0:	482b      	ldr	r0, [pc, #172]	; (8004460 <MX_TIM8_Init+0x134>)
 80043b2:	f006 f90f 	bl	800a5d4 <HAL_TIM_ConfigClockSource>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80043bc:	f7ff f964 	bl	8003688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80043c0:	4827      	ldr	r0, [pc, #156]	; (8004460 <MX_TIM8_Init+0x134>)
 80043c2:	f005 fad1 	bl	8009968 <HAL_TIM_PWM_Init>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80043cc:	f7ff f95c 	bl	8003688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043d0:	2300      	movs	r3, #0
 80043d2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043d4:	2300      	movs	r3, #0
 80043d6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80043d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80043dc:	4619      	mov	r1, r3
 80043de:	4820      	ldr	r0, [pc, #128]	; (8004460 <MX_TIM8_Init+0x134>)
 80043e0:	f007 f996 	bl	800b710 <HAL_TIMEx_MasterConfigSynchronization>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80043ea:	f7ff f94d 	bl	8003688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043ee:	2360      	movs	r3, #96	; 0x60
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043f6:	2300      	movs	r3, #0
 80043f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043fa:	2300      	movs	r3, #0
 80043fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80043fe:	2300      	movs	r3, #0
 8004400:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004402:	2300      	movs	r3, #0
 8004404:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800440a:	220c      	movs	r2, #12
 800440c:	4619      	mov	r1, r3
 800440e:	4814      	ldr	r0, [pc, #80]	; (8004460 <MX_TIM8_Init+0x134>)
 8004410:	f005 ff04 	bl	800a21c <HAL_TIM_PWM_ConfigChannel>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 800441a:	f7ff f935 	bl	8003688 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800441e:	2300      	movs	r3, #0
 8004420:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004422:	2300      	movs	r3, #0
 8004424:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004426:	2300      	movs	r3, #0
 8004428:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800442a:	2300      	movs	r3, #0
 800442c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800442e:	2300      	movs	r3, #0
 8004430:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004436:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004438:	2300      	movs	r3, #0
 800443a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800443c:	1d3b      	adds	r3, r7, #4
 800443e:	4619      	mov	r1, r3
 8004440:	4807      	ldr	r0, [pc, #28]	; (8004460 <MX_TIM8_Init+0x134>)
 8004442:	f007 fa43 	bl	800b8cc <HAL_TIMEx_ConfigBreakDeadTime>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <MX_TIM8_Init+0x124>
  {
    Error_Handler();
 800444c:	f7ff f91c 	bl	8003688 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8004450:	4803      	ldr	r0, [pc, #12]	; (8004460 <MX_TIM8_Init+0x134>)
 8004452:	f000 f891 	bl	8004578 <HAL_TIM_MspPostInit>

}
 8004456:	bf00      	nop
 8004458:	3758      	adds	r7, #88	; 0x58
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	200005d0 	.word	0x200005d0
 8004464:	40010400 	.word	0x40010400

08004468 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08c      	sub	sp, #48	; 0x30
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004470:	f107 031c 	add.w	r3, r7, #28
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	605a      	str	r2, [r3, #4]
 800447a:	609a      	str	r2, [r3, #8]
 800447c:	60da      	str	r2, [r3, #12]
 800447e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a37      	ldr	r2, [pc, #220]	; (8004564 <HAL_TIM_Base_MspInit+0xfc>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d10e      	bne.n	80044a8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800448a:	2300      	movs	r3, #0
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	4b36      	ldr	r3, [pc, #216]	; (8004568 <HAL_TIM_Base_MspInit+0x100>)
 8004490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004492:	4a35      	ldr	r2, [pc, #212]	; (8004568 <HAL_TIM_Base_MspInit+0x100>)
 8004494:	f043 0301 	orr.w	r3, r3, #1
 8004498:	6453      	str	r3, [r2, #68]	; 0x44
 800449a:	4b33      	ldr	r3, [pc, #204]	; (8004568 <HAL_TIM_Base_MspInit+0x100>)
 800449c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	61bb      	str	r3, [r7, #24]
 80044a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80044a6:	e059      	b.n	800455c <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM2)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b0:	d12d      	bne.n	800450e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	4b2c      	ldr	r3, [pc, #176]	; (8004568 <HAL_TIM_Base_MspInit+0x100>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	4a2b      	ldr	r2, [pc, #172]	; (8004568 <HAL_TIM_Base_MspInit+0x100>)
 80044bc:	f043 0301 	orr.w	r3, r3, #1
 80044c0:	6413      	str	r3, [r2, #64]	; 0x40
 80044c2:	4b29      	ldr	r3, [pc, #164]	; (8004568 <HAL_TIM_Base_MspInit+0x100>)
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ce:	2300      	movs	r3, #0
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	4b25      	ldr	r3, [pc, #148]	; (8004568 <HAL_TIM_Base_MspInit+0x100>)
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	4a24      	ldr	r2, [pc, #144]	; (8004568 <HAL_TIM_Base_MspInit+0x100>)
 80044d8:	f043 0302 	orr.w	r3, r3, #2
 80044dc:	6313      	str	r3, [r2, #48]	; 0x30
 80044de:	4b22      	ldr	r3, [pc, #136]	; (8004568 <HAL_TIM_Base_MspInit+0x100>)
 80044e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	613b      	str	r3, [r7, #16]
 80044e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin|ClimbSpeed_TIM2_CH4_Pin;
 80044ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80044ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f0:	2302      	movs	r3, #2
 80044f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f4:	2300      	movs	r3, #0
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f8:	2300      	movs	r3, #0
 80044fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80044fc:	2301      	movs	r3, #1
 80044fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004500:	f107 031c 	add.w	r3, r7, #28
 8004504:	4619      	mov	r1, r3
 8004506:	4819      	ldr	r0, [pc, #100]	; (800456c <HAL_TIM_Base_MspInit+0x104>)
 8004508:	f002 f8f4 	bl	80066f4 <HAL_GPIO_Init>
}
 800450c:	e026      	b.n	800455c <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM3)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a17      	ldr	r2, [pc, #92]	; (8004570 <HAL_TIM_Base_MspInit+0x108>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d10e      	bne.n	8004536 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	4b12      	ldr	r3, [pc, #72]	; (8004568 <HAL_TIM_Base_MspInit+0x100>)
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	4a11      	ldr	r2, [pc, #68]	; (8004568 <HAL_TIM_Base_MspInit+0x100>)
 8004522:	f043 0302 	orr.w	r3, r3, #2
 8004526:	6413      	str	r3, [r2, #64]	; 0x40
 8004528:	4b0f      	ldr	r3, [pc, #60]	; (8004568 <HAL_TIM_Base_MspInit+0x100>)
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	68fb      	ldr	r3, [r7, #12]
}
 8004534:	e012      	b.n	800455c <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM8)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a0e      	ldr	r2, [pc, #56]	; (8004574 <HAL_TIM_Base_MspInit+0x10c>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d10d      	bne.n	800455c <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004540:	2300      	movs	r3, #0
 8004542:	60bb      	str	r3, [r7, #8]
 8004544:	4b08      	ldr	r3, [pc, #32]	; (8004568 <HAL_TIM_Base_MspInit+0x100>)
 8004546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004548:	4a07      	ldr	r2, [pc, #28]	; (8004568 <HAL_TIM_Base_MspInit+0x100>)
 800454a:	f043 0302 	orr.w	r3, r3, #2
 800454e:	6453      	str	r3, [r2, #68]	; 0x44
 8004550:	4b05      	ldr	r3, [pc, #20]	; (8004568 <HAL_TIM_Base_MspInit+0x100>)
 8004552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	68bb      	ldr	r3, [r7, #8]
}
 800455c:	bf00      	nop
 800455e:	3730      	adds	r7, #48	; 0x30
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40010000 	.word	0x40010000
 8004568:	40023800 	.word	0x40023800
 800456c:	40020400 	.word	0x40020400
 8004570:	40000400 	.word	0x40000400
 8004574:	40010400 	.word	0x40010400

08004578 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	; 0x28
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004580:	f107 0314 	add.w	r3, r7, #20
 8004584:	2200      	movs	r2, #0
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	605a      	str	r2, [r3, #4]
 800458a:	609a      	str	r2, [r3, #8]
 800458c:	60da      	str	r2, [r3, #12]
 800458e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a37      	ldr	r2, [pc, #220]	; (8004674 <HAL_TIM_MspPostInit+0xfc>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d11f      	bne.n	80045da <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800459a:	2300      	movs	r3, #0
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	4b36      	ldr	r3, [pc, #216]	; (8004678 <HAL_TIM_MspPostInit+0x100>)
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	4a35      	ldr	r2, [pc, #212]	; (8004678 <HAL_TIM_MspPostInit+0x100>)
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	6313      	str	r3, [r2, #48]	; 0x30
 80045aa:	4b33      	ldr	r3, [pc, #204]	; (8004678 <HAL_TIM_MspPostInit+0x100>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 80045b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045bc:	2302      	movs	r3, #2
 80045be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c4:	2300      	movs	r3, #0
 80045c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80045c8:	2301      	movs	r3, #1
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 80045cc:	f107 0314 	add.w	r3, r7, #20
 80045d0:	4619      	mov	r1, r3
 80045d2:	482a      	ldr	r0, [pc, #168]	; (800467c <HAL_TIM_MspPostInit+0x104>)
 80045d4:	f002 f88e 	bl	80066f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80045d8:	e047      	b.n	800466a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a28      	ldr	r2, [pc, #160]	; (8004680 <HAL_TIM_MspPostInit+0x108>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d11e      	bne.n	8004622 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045e4:	2300      	movs	r3, #0
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	4b23      	ldr	r3, [pc, #140]	; (8004678 <HAL_TIM_MspPostInit+0x100>)
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ec:	4a22      	ldr	r2, [pc, #136]	; (8004678 <HAL_TIM_MspPostInit+0x100>)
 80045ee:	f043 0304 	orr.w	r3, r3, #4
 80045f2:	6313      	str	r3, [r2, #48]	; 0x30
 80045f4:	4b20      	ldr	r3, [pc, #128]	; (8004678 <HAL_TIM_MspPostInit+0x100>)
 80045f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 8004600:	23c0      	movs	r3, #192	; 0xc0
 8004602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004604:	2302      	movs	r3, #2
 8004606:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004608:	2300      	movs	r3, #0
 800460a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800460c:	2300      	movs	r3, #0
 800460e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004610:	2302      	movs	r3, #2
 8004612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004614:	f107 0314 	add.w	r3, r7, #20
 8004618:	4619      	mov	r1, r3
 800461a:	481a      	ldr	r0, [pc, #104]	; (8004684 <HAL_TIM_MspPostInit+0x10c>)
 800461c:	f002 f86a 	bl	80066f4 <HAL_GPIO_Init>
}
 8004620:	e023      	b.n	800466a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM8)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a18      	ldr	r2, [pc, #96]	; (8004688 <HAL_TIM_MspPostInit+0x110>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d11e      	bne.n	800466a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800462c:	2300      	movs	r3, #0
 800462e:	60bb      	str	r3, [r7, #8]
 8004630:	4b11      	ldr	r3, [pc, #68]	; (8004678 <HAL_TIM_MspPostInit+0x100>)
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	4a10      	ldr	r2, [pc, #64]	; (8004678 <HAL_TIM_MspPostInit+0x100>)
 8004636:	f043 0304 	orr.w	r3, r3, #4
 800463a:	6313      	str	r3, [r2, #48]	; 0x30
 800463c:	4b0e      	ldr	r3, [pc, #56]	; (8004678 <HAL_TIM_MspPostInit+0x100>)
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Climb_TIM8_CH4_Pin;
 8004648:	f44f 7300 	mov.w	r3, #512	; 0x200
 800464c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800464e:	2302      	movs	r3, #2
 8004650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004656:	2300      	movs	r3, #0
 8004658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800465a:	2303      	movs	r3, #3
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM8_CH4_GPIO_Port, &GPIO_InitStruct);
 800465e:	f107 0314 	add.w	r3, r7, #20
 8004662:	4619      	mov	r1, r3
 8004664:	4807      	ldr	r0, [pc, #28]	; (8004684 <HAL_TIM_MspPostInit+0x10c>)
 8004666:	f002 f845 	bl	80066f4 <HAL_GPIO_Init>
}
 800466a:	bf00      	nop
 800466c:	3728      	adds	r7, #40	; 0x28
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40010000 	.word	0x40010000
 8004678:	40023800 	.word	0x40023800
 800467c:	40020000 	.word	0x40020000
 8004680:	40000400 	.word	0x40000400
 8004684:	40020800 	.word	0x40020800
 8004688:	40010400 	.word	0x40010400

0800468c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8004690:	4b11      	ldr	r3, [pc, #68]	; (80046d8 <MX_USART3_UART_Init+0x4c>)
 8004692:	4a12      	ldr	r2, [pc, #72]	; (80046dc <MX_USART3_UART_Init+0x50>)
 8004694:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004696:	4b10      	ldr	r3, [pc, #64]	; (80046d8 <MX_USART3_UART_Init+0x4c>)
 8004698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800469c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800469e:	4b0e      	ldr	r3, [pc, #56]	; (80046d8 <MX_USART3_UART_Init+0x4c>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80046a4:	4b0c      	ldr	r3, [pc, #48]	; (80046d8 <MX_USART3_UART_Init+0x4c>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80046aa:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <MX_USART3_UART_Init+0x4c>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80046b0:	4b09      	ldr	r3, [pc, #36]	; (80046d8 <MX_USART3_UART_Init+0x4c>)
 80046b2:	220c      	movs	r2, #12
 80046b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046b6:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <MX_USART3_UART_Init+0x4c>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80046bc:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <MX_USART3_UART_Init+0x4c>)
 80046be:	2200      	movs	r2, #0
 80046c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80046c2:	4805      	ldr	r0, [pc, #20]	; (80046d8 <MX_USART3_UART_Init+0x4c>)
 80046c4:	f007 f9ce 	bl	800ba64 <HAL_UART_Init>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80046ce:	f7fe ffdb 	bl	8003688 <Error_Handler>
  }

}
 80046d2:	bf00      	nop
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20000730 	.word	0x20000730
 80046dc:	40004800 	.word	0x40004800

080046e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	; 0x28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e8:	f107 0314 	add.w	r3, r7, #20
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	605a      	str	r2, [r3, #4]
 80046f2:	609a      	str	r2, [r3, #8]
 80046f4:	60da      	str	r2, [r3, #12]
 80046f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a30      	ldr	r2, [pc, #192]	; (80047c0 <HAL_UART_MspInit+0xe0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d15a      	bne.n	80047b8 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004702:	2300      	movs	r3, #0
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	4b2f      	ldr	r3, [pc, #188]	; (80047c4 <HAL_UART_MspInit+0xe4>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	4a2e      	ldr	r2, [pc, #184]	; (80047c4 <HAL_UART_MspInit+0xe4>)
 800470c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004710:	6413      	str	r3, [r2, #64]	; 0x40
 8004712:	4b2c      	ldr	r3, [pc, #176]	; (80047c4 <HAL_UART_MspInit+0xe4>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800471a:	613b      	str	r3, [r7, #16]
 800471c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800471e:	2300      	movs	r3, #0
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	4b28      	ldr	r3, [pc, #160]	; (80047c4 <HAL_UART_MspInit+0xe4>)
 8004724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004726:	4a27      	ldr	r2, [pc, #156]	; (80047c4 <HAL_UART_MspInit+0xe4>)
 8004728:	f043 0308 	orr.w	r3, r3, #8
 800472c:	6313      	str	r3, [r2, #48]	; 0x30
 800472e:	4b25      	ldr	r3, [pc, #148]	; (80047c4 <HAL_UART_MspInit+0xe4>)
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 800473a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800473e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004740:	2302      	movs	r3, #2
 8004742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004744:	2300      	movs	r3, #0
 8004746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004748:	2303      	movs	r3, #3
 800474a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800474c:	2307      	movs	r3, #7
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004750:	f107 0314 	add.w	r3, r7, #20
 8004754:	4619      	mov	r1, r3
 8004756:	481c      	ldr	r0, [pc, #112]	; (80047c8 <HAL_UART_MspInit+0xe8>)
 8004758:	f001 ffcc 	bl	80066f4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800475c:	4b1b      	ldr	r3, [pc, #108]	; (80047cc <HAL_UART_MspInit+0xec>)
 800475e:	4a1c      	ldr	r2, [pc, #112]	; (80047d0 <HAL_UART_MspInit+0xf0>)
 8004760:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004762:	4b1a      	ldr	r3, [pc, #104]	; (80047cc <HAL_UART_MspInit+0xec>)
 8004764:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004768:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800476a:	4b18      	ldr	r3, [pc, #96]	; (80047cc <HAL_UART_MspInit+0xec>)
 800476c:	2200      	movs	r2, #0
 800476e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004770:	4b16      	ldr	r3, [pc, #88]	; (80047cc <HAL_UART_MspInit+0xec>)
 8004772:	2200      	movs	r2, #0
 8004774:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004776:	4b15      	ldr	r3, [pc, #84]	; (80047cc <HAL_UART_MspInit+0xec>)
 8004778:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800477c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800477e:	4b13      	ldr	r3, [pc, #76]	; (80047cc <HAL_UART_MspInit+0xec>)
 8004780:	2200      	movs	r2, #0
 8004782:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004784:	4b11      	ldr	r3, [pc, #68]	; (80047cc <HAL_UART_MspInit+0xec>)
 8004786:	2200      	movs	r2, #0
 8004788:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800478a:	4b10      	ldr	r3, [pc, #64]	; (80047cc <HAL_UART_MspInit+0xec>)
 800478c:	2200      	movs	r2, #0
 800478e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004790:	4b0e      	ldr	r3, [pc, #56]	; (80047cc <HAL_UART_MspInit+0xec>)
 8004792:	2200      	movs	r2, #0
 8004794:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004796:	4b0d      	ldr	r3, [pc, #52]	; (80047cc <HAL_UART_MspInit+0xec>)
 8004798:	2200      	movs	r2, #0
 800479a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800479c:	480b      	ldr	r0, [pc, #44]	; (80047cc <HAL_UART_MspInit+0xec>)
 800479e:	f001 fabd 	bl	8005d1c <HAL_DMA_Init>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80047a8:	f7fe ff6e 	bl	8003688 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a07      	ldr	r2, [pc, #28]	; (80047cc <HAL_UART_MspInit+0xec>)
 80047b0:	635a      	str	r2, [r3, #52]	; 0x34
 80047b2:	4a06      	ldr	r2, [pc, #24]	; (80047cc <HAL_UART_MspInit+0xec>)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80047b8:	bf00      	nop
 80047ba:	3728      	adds	r7, #40	; 0x28
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40004800 	.word	0x40004800
 80047c4:	40023800 	.word	0x40023800
 80047c8:	40020c00 	.word	0x40020c00
 80047cc:	200006d0 	.word	0x200006d0
 80047d0:	40026028 	.word	0x40026028

080047d4 <wheelSpeedControl_Init>:

  joy_pos_buffer_cnt++;
}

void wheelSpeedControl_Init(WheelSpeed* wheel, float max_lin_speed, float max_ang_speed)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80047e0:	edc7 0a01 	vstr	s1, [r7, #4]
  wheel->stable_cnt = 0;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	611a      	str	r2, [r3, #16]
  wheel->cur_r = 0.0f;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	605a      	str	r2, [r3, #4]
  wheel->cur_l = 0.0f;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]
  wheel->pre_l= 0.0f;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	609a      	str	r2, [r3, #8]
  wheel->pre_r = 0.0f;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	60da      	str	r2, [r3, #12]
  wheel->max_angular_speed = max_ang_speed;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	619a      	str	r2, [r3, #24]
  wheel->max_linear_speed = max_lin_speed;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	615a      	str	r2, [r3, #20]
  wheel->start_from_stationary = false;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	771a      	strb	r2, [r3, #28]
}
 800481c:	bf00      	nop
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 


  ldr   sp, =_estack       /* set stack pointer */
 8004828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004860 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800482c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800482e:	e003      	b.n	8004838 <LoopCopyDataInit>

08004830 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004830:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004832:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004834:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004836:	3104      	adds	r1, #4

08004838 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004838:	480b      	ldr	r0, [pc, #44]	; (8004868 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800483a:	4b0c      	ldr	r3, [pc, #48]	; (800486c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800483c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800483e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004840:	d3f6      	bcc.n	8004830 <CopyDataInit>
  ldr  r2, =_sbss
 8004842:	4a0b      	ldr	r2, [pc, #44]	; (8004870 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004844:	e002      	b.n	800484c <LoopFillZerobss>

08004846 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004846:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004848:	f842 3b04 	str.w	r3, [r2], #4

0800484c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800484c:	4b09      	ldr	r3, [pc, #36]	; (8004874 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800484e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004850:	d3f9      	bcc.n	8004846 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004852:	f7ff fbb9 	bl	8003fc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004856:	f008 f807 	bl	800c868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800485a:	f7fd fbe9 	bl	8002030 <main>
  bx  lr    
 800485e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004860:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004864:	0800eb10 	.word	0x0800eb10
  ldr  r0, =_sdata
 8004868:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800486c:	20000274 	.word	0x20000274
  ldr  r2, =_sbss
 8004870:	20000278 	.word	0x20000278
  ldr  r3, = _ebss
 8004874:	20000774 	.word	0x20000774

08004878 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004878:	e7fe      	b.n	8004878 <ADC_IRQHandler>
	...

0800487c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004880:	4b0e      	ldr	r3, [pc, #56]	; (80048bc <HAL_Init+0x40>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a0d      	ldr	r2, [pc, #52]	; (80048bc <HAL_Init+0x40>)
 8004886:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800488a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800488c:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <HAL_Init+0x40>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a0a      	ldr	r2, [pc, #40]	; (80048bc <HAL_Init+0x40>)
 8004892:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004896:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004898:	4b08      	ldr	r3, [pc, #32]	; (80048bc <HAL_Init+0x40>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a07      	ldr	r2, [pc, #28]	; (80048bc <HAL_Init+0x40>)
 800489e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048a4:	2003      	movs	r0, #3
 80048a6:	f001 f9a1 	bl	8005bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048aa:	2000      	movs	r0, #0
 80048ac:	f000 f808 	bl	80048c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80048b0:	f7ff fb18 	bl	8003ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40023c00 	.word	0x40023c00

080048c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80048c8:	4b12      	ldr	r3, [pc, #72]	; (8004914 <HAL_InitTick+0x54>)
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	4b12      	ldr	r3, [pc, #72]	; (8004918 <HAL_InitTick+0x58>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	4619      	mov	r1, r3
 80048d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80048da:	fbb2 f3f3 	udiv	r3, r2, r3
 80048de:	4618      	mov	r0, r3
 80048e0:	f001 f9e8 	bl	8005cb4 <HAL_SYSTICK_Config>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e00e      	b.n	800490c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b0f      	cmp	r3, #15
 80048f2:	d80a      	bhi.n	800490a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048f4:	2200      	movs	r2, #0
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048fc:	f001 f996 	bl	8005c2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004900:	4a06      	ldr	r2, [pc, #24]	; (800491c <HAL_InitTick+0x5c>)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	e000      	b.n	800490c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
}
 800490c:	4618      	mov	r0, r3
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	20000200 	.word	0x20000200
 8004918:	20000208 	.word	0x20000208
 800491c:	20000204 	.word	0x20000204

08004920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004924:	4b06      	ldr	r3, [pc, #24]	; (8004940 <HAL_IncTick+0x20>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	461a      	mov	r2, r3
 800492a:	4b06      	ldr	r3, [pc, #24]	; (8004944 <HAL_IncTick+0x24>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4413      	add	r3, r2
 8004930:	4a04      	ldr	r2, [pc, #16]	; (8004944 <HAL_IncTick+0x24>)
 8004932:	6013      	str	r3, [r2, #0]
}
 8004934:	bf00      	nop
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	20000208 	.word	0x20000208
 8004944:	20000770 	.word	0x20000770

08004948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
  return uwTick;
 800494c:	4b03      	ldr	r3, [pc, #12]	; (800495c <HAL_GetTick+0x14>)
 800494e:	681b      	ldr	r3, [r3, #0]
}
 8004950:	4618      	mov	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	20000770 	.word	0x20000770

08004960 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004968:	f7ff ffee 	bl	8004948 <HAL_GetTick>
 800496c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004978:	d005      	beq.n	8004986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800497a:	4b0a      	ldr	r3, [pc, #40]	; (80049a4 <HAL_Delay+0x44>)
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4413      	add	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004986:	bf00      	nop
 8004988:	f7ff ffde 	bl	8004948 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	429a      	cmp	r2, r3
 8004996:	d8f7      	bhi.n	8004988 <HAL_Delay+0x28>
  {
  }
}
 8004998:	bf00      	nop
 800499a:	bf00      	nop
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20000208 	.word	0x20000208

080049a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e20e      	b.n	8004dd8 <HAL_CAN_Init+0x430>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4aa0      	ldr	r2, [pc, #640]	; (8004c40 <HAL_CAN_Init+0x298>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d009      	beq.n	80049d8 <HAL_CAN_Init+0x30>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a9e      	ldr	r2, [pc, #632]	; (8004c44 <HAL_CAN_Init+0x29c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d004      	beq.n	80049d8 <HAL_CAN_Init+0x30>
 80049ce:	f240 111d 	movw	r1, #285	; 0x11d
 80049d2:	489d      	ldr	r0, [pc, #628]	; (8004c48 <HAL_CAN_Init+0x2a0>)
 80049d4:	f7fe fe5f 	bl	8003696 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	7e1b      	ldrb	r3, [r3, #24]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d008      	beq.n	80049f2 <HAL_CAN_Init+0x4a>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	7e1b      	ldrb	r3, [r3, #24]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d004      	beq.n	80049f2 <HAL_CAN_Init+0x4a>
 80049e8:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80049ec:	4896      	ldr	r0, [pc, #600]	; (8004c48 <HAL_CAN_Init+0x2a0>)
 80049ee:	f7fe fe52 	bl	8003696 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	7e5b      	ldrb	r3, [r3, #25]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d008      	beq.n	8004a0c <HAL_CAN_Init+0x64>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	7e5b      	ldrb	r3, [r3, #25]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d004      	beq.n	8004a0c <HAL_CAN_Init+0x64>
 8004a02:	f240 111f 	movw	r1, #287	; 0x11f
 8004a06:	4890      	ldr	r0, [pc, #576]	; (8004c48 <HAL_CAN_Init+0x2a0>)
 8004a08:	f7fe fe45 	bl	8003696 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	7e9b      	ldrb	r3, [r3, #26]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d008      	beq.n	8004a26 <HAL_CAN_Init+0x7e>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	7e9b      	ldrb	r3, [r3, #26]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d004      	beq.n	8004a26 <HAL_CAN_Init+0x7e>
 8004a1c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8004a20:	4889      	ldr	r0, [pc, #548]	; (8004c48 <HAL_CAN_Init+0x2a0>)
 8004a22:	f7fe fe38 	bl	8003696 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	7edb      	ldrb	r3, [r3, #27]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d008      	beq.n	8004a40 <HAL_CAN_Init+0x98>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	7edb      	ldrb	r3, [r3, #27]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d004      	beq.n	8004a40 <HAL_CAN_Init+0x98>
 8004a36:	f240 1121 	movw	r1, #289	; 0x121
 8004a3a:	4883      	ldr	r0, [pc, #524]	; (8004c48 <HAL_CAN_Init+0x2a0>)
 8004a3c:	f7fe fe2b 	bl	8003696 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	7f1b      	ldrb	r3, [r3, #28]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d008      	beq.n	8004a5a <HAL_CAN_Init+0xb2>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	7f1b      	ldrb	r3, [r3, #28]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d004      	beq.n	8004a5a <HAL_CAN_Init+0xb2>
 8004a50:	f44f 7191 	mov.w	r1, #290	; 0x122
 8004a54:	487c      	ldr	r0, [pc, #496]	; (8004c48 <HAL_CAN_Init+0x2a0>)
 8004a56:	f7fe fe1e 	bl	8003696 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	7f5b      	ldrb	r3, [r3, #29]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d008      	beq.n	8004a74 <HAL_CAN_Init+0xcc>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	7f5b      	ldrb	r3, [r3, #29]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d004      	beq.n	8004a74 <HAL_CAN_Init+0xcc>
 8004a6a:	f240 1123 	movw	r1, #291	; 0x123
 8004a6e:	4876      	ldr	r0, [pc, #472]	; (8004c48 <HAL_CAN_Init+0x2a0>)
 8004a70:	f7fe fe11 	bl	8003696 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d013      	beq.n	8004aa4 <HAL_CAN_Init+0xfc>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a84:	d00e      	beq.n	8004aa4 <HAL_CAN_Init+0xfc>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a8e:	d009      	beq.n	8004aa4 <HAL_CAN_Init+0xfc>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004a98:	d004      	beq.n	8004aa4 <HAL_CAN_Init+0xfc>
 8004a9a:	f44f 7192 	mov.w	r1, #292	; 0x124
 8004a9e:	486a      	ldr	r0, [pc, #424]	; (8004c48 <HAL_CAN_Init+0x2a0>)
 8004aa0:	f7fe fdf9 	bl	8003696 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d013      	beq.n	8004ad4 <HAL_CAN_Init+0x12c>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ab4:	d00e      	beq.n	8004ad4 <HAL_CAN_Init+0x12c>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004abe:	d009      	beq.n	8004ad4 <HAL_CAN_Init+0x12c>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ac8:	d004      	beq.n	8004ad4 <HAL_CAN_Init+0x12c>
 8004aca:	f240 1125 	movw	r1, #293	; 0x125
 8004ace:	485e      	ldr	r0, [pc, #376]	; (8004c48 <HAL_CAN_Init+0x2a0>)
 8004ad0:	f7fe fde1 	bl	8003696 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d04f      	beq.n	8004b7c <HAL_CAN_Init+0x1d4>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae4:	d04a      	beq.n	8004b7c <HAL_CAN_Init+0x1d4>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aee:	d045      	beq.n	8004b7c <HAL_CAN_Init+0x1d4>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004af8:	d040      	beq.n	8004b7c <HAL_CAN_Init+0x1d4>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b02:	d03b      	beq.n	8004b7c <HAL_CAN_Init+0x1d4>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b0c:	d036      	beq.n	8004b7c <HAL_CAN_Init+0x1d4>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004b16:	d031      	beq.n	8004b7c <HAL_CAN_Init+0x1d4>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8004b20:	d02c      	beq.n	8004b7c <HAL_CAN_Init+0x1d4>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b2a:	d027      	beq.n	8004b7c <HAL_CAN_Init+0x1d4>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 8004b34:	d022      	beq.n	8004b7c <HAL_CAN_Init+0x1d4>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8004b3e:	d01d      	beq.n	8004b7c <HAL_CAN_Init+0x1d4>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 8004b48:	d018      	beq.n	8004b7c <HAL_CAN_Init+0x1d4>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b52:	d013      	beq.n	8004b7c <HAL_CAN_Init+0x1d4>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 8004b5c:	d00e      	beq.n	8004b7c <HAL_CAN_Init+0x1d4>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004b66:	d009      	beq.n	8004b7c <HAL_CAN_Init+0x1d4>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8004b70:	d004      	beq.n	8004b7c <HAL_CAN_Init+0x1d4>
 8004b72:	f44f 7193 	mov.w	r1, #294	; 0x126
 8004b76:	4834      	ldr	r0, [pc, #208]	; (8004c48 <HAL_CAN_Init+0x2a0>)
 8004b78:	f7fe fd8d 	bl	8003696 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d027      	beq.n	8004bd4 <HAL_CAN_Init+0x22c>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b8c:	d022      	beq.n	8004bd4 <HAL_CAN_Init+0x22c>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b96:	d01d      	beq.n	8004bd4 <HAL_CAN_Init+0x22c>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ba0:	d018      	beq.n	8004bd4 <HAL_CAN_Init+0x22c>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004baa:	d013      	beq.n	8004bd4 <HAL_CAN_Init+0x22c>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8004bb4:	d00e      	beq.n	8004bd4 <HAL_CAN_Init+0x22c>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004bbe:	d009      	beq.n	8004bd4 <HAL_CAN_Init+0x22c>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8004bc8:	d004      	beq.n	8004bd4 <HAL_CAN_Init+0x22c>
 8004bca:	f240 1127 	movw	r1, #295	; 0x127
 8004bce:	481e      	ldr	r0, [pc, #120]	; (8004c48 <HAL_CAN_Init+0x2a0>)
 8004bd0:	f7fe fd61 	bl	8003696 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d004      	beq.n	8004be6 <HAL_CAN_Init+0x23e>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be4:	d904      	bls.n	8004bf0 <HAL_CAN_Init+0x248>
 8004be6:	f44f 7194 	mov.w	r1, #296	; 0x128
 8004bea:	4817      	ldr	r0, [pc, #92]	; (8004c48 <HAL_CAN_Init+0x2a0>)
 8004bec:	f7fe fd53 	bl	8003696 <assert_failed>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d102      	bne.n	8004c02 <HAL_CAN_Init+0x25a>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7fc ff27 	bl	8001a50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0202 	bic.w	r2, r2, #2
 8004c10:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c12:	f7ff fe99 	bl	8004948 <HAL_GetTick>
 8004c16:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004c18:	e018      	b.n	8004c4c <HAL_CAN_Init+0x2a4>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004c1a:	f7ff fe95 	bl	8004948 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b0a      	cmp	r3, #10
 8004c26:	d911      	bls.n	8004c4c <HAL_CAN_Init+0x2a4>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2205      	movs	r2, #5
 8004c38:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e0cb      	b.n	8004dd8 <HAL_CAN_Init+0x430>
 8004c40:	40006400 	.word	0x40006400
 8004c44:	40006800 	.word	0x40006800
 8004c48:	0800e5e0 	.word	0x0800e5e0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1df      	bne.n	8004c1a <HAL_CAN_Init+0x272>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f042 0201 	orr.w	r2, r2, #1
 8004c68:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c6a:	f7ff fe6d 	bl	8004948 <HAL_GetTick>
 8004c6e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c70:	e012      	b.n	8004c98 <HAL_CAN_Init+0x2f0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004c72:	f7ff fe69 	bl	8004948 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b0a      	cmp	r3, #10
 8004c7e:	d90b      	bls.n	8004c98 <HAL_CAN_Init+0x2f0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2205      	movs	r2, #5
 8004c90:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e09f      	b.n	8004dd8 <HAL_CAN_Init+0x430>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0e5      	beq.n	8004c72 <HAL_CAN_Init+0x2ca>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	7e1b      	ldrb	r3, [r3, #24]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d108      	bne.n	8004cc0 <HAL_CAN_Init+0x318>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	e007      	b.n	8004cd0 <HAL_CAN_Init+0x328>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	7e5b      	ldrb	r3, [r3, #25]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d108      	bne.n	8004cea <HAL_CAN_Init+0x342>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	e007      	b.n	8004cfa <HAL_CAN_Init+0x352>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cf8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	7e9b      	ldrb	r3, [r3, #26]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d108      	bne.n	8004d14 <HAL_CAN_Init+0x36c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f042 0220 	orr.w	r2, r2, #32
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	e007      	b.n	8004d24 <HAL_CAN_Init+0x37c>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0220 	bic.w	r2, r2, #32
 8004d22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	7edb      	ldrb	r3, [r3, #27]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d108      	bne.n	8004d3e <HAL_CAN_Init+0x396>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0210 	bic.w	r2, r2, #16
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	e007      	b.n	8004d4e <HAL_CAN_Init+0x3a6>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0210 	orr.w	r2, r2, #16
 8004d4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	7f1b      	ldrb	r3, [r3, #28]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d108      	bne.n	8004d68 <HAL_CAN_Init+0x3c0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f042 0208 	orr.w	r2, r2, #8
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	e007      	b.n	8004d78 <HAL_CAN_Init+0x3d0>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0208 	bic.w	r2, r2, #8
 8004d76:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	7f5b      	ldrb	r3, [r3, #29]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d108      	bne.n	8004d92 <HAL_CAN_Init+0x3ea>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0204 	orr.w	r2, r2, #4
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	e007      	b.n	8004da2 <HAL_CAN_Init+0x3fa>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0204 	bic.w	r2, r2, #4
 8004da0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	ea42 0103 	orr.w	r1, r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	1e5a      	subs	r2, r3, #1
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004df6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004df8:	7cfb      	ldrb	r3, [r7, #19]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d003      	beq.n	8004e06 <HAL_CAN_ConfigFilter+0x26>
 8004dfe:	7cfb      	ldrb	r3, [r7, #19]
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	f040 812c 	bne.w	800505e <HAL_CAN_ConfigFilter+0x27e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e0e:	d304      	bcc.n	8004e1a <HAL_CAN_ConfigFilter+0x3a>
 8004e10:	f44f 7154 	mov.w	r1, #848	; 0x350
 8004e14:	4897      	ldr	r0, [pc, #604]	; (8005074 <HAL_CAN_ConfigFilter+0x294>)
 8004e16:	f7fe fc3e 	bl	8003696 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e22:	d304      	bcc.n	8004e2e <HAL_CAN_ConfigFilter+0x4e>
 8004e24:	f240 3151 	movw	r1, #849	; 0x351
 8004e28:	4892      	ldr	r0, [pc, #584]	; (8005074 <HAL_CAN_ConfigFilter+0x294>)
 8004e2a:	f7fe fc34 	bl	8003696 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e36:	d304      	bcc.n	8004e42 <HAL_CAN_ConfigFilter+0x62>
 8004e38:	f240 3152 	movw	r1, #850	; 0x352
 8004e3c:	488d      	ldr	r0, [pc, #564]	; (8005074 <HAL_CAN_ConfigFilter+0x294>)
 8004e3e:	f7fe fc2a 	bl	8003696 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e4a:	d304      	bcc.n	8004e56 <HAL_CAN_ConfigFilter+0x76>
 8004e4c:	f240 3153 	movw	r1, #851	; 0x353
 8004e50:	4888      	ldr	r0, [pc, #544]	; (8005074 <HAL_CAN_ConfigFilter+0x294>)
 8004e52:	f7fe fc20 	bl	8003696 <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d008      	beq.n	8004e70 <HAL_CAN_ConfigFilter+0x90>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d004      	beq.n	8004e70 <HAL_CAN_ConfigFilter+0x90>
 8004e66:	f44f 7155 	mov.w	r1, #852	; 0x354
 8004e6a:	4882      	ldr	r0, [pc, #520]	; (8005074 <HAL_CAN_ConfigFilter+0x294>)
 8004e6c:	f7fe fc13 	bl	8003696 <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d008      	beq.n	8004e8a <HAL_CAN_ConfigFilter+0xaa>
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d004      	beq.n	8004e8a <HAL_CAN_ConfigFilter+0xaa>
 8004e80:	f240 3155 	movw	r1, #853	; 0x355
 8004e84:	487b      	ldr	r0, [pc, #492]	; (8005074 <HAL_CAN_ConfigFilter+0x294>)
 8004e86:	f7fe fc06 	bl	8003696 <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d008      	beq.n	8004ea4 <HAL_CAN_ConfigFilter+0xc4>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d004      	beq.n	8004ea4 <HAL_CAN_ConfigFilter+0xc4>
 8004e9a:	f240 3156 	movw	r1, #854	; 0x356
 8004e9e:	4875      	ldr	r0, [pc, #468]	; (8005074 <HAL_CAN_ConfigFilter+0x294>)
 8004ea0:	f7fe fbf9 	bl	8003696 <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <HAL_CAN_ConfigFilter+0xde>
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d004      	beq.n	8004ebe <HAL_CAN_ConfigFilter+0xde>
 8004eb4:	f240 3157 	movw	r1, #855	; 0x357
 8004eb8:	486e      	ldr	r0, [pc, #440]	; (8005074 <HAL_CAN_ConfigFilter+0x294>)
 8004eba:	f7fe fbec 	bl	8003696 <assert_failed>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004ebe:	4b6e      	ldr	r3, [pc, #440]	; (8005078 <HAL_CAN_ConfigFilter+0x298>)
 8004ec0:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	2b1b      	cmp	r3, #27
 8004ec8:	d904      	bls.n	8004ed4 <HAL_CAN_ConfigFilter+0xf4>
 8004eca:	f240 3172 	movw	r1, #882	; 0x372
 8004ece:	4869      	ldr	r0, [pc, #420]	; (8005074 <HAL_CAN_ConfigFilter+0x294>)
 8004ed0:	f7fe fbe1 	bl	8003696 <assert_failed>
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	2b1b      	cmp	r3, #27
 8004eda:	d904      	bls.n	8004ee6 <HAL_CAN_ConfigFilter+0x106>
 8004edc:	f240 3173 	movw	r1, #883	; 0x373
 8004ee0:	4864      	ldr	r0, [pc, #400]	; (8005074 <HAL_CAN_ConfigFilter+0x294>)
 8004ee2:	f7fe fbd8 	bl	8003696 <assert_failed>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004eec:	f043 0201 	orr.w	r2, r3, #1
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004efc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	021b      	lsls	r3, r3, #8
 8004f12:	431a      	orrs	r2, r3
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	f003 031f 	and.w	r3, r3, #31
 8004f22:	2201      	movs	r2, #1
 8004f24:	fa02 f303 	lsl.w	r3, r2, r3
 8004f28:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	43db      	mvns	r3, r3
 8004f34:	401a      	ands	r2, r3
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d123      	bne.n	8004f8c <HAL_CAN_ConfigFilter+0x1ac>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	43db      	mvns	r3, r3
 8004f4e:	401a      	ands	r2, r3
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004f66:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	3248      	adds	r2, #72	; 0x48
 8004f6c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f80:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f82:	6979      	ldr	r1, [r7, #20]
 8004f84:	3348      	adds	r3, #72	; 0x48
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	440b      	add	r3, r1
 8004f8a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d122      	bne.n	8004fda <HAL_CAN_ConfigFilter+0x1fa>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004fb4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	3248      	adds	r2, #72	; 0x48
 8004fba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004fce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004fd0:	6979      	ldr	r1, [r7, #20]
 8004fd2:	3348      	adds	r3, #72	; 0x48
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	440b      	add	r3, r1
 8004fd8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d109      	bne.n	8004ff6 <HAL_CAN_ConfigFilter+0x216>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	43db      	mvns	r3, r3
 8004fec:	401a      	ands	r2, r3
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004ff4:	e007      	b.n	8005006 <HAL_CAN_ConfigFilter+0x226>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	431a      	orrs	r2, r3
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d109      	bne.n	8005022 <HAL_CAN_ConfigFilter+0x242>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	43db      	mvns	r3, r3
 8005018:	401a      	ands	r2, r3
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005020:	e007      	b.n	8005032 <HAL_CAN_ConfigFilter+0x252>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	431a      	orrs	r2, r3
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d107      	bne.n	800504a <HAL_CAN_ConfigFilter+0x26a>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	431a      	orrs	r2, r3
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005050:	f023 0201 	bic.w	r2, r3, #1
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	e006      	b.n	800506c <HAL_CAN_ConfigFilter+0x28c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
  }
}
 800506c:	4618      	mov	r0, r3
 800506e:	3718      	adds	r7, #24
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	0800e5e0 	.word	0x0800e5e0
 8005078:	40006400 	.word	0x40006400

0800507c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 3020 	ldrb.w	r3, [r3, #32]
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b01      	cmp	r3, #1
 800508e:	d12e      	bne.n	80050ee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0201 	bic.w	r2, r2, #1
 80050a6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050a8:	f7ff fc4e 	bl	8004948 <HAL_GetTick>
 80050ac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80050ae:	e012      	b.n	80050d6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80050b0:	f7ff fc4a 	bl	8004948 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b0a      	cmp	r3, #10
 80050bc:	d90b      	bls.n	80050d6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2205      	movs	r2, #5
 80050ce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e012      	b.n	80050fc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e5      	bne.n	80050b0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	e006      	b.n	80050fc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
  }
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
 8005110:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005118:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d008      	beq.n	800513c <HAL_CAN_AddTxMessage+0x38>
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b04      	cmp	r3, #4
 8005130:	d004      	beq.n	800513c <HAL_CAN_AddTxMessage+0x38>
 8005132:	f240 41e9 	movw	r1, #1257	; 0x4e9
 8005136:	4884      	ldr	r0, [pc, #528]	; (8005348 <HAL_CAN_AddTxMessage+0x244>)
 8005138:	f7fe faad 	bl	8003696 <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d008      	beq.n	8005156 <HAL_CAN_AddTxMessage+0x52>
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	2b02      	cmp	r3, #2
 800514a:	d004      	beq.n	8005156 <HAL_CAN_AddTxMessage+0x52>
 800514c:	f240 41ea 	movw	r1, #1258	; 0x4ea
 8005150:	487d      	ldr	r0, [pc, #500]	; (8005348 <HAL_CAN_AddTxMessage+0x244>)
 8005152:	f7fe faa0 	bl	8003696 <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	2b08      	cmp	r3, #8
 800515c:	d904      	bls.n	8005168 <HAL_CAN_AddTxMessage+0x64>
 800515e:	f240 41eb 	movw	r1, #1259	; 0x4eb
 8005162:	4879      	ldr	r0, [pc, #484]	; (8005348 <HAL_CAN_AddTxMessage+0x244>)
 8005164:	f7fe fa97 	bl	8003696 <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10a      	bne.n	8005186 <HAL_CAN_AddTxMessage+0x82>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005178:	d30f      	bcc.n	800519a <HAL_CAN_AddTxMessage+0x96>
 800517a:	f240 41ee 	movw	r1, #1262	; 0x4ee
 800517e:	4872      	ldr	r0, [pc, #456]	; (8005348 <HAL_CAN_AddTxMessage+0x244>)
 8005180:	f7fe fa89 	bl	8003696 <assert_failed>
 8005184:	e009      	b.n	800519a <HAL_CAN_AddTxMessage+0x96>
  }
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800518e:	d304      	bcc.n	800519a <HAL_CAN_AddTxMessage+0x96>
 8005190:	f240 41f2 	movw	r1, #1266	; 0x4f2
 8005194:	486c      	ldr	r0, [pc, #432]	; (8005348 <HAL_CAN_AddTxMessage+0x244>)
 8005196:	f7fe fa7e 	bl	8003696 <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	7d1b      	ldrb	r3, [r3, #20]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d008      	beq.n	80051b4 <HAL_CAN_AddTxMessage+0xb0>
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	7d1b      	ldrb	r3, [r3, #20]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d004      	beq.n	80051b4 <HAL_CAN_AddTxMessage+0xb0>
 80051aa:	f240 41f4 	movw	r1, #1268	; 0x4f4
 80051ae:	4866      	ldr	r0, [pc, #408]	; (8005348 <HAL_CAN_AddTxMessage+0x244>)
 80051b0:	f7fe fa71 	bl	8003696 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 80051b4:	7ffb      	ldrb	r3, [r7, #31]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d003      	beq.n	80051c2 <HAL_CAN_AddTxMessage+0xbe>
 80051ba:	7ffb      	ldrb	r3, [r7, #31]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	f040 80b8 	bne.w	8005332 <HAL_CAN_AddTxMessage+0x22e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d105      	bne.n	80051e2 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME2) != 0U))
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 80a0 	beq.w	8005322 <HAL_CAN_AddTxMessage+0x21e>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	0e1b      	lsrs	r3, r3, #24
 80051e6:	f003 0303 	and.w	r3, r3, #3
 80051ea:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d907      	bls.n	8005202 <HAL_CAN_AddTxMessage+0xfe>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e09e      	b.n	8005340 <HAL_CAN_AddTxMessage+0x23c>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005202:	2201      	movs	r2, #1
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	409a      	lsls	r2, r3
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10d      	bne.n	8005230 <HAL_CAN_AddTxMessage+0x12c>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800521e:	68f9      	ldr	r1, [r7, #12]
 8005220:	6809      	ldr	r1, [r1, #0]
 8005222:	431a      	orrs	r2, r3
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	3318      	adds	r3, #24
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	440b      	add	r3, r1
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	e00f      	b.n	8005250 <HAL_CAN_AddTxMessage+0x14c>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800523a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005240:	68f9      	ldr	r1, [r7, #12]
 8005242:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005244:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	3318      	adds	r3, #24
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	440b      	add	r3, r1
 800524e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6819      	ldr	r1, [r3, #0]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	3318      	adds	r3, #24
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	440b      	add	r3, r1
 8005260:	3304      	adds	r3, #4
 8005262:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	7d1b      	ldrb	r3, [r3, #20]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d111      	bne.n	8005290 <HAL_CAN_AddTxMessage+0x18c>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	3318      	adds	r3, #24
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	4413      	add	r3, r2
 8005278:	3304      	adds	r3, #4
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	6811      	ldr	r1, [r2, #0]
 8005280:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	3318      	adds	r3, #24
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	440b      	add	r3, r1
 800528c:	3304      	adds	r3, #4
 800528e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3307      	adds	r3, #7
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	061a      	lsls	r2, r3, #24
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3306      	adds	r3, #6
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	041b      	lsls	r3, r3, #16
 80052a0:	431a      	orrs	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	3305      	adds	r3, #5
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	4313      	orrs	r3, r2
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	3204      	adds	r2, #4
 80052b0:	7812      	ldrb	r2, [r2, #0]
 80052b2:	4610      	mov	r0, r2
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	6811      	ldr	r1, [r2, #0]
 80052b8:	ea43 0200 	orr.w	r2, r3, r0
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	011b      	lsls	r3, r3, #4
 80052c0:	440b      	add	r3, r1
 80052c2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80052c6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3303      	adds	r3, #3
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	061a      	lsls	r2, r3, #24
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3302      	adds	r3, #2
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	041b      	lsls	r3, r3, #16
 80052d8:	431a      	orrs	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	3301      	adds	r3, #1
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	021b      	lsls	r3, r3, #8
 80052e2:	4313      	orrs	r3, r2
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	7812      	ldrb	r2, [r2, #0]
 80052e8:	4610      	mov	r0, r2
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	6811      	ldr	r1, [r2, #0]
 80052ee:	ea43 0200 	orr.w	r2, r3, r0
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	440b      	add	r3, r1
 80052f8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80052fc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	3318      	adds	r3, #24
 8005306:	011b      	lsls	r3, r3, #4
 8005308:	4413      	add	r3, r2
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	6811      	ldr	r1, [r2, #0]
 8005310:	f043 0201 	orr.w	r2, r3, #1
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	3318      	adds	r3, #24
 8005318:	011b      	lsls	r3, r3, #4
 800531a:	440b      	add	r3, r1
 800531c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	e00e      	b.n	8005340 <HAL_CAN_AddTxMessage+0x23c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e006      	b.n	8005340 <HAL_CAN_AddTxMessage+0x23c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
  }
}
 8005340:	4618      	mov	r0, r3
 8005342:	3720      	adds	r7, #32
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	0800e5e0 	.word	0x0800e5e0

0800534c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005360:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d007      	beq.n	8005378 <HAL_CAN_GetRxMessage+0x2c>
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d004      	beq.n	8005378 <HAL_CAN_GetRxMessage+0x2c>
 800536e:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 8005372:	4884      	ldr	r0, [pc, #528]	; (8005584 <HAL_CAN_GetRxMessage+0x238>)
 8005374:	f7fe f98f 	bl	8003696 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8005378:	7dfb      	ldrb	r3, [r7, #23]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d003      	beq.n	8005386 <HAL_CAN_GetRxMessage+0x3a>
 800537e:	7dfb      	ldrb	r3, [r7, #23]
 8005380:	2b02      	cmp	r3, #2
 8005382:	f040 80f3 	bne.w	800556c <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10e      	bne.n	80053aa <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d116      	bne.n	80053c8 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e0e7      	b.n	800557a <HAL_CAN_GetRxMessage+0x22e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	f003 0303 	and.w	r3, r3, #3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d107      	bne.n	80053c8 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e0d8      	b.n	800557a <HAL_CAN_GetRxMessage+0x22e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	331b      	adds	r3, #27
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	4413      	add	r3, r2
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0204 	and.w	r2, r3, #4
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10c      	bne.n	8005400 <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	331b      	adds	r3, #27
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	4413      	add	r3, r2
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	0d5b      	lsrs	r3, r3, #21
 80053f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	e00b      	b.n	8005418 <HAL_CAN_GetRxMessage+0xcc>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	331b      	adds	r3, #27
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	4413      	add	r3, r2
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	08db      	lsrs	r3, r3, #3
 8005410:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	331b      	adds	r3, #27
 8005420:	011b      	lsls	r3, r3, #4
 8005422:	4413      	add	r3, r2
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0202 	and.w	r2, r3, #2
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	331b      	adds	r3, #27
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	4413      	add	r3, r2
 800543a:	3304      	adds	r3, #4
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 020f 	and.w	r2, r3, #15
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	331b      	adds	r3, #27
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	4413      	add	r3, r2
 8005452:	3304      	adds	r3, #4
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	0a1b      	lsrs	r3, r3, #8
 8005458:	b2da      	uxtb	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	331b      	adds	r3, #27
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	4413      	add	r3, r2
 800546a:	3304      	adds	r3, #4
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	0c1b      	lsrs	r3, r3, #16
 8005470:	b29a      	uxth	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	4413      	add	r3, r2
 8005480:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	b2da      	uxtb	r2, r3
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	4413      	add	r3, r2
 8005496:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	0a1a      	lsrs	r2, r3, #8
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	3301      	adds	r3, #1
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	0c1a      	lsrs	r2, r3, #16
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	3302      	adds	r3, #2
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	0e1a      	lsrs	r2, r3, #24
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	3303      	adds	r3, #3
 80054d6:	b2d2      	uxtb	r2, r2
 80054d8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	3304      	adds	r3, #4
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	0a1a      	lsrs	r2, r3, #8
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	3305      	adds	r3, #5
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	011b      	lsls	r3, r3, #4
 8005514:	4413      	add	r3, r2
 8005516:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	0c1a      	lsrs	r2, r3, #16
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	3306      	adds	r3, #6
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	4413      	add	r3, r2
 8005530:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	0e1a      	lsrs	r2, r3, #24
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	3307      	adds	r3, #7
 800553c:	b2d2      	uxtb	r2, r2
 800553e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d108      	bne.n	8005558 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68da      	ldr	r2, [r3, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f042 0220 	orr.w	r2, r2, #32
 8005554:	60da      	str	r2, [r3, #12]
 8005556:	e007      	b.n	8005568 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0220 	orr.w	r2, r2, #32
 8005566:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	e006      	b.n	800557a <HAL_CAN_GetRxMessage+0x22e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
  }
}
 800557a:	4618      	mov	r0, r3
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	0800e5e0 	.word	0x0800e5e0

08005588 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005598:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	4a11      	ldr	r2, [pc, #68]	; (80055e4 <HAL_CAN_ActivateNotification+0x5c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d904      	bls.n	80055ac <HAL_CAN_ActivateNotification+0x24>
 80055a2:	f44f 61d0 	mov.w	r1, #1664	; 0x680
 80055a6:	4810      	ldr	r0, [pc, #64]	; (80055e8 <HAL_CAN_ActivateNotification+0x60>)
 80055a8:	f7fe f875 	bl	8003696 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d002      	beq.n	80055b8 <HAL_CAN_ActivateNotification+0x30>
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d109      	bne.n	80055cc <HAL_CAN_ActivateNotification+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6959      	ldr	r1, [r3, #20]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80055c8:	2300      	movs	r3, #0
 80055ca:	e006      	b.n	80055da <HAL_CAN_ActivateNotification+0x52>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
  }
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	00038f7f 	.word	0x00038f7f
 80055e8:	0800e5e0 	.word	0x0800e5e0

080055ec <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08a      	sub	sp, #40	; 0x28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80055f4:	2300      	movs	r3, #0
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d07c      	beq.n	800572c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d023      	beq.n	8005684 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2201      	movs	r2, #1
 8005642:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f983 	bl	800595a <HAL_CAN_TxMailbox0CompleteCallback>
 8005654:	e016      	b.n	8005684 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	d004      	beq.n	800566a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005662:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005666:	627b      	str	r3, [r7, #36]	; 0x24
 8005668:	e00c      	b.n	8005684 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	f003 0308 	and.w	r3, r3, #8
 8005670:	2b00      	cmp	r3, #0
 8005672:	d004      	beq.n	800567e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800567a:	627b      	str	r3, [r7, #36]	; 0x24
 800567c:	e002      	b.n	8005684 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f989 	bl	8005996 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568a:	2b00      	cmp	r3, #0
 800568c:	d024      	beq.n	80056d8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005696:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f963 	bl	800596e <HAL_CAN_TxMailbox1CompleteCallback>
 80056a8:	e016      	b.n	80056d8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d004      	beq.n	80056be <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80056ba:	627b      	str	r3, [r7, #36]	; 0x24
 80056bc:	e00c      	b.n	80056d8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d004      	beq.n	80056d2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056ce:	627b      	str	r3, [r7, #36]	; 0x24
 80056d0:	e002      	b.n	80056d8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f969 	bl	80059aa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d024      	beq.n	800572c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80056ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f943 	bl	8005982 <HAL_CAN_TxMailbox2CompleteCallback>
 80056fc:	e016      	b.n	800572c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d004      	beq.n	8005712 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800570e:	627b      	str	r3, [r7, #36]	; 0x24
 8005710:	e00c      	b.n	800572c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d004      	beq.n	8005726 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005722:	627b      	str	r3, [r7, #36]	; 0x24
 8005724:	e002      	b.n	800572c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f949 	bl	80059be <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	f003 0308 	and.w	r3, r3, #8
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00c      	beq.n	8005750 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f003 0310 	and.w	r3, r3, #16
 800573c:	2b00      	cmp	r3, #0
 800573e:	d007      	beq.n	8005750 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005746:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2210      	movs	r2, #16
 800574e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	f003 0304 	and.w	r3, r3, #4
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00b      	beq.n	8005772 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b00      	cmp	r3, #0
 8005762:	d006      	beq.n	8005772 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2208      	movs	r2, #8
 800576a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f930 	bl	80059d2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d009      	beq.n	8005790 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7fd fc6c 	bl	8003068 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00c      	beq.n	80057b4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f003 0310 	and.w	r3, r3, #16
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d007      	beq.n	80057b4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2210      	movs	r2, #16
 80057b2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	f003 0320 	and.w	r3, r3, #32
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00b      	beq.n	80057d6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f003 0308 	and.w	r3, r3, #8
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d006      	beq.n	80057d6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2208      	movs	r2, #8
 80057ce:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f912 	bl	80059fa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	f003 0310 	and.w	r3, r3, #16
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d009      	beq.n	80057f4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d002      	beq.n	80057f4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f8f9 	bl	80059e6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80057f4:	6a3b      	ldr	r3, [r7, #32]
 80057f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00b      	beq.n	8005816 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	f003 0310 	and.w	r3, r3, #16
 8005804:	2b00      	cmp	r3, #0
 8005806:	d006      	beq.n	8005816 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2210      	movs	r2, #16
 800580e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f8fc 	bl	8005a0e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00b      	beq.n	8005838 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	f003 0308 	and.w	r3, r3, #8
 8005826:	2b00      	cmp	r3, #0
 8005828:	d006      	beq.n	8005838 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2208      	movs	r2, #8
 8005830:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f8f5 	bl	8005a22 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d07b      	beq.n	800593a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	f003 0304 	and.w	r3, r3, #4
 8005848:	2b00      	cmp	r3, #0
 800584a:	d072      	beq.n	8005932 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005852:	2b00      	cmp	r3, #0
 8005854:	d008      	beq.n	8005868 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	f043 0301 	orr.w	r3, r3, #1
 8005866:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800586e:	2b00      	cmp	r3, #0
 8005870:	d008      	beq.n	8005884 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	f043 0302 	orr.w	r3, r3, #2
 8005882:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800588a:	2b00      	cmp	r3, #0
 800588c:	d008      	beq.n	80058a0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	f043 0304 	orr.w	r3, r3, #4
 800589e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d043      	beq.n	8005932 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d03e      	beq.n	8005932 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058ba:	2b60      	cmp	r3, #96	; 0x60
 80058bc:	d02b      	beq.n	8005916 <HAL_CAN_IRQHandler+0x32a>
 80058be:	2b60      	cmp	r3, #96	; 0x60
 80058c0:	d82e      	bhi.n	8005920 <HAL_CAN_IRQHandler+0x334>
 80058c2:	2b50      	cmp	r3, #80	; 0x50
 80058c4:	d022      	beq.n	800590c <HAL_CAN_IRQHandler+0x320>
 80058c6:	2b50      	cmp	r3, #80	; 0x50
 80058c8:	d82a      	bhi.n	8005920 <HAL_CAN_IRQHandler+0x334>
 80058ca:	2b40      	cmp	r3, #64	; 0x40
 80058cc:	d019      	beq.n	8005902 <HAL_CAN_IRQHandler+0x316>
 80058ce:	2b40      	cmp	r3, #64	; 0x40
 80058d0:	d826      	bhi.n	8005920 <HAL_CAN_IRQHandler+0x334>
 80058d2:	2b30      	cmp	r3, #48	; 0x30
 80058d4:	d010      	beq.n	80058f8 <HAL_CAN_IRQHandler+0x30c>
 80058d6:	2b30      	cmp	r3, #48	; 0x30
 80058d8:	d822      	bhi.n	8005920 <HAL_CAN_IRQHandler+0x334>
 80058da:	2b10      	cmp	r3, #16
 80058dc:	d002      	beq.n	80058e4 <HAL_CAN_IRQHandler+0x2f8>
 80058de:	2b20      	cmp	r3, #32
 80058e0:	d005      	beq.n	80058ee <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80058e2:	e01d      	b.n	8005920 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	f043 0308 	orr.w	r3, r3, #8
 80058ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80058ec:	e019      	b.n	8005922 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	f043 0310 	orr.w	r3, r3, #16
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80058f6:	e014      	b.n	8005922 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	f043 0320 	orr.w	r3, r3, #32
 80058fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005900:	e00f      	b.n	8005922 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005908:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800590a:	e00a      	b.n	8005922 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005912:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005914:	e005      	b.n	8005922 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800591e:	e000      	b.n	8005922 <HAL_CAN_IRQHandler+0x336>
            break;
 8005920:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	699a      	ldr	r2, [r3, #24]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005930:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2204      	movs	r2, #4
 8005938:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	2b00      	cmp	r3, #0
 800593e:	d008      	beq.n	8005952 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f872 	bl	8005a36 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005952:	bf00      	nop
 8005954:	3728      	adds	r7, #40	; 0x28
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800595a:	b480      	push	{r7}
 800595c:	b083      	sub	sp, #12
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005976:	bf00      	nop
 8005978:	370c      	adds	r7, #12
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800598a:	bf00      	nop
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800599e:	bf00      	nop
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80059da:	bf00      	nop
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005a02:	bf00      	nop
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005a3e:	bf00      	nop
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
	...

08005a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f003 0307 	and.w	r3, r3, #7
 8005a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a5c:	4b0c      	ldr	r3, [pc, #48]	; (8005a90 <__NVIC_SetPriorityGrouping+0x44>)
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a68:	4013      	ands	r3, r2
 8005a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a7e:	4a04      	ldr	r2, [pc, #16]	; (8005a90 <__NVIC_SetPriorityGrouping+0x44>)
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	60d3      	str	r3, [r2, #12]
}
 8005a84:	bf00      	nop
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	e000ed00 	.word	0xe000ed00

08005a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a98:	4b04      	ldr	r3, [pc, #16]	; (8005aac <__NVIC_GetPriorityGrouping+0x18>)
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	0a1b      	lsrs	r3, r3, #8
 8005a9e:	f003 0307 	and.w	r3, r3, #7
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	e000ed00 	.word	0xe000ed00

08005ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	db0b      	blt.n	8005ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ac2:	79fb      	ldrb	r3, [r7, #7]
 8005ac4:	f003 021f 	and.w	r2, r3, #31
 8005ac8:	4907      	ldr	r1, [pc, #28]	; (8005ae8 <__NVIC_EnableIRQ+0x38>)
 8005aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ace:	095b      	lsrs	r3, r3, #5
 8005ad0:	2001      	movs	r0, #1
 8005ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8005ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	e000e100 	.word	0xe000e100

08005aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	4603      	mov	r3, r0
 8005af4:	6039      	str	r1, [r7, #0]
 8005af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	db0a      	blt.n	8005b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	490c      	ldr	r1, [pc, #48]	; (8005b38 <__NVIC_SetPriority+0x4c>)
 8005b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b0a:	0112      	lsls	r2, r2, #4
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	440b      	add	r3, r1
 8005b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b14:	e00a      	b.n	8005b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	4908      	ldr	r1, [pc, #32]	; (8005b3c <__NVIC_SetPriority+0x50>)
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	3b04      	subs	r3, #4
 8005b24:	0112      	lsls	r2, r2, #4
 8005b26:	b2d2      	uxtb	r2, r2
 8005b28:	440b      	add	r3, r1
 8005b2a:	761a      	strb	r2, [r3, #24]
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	e000e100 	.word	0xe000e100
 8005b3c:	e000ed00 	.word	0xe000ed00

08005b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b089      	sub	sp, #36	; 0x24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f003 0307 	and.w	r3, r3, #7
 8005b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	f1c3 0307 	rsb	r3, r3, #7
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	bf28      	it	cs
 8005b5e:	2304      	movcs	r3, #4
 8005b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	3304      	adds	r3, #4
 8005b66:	2b06      	cmp	r3, #6
 8005b68:	d902      	bls.n	8005b70 <NVIC_EncodePriority+0x30>
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	3b03      	subs	r3, #3
 8005b6e:	e000      	b.n	8005b72 <NVIC_EncodePriority+0x32>
 8005b70:	2300      	movs	r3, #0
 8005b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7e:	43da      	mvns	r2, r3
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	401a      	ands	r2, r3
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b92:	43d9      	mvns	r1, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b98:	4313      	orrs	r3, r2
         );
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3724      	adds	r7, #36	; 0x24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
	...

08005ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bb8:	d301      	bcc.n	8005bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e00f      	b.n	8005bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bbe:	4a0a      	ldr	r2, [pc, #40]	; (8005be8 <SysTick_Config+0x40>)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bc6:	210f      	movs	r1, #15
 8005bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bcc:	f7ff ff8e 	bl	8005aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bd0:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <SysTick_Config+0x40>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bd6:	4b04      	ldr	r3, [pc, #16]	; (8005be8 <SysTick_Config+0x40>)
 8005bd8:	2207      	movs	r2, #7
 8005bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	e000e010 	.word	0xe000e010

08005bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b07      	cmp	r3, #7
 8005bf8:	d00f      	beq.n	8005c1a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b06      	cmp	r3, #6
 8005bfe:	d00c      	beq.n	8005c1a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b05      	cmp	r3, #5
 8005c04:	d009      	beq.n	8005c1a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d006      	beq.n	8005c1a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d003      	beq.n	8005c1a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8005c12:	2192      	movs	r1, #146	; 0x92
 8005c14:	4804      	ldr	r0, [pc, #16]	; (8005c28 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8005c16:	f7fd fd3e 	bl	8003696 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff ff16 	bl	8005a4c <__NVIC_SetPriorityGrouping>
}
 8005c20:	bf00      	nop
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	0800e618 	.word	0x0800e618

08005c2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	4603      	mov	r3, r0
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b0f      	cmp	r3, #15
 8005c42:	d903      	bls.n	8005c4c <HAL_NVIC_SetPriority+0x20>
 8005c44:	21aa      	movs	r1, #170	; 0xaa
 8005c46:	480e      	ldr	r0, [pc, #56]	; (8005c80 <HAL_NVIC_SetPriority+0x54>)
 8005c48:	f7fd fd25 	bl	8003696 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2b0f      	cmp	r3, #15
 8005c50:	d903      	bls.n	8005c5a <HAL_NVIC_SetPriority+0x2e>
 8005c52:	21ab      	movs	r1, #171	; 0xab
 8005c54:	480a      	ldr	r0, [pc, #40]	; (8005c80 <HAL_NVIC_SetPriority+0x54>)
 8005c56:	f7fd fd1e 	bl	8003696 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c5a:	f7ff ff1b 	bl	8005a94 <__NVIC_GetPriorityGrouping>
 8005c5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	68b9      	ldr	r1, [r7, #8]
 8005c64:	6978      	ldr	r0, [r7, #20]
 8005c66:	f7ff ff6b 	bl	8005b40 <NVIC_EncodePriority>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c70:	4611      	mov	r1, r2
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff ff3a 	bl	8005aec <__NVIC_SetPriority>
}
 8005c78:	bf00      	nop
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	0800e618 	.word	0x0800e618

08005c84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8005c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	da03      	bge.n	8005c9e <HAL_NVIC_EnableIRQ+0x1a>
 8005c96:	21be      	movs	r1, #190	; 0xbe
 8005c98:	4805      	ldr	r0, [pc, #20]	; (8005cb0 <HAL_NVIC_EnableIRQ+0x2c>)
 8005c9a:	f7fd fcfc 	bl	8003696 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff ff04 	bl	8005ab0 <__NVIC_EnableIRQ>
}
 8005ca8:	bf00      	nop
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	0800e618 	.word	0x0800e618

08005cb4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7ff ff73 	bl	8005ba8 <SysTick_Config>
 8005cc2:	4603      	mov	r3, r0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d007      	beq.n	8005cea <HAL_SYSTICK_CLKSourceConfig+0x1e>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d004      	beq.n	8005cea <HAL_SYSTICK_CLKSourceConfig+0x1e>
 8005ce0:	f240 11c9 	movw	r1, #457	; 0x1c9
 8005ce4:	480b      	ldr	r0, [pc, #44]	; (8005d14 <HAL_SYSTICK_CLKSourceConfig+0x48>)
 8005ce6:	f7fd fcd6 	bl	8003696 <assert_failed>
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	d106      	bne.n	8005cfe <HAL_SYSTICK_CLKSourceConfig+0x32>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8005cf0:	4b09      	ldr	r3, [pc, #36]	; (8005d18 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a08      	ldr	r2, [pc, #32]	; (8005d18 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8005cf6:	f043 0304 	orr.w	r3, r3, #4
 8005cfa:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8005cfc:	e005      	b.n	8005d0a <HAL_SYSTICK_CLKSourceConfig+0x3e>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8005cfe:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a05      	ldr	r2, [pc, #20]	; (8005d18 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 8005d04:	f023 0304 	bic.w	r3, r3, #4
 8005d08:	6013      	str	r3, [r2, #0]
}
 8005d0a:	bf00      	nop
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	0800e618 	.word	0x0800e618
 8005d18:	e000e010 	.word	0xe000e010

08005d1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005d28:	f7fe fe0e 	bl	8004948 <HAL_GetTick>
 8005d2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e204      	b.n	8006142 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a97      	ldr	r2, [pc, #604]	; (8005f9c <HAL_DMA_Init+0x280>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d04e      	beq.n	8005de0 <HAL_DMA_Init+0xc4>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a96      	ldr	r2, [pc, #600]	; (8005fa0 <HAL_DMA_Init+0x284>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d049      	beq.n	8005de0 <HAL_DMA_Init+0xc4>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a94      	ldr	r2, [pc, #592]	; (8005fa4 <HAL_DMA_Init+0x288>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d044      	beq.n	8005de0 <HAL_DMA_Init+0xc4>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a93      	ldr	r2, [pc, #588]	; (8005fa8 <HAL_DMA_Init+0x28c>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d03f      	beq.n	8005de0 <HAL_DMA_Init+0xc4>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a91      	ldr	r2, [pc, #580]	; (8005fac <HAL_DMA_Init+0x290>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d03a      	beq.n	8005de0 <HAL_DMA_Init+0xc4>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a90      	ldr	r2, [pc, #576]	; (8005fb0 <HAL_DMA_Init+0x294>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d035      	beq.n	8005de0 <HAL_DMA_Init+0xc4>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a8e      	ldr	r2, [pc, #568]	; (8005fb4 <HAL_DMA_Init+0x298>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d030      	beq.n	8005de0 <HAL_DMA_Init+0xc4>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a8d      	ldr	r2, [pc, #564]	; (8005fb8 <HAL_DMA_Init+0x29c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d02b      	beq.n	8005de0 <HAL_DMA_Init+0xc4>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a8b      	ldr	r2, [pc, #556]	; (8005fbc <HAL_DMA_Init+0x2a0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d026      	beq.n	8005de0 <HAL_DMA_Init+0xc4>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a8a      	ldr	r2, [pc, #552]	; (8005fc0 <HAL_DMA_Init+0x2a4>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d021      	beq.n	8005de0 <HAL_DMA_Init+0xc4>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a88      	ldr	r2, [pc, #544]	; (8005fc4 <HAL_DMA_Init+0x2a8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d01c      	beq.n	8005de0 <HAL_DMA_Init+0xc4>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a87      	ldr	r2, [pc, #540]	; (8005fc8 <HAL_DMA_Init+0x2ac>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d017      	beq.n	8005de0 <HAL_DMA_Init+0xc4>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a85      	ldr	r2, [pc, #532]	; (8005fcc <HAL_DMA_Init+0x2b0>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d012      	beq.n	8005de0 <HAL_DMA_Init+0xc4>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a84      	ldr	r2, [pc, #528]	; (8005fd0 <HAL_DMA_Init+0x2b4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d00d      	beq.n	8005de0 <HAL_DMA_Init+0xc4>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a82      	ldr	r2, [pc, #520]	; (8005fd4 <HAL_DMA_Init+0x2b8>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d008      	beq.n	8005de0 <HAL_DMA_Init+0xc4>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a81      	ldr	r2, [pc, #516]	; (8005fd8 <HAL_DMA_Init+0x2bc>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d003      	beq.n	8005de0 <HAL_DMA_Init+0xc4>
 8005dd8:	21b8      	movs	r1, #184	; 0xb8
 8005dda:	4880      	ldr	r0, [pc, #512]	; (8005fdc <HAL_DMA_Init+0x2c0>)
 8005ddc:	f7fd fc5b 	bl	8003696 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d026      	beq.n	8005e36 <HAL_DMA_Init+0x11a>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005df0:	d021      	beq.n	8005e36 <HAL_DMA_Init+0x11a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005dfa:	d01c      	beq.n	8005e36 <HAL_DMA_Init+0x11a>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8005e04:	d017      	beq.n	8005e36 <HAL_DMA_Init+0x11a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e0e:	d012      	beq.n	8005e36 <HAL_DMA_Init+0x11a>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8005e18:	d00d      	beq.n	8005e36 <HAL_DMA_Init+0x11a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005e22:	d008      	beq.n	8005e36 <HAL_DMA_Init+0x11a>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8005e2c:	d003      	beq.n	8005e36 <HAL_DMA_Init+0x11a>
 8005e2e:	21b9      	movs	r1, #185	; 0xb9
 8005e30:	486a      	ldr	r0, [pc, #424]	; (8005fdc <HAL_DMA_Init+0x2c0>)
 8005e32:	f7fd fc30 	bl	8003696 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00b      	beq.n	8005e56 <HAL_DMA_Init+0x13a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	2b40      	cmp	r3, #64	; 0x40
 8005e44:	d007      	beq.n	8005e56 <HAL_DMA_Init+0x13a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	2b80      	cmp	r3, #128	; 0x80
 8005e4c:	d003      	beq.n	8005e56 <HAL_DMA_Init+0x13a>
 8005e4e:	21ba      	movs	r1, #186	; 0xba
 8005e50:	4862      	ldr	r0, [pc, #392]	; (8005fdc <HAL_DMA_Init+0x2c0>)
 8005e52:	f7fd fc20 	bl	8003696 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e5e:	d007      	beq.n	8005e70 <HAL_DMA_Init+0x154>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <HAL_DMA_Init+0x154>
 8005e68:	21bb      	movs	r1, #187	; 0xbb
 8005e6a:	485c      	ldr	r0, [pc, #368]	; (8005fdc <HAL_DMA_Init+0x2c0>)
 8005e6c:	f7fd fc13 	bl	8003696 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e78:	d007      	beq.n	8005e8a <HAL_DMA_Init+0x16e>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <HAL_DMA_Init+0x16e>
 8005e82:	21bc      	movs	r1, #188	; 0xbc
 8005e84:	4855      	ldr	r0, [pc, #340]	; (8005fdc <HAL_DMA_Init+0x2c0>)
 8005e86:	f7fd fc06 	bl	8003696 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00d      	beq.n	8005eae <HAL_DMA_Init+0x192>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e9a:	d008      	beq.n	8005eae <HAL_DMA_Init+0x192>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea4:	d003      	beq.n	8005eae <HAL_DMA_Init+0x192>
 8005ea6:	21bd      	movs	r1, #189	; 0xbd
 8005ea8:	484c      	ldr	r0, [pc, #304]	; (8005fdc <HAL_DMA_Init+0x2c0>)
 8005eaa:	f7fd fbf4 	bl	8003696 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00d      	beq.n	8005ed2 <HAL_DMA_Init+0x1b6>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ebe:	d008      	beq.n	8005ed2 <HAL_DMA_Init+0x1b6>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ec8:	d003      	beq.n	8005ed2 <HAL_DMA_Init+0x1b6>
 8005eca:	21be      	movs	r1, #190	; 0xbe
 8005ecc:	4843      	ldr	r0, [pc, #268]	; (8005fdc <HAL_DMA_Init+0x2c0>)
 8005ece:	f7fd fbe2 	bl	8003696 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00c      	beq.n	8005ef4 <HAL_DMA_Init+0x1d8>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ee2:	d007      	beq.n	8005ef4 <HAL_DMA_Init+0x1d8>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	2b20      	cmp	r3, #32
 8005eea:	d003      	beq.n	8005ef4 <HAL_DMA_Init+0x1d8>
 8005eec:	21bf      	movs	r1, #191	; 0xbf
 8005eee:	483b      	ldr	r0, [pc, #236]	; (8005fdc <HAL_DMA_Init+0x2c0>)
 8005ef0:	f7fd fbd1 	bl	8003696 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d012      	beq.n	8005f22 <HAL_DMA_Init+0x206>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f04:	d00d      	beq.n	8005f22 <HAL_DMA_Init+0x206>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f0e:	d008      	beq.n	8005f22 <HAL_DMA_Init+0x206>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f18:	d003      	beq.n	8005f22 <HAL_DMA_Init+0x206>
 8005f1a:	21c0      	movs	r1, #192	; 0xc0
 8005f1c:	482f      	ldr	r0, [pc, #188]	; (8005fdc <HAL_DMA_Init+0x2c0>)
 8005f1e:	f7fd fbba 	bl	8003696 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d007      	beq.n	8005f3a <HAL_DMA_Init+0x21e>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	2b04      	cmp	r3, #4
 8005f30:	d003      	beq.n	8005f3a <HAL_DMA_Init+0x21e>
 8005f32:	21c1      	movs	r1, #193	; 0xc1
 8005f34:	4829      	ldr	r0, [pc, #164]	; (8005fdc <HAL_DMA_Init+0x2c0>)
 8005f36:	f7fd fbae 	bl	8003696 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d065      	beq.n	800600e <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00f      	beq.n	8005f6a <HAL_DMA_Init+0x24e>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d00b      	beq.n	8005f6a <HAL_DMA_Init+0x24e>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d007      	beq.n	8005f6a <HAL_DMA_Init+0x24e>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d003      	beq.n	8005f6a <HAL_DMA_Init+0x24e>
 8005f62:	21c6      	movs	r1, #198	; 0xc6
 8005f64:	481d      	ldr	r0, [pc, #116]	; (8005fdc <HAL_DMA_Init+0x2c0>)
 8005f66:	f7fd fb96 	bl	8003696 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d036      	beq.n	8005fe0 <HAL_DMA_Init+0x2c4>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f7a:	d031      	beq.n	8005fe0 <HAL_DMA_Init+0x2c4>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f84:	d02c      	beq.n	8005fe0 <HAL_DMA_Init+0x2c4>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f8e:	d027      	beq.n	8005fe0 <HAL_DMA_Init+0x2c4>
 8005f90:	21c7      	movs	r1, #199	; 0xc7
 8005f92:	4812      	ldr	r0, [pc, #72]	; (8005fdc <HAL_DMA_Init+0x2c0>)
 8005f94:	f7fd fb7f 	bl	8003696 <assert_failed>
 8005f98:	e022      	b.n	8005fe0 <HAL_DMA_Init+0x2c4>
 8005f9a:	bf00      	nop
 8005f9c:	40026010 	.word	0x40026010
 8005fa0:	40026028 	.word	0x40026028
 8005fa4:	40026040 	.word	0x40026040
 8005fa8:	40026058 	.word	0x40026058
 8005fac:	40026070 	.word	0x40026070
 8005fb0:	40026088 	.word	0x40026088
 8005fb4:	400260a0 	.word	0x400260a0
 8005fb8:	400260b8 	.word	0x400260b8
 8005fbc:	40026410 	.word	0x40026410
 8005fc0:	40026428 	.word	0x40026428
 8005fc4:	40026440 	.word	0x40026440
 8005fc8:	40026458 	.word	0x40026458
 8005fcc:	40026470 	.word	0x40026470
 8005fd0:	40026488 	.word	0x40026488
 8005fd4:	400264a0 	.word	0x400264a0
 8005fd8:	400264b8 	.word	0x400264b8
 8005fdc:	0800e654 	.word	0x0800e654
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d012      	beq.n	800600e <HAL_DMA_Init+0x2f2>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ff0:	d00d      	beq.n	800600e <HAL_DMA_Init+0x2f2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ffa:	d008      	beq.n	800600e <HAL_DMA_Init+0x2f2>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006000:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006004:	d003      	beq.n	800600e <HAL_DMA_Init+0x2f2>
 8006006:	21c8      	movs	r1, #200	; 0xc8
 8006008:	4850      	ldr	r0, [pc, #320]	; (800614c <HAL_DMA_Init+0x430>)
 800600a:	f7fd fb44 	bl	8003696 <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2202      	movs	r2, #2
 800601a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0201 	bic.w	r2, r2, #1
 800602c:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800602e:	e00f      	b.n	8006050 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006030:	f7fe fc8a 	bl	8004948 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b05      	cmp	r3, #5
 800603c:	d908      	bls.n	8006050 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2220      	movs	r2, #32
 8006042:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2203      	movs	r2, #3
 8006048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e078      	b.n	8006142 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1e8      	bne.n	8006030 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4b39      	ldr	r3, [pc, #228]	; (8006150 <HAL_DMA_Init+0x434>)
 800606a:	4013      	ands	r3, r2
 800606c:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800607c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006088:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006094:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d107      	bne.n	80060ba <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b2:	4313      	orrs	r3, r2
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f023 0307 	bic.w	r3, r3, #7
 80060d0:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	4313      	orrs	r3, r2
 80060da:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	2b04      	cmp	r3, #4
 80060e2:	d117      	bne.n	8006114 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00e      	beq.n	8006114 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fa80 	bl	80065fc <DMA_CheckFifoParam>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d008      	beq.n	8006114 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2240      	movs	r2, #64	; 0x40
 8006106:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006110:	2301      	movs	r3, #1
 8006112:	e016      	b.n	8006142 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 fa37 	bl	8006590 <DMA_CalcBaseAndBitshift>
 8006122:	4603      	mov	r3, r0
 8006124:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800612a:	223f      	movs	r2, #63	; 0x3f
 800612c:	409a      	lsls	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3718      	adds	r7, #24
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	0800e654 	.word	0x0800e654
 8006150:	f010803f 	.word	0xf010803f

08006154 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006162:	2300      	movs	r3, #0
 8006164:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800616a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <HAL_DMA_Start_IT+0x26>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006178:	d304      	bcc.n	8006184 <HAL_DMA_Start_IT+0x30>
 800617a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800617e:	4827      	ldr	r0, [pc, #156]	; (800621c <HAL_DMA_Start_IT+0xc8>)
 8006180:	f7fd fa89 	bl	8003696 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800618a:	2b01      	cmp	r3, #1
 800618c:	d101      	bne.n	8006192 <HAL_DMA_Start_IT+0x3e>
 800618e:	2302      	movs	r3, #2
 8006190:	e040      	b.n	8006214 <HAL_DMA_Start_IT+0xc0>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d12f      	bne.n	8006206 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2202      	movs	r2, #2
 80061aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	68b9      	ldr	r1, [r7, #8]
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 f9ba 	bl	8006534 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c4:	223f      	movs	r2, #63	; 0x3f
 80061c6:	409a      	lsls	r2, r3
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f042 0216 	orr.w	r2, r2, #22
 80061da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d007      	beq.n	80061f4 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f042 0208 	orr.w	r2, r2, #8
 80061f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0201 	orr.w	r2, r2, #1
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	e005      	b.n	8006212 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800620e:	2302      	movs	r3, #2
 8006210:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006212:	7dfb      	ldrb	r3, [r7, #23]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	0800e654 	.word	0x0800e654

08006220 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800622c:	4b92      	ldr	r3, [pc, #584]	; (8006478 <HAL_DMA_IRQHandler+0x258>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a92      	ldr	r2, [pc, #584]	; (800647c <HAL_DMA_IRQHandler+0x25c>)
 8006232:	fba2 2303 	umull	r2, r3, r2, r3
 8006236:	0a9b      	lsrs	r3, r3, #10
 8006238:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800623e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800624a:	2208      	movs	r2, #8
 800624c:	409a      	lsls	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4013      	ands	r3, r2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d01a      	beq.n	800628c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0304 	and.w	r3, r3, #4
 8006260:	2b00      	cmp	r3, #0
 8006262:	d013      	beq.n	800628c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0204 	bic.w	r2, r2, #4
 8006272:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006278:	2208      	movs	r2, #8
 800627a:	409a      	lsls	r2, r3
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006284:	f043 0201 	orr.w	r2, r3, #1
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006290:	2201      	movs	r2, #1
 8006292:	409a      	lsls	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4013      	ands	r3, r2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d012      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00b      	beq.n	80062c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ae:	2201      	movs	r2, #1
 80062b0:	409a      	lsls	r2, r3
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ba:	f043 0202 	orr.w	r2, r3, #2
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c6:	2204      	movs	r2, #4
 80062c8:	409a      	lsls	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	4013      	ands	r3, r2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d012      	beq.n	80062f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0302 	and.w	r3, r3, #2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00b      	beq.n	80062f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e4:	2204      	movs	r2, #4
 80062e6:	409a      	lsls	r2, r3
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f0:	f043 0204 	orr.w	r2, r3, #4
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062fc:	2210      	movs	r2, #16
 80062fe:	409a      	lsls	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4013      	ands	r3, r2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d043      	beq.n	8006390 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0308 	and.w	r3, r3, #8
 8006312:	2b00      	cmp	r3, #0
 8006314:	d03c      	beq.n	8006390 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800631a:	2210      	movs	r2, #16
 800631c:	409a      	lsls	r2, r3
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d018      	beq.n	8006362 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d108      	bne.n	8006350 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	2b00      	cmp	r3, #0
 8006344:	d024      	beq.n	8006390 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	4798      	blx	r3
 800634e:	e01f      	b.n	8006390 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006354:	2b00      	cmp	r3, #0
 8006356:	d01b      	beq.n	8006390 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	4798      	blx	r3
 8006360:	e016      	b.n	8006390 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800636c:	2b00      	cmp	r3, #0
 800636e:	d107      	bne.n	8006380 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 0208 	bic.w	r2, r2, #8
 800637e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006384:	2b00      	cmp	r3, #0
 8006386:	d003      	beq.n	8006390 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006394:	2220      	movs	r2, #32
 8006396:	409a      	lsls	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4013      	ands	r3, r2
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 808e 	beq.w	80064be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0310 	and.w	r3, r3, #16
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 8086 	beq.w	80064be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b6:	2220      	movs	r2, #32
 80063b8:	409a      	lsls	r2, r3
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b05      	cmp	r3, #5
 80063c8:	d136      	bne.n	8006438 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 0216 	bic.w	r2, r2, #22
 80063d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	695a      	ldr	r2, [r3, #20]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d103      	bne.n	80063fa <HAL_DMA_IRQHandler+0x1da>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d007      	beq.n	800640a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 0208 	bic.w	r2, r2, #8
 8006408:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800640e:	223f      	movs	r2, #63	; 0x3f
 8006410:	409a      	lsls	r2, r3
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800642a:	2b00      	cmp	r3, #0
 800642c:	d07d      	beq.n	800652a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	4798      	blx	r3
        }
        return;
 8006436:	e078      	b.n	800652a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d01c      	beq.n	8006480 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d108      	bne.n	8006466 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006458:	2b00      	cmp	r3, #0
 800645a:	d030      	beq.n	80064be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	4798      	blx	r3
 8006464:	e02b      	b.n	80064be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800646a:	2b00      	cmp	r3, #0
 800646c:	d027      	beq.n	80064be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	4798      	blx	r3
 8006476:	e022      	b.n	80064be <HAL_DMA_IRQHandler+0x29e>
 8006478:	20000200 	.word	0x20000200
 800647c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10f      	bne.n	80064ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0210 	bic.w	r2, r2, #16
 800649c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d032      	beq.n	800652c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d022      	beq.n	8006518 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2205      	movs	r2, #5
 80064d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 0201 	bic.w	r2, r2, #1
 80064e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	3301      	adds	r3, #1
 80064ee:	60bb      	str	r3, [r7, #8]
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d307      	bcc.n	8006506 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1f2      	bne.n	80064ea <HAL_DMA_IRQHandler+0x2ca>
 8006504:	e000      	b.n	8006508 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006506:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800651c:	2b00      	cmp	r3, #0
 800651e:	d005      	beq.n	800652c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	4798      	blx	r3
 8006528:	e000      	b.n	800652c <HAL_DMA_IRQHandler+0x30c>
        return;
 800652a:	bf00      	nop
    }
  }
}
 800652c:	3718      	adds	r7, #24
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop

08006534 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006550:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	2b40      	cmp	r3, #64	; 0x40
 8006560:	d108      	bne.n	8006574 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006572:	e007      	b.n	8006584 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	60da      	str	r2, [r3, #12]
}
 8006584:	bf00      	nop
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006590:	b480      	push	{r7}
 8006592:	b085      	sub	sp, #20
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	b2db      	uxtb	r3, r3
 800659e:	3b10      	subs	r3, #16
 80065a0:	4a14      	ldr	r2, [pc, #80]	; (80065f4 <DMA_CalcBaseAndBitshift+0x64>)
 80065a2:	fba2 2303 	umull	r2, r3, r2, r3
 80065a6:	091b      	lsrs	r3, r3, #4
 80065a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80065aa:	4a13      	ldr	r2, [pc, #76]	; (80065f8 <DMA_CalcBaseAndBitshift+0x68>)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4413      	add	r3, r2
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	461a      	mov	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b03      	cmp	r3, #3
 80065bc:	d909      	bls.n	80065d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80065c6:	f023 0303 	bic.w	r3, r3, #3
 80065ca:	1d1a      	adds	r2, r3, #4
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	659a      	str	r2, [r3, #88]	; 0x58
 80065d0:	e007      	b.n	80065e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80065da:	f023 0303 	bic.w	r3, r3, #3
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	aaaaaaab 	.word	0xaaaaaaab
 80065f8:	0800e8a4 	.word	0x0800e8a4

080065fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006604:	2300      	movs	r3, #0
 8006606:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d11f      	bne.n	8006656 <DMA_CheckFifoParam+0x5a>
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2b03      	cmp	r3, #3
 800661a:	d856      	bhi.n	80066ca <DMA_CheckFifoParam+0xce>
 800661c:	a201      	add	r2, pc, #4	; (adr r2, 8006624 <DMA_CheckFifoParam+0x28>)
 800661e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006622:	bf00      	nop
 8006624:	08006635 	.word	0x08006635
 8006628:	08006647 	.word	0x08006647
 800662c:	08006635 	.word	0x08006635
 8006630:	080066cb 	.word	0x080066cb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d046      	beq.n	80066ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006644:	e043      	b.n	80066ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800664e:	d140      	bne.n	80066d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006654:	e03d      	b.n	80066d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800665e:	d121      	bne.n	80066a4 <DMA_CheckFifoParam+0xa8>
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b03      	cmp	r3, #3
 8006664:	d837      	bhi.n	80066d6 <DMA_CheckFifoParam+0xda>
 8006666:	a201      	add	r2, pc, #4	; (adr r2, 800666c <DMA_CheckFifoParam+0x70>)
 8006668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666c:	0800667d 	.word	0x0800667d
 8006670:	08006683 	.word	0x08006683
 8006674:	0800667d 	.word	0x0800667d
 8006678:	08006695 	.word	0x08006695
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	73fb      	strb	r3, [r7, #15]
      break;
 8006680:	e030      	b.n	80066e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006686:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d025      	beq.n	80066da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006692:	e022      	b.n	80066da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006698:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800669c:	d11f      	bne.n	80066de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80066a2:	e01c      	b.n	80066de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d903      	bls.n	80066b2 <DMA_CheckFifoParam+0xb6>
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	d003      	beq.n	80066b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80066b0:	e018      	b.n	80066e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	73fb      	strb	r3, [r7, #15]
      break;
 80066b6:	e015      	b.n	80066e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00e      	beq.n	80066e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	73fb      	strb	r3, [r7, #15]
      break;
 80066c8:	e00b      	b.n	80066e2 <DMA_CheckFifoParam+0xe6>
      break;
 80066ca:	bf00      	nop
 80066cc:	e00a      	b.n	80066e4 <DMA_CheckFifoParam+0xe8>
      break;
 80066ce:	bf00      	nop
 80066d0:	e008      	b.n	80066e4 <DMA_CheckFifoParam+0xe8>
      break;
 80066d2:	bf00      	nop
 80066d4:	e006      	b.n	80066e4 <DMA_CheckFifoParam+0xe8>
      break;
 80066d6:	bf00      	nop
 80066d8:	e004      	b.n	80066e4 <DMA_CheckFifoParam+0xe8>
      break;
 80066da:	bf00      	nop
 80066dc:	e002      	b.n	80066e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80066de:	bf00      	nop
 80066e0:	e000      	b.n	80066e4 <DMA_CheckFifoParam+0xe8>
      break;
 80066e2:	bf00      	nop
    }
  } 
  
  return status; 
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop

080066f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b088      	sub	sp, #32
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80066fe:	2300      	movs	r3, #0
 8006700:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006702:	2300      	movs	r3, #0
 8006704:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006706:	2300      	movs	r3, #0
 8006708:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a45      	ldr	r2, [pc, #276]	; (8006824 <HAL_GPIO_Init+0x130>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d02b      	beq.n	800676a <HAL_GPIO_Init+0x76>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a44      	ldr	r2, [pc, #272]	; (8006828 <HAL_GPIO_Init+0x134>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d027      	beq.n	800676a <HAL_GPIO_Init+0x76>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a43      	ldr	r2, [pc, #268]	; (800682c <HAL_GPIO_Init+0x138>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d023      	beq.n	800676a <HAL_GPIO_Init+0x76>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a42      	ldr	r2, [pc, #264]	; (8006830 <HAL_GPIO_Init+0x13c>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d01f      	beq.n	800676a <HAL_GPIO_Init+0x76>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a41      	ldr	r2, [pc, #260]	; (8006834 <HAL_GPIO_Init+0x140>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d01b      	beq.n	800676a <HAL_GPIO_Init+0x76>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a40      	ldr	r2, [pc, #256]	; (8006838 <HAL_GPIO_Init+0x144>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d017      	beq.n	800676a <HAL_GPIO_Init+0x76>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a3f      	ldr	r2, [pc, #252]	; (800683c <HAL_GPIO_Init+0x148>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d013      	beq.n	800676a <HAL_GPIO_Init+0x76>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a3e      	ldr	r2, [pc, #248]	; (8006840 <HAL_GPIO_Init+0x14c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d00f      	beq.n	800676a <HAL_GPIO_Init+0x76>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a3d      	ldr	r2, [pc, #244]	; (8006844 <HAL_GPIO_Init+0x150>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d00b      	beq.n	800676a <HAL_GPIO_Init+0x76>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a3c      	ldr	r2, [pc, #240]	; (8006848 <HAL_GPIO_Init+0x154>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d007      	beq.n	800676a <HAL_GPIO_Init+0x76>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a3b      	ldr	r2, [pc, #236]	; (800684c <HAL_GPIO_Init+0x158>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d003      	beq.n	800676a <HAL_GPIO_Init+0x76>
 8006762:	21b3      	movs	r1, #179	; 0xb3
 8006764:	483a      	ldr	r0, [pc, #232]	; (8006850 <HAL_GPIO_Init+0x15c>)
 8006766:	f7fc ff96 	bl	8003696 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	b29b      	uxth	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	d005      	beq.n	8006780 <HAL_GPIO_Init+0x8c>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	0c1b      	lsrs	r3, r3, #16
 800677a:	041b      	lsls	r3, r3, #16
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <HAL_GPIO_Init+0x94>
 8006780:	21b4      	movs	r1, #180	; 0xb4
 8006782:	4833      	ldr	r0, [pc, #204]	; (8006850 <HAL_GPIO_Init+0x15c>)
 8006784:	f7fc ff87 	bl	8003696 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d035      	beq.n	80067fc <HAL_GPIO_Init+0x108>
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d031      	beq.n	80067fc <HAL_GPIO_Init+0x108>
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	2b11      	cmp	r3, #17
 800679e:	d02d      	beq.n	80067fc <HAL_GPIO_Init+0x108>
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d029      	beq.n	80067fc <HAL_GPIO_Init+0x108>
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	2b12      	cmp	r3, #18
 80067ae:	d025      	beq.n	80067fc <HAL_GPIO_Init+0x108>
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	4a27      	ldr	r2, [pc, #156]	; (8006854 <HAL_GPIO_Init+0x160>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d020      	beq.n	80067fc <HAL_GPIO_Init+0x108>
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	4a26      	ldr	r2, [pc, #152]	; (8006858 <HAL_GPIO_Init+0x164>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d01b      	beq.n	80067fc <HAL_GPIO_Init+0x108>
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	4a24      	ldr	r2, [pc, #144]	; (800685c <HAL_GPIO_Init+0x168>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d016      	beq.n	80067fc <HAL_GPIO_Init+0x108>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	4a23      	ldr	r2, [pc, #140]	; (8006860 <HAL_GPIO_Init+0x16c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d011      	beq.n	80067fc <HAL_GPIO_Init+0x108>
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	4a21      	ldr	r2, [pc, #132]	; (8006864 <HAL_GPIO_Init+0x170>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d00c      	beq.n	80067fc <HAL_GPIO_Init+0x108>
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	4a20      	ldr	r2, [pc, #128]	; (8006868 <HAL_GPIO_Init+0x174>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d007      	beq.n	80067fc <HAL_GPIO_Init+0x108>
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	2b03      	cmp	r3, #3
 80067f2:	d003      	beq.n	80067fc <HAL_GPIO_Init+0x108>
 80067f4:	21b5      	movs	r1, #181	; 0xb5
 80067f6:	4816      	ldr	r0, [pc, #88]	; (8006850 <HAL_GPIO_Init+0x15c>)
 80067f8:	f7fc ff4d 	bl	8003696 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00b      	beq.n	800681c <HAL_GPIO_Init+0x128>
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d007      	beq.n	800681c <HAL_GPIO_Init+0x128>
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	2b02      	cmp	r3, #2
 8006812:	d003      	beq.n	800681c <HAL_GPIO_Init+0x128>
 8006814:	21b6      	movs	r1, #182	; 0xb6
 8006816:	480e      	ldr	r0, [pc, #56]	; (8006850 <HAL_GPIO_Init+0x15c>)
 8006818:	f7fc ff3d 	bl	8003696 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800681c:	2300      	movs	r3, #0
 800681e:	61fb      	str	r3, [r7, #28]
 8006820:	e270      	b.n	8006d04 <HAL_GPIO_Init+0x610>
 8006822:	bf00      	nop
 8006824:	40020000 	.word	0x40020000
 8006828:	40020400 	.word	0x40020400
 800682c:	40020800 	.word	0x40020800
 8006830:	40020c00 	.word	0x40020c00
 8006834:	40021000 	.word	0x40021000
 8006838:	40021400 	.word	0x40021400
 800683c:	40021800 	.word	0x40021800
 8006840:	40021c00 	.word	0x40021c00
 8006844:	40022000 	.word	0x40022000
 8006848:	40022400 	.word	0x40022400
 800684c:	40022800 	.word	0x40022800
 8006850:	0800e68c 	.word	0x0800e68c
 8006854:	10110000 	.word	0x10110000
 8006858:	10210000 	.word	0x10210000
 800685c:	10310000 	.word	0x10310000
 8006860:	10120000 	.word	0x10120000
 8006864:	10220000 	.word	0x10220000
 8006868:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800686c:	2201      	movs	r2, #1
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	fa02 f303 	lsl.w	r3, r2, r3
 8006874:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	4013      	ands	r3, r2
 800687e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	429a      	cmp	r2, r3
 8006886:	f040 823a 	bne.w	8006cfe <HAL_GPIO_Init+0x60a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	2b01      	cmp	r3, #1
 8006890:	d00b      	beq.n	80068aa <HAL_GPIO_Init+0x1b6>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	2b02      	cmp	r3, #2
 8006898:	d007      	beq.n	80068aa <HAL_GPIO_Init+0x1b6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800689e:	2b11      	cmp	r3, #17
 80068a0:	d003      	beq.n	80068aa <HAL_GPIO_Init+0x1b6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	2b12      	cmp	r3, #18
 80068a8:	d144      	bne.n	8006934 <HAL_GPIO_Init+0x240>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00f      	beq.n	80068d2 <HAL_GPIO_Init+0x1de>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d00b      	beq.n	80068d2 <HAL_GPIO_Init+0x1de>
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d007      	beq.n	80068d2 <HAL_GPIO_Init+0x1de>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	d003      	beq.n	80068d2 <HAL_GPIO_Init+0x1de>
 80068ca:	21c8      	movs	r1, #200	; 0xc8
 80068cc:	489a      	ldr	r0, [pc, #616]	; (8006b38 <HAL_GPIO_Init+0x444>)
 80068ce:	f7fc fee2 	bl	8003696 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	005b      	lsls	r3, r3, #1
 80068dc:	2203      	movs	r2, #3
 80068de:	fa02 f303 	lsl.w	r3, r2, r3
 80068e2:	43db      	mvns	r3, r3
 80068e4:	69ba      	ldr	r2, [r7, #24]
 80068e6:	4013      	ands	r3, r2
 80068e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	68da      	ldr	r2, [r3, #12]
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	fa02 f303 	lsl.w	r3, r2, r3
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	69ba      	ldr	r2, [r7, #24]
 8006900:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006908:	2201      	movs	r2, #1
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	fa02 f303 	lsl.w	r3, r2, r3
 8006910:	43db      	mvns	r3, r3
 8006912:	69ba      	ldr	r2, [r7, #24]
 8006914:	4013      	ands	r3, r2
 8006916:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	091b      	lsrs	r3, r3, #4
 800691e:	f003 0201 	and.w	r2, r3, #1
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	fa02 f303 	lsl.w	r3, r2, r3
 8006928:	69ba      	ldr	r2, [r7, #24]
 800692a:	4313      	orrs	r3, r2
 800692c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	2203      	movs	r2, #3
 8006940:	fa02 f303 	lsl.w	r3, r2, r3
 8006944:	43db      	mvns	r3, r3
 8006946:	69ba      	ldr	r2, [r7, #24]
 8006948:	4013      	ands	r3, r2
 800694a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	005b      	lsls	r3, r3, #1
 8006954:	fa02 f303 	lsl.w	r3, r2, r3
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	4313      	orrs	r3, r2
 800695c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	2b02      	cmp	r3, #2
 800696a:	d004      	beq.n	8006976 <HAL_GPIO_Init+0x282>
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	2b12      	cmp	r3, #18
 8006972:	f040 80e3 	bne.w	8006b3c <HAL_GPIO_Init+0x448>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 80b6 	beq.w	8006aec <HAL_GPIO_Init+0x3f8>
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	2b09      	cmp	r3, #9
 8006986:	f000 80b1 	beq.w	8006aec <HAL_GPIO_Init+0x3f8>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 80ac 	beq.w	8006aec <HAL_GPIO_Init+0x3f8>
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 80a7 	beq.w	8006aec <HAL_GPIO_Init+0x3f8>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 80a2 	beq.w	8006aec <HAL_GPIO_Init+0x3f8>
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 809d 	beq.w	8006aec <HAL_GPIO_Init+0x3f8>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	f000 8098 	beq.w	8006aec <HAL_GPIO_Init+0x3f8>
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	f000 8093 	beq.w	8006aec <HAL_GPIO_Init+0x3f8>
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	f000 808e 	beq.w	8006aec <HAL_GPIO_Init+0x3f8>
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	f000 8089 	beq.w	8006aec <HAL_GPIO_Init+0x3f8>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	2b02      	cmp	r3, #2
 80069e0:	f000 8084 	beq.w	8006aec <HAL_GPIO_Init+0x3f8>
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	2b03      	cmp	r3, #3
 80069ea:	d07f      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	2b04      	cmp	r3, #4
 80069f2:	d07b      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	2b04      	cmp	r3, #4
 80069fa:	d077      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	2b04      	cmp	r3, #4
 8006a02:	d073      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	2b05      	cmp	r3, #5
 8006a0a:	d06f      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	2b05      	cmp	r3, #5
 8006a12:	d06b      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	2b09      	cmp	r3, #9
 8006a1a:	d067      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	2b06      	cmp	r3, #6
 8006a22:	d063      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	2b09      	cmp	r3, #9
 8006a2a:	d05f      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	2b07      	cmp	r3, #7
 8006a32:	d05b      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	2b07      	cmp	r3, #7
 8006a3a:	d057      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	2b07      	cmp	r3, #7
 8006a42:	d053      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	2b08      	cmp	r3, #8
 8006a4a:	d04f      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	2b08      	cmp	r3, #8
 8006a52:	d04b      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	2b08      	cmp	r3, #8
 8006a5a:	d047      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	2b09      	cmp	r3, #9
 8006a62:	d043      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	2b09      	cmp	r3, #9
 8006a6a:	d03f      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	2b0a      	cmp	r3, #10
 8006a72:	d03b      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	2b0a      	cmp	r3, #10
 8006a7a:	d037      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	2b0b      	cmp	r3, #11
 8006a82:	d033      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	2b0c      	cmp	r3, #12
 8006a8a:	d02f      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	2b0c      	cmp	r3, #12
 8006a92:	d02b      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	2b0d      	cmp	r3, #13
 8006a9a:	d027      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	2b0f      	cmp	r3, #15
 8006aa2:	d023      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	2b05      	cmp	r3, #5
 8006aaa:	d01f      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	2b05      	cmp	r3, #5
 8006ab2:	d01b      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	2b05      	cmp	r3, #5
 8006aba:	d017      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	2b08      	cmp	r3, #8
 8006ac2:	d013      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	d00f      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	2b0c      	cmp	r3, #12
 8006ad2:	d00b      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	2b06      	cmp	r3, #6
 8006ada:	d007      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	2b0e      	cmp	r3, #14
 8006ae2:	d003      	beq.n	8006aec <HAL_GPIO_Init+0x3f8>
 8006ae4:	21e0      	movs	r1, #224	; 0xe0
 8006ae6:	4814      	ldr	r0, [pc, #80]	; (8006b38 <HAL_GPIO_Init+0x444>)
 8006ae8:	f7fc fdd5 	bl	8003696 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	08da      	lsrs	r2, r3, #3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	3208      	adds	r2, #8
 8006af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	f003 0307 	and.w	r3, r3, #7
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	220f      	movs	r2, #15
 8006b04:	fa02 f303 	lsl.w	r3, r2, r3
 8006b08:	43db      	mvns	r3, r3
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	691a      	ldr	r2, [r3, #16]
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	f003 0307 	and.w	r3, r3, #7
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	08da      	lsrs	r2, r3, #3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	3208      	adds	r2, #8
 8006b2e:	69b9      	ldr	r1, [r7, #24]
 8006b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006b34:	e002      	b.n	8006b3c <HAL_GPIO_Init+0x448>
 8006b36:	bf00      	nop
 8006b38:	0800e68c 	.word	0x0800e68c
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	2203      	movs	r2, #3
 8006b48:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4c:	43db      	mvns	r3, r3
 8006b4e:	69ba      	ldr	r2, [r7, #24]
 8006b50:	4013      	ands	r3, r2
 8006b52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f003 0203 	and.w	r2, r3, #3
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	005b      	lsls	r3, r3, #1
 8006b60:	fa02 f303 	lsl.w	r3, r2, r3
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	69ba      	ldr	r2, [r7, #24]
 8006b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f000 80c0 	beq.w	8006cfe <HAL_GPIO_Init+0x60a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60fb      	str	r3, [r7, #12]
 8006b82:	4b65      	ldr	r3, [pc, #404]	; (8006d18 <HAL_GPIO_Init+0x624>)
 8006b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b86:	4a64      	ldr	r2, [pc, #400]	; (8006d18 <HAL_GPIO_Init+0x624>)
 8006b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8006b8e:	4b62      	ldr	r3, [pc, #392]	; (8006d18 <HAL_GPIO_Init+0x624>)
 8006b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b96:	60fb      	str	r3, [r7, #12]
 8006b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b9a:	4a60      	ldr	r2, [pc, #384]	; (8006d1c <HAL_GPIO_Init+0x628>)
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	089b      	lsrs	r3, r3, #2
 8006ba0:	3302      	adds	r3, #2
 8006ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	f003 0303 	and.w	r3, r3, #3
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	220f      	movs	r2, #15
 8006bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb6:	43db      	mvns	r3, r3
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a57      	ldr	r2, [pc, #348]	; (8006d20 <HAL_GPIO_Init+0x62c>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d037      	beq.n	8006c36 <HAL_GPIO_Init+0x542>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a56      	ldr	r2, [pc, #344]	; (8006d24 <HAL_GPIO_Init+0x630>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d031      	beq.n	8006c32 <HAL_GPIO_Init+0x53e>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a55      	ldr	r2, [pc, #340]	; (8006d28 <HAL_GPIO_Init+0x634>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d02b      	beq.n	8006c2e <HAL_GPIO_Init+0x53a>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a54      	ldr	r2, [pc, #336]	; (8006d2c <HAL_GPIO_Init+0x638>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d025      	beq.n	8006c2a <HAL_GPIO_Init+0x536>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a53      	ldr	r2, [pc, #332]	; (8006d30 <HAL_GPIO_Init+0x63c>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d01f      	beq.n	8006c26 <HAL_GPIO_Init+0x532>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a52      	ldr	r2, [pc, #328]	; (8006d34 <HAL_GPIO_Init+0x640>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d019      	beq.n	8006c22 <HAL_GPIO_Init+0x52e>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a51      	ldr	r2, [pc, #324]	; (8006d38 <HAL_GPIO_Init+0x644>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d013      	beq.n	8006c1e <HAL_GPIO_Init+0x52a>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a50      	ldr	r2, [pc, #320]	; (8006d3c <HAL_GPIO_Init+0x648>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00d      	beq.n	8006c1a <HAL_GPIO_Init+0x526>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a4f      	ldr	r2, [pc, #316]	; (8006d40 <HAL_GPIO_Init+0x64c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d007      	beq.n	8006c16 <HAL_GPIO_Init+0x522>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a4e      	ldr	r2, [pc, #312]	; (8006d44 <HAL_GPIO_Init+0x650>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d101      	bne.n	8006c12 <HAL_GPIO_Init+0x51e>
 8006c0e:	2309      	movs	r3, #9
 8006c10:	e012      	b.n	8006c38 <HAL_GPIO_Init+0x544>
 8006c12:	230a      	movs	r3, #10
 8006c14:	e010      	b.n	8006c38 <HAL_GPIO_Init+0x544>
 8006c16:	2308      	movs	r3, #8
 8006c18:	e00e      	b.n	8006c38 <HAL_GPIO_Init+0x544>
 8006c1a:	2307      	movs	r3, #7
 8006c1c:	e00c      	b.n	8006c38 <HAL_GPIO_Init+0x544>
 8006c1e:	2306      	movs	r3, #6
 8006c20:	e00a      	b.n	8006c38 <HAL_GPIO_Init+0x544>
 8006c22:	2305      	movs	r3, #5
 8006c24:	e008      	b.n	8006c38 <HAL_GPIO_Init+0x544>
 8006c26:	2304      	movs	r3, #4
 8006c28:	e006      	b.n	8006c38 <HAL_GPIO_Init+0x544>
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e004      	b.n	8006c38 <HAL_GPIO_Init+0x544>
 8006c2e:	2302      	movs	r3, #2
 8006c30:	e002      	b.n	8006c38 <HAL_GPIO_Init+0x544>
 8006c32:	2301      	movs	r3, #1
 8006c34:	e000      	b.n	8006c38 <HAL_GPIO_Init+0x544>
 8006c36:	2300      	movs	r3, #0
 8006c38:	69fa      	ldr	r2, [r7, #28]
 8006c3a:	f002 0203 	and.w	r2, r2, #3
 8006c3e:	0092      	lsls	r2, r2, #2
 8006c40:	4093      	lsls	r3, r2
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c48:	4934      	ldr	r1, [pc, #208]	; (8006d1c <HAL_GPIO_Init+0x628>)
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	089b      	lsrs	r3, r3, #2
 8006c4e:	3302      	adds	r3, #2
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c56:	4b3c      	ldr	r3, [pc, #240]	; (8006d48 <HAL_GPIO_Init+0x654>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	43db      	mvns	r3, r3
 8006c60:	69ba      	ldr	r2, [r7, #24]
 8006c62:	4013      	ands	r3, r2
 8006c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <HAL_GPIO_Init+0x586>
        {
          temp |= iocurrent;
 8006c72:	69ba      	ldr	r2, [r7, #24]
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c7a:	4a33      	ldr	r2, [pc, #204]	; (8006d48 <HAL_GPIO_Init+0x654>)
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006c80:	4b31      	ldr	r3, [pc, #196]	; (8006d48 <HAL_GPIO_Init+0x654>)
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	43db      	mvns	r3, r3
 8006c8a:	69ba      	ldr	r2, [r7, #24]
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <HAL_GPIO_Init+0x5b0>
        {
          temp |= iocurrent;
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006ca4:	4a28      	ldr	r2, [pc, #160]	; (8006d48 <HAL_GPIO_Init+0x654>)
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006caa:	4b27      	ldr	r3, [pc, #156]	; (8006d48 <HAL_GPIO_Init+0x654>)
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	43db      	mvns	r3, r3
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d003      	beq.n	8006cce <HAL_GPIO_Init+0x5da>
        {
          temp |= iocurrent;
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006cce:	4a1e      	ldr	r2, [pc, #120]	; (8006d48 <HAL_GPIO_Init+0x654>)
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006cd4:	4b1c      	ldr	r3, [pc, #112]	; (8006d48 <HAL_GPIO_Init+0x654>)
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	43db      	mvns	r3, r3
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d003      	beq.n	8006cf8 <HAL_GPIO_Init+0x604>
        {
          temp |= iocurrent;
 8006cf0:	69ba      	ldr	r2, [r7, #24]
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006cf8:	4a13      	ldr	r2, [pc, #76]	; (8006d48 <HAL_GPIO_Init+0x654>)
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	3301      	adds	r3, #1
 8006d02:	61fb      	str	r3, [r7, #28]
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	2b0f      	cmp	r3, #15
 8006d08:	f67f adb0 	bls.w	800686c <HAL_GPIO_Init+0x178>
      }
    }
  }
}
 8006d0c:	bf00      	nop
 8006d0e:	bf00      	nop
 8006d10:	3720      	adds	r7, #32
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	40023800 	.word	0x40023800
 8006d1c:	40013800 	.word	0x40013800
 8006d20:	40020000 	.word	0x40020000
 8006d24:	40020400 	.word	0x40020400
 8006d28:	40020800 	.word	0x40020800
 8006d2c:	40020c00 	.word	0x40020c00
 8006d30:	40021000 	.word	0x40021000
 8006d34:	40021400 	.word	0x40021400
 8006d38:	40021800 	.word	0x40021800
 8006d3c:	40021c00 	.word	0x40021c00
 8006d40:	40022000 	.word	0x40022000
 8006d44:	40022400 	.word	0x40022400
 8006d48:	40013c00 	.word	0x40013c00

08006d4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	460b      	mov	r3, r1
 8006d56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006d58:	887b      	ldrh	r3, [r7, #2]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d004      	beq.n	8006d68 <HAL_GPIO_ReadPin+0x1c>
 8006d5e:	887b      	ldrh	r3, [r7, #2]
 8006d60:	0c1b      	lsrs	r3, r3, #16
 8006d62:	041b      	lsls	r3, r3, #16
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d004      	beq.n	8006d72 <HAL_GPIO_ReadPin+0x26>
 8006d68:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 8006d6c:	4809      	ldr	r0, [pc, #36]	; (8006d94 <HAL_GPIO_ReadPin+0x48>)
 8006d6e:	f7fc fc92 	bl	8003696 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691a      	ldr	r2, [r3, #16]
 8006d76:	887b      	ldrh	r3, [r7, #2]
 8006d78:	4013      	ands	r3, r2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	73fb      	strb	r3, [r7, #15]
 8006d82:	e001      	b.n	8006d88 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d84:	2300      	movs	r3, #0
 8006d86:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	0800e68c 	.word	0x0800e68c

08006d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	460b      	mov	r3, r1
 8006da2:	807b      	strh	r3, [r7, #2]
 8006da4:	4613      	mov	r3, r2
 8006da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006da8:	887b      	ldrh	r3, [r7, #2]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d004      	beq.n	8006db8 <HAL_GPIO_WritePin+0x20>
 8006dae:	887b      	ldrh	r3, [r7, #2]
 8006db0:	0c1b      	lsrs	r3, r3, #16
 8006db2:	041b      	lsls	r3, r3, #16
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d004      	beq.n	8006dc2 <HAL_GPIO_WritePin+0x2a>
 8006db8:	f240 119f 	movw	r1, #415	; 0x19f
 8006dbc:	480e      	ldr	r0, [pc, #56]	; (8006df8 <HAL_GPIO_WritePin+0x60>)
 8006dbe:	f7fc fc6a 	bl	8003696 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8006dc2:	787b      	ldrb	r3, [r7, #1]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d007      	beq.n	8006dd8 <HAL_GPIO_WritePin+0x40>
 8006dc8:	787b      	ldrb	r3, [r7, #1]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d004      	beq.n	8006dd8 <HAL_GPIO_WritePin+0x40>
 8006dce:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8006dd2:	4809      	ldr	r0, [pc, #36]	; (8006df8 <HAL_GPIO_WritePin+0x60>)
 8006dd4:	f7fc fc5f 	bl	8003696 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8006dd8:	787b      	ldrb	r3, [r7, #1]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006dde:	887a      	ldrh	r2, [r7, #2]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006de4:	e003      	b.n	8006dee <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006de6:	887b      	ldrh	r3, [r7, #2]
 8006de8:	041a      	lsls	r2, r3, #16
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	619a      	str	r2, [r3, #24]
}
 8006dee:	bf00      	nop
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	0800e68c 	.word	0x0800e68c

08006dfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	4603      	mov	r3, r0
 8006e04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006e06:	4b08      	ldr	r3, [pc, #32]	; (8006e28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e08:	695a      	ldr	r2, [r3, #20]
 8006e0a:	88fb      	ldrh	r3, [r7, #6]
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d006      	beq.n	8006e20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e12:	4a05      	ldr	r2, [pc, #20]	; (8006e28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e14:	88fb      	ldrh	r3, [r7, #6]
 8006e16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e18:	88fb      	ldrh	r3, [r7, #6]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fc f864 	bl	8002ee8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006e20:	bf00      	nop
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	40013c00 	.word	0x40013c00

08006e2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e1be      	b.n	80071bc <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a9f      	ldr	r2, [pc, #636]	; (80070c0 <HAL_I2C_Init+0x294>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d00e      	beq.n	8006e66 <HAL_I2C_Init+0x3a>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a9d      	ldr	r2, [pc, #628]	; (80070c4 <HAL_I2C_Init+0x298>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d009      	beq.n	8006e66 <HAL_I2C_Init+0x3a>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a9c      	ldr	r2, [pc, #624]	; (80070c8 <HAL_I2C_Init+0x29c>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d004      	beq.n	8006e66 <HAL_I2C_Init+0x3a>
 8006e5c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8006e60:	489a      	ldr	r0, [pc, #616]	; (80070cc <HAL_I2C_Init+0x2a0>)
 8006e62:	f7fc fc18 	bl	8003696 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d004      	beq.n	8006e78 <HAL_I2C_Init+0x4c>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	4a97      	ldr	r2, [pc, #604]	; (80070d0 <HAL_I2C_Init+0x2a4>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d904      	bls.n	8006e82 <HAL_I2C_Init+0x56>
 8006e78:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8006e7c:	4893      	ldr	r0, [pc, #588]	; (80070cc <HAL_I2C_Init+0x2a0>)
 8006e7e:	f7fc fc0a 	bl	8003696 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d009      	beq.n	8006e9e <HAL_I2C_Init+0x72>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e92:	d004      	beq.n	8006e9e <HAL_I2C_Init+0x72>
 8006e94:	f240 11c1 	movw	r1, #449	; 0x1c1
 8006e98:	488c      	ldr	r0, [pc, #560]	; (80070cc <HAL_I2C_Init+0x2a0>)
 8006e9a:	f7fc fbfc 	bl	8003696 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006ea6:	f023 0303 	bic.w	r3, r3, #3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d004      	beq.n	8006eb8 <HAL_I2C_Init+0x8c>
 8006eae:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8006eb2:	4886      	ldr	r0, [pc, #536]	; (80070cc <HAL_I2C_Init+0x2a0>)
 8006eb4:	f7fc fbef 	bl	8003696 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ec0:	d009      	beq.n	8006ed6 <HAL_I2C_Init+0xaa>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006eca:	d004      	beq.n	8006ed6 <HAL_I2C_Init+0xaa>
 8006ecc:	f240 11c3 	movw	r1, #451	; 0x1c3
 8006ed0:	487e      	ldr	r0, [pc, #504]	; (80070cc <HAL_I2C_Init+0x2a0>)
 8006ed2:	f7fc fbe0 	bl	8003696 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	695b      	ldr	r3, [r3, #20]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d008      	beq.n	8006ef0 <HAL_I2C_Init+0xc4>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d004      	beq.n	8006ef0 <HAL_I2C_Init+0xc4>
 8006ee6:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8006eea:	4878      	ldr	r0, [pc, #480]	; (80070cc <HAL_I2C_Init+0x2a0>)
 8006eec:	f7fc fbd3 	bl	8003696 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d004      	beq.n	8006f06 <HAL_I2C_Init+0xda>
 8006efc:	f240 11c5 	movw	r1, #453	; 0x1c5
 8006f00:	4872      	ldr	r0, [pc, #456]	; (80070cc <HAL_I2C_Init+0x2a0>)
 8006f02:	f7fc fbc8 	bl	8003696 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d008      	beq.n	8006f20 <HAL_I2C_Init+0xf4>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	2b40      	cmp	r3, #64	; 0x40
 8006f14:	d004      	beq.n	8006f20 <HAL_I2C_Init+0xf4>
 8006f16:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8006f1a:	486c      	ldr	r0, [pc, #432]	; (80070cc <HAL_I2C_Init+0x2a0>)
 8006f1c:	f7fc fbbb 	bl	8003696 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a1b      	ldr	r3, [r3, #32]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d008      	beq.n	8006f3a <HAL_I2C_Init+0x10e>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a1b      	ldr	r3, [r3, #32]
 8006f2c:	2b80      	cmp	r3, #128	; 0x80
 8006f2e:	d004      	beq.n	8006f3a <HAL_I2C_Init+0x10e>
 8006f30:	f240 11c7 	movw	r1, #455	; 0x1c7
 8006f34:	4865      	ldr	r0, [pc, #404]	; (80070cc <HAL_I2C_Init+0x2a0>)
 8006f36:	f7fc fbae 	bl	8003696 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d106      	bne.n	8006f54 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7fb f824 	bl	8001f9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2224      	movs	r2, #36	; 0x24
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 0201 	bic.w	r2, r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006f8c:	f001 fe70 	bl	8008c70 <HAL_RCC_GetPCLK1Freq>
 8006f90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	4a4f      	ldr	r2, [pc, #316]	; (80070d4 <HAL_I2C_Init+0x2a8>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d807      	bhi.n	8006fac <HAL_I2C_Init+0x180>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	4a4e      	ldr	r2, [pc, #312]	; (80070d8 <HAL_I2C_Init+0x2ac>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	bf94      	ite	ls
 8006fa4:	2301      	movls	r3, #1
 8006fa6:	2300      	movhi	r3, #0
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	e006      	b.n	8006fba <HAL_I2C_Init+0x18e>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4a4b      	ldr	r2, [pc, #300]	; (80070dc <HAL_I2C_Init+0x2b0>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	bf94      	ite	ls
 8006fb4:	2301      	movls	r3, #1
 8006fb6:	2300      	movhi	r3, #0
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e0fc      	b.n	80071bc <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	4a46      	ldr	r2, [pc, #280]	; (80070e0 <HAL_I2C_Init+0x2b4>)
 8006fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fca:	0c9b      	lsrs	r3, r3, #18
 8006fcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	4a38      	ldr	r2, [pc, #224]	; (80070d4 <HAL_I2C_Init+0x2a8>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d802      	bhi.n	8006ffc <HAL_I2C_Init+0x1d0>
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	e009      	b.n	8007010 <HAL_I2C_Init+0x1e4>
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007002:	fb02 f303 	mul.w	r3, r2, r3
 8007006:	4a37      	ldr	r2, [pc, #220]	; (80070e4 <HAL_I2C_Init+0x2b8>)
 8007008:	fba2 2303 	umull	r2, r3, r2, r3
 800700c:	099b      	lsrs	r3, r3, #6
 800700e:	3301      	adds	r3, #1
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	6812      	ldr	r2, [r2, #0]
 8007014:	430b      	orrs	r3, r1
 8007016:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007022:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	492a      	ldr	r1, [pc, #168]	; (80070d4 <HAL_I2C_Init+0x2a8>)
 800702c:	428b      	cmp	r3, r1
 800702e:	d819      	bhi.n	8007064 <HAL_I2C_Init+0x238>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	1e59      	subs	r1, r3, #1
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	005b      	lsls	r3, r3, #1
 800703a:	fbb1 f3f3 	udiv	r3, r1, r3
 800703e:	1c59      	adds	r1, r3, #1
 8007040:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007044:	400b      	ands	r3, r1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00a      	beq.n	8007060 <HAL_I2C_Init+0x234>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	1e59      	subs	r1, r3, #1
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	005b      	lsls	r3, r3, #1
 8007054:	fbb1 f3f3 	udiv	r3, r1, r3
 8007058:	3301      	adds	r3, #1
 800705a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800705e:	e066      	b.n	800712e <HAL_I2C_Init+0x302>
 8007060:	2304      	movs	r3, #4
 8007062:	e064      	b.n	800712e <HAL_I2C_Init+0x302>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d111      	bne.n	8007090 <HAL_I2C_Init+0x264>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	1e58      	subs	r0, r3, #1
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6859      	ldr	r1, [r3, #4]
 8007074:	460b      	mov	r3, r1
 8007076:	005b      	lsls	r3, r3, #1
 8007078:	440b      	add	r3, r1
 800707a:	fbb0 f3f3 	udiv	r3, r0, r3
 800707e:	3301      	adds	r3, #1
 8007080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007084:	2b00      	cmp	r3, #0
 8007086:	bf0c      	ite	eq
 8007088:	2301      	moveq	r3, #1
 800708a:	2300      	movne	r3, #0
 800708c:	b2db      	uxtb	r3, r3
 800708e:	e012      	b.n	80070b6 <HAL_I2C_Init+0x28a>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	1e58      	subs	r0, r3, #1
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6859      	ldr	r1, [r3, #4]
 8007098:	460b      	mov	r3, r1
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	440b      	add	r3, r1
 800709e:	0099      	lsls	r1, r3, #2
 80070a0:	440b      	add	r3, r1
 80070a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80070a6:	3301      	adds	r3, #1
 80070a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	bf0c      	ite	eq
 80070b0:	2301      	moveq	r3, #1
 80070b2:	2300      	movne	r3, #0
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d016      	beq.n	80070e8 <HAL_I2C_Init+0x2bc>
 80070ba:	2301      	movs	r3, #1
 80070bc:	e037      	b.n	800712e <HAL_I2C_Init+0x302>
 80070be:	bf00      	nop
 80070c0:	40005400 	.word	0x40005400
 80070c4:	40005800 	.word	0x40005800
 80070c8:	40005c00 	.word	0x40005c00
 80070cc:	0800e6c8 	.word	0x0800e6c8
 80070d0:	00061a80 	.word	0x00061a80
 80070d4:	000186a0 	.word	0x000186a0
 80070d8:	001e847f 	.word	0x001e847f
 80070dc:	003d08ff 	.word	0x003d08ff
 80070e0:	431bde83 	.word	0x431bde83
 80070e4:	10624dd3 	.word	0x10624dd3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10e      	bne.n	800710e <HAL_I2C_Init+0x2e2>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	1e58      	subs	r0, r3, #1
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6859      	ldr	r1, [r3, #4]
 80070f8:	460b      	mov	r3, r1
 80070fa:	005b      	lsls	r3, r3, #1
 80070fc:	440b      	add	r3, r1
 80070fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8007102:	3301      	adds	r3, #1
 8007104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800710c:	e00f      	b.n	800712e <HAL_I2C_Init+0x302>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	1e58      	subs	r0, r3, #1
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6859      	ldr	r1, [r3, #4]
 8007116:	460b      	mov	r3, r1
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	440b      	add	r3, r1
 800711c:	0099      	lsls	r1, r3, #2
 800711e:	440b      	add	r3, r1
 8007120:	fbb0 f3f3 	udiv	r3, r0, r3
 8007124:	3301      	adds	r3, #1
 8007126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800712a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800712e:	6879      	ldr	r1, [r7, #4]
 8007130:	6809      	ldr	r1, [r1, #0]
 8007132:	4313      	orrs	r3, r2
 8007134:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	69da      	ldr	r2, [r3, #28]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a1b      	ldr	r3, [r3, #32]
 8007148:	431a      	orrs	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800715c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	6911      	ldr	r1, [r2, #16]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	68d2      	ldr	r2, [r2, #12]
 8007168:	4311      	orrs	r1, r2
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	6812      	ldr	r2, [r2, #0]
 800716e:	430b      	orrs	r3, r1
 8007170:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	695a      	ldr	r2, [r3, #20]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	431a      	orrs	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	430a      	orrs	r2, r1
 800718c:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f042 0201 	orr.w	r2, r2, #1
 800719c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2220      	movs	r2, #32
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b088      	sub	sp, #32
 80071c8:	af02      	add	r7, sp, #8
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	4608      	mov	r0, r1
 80071ce:	4611      	mov	r1, r2
 80071d0:	461a      	mov	r2, r3
 80071d2:	4603      	mov	r3, r0
 80071d4:	817b      	strh	r3, [r7, #10]
 80071d6:	460b      	mov	r3, r1
 80071d8:	813b      	strh	r3, [r7, #8]
 80071da:	4613      	mov	r3, r2
 80071dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80071de:	f7fd fbb3 	bl	8004948 <HAL_GetTick>
 80071e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80071e4:	88fb      	ldrh	r3, [r7, #6]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d007      	beq.n	80071fa <HAL_I2C_Mem_Write+0x36>
 80071ea:	88fb      	ldrh	r3, [r7, #6]
 80071ec:	2b10      	cmp	r3, #16
 80071ee:	d004      	beq.n	80071fa <HAL_I2C_Mem_Write+0x36>
 80071f0:	f640 1175 	movw	r1, #2421	; 0x975
 80071f4:	4873      	ldr	r0, [pc, #460]	; (80073c4 <HAL_I2C_Mem_Write+0x200>)
 80071f6:	f7fc fa4e 	bl	8003696 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b20      	cmp	r3, #32
 8007204:	f040 80d9 	bne.w	80073ba <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	2319      	movs	r3, #25
 800720e:	2201      	movs	r2, #1
 8007210:	496d      	ldr	r1, [pc, #436]	; (80073c8 <HAL_I2C_Mem_Write+0x204>)
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f000 fc8c 	bl	8007b30 <I2C_WaitOnFlagUntilTimeout>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d001      	beq.n	8007222 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 800721e:	2302      	movs	r3, #2
 8007220:	e0cc      	b.n	80073bc <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007228:	2b01      	cmp	r3, #1
 800722a:	d101      	bne.n	8007230 <HAL_I2C_Mem_Write+0x6c>
 800722c:	2302      	movs	r3, #2
 800722e:	e0c5      	b.n	80073bc <HAL_I2C_Mem_Write+0x1f8>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b01      	cmp	r3, #1
 8007244:	d007      	beq.n	8007256 <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f042 0201 	orr.w	r2, r2, #1
 8007254:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007264:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2221      	movs	r2, #33	; 0x21
 800726a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2240      	movs	r2, #64	; 0x40
 8007272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6a3a      	ldr	r2, [r7, #32]
 8007280:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007286:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800728c:	b29a      	uxth	r2, r3
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4a4d      	ldr	r2, [pc, #308]	; (80073cc <HAL_I2C_Mem_Write+0x208>)
 8007296:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007298:	88f8      	ldrh	r0, [r7, #6]
 800729a:	893a      	ldrh	r2, [r7, #8]
 800729c:	8979      	ldrh	r1, [r7, #10]
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	9301      	str	r3, [sp, #4]
 80072a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	4603      	mov	r3, r0
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 fac3 	bl	8007834 <I2C_RequestMemoryWrite>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d052      	beq.n	800735a <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e081      	b.n	80073bc <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f000 fd0d 	bl	8007cdc <I2C_WaitOnTXEFlagUntilTimeout>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00d      	beq.n	80072e4 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072cc:	2b04      	cmp	r3, #4
 80072ce:	d107      	bne.n	80072e0 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e06b      	b.n	80073bc <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	781a      	ldrb	r2, [r3, #0]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f4:	1c5a      	adds	r2, r3, #1
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072fe:	3b01      	subs	r3, #1
 8007300:	b29a      	uxth	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800730a:	b29b      	uxth	r3, r3
 800730c:	3b01      	subs	r3, #1
 800730e:	b29a      	uxth	r2, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	f003 0304 	and.w	r3, r3, #4
 800731e:	2b04      	cmp	r3, #4
 8007320:	d11b      	bne.n	800735a <HAL_I2C_Mem_Write+0x196>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007326:	2b00      	cmp	r3, #0
 8007328:	d017      	beq.n	800735a <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732e:	781a      	ldrb	r2, [r3, #0]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	1c5a      	adds	r2, r3, #1
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007344:	3b01      	subs	r3, #1
 8007346:	b29a      	uxth	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007350:	b29b      	uxth	r3, r3
 8007352:	3b01      	subs	r3, #1
 8007354:	b29a      	uxth	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1aa      	bne.n	80072b8 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f000 fcf9 	bl	8007d5e <I2C_WaitOnBTFFlagUntilTimeout>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00d      	beq.n	800738e <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	2b04      	cmp	r3, #4
 8007378:	d107      	bne.n	800738a <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007388:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e016      	b.n	80073bc <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800739c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	e000      	b.n	80073bc <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 80073ba:	2302      	movs	r3, #2
  }
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3718      	adds	r7, #24
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	0800e6c8 	.word	0x0800e6c8
 80073c8:	00100002 	.word	0x00100002
 80073cc:	ffff0000 	.word	0xffff0000

080073d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08c      	sub	sp, #48	; 0x30
 80073d4:	af02      	add	r7, sp, #8
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	4608      	mov	r0, r1
 80073da:	4611      	mov	r1, r2
 80073dc:	461a      	mov	r2, r3
 80073de:	4603      	mov	r3, r0
 80073e0:	817b      	strh	r3, [r7, #10]
 80073e2:	460b      	mov	r3, r1
 80073e4:	813b      	strh	r3, [r7, #8]
 80073e6:	4613      	mov	r3, r2
 80073e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80073ea:	f7fd faad 	bl	8004948 <HAL_GetTick>
 80073ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80073f0:	88fb      	ldrh	r3, [r7, #6]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d007      	beq.n	8007406 <HAL_I2C_Mem_Read+0x36>
 80073f6:	88fb      	ldrh	r3, [r7, #6]
 80073f8:	2b10      	cmp	r3, #16
 80073fa:	d004      	beq.n	8007406 <HAL_I2C_Mem_Read+0x36>
 80073fc:	f44f 611f 	mov.w	r1, #2544	; 0x9f0
 8007400:	4881      	ldr	r0, [pc, #516]	; (8007608 <HAL_I2C_Mem_Read+0x238>)
 8007402:	f7fc f948 	bl	8003696 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b20      	cmp	r3, #32
 8007410:	f040 8209 	bne.w	8007826 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	2319      	movs	r3, #25
 800741a:	2201      	movs	r2, #1
 800741c:	497b      	ldr	r1, [pc, #492]	; (800760c <HAL_I2C_Mem_Read+0x23c>)
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f000 fb86 	bl	8007b30 <I2C_WaitOnFlagUntilTimeout>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 800742a:	2302      	movs	r3, #2
 800742c:	e1fc      	b.n	8007828 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007434:	2b01      	cmp	r3, #1
 8007436:	d101      	bne.n	800743c <HAL_I2C_Mem_Read+0x6c>
 8007438:	2302      	movs	r3, #2
 800743a:	e1f5      	b.n	8007828 <HAL_I2C_Mem_Read+0x458>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b01      	cmp	r3, #1
 8007450:	d007      	beq.n	8007462 <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f042 0201 	orr.w	r2, r2, #1
 8007460:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007470:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2222      	movs	r2, #34	; 0x22
 8007476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2240      	movs	r2, #64	; 0x40
 800747e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800748c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007492:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007498:	b29a      	uxth	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	4a5b      	ldr	r2, [pc, #364]	; (8007610 <HAL_I2C_Mem_Read+0x240>)
 80074a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074a4:	88f8      	ldrh	r0, [r7, #6]
 80074a6:	893a      	ldrh	r2, [r7, #8]
 80074a8:	8979      	ldrh	r1, [r7, #10]
 80074aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ac:	9301      	str	r3, [sp, #4]
 80074ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	4603      	mov	r3, r0
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 fa53 	bl	8007960 <I2C_RequestMemoryRead>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e1b1      	b.n	8007828 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d113      	bne.n	80074f4 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074cc:	2300      	movs	r3, #0
 80074ce:	623b      	str	r3, [r7, #32]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	623b      	str	r3, [r7, #32]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	623b      	str	r3, [r7, #32]
 80074e0:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	e185      	b.n	8007800 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d11b      	bne.n	8007534 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800750a:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800750c:	2300      	movs	r3, #0
 800750e:	61fb      	str	r3, [r7, #28]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	61fb      	str	r3, [r7, #28]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	61fb      	str	r3, [r7, #28]
 8007520:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	e165      	b.n	8007800 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007538:	2b02      	cmp	r3, #2
 800753a:	d11b      	bne.n	8007574 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800754a:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800755a:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800755c:	2300      	movs	r3, #0
 800755e:	61bb      	str	r3, [r7, #24]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	61bb      	str	r3, [r7, #24]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	61bb      	str	r3, [r7, #24]
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	e145      	b.n	8007800 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007574:	2300      	movs	r3, #0
 8007576:	617b      	str	r3, [r7, #20]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	617b      	str	r3, [r7, #20]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	617b      	str	r3, [r7, #20]
 8007588:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800758a:	e139      	b.n	8007800 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007590:	2b03      	cmp	r3, #3
 8007592:	f200 80f2 	bhi.w	800777a <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800759a:	2b01      	cmp	r3, #1
 800759c:	d123      	bne.n	80075e6 <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800759e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f000 fc1c 	bl	8007de0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e13a      	b.n	8007828 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	691a      	ldr	r2, [r3, #16]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075bc:	b2d2      	uxtb	r2, r2
 80075be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c4:	1c5a      	adds	r2, r3, #1
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ce:	3b01      	subs	r3, #1
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075da:	b29b      	uxth	r3, r3
 80075dc:	3b01      	subs	r3, #1
 80075de:	b29a      	uxth	r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075e4:	e10c      	b.n	8007800 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d14f      	bne.n	800768e <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f4:	2200      	movs	r2, #0
 80075f6:	4907      	ldr	r1, [pc, #28]	; (8007614 <HAL_I2C_Mem_Read+0x244>)
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 fa99 	bl	8007b30 <I2C_WaitOnFlagUntilTimeout>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d009      	beq.n	8007618 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e10f      	b.n	8007828 <HAL_I2C_Mem_Read+0x458>
 8007608:	0800e6c8 	.word	0x0800e6c8
 800760c:	00100002 	.word	0x00100002
 8007610:	ffff0000 	.word	0xffff0000
 8007614:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007626:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	691a      	ldr	r2, [r3, #16]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007632:	b2d2      	uxtb	r2, r2
 8007634:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763a:	1c5a      	adds	r2, r3, #1
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007644:	3b01      	subs	r3, #1
 8007646:	b29a      	uxth	r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007650:	b29b      	uxth	r3, r3
 8007652:	3b01      	subs	r3, #1
 8007654:	b29a      	uxth	r2, r3
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	691a      	ldr	r2, [r3, #16]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	b2d2      	uxtb	r2, r2
 8007666:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766c:	1c5a      	adds	r2, r3, #1
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007676:	3b01      	subs	r3, #1
 8007678:	b29a      	uxth	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007682:	b29b      	uxth	r3, r3
 8007684:	3b01      	subs	r3, #1
 8007686:	b29a      	uxth	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800768c:	e0b8      	b.n	8007800 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007694:	2200      	movs	r2, #0
 8007696:	4966      	ldr	r1, [pc, #408]	; (8007830 <HAL_I2C_Mem_Read+0x460>)
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f000 fa49 	bl	8007b30 <I2C_WaitOnFlagUntilTimeout>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d001      	beq.n	80076a8 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	e0bf      	b.n	8007828 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	691a      	ldr	r2, [r3, #16]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c2:	b2d2      	uxtb	r2, r2
 80076c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ca:	1c5a      	adds	r2, r3, #1
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076d4:	3b01      	subs	r3, #1
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	3b01      	subs	r3, #1
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f0:	2200      	movs	r2, #0
 80076f2:	494f      	ldr	r1, [pc, #316]	; (8007830 <HAL_I2C_Mem_Read+0x460>)
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f000 fa1b 	bl	8007b30 <I2C_WaitOnFlagUntilTimeout>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d001      	beq.n	8007704 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e091      	b.n	8007828 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007712:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	691a      	ldr	r2, [r3, #16]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771e:	b2d2      	uxtb	r2, r2
 8007720:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007726:	1c5a      	adds	r2, r3, #1
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007730:	3b01      	subs	r3, #1
 8007732:	b29a      	uxth	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800773c:	b29b      	uxth	r3, r3
 800773e:	3b01      	subs	r3, #1
 8007740:	b29a      	uxth	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	691a      	ldr	r2, [r3, #16]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	b2d2      	uxtb	r2, r2
 8007752:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007758:	1c5a      	adds	r2, r3, #1
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007762:	3b01      	subs	r3, #1
 8007764:	b29a      	uxth	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800776e:	b29b      	uxth	r3, r3
 8007770:	3b01      	subs	r3, #1
 8007772:	b29a      	uxth	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007778:	e042      	b.n	8007800 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800777a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800777c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f000 fb2e 	bl	8007de0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e04c      	b.n	8007828 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	691a      	ldr	r2, [r3, #16]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	b2d2      	uxtb	r2, r2
 800779a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a0:	1c5a      	adds	r2, r3, #1
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077aa:	3b01      	subs	r3, #1
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	3b01      	subs	r3, #1
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	f003 0304 	and.w	r3, r3, #4
 80077ca:	2b04      	cmp	r3, #4
 80077cc:	d118      	bne.n	8007800 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	691a      	ldr	r2, [r3, #16]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d8:	b2d2      	uxtb	r2, r2
 80077da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e0:	1c5a      	adds	r2, r3, #1
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ea:	3b01      	subs	r3, #1
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	3b01      	subs	r3, #1
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007804:	2b00      	cmp	r3, #0
 8007806:	f47f aec1 	bne.w	800758c <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2220      	movs	r2, #32
 800780e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007822:	2300      	movs	r3, #0
 8007824:	e000      	b.n	8007828 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8007826:	2302      	movs	r3, #2
  }
}
 8007828:	4618      	mov	r0, r3
 800782a:	3728      	adds	r7, #40	; 0x28
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	00010004 	.word	0x00010004

08007834 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b088      	sub	sp, #32
 8007838:	af02      	add	r7, sp, #8
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	4608      	mov	r0, r1
 800783e:	4611      	mov	r1, r2
 8007840:	461a      	mov	r2, r3
 8007842:	4603      	mov	r3, r0
 8007844:	817b      	strh	r3, [r7, #10]
 8007846:	460b      	mov	r3, r1
 8007848:	813b      	strh	r3, [r7, #8]
 800784a:	4613      	mov	r3, r2
 800784c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800785c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	2200      	movs	r2, #0
 8007866:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f000 f960 	bl	8007b30 <I2C_WaitOnFlagUntilTimeout>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00d      	beq.n	8007892 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007884:	d103      	bne.n	800788e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800788c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e05f      	b.n	8007952 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007892:	897b      	ldrh	r3, [r7, #10]
 8007894:	b2db      	uxtb	r3, r3
 8007896:	461a      	mov	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80078a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a4:	6a3a      	ldr	r2, [r7, #32]
 80078a6:	492d      	ldr	r1, [pc, #180]	; (800795c <I2C_RequestMemoryWrite+0x128>)
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f000 f998 	bl	8007bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d001      	beq.n	80078b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e04c      	b.n	8007952 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078b8:	2300      	movs	r3, #0
 80078ba:	617b      	str	r3, [r7, #20]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	617b      	str	r3, [r7, #20]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	617b      	str	r3, [r7, #20]
 80078cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80078ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078d0:	6a39      	ldr	r1, [r7, #32]
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f000 fa02 	bl	8007cdc <I2C_WaitOnTXEFlagUntilTimeout>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00d      	beq.n	80078fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e2:	2b04      	cmp	r3, #4
 80078e4:	d107      	bne.n	80078f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e02b      	b.n	8007952 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80078fa:	88fb      	ldrh	r3, [r7, #6]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d105      	bne.n	800790c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007900:	893b      	ldrh	r3, [r7, #8]
 8007902:	b2da      	uxtb	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	611a      	str	r2, [r3, #16]
 800790a:	e021      	b.n	8007950 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800790c:	893b      	ldrh	r3, [r7, #8]
 800790e:	0a1b      	lsrs	r3, r3, #8
 8007910:	b29b      	uxth	r3, r3
 8007912:	b2da      	uxtb	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800791a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800791c:	6a39      	ldr	r1, [r7, #32]
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 f9dc 	bl	8007cdc <I2C_WaitOnTXEFlagUntilTimeout>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00d      	beq.n	8007946 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792e:	2b04      	cmp	r3, #4
 8007930:	d107      	bne.n	8007942 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007940:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e005      	b.n	8007952 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007946:	893b      	ldrh	r3, [r7, #8]
 8007948:	b2da      	uxtb	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3718      	adds	r7, #24
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	00010002 	.word	0x00010002

08007960 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b088      	sub	sp, #32
 8007964:	af02      	add	r7, sp, #8
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	4608      	mov	r0, r1
 800796a:	4611      	mov	r1, r2
 800796c:	461a      	mov	r2, r3
 800796e:	4603      	mov	r3, r0
 8007970:	817b      	strh	r3, [r7, #10]
 8007972:	460b      	mov	r3, r1
 8007974:	813b      	strh	r3, [r7, #8]
 8007976:	4613      	mov	r3, r2
 8007978:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007988:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007998:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	6a3b      	ldr	r3, [r7, #32]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 f8c2 	bl	8007b30 <I2C_WaitOnFlagUntilTimeout>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00d      	beq.n	80079ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079c0:	d103      	bne.n	80079ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e0aa      	b.n	8007b24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80079ce:	897b      	ldrh	r3, [r7, #10]
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	461a      	mov	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80079dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e0:	6a3a      	ldr	r2, [r7, #32]
 80079e2:	4952      	ldr	r1, [pc, #328]	; (8007b2c <I2C_RequestMemoryRead+0x1cc>)
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	f000 f8fa 	bl	8007bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d001      	beq.n	80079f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e097      	b.n	8007b24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079f4:	2300      	movs	r3, #0
 80079f6:	617b      	str	r3, [r7, #20]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	617b      	str	r3, [r7, #20]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	617b      	str	r3, [r7, #20]
 8007a08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a0c:	6a39      	ldr	r1, [r7, #32]
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f000 f964 	bl	8007cdc <I2C_WaitOnTXEFlagUntilTimeout>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00d      	beq.n	8007a36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1e:	2b04      	cmp	r3, #4
 8007a20:	d107      	bne.n	8007a32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e076      	b.n	8007b24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a36:	88fb      	ldrh	r3, [r7, #6]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d105      	bne.n	8007a48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a3c:	893b      	ldrh	r3, [r7, #8]
 8007a3e:	b2da      	uxtb	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	611a      	str	r2, [r3, #16]
 8007a46:	e021      	b.n	8007a8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007a48:	893b      	ldrh	r3, [r7, #8]
 8007a4a:	0a1b      	lsrs	r3, r3, #8
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a58:	6a39      	ldr	r1, [r7, #32]
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f000 f93e 	bl	8007cdc <I2C_WaitOnTXEFlagUntilTimeout>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00d      	beq.n	8007a82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6a:	2b04      	cmp	r3, #4
 8007a6c:	d107      	bne.n	8007a7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e050      	b.n	8007b24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a82:	893b      	ldrh	r3, [r7, #8]
 8007a84:	b2da      	uxtb	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a8e:	6a39      	ldr	r1, [r7, #32]
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f000 f923 	bl	8007cdc <I2C_WaitOnTXEFlagUntilTimeout>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00d      	beq.n	8007ab8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa0:	2b04      	cmp	r3, #4
 8007aa2:	d107      	bne.n	8007ab4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ab2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e035      	b.n	8007b24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ac6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f000 f82b 	bl	8007b30 <I2C_WaitOnFlagUntilTimeout>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00d      	beq.n	8007afc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aee:	d103      	bne.n	8007af8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007af6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e013      	b.n	8007b24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007afc:	897b      	ldrh	r3, [r7, #10]
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	f043 0301 	orr.w	r3, r3, #1
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	6a3a      	ldr	r2, [r7, #32]
 8007b10:	4906      	ldr	r1, [pc, #24]	; (8007b2c <I2C_RequestMemoryRead+0x1cc>)
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f000 f863 	bl	8007bde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d001      	beq.n	8007b22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e000      	b.n	8007b24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3718      	adds	r7, #24
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	00010002 	.word	0x00010002

08007b30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	603b      	str	r3, [r7, #0]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b40:	e025      	b.n	8007b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b48:	d021      	beq.n	8007b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b4a:	f7fc fefd 	bl	8004948 <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	683a      	ldr	r2, [r7, #0]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d302      	bcc.n	8007b60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d116      	bne.n	8007b8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2220      	movs	r2, #32
 8007b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7a:	f043 0220 	orr.w	r2, r3, #32
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e023      	b.n	8007bd6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	0c1b      	lsrs	r3, r3, #16
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d10d      	bne.n	8007bb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	43da      	mvns	r2, r3
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	bf0c      	ite	eq
 8007baa:	2301      	moveq	r3, #1
 8007bac:	2300      	movne	r3, #0
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	e00c      	b.n	8007bce <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	43da      	mvns	r2, r3
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	bf0c      	ite	eq
 8007bc6:	2301      	moveq	r3, #1
 8007bc8:	2300      	movne	r3, #0
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	461a      	mov	r2, r3
 8007bce:	79fb      	ldrb	r3, [r7, #7]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d0b6      	beq.n	8007b42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b084      	sub	sp, #16
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	60f8      	str	r0, [r7, #12]
 8007be6:	60b9      	str	r1, [r7, #8]
 8007be8:	607a      	str	r2, [r7, #4]
 8007bea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007bec:	e051      	b.n	8007c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bfc:	d123      	bne.n	8007c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2220      	movs	r2, #32
 8007c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c32:	f043 0204 	orr.w	r2, r3, #4
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e046      	b.n	8007cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c4c:	d021      	beq.n	8007c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c4e:	f7fc fe7b 	bl	8004948 <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d302      	bcc.n	8007c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d116      	bne.n	8007c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2220      	movs	r2, #32
 8007c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7e:	f043 0220 	orr.w	r2, r3, #32
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e020      	b.n	8007cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	0c1b      	lsrs	r3, r3, #16
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d10c      	bne.n	8007cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	43da      	mvns	r2, r3
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	bf14      	ite	ne
 8007cae:	2301      	movne	r3, #1
 8007cb0:	2300      	moveq	r3, #0
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	e00b      	b.n	8007cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	43da      	mvns	r2, r3
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	bf14      	ite	ne
 8007cc8:	2301      	movne	r3, #1
 8007cca:	2300      	moveq	r3, #0
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d18d      	bne.n	8007bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ce8:	e02d      	b.n	8007d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f000 f8ce 	bl	8007e8c <I2C_IsAcknowledgeFailed>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e02d      	b.n	8007d56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d00:	d021      	beq.n	8007d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d02:	f7fc fe21 	bl	8004948 <HAL_GetTick>
 8007d06:	4602      	mov	r2, r0
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d302      	bcc.n	8007d18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d116      	bne.n	8007d46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2220      	movs	r2, #32
 8007d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d32:	f043 0220 	orr.w	r2, r3, #32
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e007      	b.n	8007d56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	695b      	ldr	r3, [r3, #20]
 8007d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d50:	2b80      	cmp	r3, #128	; 0x80
 8007d52:	d1ca      	bne.n	8007cea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b084      	sub	sp, #16
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	60f8      	str	r0, [r7, #12]
 8007d66:	60b9      	str	r1, [r7, #8]
 8007d68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d6a:	e02d      	b.n	8007dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f000 f88d 	bl	8007e8c <I2C_IsAcknowledgeFailed>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d001      	beq.n	8007d7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e02d      	b.n	8007dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d82:	d021      	beq.n	8007dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d84:	f7fc fde0 	bl	8004948 <HAL_GetTick>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d302      	bcc.n	8007d9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d116      	bne.n	8007dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2220      	movs	r2, #32
 8007da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db4:	f043 0220 	orr.w	r2, r3, #32
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e007      	b.n	8007dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	f003 0304 	and.w	r3, r3, #4
 8007dd2:	2b04      	cmp	r3, #4
 8007dd4:	d1ca      	bne.n	8007d6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007dec:	e042      	b.n	8007e74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	695b      	ldr	r3, [r3, #20]
 8007df4:	f003 0310 	and.w	r3, r3, #16
 8007df8:	2b10      	cmp	r3, #16
 8007dfa:	d119      	bne.n	8007e30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f06f 0210 	mvn.w	r2, #16
 8007e04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2220      	movs	r2, #32
 8007e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e029      	b.n	8007e84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e30:	f7fc fd8a 	bl	8004948 <HAL_GetTick>
 8007e34:	4602      	mov	r2, r0
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	1ad3      	subs	r3, r2, r3
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d302      	bcc.n	8007e46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d116      	bne.n	8007e74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2220      	movs	r2, #32
 8007e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e60:	f043 0220 	orr.w	r2, r3, #32
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e007      	b.n	8007e84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e7e:	2b40      	cmp	r3, #64	; 0x40
 8007e80:	d1b5      	bne.n	8007dee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	695b      	ldr	r3, [r3, #20]
 8007e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ea2:	d11b      	bne.n	8007edc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007eac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2220      	movs	r2, #32
 8007eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec8:	f043 0204 	orr.w	r2, r3, #4
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e000      	b.n	8007ede <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
	...

08007eec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a28      	ldr	r2, [pc, #160]	; (8007f9c <HAL_I2CEx_ConfigAnalogFilter+0xb0>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d00d      	beq.n	8007f1c <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a26      	ldr	r2, [pc, #152]	; (8007fa0 <HAL_I2CEx_ConfigAnalogFilter+0xb4>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d008      	beq.n	8007f1c <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a25      	ldr	r2, [pc, #148]	; (8007fa4 <HAL_I2CEx_ConfigAnalogFilter+0xb8>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d003      	beq.n	8007f1c <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8007f14:	215c      	movs	r1, #92	; 0x5c
 8007f16:	4824      	ldr	r0, [pc, #144]	; (8007fa8 <HAL_I2CEx_ConfigAnalogFilter+0xbc>)
 8007f18:	f7fb fbbd 	bl	8003696 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d006      	beq.n	8007f30 <HAL_I2CEx_ConfigAnalogFilter+0x44>
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	2b10      	cmp	r3, #16
 8007f26:	d003      	beq.n	8007f30 <HAL_I2CEx_ConfigAnalogFilter+0x44>
 8007f28:	215d      	movs	r1, #93	; 0x5d
 8007f2a:	481f      	ldr	r0, [pc, #124]	; (8007fa8 <HAL_I2CEx_ConfigAnalogFilter+0xbc>)
 8007f2c:	f7fb fbb3 	bl	8003696 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	2b20      	cmp	r3, #32
 8007f3a:	d129      	bne.n	8007f90 <HAL_I2CEx_ConfigAnalogFilter+0xa4>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2224      	movs	r2, #36	; 0x24
 8007f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f022 0201 	bic.w	r2, r2, #1
 8007f52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f022 0210 	bic.w	r2, r2, #16
 8007f62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	683a      	ldr	r2, [r7, #0]
 8007f70:	430a      	orrs	r2, r1
 8007f72:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f042 0201 	orr.w	r2, r2, #1
 8007f82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2220      	movs	r2, #32
 8007f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	e000      	b.n	8007f92 <HAL_I2CEx_ConfigAnalogFilter+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8007f90:	2302      	movs	r3, #2
  }
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	40005400 	.word	0x40005400
 8007fa0:	40005800 	.word	0x40005800
 8007fa4:	40005c00 	.word	0x40005c00
 8007fa8:	0800e700 	.word	0x0800e700

08007fac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a27      	ldr	r2, [pc, #156]	; (800805c <HAL_I2CEx_ConfigDigitalFilter+0xb0>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d00d      	beq.n	8007fe0 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a25      	ldr	r2, [pc, #148]	; (8008060 <HAL_I2CEx_ConfigDigitalFilter+0xb4>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d008      	beq.n	8007fe0 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a24      	ldr	r2, [pc, #144]	; (8008064 <HAL_I2CEx_ConfigDigitalFilter+0xb8>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d003      	beq.n	8007fe0 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 8007fd8:	2184      	movs	r1, #132	; 0x84
 8007fda:	4823      	ldr	r0, [pc, #140]	; (8008068 <HAL_I2CEx_ConfigDigitalFilter+0xbc>)
 8007fdc:	f7fb fb5b 	bl	8003696 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	2b0f      	cmp	r3, #15
 8007fe4:	d903      	bls.n	8007fee <HAL_I2CEx_ConfigDigitalFilter+0x42>
 8007fe6:	2185      	movs	r1, #133	; 0x85
 8007fe8:	481f      	ldr	r0, [pc, #124]	; (8008068 <HAL_I2CEx_ConfigDigitalFilter+0xbc>)
 8007fea:	f7fb fb54 	bl	8003696 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b20      	cmp	r3, #32
 8007ff8:	d12a      	bne.n	8008050 <HAL_I2CEx_ConfigDigitalFilter+0xa4>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2224      	movs	r2, #36	; 0x24
 8007ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f022 0201 	bic.w	r2, r2, #1
 8008010:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008018:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800801a:	89fb      	ldrh	r3, [r7, #14]
 800801c:	f023 030f 	bic.w	r3, r3, #15
 8008020:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	b29a      	uxth	r2, r3
 8008026:	89fb      	ldrh	r3, [r7, #14]
 8008028:	4313      	orrs	r3, r2
 800802a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	89fa      	ldrh	r2, [r7, #14]
 8008032:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f042 0201 	orr.w	r2, r2, #1
 8008042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2220      	movs	r2, #32
 8008048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800804c:	2300      	movs	r3, #0
 800804e:	e000      	b.n	8008052 <HAL_I2CEx_ConfigDigitalFilter+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8008050:	2302      	movs	r3, #2
  }
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	40005400 	.word	0x40005400
 8008060:	40005800 	.word	0x40005800
 8008064:	40005c00 	.word	0x40005c00
 8008068:	0800e700 	.word	0x0800e700

0800806c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008072:	2300      	movs	r3, #0
 8008074:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008076:	2300      	movs	r3, #0
 8008078:	603b      	str	r3, [r7, #0]
 800807a:	4b20      	ldr	r3, [pc, #128]	; (80080fc <HAL_PWREx_EnableOverDrive+0x90>)
 800807c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807e:	4a1f      	ldr	r2, [pc, #124]	; (80080fc <HAL_PWREx_EnableOverDrive+0x90>)
 8008080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008084:	6413      	str	r3, [r2, #64]	; 0x40
 8008086:	4b1d      	ldr	r3, [pc, #116]	; (80080fc <HAL_PWREx_EnableOverDrive+0x90>)
 8008088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800808e:	603b      	str	r3, [r7, #0]
 8008090:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008092:	4b1b      	ldr	r3, [pc, #108]	; (8008100 <HAL_PWREx_EnableOverDrive+0x94>)
 8008094:	2201      	movs	r2, #1
 8008096:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008098:	f7fc fc56 	bl	8004948 <HAL_GetTick>
 800809c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800809e:	e009      	b.n	80080b4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80080a0:	f7fc fc52 	bl	8004948 <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080ae:	d901      	bls.n	80080b4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e01f      	b.n	80080f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80080b4:	4b13      	ldr	r3, [pc, #76]	; (8008104 <HAL_PWREx_EnableOverDrive+0x98>)
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080c0:	d1ee      	bne.n	80080a0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80080c2:	4b11      	ldr	r3, [pc, #68]	; (8008108 <HAL_PWREx_EnableOverDrive+0x9c>)
 80080c4:	2201      	movs	r2, #1
 80080c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80080c8:	f7fc fc3e 	bl	8004948 <HAL_GetTick>
 80080cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80080ce:	e009      	b.n	80080e4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80080d0:	f7fc fc3a 	bl	8004948 <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080de:	d901      	bls.n	80080e4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e007      	b.n	80080f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80080e4:	4b07      	ldr	r3, [pc, #28]	; (8008104 <HAL_PWREx_EnableOverDrive+0x98>)
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080f0:	d1ee      	bne.n	80080d0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	40023800 	.word	0x40023800
 8008100:	420e0040 	.word	0x420e0040
 8008104:	40007000 	.word	0x40007000
 8008108:	420e0044 	.word	0x420e0044

0800810c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d101      	bne.n	800811e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e30d      	b.n	800873a <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b0f      	cmp	r3, #15
 8008124:	d903      	bls.n	800812e <HAL_RCC_OscConfig+0x22>
 8008126:	21e8      	movs	r1, #232	; 0xe8
 8008128:	48a3      	ldr	r0, [pc, #652]	; (80083b8 <HAL_RCC_OscConfig+0x2ac>)
 800812a:	f7fb fab4 	bl	8003696 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	2b00      	cmp	r3, #0
 8008138:	f000 8088 	beq.w	800824c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00d      	beq.n	8008160 <HAL_RCC_OscConfig+0x54>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800814c:	d008      	beq.n	8008160 <HAL_RCC_OscConfig+0x54>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008156:	d003      	beq.n	8008160 <HAL_RCC_OscConfig+0x54>
 8008158:	21ed      	movs	r1, #237	; 0xed
 800815a:	4897      	ldr	r0, [pc, #604]	; (80083b8 <HAL_RCC_OscConfig+0x2ac>)
 800815c:	f7fb fa9b 	bl	8003696 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008160:	4b96      	ldr	r3, [pc, #600]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	f003 030c 	and.w	r3, r3, #12
 8008168:	2b04      	cmp	r3, #4
 800816a:	d00c      	beq.n	8008186 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800816c:	4b93      	ldr	r3, [pc, #588]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008174:	2b08      	cmp	r3, #8
 8008176:	d112      	bne.n	800819e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008178:	4b90      	ldr	r3, [pc, #576]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008184:	d10b      	bne.n	800819e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008186:	4b8d      	ldr	r3, [pc, #564]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800818e:	2b00      	cmp	r3, #0
 8008190:	d05b      	beq.n	800824a <HAL_RCC_OscConfig+0x13e>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d157      	bne.n	800824a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e2cd      	b.n	800873a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081a6:	d106      	bne.n	80081b6 <HAL_RCC_OscConfig+0xaa>
 80081a8:	4b84      	ldr	r3, [pc, #528]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a83      	ldr	r2, [pc, #524]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 80081ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081b2:	6013      	str	r3, [r2, #0]
 80081b4:	e01d      	b.n	80081f2 <HAL_RCC_OscConfig+0xe6>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081be:	d10c      	bne.n	80081da <HAL_RCC_OscConfig+0xce>
 80081c0:	4b7e      	ldr	r3, [pc, #504]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a7d      	ldr	r2, [pc, #500]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 80081c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081ca:	6013      	str	r3, [r2, #0]
 80081cc:	4b7b      	ldr	r3, [pc, #492]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a7a      	ldr	r2, [pc, #488]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 80081d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	e00b      	b.n	80081f2 <HAL_RCC_OscConfig+0xe6>
 80081da:	4b78      	ldr	r3, [pc, #480]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a77      	ldr	r2, [pc, #476]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 80081e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081e4:	6013      	str	r3, [r2, #0]
 80081e6:	4b75      	ldr	r3, [pc, #468]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a74      	ldr	r2, [pc, #464]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 80081ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d013      	beq.n	8008222 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80081fa:	f7fc fba5 	bl	8004948 <HAL_GetTick>
 80081fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008200:	e008      	b.n	8008214 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008202:	f7fc fba1 	bl	8004948 <HAL_GetTick>
 8008206:	4602      	mov	r2, r0
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	1ad3      	subs	r3, r2, r3
 800820c:	2b64      	cmp	r3, #100	; 0x64
 800820e:	d901      	bls.n	8008214 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8008210:	2303      	movs	r3, #3
 8008212:	e292      	b.n	800873a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008214:	4b69      	ldr	r3, [pc, #420]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800821c:	2b00      	cmp	r3, #0
 800821e:	d0f0      	beq.n	8008202 <HAL_RCC_OscConfig+0xf6>
 8008220:	e014      	b.n	800824c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008222:	f7fc fb91 	bl	8004948 <HAL_GetTick>
 8008226:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008228:	e008      	b.n	800823c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800822a:	f7fc fb8d 	bl	8004948 <HAL_GetTick>
 800822e:	4602      	mov	r2, r0
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	2b64      	cmp	r3, #100	; 0x64
 8008236:	d901      	bls.n	800823c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e27e      	b.n	800873a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800823c:	4b5f      	ldr	r3, [pc, #380]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1f0      	bne.n	800822a <HAL_RCC_OscConfig+0x11e>
 8008248:	e000      	b.n	800824c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800824a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 0302 	and.w	r3, r3, #2
 8008254:	2b00      	cmp	r3, #0
 8008256:	d079      	beq.n	800834c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d008      	beq.n	8008272 <HAL_RCC_OscConfig+0x166>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d004      	beq.n	8008272 <HAL_RCC_OscConfig+0x166>
 8008268:	f240 111f 	movw	r1, #287	; 0x11f
 800826c:	4852      	ldr	r0, [pc, #328]	; (80083b8 <HAL_RCC_OscConfig+0x2ac>)
 800826e:	f7fb fa12 	bl	8003696 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	2b1f      	cmp	r3, #31
 8008278:	d904      	bls.n	8008284 <HAL_RCC_OscConfig+0x178>
 800827a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800827e:	484e      	ldr	r0, [pc, #312]	; (80083b8 <HAL_RCC_OscConfig+0x2ac>)
 8008280:	f7fb fa09 	bl	8003696 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008284:	4b4d      	ldr	r3, [pc, #308]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f003 030c 	and.w	r3, r3, #12
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00b      	beq.n	80082a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008290:	4b4a      	ldr	r3, [pc, #296]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008298:	2b08      	cmp	r3, #8
 800829a:	d11c      	bne.n	80082d6 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800829c:	4b47      	ldr	r3, [pc, #284]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d116      	bne.n	80082d6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082a8:	4b44      	ldr	r3, [pc, #272]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 0302 	and.w	r3, r3, #2
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d005      	beq.n	80082c0 <HAL_RCC_OscConfig+0x1b4>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d001      	beq.n	80082c0 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	e23c      	b.n	800873a <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082c0:	4b3e      	ldr	r3, [pc, #248]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	00db      	lsls	r3, r3, #3
 80082ce:	493b      	ldr	r1, [pc, #236]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 80082d0:	4313      	orrs	r3, r2
 80082d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082d4:	e03a      	b.n	800834c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d020      	beq.n	8008320 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80082de:	4b38      	ldr	r3, [pc, #224]	; (80083c0 <HAL_RCC_OscConfig+0x2b4>)
 80082e0:	2201      	movs	r2, #1
 80082e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082e4:	f7fc fb30 	bl	8004948 <HAL_GetTick>
 80082e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082ea:	e008      	b.n	80082fe <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082ec:	f7fc fb2c 	bl	8004948 <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d901      	bls.n	80082fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e21d      	b.n	800873a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082fe:	4b2f      	ldr	r3, [pc, #188]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 0302 	and.w	r3, r3, #2
 8008306:	2b00      	cmp	r3, #0
 8008308:	d0f0      	beq.n	80082ec <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800830a:	4b2c      	ldr	r3, [pc, #176]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	00db      	lsls	r3, r3, #3
 8008318:	4928      	ldr	r1, [pc, #160]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 800831a:	4313      	orrs	r3, r2
 800831c:	600b      	str	r3, [r1, #0]
 800831e:	e015      	b.n	800834c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008320:	4b27      	ldr	r3, [pc, #156]	; (80083c0 <HAL_RCC_OscConfig+0x2b4>)
 8008322:	2200      	movs	r2, #0
 8008324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008326:	f7fc fb0f 	bl	8004948 <HAL_GetTick>
 800832a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800832c:	e008      	b.n	8008340 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800832e:	f7fc fb0b 	bl	8004948 <HAL_GetTick>
 8008332:	4602      	mov	r2, r0
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	2b02      	cmp	r3, #2
 800833a:	d901      	bls.n	8008340 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800833c:	2303      	movs	r3, #3
 800833e:	e1fc      	b.n	800873a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008340:	4b1e      	ldr	r3, [pc, #120]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 0302 	and.w	r3, r3, #2
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1f0      	bne.n	800832e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 0308 	and.w	r3, r3, #8
 8008354:	2b00      	cmp	r3, #0
 8008356:	d046      	beq.n	80083e6 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d008      	beq.n	8008372 <HAL_RCC_OscConfig+0x266>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	695b      	ldr	r3, [r3, #20]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d004      	beq.n	8008372 <HAL_RCC_OscConfig+0x266>
 8008368:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800836c:	4812      	ldr	r0, [pc, #72]	; (80083b8 <HAL_RCC_OscConfig+0x2ac>)
 800836e:	f7fb f992 	bl	8003696 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d016      	beq.n	80083a8 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800837a:	4b12      	ldr	r3, [pc, #72]	; (80083c4 <HAL_RCC_OscConfig+0x2b8>)
 800837c:	2201      	movs	r2, #1
 800837e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008380:	f7fc fae2 	bl	8004948 <HAL_GetTick>
 8008384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008386:	e008      	b.n	800839a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008388:	f7fc fade 	bl	8004948 <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	2b02      	cmp	r3, #2
 8008394:	d901      	bls.n	800839a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e1cf      	b.n	800873a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800839a:	4b08      	ldr	r3, [pc, #32]	; (80083bc <HAL_RCC_OscConfig+0x2b0>)
 800839c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800839e:	f003 0302 	and.w	r3, r3, #2
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d0f0      	beq.n	8008388 <HAL_RCC_OscConfig+0x27c>
 80083a6:	e01e      	b.n	80083e6 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80083a8:	4b06      	ldr	r3, [pc, #24]	; (80083c4 <HAL_RCC_OscConfig+0x2b8>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083ae:	f7fc facb 	bl	8004948 <HAL_GetTick>
 80083b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083b4:	e011      	b.n	80083da <HAL_RCC_OscConfig+0x2ce>
 80083b6:	bf00      	nop
 80083b8:	0800e73c 	.word	0x0800e73c
 80083bc:	40023800 	.word	0x40023800
 80083c0:	42470000 	.word	0x42470000
 80083c4:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80083c8:	f7fc fabe 	bl	8004948 <HAL_GetTick>
 80083cc:	4602      	mov	r2, r0
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d901      	bls.n	80083da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e1af      	b.n	800873a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083da:	4b97      	ldr	r3, [pc, #604]	; (8008638 <HAL_RCC_OscConfig+0x52c>)
 80083dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083de:	f003 0302 	and.w	r3, r3, #2
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1f0      	bne.n	80083c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0304 	and.w	r3, r3, #4
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f000 80a8 	beq.w	8008544 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 80083f4:	2300      	movs	r3, #0
 80083f6:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00c      	beq.n	800841a <HAL_RCC_OscConfig+0x30e>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d008      	beq.n	800841a <HAL_RCC_OscConfig+0x30e>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	2b05      	cmp	r3, #5
 800840e:	d004      	beq.n	800841a <HAL_RCC_OscConfig+0x30e>
 8008410:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8008414:	4889      	ldr	r0, [pc, #548]	; (800863c <HAL_RCC_OscConfig+0x530>)
 8008416:	f7fb f93e 	bl	8003696 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800841a:	4b87      	ldr	r3, [pc, #540]	; (8008638 <HAL_RCC_OscConfig+0x52c>)
 800841c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10f      	bne.n	8008446 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008426:	2300      	movs	r3, #0
 8008428:	60bb      	str	r3, [r7, #8]
 800842a:	4b83      	ldr	r3, [pc, #524]	; (8008638 <HAL_RCC_OscConfig+0x52c>)
 800842c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842e:	4a82      	ldr	r2, [pc, #520]	; (8008638 <HAL_RCC_OscConfig+0x52c>)
 8008430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008434:	6413      	str	r3, [r2, #64]	; 0x40
 8008436:	4b80      	ldr	r3, [pc, #512]	; (8008638 <HAL_RCC_OscConfig+0x52c>)
 8008438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800843e:	60bb      	str	r3, [r7, #8]
 8008440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008442:	2301      	movs	r3, #1
 8008444:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008446:	4b7e      	ldr	r3, [pc, #504]	; (8008640 <HAL_RCC_OscConfig+0x534>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800844e:	2b00      	cmp	r3, #0
 8008450:	d118      	bne.n	8008484 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008452:	4b7b      	ldr	r3, [pc, #492]	; (8008640 <HAL_RCC_OscConfig+0x534>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a7a      	ldr	r2, [pc, #488]	; (8008640 <HAL_RCC_OscConfig+0x534>)
 8008458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800845c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800845e:	f7fc fa73 	bl	8004948 <HAL_GetTick>
 8008462:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008464:	e008      	b.n	8008478 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008466:	f7fc fa6f 	bl	8004948 <HAL_GetTick>
 800846a:	4602      	mov	r2, r0
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	2b02      	cmp	r3, #2
 8008472:	d901      	bls.n	8008478 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8008474:	2303      	movs	r3, #3
 8008476:	e160      	b.n	800873a <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008478:	4b71      	ldr	r3, [pc, #452]	; (8008640 <HAL_RCC_OscConfig+0x534>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008480:	2b00      	cmp	r3, #0
 8008482:	d0f0      	beq.n	8008466 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d106      	bne.n	800849a <HAL_RCC_OscConfig+0x38e>
 800848c:	4b6a      	ldr	r3, [pc, #424]	; (8008638 <HAL_RCC_OscConfig+0x52c>)
 800848e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008490:	4a69      	ldr	r2, [pc, #420]	; (8008638 <HAL_RCC_OscConfig+0x52c>)
 8008492:	f043 0301 	orr.w	r3, r3, #1
 8008496:	6713      	str	r3, [r2, #112]	; 0x70
 8008498:	e01c      	b.n	80084d4 <HAL_RCC_OscConfig+0x3c8>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	2b05      	cmp	r3, #5
 80084a0:	d10c      	bne.n	80084bc <HAL_RCC_OscConfig+0x3b0>
 80084a2:	4b65      	ldr	r3, [pc, #404]	; (8008638 <HAL_RCC_OscConfig+0x52c>)
 80084a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a6:	4a64      	ldr	r2, [pc, #400]	; (8008638 <HAL_RCC_OscConfig+0x52c>)
 80084a8:	f043 0304 	orr.w	r3, r3, #4
 80084ac:	6713      	str	r3, [r2, #112]	; 0x70
 80084ae:	4b62      	ldr	r3, [pc, #392]	; (8008638 <HAL_RCC_OscConfig+0x52c>)
 80084b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b2:	4a61      	ldr	r2, [pc, #388]	; (8008638 <HAL_RCC_OscConfig+0x52c>)
 80084b4:	f043 0301 	orr.w	r3, r3, #1
 80084b8:	6713      	str	r3, [r2, #112]	; 0x70
 80084ba:	e00b      	b.n	80084d4 <HAL_RCC_OscConfig+0x3c8>
 80084bc:	4b5e      	ldr	r3, [pc, #376]	; (8008638 <HAL_RCC_OscConfig+0x52c>)
 80084be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c0:	4a5d      	ldr	r2, [pc, #372]	; (8008638 <HAL_RCC_OscConfig+0x52c>)
 80084c2:	f023 0301 	bic.w	r3, r3, #1
 80084c6:	6713      	str	r3, [r2, #112]	; 0x70
 80084c8:	4b5b      	ldr	r3, [pc, #364]	; (8008638 <HAL_RCC_OscConfig+0x52c>)
 80084ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084cc:	4a5a      	ldr	r2, [pc, #360]	; (8008638 <HAL_RCC_OscConfig+0x52c>)
 80084ce:	f023 0304 	bic.w	r3, r3, #4
 80084d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d015      	beq.n	8008508 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084dc:	f7fc fa34 	bl	8004948 <HAL_GetTick>
 80084e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084e2:	e00a      	b.n	80084fa <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084e4:	f7fc fa30 	bl	8004948 <HAL_GetTick>
 80084e8:	4602      	mov	r2, r0
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d901      	bls.n	80084fa <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	e11f      	b.n	800873a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084fa:	4b4f      	ldr	r3, [pc, #316]	; (8008638 <HAL_RCC_OscConfig+0x52c>)
 80084fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084fe:	f003 0302 	and.w	r3, r3, #2
 8008502:	2b00      	cmp	r3, #0
 8008504:	d0ee      	beq.n	80084e4 <HAL_RCC_OscConfig+0x3d8>
 8008506:	e014      	b.n	8008532 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008508:	f7fc fa1e 	bl	8004948 <HAL_GetTick>
 800850c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800850e:	e00a      	b.n	8008526 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008510:	f7fc fa1a 	bl	8004948 <HAL_GetTick>
 8008514:	4602      	mov	r2, r0
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	f241 3288 	movw	r2, #5000	; 0x1388
 800851e:	4293      	cmp	r3, r2
 8008520:	d901      	bls.n	8008526 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8008522:	2303      	movs	r3, #3
 8008524:	e109      	b.n	800873a <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008526:	4b44      	ldr	r3, [pc, #272]	; (8008638 <HAL_RCC_OscConfig+0x52c>)
 8008528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800852a:	f003 0302 	and.w	r3, r3, #2
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1ee      	bne.n	8008510 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008532:	7dfb      	ldrb	r3, [r7, #23]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d105      	bne.n	8008544 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008538:	4b3f      	ldr	r3, [pc, #252]	; (8008638 <HAL_RCC_OscConfig+0x52c>)
 800853a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853c:	4a3e      	ldr	r2, [pc, #248]	; (8008638 <HAL_RCC_OscConfig+0x52c>)
 800853e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008542:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00c      	beq.n	8008566 <HAL_RCC_OscConfig+0x45a>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	699b      	ldr	r3, [r3, #24]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d008      	beq.n	8008566 <HAL_RCC_OscConfig+0x45a>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	699b      	ldr	r3, [r3, #24]
 8008558:	2b02      	cmp	r3, #2
 800855a:	d004      	beq.n	8008566 <HAL_RCC_OscConfig+0x45a>
 800855c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8008560:	4836      	ldr	r0, [pc, #216]	; (800863c <HAL_RCC_OscConfig+0x530>)
 8008562:	f7fb f898 	bl	8003696 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	2b00      	cmp	r3, #0
 800856c:	f000 80e4 	beq.w	8008738 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008570:	4b31      	ldr	r3, [pc, #196]	; (8008638 <HAL_RCC_OscConfig+0x52c>)
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	f003 030c 	and.w	r3, r3, #12
 8008578:	2b08      	cmp	r3, #8
 800857a:	f000 80ae 	beq.w	80086da <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	2b02      	cmp	r3, #2
 8008584:	f040 8092 	bne.w	80086ac <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	69db      	ldr	r3, [r3, #28]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d009      	beq.n	80085a4 <HAL_RCC_OscConfig+0x498>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	69db      	ldr	r3, [r3, #28]
 8008594:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008598:	d004      	beq.n	80085a4 <HAL_RCC_OscConfig+0x498>
 800859a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800859e:	4827      	ldr	r0, [pc, #156]	; (800863c <HAL_RCC_OscConfig+0x530>)
 80085a0:	f7fb f879 	bl	8003696 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a1b      	ldr	r3, [r3, #32]
 80085a8:	2b3f      	cmp	r3, #63	; 0x3f
 80085aa:	d904      	bls.n	80085b6 <HAL_RCC_OscConfig+0x4aa>
 80085ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80085b0:	4822      	ldr	r0, [pc, #136]	; (800863c <HAL_RCC_OscConfig+0x530>)
 80085b2:	f7fb f870 	bl	8003696 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ba:	2b31      	cmp	r3, #49	; 0x31
 80085bc:	d904      	bls.n	80085c8 <HAL_RCC_OscConfig+0x4bc>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c2:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80085c6:	d904      	bls.n	80085d2 <HAL_RCC_OscConfig+0x4c6>
 80085c8:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80085cc:	481b      	ldr	r0, [pc, #108]	; (800863c <HAL_RCC_OscConfig+0x530>)
 80085ce:	f7fb f862 	bl	8003696 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d010      	beq.n	80085fc <HAL_RCC_OscConfig+0x4f0>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085de:	2b04      	cmp	r3, #4
 80085e0:	d00c      	beq.n	80085fc <HAL_RCC_OscConfig+0x4f0>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e6:	2b06      	cmp	r3, #6
 80085e8:	d008      	beq.n	80085fc <HAL_RCC_OscConfig+0x4f0>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ee:	2b08      	cmp	r3, #8
 80085f0:	d004      	beq.n	80085fc <HAL_RCC_OscConfig+0x4f0>
 80085f2:	f240 11db 	movw	r1, #475	; 0x1db
 80085f6:	4811      	ldr	r0, [pc, #68]	; (800863c <HAL_RCC_OscConfig+0x530>)
 80085f8:	f7fb f84d 	bl	8003696 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008600:	2b01      	cmp	r3, #1
 8008602:	d903      	bls.n	800860c <HAL_RCC_OscConfig+0x500>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008608:	2b0f      	cmp	r3, #15
 800860a:	d904      	bls.n	8008616 <HAL_RCC_OscConfig+0x50a>
 800860c:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8008610:	480a      	ldr	r0, [pc, #40]	; (800863c <HAL_RCC_OscConfig+0x530>)
 8008612:	f7fb f840 	bl	8003696 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008616:	4b0b      	ldr	r3, [pc, #44]	; (8008644 <HAL_RCC_OscConfig+0x538>)
 8008618:	2200      	movs	r2, #0
 800861a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800861c:	f7fc f994 	bl	8004948 <HAL_GetTick>
 8008620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008622:	e011      	b.n	8008648 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008624:	f7fc f990 	bl	8004948 <HAL_GetTick>
 8008628:	4602      	mov	r2, r0
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	2b02      	cmp	r3, #2
 8008630:	d90a      	bls.n	8008648 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e081      	b.n	800873a <HAL_RCC_OscConfig+0x62e>
 8008636:	bf00      	nop
 8008638:	40023800 	.word	0x40023800
 800863c:	0800e73c 	.word	0x0800e73c
 8008640:	40007000 	.word	0x40007000
 8008644:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008648:	4b3e      	ldr	r3, [pc, #248]	; (8008744 <HAL_RCC_OscConfig+0x638>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1e7      	bne.n	8008624 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	69da      	ldr	r2, [r3, #28]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a1b      	ldr	r3, [r3, #32]
 800865c:	431a      	orrs	r2, r3
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008662:	019b      	lsls	r3, r3, #6
 8008664:	431a      	orrs	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866a:	085b      	lsrs	r3, r3, #1
 800866c:	3b01      	subs	r3, #1
 800866e:	041b      	lsls	r3, r3, #16
 8008670:	431a      	orrs	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008676:	061b      	lsls	r3, r3, #24
 8008678:	4932      	ldr	r1, [pc, #200]	; (8008744 <HAL_RCC_OscConfig+0x638>)
 800867a:	4313      	orrs	r3, r2
 800867c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800867e:	4b32      	ldr	r3, [pc, #200]	; (8008748 <HAL_RCC_OscConfig+0x63c>)
 8008680:	2201      	movs	r2, #1
 8008682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008684:	f7fc f960 	bl	8004948 <HAL_GetTick>
 8008688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800868a:	e008      	b.n	800869e <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800868c:	f7fc f95c 	bl	8004948 <HAL_GetTick>
 8008690:	4602      	mov	r2, r0
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	2b02      	cmp	r3, #2
 8008698:	d901      	bls.n	800869e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e04d      	b.n	800873a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800869e:	4b29      	ldr	r3, [pc, #164]	; (8008744 <HAL_RCC_OscConfig+0x638>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d0f0      	beq.n	800868c <HAL_RCC_OscConfig+0x580>
 80086aa:	e045      	b.n	8008738 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086ac:	4b26      	ldr	r3, [pc, #152]	; (8008748 <HAL_RCC_OscConfig+0x63c>)
 80086ae:	2200      	movs	r2, #0
 80086b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086b2:	f7fc f949 	bl	8004948 <HAL_GetTick>
 80086b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086b8:	e008      	b.n	80086cc <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086ba:	f7fc f945 	bl	8004948 <HAL_GetTick>
 80086be:	4602      	mov	r2, r0
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d901      	bls.n	80086cc <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80086c8:	2303      	movs	r3, #3
 80086ca:	e036      	b.n	800873a <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086cc:	4b1d      	ldr	r3, [pc, #116]	; (8008744 <HAL_RCC_OscConfig+0x638>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d1f0      	bne.n	80086ba <HAL_RCC_OscConfig+0x5ae>
 80086d8:	e02e      	b.n	8008738 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	699b      	ldr	r3, [r3, #24]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d101      	bne.n	80086e6 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e029      	b.n	800873a <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80086e6:	4b17      	ldr	r3, [pc, #92]	; (8008744 <HAL_RCC_OscConfig+0x638>)
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d11c      	bne.n	8008734 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008704:	429a      	cmp	r2, r3
 8008706:	d115      	bne.n	8008734 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800870e:	4013      	ands	r3, r2
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008714:	4293      	cmp	r3, r2
 8008716:	d10d      	bne.n	8008734 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008722:	429a      	cmp	r2, r3
 8008724:	d106      	bne.n	8008734 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008730:	429a      	cmp	r2, r3
 8008732:	d001      	beq.n	8008738 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e000      	b.n	800873a <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3718      	adds	r7, #24
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	40023800 	.word	0x40023800
 8008748:	42470060 	.word	0x42470060

0800874c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d101      	bne.n	8008760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	e18c      	b.n	8008a7a <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d003      	beq.n	8008770 <HAL_RCC_ClockConfig+0x24>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b0f      	cmp	r3, #15
 800876e:	d904      	bls.n	800877a <HAL_RCC_ClockConfig+0x2e>
 8008770:	f240 2151 	movw	r1, #593	; 0x251
 8008774:	4887      	ldr	r0, [pc, #540]	; (8008994 <HAL_RCC_ClockConfig+0x248>)
 8008776:	f7fa ff8e 	bl	8003696 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d031      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x98>
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d02e      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x98>
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	2b02      	cmp	r3, #2
 800878a:	d02b      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x98>
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	2b03      	cmp	r3, #3
 8008790:	d028      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x98>
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	2b04      	cmp	r3, #4
 8008796:	d025      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x98>
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	2b05      	cmp	r3, #5
 800879c:	d022      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x98>
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	2b06      	cmp	r3, #6
 80087a2:	d01f      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x98>
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	2b07      	cmp	r3, #7
 80087a8:	d01c      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x98>
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	2b08      	cmp	r3, #8
 80087ae:	d019      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x98>
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	2b09      	cmp	r3, #9
 80087b4:	d016      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x98>
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b0a      	cmp	r3, #10
 80087ba:	d013      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x98>
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	2b0b      	cmp	r3, #11
 80087c0:	d010      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x98>
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	2b0c      	cmp	r3, #12
 80087c6:	d00d      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x98>
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	2b0d      	cmp	r3, #13
 80087cc:	d00a      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x98>
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2b0e      	cmp	r3, #14
 80087d2:	d007      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x98>
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	2b0f      	cmp	r3, #15
 80087d8:	d004      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x98>
 80087da:	f240 2152 	movw	r1, #594	; 0x252
 80087de:	486d      	ldr	r0, [pc, #436]	; (8008994 <HAL_RCC_ClockConfig+0x248>)
 80087e0:	f7fa ff59 	bl	8003696 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80087e4:	4b6c      	ldr	r3, [pc, #432]	; (8008998 <HAL_RCC_ClockConfig+0x24c>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 030f 	and.w	r3, r3, #15
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d90c      	bls.n	800880c <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087f2:	4b69      	ldr	r3, [pc, #420]	; (8008998 <HAL_RCC_ClockConfig+0x24c>)
 80087f4:	683a      	ldr	r2, [r7, #0]
 80087f6:	b2d2      	uxtb	r2, r2
 80087f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087fa:	4b67      	ldr	r3, [pc, #412]	; (8008998 <HAL_RCC_ClockConfig+0x24c>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 030f 	and.w	r3, r3, #15
 8008802:	683a      	ldr	r2, [r7, #0]
 8008804:	429a      	cmp	r2, r3
 8008806:	d001      	beq.n	800880c <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e136      	b.n	8008a7a <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 0302 	and.w	r3, r3, #2
 8008814:	2b00      	cmp	r3, #0
 8008816:	d049      	beq.n	80088ac <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 0304 	and.w	r3, r3, #4
 8008820:	2b00      	cmp	r3, #0
 8008822:	d005      	beq.n	8008830 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008824:	4b5d      	ldr	r3, [pc, #372]	; (800899c <HAL_RCC_ClockConfig+0x250>)
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	4a5c      	ldr	r2, [pc, #368]	; (800899c <HAL_RCC_ClockConfig+0x250>)
 800882a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800882e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 0308 	and.w	r3, r3, #8
 8008838:	2b00      	cmp	r3, #0
 800883a:	d005      	beq.n	8008848 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800883c:	4b57      	ldr	r3, [pc, #348]	; (800899c <HAL_RCC_ClockConfig+0x250>)
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	4a56      	ldr	r2, [pc, #344]	; (800899c <HAL_RCC_ClockConfig+0x250>)
 8008842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d024      	beq.n	800889a <HAL_RCC_ClockConfig+0x14e>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	2b80      	cmp	r3, #128	; 0x80
 8008856:	d020      	beq.n	800889a <HAL_RCC_ClockConfig+0x14e>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	2b90      	cmp	r3, #144	; 0x90
 800885e:	d01c      	beq.n	800889a <HAL_RCC_ClockConfig+0x14e>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	2ba0      	cmp	r3, #160	; 0xa0
 8008866:	d018      	beq.n	800889a <HAL_RCC_ClockConfig+0x14e>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	2bb0      	cmp	r3, #176	; 0xb0
 800886e:	d014      	beq.n	800889a <HAL_RCC_ClockConfig+0x14e>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	2bc0      	cmp	r3, #192	; 0xc0
 8008876:	d010      	beq.n	800889a <HAL_RCC_ClockConfig+0x14e>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	2bd0      	cmp	r3, #208	; 0xd0
 800887e:	d00c      	beq.n	800889a <HAL_RCC_ClockConfig+0x14e>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	2be0      	cmp	r3, #224	; 0xe0
 8008886:	d008      	beq.n	800889a <HAL_RCC_ClockConfig+0x14e>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	2bf0      	cmp	r3, #240	; 0xf0
 800888e:	d004      	beq.n	800889a <HAL_RCC_ClockConfig+0x14e>
 8008890:	f240 2175 	movw	r1, #629	; 0x275
 8008894:	483f      	ldr	r0, [pc, #252]	; (8008994 <HAL_RCC_ClockConfig+0x248>)
 8008896:	f7fa fefe 	bl	8003696 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800889a:	4b40      	ldr	r3, [pc, #256]	; (800899c <HAL_RCC_ClockConfig+0x250>)
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	493d      	ldr	r1, [pc, #244]	; (800899c <HAL_RCC_ClockConfig+0x250>)
 80088a8:	4313      	orrs	r3, r2
 80088aa:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 0301 	and.w	r3, r3, #1
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d059      	beq.n	800896c <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d010      	beq.n	80088e2 <HAL_RCC_ClockConfig+0x196>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d00c      	beq.n	80088e2 <HAL_RCC_ClockConfig+0x196>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d008      	beq.n	80088e2 <HAL_RCC_ClockConfig+0x196>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	2b03      	cmp	r3, #3
 80088d6:	d004      	beq.n	80088e2 <HAL_RCC_ClockConfig+0x196>
 80088d8:	f44f 711f 	mov.w	r1, #636	; 0x27c
 80088dc:	482d      	ldr	r0, [pc, #180]	; (8008994 <HAL_RCC_ClockConfig+0x248>)
 80088de:	f7fa feda 	bl	8003696 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d107      	bne.n	80088fa <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088ea:	4b2c      	ldr	r3, [pc, #176]	; (800899c <HAL_RCC_ClockConfig+0x250>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d119      	bne.n	800892a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e0bf      	b.n	8008a7a <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d003      	beq.n	800890a <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008906:	2b03      	cmp	r3, #3
 8008908:	d107      	bne.n	800891a <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800890a:	4b24      	ldr	r3, [pc, #144]	; (800899c <HAL_RCC_ClockConfig+0x250>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008912:	2b00      	cmp	r3, #0
 8008914:	d109      	bne.n	800892a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e0af      	b.n	8008a7a <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800891a:	4b20      	ldr	r3, [pc, #128]	; (800899c <HAL_RCC_ClockConfig+0x250>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f003 0302 	and.w	r3, r3, #2
 8008922:	2b00      	cmp	r3, #0
 8008924:	d101      	bne.n	800892a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e0a7      	b.n	8008a7a <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800892a:	4b1c      	ldr	r3, [pc, #112]	; (800899c <HAL_RCC_ClockConfig+0x250>)
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	f023 0203 	bic.w	r2, r3, #3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	4919      	ldr	r1, [pc, #100]	; (800899c <HAL_RCC_ClockConfig+0x250>)
 8008938:	4313      	orrs	r3, r2
 800893a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800893c:	f7fc f804 	bl	8004948 <HAL_GetTick>
 8008940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008942:	e00a      	b.n	800895a <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008944:	f7fc f800 	bl	8004948 <HAL_GetTick>
 8008948:	4602      	mov	r2, r0
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008952:	4293      	cmp	r3, r2
 8008954:	d901      	bls.n	800895a <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8008956:	2303      	movs	r3, #3
 8008958:	e08f      	b.n	8008a7a <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800895a:	4b10      	ldr	r3, [pc, #64]	; (800899c <HAL_RCC_ClockConfig+0x250>)
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	f003 020c 	and.w	r2, r3, #12
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	429a      	cmp	r2, r3
 800896a:	d1eb      	bne.n	8008944 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800896c:	4b0a      	ldr	r3, [pc, #40]	; (8008998 <HAL_RCC_ClockConfig+0x24c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 030f 	and.w	r3, r3, #15
 8008974:	683a      	ldr	r2, [r7, #0]
 8008976:	429a      	cmp	r2, r3
 8008978:	d212      	bcs.n	80089a0 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800897a:	4b07      	ldr	r3, [pc, #28]	; (8008998 <HAL_RCC_ClockConfig+0x24c>)
 800897c:	683a      	ldr	r2, [r7, #0]
 800897e:	b2d2      	uxtb	r2, r2
 8008980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008982:	4b05      	ldr	r3, [pc, #20]	; (8008998 <HAL_RCC_ClockConfig+0x24c>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 030f 	and.w	r3, r3, #15
 800898a:	683a      	ldr	r2, [r7, #0]
 800898c:	429a      	cmp	r2, r3
 800898e:	d007      	beq.n	80089a0 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e072      	b.n	8008a7a <HAL_RCC_ClockConfig+0x32e>
 8008994:	0800e73c 	.word	0x0800e73c
 8008998:	40023c00 	.word	0x40023c00
 800899c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0304 	and.w	r3, r3, #4
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d025      	beq.n	80089f8 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d018      	beq.n	80089e6 <HAL_RCC_ClockConfig+0x29a>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089bc:	d013      	beq.n	80089e6 <HAL_RCC_ClockConfig+0x29a>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80089c6:	d00e      	beq.n	80089e6 <HAL_RCC_ClockConfig+0x29a>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80089d0:	d009      	beq.n	80089e6 <HAL_RCC_ClockConfig+0x29a>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	68db      	ldr	r3, [r3, #12]
 80089d6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80089da:	d004      	beq.n	80089e6 <HAL_RCC_ClockConfig+0x29a>
 80089dc:	f240 21ba 	movw	r1, #698	; 0x2ba
 80089e0:	4828      	ldr	r0, [pc, #160]	; (8008a84 <HAL_RCC_ClockConfig+0x338>)
 80089e2:	f7fa fe58 	bl	8003696 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089e6:	4b28      	ldr	r3, [pc, #160]	; (8008a88 <HAL_RCC_ClockConfig+0x33c>)
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	4925      	ldr	r1, [pc, #148]	; (8008a88 <HAL_RCC_ClockConfig+0x33c>)
 80089f4:	4313      	orrs	r3, r2
 80089f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0308 	and.w	r3, r3, #8
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d026      	beq.n	8008a52 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d018      	beq.n	8008a3e <HAL_RCC_ClockConfig+0x2f2>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a14:	d013      	beq.n	8008a3e <HAL_RCC_ClockConfig+0x2f2>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008a1e:	d00e      	beq.n	8008a3e <HAL_RCC_ClockConfig+0x2f2>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008a28:	d009      	beq.n	8008a3e <HAL_RCC_ClockConfig+0x2f2>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8008a32:	d004      	beq.n	8008a3e <HAL_RCC_ClockConfig+0x2f2>
 8008a34:	f240 21c1 	movw	r1, #705	; 0x2c1
 8008a38:	4812      	ldr	r0, [pc, #72]	; (8008a84 <HAL_RCC_ClockConfig+0x338>)
 8008a3a:	f7fa fe2c 	bl	8003696 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a3e:	4b12      	ldr	r3, [pc, #72]	; (8008a88 <HAL_RCC_ClockConfig+0x33c>)
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	00db      	lsls	r3, r3, #3
 8008a4c:	490e      	ldr	r1, [pc, #56]	; (8008a88 <HAL_RCC_ClockConfig+0x33c>)
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008a52:	f000 f821 	bl	8008a98 <HAL_RCC_GetSysClockFreq>
 8008a56:	4602      	mov	r2, r0
 8008a58:	4b0b      	ldr	r3, [pc, #44]	; (8008a88 <HAL_RCC_ClockConfig+0x33c>)
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	091b      	lsrs	r3, r3, #4
 8008a5e:	f003 030f 	and.w	r3, r3, #15
 8008a62:	490a      	ldr	r1, [pc, #40]	; (8008a8c <HAL_RCC_ClockConfig+0x340>)
 8008a64:	5ccb      	ldrb	r3, [r1, r3]
 8008a66:	fa22 f303 	lsr.w	r3, r2, r3
 8008a6a:	4a09      	ldr	r2, [pc, #36]	; (8008a90 <HAL_RCC_ClockConfig+0x344>)
 8008a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008a6e:	4b09      	ldr	r3, [pc, #36]	; (8008a94 <HAL_RCC_ClockConfig+0x348>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7fb ff24 	bl	80048c0 <HAL_InitTick>

  return HAL_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	0800e73c 	.word	0x0800e73c
 8008a88:	40023800 	.word	0x40023800
 8008a8c:	0800e88c 	.word	0x0800e88c
 8008a90:	20000200 	.word	0x20000200
 8008a94:	20000204 	.word	0x20000204

08008a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008a9c:	b084      	sub	sp, #16
 8008a9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	607b      	str	r3, [r7, #4]
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	60fb      	str	r3, [r7, #12]
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008aac:	2300      	movs	r3, #0
 8008aae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ab0:	4b67      	ldr	r3, [pc, #412]	; (8008c50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	f003 030c 	and.w	r3, r3, #12
 8008ab8:	2b08      	cmp	r3, #8
 8008aba:	d00d      	beq.n	8008ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8008abc:	2b08      	cmp	r3, #8
 8008abe:	f200 80bd 	bhi.w	8008c3c <HAL_RCC_GetSysClockFreq+0x1a4>
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d002      	beq.n	8008acc <HAL_RCC_GetSysClockFreq+0x34>
 8008ac6:	2b04      	cmp	r3, #4
 8008ac8:	d003      	beq.n	8008ad2 <HAL_RCC_GetSysClockFreq+0x3a>
 8008aca:	e0b7      	b.n	8008c3c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008acc:	4b61      	ldr	r3, [pc, #388]	; (8008c54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008ace:	60bb      	str	r3, [r7, #8]
       break;
 8008ad0:	e0b7      	b.n	8008c42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ad2:	4b60      	ldr	r3, [pc, #384]	; (8008c54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008ad4:	60bb      	str	r3, [r7, #8]
      break;
 8008ad6:	e0b4      	b.n	8008c42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ad8:	4b5d      	ldr	r3, [pc, #372]	; (8008c50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ae0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ae2:	4b5b      	ldr	r3, [pc, #364]	; (8008c50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d04d      	beq.n	8008b8a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008aee:	4b58      	ldr	r3, [pc, #352]	; (8008c50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	099b      	lsrs	r3, r3, #6
 8008af4:	461a      	mov	r2, r3
 8008af6:	f04f 0300 	mov.w	r3, #0
 8008afa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008afe:	f04f 0100 	mov.w	r1, #0
 8008b02:	ea02 0800 	and.w	r8, r2, r0
 8008b06:	ea03 0901 	and.w	r9, r3, r1
 8008b0a:	4640      	mov	r0, r8
 8008b0c:	4649      	mov	r1, r9
 8008b0e:	f04f 0200 	mov.w	r2, #0
 8008b12:	f04f 0300 	mov.w	r3, #0
 8008b16:	014b      	lsls	r3, r1, #5
 8008b18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008b1c:	0142      	lsls	r2, r0, #5
 8008b1e:	4610      	mov	r0, r2
 8008b20:	4619      	mov	r1, r3
 8008b22:	ebb0 0008 	subs.w	r0, r0, r8
 8008b26:	eb61 0109 	sbc.w	r1, r1, r9
 8008b2a:	f04f 0200 	mov.w	r2, #0
 8008b2e:	f04f 0300 	mov.w	r3, #0
 8008b32:	018b      	lsls	r3, r1, #6
 8008b34:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008b38:	0182      	lsls	r2, r0, #6
 8008b3a:	1a12      	subs	r2, r2, r0
 8008b3c:	eb63 0301 	sbc.w	r3, r3, r1
 8008b40:	f04f 0000 	mov.w	r0, #0
 8008b44:	f04f 0100 	mov.w	r1, #0
 8008b48:	00d9      	lsls	r1, r3, #3
 8008b4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b4e:	00d0      	lsls	r0, r2, #3
 8008b50:	4602      	mov	r2, r0
 8008b52:	460b      	mov	r3, r1
 8008b54:	eb12 0208 	adds.w	r2, r2, r8
 8008b58:	eb43 0309 	adc.w	r3, r3, r9
 8008b5c:	f04f 0000 	mov.w	r0, #0
 8008b60:	f04f 0100 	mov.w	r1, #0
 8008b64:	0299      	lsls	r1, r3, #10
 8008b66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008b6a:	0290      	lsls	r0, r2, #10
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	460b      	mov	r3, r1
 8008b70:	4610      	mov	r0, r2
 8008b72:	4619      	mov	r1, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	461a      	mov	r2, r3
 8008b78:	f04f 0300 	mov.w	r3, #0
 8008b7c:	f7f8 f83c 	bl	8000bf8 <__aeabi_uldivmod>
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	4613      	mov	r3, r2
 8008b86:	60fb      	str	r3, [r7, #12]
 8008b88:	e04a      	b.n	8008c20 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b8a:	4b31      	ldr	r3, [pc, #196]	; (8008c50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	099b      	lsrs	r3, r3, #6
 8008b90:	461a      	mov	r2, r3
 8008b92:	f04f 0300 	mov.w	r3, #0
 8008b96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008b9a:	f04f 0100 	mov.w	r1, #0
 8008b9e:	ea02 0400 	and.w	r4, r2, r0
 8008ba2:	ea03 0501 	and.w	r5, r3, r1
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	4629      	mov	r1, r5
 8008baa:	f04f 0200 	mov.w	r2, #0
 8008bae:	f04f 0300 	mov.w	r3, #0
 8008bb2:	014b      	lsls	r3, r1, #5
 8008bb4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008bb8:	0142      	lsls	r2, r0, #5
 8008bba:	4610      	mov	r0, r2
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	1b00      	subs	r0, r0, r4
 8008bc0:	eb61 0105 	sbc.w	r1, r1, r5
 8008bc4:	f04f 0200 	mov.w	r2, #0
 8008bc8:	f04f 0300 	mov.w	r3, #0
 8008bcc:	018b      	lsls	r3, r1, #6
 8008bce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008bd2:	0182      	lsls	r2, r0, #6
 8008bd4:	1a12      	subs	r2, r2, r0
 8008bd6:	eb63 0301 	sbc.w	r3, r3, r1
 8008bda:	f04f 0000 	mov.w	r0, #0
 8008bde:	f04f 0100 	mov.w	r1, #0
 8008be2:	00d9      	lsls	r1, r3, #3
 8008be4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008be8:	00d0      	lsls	r0, r2, #3
 8008bea:	4602      	mov	r2, r0
 8008bec:	460b      	mov	r3, r1
 8008bee:	1912      	adds	r2, r2, r4
 8008bf0:	eb45 0303 	adc.w	r3, r5, r3
 8008bf4:	f04f 0000 	mov.w	r0, #0
 8008bf8:	f04f 0100 	mov.w	r1, #0
 8008bfc:	0299      	lsls	r1, r3, #10
 8008bfe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008c02:	0290      	lsls	r0, r2, #10
 8008c04:	4602      	mov	r2, r0
 8008c06:	460b      	mov	r3, r1
 8008c08:	4610      	mov	r0, r2
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	f04f 0300 	mov.w	r3, #0
 8008c14:	f7f7 fff0 	bl	8000bf8 <__aeabi_uldivmod>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008c20:	4b0b      	ldr	r3, [pc, #44]	; (8008c50 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008c22:	685b      	ldr	r3, [r3, #4]
 8008c24:	0c1b      	lsrs	r3, r3, #16
 8008c26:	f003 0303 	and.w	r3, r3, #3
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	005b      	lsls	r3, r3, #1
 8008c2e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c38:	60bb      	str	r3, [r7, #8]
      break;
 8008c3a:	e002      	b.n	8008c42 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008c3c:	4b05      	ldr	r3, [pc, #20]	; (8008c54 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008c3e:	60bb      	str	r3, [r7, #8]
      break;
 8008c40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c42:	68bb      	ldr	r3, [r7, #8]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008c4e:	bf00      	nop
 8008c50:	40023800 	.word	0x40023800
 8008c54:	00f42400 	.word	0x00f42400

08008c58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c5c:	4b03      	ldr	r3, [pc, #12]	; (8008c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	20000200 	.word	0x20000200

08008c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008c74:	f7ff fff0 	bl	8008c58 <HAL_RCC_GetHCLKFreq>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	4b05      	ldr	r3, [pc, #20]	; (8008c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	0a9b      	lsrs	r3, r3, #10
 8008c80:	f003 0307 	and.w	r3, r3, #7
 8008c84:	4903      	ldr	r1, [pc, #12]	; (8008c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c86:	5ccb      	ldrb	r3, [r1, r3]
 8008c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	40023800 	.word	0x40023800
 8008c94:	0800e89c 	.word	0x0800e89c

08008c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008c9c:	f7ff ffdc 	bl	8008c58 <HAL_RCC_GetHCLKFreq>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	4b05      	ldr	r3, [pc, #20]	; (8008cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	0b5b      	lsrs	r3, r3, #13
 8008ca8:	f003 0307 	and.w	r3, r3, #7
 8008cac:	4903      	ldr	r1, [pc, #12]	; (8008cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8008cae:	5ccb      	ldrb	r3, [r1, r3]
 8008cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	40023800 	.word	0x40023800
 8008cbc:	0800e89c 	.word	0x0800e89c

08008cc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d101      	bne.n	8008cd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e118      	b.n	8008f04 <HAL_SPI_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a8d      	ldr	r2, [pc, #564]	; (8008f0c <HAL_SPI_Init+0x24c>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d01d      	beq.n	8008d18 <HAL_SPI_Init+0x58>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a8b      	ldr	r2, [pc, #556]	; (8008f10 <HAL_SPI_Init+0x250>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d018      	beq.n	8008d18 <HAL_SPI_Init+0x58>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a8a      	ldr	r2, [pc, #552]	; (8008f14 <HAL_SPI_Init+0x254>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d013      	beq.n	8008d18 <HAL_SPI_Init+0x58>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a88      	ldr	r2, [pc, #544]	; (8008f18 <HAL_SPI_Init+0x258>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d00e      	beq.n	8008d18 <HAL_SPI_Init+0x58>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a87      	ldr	r2, [pc, #540]	; (8008f1c <HAL_SPI_Init+0x25c>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d009      	beq.n	8008d18 <HAL_SPI_Init+0x58>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a85      	ldr	r2, [pc, #532]	; (8008f20 <HAL_SPI_Init+0x260>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d004      	beq.n	8008d18 <HAL_SPI_Init+0x58>
 8008d0e:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8008d12:	4884      	ldr	r0, [pc, #528]	; (8008f24 <HAL_SPI_Init+0x264>)
 8008d14:	f7fa fcbf 	bl	8003696 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d009      	beq.n	8008d34 <HAL_SPI_Init+0x74>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d28:	d004      	beq.n	8008d34 <HAL_SPI_Init+0x74>
 8008d2a:	f240 1143 	movw	r1, #323	; 0x143
 8008d2e:	487d      	ldr	r0, [pc, #500]	; (8008f24 <HAL_SPI_Init+0x264>)
 8008d30:	f7fa fcb1 	bl	8003696 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00e      	beq.n	8008d5a <HAL_SPI_Init+0x9a>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d44:	d009      	beq.n	8008d5a <HAL_SPI_Init+0x9a>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d4e:	d004      	beq.n	8008d5a <HAL_SPI_Init+0x9a>
 8008d50:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8008d54:	4873      	ldr	r0, [pc, #460]	; (8008f24 <HAL_SPI_Init+0x264>)
 8008d56:	f7fa fc9e 	bl	8003696 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d62:	d008      	beq.n	8008d76 <HAL_SPI_Init+0xb6>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d004      	beq.n	8008d76 <HAL_SPI_Init+0xb6>
 8008d6c:	f240 1145 	movw	r1, #325	; 0x145
 8008d70:	486c      	ldr	r0, [pc, #432]	; (8008f24 <HAL_SPI_Init+0x264>)
 8008d72:	f7fa fc90 	bl	8003696 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	699b      	ldr	r3, [r3, #24]
 8008d7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d7e:	d00d      	beq.n	8008d9c <HAL_SPI_Init+0xdc>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	699b      	ldr	r3, [r3, #24]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d009      	beq.n	8008d9c <HAL_SPI_Init+0xdc>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	699b      	ldr	r3, [r3, #24]
 8008d8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d90:	d004      	beq.n	8008d9c <HAL_SPI_Init+0xdc>
 8008d92:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8008d96:	4863      	ldr	r0, [pc, #396]	; (8008f24 <HAL_SPI_Init+0x264>)
 8008d98:	f7fa fc7d 	bl	8003696 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	69db      	ldr	r3, [r3, #28]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d020      	beq.n	8008de6 <HAL_SPI_Init+0x126>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	69db      	ldr	r3, [r3, #28]
 8008da8:	2b08      	cmp	r3, #8
 8008daa:	d01c      	beq.n	8008de6 <HAL_SPI_Init+0x126>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	69db      	ldr	r3, [r3, #28]
 8008db0:	2b10      	cmp	r3, #16
 8008db2:	d018      	beq.n	8008de6 <HAL_SPI_Init+0x126>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	69db      	ldr	r3, [r3, #28]
 8008db8:	2b18      	cmp	r3, #24
 8008dba:	d014      	beq.n	8008de6 <HAL_SPI_Init+0x126>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	69db      	ldr	r3, [r3, #28]
 8008dc0:	2b20      	cmp	r3, #32
 8008dc2:	d010      	beq.n	8008de6 <HAL_SPI_Init+0x126>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	69db      	ldr	r3, [r3, #28]
 8008dc8:	2b28      	cmp	r3, #40	; 0x28
 8008dca:	d00c      	beq.n	8008de6 <HAL_SPI_Init+0x126>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	69db      	ldr	r3, [r3, #28]
 8008dd0:	2b30      	cmp	r3, #48	; 0x30
 8008dd2:	d008      	beq.n	8008de6 <HAL_SPI_Init+0x126>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	69db      	ldr	r3, [r3, #28]
 8008dd8:	2b38      	cmp	r3, #56	; 0x38
 8008dda:	d004      	beq.n	8008de6 <HAL_SPI_Init+0x126>
 8008ddc:	f240 1147 	movw	r1, #327	; 0x147
 8008de0:	4850      	ldr	r0, [pc, #320]	; (8008f24 <HAL_SPI_Init+0x264>)
 8008de2:	f7fa fc58 	bl	8003696 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d008      	beq.n	8008e00 <HAL_SPI_Init+0x140>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a1b      	ldr	r3, [r3, #32]
 8008df2:	2b80      	cmp	r3, #128	; 0x80
 8008df4:	d004      	beq.n	8008e00 <HAL_SPI_Init+0x140>
 8008df6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8008dfa:	484a      	ldr	r0, [pc, #296]	; (8008f24 <HAL_SPI_Init+0x264>)
 8008dfc:	f7fa fc4b 	bl	8003696 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d008      	beq.n	8008e1a <HAL_SPI_Init+0x15a>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0c:	2b10      	cmp	r3, #16
 8008e0e:	d004      	beq.n	8008e1a <HAL_SPI_Init+0x15a>
 8008e10:	f240 1149 	movw	r1, #329	; 0x149
 8008e14:	4843      	ldr	r0, [pc, #268]	; (8008f24 <HAL_SPI_Init+0x264>)
 8008e16:	f7fa fc3e 	bl	8003696 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d119      	bne.n	8008e56 <HAL_SPI_Init+0x196>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d008      	beq.n	8008e3c <HAL_SPI_Init+0x17c>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d004      	beq.n	8008e3c <HAL_SPI_Init+0x17c>
 8008e32:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8008e36:	483b      	ldr	r0, [pc, #236]	; (8008f24 <HAL_SPI_Init+0x264>)
 8008e38:	f7fa fc2d 	bl	8003696 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	695b      	ldr	r3, [r3, #20]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d008      	beq.n	8008e56 <HAL_SPI_Init+0x196>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	695b      	ldr	r3, [r3, #20]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d004      	beq.n	8008e56 <HAL_SPI_Init+0x196>
 8008e4c:	f240 114d 	movw	r1, #333	; 0x14d
 8008e50:	4834      	ldr	r0, [pc, #208]	; (8008f24 <HAL_SPI_Init+0x264>)
 8008e52:	f7fa fc20 	bl	8003696 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d106      	bne.n	8008e76 <HAL_SPI_Init+0x1b6>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f7fa ffef 	bl	8003e54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2202      	movs	r2, #2
 8008e7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e8c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	431a      	orrs	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	431a      	orrs	r2, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	431a      	orrs	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	695b      	ldr	r3, [r3, #20]
 8008ea8:	431a      	orrs	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008eb2:	431a      	orrs	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	69db      	ldr	r3, [r3, #28]
 8008eb8:	431a      	orrs	r2, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	ea42 0103 	orr.w	r1, r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	430a      	orrs	r2, r1
 8008ecc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	0c1b      	lsrs	r3, r3, #16
 8008ed4:	f003 0104 	and.w	r1, r3, #4
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	430a      	orrs	r2, r1
 8008ee2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	69da      	ldr	r2, [r3, #28]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ef2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2201      	movs	r2, #1
 8008efe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	40013000 	.word	0x40013000
 8008f10:	40003800 	.word	0x40003800
 8008f14:	40003c00 	.word	0x40003c00
 8008f18:	40013400 	.word	0x40013400
 8008f1c:	40015000 	.word	0x40015000
 8008f20:	40015400 	.word	0x40015400
 8008f24:	0800e774 	.word	0x0800e774

08008f28 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b088      	sub	sp, #32
 8008f2c:	af02      	add	r7, sp, #8
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	603b      	str	r3, [r7, #0]
 8008f34:	4613      	mov	r3, r2
 8008f36:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f44:	d112      	bne.n	8008f6c <HAL_SPI_Receive+0x44>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d10e      	bne.n	8008f6c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2204      	movs	r2, #4
 8008f52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008f56:	88fa      	ldrh	r2, [r7, #6]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	68b9      	ldr	r1, [r7, #8]
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f000 f8ea 	bl	800913c <HAL_SPI_TransmitReceive>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	e0e2      	b.n	8009132 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d101      	bne.n	8008f7a <HAL_SPI_Receive+0x52>
 8008f76:	2302      	movs	r3, #2
 8008f78:	e0db      	b.n	8009132 <HAL_SPI_Receive+0x20a>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f82:	f7fb fce1 	bl	8004948 <HAL_GetTick>
 8008f86:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d002      	beq.n	8008f9a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008f94:	2302      	movs	r3, #2
 8008f96:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008f98:	e0c2      	b.n	8009120 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d002      	beq.n	8008fa6 <HAL_SPI_Receive+0x7e>
 8008fa0:	88fb      	ldrh	r3, [r7, #6]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d102      	bne.n	8008fac <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008faa:	e0b9      	b.n	8009120 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2204      	movs	r2, #4
 8008fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	88fa      	ldrh	r2, [r7, #6]
 8008fc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	88fa      	ldrh	r2, [r7, #6]
 8008fca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ff2:	d107      	bne.n	8009004 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009002:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900e:	2b40      	cmp	r3, #64	; 0x40
 8009010:	d007      	beq.n	8009022 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009020:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d162      	bne.n	80090f0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800902a:	e02e      	b.n	800908a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	2b01      	cmp	r3, #1
 8009038:	d115      	bne.n	8009066 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f103 020c 	add.w	r2, r3, #12
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009046:	7812      	ldrb	r2, [r2, #0]
 8009048:	b2d2      	uxtb	r2, r2
 800904a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009050:	1c5a      	adds	r2, r3, #1
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800905a:	b29b      	uxth	r3, r3
 800905c:	3b01      	subs	r3, #1
 800905e:	b29a      	uxth	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009064:	e011      	b.n	800908a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009066:	f7fb fc6f 	bl	8004948 <HAL_GetTick>
 800906a:	4602      	mov	r2, r0
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	429a      	cmp	r2, r3
 8009074:	d803      	bhi.n	800907e <HAL_SPI_Receive+0x156>
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800907c:	d102      	bne.n	8009084 <HAL_SPI_Receive+0x15c>
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d102      	bne.n	800908a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8009084:	2303      	movs	r3, #3
 8009086:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009088:	e04a      	b.n	8009120 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800908e:	b29b      	uxth	r3, r3
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1cb      	bne.n	800902c <HAL_SPI_Receive+0x104>
 8009094:	e031      	b.n	80090fa <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	f003 0301 	and.w	r3, r3, #1
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d113      	bne.n	80090cc <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	68da      	ldr	r2, [r3, #12]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ae:	b292      	uxth	r2, r2
 80090b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b6:	1c9a      	adds	r2, r3, #2
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	3b01      	subs	r3, #1
 80090c4:	b29a      	uxth	r2, r3
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80090ca:	e011      	b.n	80090f0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090cc:	f7fb fc3c 	bl	8004948 <HAL_GetTick>
 80090d0:	4602      	mov	r2, r0
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	1ad3      	subs	r3, r2, r3
 80090d6:	683a      	ldr	r2, [r7, #0]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d803      	bhi.n	80090e4 <HAL_SPI_Receive+0x1bc>
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090e2:	d102      	bne.n	80090ea <HAL_SPI_Receive+0x1c2>
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d102      	bne.n	80090f0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80090ea:	2303      	movs	r3, #3
 80090ec:	75fb      	strb	r3, [r7, #23]
          goto error;
 80090ee:	e017      	b.n	8009120 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1cd      	bne.n	8009096 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80090fa:	693a      	ldr	r2, [r7, #16]
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f000 fa34 	bl	800956c <SPI_EndRxTransaction>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d002      	beq.n	8009110 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2220      	movs	r2, #32
 800910e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009114:	2b00      	cmp	r3, #0
 8009116:	d002      	beq.n	800911e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	75fb      	strb	r3, [r7, #23]
 800911c:	e000      	b.n	8009120 <HAL_SPI_Receive+0x1f8>
  }

error :
 800911e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2200      	movs	r2, #0
 800912c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009130:	7dfb      	ldrb	r3, [r7, #23]
}
 8009132:	4618      	mov	r0, r3
 8009134:	3718      	adds	r7, #24
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
	...

0800913c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b08c      	sub	sp, #48	; 0x30
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
 8009148:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800914a:	2301      	movs	r3, #1
 800914c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800914e:	2300      	movs	r3, #0
 8009150:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d004      	beq.n	8009166 <HAL_SPI_TransmitReceive+0x2a>
 800915c:	f240 415a 	movw	r1, #1114	; 0x45a
 8009160:	4884      	ldr	r0, [pc, #528]	; (8009374 <HAL_SPI_TransmitReceive+0x238>)
 8009162:	f7fa fa98 	bl	8003696 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800916c:	2b01      	cmp	r3, #1
 800916e:	d101      	bne.n	8009174 <HAL_SPI_TransmitReceive+0x38>
 8009170:	2302      	movs	r3, #2
 8009172:	e18d      	b.n	8009490 <HAL_SPI_TransmitReceive+0x354>
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800917c:	f7fb fbe4 	bl	8004948 <HAL_GetTick>
 8009180:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009188:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009192:	887b      	ldrh	r3, [r7, #2]
 8009194:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009196:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800919a:	2b01      	cmp	r3, #1
 800919c:	d00f      	beq.n	80091be <HAL_SPI_TransmitReceive+0x82>
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091a4:	d107      	bne.n	80091b6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d103      	bne.n	80091b6 <HAL_SPI_TransmitReceive+0x7a>
 80091ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80091b2:	2b04      	cmp	r3, #4
 80091b4:	d003      	beq.n	80091be <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 80091b6:	2302      	movs	r3, #2
 80091b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80091bc:	e15e      	b.n	800947c <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d005      	beq.n	80091d0 <HAL_SPI_TransmitReceive+0x94>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d002      	beq.n	80091d0 <HAL_SPI_TransmitReceive+0x94>
 80091ca:	887b      	ldrh	r3, [r7, #2]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d103      	bne.n	80091d8 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80091d6:	e151      	b.n	800947c <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	2b04      	cmp	r3, #4
 80091e2:	d003      	beq.n	80091ec <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2205      	movs	r2, #5
 80091e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2200      	movs	r2, #0
 80091f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	887a      	ldrh	r2, [r7, #2]
 80091fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	887a      	ldrh	r2, [r7, #2]
 8009202:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	887a      	ldrh	r2, [r7, #2]
 800920e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	887a      	ldrh	r2, [r7, #2]
 8009214:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800922c:	2b40      	cmp	r3, #64	; 0x40
 800922e:	d007      	beq.n	8009240 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800923e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009248:	d178      	bne.n	800933c <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d002      	beq.n	8009258 <HAL_SPI_TransmitReceive+0x11c>
 8009252:	8b7b      	ldrh	r3, [r7, #26]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d166      	bne.n	8009326 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800925c:	881a      	ldrh	r2, [r3, #0]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009268:	1c9a      	adds	r2, r3, #2
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009272:	b29b      	uxth	r3, r3
 8009274:	3b01      	subs	r3, #1
 8009276:	b29a      	uxth	r2, r3
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800927c:	e053      	b.n	8009326 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	f003 0302 	and.w	r3, r3, #2
 8009288:	2b02      	cmp	r3, #2
 800928a:	d11b      	bne.n	80092c4 <HAL_SPI_TransmitReceive+0x188>
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009290:	b29b      	uxth	r3, r3
 8009292:	2b00      	cmp	r3, #0
 8009294:	d016      	beq.n	80092c4 <HAL_SPI_TransmitReceive+0x188>
 8009296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009298:	2b01      	cmp	r3, #1
 800929a:	d113      	bne.n	80092c4 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a0:	881a      	ldrh	r2, [r3, #0]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ac:	1c9a      	adds	r2, r3, #2
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	3b01      	subs	r3, #1
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80092c0:	2300      	movs	r3, #0
 80092c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	f003 0301 	and.w	r3, r3, #1
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d119      	bne.n	8009306 <HAL_SPI_TransmitReceive+0x1ca>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d014      	beq.n	8009306 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68da      	ldr	r2, [r3, #12]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e6:	b292      	uxth	r2, r2
 80092e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ee:	1c9a      	adds	r2, r3, #2
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	3b01      	subs	r3, #1
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009302:	2301      	movs	r3, #1
 8009304:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009306:	f7fb fb1f 	bl	8004948 <HAL_GetTick>
 800930a:	4602      	mov	r2, r0
 800930c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009312:	429a      	cmp	r2, r3
 8009314:	d807      	bhi.n	8009326 <HAL_SPI_TransmitReceive+0x1ea>
 8009316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800931c:	d003      	beq.n	8009326 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 800931e:	2303      	movs	r3, #3
 8009320:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009324:	e0aa      	b.n	800947c <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800932a:	b29b      	uxth	r3, r3
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1a6      	bne.n	800927e <HAL_SPI_TransmitReceive+0x142>
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009334:	b29b      	uxth	r3, r3
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1a1      	bne.n	800927e <HAL_SPI_TransmitReceive+0x142>
 800933a:	e07f      	b.n	800943c <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d002      	beq.n	800934a <HAL_SPI_TransmitReceive+0x20e>
 8009344:	8b7b      	ldrh	r3, [r7, #26]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d16e      	bne.n	8009428 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	330c      	adds	r3, #12
 8009354:	7812      	ldrb	r2, [r2, #0]
 8009356:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800935c:	1c5a      	adds	r2, r3, #1
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009366:	b29b      	uxth	r3, r3
 8009368:	3b01      	subs	r3, #1
 800936a:	b29a      	uxth	r2, r3
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009370:	e05a      	b.n	8009428 <HAL_SPI_TransmitReceive+0x2ec>
 8009372:	bf00      	nop
 8009374:	0800e774 	.word	0x0800e774
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	f003 0302 	and.w	r3, r3, #2
 8009382:	2b02      	cmp	r3, #2
 8009384:	d11c      	bne.n	80093c0 <HAL_SPI_TransmitReceive+0x284>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800938a:	b29b      	uxth	r3, r3
 800938c:	2b00      	cmp	r3, #0
 800938e:	d017      	beq.n	80093c0 <HAL_SPI_TransmitReceive+0x284>
 8009390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009392:	2b01      	cmp	r3, #1
 8009394:	d114      	bne.n	80093c0 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	330c      	adds	r3, #12
 80093a0:	7812      	ldrb	r2, [r2, #0]
 80093a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093a8:	1c5a      	adds	r2, r3, #1
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	3b01      	subs	r3, #1
 80093b6:	b29a      	uxth	r2, r3
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80093bc:	2300      	movs	r3, #0
 80093be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	f003 0301 	and.w	r3, r3, #1
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d119      	bne.n	8009402 <HAL_SPI_TransmitReceive+0x2c6>
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d014      	beq.n	8009402 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68da      	ldr	r2, [r3, #12]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e2:	b2d2      	uxtb	r2, r2
 80093e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ea:	1c5a      	adds	r2, r3, #1
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	3b01      	subs	r3, #1
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80093fe:	2301      	movs	r3, #1
 8009400:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009402:	f7fb faa1 	bl	8004948 <HAL_GetTick>
 8009406:	4602      	mov	r2, r0
 8009408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940a:	1ad3      	subs	r3, r2, r3
 800940c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800940e:	429a      	cmp	r2, r3
 8009410:	d803      	bhi.n	800941a <HAL_SPI_TransmitReceive+0x2de>
 8009412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009418:	d102      	bne.n	8009420 <HAL_SPI_TransmitReceive+0x2e4>
 800941a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941c:	2b00      	cmp	r3, #0
 800941e:	d103      	bne.n	8009428 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8009420:	2303      	movs	r3, #3
 8009422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009426:	e029      	b.n	800947c <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800942c:	b29b      	uxth	r3, r3
 800942e:	2b00      	cmp	r3, #0
 8009430:	d1a2      	bne.n	8009378 <HAL_SPI_TransmitReceive+0x23c>
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009436:	b29b      	uxth	r3, r3
 8009438:	2b00      	cmp	r3, #0
 800943a:	d19d      	bne.n	8009378 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800943c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800943e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f000 f8f9 	bl	8009638 <SPI_EndRxTxTransaction>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d006      	beq.n	800945a <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2220      	movs	r2, #32
 8009456:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009458:	e010      	b.n	800947c <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d10b      	bne.n	800947a <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009462:	2300      	movs	r3, #0
 8009464:	617b      	str	r3, [r7, #20]
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	617b      	str	r3, [r7, #20]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	617b      	str	r3, [r7, #20]
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	e000      	b.n	800947c <HAL_SPI_TransmitReceive+0x340>
  }

error :
 800947a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2201      	movs	r2, #1
 8009480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2200      	movs	r2, #0
 8009488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800948c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009490:	4618      	mov	r0, r3
 8009492:	3730      	adds	r7, #48	; 0x30
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	603b      	str	r3, [r7, #0]
 80094a4:	4613      	mov	r3, r2
 80094a6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80094a8:	e04c      	b.n	8009544 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094b0:	d048      	beq.n	8009544 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80094b2:	f7fb fa49 	bl	8004948 <HAL_GetTick>
 80094b6:	4602      	mov	r2, r0
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	1ad3      	subs	r3, r2, r3
 80094bc:	683a      	ldr	r2, [r7, #0]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d902      	bls.n	80094c8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d13d      	bne.n	8009544 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	685a      	ldr	r2, [r3, #4]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80094d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094e0:	d111      	bne.n	8009506 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094ea:	d004      	beq.n	80094f6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094f4:	d107      	bne.n	8009506 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009504:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800950a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800950e:	d10f      	bne.n	8009530 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800951e:	601a      	str	r2, [r3, #0]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800952e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009540:	2303      	movs	r3, #3
 8009542:	e00f      	b.n	8009564 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	689a      	ldr	r2, [r3, #8]
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	4013      	ands	r3, r2
 800954e:	68ba      	ldr	r2, [r7, #8]
 8009550:	429a      	cmp	r2, r3
 8009552:	bf0c      	ite	eq
 8009554:	2301      	moveq	r3, #1
 8009556:	2300      	movne	r3, #0
 8009558:	b2db      	uxtb	r3, r3
 800955a:	461a      	mov	r2, r3
 800955c:	79fb      	ldrb	r3, [r7, #7]
 800955e:	429a      	cmp	r2, r3
 8009560:	d1a3      	bne.n	80094aa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	3710      	adds	r7, #16
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af02      	add	r7, sp, #8
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009580:	d111      	bne.n	80095a6 <SPI_EndRxTransaction+0x3a>
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800958a:	d004      	beq.n	8009596 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009594:	d107      	bne.n	80095a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095a4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095ae:	d12a      	bne.n	8009606 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095b8:	d012      	beq.n	80095e0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	9300      	str	r3, [sp, #0]
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	2200      	movs	r2, #0
 80095c2:	2180      	movs	r1, #128	; 0x80
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f7ff ff67 	bl	8009498 <SPI_WaitFlagStateUntilTimeout>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d02d      	beq.n	800962c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d4:	f043 0220 	orr.w	r2, r3, #32
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80095dc:	2303      	movs	r3, #3
 80095de:	e026      	b.n	800962e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	9300      	str	r3, [sp, #0]
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	2200      	movs	r2, #0
 80095e8:	2101      	movs	r1, #1
 80095ea:	68f8      	ldr	r0, [r7, #12]
 80095ec:	f7ff ff54 	bl	8009498 <SPI_WaitFlagStateUntilTimeout>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d01a      	beq.n	800962c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095fa:	f043 0220 	orr.w	r2, r3, #32
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009602:	2303      	movs	r3, #3
 8009604:	e013      	b.n	800962e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	9300      	str	r3, [sp, #0]
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	2200      	movs	r2, #0
 800960e:	2101      	movs	r1, #1
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f7ff ff41 	bl	8009498 <SPI_WaitFlagStateUntilTimeout>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d007      	beq.n	800962c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009620:	f043 0220 	orr.w	r2, r3, #32
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009628:	2303      	movs	r3, #3
 800962a:	e000      	b.n	800962e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
	...

08009638 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b088      	sub	sp, #32
 800963c:	af02      	add	r7, sp, #8
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009644:	4b1b      	ldr	r3, [pc, #108]	; (80096b4 <SPI_EndRxTxTransaction+0x7c>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a1b      	ldr	r2, [pc, #108]	; (80096b8 <SPI_EndRxTxTransaction+0x80>)
 800964a:	fba2 2303 	umull	r2, r3, r2, r3
 800964e:	0d5b      	lsrs	r3, r3, #21
 8009650:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009654:	fb02 f303 	mul.w	r3, r2, r3
 8009658:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009662:	d112      	bne.n	800968a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	9300      	str	r3, [sp, #0]
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	2200      	movs	r2, #0
 800966c:	2180      	movs	r1, #128	; 0x80
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f7ff ff12 	bl	8009498 <SPI_WaitFlagStateUntilTimeout>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d016      	beq.n	80096a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800967e:	f043 0220 	orr.w	r2, r3, #32
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009686:	2303      	movs	r3, #3
 8009688:	e00f      	b.n	80096aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d00a      	beq.n	80096a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	3b01      	subs	r3, #1
 8009694:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096a0:	2b80      	cmp	r3, #128	; 0x80
 80096a2:	d0f2      	beq.n	800968a <SPI_EndRxTxTransaction+0x52>
 80096a4:	e000      	b.n	80096a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80096a6:	bf00      	nop
  }

  return HAL_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3718      	adds	r7, #24
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	20000200 	.word	0x20000200
 80096b8:	165e9f81 	.word	0x165e9f81

080096bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d101      	bne.n	80096ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e0a1      	b.n	8009812 <HAL_TIM_Base_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a52      	ldr	r2, [pc, #328]	; (800981c <HAL_TIM_Base_Init+0x160>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d045      	beq.n	8009764 <HAL_TIM_Base_Init+0xa8>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096e0:	d040      	beq.n	8009764 <HAL_TIM_Base_Init+0xa8>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a4e      	ldr	r2, [pc, #312]	; (8009820 <HAL_TIM_Base_Init+0x164>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d03b      	beq.n	8009764 <HAL_TIM_Base_Init+0xa8>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a4c      	ldr	r2, [pc, #304]	; (8009824 <HAL_TIM_Base_Init+0x168>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d036      	beq.n	8009764 <HAL_TIM_Base_Init+0xa8>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a4b      	ldr	r2, [pc, #300]	; (8009828 <HAL_TIM_Base_Init+0x16c>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d031      	beq.n	8009764 <HAL_TIM_Base_Init+0xa8>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a49      	ldr	r2, [pc, #292]	; (800982c <HAL_TIM_Base_Init+0x170>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d02c      	beq.n	8009764 <HAL_TIM_Base_Init+0xa8>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a48      	ldr	r2, [pc, #288]	; (8009830 <HAL_TIM_Base_Init+0x174>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d027      	beq.n	8009764 <HAL_TIM_Base_Init+0xa8>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a46      	ldr	r2, [pc, #280]	; (8009834 <HAL_TIM_Base_Init+0x178>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d022      	beq.n	8009764 <HAL_TIM_Base_Init+0xa8>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a45      	ldr	r2, [pc, #276]	; (8009838 <HAL_TIM_Base_Init+0x17c>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d01d      	beq.n	8009764 <HAL_TIM_Base_Init+0xa8>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a43      	ldr	r2, [pc, #268]	; (800983c <HAL_TIM_Base_Init+0x180>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d018      	beq.n	8009764 <HAL_TIM_Base_Init+0xa8>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a42      	ldr	r2, [pc, #264]	; (8009840 <HAL_TIM_Base_Init+0x184>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d013      	beq.n	8009764 <HAL_TIM_Base_Init+0xa8>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a40      	ldr	r2, [pc, #256]	; (8009844 <HAL_TIM_Base_Init+0x188>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d00e      	beq.n	8009764 <HAL_TIM_Base_Init+0xa8>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a3f      	ldr	r2, [pc, #252]	; (8009848 <HAL_TIM_Base_Init+0x18c>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d009      	beq.n	8009764 <HAL_TIM_Base_Init+0xa8>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a3d      	ldr	r2, [pc, #244]	; (800984c <HAL_TIM_Base_Init+0x190>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d004      	beq.n	8009764 <HAL_TIM_Base_Init+0xa8>
 800975a:	f44f 7189 	mov.w	r1, #274	; 0x112
 800975e:	483c      	ldr	r0, [pc, #240]	; (8009850 <HAL_TIM_Base_Init+0x194>)
 8009760:	f7f9 ff99 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d014      	beq.n	8009796 <HAL_TIM_Base_Init+0xda>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	2b10      	cmp	r3, #16
 8009772:	d010      	beq.n	8009796 <HAL_TIM_Base_Init+0xda>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	2b20      	cmp	r3, #32
 800977a:	d00c      	beq.n	8009796 <HAL_TIM_Base_Init+0xda>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	2b40      	cmp	r3, #64	; 0x40
 8009782:	d008      	beq.n	8009796 <HAL_TIM_Base_Init+0xda>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	2b60      	cmp	r3, #96	; 0x60
 800978a:	d004      	beq.n	8009796 <HAL_TIM_Base_Init+0xda>
 800978c:	f240 1113 	movw	r1, #275	; 0x113
 8009790:	482f      	ldr	r0, [pc, #188]	; (8009850 <HAL_TIM_Base_Init+0x194>)
 8009792:	f7f9 ff80 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00e      	beq.n	80097bc <HAL_TIM_Base_Init+0x100>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097a6:	d009      	beq.n	80097bc <HAL_TIM_Base_Init+0x100>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097b0:	d004      	beq.n	80097bc <HAL_TIM_Base_Init+0x100>
 80097b2:	f44f 718a 	mov.w	r1, #276	; 0x114
 80097b6:	4826      	ldr	r0, [pc, #152]	; (8009850 <HAL_TIM_Base_Init+0x194>)
 80097b8:	f7f9 ff6d 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d008      	beq.n	80097d6 <HAL_TIM_Base_Init+0x11a>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	2b80      	cmp	r3, #128	; 0x80
 80097ca:	d004      	beq.n	80097d6 <HAL_TIM_Base_Init+0x11a>
 80097cc:	f240 1115 	movw	r1, #277	; 0x115
 80097d0:	481f      	ldr	r0, [pc, #124]	; (8009850 <HAL_TIM_Base_Init+0x194>)
 80097d2:	f7f9 ff60 	bl	8003696 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d106      	bne.n	80097f0 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7fa fe3c 	bl	8004468 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2202      	movs	r2, #2
 80097f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	3304      	adds	r3, #4
 8009800:	4619      	mov	r1, r3
 8009802:	4610      	mov	r0, r2
 8009804:	f001 fa62 	bl	800accc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	40010000 	.word	0x40010000
 8009820:	40000400 	.word	0x40000400
 8009824:	40000800 	.word	0x40000800
 8009828:	40000c00 	.word	0x40000c00
 800982c:	40001000 	.word	0x40001000
 8009830:	40001400 	.word	0x40001400
 8009834:	40010400 	.word	0x40010400
 8009838:	40014000 	.word	0x40014000
 800983c:	40014400 	.word	0x40014400
 8009840:	40014800 	.word	0x40014800
 8009844:	40001800 	.word	0x40001800
 8009848:	40001c00 	.word	0x40001c00
 800984c:	40002000 	.word	0x40002000
 8009850:	0800e7ac 	.word	0x0800e7ac

08009854 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a33      	ldr	r2, [pc, #204]	; (8009930 <HAL_TIM_Base_Start+0xdc>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d045      	beq.n	80098f2 <HAL_TIM_Base_Start+0x9e>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800986e:	d040      	beq.n	80098f2 <HAL_TIM_Base_Start+0x9e>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4a2f      	ldr	r2, [pc, #188]	; (8009934 <HAL_TIM_Base_Start+0xe0>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d03b      	beq.n	80098f2 <HAL_TIM_Base_Start+0x9e>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a2e      	ldr	r2, [pc, #184]	; (8009938 <HAL_TIM_Base_Start+0xe4>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d036      	beq.n	80098f2 <HAL_TIM_Base_Start+0x9e>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a2c      	ldr	r2, [pc, #176]	; (800993c <HAL_TIM_Base_Start+0xe8>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d031      	beq.n	80098f2 <HAL_TIM_Base_Start+0x9e>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a2b      	ldr	r2, [pc, #172]	; (8009940 <HAL_TIM_Base_Start+0xec>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d02c      	beq.n	80098f2 <HAL_TIM_Base_Start+0x9e>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a29      	ldr	r2, [pc, #164]	; (8009944 <HAL_TIM_Base_Start+0xf0>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d027      	beq.n	80098f2 <HAL_TIM_Base_Start+0x9e>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a28      	ldr	r2, [pc, #160]	; (8009948 <HAL_TIM_Base_Start+0xf4>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d022      	beq.n	80098f2 <HAL_TIM_Base_Start+0x9e>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a26      	ldr	r2, [pc, #152]	; (800994c <HAL_TIM_Base_Start+0xf8>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d01d      	beq.n	80098f2 <HAL_TIM_Base_Start+0x9e>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a25      	ldr	r2, [pc, #148]	; (8009950 <HAL_TIM_Base_Start+0xfc>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d018      	beq.n	80098f2 <HAL_TIM_Base_Start+0x9e>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a23      	ldr	r2, [pc, #140]	; (8009954 <HAL_TIM_Base_Start+0x100>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d013      	beq.n	80098f2 <HAL_TIM_Base_Start+0x9e>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a22      	ldr	r2, [pc, #136]	; (8009958 <HAL_TIM_Base_Start+0x104>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d00e      	beq.n	80098f2 <HAL_TIM_Base_Start+0x9e>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a20      	ldr	r2, [pc, #128]	; (800995c <HAL_TIM_Base_Start+0x108>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d009      	beq.n	80098f2 <HAL_TIM_Base_Start+0x9e>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a1f      	ldr	r2, [pc, #124]	; (8009960 <HAL_TIM_Base_Start+0x10c>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d004      	beq.n	80098f2 <HAL_TIM_Base_Start+0x9e>
 80098e8:	f240 1185 	movw	r1, #389	; 0x185
 80098ec:	481d      	ldr	r0, [pc, #116]	; (8009964 <HAL_TIM_Base_Start+0x110>)
 80098ee:	f7f9 fed2 	bl	8003696 <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2202      	movs	r2, #2
 80098f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	f003 0307 	and.w	r3, r3, #7
 8009904:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2b06      	cmp	r3, #6
 800990a:	d007      	beq.n	800991c <HAL_TIM_Base_Start+0xc8>
  {
    __HAL_TIM_ENABLE(htim);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f042 0201 	orr.w	r2, r2, #1
 800991a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3710      	adds	r7, #16
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	40010000 	.word	0x40010000
 8009934:	40000400 	.word	0x40000400
 8009938:	40000800 	.word	0x40000800
 800993c:	40000c00 	.word	0x40000c00
 8009940:	40001000 	.word	0x40001000
 8009944:	40001400 	.word	0x40001400
 8009948:	40010400 	.word	0x40010400
 800994c:	40014000 	.word	0x40014000
 8009950:	40014400 	.word	0x40014400
 8009954:	40014800 	.word	0x40014800
 8009958:	40001800 	.word	0x40001800
 800995c:	40001c00 	.word	0x40001c00
 8009960:	40002000 	.word	0x40002000
 8009964:	0800e7ac 	.word	0x0800e7ac

08009968 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d101      	bne.n	800997a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e0a1      	b.n	8009abe <HAL_TIM_PWM_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a52      	ldr	r2, [pc, #328]	; (8009ac8 <HAL_TIM_PWM_Init+0x160>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d045      	beq.n	8009a10 <HAL_TIM_PWM_Init+0xa8>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800998c:	d040      	beq.n	8009a10 <HAL_TIM_PWM_Init+0xa8>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a4e      	ldr	r2, [pc, #312]	; (8009acc <HAL_TIM_PWM_Init+0x164>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d03b      	beq.n	8009a10 <HAL_TIM_PWM_Init+0xa8>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a4c      	ldr	r2, [pc, #304]	; (8009ad0 <HAL_TIM_PWM_Init+0x168>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d036      	beq.n	8009a10 <HAL_TIM_PWM_Init+0xa8>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a4b      	ldr	r2, [pc, #300]	; (8009ad4 <HAL_TIM_PWM_Init+0x16c>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d031      	beq.n	8009a10 <HAL_TIM_PWM_Init+0xa8>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a49      	ldr	r2, [pc, #292]	; (8009ad8 <HAL_TIM_PWM_Init+0x170>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d02c      	beq.n	8009a10 <HAL_TIM_PWM_Init+0xa8>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a48      	ldr	r2, [pc, #288]	; (8009adc <HAL_TIM_PWM_Init+0x174>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d027      	beq.n	8009a10 <HAL_TIM_PWM_Init+0xa8>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a46      	ldr	r2, [pc, #280]	; (8009ae0 <HAL_TIM_PWM_Init+0x178>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d022      	beq.n	8009a10 <HAL_TIM_PWM_Init+0xa8>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a45      	ldr	r2, [pc, #276]	; (8009ae4 <HAL_TIM_PWM_Init+0x17c>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d01d      	beq.n	8009a10 <HAL_TIM_PWM_Init+0xa8>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a43      	ldr	r2, [pc, #268]	; (8009ae8 <HAL_TIM_PWM_Init+0x180>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d018      	beq.n	8009a10 <HAL_TIM_PWM_Init+0xa8>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a42      	ldr	r2, [pc, #264]	; (8009aec <HAL_TIM_PWM_Init+0x184>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d013      	beq.n	8009a10 <HAL_TIM_PWM_Init+0xa8>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a40      	ldr	r2, [pc, #256]	; (8009af0 <HAL_TIM_PWM_Init+0x188>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d00e      	beq.n	8009a10 <HAL_TIM_PWM_Init+0xa8>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a3f      	ldr	r2, [pc, #252]	; (8009af4 <HAL_TIM_PWM_Init+0x18c>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d009      	beq.n	8009a10 <HAL_TIM_PWM_Init+0xa8>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a3d      	ldr	r2, [pc, #244]	; (8009af8 <HAL_TIM_PWM_Init+0x190>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d004      	beq.n	8009a10 <HAL_TIM_PWM_Init+0xa8>
 8009a06:	f240 419b 	movw	r1, #1179	; 0x49b
 8009a0a:	483c      	ldr	r0, [pc, #240]	; (8009afc <HAL_TIM_PWM_Init+0x194>)
 8009a0c:	f7f9 fe43 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d014      	beq.n	8009a42 <HAL_TIM_PWM_Init+0xda>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	2b10      	cmp	r3, #16
 8009a1e:	d010      	beq.n	8009a42 <HAL_TIM_PWM_Init+0xda>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	2b20      	cmp	r3, #32
 8009a26:	d00c      	beq.n	8009a42 <HAL_TIM_PWM_Init+0xda>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	2b40      	cmp	r3, #64	; 0x40
 8009a2e:	d008      	beq.n	8009a42 <HAL_TIM_PWM_Init+0xda>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	2b60      	cmp	r3, #96	; 0x60
 8009a36:	d004      	beq.n	8009a42 <HAL_TIM_PWM_Init+0xda>
 8009a38:	f240 419c 	movw	r1, #1180	; 0x49c
 8009a3c:	482f      	ldr	r0, [pc, #188]	; (8009afc <HAL_TIM_PWM_Init+0x194>)
 8009a3e:	f7f9 fe2a 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00e      	beq.n	8009a68 <HAL_TIM_PWM_Init+0x100>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a52:	d009      	beq.n	8009a68 <HAL_TIM_PWM_Init+0x100>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	691b      	ldr	r3, [r3, #16]
 8009a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a5c:	d004      	beq.n	8009a68 <HAL_TIM_PWM_Init+0x100>
 8009a5e:	f240 419d 	movw	r1, #1181	; 0x49d
 8009a62:	4826      	ldr	r0, [pc, #152]	; (8009afc <HAL_TIM_PWM_Init+0x194>)
 8009a64:	f7f9 fe17 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	699b      	ldr	r3, [r3, #24]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d008      	beq.n	8009a82 <HAL_TIM_PWM_Init+0x11a>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	699b      	ldr	r3, [r3, #24]
 8009a74:	2b80      	cmp	r3, #128	; 0x80
 8009a76:	d004      	beq.n	8009a82 <HAL_TIM_PWM_Init+0x11a>
 8009a78:	f240 419e 	movw	r1, #1182	; 0x49e
 8009a7c:	481f      	ldr	r0, [pc, #124]	; (8009afc <HAL_TIM_PWM_Init+0x194>)
 8009a7e:	f7f9 fe0a 	bl	8003696 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d106      	bne.n	8009a9c <HAL_TIM_PWM_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f832 	bl	8009b00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2202      	movs	r2, #2
 8009aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	3304      	adds	r3, #4
 8009aac:	4619      	mov	r1, r3
 8009aae:	4610      	mov	r0, r2
 8009ab0:	f001 f90c 	bl	800accc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	40010000 	.word	0x40010000
 8009acc:	40000400 	.word	0x40000400
 8009ad0:	40000800 	.word	0x40000800
 8009ad4:	40000c00 	.word	0x40000c00
 8009ad8:	40001000 	.word	0x40001000
 8009adc:	40001400 	.word	0x40001400
 8009ae0:	40010400 	.word	0x40010400
 8009ae4:	40014000 	.word	0x40014000
 8009ae8:	40014400 	.word	0x40014400
 8009aec:	40014800 	.word	0x40014800
 8009af0:	40001800 	.word	0x40001800
 8009af4:	40001c00 	.word	0x40001c00
 8009af8:	40002000 	.word	0x40002000
 8009afc:	0800e7ac 	.word	0x0800e7ac

08009b00 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a6d      	ldr	r2, [pc, #436]	; (8009cd8 <HAL_TIM_PWM_Start+0x1c4>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d10f      	bne.n	8009b48 <HAL_TIM_PWM_Start+0x34>
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f000 809f 	beq.w	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	2b04      	cmp	r3, #4
 8009b34:	f000 809b 	beq.w	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	2b08      	cmp	r3, #8
 8009b3c:	f000 8097 	beq.w	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	2b0c      	cmp	r3, #12
 8009b44:	f000 8093 	beq.w	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b50:	d10e      	bne.n	8009b70 <HAL_TIM_PWM_Start+0x5c>
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f000 808a 	beq.w	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	2b04      	cmp	r3, #4
 8009b5e:	f000 8086 	beq.w	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	2b08      	cmp	r3, #8
 8009b66:	f000 8082 	beq.w	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2b0c      	cmp	r3, #12
 8009b6e:	d07e      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a59      	ldr	r2, [pc, #356]	; (8009cdc <HAL_TIM_PWM_Start+0x1c8>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d10b      	bne.n	8009b92 <HAL_TIM_PWM_Start+0x7e>
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d076      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	2b04      	cmp	r3, #4
 8009b84:	d073      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	2b08      	cmp	r3, #8
 8009b8a:	d070      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	2b0c      	cmp	r3, #12
 8009b90:	d06d      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a52      	ldr	r2, [pc, #328]	; (8009ce0 <HAL_TIM_PWM_Start+0x1cc>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d10b      	bne.n	8009bb4 <HAL_TIM_PWM_Start+0xa0>
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d065      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	2b04      	cmp	r3, #4
 8009ba6:	d062      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	2b08      	cmp	r3, #8
 8009bac:	d05f      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	2b0c      	cmp	r3, #12
 8009bb2:	d05c      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a4a      	ldr	r2, [pc, #296]	; (8009ce4 <HAL_TIM_PWM_Start+0x1d0>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d10b      	bne.n	8009bd6 <HAL_TIM_PWM_Start+0xc2>
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d054      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	2b04      	cmp	r3, #4
 8009bc8:	d051      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	2b08      	cmp	r3, #8
 8009bce:	d04e      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	2b0c      	cmp	r3, #12
 8009bd4:	d04b      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a43      	ldr	r2, [pc, #268]	; (8009ce8 <HAL_TIM_PWM_Start+0x1d4>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d10b      	bne.n	8009bf8 <HAL_TIM_PWM_Start+0xe4>
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d043      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	2b04      	cmp	r3, #4
 8009bea:	d040      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	2b08      	cmp	r3, #8
 8009bf0:	d03d      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	2b0c      	cmp	r3, #12
 8009bf6:	d03a      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a3b      	ldr	r2, [pc, #236]	; (8009cec <HAL_TIM_PWM_Start+0x1d8>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d105      	bne.n	8009c0e <HAL_TIM_PWM_Start+0xfa>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d032      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	2b04      	cmp	r3, #4
 8009c0c:	d02f      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a37      	ldr	r2, [pc, #220]	; (8009cf0 <HAL_TIM_PWM_Start+0x1dc>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d102      	bne.n	8009c1e <HAL_TIM_PWM_Start+0x10a>
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d027      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a34      	ldr	r2, [pc, #208]	; (8009cf4 <HAL_TIM_PWM_Start+0x1e0>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d102      	bne.n	8009c2e <HAL_TIM_PWM_Start+0x11a>
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d01f      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a31      	ldr	r2, [pc, #196]	; (8009cf8 <HAL_TIM_PWM_Start+0x1e4>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d105      	bne.n	8009c44 <HAL_TIM_PWM_Start+0x130>
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d017      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	2b04      	cmp	r3, #4
 8009c42:	d014      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a2c      	ldr	r2, [pc, #176]	; (8009cfc <HAL_TIM_PWM_Start+0x1e8>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d102      	bne.n	8009c54 <HAL_TIM_PWM_Start+0x140>
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d00c      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a29      	ldr	r2, [pc, #164]	; (8009d00 <HAL_TIM_PWM_Start+0x1ec>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d102      	bne.n	8009c64 <HAL_TIM_PWM_Start+0x150>
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d004      	beq.n	8009c6e <HAL_TIM_PWM_Start+0x15a>
 8009c64:	f240 5113 	movw	r1, #1299	; 0x513
 8009c68:	4826      	ldr	r0, [pc, #152]	; (8009d04 <HAL_TIM_PWM_Start+0x1f0>)
 8009c6a:	f7f9 fd14 	bl	8003696 <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2201      	movs	r2, #1
 8009c74:	6839      	ldr	r1, [r7, #0]
 8009c76:	4618      	mov	r0, r3
 8009c78:	f001 fcc6 	bl	800b608 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a15      	ldr	r2, [pc, #84]	; (8009cd8 <HAL_TIM_PWM_Start+0x1c4>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d004      	beq.n	8009c90 <HAL_TIM_PWM_Start+0x17c>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a17      	ldr	r2, [pc, #92]	; (8009ce8 <HAL_TIM_PWM_Start+0x1d4>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d101      	bne.n	8009c94 <HAL_TIM_PWM_Start+0x180>
 8009c90:	2301      	movs	r3, #1
 8009c92:	e000      	b.n	8009c96 <HAL_TIM_PWM_Start+0x182>
 8009c94:	2300      	movs	r3, #0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d007      	beq.n	8009caa <HAL_TIM_PWM_Start+0x196>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ca8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	689b      	ldr	r3, [r3, #8]
 8009cb0:	f003 0307 	and.w	r3, r3, #7
 8009cb4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2b06      	cmp	r3, #6
 8009cba:	d007      	beq.n	8009ccc <HAL_TIM_PWM_Start+0x1b8>
  {
    __HAL_TIM_ENABLE(htim);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f042 0201 	orr.w	r2, r2, #1
 8009cca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	40010000 	.word	0x40010000
 8009cdc:	40000400 	.word	0x40000400
 8009ce0:	40000800 	.word	0x40000800
 8009ce4:	40000c00 	.word	0x40000c00
 8009ce8:	40010400 	.word	0x40010400
 8009cec:	40014000 	.word	0x40014000
 8009cf0:	40014400 	.word	0x40014400
 8009cf4:	40014800 	.word	0x40014800
 8009cf8:	40001800 	.word	0x40001800
 8009cfc:	40001c00 	.word	0x40001c00
 8009d00:	40002000 	.word	0x40002000
 8009d04:	0800e7ac 	.word	0x0800e7ac

08009d08 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d101      	bne.n	8009d1a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	e0a1      	b.n	8009e5e <HAL_TIM_IC_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a52      	ldr	r2, [pc, #328]	; (8009e68 <HAL_TIM_IC_Init+0x160>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d045      	beq.n	8009db0 <HAL_TIM_IC_Init+0xa8>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d2c:	d040      	beq.n	8009db0 <HAL_TIM_IC_Init+0xa8>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a4e      	ldr	r2, [pc, #312]	; (8009e6c <HAL_TIM_IC_Init+0x164>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d03b      	beq.n	8009db0 <HAL_TIM_IC_Init+0xa8>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a4c      	ldr	r2, [pc, #304]	; (8009e70 <HAL_TIM_IC_Init+0x168>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d036      	beq.n	8009db0 <HAL_TIM_IC_Init+0xa8>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a4b      	ldr	r2, [pc, #300]	; (8009e74 <HAL_TIM_IC_Init+0x16c>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d031      	beq.n	8009db0 <HAL_TIM_IC_Init+0xa8>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a49      	ldr	r2, [pc, #292]	; (8009e78 <HAL_TIM_IC_Init+0x170>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d02c      	beq.n	8009db0 <HAL_TIM_IC_Init+0xa8>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a48      	ldr	r2, [pc, #288]	; (8009e7c <HAL_TIM_IC_Init+0x174>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d027      	beq.n	8009db0 <HAL_TIM_IC_Init+0xa8>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a46      	ldr	r2, [pc, #280]	; (8009e80 <HAL_TIM_IC_Init+0x178>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d022      	beq.n	8009db0 <HAL_TIM_IC_Init+0xa8>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a45      	ldr	r2, [pc, #276]	; (8009e84 <HAL_TIM_IC_Init+0x17c>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d01d      	beq.n	8009db0 <HAL_TIM_IC_Init+0xa8>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a43      	ldr	r2, [pc, #268]	; (8009e88 <HAL_TIM_IC_Init+0x180>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d018      	beq.n	8009db0 <HAL_TIM_IC_Init+0xa8>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a42      	ldr	r2, [pc, #264]	; (8009e8c <HAL_TIM_IC_Init+0x184>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d013      	beq.n	8009db0 <HAL_TIM_IC_Init+0xa8>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a40      	ldr	r2, [pc, #256]	; (8009e90 <HAL_TIM_IC_Init+0x188>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d00e      	beq.n	8009db0 <HAL_TIM_IC_Init+0xa8>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a3f      	ldr	r2, [pc, #252]	; (8009e94 <HAL_TIM_IC_Init+0x18c>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d009      	beq.n	8009db0 <HAL_TIM_IC_Init+0xa8>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a3d      	ldr	r2, [pc, #244]	; (8009e98 <HAL_TIM_IC_Init+0x190>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d004      	beq.n	8009db0 <HAL_TIM_IC_Init+0xa8>
 8009da6:	f240 61d9 	movw	r1, #1753	; 0x6d9
 8009daa:	483c      	ldr	r0, [pc, #240]	; (8009e9c <HAL_TIM_IC_Init+0x194>)
 8009dac:	f7f9 fc73 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d014      	beq.n	8009de2 <HAL_TIM_IC_Init+0xda>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	2b10      	cmp	r3, #16
 8009dbe:	d010      	beq.n	8009de2 <HAL_TIM_IC_Init+0xda>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	2b20      	cmp	r3, #32
 8009dc6:	d00c      	beq.n	8009de2 <HAL_TIM_IC_Init+0xda>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	2b40      	cmp	r3, #64	; 0x40
 8009dce:	d008      	beq.n	8009de2 <HAL_TIM_IC_Init+0xda>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	2b60      	cmp	r3, #96	; 0x60
 8009dd6:	d004      	beq.n	8009de2 <HAL_TIM_IC_Init+0xda>
 8009dd8:	f240 61da 	movw	r1, #1754	; 0x6da
 8009ddc:	482f      	ldr	r0, [pc, #188]	; (8009e9c <HAL_TIM_IC_Init+0x194>)
 8009dde:	f7f9 fc5a 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	691b      	ldr	r3, [r3, #16]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d00e      	beq.n	8009e08 <HAL_TIM_IC_Init+0x100>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	691b      	ldr	r3, [r3, #16]
 8009dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009df2:	d009      	beq.n	8009e08 <HAL_TIM_IC_Init+0x100>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	691b      	ldr	r3, [r3, #16]
 8009df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dfc:	d004      	beq.n	8009e08 <HAL_TIM_IC_Init+0x100>
 8009dfe:	f240 61db 	movw	r1, #1755	; 0x6db
 8009e02:	4826      	ldr	r0, [pc, #152]	; (8009e9c <HAL_TIM_IC_Init+0x194>)
 8009e04:	f7f9 fc47 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	699b      	ldr	r3, [r3, #24]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d008      	beq.n	8009e22 <HAL_TIM_IC_Init+0x11a>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	699b      	ldr	r3, [r3, #24]
 8009e14:	2b80      	cmp	r3, #128	; 0x80
 8009e16:	d004      	beq.n	8009e22 <HAL_TIM_IC_Init+0x11a>
 8009e18:	f240 61dc 	movw	r1, #1756	; 0x6dc
 8009e1c:	481f      	ldr	r0, [pc, #124]	; (8009e9c <HAL_TIM_IC_Init+0x194>)
 8009e1e:	f7f9 fc3a 	bl	8003696 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d106      	bne.n	8009e3c <HAL_TIM_IC_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 f832 	bl	8009ea0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2202      	movs	r2, #2
 8009e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	3304      	adds	r3, #4
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	4610      	mov	r0, r2
 8009e50:	f000 ff3c 	bl	800accc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e5c:	2300      	movs	r3, #0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3708      	adds	r7, #8
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	40010000 	.word	0x40010000
 8009e6c:	40000400 	.word	0x40000400
 8009e70:	40000800 	.word	0x40000800
 8009e74:	40000c00 	.word	0x40000c00
 8009e78:	40001000 	.word	0x40001000
 8009e7c:	40001400 	.word	0x40001400
 8009e80:	40010400 	.word	0x40010400
 8009e84:	40014000 	.word	0x40014000
 8009e88:	40014400 	.word	0x40014400
 8009e8c:	40014800 	.word	0x40014800
 8009e90:	40001800 	.word	0x40001800
 8009e94:	40001c00 	.word	0x40001c00
 8009e98:	40002000 	.word	0x40002000
 8009e9c:	0800e7ac 	.word	0x0800e7ac

08009ea0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009ea8:	bf00      	nop
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a7c      	ldr	r2, [pc, #496]	; (800a0b8 <HAL_TIM_IC_ConfigChannel+0x204>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d03b      	beq.n	8009f42 <HAL_TIM_IC_ConfigChannel+0x8e>
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ed2:	d036      	beq.n	8009f42 <HAL_TIM_IC_ConfigChannel+0x8e>
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a78      	ldr	r2, [pc, #480]	; (800a0bc <HAL_TIM_IC_ConfigChannel+0x208>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d031      	beq.n	8009f42 <HAL_TIM_IC_ConfigChannel+0x8e>
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a77      	ldr	r2, [pc, #476]	; (800a0c0 <HAL_TIM_IC_ConfigChannel+0x20c>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d02c      	beq.n	8009f42 <HAL_TIM_IC_ConfigChannel+0x8e>
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4a75      	ldr	r2, [pc, #468]	; (800a0c4 <HAL_TIM_IC_ConfigChannel+0x210>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d027      	beq.n	8009f42 <HAL_TIM_IC_ConfigChannel+0x8e>
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a74      	ldr	r2, [pc, #464]	; (800a0c8 <HAL_TIM_IC_ConfigChannel+0x214>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d022      	beq.n	8009f42 <HAL_TIM_IC_ConfigChannel+0x8e>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a72      	ldr	r2, [pc, #456]	; (800a0cc <HAL_TIM_IC_ConfigChannel+0x218>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d01d      	beq.n	8009f42 <HAL_TIM_IC_ConfigChannel+0x8e>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a71      	ldr	r2, [pc, #452]	; (800a0d0 <HAL_TIM_IC_ConfigChannel+0x21c>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d018      	beq.n	8009f42 <HAL_TIM_IC_ConfigChannel+0x8e>
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a6f      	ldr	r2, [pc, #444]	; (800a0d4 <HAL_TIM_IC_ConfigChannel+0x220>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d013      	beq.n	8009f42 <HAL_TIM_IC_ConfigChannel+0x8e>
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a6e      	ldr	r2, [pc, #440]	; (800a0d8 <HAL_TIM_IC_ConfigChannel+0x224>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d00e      	beq.n	8009f42 <HAL_TIM_IC_ConfigChannel+0x8e>
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a6c      	ldr	r2, [pc, #432]	; (800a0dc <HAL_TIM_IC_ConfigChannel+0x228>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d009      	beq.n	8009f42 <HAL_TIM_IC_ConfigChannel+0x8e>
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a6b      	ldr	r2, [pc, #428]	; (800a0e0 <HAL_TIM_IC_ConfigChannel+0x22c>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d004      	beq.n	8009f42 <HAL_TIM_IC_ConfigChannel+0x8e>
 8009f38:	f640 5189 	movw	r1, #3465	; 0xd89
 8009f3c:	4869      	ldr	r0, [pc, #420]	; (800a0e4 <HAL_TIM_IC_ConfigChannel+0x230>)
 8009f3e:	f7f9 fbaa 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00c      	beq.n	8009f64 <HAL_TIM_IC_ConfigChannel+0xb0>
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d008      	beq.n	8009f64 <HAL_TIM_IC_ConfigChannel+0xb0>
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b0a      	cmp	r3, #10
 8009f58:	d004      	beq.n	8009f64 <HAL_TIM_IC_ConfigChannel+0xb0>
 8009f5a:	f640 518a 	movw	r1, #3466	; 0xd8a
 8009f5e:	4861      	ldr	r0, [pc, #388]	; (800a0e4 <HAL_TIM_IC_ConfigChannel+0x230>)
 8009f60:	f7f9 fb99 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d00c      	beq.n	8009f86 <HAL_TIM_IC_ConfigChannel+0xd2>
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	2b02      	cmp	r3, #2
 8009f72:	d008      	beq.n	8009f86 <HAL_TIM_IC_ConfigChannel+0xd2>
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	2b03      	cmp	r3, #3
 8009f7a:	d004      	beq.n	8009f86 <HAL_TIM_IC_ConfigChannel+0xd2>
 8009f7c:	f640 518b 	movw	r1, #3467	; 0xd8b
 8009f80:	4858      	ldr	r0, [pc, #352]	; (800a0e4 <HAL_TIM_IC_ConfigChannel+0x230>)
 8009f82:	f7f9 fb88 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d010      	beq.n	8009fb0 <HAL_TIM_IC_ConfigChannel+0xfc>
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	2b04      	cmp	r3, #4
 8009f94:	d00c      	beq.n	8009fb0 <HAL_TIM_IC_ConfigChannel+0xfc>
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	2b08      	cmp	r3, #8
 8009f9c:	d008      	beq.n	8009fb0 <HAL_TIM_IC_ConfigChannel+0xfc>
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	2b0c      	cmp	r3, #12
 8009fa4:	d004      	beq.n	8009fb0 <HAL_TIM_IC_ConfigChannel+0xfc>
 8009fa6:	f640 518c 	movw	r1, #3468	; 0xd8c
 8009faa:	484e      	ldr	r0, [pc, #312]	; (800a0e4 <HAL_TIM_IC_ConfigChannel+0x230>)
 8009fac:	f7f9 fb73 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	68db      	ldr	r3, [r3, #12]
 8009fb4:	2b0f      	cmp	r3, #15
 8009fb6:	d904      	bls.n	8009fc2 <HAL_TIM_IC_ConfigChannel+0x10e>
 8009fb8:	f640 518d 	movw	r1, #3469	; 0xd8d
 8009fbc:	4849      	ldr	r0, [pc, #292]	; (800a0e4 <HAL_TIM_IC_ConfigChannel+0x230>)
 8009fbe:	f7f9 fb6a 	bl	8003696 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d101      	bne.n	8009fd0 <HAL_TIM_IC_ConfigChannel+0x11c>
 8009fcc:	2302      	movs	r3, #2
 8009fce:	e115      	b.n	800a1fc <HAL_TIM_IC_ConfigChannel+0x348>
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2202      	movs	r2, #2
 8009fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d11b      	bne.n	800a01e <HAL_TIM_IC_ConfigChannel+0x16a>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6818      	ldr	r0, [r3, #0]
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	6819      	ldr	r1, [r3, #0]
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	685a      	ldr	r2, [r3, #4]
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	f001 f943 	bl	800b280 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	699a      	ldr	r2, [r3, #24]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f022 020c 	bic.w	r2, r2, #12
 800a008:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	6999      	ldr	r1, [r3, #24]
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	689a      	ldr	r2, [r3, #8]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	430a      	orrs	r2, r1
 800a01a:	619a      	str	r2, [r3, #24]
 800a01c:	e0e5      	b.n	800a1ea <HAL_TIM_IC_ConfigChannel+0x336>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2b04      	cmp	r3, #4
 800a022:	d161      	bne.n	800a0e8 <HAL_TIM_IC_ConfigChannel+0x234>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a23      	ldr	r2, [pc, #140]	; (800a0b8 <HAL_TIM_IC_ConfigChannel+0x204>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d027      	beq.n	800a07e <HAL_TIM_IC_ConfigChannel+0x1ca>
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a036:	d022      	beq.n	800a07e <HAL_TIM_IC_ConfigChannel+0x1ca>
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a1f      	ldr	r2, [pc, #124]	; (800a0bc <HAL_TIM_IC_ConfigChannel+0x208>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d01d      	beq.n	800a07e <HAL_TIM_IC_ConfigChannel+0x1ca>
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a1e      	ldr	r2, [pc, #120]	; (800a0c0 <HAL_TIM_IC_ConfigChannel+0x20c>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d018      	beq.n	800a07e <HAL_TIM_IC_ConfigChannel+0x1ca>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a1c      	ldr	r2, [pc, #112]	; (800a0c4 <HAL_TIM_IC_ConfigChannel+0x210>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d013      	beq.n	800a07e <HAL_TIM_IC_ConfigChannel+0x1ca>
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a1b      	ldr	r2, [pc, #108]	; (800a0c8 <HAL_TIM_IC_ConfigChannel+0x214>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d00e      	beq.n	800a07e <HAL_TIM_IC_ConfigChannel+0x1ca>
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a19      	ldr	r2, [pc, #100]	; (800a0cc <HAL_TIM_IC_ConfigChannel+0x218>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d009      	beq.n	800a07e <HAL_TIM_IC_ConfigChannel+0x1ca>
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a1a      	ldr	r2, [pc, #104]	; (800a0d8 <HAL_TIM_IC_ConfigChannel+0x224>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d004      	beq.n	800a07e <HAL_TIM_IC_ConfigChannel+0x1ca>
 800a074:	f640 51a5 	movw	r1, #3493	; 0xda5
 800a078:	481a      	ldr	r0, [pc, #104]	; (800a0e4 <HAL_TIM_IC_ConfigChannel+0x230>)
 800a07a:	f7f9 fb0c 	bl	8003696 <assert_failed>

    TIM_TI2_SetConfig(htim->Instance,
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	6818      	ldr	r0, [r3, #0]
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	6819      	ldr	r1, [r3, #0]
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	685a      	ldr	r2, [r3, #4]
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	f001 f99a 	bl	800b3c6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	699a      	ldr	r2, [r3, #24]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a0a0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	6999      	ldr	r1, [r3, #24]
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	021a      	lsls	r2, r3, #8
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	430a      	orrs	r2, r1
 800a0b4:	619a      	str	r2, [r3, #24]
 800a0b6:	e098      	b.n	800a1ea <HAL_TIM_IC_ConfigChannel+0x336>
 800a0b8:	40010000 	.word	0x40010000
 800a0bc:	40000400 	.word	0x40000400
 800a0c0:	40000800 	.word	0x40000800
 800a0c4:	40000c00 	.word	0x40000c00
 800a0c8:	40010400 	.word	0x40010400
 800a0cc:	40014000 	.word	0x40014000
 800a0d0:	40014400 	.word	0x40014400
 800a0d4:	40014800 	.word	0x40014800
 800a0d8:	40001800 	.word	0x40001800
 800a0dc:	40001c00 	.word	0x40001c00
 800a0e0:	40002000 	.word	0x40002000
 800a0e4:	0800e7ac 	.word	0x0800e7ac
  }
  else if (Channel == TIM_CHANNEL_3)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2b08      	cmp	r3, #8
 800a0ec:	d13e      	bne.n	800a16c <HAL_TIM_IC_ConfigChannel+0x2b8>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a44      	ldr	r2, [pc, #272]	; (800a204 <HAL_TIM_IC_ConfigChannel+0x350>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d01d      	beq.n	800a134 <HAL_TIM_IC_ConfigChannel+0x280>
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a100:	d018      	beq.n	800a134 <HAL_TIM_IC_ConfigChannel+0x280>
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a40      	ldr	r2, [pc, #256]	; (800a208 <HAL_TIM_IC_ConfigChannel+0x354>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d013      	beq.n	800a134 <HAL_TIM_IC_ConfigChannel+0x280>
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a3e      	ldr	r2, [pc, #248]	; (800a20c <HAL_TIM_IC_ConfigChannel+0x358>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d00e      	beq.n	800a134 <HAL_TIM_IC_ConfigChannel+0x280>
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4a3d      	ldr	r2, [pc, #244]	; (800a210 <HAL_TIM_IC_ConfigChannel+0x35c>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d009      	beq.n	800a134 <HAL_TIM_IC_ConfigChannel+0x280>
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a3b      	ldr	r2, [pc, #236]	; (800a214 <HAL_TIM_IC_ConfigChannel+0x360>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d004      	beq.n	800a134 <HAL_TIM_IC_ConfigChannel+0x280>
 800a12a:	f640 51b5 	movw	r1, #3509	; 0xdb5
 800a12e:	483a      	ldr	r0, [pc, #232]	; (800a218 <HAL_TIM_IC_ConfigChannel+0x364>)
 800a130:	f7f9 fab1 	bl	8003696 <assert_failed>

    TIM_TI3_SetConfig(htim->Instance,
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6818      	ldr	r0, [r3, #0]
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	6819      	ldr	r1, [r3, #0]
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	685a      	ldr	r2, [r3, #4]
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	f001 f9ac 	bl	800b4a0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	69da      	ldr	r2, [r3, #28]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f022 020c 	bic.w	r2, r2, #12
 800a156:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	69d9      	ldr	r1, [r3, #28]
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	689a      	ldr	r2, [r3, #8]
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	430a      	orrs	r2, r1
 800a168:	61da      	str	r2, [r3, #28]
 800a16a:	e03e      	b.n	800a1ea <HAL_TIM_IC_ConfigChannel+0x336>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a24      	ldr	r2, [pc, #144]	; (800a204 <HAL_TIM_IC_ConfigChannel+0x350>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d01d      	beq.n	800a1b2 <HAL_TIM_IC_ConfigChannel+0x2fe>
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a17e:	d018      	beq.n	800a1b2 <HAL_TIM_IC_ConfigChannel+0x2fe>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a20      	ldr	r2, [pc, #128]	; (800a208 <HAL_TIM_IC_ConfigChannel+0x354>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d013      	beq.n	800a1b2 <HAL_TIM_IC_ConfigChannel+0x2fe>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a1f      	ldr	r2, [pc, #124]	; (800a20c <HAL_TIM_IC_ConfigChannel+0x358>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d00e      	beq.n	800a1b2 <HAL_TIM_IC_ConfigChannel+0x2fe>
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a1d      	ldr	r2, [pc, #116]	; (800a210 <HAL_TIM_IC_ConfigChannel+0x35c>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d009      	beq.n	800a1b2 <HAL_TIM_IC_ConfigChannel+0x2fe>
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a1c      	ldr	r2, [pc, #112]	; (800a214 <HAL_TIM_IC_ConfigChannel+0x360>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d004      	beq.n	800a1b2 <HAL_TIM_IC_ConfigChannel+0x2fe>
 800a1a8:	f640 51c5 	movw	r1, #3525	; 0xdc5
 800a1ac:	481a      	ldr	r0, [pc, #104]	; (800a218 <HAL_TIM_IC_ConfigChannel+0x364>)
 800a1ae:	f7f9 fa72 	bl	8003696 <assert_failed>

    TIM_TI4_SetConfig(htim->Instance,
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6818      	ldr	r0, [r3, #0]
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	6819      	ldr	r1, [r3, #0]
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	685a      	ldr	r2, [r3, #4]
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	f001 f9a9 	bl	800b518 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	69da      	ldr	r2, [r3, #28]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a1d4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	69d9      	ldr	r1, [r3, #28]
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	021a      	lsls	r2, r3, #8
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	430a      	orrs	r2, r1
 800a1e8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1fa:	2300      	movs	r3, #0
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3710      	adds	r7, #16
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	40010000 	.word	0x40010000
 800a208:	40000400 	.word	0x40000400
 800a20c:	40000800 	.word	0x40000800
 800a210:	40000c00 	.word	0x40000c00
 800a214:	40010400 	.word	0x40010400
 800a218:	0800e7ac 	.word	0x0800e7ac

0800a21c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d010      	beq.n	800a250 <HAL_TIM_PWM_ConfigChannel+0x34>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2b04      	cmp	r3, #4
 800a232:	d00d      	beq.n	800a250 <HAL_TIM_PWM_ConfigChannel+0x34>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2b08      	cmp	r3, #8
 800a238:	d00a      	beq.n	800a250 <HAL_TIM_PWM_ConfigChannel+0x34>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2b0c      	cmp	r3, #12
 800a23e:	d007      	beq.n	800a250 <HAL_TIM_PWM_ConfigChannel+0x34>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2b3c      	cmp	r3, #60	; 0x3c
 800a244:	d004      	beq.n	800a250 <HAL_TIM_PWM_ConfigChannel+0x34>
 800a246:	f640 51ec 	movw	r1, #3564	; 0xdec
 800a24a:	4885      	ldr	r0, [pc, #532]	; (800a460 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800a24c:	f7f9 fa23 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	2b60      	cmp	r3, #96	; 0x60
 800a256:	d008      	beq.n	800a26a <HAL_TIM_PWM_ConfigChannel+0x4e>
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2b70      	cmp	r3, #112	; 0x70
 800a25e:	d004      	beq.n	800a26a <HAL_TIM_PWM_ConfigChannel+0x4e>
 800a260:	f640 51ed 	movw	r1, #3565	; 0xded
 800a264:	487e      	ldr	r0, [pc, #504]	; (800a460 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800a266:	f7f9 fa16 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d008      	beq.n	800a284 <HAL_TIM_PWM_ConfigChannel+0x68>
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	2b02      	cmp	r3, #2
 800a278:	d004      	beq.n	800a284 <HAL_TIM_PWM_ConfigChannel+0x68>
 800a27a:	f640 51ee 	movw	r1, #3566	; 0xdee
 800a27e:	4878      	ldr	r0, [pc, #480]	; (800a460 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800a280:	f7f9 fa09 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d008      	beq.n	800a29e <HAL_TIM_PWM_ConfigChannel+0x82>
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	691b      	ldr	r3, [r3, #16]
 800a290:	2b04      	cmp	r3, #4
 800a292:	d004      	beq.n	800a29e <HAL_TIM_PWM_ConfigChannel+0x82>
 800a294:	f640 51ef 	movw	r1, #3567	; 0xdef
 800a298:	4871      	ldr	r0, [pc, #452]	; (800a460 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800a29a:	f7f9 f9fc 	bl	8003696 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d101      	bne.n	800a2ac <HAL_TIM_PWM_ConfigChannel+0x90>
 800a2a8:	2302      	movs	r3, #2
 800a2aa:	e182      	b.n	800a5b2 <HAL_TIM_PWM_ConfigChannel+0x396>
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2202      	movs	r2, #2
 800a2b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2b0c      	cmp	r3, #12
 800a2c0:	f200 816d 	bhi.w	800a59e <HAL_TIM_PWM_ConfigChannel+0x382>
 800a2c4:	a201      	add	r2, pc, #4	; (adr r2, 800a2cc <HAL_TIM_PWM_ConfigChannel+0xb0>)
 800a2c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ca:	bf00      	nop
 800a2cc:	0800a301 	.word	0x0800a301
 800a2d0:	0800a59f 	.word	0x0800a59f
 800a2d4:	0800a59f 	.word	0x0800a59f
 800a2d8:	0800a59f 	.word	0x0800a59f
 800a2dc:	0800a3c3 	.word	0x0800a3c3
 800a2e0:	0800a59f 	.word	0x0800a59f
 800a2e4:	0800a59f 	.word	0x0800a59f
 800a2e8:	0800a59f 	.word	0x0800a59f
 800a2ec:	0800a491 	.word	0x0800a491
 800a2f0:	0800a59f 	.word	0x0800a59f
 800a2f4:	0800a59f 	.word	0x0800a59f
 800a2f8:	0800a59f 	.word	0x0800a59f
 800a2fc:	0800a517 	.word	0x0800a517
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a57      	ldr	r2, [pc, #348]	; (800a464 <HAL_TIM_PWM_ConfigChannel+0x248>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d03b      	beq.n	800a382 <HAL_TIM_PWM_ConfigChannel+0x166>
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a312:	d036      	beq.n	800a382 <HAL_TIM_PWM_ConfigChannel+0x166>
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a53      	ldr	r2, [pc, #332]	; (800a468 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d031      	beq.n	800a382 <HAL_TIM_PWM_ConfigChannel+0x166>
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a52      	ldr	r2, [pc, #328]	; (800a46c <HAL_TIM_PWM_ConfigChannel+0x250>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d02c      	beq.n	800a382 <HAL_TIM_PWM_ConfigChannel+0x166>
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a50      	ldr	r2, [pc, #320]	; (800a470 <HAL_TIM_PWM_ConfigChannel+0x254>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d027      	beq.n	800a382 <HAL_TIM_PWM_ConfigChannel+0x166>
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a4f      	ldr	r2, [pc, #316]	; (800a474 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d022      	beq.n	800a382 <HAL_TIM_PWM_ConfigChannel+0x166>
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a4d      	ldr	r2, [pc, #308]	; (800a478 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d01d      	beq.n	800a382 <HAL_TIM_PWM_ConfigChannel+0x166>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a4c      	ldr	r2, [pc, #304]	; (800a47c <HAL_TIM_PWM_ConfigChannel+0x260>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d018      	beq.n	800a382 <HAL_TIM_PWM_ConfigChannel+0x166>
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a4a      	ldr	r2, [pc, #296]	; (800a480 <HAL_TIM_PWM_ConfigChannel+0x264>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d013      	beq.n	800a382 <HAL_TIM_PWM_ConfigChannel+0x166>
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a49      	ldr	r2, [pc, #292]	; (800a484 <HAL_TIM_PWM_ConfigChannel+0x268>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d00e      	beq.n	800a382 <HAL_TIM_PWM_ConfigChannel+0x166>
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a47      	ldr	r2, [pc, #284]	; (800a488 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d009      	beq.n	800a382 <HAL_TIM_PWM_ConfigChannel+0x166>
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a46      	ldr	r2, [pc, #280]	; (800a48c <HAL_TIM_PWM_ConfigChannel+0x270>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d004      	beq.n	800a382 <HAL_TIM_PWM_ConfigChannel+0x166>
 800a378:	f640 51fb 	movw	r1, #3579	; 0xdfb
 800a37c:	4838      	ldr	r0, [pc, #224]	; (800a460 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800a37e:	f7f9 f98a 	bl	8003696 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	68b9      	ldr	r1, [r7, #8]
 800a388:	4618      	mov	r0, r3
 800a38a:	f000 fd3f 	bl	800ae0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	699a      	ldr	r2, [r3, #24]
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f042 0208 	orr.w	r2, r2, #8
 800a39c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	699a      	ldr	r2, [r3, #24]
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f022 0204 	bic.w	r2, r2, #4
 800a3ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	6999      	ldr	r1, [r3, #24]
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	691a      	ldr	r2, [r3, #16]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	430a      	orrs	r2, r1
 800a3be:	619a      	str	r2, [r3, #24]
      break;
 800a3c0:	e0ee      	b.n	800a5a0 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a27      	ldr	r2, [pc, #156]	; (800a464 <HAL_TIM_PWM_ConfigChannel+0x248>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d027      	beq.n	800a41c <HAL_TIM_PWM_ConfigChannel+0x200>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3d4:	d022      	beq.n	800a41c <HAL_TIM_PWM_ConfigChannel+0x200>
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a23      	ldr	r2, [pc, #140]	; (800a468 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d01d      	beq.n	800a41c <HAL_TIM_PWM_ConfigChannel+0x200>
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a21      	ldr	r2, [pc, #132]	; (800a46c <HAL_TIM_PWM_ConfigChannel+0x250>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d018      	beq.n	800a41c <HAL_TIM_PWM_ConfigChannel+0x200>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a20      	ldr	r2, [pc, #128]	; (800a470 <HAL_TIM_PWM_ConfigChannel+0x254>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d013      	beq.n	800a41c <HAL_TIM_PWM_ConfigChannel+0x200>
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a1e      	ldr	r2, [pc, #120]	; (800a474 <HAL_TIM_PWM_ConfigChannel+0x258>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d00e      	beq.n	800a41c <HAL_TIM_PWM_ConfigChannel+0x200>
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a1d      	ldr	r2, [pc, #116]	; (800a478 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d009      	beq.n	800a41c <HAL_TIM_PWM_ConfigChannel+0x200>
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a1d      	ldr	r2, [pc, #116]	; (800a484 <HAL_TIM_PWM_ConfigChannel+0x268>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d004      	beq.n	800a41c <HAL_TIM_PWM_ConfigChannel+0x200>
 800a412:	f640 610c 	movw	r1, #3596	; 0xe0c
 800a416:	4812      	ldr	r0, [pc, #72]	; (800a460 <HAL_TIM_PWM_ConfigChannel+0x244>)
 800a418:	f7f9 f93d 	bl	8003696 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	68b9      	ldr	r1, [r7, #8]
 800a422:	4618      	mov	r0, r3
 800a424:	f000 fd8c 	bl	800af40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	699a      	ldr	r2, [r3, #24]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	699a      	ldr	r2, [r3, #24]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	6999      	ldr	r1, [r3, #24]
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	691b      	ldr	r3, [r3, #16]
 800a452:	021a      	lsls	r2, r3, #8
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	430a      	orrs	r2, r1
 800a45a:	619a      	str	r2, [r3, #24]
      break;
 800a45c:	e0a0      	b.n	800a5a0 <HAL_TIM_PWM_ConfigChannel+0x384>
 800a45e:	bf00      	nop
 800a460:	0800e7ac 	.word	0x0800e7ac
 800a464:	40010000 	.word	0x40010000
 800a468:	40000400 	.word	0x40000400
 800a46c:	40000800 	.word	0x40000800
 800a470:	40000c00 	.word	0x40000c00
 800a474:	40010400 	.word	0x40010400
 800a478:	40014000 	.word	0x40014000
 800a47c:	40014400 	.word	0x40014400
 800a480:	40014800 	.word	0x40014800
 800a484:	40001800 	.word	0x40001800
 800a488:	40001c00 	.word	0x40001c00
 800a48c:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a49      	ldr	r2, [pc, #292]	; (800a5bc <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d01d      	beq.n	800a4d6 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4a2:	d018      	beq.n	800a4d6 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a45      	ldr	r2, [pc, #276]	; (800a5c0 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d013      	beq.n	800a4d6 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a44      	ldr	r2, [pc, #272]	; (800a5c4 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d00e      	beq.n	800a4d6 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a42      	ldr	r2, [pc, #264]	; (800a5c8 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d009      	beq.n	800a4d6 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a41      	ldr	r2, [pc, #260]	; (800a5cc <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d004      	beq.n	800a4d6 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 800a4cc:	f640 611d 	movw	r1, #3613	; 0xe1d
 800a4d0:	483f      	ldr	r0, [pc, #252]	; (800a5d0 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 800a4d2:	f7f9 f8e0 	bl	8003696 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	68b9      	ldr	r1, [r7, #8]
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f000 fdcd 	bl	800b07c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	69da      	ldr	r2, [r3, #28]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f042 0208 	orr.w	r2, r2, #8
 800a4f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	69da      	ldr	r2, [r3, #28]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f022 0204 	bic.w	r2, r2, #4
 800a500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	69d9      	ldr	r1, [r3, #28]
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	691a      	ldr	r2, [r3, #16]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	430a      	orrs	r2, r1
 800a512:	61da      	str	r2, [r3, #28]
      break;
 800a514:	e044      	b.n	800a5a0 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a28      	ldr	r2, [pc, #160]	; (800a5bc <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d01d      	beq.n	800a55c <HAL_TIM_PWM_ConfigChannel+0x340>
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a528:	d018      	beq.n	800a55c <HAL_TIM_PWM_ConfigChannel+0x340>
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a24      	ldr	r2, [pc, #144]	; (800a5c0 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d013      	beq.n	800a55c <HAL_TIM_PWM_ConfigChannel+0x340>
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a22      	ldr	r2, [pc, #136]	; (800a5c4 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d00e      	beq.n	800a55c <HAL_TIM_PWM_ConfigChannel+0x340>
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a21      	ldr	r2, [pc, #132]	; (800a5c8 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d009      	beq.n	800a55c <HAL_TIM_PWM_ConfigChannel+0x340>
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a1f      	ldr	r2, [pc, #124]	; (800a5cc <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d004      	beq.n	800a55c <HAL_TIM_PWM_ConfigChannel+0x340>
 800a552:	f640 612e 	movw	r1, #3630	; 0xe2e
 800a556:	481e      	ldr	r0, [pc, #120]	; (800a5d0 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 800a558:	f7f9 f89d 	bl	8003696 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	68b9      	ldr	r1, [r7, #8]
 800a562:	4618      	mov	r0, r3
 800a564:	f000 fe28 	bl	800b1b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	69da      	ldr	r2, [r3, #28]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a576:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	69da      	ldr	r2, [r3, #28]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a586:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	69d9      	ldr	r1, [r3, #28]
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	021a      	lsls	r2, r3, #8
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	430a      	orrs	r2, r1
 800a59a:	61da      	str	r2, [r3, #28]
      break;
 800a59c:	e000      	b.n	800a5a0 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    default:
      break;
 800a59e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	40010000 	.word	0x40010000
 800a5c0:	40000400 	.word	0x40000400
 800a5c4:	40000800 	.word	0x40000800
 800a5c8:	40000c00 	.word	0x40000c00
 800a5cc:	40010400 	.word	0x40010400
 800a5d0:	0800e7ac 	.word	0x0800e7ac

0800a5d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d101      	bne.n	800a5ec <HAL_TIM_ConfigClockSource+0x18>
 800a5e8:	2302      	movs	r3, #2
 800a5ea:	e35b      	b.n	800aca4 <HAL_TIM_ConfigClockSource+0x6d0>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2202      	movs	r2, #2
 800a5f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a604:	d029      	beq.n	800a65a <HAL_TIM_ConfigClockSource+0x86>
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a60e:	d024      	beq.n	800a65a <HAL_TIM_ConfigClockSource+0x86>
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d020      	beq.n	800a65a <HAL_TIM_ConfigClockSource+0x86>
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2b10      	cmp	r3, #16
 800a61e:	d01c      	beq.n	800a65a <HAL_TIM_ConfigClockSource+0x86>
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2b20      	cmp	r3, #32
 800a626:	d018      	beq.n	800a65a <HAL_TIM_ConfigClockSource+0x86>
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2b30      	cmp	r3, #48	; 0x30
 800a62e:	d014      	beq.n	800a65a <HAL_TIM_ConfigClockSource+0x86>
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	2b40      	cmp	r3, #64	; 0x40
 800a636:	d010      	beq.n	800a65a <HAL_TIM_ConfigClockSource+0x86>
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2b50      	cmp	r3, #80	; 0x50
 800a63e:	d00c      	beq.n	800a65a <HAL_TIM_ConfigClockSource+0x86>
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	2b60      	cmp	r3, #96	; 0x60
 800a646:	d008      	beq.n	800a65a <HAL_TIM_ConfigClockSource+0x86>
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2b70      	cmp	r3, #112	; 0x70
 800a64e:	d004      	beq.n	800a65a <HAL_TIM_ConfigClockSource+0x86>
 800a650:	f241 118b 	movw	r1, #4491	; 0x118b
 800a654:	4893      	ldr	r0, [pc, #588]	; (800a8a4 <HAL_TIM_ConfigClockSource+0x2d0>)
 800a656:	f7f9 f81e 	bl	8003696 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a668:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a670:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	68fa      	ldr	r2, [r7, #12]
 800a678:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a682:	f000 812b 	beq.w	800a8dc <HAL_TIM_ConfigClockSource+0x308>
 800a686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a68a:	f200 82ff 	bhi.w	800ac8c <HAL_TIM_ConfigClockSource+0x6b8>
 800a68e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a692:	d02e      	beq.n	800a6f2 <HAL_TIM_ConfigClockSource+0x11e>
 800a694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a698:	f200 82f8 	bhi.w	800ac8c <HAL_TIM_ConfigClockSource+0x6b8>
 800a69c:	2b70      	cmp	r3, #112	; 0x70
 800a69e:	f000 8082 	beq.w	800a7a6 <HAL_TIM_ConfigClockSource+0x1d2>
 800a6a2:	2b70      	cmp	r3, #112	; 0x70
 800a6a4:	f200 82f2 	bhi.w	800ac8c <HAL_TIM_ConfigClockSource+0x6b8>
 800a6a8:	2b60      	cmp	r3, #96	; 0x60
 800a6aa:	f000 81e8 	beq.w	800aa7e <HAL_TIM_ConfigClockSource+0x4aa>
 800a6ae:	2b60      	cmp	r3, #96	; 0x60
 800a6b0:	f200 82ec 	bhi.w	800ac8c <HAL_TIM_ConfigClockSource+0x6b8>
 800a6b4:	2b50      	cmp	r3, #80	; 0x50
 800a6b6:	f000 8182 	beq.w	800a9be <HAL_TIM_ConfigClockSource+0x3ea>
 800a6ba:	2b50      	cmp	r3, #80	; 0x50
 800a6bc:	f200 82e6 	bhi.w	800ac8c <HAL_TIM_ConfigClockSource+0x6b8>
 800a6c0:	2b40      	cmp	r3, #64	; 0x40
 800a6c2:	f000 824d 	beq.w	800ab60 <HAL_TIM_ConfigClockSource+0x58c>
 800a6c6:	2b40      	cmp	r3, #64	; 0x40
 800a6c8:	f200 82e0 	bhi.w	800ac8c <HAL_TIM_ConfigClockSource+0x6b8>
 800a6cc:	2b30      	cmp	r3, #48	; 0x30
 800a6ce:	f000 82a7 	beq.w	800ac20 <HAL_TIM_ConfigClockSource+0x64c>
 800a6d2:	2b30      	cmp	r3, #48	; 0x30
 800a6d4:	f200 82da 	bhi.w	800ac8c <HAL_TIM_ConfigClockSource+0x6b8>
 800a6d8:	2b20      	cmp	r3, #32
 800a6da:	f000 82a1 	beq.w	800ac20 <HAL_TIM_ConfigClockSource+0x64c>
 800a6de:	2b20      	cmp	r3, #32
 800a6e0:	f200 82d4 	bhi.w	800ac8c <HAL_TIM_ConfigClockSource+0x6b8>
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f000 829b 	beq.w	800ac20 <HAL_TIM_ConfigClockSource+0x64c>
 800a6ea:	2b10      	cmp	r3, #16
 800a6ec:	f000 8298 	beq.w	800ac20 <HAL_TIM_ConfigClockSource+0x64c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a6f0:	e2cc      	b.n	800ac8c <HAL_TIM_ConfigClockSource+0x6b8>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a6c      	ldr	r2, [pc, #432]	; (800a8a8 <HAL_TIM_ConfigClockSource+0x2d4>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	f000 82c9 	beq.w	800ac90 <HAL_TIM_ConfigClockSource+0x6bc>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a706:	f000 82c3 	beq.w	800ac90 <HAL_TIM_ConfigClockSource+0x6bc>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a67      	ldr	r2, [pc, #412]	; (800a8ac <HAL_TIM_ConfigClockSource+0x2d8>)
 800a710:	4293      	cmp	r3, r2
 800a712:	f000 82bd 	beq.w	800ac90 <HAL_TIM_ConfigClockSource+0x6bc>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a65      	ldr	r2, [pc, #404]	; (800a8b0 <HAL_TIM_ConfigClockSource+0x2dc>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	f000 82b7 	beq.w	800ac90 <HAL_TIM_ConfigClockSource+0x6bc>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a63      	ldr	r2, [pc, #396]	; (800a8b4 <HAL_TIM_ConfigClockSource+0x2e0>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	f000 82b1 	beq.w	800ac90 <HAL_TIM_ConfigClockSource+0x6bc>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a61      	ldr	r2, [pc, #388]	; (800a8b8 <HAL_TIM_ConfigClockSource+0x2e4>)
 800a734:	4293      	cmp	r3, r2
 800a736:	f000 82ab 	beq.w	800ac90 <HAL_TIM_ConfigClockSource+0x6bc>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a5f      	ldr	r2, [pc, #380]	; (800a8bc <HAL_TIM_ConfigClockSource+0x2e8>)
 800a740:	4293      	cmp	r3, r2
 800a742:	f000 82a5 	beq.w	800ac90 <HAL_TIM_ConfigClockSource+0x6bc>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a5d      	ldr	r2, [pc, #372]	; (800a8c0 <HAL_TIM_ConfigClockSource+0x2ec>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	f000 829f 	beq.w	800ac90 <HAL_TIM_ConfigClockSource+0x6bc>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4a5b      	ldr	r2, [pc, #364]	; (800a8c4 <HAL_TIM_ConfigClockSource+0x2f0>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	f000 8299 	beq.w	800ac90 <HAL_TIM_ConfigClockSource+0x6bc>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a59      	ldr	r2, [pc, #356]	; (800a8c8 <HAL_TIM_ConfigClockSource+0x2f4>)
 800a764:	4293      	cmp	r3, r2
 800a766:	f000 8293 	beq.w	800ac90 <HAL_TIM_ConfigClockSource+0x6bc>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a57      	ldr	r2, [pc, #348]	; (800a8cc <HAL_TIM_ConfigClockSource+0x2f8>)
 800a770:	4293      	cmp	r3, r2
 800a772:	f000 828d 	beq.w	800ac90 <HAL_TIM_ConfigClockSource+0x6bc>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a55      	ldr	r2, [pc, #340]	; (800a8d0 <HAL_TIM_ConfigClockSource+0x2fc>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	f000 8287 	beq.w	800ac90 <HAL_TIM_ConfigClockSource+0x6bc>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a53      	ldr	r2, [pc, #332]	; (800a8d4 <HAL_TIM_ConfigClockSource+0x300>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	f000 8281 	beq.w	800ac90 <HAL_TIM_ConfigClockSource+0x6bc>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a51      	ldr	r2, [pc, #324]	; (800a8d8 <HAL_TIM_ConfigClockSource+0x304>)
 800a794:	4293      	cmp	r3, r2
 800a796:	f000 827b 	beq.w	800ac90 <HAL_TIM_ConfigClockSource+0x6bc>
 800a79a:	f241 1197 	movw	r1, #4503	; 0x1197
 800a79e:	4841      	ldr	r0, [pc, #260]	; (800a8a4 <HAL_TIM_ConfigClockSource+0x2d0>)
 800a7a0:	f7f8 ff79 	bl	8003696 <assert_failed>
      break;
 800a7a4:	e274      	b.n	800ac90 <HAL_TIM_ConfigClockSource+0x6bc>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a3f      	ldr	r2, [pc, #252]	; (800a8a8 <HAL_TIM_ConfigClockSource+0x2d4>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d027      	beq.n	800a800 <HAL_TIM_ConfigClockSource+0x22c>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7b8:	d022      	beq.n	800a800 <HAL_TIM_ConfigClockSource+0x22c>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a3b      	ldr	r2, [pc, #236]	; (800a8ac <HAL_TIM_ConfigClockSource+0x2d8>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d01d      	beq.n	800a800 <HAL_TIM_ConfigClockSource+0x22c>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a39      	ldr	r2, [pc, #228]	; (800a8b0 <HAL_TIM_ConfigClockSource+0x2dc>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d018      	beq.n	800a800 <HAL_TIM_ConfigClockSource+0x22c>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a38      	ldr	r2, [pc, #224]	; (800a8b4 <HAL_TIM_ConfigClockSource+0x2e0>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d013      	beq.n	800a800 <HAL_TIM_ConfigClockSource+0x22c>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a38      	ldr	r2, [pc, #224]	; (800a8c0 <HAL_TIM_ConfigClockSource+0x2ec>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d00e      	beq.n	800a800 <HAL_TIM_ConfigClockSource+0x22c>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a37      	ldr	r2, [pc, #220]	; (800a8c4 <HAL_TIM_ConfigClockSource+0x2f0>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d009      	beq.n	800a800 <HAL_TIM_ConfigClockSource+0x22c>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a37      	ldr	r2, [pc, #220]	; (800a8d0 <HAL_TIM_ConfigClockSource+0x2fc>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d004      	beq.n	800a800 <HAL_TIM_ConfigClockSource+0x22c>
 800a7f6:	f241 119e 	movw	r1, #4510	; 0x119e
 800a7fa:	482a      	ldr	r0, [pc, #168]	; (800a8a4 <HAL_TIM_ConfigClockSource+0x2d0>)
 800a7fc:	f7f8 ff4b 	bl	8003696 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d013      	beq.n	800a830 <HAL_TIM_ConfigClockSource+0x25c>
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a810:	d00e      	beq.n	800a830 <HAL_TIM_ConfigClockSource+0x25c>
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a81a:	d009      	beq.n	800a830 <HAL_TIM_ConfigClockSource+0x25c>
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a824:	d004      	beq.n	800a830 <HAL_TIM_ConfigClockSource+0x25c>
 800a826:	f241 11a1 	movw	r1, #4513	; 0x11a1
 800a82a:	481e      	ldr	r0, [pc, #120]	; (800a8a4 <HAL_TIM_ConfigClockSource+0x2d0>)
 800a82c:	f7f8 ff33 	bl	8003696 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a838:	d014      	beq.n	800a864 <HAL_TIM_ConfigClockSource+0x290>
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d010      	beq.n	800a864 <HAL_TIM_ConfigClockSource+0x290>
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00c      	beq.n	800a864 <HAL_TIM_ConfigClockSource+0x290>
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	2b02      	cmp	r3, #2
 800a850:	d008      	beq.n	800a864 <HAL_TIM_ConfigClockSource+0x290>
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	2b0a      	cmp	r3, #10
 800a858:	d004      	beq.n	800a864 <HAL_TIM_ConfigClockSource+0x290>
 800a85a:	f241 11a2 	movw	r1, #4514	; 0x11a2
 800a85e:	4811      	ldr	r0, [pc, #68]	; (800a8a4 <HAL_TIM_ConfigClockSource+0x2d0>)
 800a860:	f7f8 ff19 	bl	8003696 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	2b0f      	cmp	r3, #15
 800a86a:	d904      	bls.n	800a876 <HAL_TIM_ConfigClockSource+0x2a2>
 800a86c:	f241 11a3 	movw	r1, #4515	; 0x11a3
 800a870:	480c      	ldr	r0, [pc, #48]	; (800a8a4 <HAL_TIM_ConfigClockSource+0x2d0>)
 800a872:	f7f8 ff10 	bl	8003696 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6818      	ldr	r0, [r3, #0]
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	6899      	ldr	r1, [r3, #8]
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	685a      	ldr	r2, [r3, #4]
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	f000 fe9f 	bl	800b5c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	689b      	ldr	r3, [r3, #8]
 800a890:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a898:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	68fa      	ldr	r2, [r7, #12]
 800a8a0:	609a      	str	r2, [r3, #8]
      break;
 800a8a2:	e1f6      	b.n	800ac92 <HAL_TIM_ConfigClockSource+0x6be>
 800a8a4:	0800e7ac 	.word	0x0800e7ac
 800a8a8:	40010000 	.word	0x40010000
 800a8ac:	40000400 	.word	0x40000400
 800a8b0:	40000800 	.word	0x40000800
 800a8b4:	40000c00 	.word	0x40000c00
 800a8b8:	40001000 	.word	0x40001000
 800a8bc:	40001400 	.word	0x40001400
 800a8c0:	40010400 	.word	0x40010400
 800a8c4:	40014000 	.word	0x40014000
 800a8c8:	40014400 	.word	0x40014400
 800a8cc:	40014800 	.word	0x40014800
 800a8d0:	40001800 	.word	0x40001800
 800a8d4:	40001c00 	.word	0x40001c00
 800a8d8:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a97      	ldr	r2, [pc, #604]	; (800ab40 <HAL_TIM_ConfigClockSource+0x56c>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d01d      	beq.n	800a922 <HAL_TIM_ConfigClockSource+0x34e>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ee:	d018      	beq.n	800a922 <HAL_TIM_ConfigClockSource+0x34e>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a93      	ldr	r2, [pc, #588]	; (800ab44 <HAL_TIM_ConfigClockSource+0x570>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d013      	beq.n	800a922 <HAL_TIM_ConfigClockSource+0x34e>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4a92      	ldr	r2, [pc, #584]	; (800ab48 <HAL_TIM_ConfigClockSource+0x574>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d00e      	beq.n	800a922 <HAL_TIM_ConfigClockSource+0x34e>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a90      	ldr	r2, [pc, #576]	; (800ab4c <HAL_TIM_ConfigClockSource+0x578>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d009      	beq.n	800a922 <HAL_TIM_ConfigClockSource+0x34e>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	4a8f      	ldr	r2, [pc, #572]	; (800ab50 <HAL_TIM_ConfigClockSource+0x57c>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d004      	beq.n	800a922 <HAL_TIM_ConfigClockSource+0x34e>
 800a918:	f241 11b6 	movw	r1, #4534	; 0x11b6
 800a91c:	488d      	ldr	r0, [pc, #564]	; (800ab54 <HAL_TIM_ConfigClockSource+0x580>)
 800a91e:	f7f8 feba 	bl	8003696 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d013      	beq.n	800a952 <HAL_TIM_ConfigClockSource+0x37e>
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a932:	d00e      	beq.n	800a952 <HAL_TIM_ConfigClockSource+0x37e>
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a93c:	d009      	beq.n	800a952 <HAL_TIM_ConfigClockSource+0x37e>
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a946:	d004      	beq.n	800a952 <HAL_TIM_ConfigClockSource+0x37e>
 800a948:	f241 11b9 	movw	r1, #4537	; 0x11b9
 800a94c:	4881      	ldr	r0, [pc, #516]	; (800ab54 <HAL_TIM_ConfigClockSource+0x580>)
 800a94e:	f7f8 fea2 	bl	8003696 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a95a:	d014      	beq.n	800a986 <HAL_TIM_ConfigClockSource+0x3b2>
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d010      	beq.n	800a986 <HAL_TIM_ConfigClockSource+0x3b2>
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d00c      	beq.n	800a986 <HAL_TIM_ConfigClockSource+0x3b2>
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	2b02      	cmp	r3, #2
 800a972:	d008      	beq.n	800a986 <HAL_TIM_ConfigClockSource+0x3b2>
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	685b      	ldr	r3, [r3, #4]
 800a978:	2b0a      	cmp	r3, #10
 800a97a:	d004      	beq.n	800a986 <HAL_TIM_ConfigClockSource+0x3b2>
 800a97c:	f241 11ba 	movw	r1, #4538	; 0x11ba
 800a980:	4874      	ldr	r0, [pc, #464]	; (800ab54 <HAL_TIM_ConfigClockSource+0x580>)
 800a982:	f7f8 fe88 	bl	8003696 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	2b0f      	cmp	r3, #15
 800a98c:	d904      	bls.n	800a998 <HAL_TIM_ConfigClockSource+0x3c4>
 800a98e:	f241 11bb 	movw	r1, #4539	; 0x11bb
 800a992:	4870      	ldr	r0, [pc, #448]	; (800ab54 <HAL_TIM_ConfigClockSource+0x580>)
 800a994:	f7f8 fe7f 	bl	8003696 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6818      	ldr	r0, [r3, #0]
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	6899      	ldr	r1, [r3, #8]
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	685a      	ldr	r2, [r3, #4]
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	f000 fe0e 	bl	800b5c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	689a      	ldr	r2, [r3, #8]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9ba:	609a      	str	r2, [r3, #8]
      break;
 800a9bc:	e169      	b.n	800ac92 <HAL_TIM_ConfigClockSource+0x6be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a5f      	ldr	r2, [pc, #380]	; (800ab40 <HAL_TIM_ConfigClockSource+0x56c>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d027      	beq.n	800aa18 <HAL_TIM_ConfigClockSource+0x444>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9d0:	d022      	beq.n	800aa18 <HAL_TIM_ConfigClockSource+0x444>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a5b      	ldr	r2, [pc, #364]	; (800ab44 <HAL_TIM_ConfigClockSource+0x570>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d01d      	beq.n	800aa18 <HAL_TIM_ConfigClockSource+0x444>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a59      	ldr	r2, [pc, #356]	; (800ab48 <HAL_TIM_ConfigClockSource+0x574>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d018      	beq.n	800aa18 <HAL_TIM_ConfigClockSource+0x444>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a58      	ldr	r2, [pc, #352]	; (800ab4c <HAL_TIM_ConfigClockSource+0x578>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d013      	beq.n	800aa18 <HAL_TIM_ConfigClockSource+0x444>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a56      	ldr	r2, [pc, #344]	; (800ab50 <HAL_TIM_ConfigClockSource+0x57c>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d00e      	beq.n	800aa18 <HAL_TIM_ConfigClockSource+0x444>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a56      	ldr	r2, [pc, #344]	; (800ab58 <HAL_TIM_ConfigClockSource+0x584>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d009      	beq.n	800aa18 <HAL_TIM_ConfigClockSource+0x444>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4a54      	ldr	r2, [pc, #336]	; (800ab5c <HAL_TIM_ConfigClockSource+0x588>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d004      	beq.n	800aa18 <HAL_TIM_ConfigClockSource+0x444>
 800aa0e:	f241 11ca 	movw	r1, #4554	; 0x11ca
 800aa12:	4850      	ldr	r0, [pc, #320]	; (800ab54 <HAL_TIM_ConfigClockSource+0x580>)
 800aa14:	f7f8 fe3f 	bl	8003696 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa20:	d014      	beq.n	800aa4c <HAL_TIM_ConfigClockSource+0x478>
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d010      	beq.n	800aa4c <HAL_TIM_ConfigClockSource+0x478>
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d00c      	beq.n	800aa4c <HAL_TIM_ConfigClockSource+0x478>
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	2b02      	cmp	r3, #2
 800aa38:	d008      	beq.n	800aa4c <HAL_TIM_ConfigClockSource+0x478>
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	2b0a      	cmp	r3, #10
 800aa40:	d004      	beq.n	800aa4c <HAL_TIM_ConfigClockSource+0x478>
 800aa42:	f241 11cd 	movw	r1, #4557	; 0x11cd
 800aa46:	4843      	ldr	r0, [pc, #268]	; (800ab54 <HAL_TIM_ConfigClockSource+0x580>)
 800aa48:	f7f8 fe25 	bl	8003696 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	2b0f      	cmp	r3, #15
 800aa52:	d904      	bls.n	800aa5e <HAL_TIM_ConfigClockSource+0x48a>
 800aa54:	f241 11ce 	movw	r1, #4558	; 0x11ce
 800aa58:	483e      	ldr	r0, [pc, #248]	; (800ab54 <HAL_TIM_ConfigClockSource+0x580>)
 800aa5a:	f7f8 fe1c 	bl	8003696 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6818      	ldr	r0, [r3, #0]
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	6859      	ldr	r1, [r3, #4]
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	f000 fc7c 	bl	800b368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2150      	movs	r1, #80	; 0x50
 800aa76:	4618      	mov	r0, r3
 800aa78:	f000 fd8b 	bl	800b592 <TIM_ITRx_SetConfig>
      break;
 800aa7c:	e109      	b.n	800ac92 <HAL_TIM_ConfigClockSource+0x6be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4a2f      	ldr	r2, [pc, #188]	; (800ab40 <HAL_TIM_ConfigClockSource+0x56c>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d027      	beq.n	800aad8 <HAL_TIM_ConfigClockSource+0x504>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa90:	d022      	beq.n	800aad8 <HAL_TIM_ConfigClockSource+0x504>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a2b      	ldr	r2, [pc, #172]	; (800ab44 <HAL_TIM_ConfigClockSource+0x570>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d01d      	beq.n	800aad8 <HAL_TIM_ConfigClockSource+0x504>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a29      	ldr	r2, [pc, #164]	; (800ab48 <HAL_TIM_ConfigClockSource+0x574>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d018      	beq.n	800aad8 <HAL_TIM_ConfigClockSource+0x504>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a28      	ldr	r2, [pc, #160]	; (800ab4c <HAL_TIM_ConfigClockSource+0x578>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d013      	beq.n	800aad8 <HAL_TIM_ConfigClockSource+0x504>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a26      	ldr	r2, [pc, #152]	; (800ab50 <HAL_TIM_ConfigClockSource+0x57c>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d00e      	beq.n	800aad8 <HAL_TIM_ConfigClockSource+0x504>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a26      	ldr	r2, [pc, #152]	; (800ab58 <HAL_TIM_ConfigClockSource+0x584>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d009      	beq.n	800aad8 <HAL_TIM_ConfigClockSource+0x504>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a24      	ldr	r2, [pc, #144]	; (800ab5c <HAL_TIM_ConfigClockSource+0x588>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d004      	beq.n	800aad8 <HAL_TIM_ConfigClockSource+0x504>
 800aace:	f241 11da 	movw	r1, #4570	; 0x11da
 800aad2:	4820      	ldr	r0, [pc, #128]	; (800ab54 <HAL_TIM_ConfigClockSource+0x580>)
 800aad4:	f7f8 fddf 	bl	8003696 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aae0:	d014      	beq.n	800ab0c <HAL_TIM_ConfigClockSource+0x538>
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d010      	beq.n	800ab0c <HAL_TIM_ConfigClockSource+0x538>
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d00c      	beq.n	800ab0c <HAL_TIM_ConfigClockSource+0x538>
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	d008      	beq.n	800ab0c <HAL_TIM_ConfigClockSource+0x538>
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	2b0a      	cmp	r3, #10
 800ab00:	d004      	beq.n	800ab0c <HAL_TIM_ConfigClockSource+0x538>
 800ab02:	f241 11dd 	movw	r1, #4573	; 0x11dd
 800ab06:	4813      	ldr	r0, [pc, #76]	; (800ab54 <HAL_TIM_ConfigClockSource+0x580>)
 800ab08:	f7f8 fdc5 	bl	8003696 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	2b0f      	cmp	r3, #15
 800ab12:	d904      	bls.n	800ab1e <HAL_TIM_ConfigClockSource+0x54a>
 800ab14:	f241 11de 	movw	r1, #4574	; 0x11de
 800ab18:	480e      	ldr	r0, [pc, #56]	; (800ab54 <HAL_TIM_ConfigClockSource+0x580>)
 800ab1a:	f7f8 fdbc 	bl	8003696 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6818      	ldr	r0, [r3, #0]
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	6859      	ldr	r1, [r3, #4]
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	f000 fc88 	bl	800b440 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	2160      	movs	r1, #96	; 0x60
 800ab36:	4618      	mov	r0, r3
 800ab38:	f000 fd2b 	bl	800b592 <TIM_ITRx_SetConfig>
      break;
 800ab3c:	e0a9      	b.n	800ac92 <HAL_TIM_ConfigClockSource+0x6be>
 800ab3e:	bf00      	nop
 800ab40:	40010000 	.word	0x40010000
 800ab44:	40000400 	.word	0x40000400
 800ab48:	40000800 	.word	0x40000800
 800ab4c:	40000c00 	.word	0x40000c00
 800ab50:	40010400 	.word	0x40010400
 800ab54:	0800e7ac 	.word	0x0800e7ac
 800ab58:	40014000 	.word	0x40014000
 800ab5c:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a51      	ldr	r2, [pc, #324]	; (800acac <HAL_TIM_ConfigClockSource+0x6d8>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d027      	beq.n	800abba <HAL_TIM_ConfigClockSource+0x5e6>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab72:	d022      	beq.n	800abba <HAL_TIM_ConfigClockSource+0x5e6>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a4d      	ldr	r2, [pc, #308]	; (800acb0 <HAL_TIM_ConfigClockSource+0x6dc>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d01d      	beq.n	800abba <HAL_TIM_ConfigClockSource+0x5e6>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4a4c      	ldr	r2, [pc, #304]	; (800acb4 <HAL_TIM_ConfigClockSource+0x6e0>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d018      	beq.n	800abba <HAL_TIM_ConfigClockSource+0x5e6>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a4a      	ldr	r2, [pc, #296]	; (800acb8 <HAL_TIM_ConfigClockSource+0x6e4>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d013      	beq.n	800abba <HAL_TIM_ConfigClockSource+0x5e6>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a49      	ldr	r2, [pc, #292]	; (800acbc <HAL_TIM_ConfigClockSource+0x6e8>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d00e      	beq.n	800abba <HAL_TIM_ConfigClockSource+0x5e6>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a47      	ldr	r2, [pc, #284]	; (800acc0 <HAL_TIM_ConfigClockSource+0x6ec>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d009      	beq.n	800abba <HAL_TIM_ConfigClockSource+0x5e6>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a46      	ldr	r2, [pc, #280]	; (800acc4 <HAL_TIM_ConfigClockSource+0x6f0>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d004      	beq.n	800abba <HAL_TIM_ConfigClockSource+0x5e6>
 800abb0:	f241 11ea 	movw	r1, #4586	; 0x11ea
 800abb4:	4844      	ldr	r0, [pc, #272]	; (800acc8 <HAL_TIM_ConfigClockSource+0x6f4>)
 800abb6:	f7f8 fd6e 	bl	8003696 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abc2:	d014      	beq.n	800abee <HAL_TIM_ConfigClockSource+0x61a>
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d010      	beq.n	800abee <HAL_TIM_ConfigClockSource+0x61a>
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d00c      	beq.n	800abee <HAL_TIM_ConfigClockSource+0x61a>
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	2b02      	cmp	r3, #2
 800abda:	d008      	beq.n	800abee <HAL_TIM_ConfigClockSource+0x61a>
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	2b0a      	cmp	r3, #10
 800abe2:	d004      	beq.n	800abee <HAL_TIM_ConfigClockSource+0x61a>
 800abe4:	f241 11ed 	movw	r1, #4589	; 0x11ed
 800abe8:	4837      	ldr	r0, [pc, #220]	; (800acc8 <HAL_TIM_ConfigClockSource+0x6f4>)
 800abea:	f7f8 fd54 	bl	8003696 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	2b0f      	cmp	r3, #15
 800abf4:	d904      	bls.n	800ac00 <HAL_TIM_ConfigClockSource+0x62c>
 800abf6:	f241 11ee 	movw	r1, #4590	; 0x11ee
 800abfa:	4833      	ldr	r0, [pc, #204]	; (800acc8 <HAL_TIM_ConfigClockSource+0x6f4>)
 800abfc:	f7f8 fd4b 	bl	8003696 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6818      	ldr	r0, [r3, #0]
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	6859      	ldr	r1, [r3, #4]
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	68db      	ldr	r3, [r3, #12]
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	f000 fbab 	bl	800b368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	2140      	movs	r1, #64	; 0x40
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f000 fcba 	bl	800b592 <TIM_ITRx_SetConfig>
      break;
 800ac1e:	e038      	b.n	800ac92 <HAL_TIM_ConfigClockSource+0x6be>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a21      	ldr	r2, [pc, #132]	; (800acac <HAL_TIM_ConfigClockSource+0x6d8>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d027      	beq.n	800ac7a <HAL_TIM_ConfigClockSource+0x6a6>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac32:	d022      	beq.n	800ac7a <HAL_TIM_ConfigClockSource+0x6a6>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	4a1d      	ldr	r2, [pc, #116]	; (800acb0 <HAL_TIM_ConfigClockSource+0x6dc>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d01d      	beq.n	800ac7a <HAL_TIM_ConfigClockSource+0x6a6>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a1c      	ldr	r2, [pc, #112]	; (800acb4 <HAL_TIM_ConfigClockSource+0x6e0>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d018      	beq.n	800ac7a <HAL_TIM_ConfigClockSource+0x6a6>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a1a      	ldr	r2, [pc, #104]	; (800acb8 <HAL_TIM_ConfigClockSource+0x6e4>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d013      	beq.n	800ac7a <HAL_TIM_ConfigClockSource+0x6a6>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4a19      	ldr	r2, [pc, #100]	; (800acbc <HAL_TIM_ConfigClockSource+0x6e8>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d00e      	beq.n	800ac7a <HAL_TIM_ConfigClockSource+0x6a6>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a17      	ldr	r2, [pc, #92]	; (800acc0 <HAL_TIM_ConfigClockSource+0x6ec>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d009      	beq.n	800ac7a <HAL_TIM_ConfigClockSource+0x6a6>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a16      	ldr	r2, [pc, #88]	; (800acc4 <HAL_TIM_ConfigClockSource+0x6f0>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d004      	beq.n	800ac7a <HAL_TIM_ConfigClockSource+0x6a6>
 800ac70:	f241 11fd 	movw	r1, #4605	; 0x11fd
 800ac74:	4814      	ldr	r0, [pc, #80]	; (800acc8 <HAL_TIM_ConfigClockSource+0x6f4>)
 800ac76:	f7f8 fd0e 	bl	8003696 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4619      	mov	r1, r3
 800ac84:	4610      	mov	r0, r2
 800ac86:	f000 fc84 	bl	800b592 <TIM_ITRx_SetConfig>
      break;
 800ac8a:	e002      	b.n	800ac92 <HAL_TIM_ConfigClockSource+0x6be>
      break;
 800ac8c:	bf00      	nop
 800ac8e:	e000      	b.n	800ac92 <HAL_TIM_ConfigClockSource+0x6be>
      break;
 800ac90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2201      	movs	r2, #1
 800ac96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aca2:	2300      	movs	r3, #0
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3710      	adds	r7, #16
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	40010000 	.word	0x40010000
 800acb0:	40000400 	.word	0x40000400
 800acb4:	40000800 	.word	0x40000800
 800acb8:	40000c00 	.word	0x40000c00
 800acbc:	40010400 	.word	0x40010400
 800acc0:	40014000 	.word	0x40014000
 800acc4:	40001800 	.word	0x40001800
 800acc8:	0800e7ac 	.word	0x0800e7ac

0800accc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800accc:	b480      	push	{r7}
 800acce:	b085      	sub	sp, #20
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	4a40      	ldr	r2, [pc, #256]	; (800ade0 <TIM_Base_SetConfig+0x114>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d013      	beq.n	800ad0c <TIM_Base_SetConfig+0x40>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acea:	d00f      	beq.n	800ad0c <TIM_Base_SetConfig+0x40>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	4a3d      	ldr	r2, [pc, #244]	; (800ade4 <TIM_Base_SetConfig+0x118>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d00b      	beq.n	800ad0c <TIM_Base_SetConfig+0x40>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4a3c      	ldr	r2, [pc, #240]	; (800ade8 <TIM_Base_SetConfig+0x11c>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d007      	beq.n	800ad0c <TIM_Base_SetConfig+0x40>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	4a3b      	ldr	r2, [pc, #236]	; (800adec <TIM_Base_SetConfig+0x120>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d003      	beq.n	800ad0c <TIM_Base_SetConfig+0x40>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a3a      	ldr	r2, [pc, #232]	; (800adf0 <TIM_Base_SetConfig+0x124>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d108      	bne.n	800ad1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4a2f      	ldr	r2, [pc, #188]	; (800ade0 <TIM_Base_SetConfig+0x114>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d02b      	beq.n	800ad7e <TIM_Base_SetConfig+0xb2>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad2c:	d027      	beq.n	800ad7e <TIM_Base_SetConfig+0xb2>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4a2c      	ldr	r2, [pc, #176]	; (800ade4 <TIM_Base_SetConfig+0x118>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d023      	beq.n	800ad7e <TIM_Base_SetConfig+0xb2>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	4a2b      	ldr	r2, [pc, #172]	; (800ade8 <TIM_Base_SetConfig+0x11c>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d01f      	beq.n	800ad7e <TIM_Base_SetConfig+0xb2>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4a2a      	ldr	r2, [pc, #168]	; (800adec <TIM_Base_SetConfig+0x120>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d01b      	beq.n	800ad7e <TIM_Base_SetConfig+0xb2>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	4a29      	ldr	r2, [pc, #164]	; (800adf0 <TIM_Base_SetConfig+0x124>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d017      	beq.n	800ad7e <TIM_Base_SetConfig+0xb2>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4a28      	ldr	r2, [pc, #160]	; (800adf4 <TIM_Base_SetConfig+0x128>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d013      	beq.n	800ad7e <TIM_Base_SetConfig+0xb2>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	4a27      	ldr	r2, [pc, #156]	; (800adf8 <TIM_Base_SetConfig+0x12c>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d00f      	beq.n	800ad7e <TIM_Base_SetConfig+0xb2>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	4a26      	ldr	r2, [pc, #152]	; (800adfc <TIM_Base_SetConfig+0x130>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d00b      	beq.n	800ad7e <TIM_Base_SetConfig+0xb2>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4a25      	ldr	r2, [pc, #148]	; (800ae00 <TIM_Base_SetConfig+0x134>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d007      	beq.n	800ad7e <TIM_Base_SetConfig+0xb2>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	4a24      	ldr	r2, [pc, #144]	; (800ae04 <TIM_Base_SetConfig+0x138>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d003      	beq.n	800ad7e <TIM_Base_SetConfig+0xb2>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	4a23      	ldr	r2, [pc, #140]	; (800ae08 <TIM_Base_SetConfig+0x13c>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d108      	bne.n	800ad90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	68fa      	ldr	r2, [r7, #12]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	695b      	ldr	r3, [r3, #20]
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	68fa      	ldr	r2, [r7, #12]
 800ada2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	689a      	ldr	r2, [r3, #8]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	4a0a      	ldr	r2, [pc, #40]	; (800ade0 <TIM_Base_SetConfig+0x114>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d003      	beq.n	800adc4 <TIM_Base_SetConfig+0xf8>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a0c      	ldr	r2, [pc, #48]	; (800adf0 <TIM_Base_SetConfig+0x124>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d103      	bne.n	800adcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	691a      	ldr	r2, [r3, #16]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2201      	movs	r2, #1
 800add0:	615a      	str	r2, [r3, #20]
}
 800add2:	bf00      	nop
 800add4:	3714      	adds	r7, #20
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr
 800adde:	bf00      	nop
 800ade0:	40010000 	.word	0x40010000
 800ade4:	40000400 	.word	0x40000400
 800ade8:	40000800 	.word	0x40000800
 800adec:	40000c00 	.word	0x40000c00
 800adf0:	40010400 	.word	0x40010400
 800adf4:	40014000 	.word	0x40014000
 800adf8:	40014400 	.word	0x40014400
 800adfc:	40014800 	.word	0x40014800
 800ae00:	40001800 	.word	0x40001800
 800ae04:	40001c00 	.word	0x40001c00
 800ae08:	40002000 	.word	0x40002000

0800ae0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b086      	sub	sp, #24
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6a1b      	ldr	r3, [r3, #32]
 800ae1a:	f023 0201 	bic.w	r2, r3, #1
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6a1b      	ldr	r3, [r3, #32]
 800ae26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	699b      	ldr	r3, [r3, #24]
 800ae32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f023 0303 	bic.w	r3, r3, #3
 800ae42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	f023 0302 	bic.w	r3, r3, #2
 800ae54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	689b      	ldr	r3, [r3, #8]
 800ae5a:	697a      	ldr	r2, [r7, #20]
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	4a34      	ldr	r2, [pc, #208]	; (800af34 <TIM_OC1_SetConfig+0x128>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d003      	beq.n	800ae70 <TIM_OC1_SetConfig+0x64>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4a33      	ldr	r2, [pc, #204]	; (800af38 <TIM_OC1_SetConfig+0x12c>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d119      	bne.n	800aea4 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d008      	beq.n	800ae8a <TIM_OC1_SetConfig+0x7e>
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	2b08      	cmp	r3, #8
 800ae7e:	d004      	beq.n	800ae8a <TIM_OC1_SetConfig+0x7e>
 800ae80:	f241 7102 	movw	r1, #5890	; 0x1702
 800ae84:	482d      	ldr	r0, [pc, #180]	; (800af3c <TIM_OC1_SetConfig+0x130>)
 800ae86:	f7f8 fc06 	bl	8003696 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	f023 0308 	bic.w	r3, r3, #8
 800ae90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	697a      	ldr	r2, [r7, #20]
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	f023 0304 	bic.w	r3, r3, #4
 800aea2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	4a23      	ldr	r2, [pc, #140]	; (800af34 <TIM_OC1_SetConfig+0x128>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d003      	beq.n	800aeb4 <TIM_OC1_SetConfig+0xa8>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	4a22      	ldr	r2, [pc, #136]	; (800af38 <TIM_OC1_SetConfig+0x12c>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d12d      	bne.n	800af10 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	699b      	ldr	r3, [r3, #24]
 800aeb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aebc:	d008      	beq.n	800aed0 <TIM_OC1_SetConfig+0xc4>
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	699b      	ldr	r3, [r3, #24]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d004      	beq.n	800aed0 <TIM_OC1_SetConfig+0xc4>
 800aec6:	f241 710f 	movw	r1, #5903	; 0x170f
 800aeca:	481c      	ldr	r0, [pc, #112]	; (800af3c <TIM_OC1_SetConfig+0x130>)
 800aecc:	f7f8 fbe3 	bl	8003696 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	695b      	ldr	r3, [r3, #20]
 800aed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aed8:	d008      	beq.n	800aeec <TIM_OC1_SetConfig+0xe0>
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	695b      	ldr	r3, [r3, #20]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d004      	beq.n	800aeec <TIM_OC1_SetConfig+0xe0>
 800aee2:	f241 7110 	movw	r1, #5904	; 0x1710
 800aee6:	4815      	ldr	r0, [pc, #84]	; (800af3c <TIM_OC1_SetConfig+0x130>)
 800aee8:	f7f8 fbd5 	bl	8003696 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aef2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aefa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	695b      	ldr	r3, [r3, #20]
 800af00:	693a      	ldr	r2, [r7, #16]
 800af02:	4313      	orrs	r3, r2
 800af04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	699b      	ldr	r3, [r3, #24]
 800af0a:	693a      	ldr	r2, [r7, #16]
 800af0c:	4313      	orrs	r3, r2
 800af0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	693a      	ldr	r2, [r7, #16]
 800af14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	68fa      	ldr	r2, [r7, #12]
 800af1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	685a      	ldr	r2, [r3, #4]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	697a      	ldr	r2, [r7, #20]
 800af28:	621a      	str	r2, [r3, #32]
}
 800af2a:	bf00      	nop
 800af2c:	3718      	adds	r7, #24
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	40010000 	.word	0x40010000
 800af38:	40010400 	.word	0x40010400
 800af3c:	0800e7ac 	.word	0x0800e7ac

0800af40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b086      	sub	sp, #24
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a1b      	ldr	r3, [r3, #32]
 800af4e:	f023 0210 	bic.w	r2, r3, #16
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a1b      	ldr	r3, [r3, #32]
 800af5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	699b      	ldr	r3, [r3, #24]
 800af66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	021b      	lsls	r3, r3, #8
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	4313      	orrs	r3, r2
 800af82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	f023 0320 	bic.w	r3, r3, #32
 800af8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	011b      	lsls	r3, r3, #4
 800af92:	697a      	ldr	r2, [r7, #20]
 800af94:	4313      	orrs	r3, r2
 800af96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	4a35      	ldr	r2, [pc, #212]	; (800b070 <TIM_OC2_SetConfig+0x130>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d003      	beq.n	800afa8 <TIM_OC2_SetConfig+0x68>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	4a34      	ldr	r2, [pc, #208]	; (800b074 <TIM_OC2_SetConfig+0x134>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d11a      	bne.n	800afde <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d008      	beq.n	800afc2 <TIM_OC2_SetConfig+0x82>
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	2b08      	cmp	r3, #8
 800afb6:	d004      	beq.n	800afc2 <TIM_OC2_SetConfig+0x82>
 800afb8:	f241 714d 	movw	r1, #5965	; 0x174d
 800afbc:	482e      	ldr	r0, [pc, #184]	; (800b078 <TIM_OC2_SetConfig+0x138>)
 800afbe:	f7f8 fb6a 	bl	8003696 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	68db      	ldr	r3, [r3, #12]
 800afce:	011b      	lsls	r3, r3, #4
 800afd0:	697a      	ldr	r2, [r7, #20]
 800afd2:	4313      	orrs	r3, r2
 800afd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afdc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	4a23      	ldr	r2, [pc, #140]	; (800b070 <TIM_OC2_SetConfig+0x130>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d003      	beq.n	800afee <TIM_OC2_SetConfig+0xae>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	4a22      	ldr	r2, [pc, #136]	; (800b074 <TIM_OC2_SetConfig+0x134>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d12f      	bne.n	800b04e <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	699b      	ldr	r3, [r3, #24]
 800aff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aff6:	d008      	beq.n	800b00a <TIM_OC2_SetConfig+0xca>
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	699b      	ldr	r3, [r3, #24]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d004      	beq.n	800b00a <TIM_OC2_SetConfig+0xca>
 800b000:	f241 715b 	movw	r1, #5979	; 0x175b
 800b004:	481c      	ldr	r0, [pc, #112]	; (800b078 <TIM_OC2_SetConfig+0x138>)
 800b006:	f7f8 fb46 	bl	8003696 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	695b      	ldr	r3, [r3, #20]
 800b00e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b012:	d008      	beq.n	800b026 <TIM_OC2_SetConfig+0xe6>
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	695b      	ldr	r3, [r3, #20]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d004      	beq.n	800b026 <TIM_OC2_SetConfig+0xe6>
 800b01c:	f241 715c 	movw	r1, #5980	; 0x175c
 800b020:	4815      	ldr	r0, [pc, #84]	; (800b078 <TIM_OC2_SetConfig+0x138>)
 800b022:	f7f8 fb38 	bl	8003696 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b02c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	695b      	ldr	r3, [r3, #20]
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	693a      	ldr	r2, [r7, #16]
 800b03e:	4313      	orrs	r3, r2
 800b040:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	699b      	ldr	r3, [r3, #24]
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	693a      	ldr	r2, [r7, #16]
 800b04a:	4313      	orrs	r3, r2
 800b04c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	693a      	ldr	r2, [r7, #16]
 800b052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	685a      	ldr	r2, [r3, #4]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	697a      	ldr	r2, [r7, #20]
 800b066:	621a      	str	r2, [r3, #32]
}
 800b068:	bf00      	nop
 800b06a:	3718      	adds	r7, #24
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	40010000 	.word	0x40010000
 800b074:	40010400 	.word	0x40010400
 800b078:	0800e7ac 	.word	0x0800e7ac

0800b07c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b086      	sub	sp, #24
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6a1b      	ldr	r3, [r3, #32]
 800b08a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a1b      	ldr	r3, [r3, #32]
 800b096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	69db      	ldr	r3, [r3, #28]
 800b0a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f023 0303 	bic.w	r3, r3, #3
 800b0b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	68fa      	ldr	r2, [r7, #12]
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b0c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	689b      	ldr	r3, [r3, #8]
 800b0ca:	021b      	lsls	r3, r3, #8
 800b0cc:	697a      	ldr	r2, [r7, #20]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	4a35      	ldr	r2, [pc, #212]	; (800b1ac <TIM_OC3_SetConfig+0x130>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d003      	beq.n	800b0e2 <TIM_OC3_SetConfig+0x66>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	4a34      	ldr	r2, [pc, #208]	; (800b1b0 <TIM_OC3_SetConfig+0x134>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d11a      	bne.n	800b118 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	68db      	ldr	r3, [r3, #12]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d008      	beq.n	800b0fc <TIM_OC3_SetConfig+0x80>
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	2b08      	cmp	r3, #8
 800b0f0:	d004      	beq.n	800b0fc <TIM_OC3_SetConfig+0x80>
 800b0f2:	f241 7198 	movw	r1, #6040	; 0x1798
 800b0f6:	482f      	ldr	r0, [pc, #188]	; (800b1b4 <TIM_OC3_SetConfig+0x138>)
 800b0f8:	f7f8 facd 	bl	8003696 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	021b      	lsls	r3, r3, #8
 800b10a:	697a      	ldr	r2, [r7, #20]
 800b10c:	4313      	orrs	r3, r2
 800b10e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b116:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	4a24      	ldr	r2, [pc, #144]	; (800b1ac <TIM_OC3_SetConfig+0x130>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d003      	beq.n	800b128 <TIM_OC3_SetConfig+0xac>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	4a23      	ldr	r2, [pc, #140]	; (800b1b0 <TIM_OC3_SetConfig+0x134>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d12f      	bne.n	800b188 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	699b      	ldr	r3, [r3, #24]
 800b12c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b130:	d008      	beq.n	800b144 <TIM_OC3_SetConfig+0xc8>
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	699b      	ldr	r3, [r3, #24]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d004      	beq.n	800b144 <TIM_OC3_SetConfig+0xc8>
 800b13a:	f241 71a5 	movw	r1, #6053	; 0x17a5
 800b13e:	481d      	ldr	r0, [pc, #116]	; (800b1b4 <TIM_OC3_SetConfig+0x138>)
 800b140:	f7f8 faa9 	bl	8003696 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	695b      	ldr	r3, [r3, #20]
 800b148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b14c:	d008      	beq.n	800b160 <TIM_OC3_SetConfig+0xe4>
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	695b      	ldr	r3, [r3, #20]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d004      	beq.n	800b160 <TIM_OC3_SetConfig+0xe4>
 800b156:	f241 71a6 	movw	r1, #6054	; 0x17a6
 800b15a:	4816      	ldr	r0, [pc, #88]	; (800b1b4 <TIM_OC3_SetConfig+0x138>)
 800b15c:	f7f8 fa9b 	bl	8003696 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b166:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b16e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	695b      	ldr	r3, [r3, #20]
 800b174:	011b      	lsls	r3, r3, #4
 800b176:	693a      	ldr	r2, [r7, #16]
 800b178:	4313      	orrs	r3, r2
 800b17a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	699b      	ldr	r3, [r3, #24]
 800b180:	011b      	lsls	r3, r3, #4
 800b182:	693a      	ldr	r2, [r7, #16]
 800b184:	4313      	orrs	r3, r2
 800b186:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	693a      	ldr	r2, [r7, #16]
 800b18c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	68fa      	ldr	r2, [r7, #12]
 800b192:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	685a      	ldr	r2, [r3, #4]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	697a      	ldr	r2, [r7, #20]
 800b1a0:	621a      	str	r2, [r3, #32]
}
 800b1a2:	bf00      	nop
 800b1a4:	3718      	adds	r7, #24
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	40010000 	.word	0x40010000
 800b1b0:	40010400 	.word	0x40010400
 800b1b4:	0800e7ac 	.word	0x0800e7ac

0800b1b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b086      	sub	sp, #24
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a1b      	ldr	r3, [r3, #32]
 800b1c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6a1b      	ldr	r3, [r3, #32]
 800b1d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	69db      	ldr	r3, [r3, #28]
 800b1de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	021b      	lsls	r3, r3, #8
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b202:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	031b      	lsls	r3, r3, #12
 800b20a:	693a      	ldr	r2, [r7, #16]
 800b20c:	4313      	orrs	r3, r2
 800b20e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	4a18      	ldr	r2, [pc, #96]	; (800b274 <TIM_OC4_SetConfig+0xbc>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d003      	beq.n	800b220 <TIM_OC4_SetConfig+0x68>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	4a17      	ldr	r2, [pc, #92]	; (800b278 <TIM_OC4_SetConfig+0xc0>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d117      	bne.n	800b250 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	695b      	ldr	r3, [r3, #20]
 800b224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b228:	d008      	beq.n	800b23c <TIM_OC4_SetConfig+0x84>
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	695b      	ldr	r3, [r3, #20]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d004      	beq.n	800b23c <TIM_OC4_SetConfig+0x84>
 800b232:	f241 71e4 	movw	r1, #6116	; 0x17e4
 800b236:	4811      	ldr	r0, [pc, #68]	; (800b27c <TIM_OC4_SetConfig+0xc4>)
 800b238:	f7f8 fa2d 	bl	8003696 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b242:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	695b      	ldr	r3, [r3, #20]
 800b248:	019b      	lsls	r3, r3, #6
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	4313      	orrs	r3, r2
 800b24e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	697a      	ldr	r2, [r7, #20]
 800b254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	685a      	ldr	r2, [r3, #4]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	693a      	ldr	r2, [r7, #16]
 800b268:	621a      	str	r2, [r3, #32]
}
 800b26a:	bf00      	nop
 800b26c:	3718      	adds	r7, #24
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	40010000 	.word	0x40010000
 800b278:	40010400 	.word	0x40010400
 800b27c:	0800e7ac 	.word	0x0800e7ac

0800b280 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b280:	b480      	push	{r7}
 800b282:	b087      	sub	sp, #28
 800b284:	af00      	add	r7, sp, #0
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	60b9      	str	r1, [r7, #8]
 800b28a:	607a      	str	r2, [r7, #4]
 800b28c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	6a1b      	ldr	r3, [r3, #32]
 800b292:	f023 0201 	bic.w	r2, r3, #1
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	699b      	ldr	r3, [r3, #24]
 800b29e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	6a1b      	ldr	r3, [r3, #32]
 800b2a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	4a28      	ldr	r2, [pc, #160]	; (800b34c <TIM_TI1_SetConfig+0xcc>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d01b      	beq.n	800b2e6 <TIM_TI1_SetConfig+0x66>
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2b4:	d017      	beq.n	800b2e6 <TIM_TI1_SetConfig+0x66>
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	4a25      	ldr	r2, [pc, #148]	; (800b350 <TIM_TI1_SetConfig+0xd0>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d013      	beq.n	800b2e6 <TIM_TI1_SetConfig+0x66>
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	4a24      	ldr	r2, [pc, #144]	; (800b354 <TIM_TI1_SetConfig+0xd4>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d00f      	beq.n	800b2e6 <TIM_TI1_SetConfig+0x66>
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	4a23      	ldr	r2, [pc, #140]	; (800b358 <TIM_TI1_SetConfig+0xd8>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d00b      	beq.n	800b2e6 <TIM_TI1_SetConfig+0x66>
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	4a22      	ldr	r2, [pc, #136]	; (800b35c <TIM_TI1_SetConfig+0xdc>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d007      	beq.n	800b2e6 <TIM_TI1_SetConfig+0x66>
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	4a21      	ldr	r2, [pc, #132]	; (800b360 <TIM_TI1_SetConfig+0xe0>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d003      	beq.n	800b2e6 <TIM_TI1_SetConfig+0x66>
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	4a20      	ldr	r2, [pc, #128]	; (800b364 <TIM_TI1_SetConfig+0xe4>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d101      	bne.n	800b2ea <TIM_TI1_SetConfig+0x6a>
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e000      	b.n	800b2ec <TIM_TI1_SetConfig+0x6c>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d008      	beq.n	800b302 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	f023 0303 	bic.w	r3, r3, #3
 800b2f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b2f8:	697a      	ldr	r2, [r7, #20]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	617b      	str	r3, [r7, #20]
 800b300:	e003      	b.n	800b30a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	f043 0301 	orr.w	r3, r3, #1
 800b308:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b310:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	011b      	lsls	r3, r3, #4
 800b316:	b2db      	uxtb	r3, r3
 800b318:	697a      	ldr	r2, [r7, #20]
 800b31a:	4313      	orrs	r3, r2
 800b31c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	f023 030a 	bic.w	r3, r3, #10
 800b324:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	f003 030a 	and.w	r3, r3, #10
 800b32c:	693a      	ldr	r2, [r7, #16]
 800b32e:	4313      	orrs	r3, r2
 800b330:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	697a      	ldr	r2, [r7, #20]
 800b336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	693a      	ldr	r2, [r7, #16]
 800b33c:	621a      	str	r2, [r3, #32]
}
 800b33e:	bf00      	nop
 800b340:	371c      	adds	r7, #28
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr
 800b34a:	bf00      	nop
 800b34c:	40010000 	.word	0x40010000
 800b350:	40000400 	.word	0x40000400
 800b354:	40000800 	.word	0x40000800
 800b358:	40000c00 	.word	0x40000c00
 800b35c:	40010400 	.word	0x40010400
 800b360:	40014000 	.word	0x40014000
 800b364:	40001800 	.word	0x40001800

0800b368 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b368:	b480      	push	{r7}
 800b36a:	b087      	sub	sp, #28
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	60f8      	str	r0, [r7, #12]
 800b370:	60b9      	str	r1, [r7, #8]
 800b372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	6a1b      	ldr	r3, [r3, #32]
 800b378:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	6a1b      	ldr	r3, [r3, #32]
 800b37e:	f023 0201 	bic.w	r2, r3, #1
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	699b      	ldr	r3, [r3, #24]
 800b38a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	011b      	lsls	r3, r3, #4
 800b398:	693a      	ldr	r2, [r7, #16]
 800b39a:	4313      	orrs	r3, r2
 800b39c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	f023 030a 	bic.w	r3, r3, #10
 800b3a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b3a6:	697a      	ldr	r2, [r7, #20]
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	693a      	ldr	r2, [r7, #16]
 800b3b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	697a      	ldr	r2, [r7, #20]
 800b3b8:	621a      	str	r2, [r3, #32]
}
 800b3ba:	bf00      	nop
 800b3bc:	371c      	adds	r7, #28
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr

0800b3c6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b3c6:	b480      	push	{r7}
 800b3c8:	b087      	sub	sp, #28
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	60f8      	str	r0, [r7, #12]
 800b3ce:	60b9      	str	r1, [r7, #8]
 800b3d0:	607a      	str	r2, [r7, #4]
 800b3d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	6a1b      	ldr	r3, [r3, #32]
 800b3d8:	f023 0210 	bic.w	r2, r3, #16
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	6a1b      	ldr	r3, [r3, #32]
 800b3ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	021b      	lsls	r3, r3, #8
 800b3f8:	697a      	ldr	r2, [r7, #20]
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b404:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	031b      	lsls	r3, r3, #12
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	697a      	ldr	r2, [r7, #20]
 800b40e:	4313      	orrs	r3, r2
 800b410:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b418:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	011b      	lsls	r3, r3, #4
 800b41e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b422:	693a      	ldr	r2, [r7, #16]
 800b424:	4313      	orrs	r3, r2
 800b426:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	697a      	ldr	r2, [r7, #20]
 800b42c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	693a      	ldr	r2, [r7, #16]
 800b432:	621a      	str	r2, [r3, #32]
}
 800b434:	bf00      	nop
 800b436:	371c      	adds	r7, #28
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b440:	b480      	push	{r7}
 800b442:	b087      	sub	sp, #28
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	6a1b      	ldr	r3, [r3, #32]
 800b450:	f023 0210 	bic.w	r2, r3, #16
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	699b      	ldr	r3, [r3, #24]
 800b45c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	6a1b      	ldr	r3, [r3, #32]
 800b462:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b46a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	031b      	lsls	r3, r3, #12
 800b470:	697a      	ldr	r2, [r7, #20]
 800b472:	4313      	orrs	r3, r2
 800b474:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b47c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	011b      	lsls	r3, r3, #4
 800b482:	693a      	ldr	r2, [r7, #16]
 800b484:	4313      	orrs	r3, r2
 800b486:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	697a      	ldr	r2, [r7, #20]
 800b48c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	693a      	ldr	r2, [r7, #16]
 800b492:	621a      	str	r2, [r3, #32]
}
 800b494:	bf00      	nop
 800b496:	371c      	adds	r7, #28
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr

0800b4a0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b087      	sub	sp, #28
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	60b9      	str	r1, [r7, #8]
 800b4aa:	607a      	str	r2, [r7, #4]
 800b4ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	6a1b      	ldr	r3, [r3, #32]
 800b4b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	69db      	ldr	r3, [r3, #28]
 800b4be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	6a1b      	ldr	r3, [r3, #32]
 800b4c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	f023 0303 	bic.w	r3, r3, #3
 800b4cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800b4ce:	697a      	ldr	r2, [r7, #20]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	4313      	orrs	r3, r2
 800b4d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b4dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	011b      	lsls	r3, r3, #4
 800b4e2:	b2db      	uxtb	r3, r3
 800b4e4:	697a      	ldr	r2, [r7, #20]
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800b4f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	021b      	lsls	r3, r3, #8
 800b4f6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800b4fa:	693a      	ldr	r2, [r7, #16]
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	697a      	ldr	r2, [r7, #20]
 800b504:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	693a      	ldr	r2, [r7, #16]
 800b50a:	621a      	str	r2, [r3, #32]
}
 800b50c:	bf00      	nop
 800b50e:	371c      	adds	r7, #28
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr

0800b518 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b518:	b480      	push	{r7}
 800b51a:	b087      	sub	sp, #28
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	607a      	str	r2, [r7, #4]
 800b524:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	6a1b      	ldr	r3, [r3, #32]
 800b52a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	69db      	ldr	r3, [r3, #28]
 800b536:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	6a1b      	ldr	r3, [r3, #32]
 800b53c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b544:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	021b      	lsls	r3, r3, #8
 800b54a:	697a      	ldr	r2, [r7, #20]
 800b54c:	4313      	orrs	r3, r2
 800b54e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b556:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	031b      	lsls	r3, r3, #12
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	697a      	ldr	r2, [r7, #20]
 800b560:	4313      	orrs	r3, r2
 800b562:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800b56a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	031b      	lsls	r3, r3, #12
 800b570:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800b574:	693a      	ldr	r2, [r7, #16]
 800b576:	4313      	orrs	r3, r2
 800b578:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	697a      	ldr	r2, [r7, #20]
 800b57e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	693a      	ldr	r2, [r7, #16]
 800b584:	621a      	str	r2, [r3, #32]
}
 800b586:	bf00      	nop
 800b588:	371c      	adds	r7, #28
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr

0800b592 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b592:	b480      	push	{r7}
 800b594:	b085      	sub	sp, #20
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
 800b59a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b5aa:	683a      	ldr	r2, [r7, #0]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	f043 0307 	orr.w	r3, r3, #7
 800b5b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	68fa      	ldr	r2, [r7, #12]
 800b5ba:	609a      	str	r2, [r3, #8]
}
 800b5bc:	bf00      	nop
 800b5be:	3714      	adds	r7, #20
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b087      	sub	sp, #28
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	607a      	str	r2, [r7, #4]
 800b5d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	689b      	ldr	r3, [r3, #8]
 800b5da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b5e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	021a      	lsls	r2, r3, #8
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	431a      	orrs	r2, r3
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	697a      	ldr	r2, [r7, #20]
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	697a      	ldr	r2, [r7, #20]
 800b5fa:	609a      	str	r2, [r3, #8]
}
 800b5fc:	bf00      	nop
 800b5fe:	371c      	adds	r7, #28
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b086      	sub	sp, #24
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	60b9      	str	r1, [r7, #8]
 800b612:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	4a32      	ldr	r2, [pc, #200]	; (800b6e0 <TIM_CCxChannelCmd+0xd8>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d030      	beq.n	800b67e <TIM_CCxChannelCmd+0x76>
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b622:	d02c      	beq.n	800b67e <TIM_CCxChannelCmd+0x76>
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	4a2f      	ldr	r2, [pc, #188]	; (800b6e4 <TIM_CCxChannelCmd+0xdc>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d028      	beq.n	800b67e <TIM_CCxChannelCmd+0x76>
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	4a2e      	ldr	r2, [pc, #184]	; (800b6e8 <TIM_CCxChannelCmd+0xe0>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d024      	beq.n	800b67e <TIM_CCxChannelCmd+0x76>
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	4a2d      	ldr	r2, [pc, #180]	; (800b6ec <TIM_CCxChannelCmd+0xe4>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d020      	beq.n	800b67e <TIM_CCxChannelCmd+0x76>
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	4a2c      	ldr	r2, [pc, #176]	; (800b6f0 <TIM_CCxChannelCmd+0xe8>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d01c      	beq.n	800b67e <TIM_CCxChannelCmd+0x76>
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	4a2b      	ldr	r2, [pc, #172]	; (800b6f4 <TIM_CCxChannelCmd+0xec>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d018      	beq.n	800b67e <TIM_CCxChannelCmd+0x76>
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	4a2a      	ldr	r2, [pc, #168]	; (800b6f8 <TIM_CCxChannelCmd+0xf0>)
 800b650:	4293      	cmp	r3, r2
 800b652:	d014      	beq.n	800b67e <TIM_CCxChannelCmd+0x76>
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	4a29      	ldr	r2, [pc, #164]	; (800b6fc <TIM_CCxChannelCmd+0xf4>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d010      	beq.n	800b67e <TIM_CCxChannelCmd+0x76>
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	4a28      	ldr	r2, [pc, #160]	; (800b700 <TIM_CCxChannelCmd+0xf8>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d00c      	beq.n	800b67e <TIM_CCxChannelCmd+0x76>
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	4a27      	ldr	r2, [pc, #156]	; (800b704 <TIM_CCxChannelCmd+0xfc>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d008      	beq.n	800b67e <TIM_CCxChannelCmd+0x76>
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	4a26      	ldr	r2, [pc, #152]	; (800b708 <TIM_CCxChannelCmd+0x100>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d004      	beq.n	800b67e <TIM_CCxChannelCmd+0x76>
 800b674:	f641 11cc 	movw	r1, #6604	; 0x19cc
 800b678:	4824      	ldr	r0, [pc, #144]	; (800b70c <TIM_CCxChannelCmd+0x104>)
 800b67a:	f7f8 f80c 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d010      	beq.n	800b6a6 <TIM_CCxChannelCmd+0x9e>
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	2b04      	cmp	r3, #4
 800b688:	d00d      	beq.n	800b6a6 <TIM_CCxChannelCmd+0x9e>
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	2b08      	cmp	r3, #8
 800b68e:	d00a      	beq.n	800b6a6 <TIM_CCxChannelCmd+0x9e>
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	2b0c      	cmp	r3, #12
 800b694:	d007      	beq.n	800b6a6 <TIM_CCxChannelCmd+0x9e>
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	2b3c      	cmp	r3, #60	; 0x3c
 800b69a:	d004      	beq.n	800b6a6 <TIM_CCxChannelCmd+0x9e>
 800b69c:	f641 11cd 	movw	r1, #6605	; 0x19cd
 800b6a0:	481a      	ldr	r0, [pc, #104]	; (800b70c <TIM_CCxChannelCmd+0x104>)
 800b6a2:	f7f7 fff8 	bl	8003696 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	f003 031f 	and.w	r3, r3, #31
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b6b2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6a1a      	ldr	r2, [r3, #32]
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	43db      	mvns	r3, r3
 800b6bc:	401a      	ands	r2, r3
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6a1a      	ldr	r2, [r3, #32]
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	f003 031f 	and.w	r3, r3, #31
 800b6cc:	6879      	ldr	r1, [r7, #4]
 800b6ce:	fa01 f303 	lsl.w	r3, r1, r3
 800b6d2:	431a      	orrs	r2, r3
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	621a      	str	r2, [r3, #32]
}
 800b6d8:	bf00      	nop
 800b6da:	3718      	adds	r7, #24
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	40010000 	.word	0x40010000
 800b6e4:	40000400 	.word	0x40000400
 800b6e8:	40000800 	.word	0x40000800
 800b6ec:	40000c00 	.word	0x40000c00
 800b6f0:	40010400 	.word	0x40010400
 800b6f4:	40014000 	.word	0x40014000
 800b6f8:	40014400 	.word	0x40014400
 800b6fc:	40014800 	.word	0x40014800
 800b700:	40001800 	.word	0x40001800
 800b704:	40001c00 	.word	0x40001c00
 800b708:	40002000 	.word	0x40002000
 800b70c:	0800e7ac 	.word	0x0800e7ac

0800b710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a61      	ldr	r2, [pc, #388]	; (800b8a4 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d027      	beq.n	800b774 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b72c:	d022      	beq.n	800b774 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4a5d      	ldr	r2, [pc, #372]	; (800b8a8 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d01d      	beq.n	800b774 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4a5b      	ldr	r2, [pc, #364]	; (800b8ac <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d018      	beq.n	800b774 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a5a      	ldr	r2, [pc, #360]	; (800b8b0 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d013      	beq.n	800b774 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4a58      	ldr	r2, [pc, #352]	; (800b8b4 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d00e      	beq.n	800b774 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	4a57      	ldr	r2, [pc, #348]	; (800b8b8 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d009      	beq.n	800b774 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4a55      	ldr	r2, [pc, #340]	; (800b8bc <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d004      	beq.n	800b774 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b76a:	f240 6164 	movw	r1, #1636	; 0x664
 800b76e:	4854      	ldr	r0, [pc, #336]	; (800b8c0 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800b770:	f7f7 ff91 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d020      	beq.n	800b7be <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2b10      	cmp	r3, #16
 800b782:	d01c      	beq.n	800b7be <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2b20      	cmp	r3, #32
 800b78a:	d018      	beq.n	800b7be <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2b30      	cmp	r3, #48	; 0x30
 800b792:	d014      	beq.n	800b7be <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	2b40      	cmp	r3, #64	; 0x40
 800b79a:	d010      	beq.n	800b7be <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2b50      	cmp	r3, #80	; 0x50
 800b7a2:	d00c      	beq.n	800b7be <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	2b60      	cmp	r3, #96	; 0x60
 800b7aa:	d008      	beq.n	800b7be <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	2b70      	cmp	r3, #112	; 0x70
 800b7b2:	d004      	beq.n	800b7be <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b7b4:	f240 6165 	movw	r1, #1637	; 0x665
 800b7b8:	4841      	ldr	r0, [pc, #260]	; (800b8c0 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800b7ba:	f7f7 ff6c 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	2b80      	cmp	r3, #128	; 0x80
 800b7c4:	d008      	beq.n	800b7d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d004      	beq.n	800b7d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b7ce:	f240 6166 	movw	r1, #1638	; 0x666
 800b7d2:	483b      	ldr	r0, [pc, #236]	; (800b8c0 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800b7d4:	f7f7 ff5f 	bl	8003696 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d101      	bne.n	800b7e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b7e2:	2302      	movs	r3, #2
 800b7e4:	e05a      	b.n	800b89c <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2202      	movs	r2, #2
 800b7f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	685b      	ldr	r3, [r3, #4]
 800b7fc:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b80c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	68fa      	ldr	r2, [r7, #12]
 800b814:	4313      	orrs	r3, r2
 800b816:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a1f      	ldr	r2, [pc, #124]	; (800b8a4 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d022      	beq.n	800b870 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b832:	d01d      	beq.n	800b870 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4a1b      	ldr	r2, [pc, #108]	; (800b8a8 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d018      	beq.n	800b870 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a1a      	ldr	r2, [pc, #104]	; (800b8ac <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d013      	beq.n	800b870 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a18      	ldr	r2, [pc, #96]	; (800b8b0 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d00e      	beq.n	800b870 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a19      	ldr	r2, [pc, #100]	; (800b8bc <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d009      	beq.n	800b870 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a18      	ldr	r2, [pc, #96]	; (800b8c4 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d004      	beq.n	800b870 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4a17      	ldr	r2, [pc, #92]	; (800b8c8 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d10c      	bne.n	800b88a <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b876:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	68ba      	ldr	r2, [r7, #8]
 800b87e:	4313      	orrs	r3, r2
 800b880:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	68ba      	ldr	r2, [r7, #8]
 800b888:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2201      	movs	r2, #1
 800b88e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2200      	movs	r2, #0
 800b896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b89a:	2300      	movs	r3, #0
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3710      	adds	r7, #16
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	40010000 	.word	0x40010000
 800b8a8:	40000400 	.word	0x40000400
 800b8ac:	40000800 	.word	0x40000800
 800b8b0:	40000c00 	.word	0x40000c00
 800b8b4:	40001000 	.word	0x40001000
 800b8b8:	40001400 	.word	0x40001400
 800b8bc:	40010400 	.word	0x40010400
 800b8c0:	0800e7e4 	.word	0x0800e7e4
 800b8c4:	40014000 	.word	0x40014000
 800b8c8:	40001800 	.word	0x40001800

0800b8cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a5e      	ldr	r2, [pc, #376]	; (800ba58 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d009      	beq.n	800b8f8 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a5c      	ldr	r2, [pc, #368]	; (800ba5c <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d004      	beq.n	800b8f8 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800b8ee:	f240 61a1 	movw	r1, #1697	; 0x6a1
 800b8f2:	485b      	ldr	r0, [pc, #364]	; (800ba60 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b8f4:	f7f7 fecf 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b900:	d008      	beq.n	800b914 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d004      	beq.n	800b914 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800b90a:	f240 61a2 	movw	r1, #1698	; 0x6a2
 800b90e:	4854      	ldr	r0, [pc, #336]	; (800ba60 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b910:	f7f7 fec1 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b91c:	d008      	beq.n	800b930 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d004      	beq.n	800b930 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800b926:	f240 61a3 	movw	r1, #1699	; 0x6a3
 800b92a:	484d      	ldr	r0, [pc, #308]	; (800ba60 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b92c:	f7f7 feb3 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d013      	beq.n	800b960 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	689b      	ldr	r3, [r3, #8]
 800b93c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b940:	d00e      	beq.n	800b960 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	689b      	ldr	r3, [r3, #8]
 800b946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b94a:	d009      	beq.n	800b960 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b954:	d004      	beq.n	800b960 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800b956:	f240 61a4 	movw	r1, #1700	; 0x6a4
 800b95a:	4841      	ldr	r0, [pc, #260]	; (800ba60 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b95c:	f7f7 fe9b 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	2bff      	cmp	r3, #255	; 0xff
 800b966:	d904      	bls.n	800b972 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800b968:	f240 61a5 	movw	r1, #1701	; 0x6a5
 800b96c:	483c      	ldr	r0, [pc, #240]	; (800ba60 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b96e:	f7f7 fe92 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	691b      	ldr	r3, [r3, #16]
 800b976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b97a:	d008      	beq.n	800b98e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	691b      	ldr	r3, [r3, #16]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d004      	beq.n	800b98e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b984:	f240 61a6 	movw	r1, #1702	; 0x6a6
 800b988:	4835      	ldr	r0, [pc, #212]	; (800ba60 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b98a:	f7f7 fe84 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	695b      	ldr	r3, [r3, #20]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d009      	beq.n	800b9aa <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	695b      	ldr	r3, [r3, #20]
 800b99a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b99e:	d004      	beq.n	800b9aa <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800b9a0:	f240 61a7 	movw	r1, #1703	; 0x6a7
 800b9a4:	482e      	ldr	r0, [pc, #184]	; (800ba60 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b9a6:	f7f7 fe76 	bl	8003696 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	69db      	ldr	r3, [r3, #28]
 800b9ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b9b2:	d008      	beq.n	800b9c6 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	69db      	ldr	r3, [r3, #28]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d004      	beq.n	800b9c6 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800b9bc:	f44f 61d5 	mov.w	r1, #1704	; 0x6a8
 800b9c0:	4827      	ldr	r0, [pc, #156]	; (800ba60 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b9c2:	f7f7 fe68 	bl	8003696 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d101      	bne.n	800b9d4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 800b9d0:	2302      	movs	r3, #2
 800b9d2:	e03d      	b.n	800ba50 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	4313      	orrs	r3, r2
 800ba04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4313      	orrs	r3, r2
 800ba12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	691b      	ldr	r3, [r3, #16]
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	695b      	ldr	r3, [r3, #20]
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	69db      	ldr	r3, [r3, #28]
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	68fa      	ldr	r2, [r7, #12]
 800ba44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba4e:	2300      	movs	r3, #0
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3710      	adds	r7, #16
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	40010000 	.word	0x40010000
 800ba5c:	40010400 	.word	0x40010400
 800ba60:	0800e7e4 	.word	0x0800e7e4

0800ba64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d101      	bne.n	800ba76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba72:	2301      	movs	r3, #1
 800ba74:	e0be      	b.n	800bbf4 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	699b      	ldr	r3, [r3, #24]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d031      	beq.n	800bae2 <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4a5e      	ldr	r2, [pc, #376]	; (800bbfc <HAL_UART_Init+0x198>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d013      	beq.n	800bab0 <HAL_UART_Init+0x4c>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a5c      	ldr	r2, [pc, #368]	; (800bc00 <HAL_UART_Init+0x19c>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d00e      	beq.n	800bab0 <HAL_UART_Init+0x4c>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a5b      	ldr	r2, [pc, #364]	; (800bc04 <HAL_UART_Init+0x1a0>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d009      	beq.n	800bab0 <HAL_UART_Init+0x4c>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4a59      	ldr	r2, [pc, #356]	; (800bc08 <HAL_UART_Init+0x1a4>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d004      	beq.n	800bab0 <HAL_UART_Init+0x4c>
 800baa6:	f240 114b 	movw	r1, #331	; 0x14b
 800baaa:	4858      	ldr	r0, [pc, #352]	; (800bc0c <HAL_UART_Init+0x1a8>)
 800baac:	f7f7 fdf3 	bl	8003696 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	699b      	ldr	r3, [r3, #24]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d041      	beq.n	800bb3c <HAL_UART_Init+0xd8>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	699b      	ldr	r3, [r3, #24]
 800babc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bac0:	d03c      	beq.n	800bb3c <HAL_UART_Init+0xd8>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	699b      	ldr	r3, [r3, #24]
 800bac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baca:	d037      	beq.n	800bb3c <HAL_UART_Init+0xd8>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	699b      	ldr	r3, [r3, #24]
 800bad0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bad4:	d032      	beq.n	800bb3c <HAL_UART_Init+0xd8>
 800bad6:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800bada:	484c      	ldr	r0, [pc, #304]	; (800bc0c <HAL_UART_Init+0x1a8>)
 800badc:	f7f7 fddb 	bl	8003696 <assert_failed>
 800bae0:	e02c      	b.n	800bb3c <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a45      	ldr	r2, [pc, #276]	; (800bbfc <HAL_UART_Init+0x198>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d027      	beq.n	800bb3c <HAL_UART_Init+0xd8>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a43      	ldr	r2, [pc, #268]	; (800bc00 <HAL_UART_Init+0x19c>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d022      	beq.n	800bb3c <HAL_UART_Init+0xd8>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a42      	ldr	r2, [pc, #264]	; (800bc04 <HAL_UART_Init+0x1a0>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d01d      	beq.n	800bb3c <HAL_UART_Init+0xd8>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a42      	ldr	r2, [pc, #264]	; (800bc10 <HAL_UART_Init+0x1ac>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d018      	beq.n	800bb3c <HAL_UART_Init+0xd8>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4a41      	ldr	r2, [pc, #260]	; (800bc14 <HAL_UART_Init+0x1b0>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d013      	beq.n	800bb3c <HAL_UART_Init+0xd8>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4a3b      	ldr	r2, [pc, #236]	; (800bc08 <HAL_UART_Init+0x1a4>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d00e      	beq.n	800bb3c <HAL_UART_Init+0xd8>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a3d      	ldr	r2, [pc, #244]	; (800bc18 <HAL_UART_Init+0x1b4>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d009      	beq.n	800bb3c <HAL_UART_Init+0xd8>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	4a3b      	ldr	r2, [pc, #236]	; (800bc1c <HAL_UART_Init+0x1b8>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d004      	beq.n	800bb3c <HAL_UART_Init+0xd8>
 800bb32:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800bb36:	4835      	ldr	r0, [pc, #212]	; (800bc0c <HAL_UART_Init+0x1a8>)
 800bb38:	f7f7 fdad 	bl	8003696 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d009      	beq.n	800bb58 <HAL_UART_Init+0xf4>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb4c:	d004      	beq.n	800bb58 <HAL_UART_Init+0xf4>
 800bb4e:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800bb52:	482e      	ldr	r0, [pc, #184]	; (800bc0c <HAL_UART_Init+0x1a8>)
 800bb54:	f7f7 fd9f 	bl	8003696 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	69db      	ldr	r3, [r3, #28]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d009      	beq.n	800bb74 <HAL_UART_Init+0x110>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	69db      	ldr	r3, [r3, #28]
 800bb64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb68:	d004      	beq.n	800bb74 <HAL_UART_Init+0x110>
 800bb6a:	f240 1153 	movw	r1, #339	; 0x153
 800bb6e:	4827      	ldr	r0, [pc, #156]	; (800bc0c <HAL_UART_Init+0x1a8>)
 800bb70:	f7f7 fd91 	bl	8003696 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d106      	bne.n	800bb8e <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2200      	movs	r2, #0
 800bb84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f7f8 fda9 	bl	80046e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2224      	movs	r2, #36	; 0x24
 800bb92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	68da      	ldr	r2, [r3, #12]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bba4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 fa72 	bl	800c090 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	691a      	ldr	r2, [r3, #16]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bbba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	695a      	ldr	r2, [r3, #20]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bbca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	68da      	ldr	r2, [r3, #12]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bbda:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2220      	movs	r2, #32
 800bbe6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2220      	movs	r2, #32
 800bbee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800bbf2:	2300      	movs	r3, #0
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3708      	adds	r7, #8
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	40011000 	.word	0x40011000
 800bc00:	40004400 	.word	0x40004400
 800bc04:	40004800 	.word	0x40004800
 800bc08:	40011400 	.word	0x40011400
 800bc0c:	0800e820 	.word	0x0800e820
 800bc10:	40004c00 	.word	0x40004c00
 800bc14:	40005000 	.word	0x40005000
 800bc18:	40007800 	.word	0x40007800
 800bc1c:	40007c00 	.word	0x40007c00

0800bc20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b088      	sub	sp, #32
 800bc24:	af02      	add	r7, sp, #8
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	603b      	str	r3, [r7, #0]
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800bc30:	2300      	movs	r3, #0
 800bc32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	2b20      	cmp	r3, #32
 800bc3e:	f040 8083 	bne.w	800bd48 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d002      	beq.n	800bc4e <HAL_UART_Transmit+0x2e>
 800bc48:	88fb      	ldrh	r3, [r7, #6]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d101      	bne.n	800bc52 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	e07b      	b.n	800bd4a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d101      	bne.n	800bc60 <HAL_UART_Transmit+0x40>
 800bc5c:	2302      	movs	r3, #2
 800bc5e:	e074      	b.n	800bd4a <HAL_UART_Transmit+0x12a>
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	2201      	movs	r2, #1
 800bc64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2221      	movs	r2, #33	; 0x21
 800bc72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800bc76:	f7f8 fe67 	bl	8004948 <HAL_GetTick>
 800bc7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	88fa      	ldrh	r2, [r7, #6]
 800bc80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	88fa      	ldrh	r2, [r7, #6]
 800bc86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800bc90:	e042      	b.n	800bd18 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	3b01      	subs	r3, #1
 800bc9a:	b29a      	uxth	r2, r3
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bca8:	d122      	bne.n	800bcf0 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	9300      	str	r3, [sp, #0]
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	2180      	movs	r1, #128	; 0x80
 800bcb4:	68f8      	ldr	r0, [r7, #12]
 800bcb6:	f000 f96d 	bl	800bf94 <UART_WaitOnFlagUntilTimeout>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d001      	beq.n	800bcc4 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800bcc0:	2303      	movs	r3, #3
 800bcc2:	e042      	b.n	800bd4a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	881b      	ldrh	r3, [r3, #0]
 800bccc:	461a      	mov	r2, r3
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bcd6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	691b      	ldr	r3, [r3, #16]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d103      	bne.n	800bce8 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	3302      	adds	r3, #2
 800bce4:	60bb      	str	r3, [r7, #8]
 800bce6:	e017      	b.n	800bd18 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	3301      	adds	r3, #1
 800bcec:	60bb      	str	r3, [r7, #8]
 800bcee:	e013      	b.n	800bd18 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	9300      	str	r3, [sp, #0]
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	2180      	movs	r1, #128	; 0x80
 800bcfa:	68f8      	ldr	r0, [r7, #12]
 800bcfc:	f000 f94a 	bl	800bf94 <UART_WaitOnFlagUntilTimeout>
 800bd00:	4603      	mov	r3, r0
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d001      	beq.n	800bd0a <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800bd06:	2303      	movs	r3, #3
 800bd08:	e01f      	b.n	800bd4a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	1c5a      	adds	r2, r3, #1
 800bd0e:	60ba      	str	r2, [r7, #8]
 800bd10:	781a      	ldrb	r2, [r3, #0]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d1b7      	bne.n	800bc92 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	9300      	str	r3, [sp, #0]
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	2140      	movs	r1, #64	; 0x40
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f000 f931 	bl	800bf94 <UART_WaitOnFlagUntilTimeout>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d001      	beq.n	800bd3c <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800bd38:	2303      	movs	r3, #3
 800bd3a:	e006      	b.n	800bd4a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2220      	movs	r2, #32
 800bd40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800bd44:	2300      	movs	r3, #0
 800bd46:	e000      	b.n	800bd4a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800bd48:	2302      	movs	r3, #2
  }
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3718      	adds	r7, #24
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
	...

0800bd54 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b086      	sub	sp, #24
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	4613      	mov	r3, r2
 800bd60:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	2b20      	cmp	r3, #32
 800bd6c:	d166      	bne.n	800be3c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d002      	beq.n	800bd7a <HAL_UART_Receive_DMA+0x26>
 800bd74:	88fb      	ldrh	r3, [r7, #6]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d101      	bne.n	800bd7e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e05f      	b.n	800be3e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d101      	bne.n	800bd8c <HAL_UART_Receive_DMA+0x38>
 800bd88:	2302      	movs	r3, #2
 800bd8a:	e058      	b.n	800be3e <HAL_UART_Receive_DMA+0xea>
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800bd94:	68ba      	ldr	r2, [r7, #8]
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	88fa      	ldrh	r2, [r7, #6]
 800bd9e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2200      	movs	r2, #0
 800bda4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2222      	movs	r2, #34	; 0x22
 800bdaa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdb2:	4a25      	ldr	r2, [pc, #148]	; (800be48 <HAL_UART_Receive_DMA+0xf4>)
 800bdb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdba:	4a24      	ldr	r2, [pc, #144]	; (800be4c <HAL_UART_Receive_DMA+0xf8>)
 800bdbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdc2:	4a23      	ldr	r2, [pc, #140]	; (800be50 <HAL_UART_Receive_DMA+0xfc>)
 800bdc4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdca:	2200      	movs	r2, #0
 800bdcc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800bdce:	f107 0308 	add.w	r3, r7, #8
 800bdd2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	3304      	adds	r3, #4
 800bdde:	4619      	mov	r1, r3
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	681a      	ldr	r2, [r3, #0]
 800bde4:	88fb      	ldrh	r3, [r7, #6]
 800bde6:	f7fa f9b5 	bl	8006154 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800bdea:	2300      	movs	r3, #0
 800bdec:	613b      	str	r3, [r7, #16]
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	613b      	str	r3, [r7, #16]
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	613b      	str	r3, [r7, #16]
 800bdfe:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2200      	movs	r2, #0
 800be04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	68da      	ldr	r2, [r3, #12]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be16:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	695a      	ldr	r2, [r3, #20]
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f042 0201 	orr.w	r2, r2, #1
 800be26:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	695a      	ldr	r2, [r3, #20]
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be36:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800be38:	2300      	movs	r3, #0
 800be3a:	e000      	b.n	800be3e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800be3c:	2302      	movs	r3, #2
  }
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3718      	adds	r7, #24
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	0800be7d 	.word	0x0800be7d
 800be4c:	0800bee5 	.word	0x0800bee5
 800be50:	0800bf01 	.word	0x0800bf01

0800be54 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800be5c:	bf00      	nop
 800be5e:	370c      	adds	r7, #12
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800be70:	bf00      	nop
 800be72:	370c      	adds	r7, #12
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be88:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be94:	2b00      	cmp	r3, #0
 800be96:	d11e      	bne.n	800bed6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	2200      	movs	r2, #0
 800be9c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	68da      	ldr	r2, [r3, #12]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800beac:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	695a      	ldr	r2, [r3, #20]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f022 0201 	bic.w	r2, r2, #1
 800bebc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	695a      	ldr	r2, [r3, #20]
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800becc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2220      	movs	r2, #32
 800bed2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800bed6:	68f8      	ldr	r0, [r7, #12]
 800bed8:	f7f7 f83a 	bl	8002f50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bedc:	bf00      	nop
 800bede:	3710      	adds	r7, #16
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800bef2:	68f8      	ldr	r0, [r7, #12]
 800bef4:	f7ff ffae 	bl	800be54 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bef8:	bf00      	nop
 800befa:	3710      	adds	r7, #16
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf10:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	695b      	ldr	r3, [r3, #20]
 800bf18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf1c:	2b80      	cmp	r3, #128	; 0x80
 800bf1e:	bf0c      	ite	eq
 800bf20:	2301      	moveq	r3, #1
 800bf22:	2300      	movne	r3, #0
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bf2e:	b2db      	uxtb	r3, r3
 800bf30:	2b21      	cmp	r3, #33	; 0x21
 800bf32:	d108      	bne.n	800bf46 <UART_DMAError+0x46>
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d005      	beq.n	800bf46 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800bf40:	68b8      	ldr	r0, [r7, #8]
 800bf42:	f000 f871 	bl	800c028 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	695b      	ldr	r3, [r3, #20]
 800bf4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf50:	2b40      	cmp	r3, #64	; 0x40
 800bf52:	bf0c      	ite	eq
 800bf54:	2301      	moveq	r3, #1
 800bf56:	2300      	movne	r3, #0
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	2b22      	cmp	r3, #34	; 0x22
 800bf66:	d108      	bne.n	800bf7a <UART_DMAError+0x7a>
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d005      	beq.n	800bf7a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	2200      	movs	r2, #0
 800bf72:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800bf74:	68b8      	ldr	r0, [r7, #8]
 800bf76:	f000 f86d 	bl	800c054 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf7e:	f043 0210 	orr.w	r2, r3, #16
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bf86:	68b8      	ldr	r0, [r7, #8]
 800bf88:	f7ff ff6e 	bl	800be68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf8c:	bf00      	nop
 800bf8e:	3710      	adds	r7, #16
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	603b      	str	r3, [r7, #0]
 800bfa0:	4613      	mov	r3, r2
 800bfa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfa4:	e02c      	b.n	800c000 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfac:	d028      	beq.n	800c000 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bfae:	69bb      	ldr	r3, [r7, #24]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d007      	beq.n	800bfc4 <UART_WaitOnFlagUntilTimeout+0x30>
 800bfb4:	f7f8 fcc8 	bl	8004948 <HAL_GetTick>
 800bfb8:	4602      	mov	r2, r0
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	1ad3      	subs	r3, r2, r3
 800bfbe:	69ba      	ldr	r2, [r7, #24]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d21d      	bcs.n	800c000 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	68da      	ldr	r2, [r3, #12]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bfd2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	695a      	ldr	r2, [r3, #20]
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f022 0201 	bic.w	r2, r2, #1
 800bfe2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2220      	movs	r2, #32
 800bfe8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2220      	movs	r2, #32
 800bff0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2200      	movs	r2, #0
 800bff8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800bffc:	2303      	movs	r3, #3
 800bffe:	e00f      	b.n	800c020 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	68bb      	ldr	r3, [r7, #8]
 800c008:	4013      	ands	r3, r2
 800c00a:	68ba      	ldr	r2, [r7, #8]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	bf0c      	ite	eq
 800c010:	2301      	moveq	r3, #1
 800c012:	2300      	movne	r3, #0
 800c014:	b2db      	uxtb	r3, r3
 800c016:	461a      	mov	r2, r3
 800c018:	79fb      	ldrb	r3, [r7, #7]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d0c3      	beq.n	800bfa6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c01e:	2300      	movs	r3, #0
}
 800c020:	4618      	mov	r0, r3
 800c022:	3710      	adds	r7, #16
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c028:	b480      	push	{r7}
 800c02a:	b083      	sub	sp, #12
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	68da      	ldr	r2, [r3, #12]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c03e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2220      	movs	r2, #32
 800c044:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800c048:	bf00      	nop
 800c04a:	370c      	adds	r7, #12
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr

0800c054 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c054:	b480      	push	{r7}
 800c056:	b083      	sub	sp, #12
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	68da      	ldr	r2, [r3, #12]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c06a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	695a      	ldr	r2, [r3, #20]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f022 0201 	bic.w	r2, r2, #1
 800c07a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2220      	movs	r2, #32
 800c080:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800c084:	bf00      	nop
 800c086:	370c      	adds	r7, #12
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c094:	b0bd      	sub	sp, #244	; 0xf4
 800c096:	af00      	add	r7, sp, #0
 800c098:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800c09c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0a0:	685a      	ldr	r2, [r3, #4]
 800c0a2:	4bae      	ldr	r3, [pc, #696]	; (800c35c <UART_SetConfig+0x2cc>)
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d904      	bls.n	800c0b2 <UART_SetConfig+0x22>
 800c0a8:	f640 31fb 	movw	r1, #3067	; 0xbfb
 800c0ac:	48ac      	ldr	r0, [pc, #688]	; (800c360 <UART_SetConfig+0x2d0>)
 800c0ae:	f7f7 faf2 	bl	8003696 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800c0b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0b6:	68db      	ldr	r3, [r3, #12]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d00a      	beq.n	800c0d2 <UART_SetConfig+0x42>
 800c0bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0c0:	68db      	ldr	r3, [r3, #12]
 800c0c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0c6:	d004      	beq.n	800c0d2 <UART_SetConfig+0x42>
 800c0c8:	f640 31fc 	movw	r1, #3068	; 0xbfc
 800c0cc:	48a4      	ldr	r0, [pc, #656]	; (800c360 <UART_SetConfig+0x2d0>)
 800c0ce:	f7f7 fae2 	bl	8003696 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800c0d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0d6:	691b      	ldr	r3, [r3, #16]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d010      	beq.n	800c0fe <UART_SetConfig+0x6e>
 800c0dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0e0:	691b      	ldr	r3, [r3, #16]
 800c0e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0e6:	d00a      	beq.n	800c0fe <UART_SetConfig+0x6e>
 800c0e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0ec:	691b      	ldr	r3, [r3, #16]
 800c0ee:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c0f2:	d004      	beq.n	800c0fe <UART_SetConfig+0x6e>
 800c0f4:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800c0f8:	4899      	ldr	r0, [pc, #612]	; (800c360 <UART_SetConfig+0x2d0>)
 800c0fa:	f7f7 facc 	bl	8003696 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800c0fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c102:	695a      	ldr	r2, [r3, #20]
 800c104:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800c108:	4013      	ands	r3, r2
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d104      	bne.n	800c118 <UART_SetConfig+0x88>
 800c10e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c112:	695b      	ldr	r3, [r3, #20]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d104      	bne.n	800c122 <UART_SetConfig+0x92>
 800c118:	f640 31fe 	movw	r1, #3070	; 0xbfe
 800c11c:	4890      	ldr	r0, [pc, #576]	; (800c360 <UART_SetConfig+0x2d0>)
 800c11e:	f7f7 faba 	bl	8003696 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	691b      	ldr	r3, [r3, #16]
 800c12a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c12e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c132:	68d9      	ldr	r1, [r3, #12]
 800c134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	ea40 0301 	orr.w	r3, r0, r1
 800c13e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c144:	689a      	ldr	r2, [r3, #8]
 800c146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c14a:	691b      	ldr	r3, [r3, #16]
 800c14c:	431a      	orrs	r2, r3
 800c14e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c152:	695b      	ldr	r3, [r3, #20]
 800c154:	431a      	orrs	r2, r3
 800c156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c15a:	69db      	ldr	r3, [r3, #28]
 800c15c:	4313      	orrs	r3, r2
 800c15e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800c162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c16e:	f021 010c 	bic.w	r1, r1, #12
 800c172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c176:	681a      	ldr	r2, [r3, #0]
 800c178:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c17c:	430b      	orrs	r3, r1
 800c17e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	695b      	ldr	r3, [r3, #20]
 800c188:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c18c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c190:	6999      	ldr	r1, [r3, #24]
 800c192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	ea40 0301 	orr.w	r3, r0, r1
 800c19c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c19e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1a2:	69db      	ldr	r3, [r3, #28]
 800c1a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1a8:	f040 81a9 	bne.w	800c4fe <UART_SetConfig+0x46e>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c1ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	4b6c      	ldr	r3, [pc, #432]	; (800c364 <UART_SetConfig+0x2d4>)
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d006      	beq.n	800c1c6 <UART_SetConfig+0x136>
 800c1b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	4b6a      	ldr	r3, [pc, #424]	; (800c368 <UART_SetConfig+0x2d8>)
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	f040 80d5 	bne.w	800c370 <UART_SetConfig+0x2e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c1c6:	f7fc fd67 	bl	8008c98 <HAL_RCC_GetPCLK2Freq>
 800c1ca:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c1ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c1d2:	461c      	mov	r4, r3
 800c1d4:	f04f 0500 	mov.w	r5, #0
 800c1d8:	4622      	mov	r2, r4
 800c1da:	462b      	mov	r3, r5
 800c1dc:	1891      	adds	r1, r2, r2
 800c1de:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800c1e2:	415b      	adcs	r3, r3
 800c1e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c1e8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c1ec:	1912      	adds	r2, r2, r4
 800c1ee:	eb45 0303 	adc.w	r3, r5, r3
 800c1f2:	f04f 0000 	mov.w	r0, #0
 800c1f6:	f04f 0100 	mov.w	r1, #0
 800c1fa:	00d9      	lsls	r1, r3, #3
 800c1fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c200:	00d0      	lsls	r0, r2, #3
 800c202:	4602      	mov	r2, r0
 800c204:	460b      	mov	r3, r1
 800c206:	1911      	adds	r1, r2, r4
 800c208:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800c20c:	416b      	adcs	r3, r5
 800c20e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	461a      	mov	r2, r3
 800c21a:	f04f 0300 	mov.w	r3, #0
 800c21e:	1891      	adds	r1, r2, r2
 800c220:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800c224:	415b      	adcs	r3, r3
 800c226:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c22a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800c22e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800c232:	f7f4 fce1 	bl	8000bf8 <__aeabi_uldivmod>
 800c236:	4602      	mov	r2, r0
 800c238:	460b      	mov	r3, r1
 800c23a:	4b4c      	ldr	r3, [pc, #304]	; (800c36c <UART_SetConfig+0x2dc>)
 800c23c:	fba3 2302 	umull	r2, r3, r3, r2
 800c240:	095b      	lsrs	r3, r3, #5
 800c242:	011e      	lsls	r6, r3, #4
 800c244:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c248:	461c      	mov	r4, r3
 800c24a:	f04f 0500 	mov.w	r5, #0
 800c24e:	4622      	mov	r2, r4
 800c250:	462b      	mov	r3, r5
 800c252:	1891      	adds	r1, r2, r2
 800c254:	67b9      	str	r1, [r7, #120]	; 0x78
 800c256:	415b      	adcs	r3, r3
 800c258:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c25a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800c25e:	1912      	adds	r2, r2, r4
 800c260:	eb45 0303 	adc.w	r3, r5, r3
 800c264:	f04f 0000 	mov.w	r0, #0
 800c268:	f04f 0100 	mov.w	r1, #0
 800c26c:	00d9      	lsls	r1, r3, #3
 800c26e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c272:	00d0      	lsls	r0, r2, #3
 800c274:	4602      	mov	r2, r0
 800c276:	460b      	mov	r3, r1
 800c278:	1911      	adds	r1, r2, r4
 800c27a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800c27e:	416b      	adcs	r3, r5
 800c280:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	461a      	mov	r2, r3
 800c28c:	f04f 0300 	mov.w	r3, #0
 800c290:	1891      	adds	r1, r2, r2
 800c292:	6739      	str	r1, [r7, #112]	; 0x70
 800c294:	415b      	adcs	r3, r3
 800c296:	677b      	str	r3, [r7, #116]	; 0x74
 800c298:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800c29c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800c2a0:	f7f4 fcaa 	bl	8000bf8 <__aeabi_uldivmod>
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	4b30      	ldr	r3, [pc, #192]	; (800c36c <UART_SetConfig+0x2dc>)
 800c2aa:	fba3 1302 	umull	r1, r3, r3, r2
 800c2ae:	095b      	lsrs	r3, r3, #5
 800c2b0:	2164      	movs	r1, #100	; 0x64
 800c2b2:	fb01 f303 	mul.w	r3, r1, r3
 800c2b6:	1ad3      	subs	r3, r2, r3
 800c2b8:	00db      	lsls	r3, r3, #3
 800c2ba:	3332      	adds	r3, #50	; 0x32
 800c2bc:	4a2b      	ldr	r2, [pc, #172]	; (800c36c <UART_SetConfig+0x2dc>)
 800c2be:	fba2 2303 	umull	r2, r3, r2, r3
 800c2c2:	095b      	lsrs	r3, r3, #5
 800c2c4:	005b      	lsls	r3, r3, #1
 800c2c6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c2ca:	441e      	add	r6, r3
 800c2cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f04f 0100 	mov.w	r1, #0
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	460b      	mov	r3, r1
 800c2da:	1894      	adds	r4, r2, r2
 800c2dc:	66bc      	str	r4, [r7, #104]	; 0x68
 800c2de:	415b      	adcs	r3, r3
 800c2e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c2e2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c2e6:	1812      	adds	r2, r2, r0
 800c2e8:	eb41 0303 	adc.w	r3, r1, r3
 800c2ec:	f04f 0400 	mov.w	r4, #0
 800c2f0:	f04f 0500 	mov.w	r5, #0
 800c2f4:	00dd      	lsls	r5, r3, #3
 800c2f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c2fa:	00d4      	lsls	r4, r2, #3
 800c2fc:	4622      	mov	r2, r4
 800c2fe:	462b      	mov	r3, r5
 800c300:	1814      	adds	r4, r2, r0
 800c302:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800c306:	414b      	adcs	r3, r1
 800c308:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c30c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	461a      	mov	r2, r3
 800c314:	f04f 0300 	mov.w	r3, #0
 800c318:	1891      	adds	r1, r2, r2
 800c31a:	6639      	str	r1, [r7, #96]	; 0x60
 800c31c:	415b      	adcs	r3, r3
 800c31e:	667b      	str	r3, [r7, #100]	; 0x64
 800c320:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800c324:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c328:	f7f4 fc66 	bl	8000bf8 <__aeabi_uldivmod>
 800c32c:	4602      	mov	r2, r0
 800c32e:	460b      	mov	r3, r1
 800c330:	4b0e      	ldr	r3, [pc, #56]	; (800c36c <UART_SetConfig+0x2dc>)
 800c332:	fba3 1302 	umull	r1, r3, r3, r2
 800c336:	095b      	lsrs	r3, r3, #5
 800c338:	2164      	movs	r1, #100	; 0x64
 800c33a:	fb01 f303 	mul.w	r3, r1, r3
 800c33e:	1ad3      	subs	r3, r2, r3
 800c340:	00db      	lsls	r3, r3, #3
 800c342:	3332      	adds	r3, #50	; 0x32
 800c344:	4a09      	ldr	r2, [pc, #36]	; (800c36c <UART_SetConfig+0x2dc>)
 800c346:	fba2 2303 	umull	r2, r3, r2, r3
 800c34a:	095b      	lsrs	r3, r3, #5
 800c34c:	f003 0207 	and.w	r2, r3, #7
 800c350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4432      	add	r2, r6
 800c358:	609a      	str	r2, [r3, #8]
 800c35a:	e277      	b.n	800c84c <UART_SetConfig+0x7bc>
 800c35c:	00a037a0 	.word	0x00a037a0
 800c360:	0800e820 	.word	0x0800e820
 800c364:	40011000 	.word	0x40011000
 800c368:	40011400 	.word	0x40011400
 800c36c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c370:	f7fc fc7e 	bl	8008c70 <HAL_RCC_GetPCLK1Freq>
 800c374:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c378:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c37c:	461c      	mov	r4, r3
 800c37e:	f04f 0500 	mov.w	r5, #0
 800c382:	4622      	mov	r2, r4
 800c384:	462b      	mov	r3, r5
 800c386:	1891      	adds	r1, r2, r2
 800c388:	65b9      	str	r1, [r7, #88]	; 0x58
 800c38a:	415b      	adcs	r3, r3
 800c38c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c38e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c392:	1912      	adds	r2, r2, r4
 800c394:	eb45 0303 	adc.w	r3, r5, r3
 800c398:	f04f 0000 	mov.w	r0, #0
 800c39c:	f04f 0100 	mov.w	r1, #0
 800c3a0:	00d9      	lsls	r1, r3, #3
 800c3a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c3a6:	00d0      	lsls	r0, r2, #3
 800c3a8:	4602      	mov	r2, r0
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	1911      	adds	r1, r2, r4
 800c3ae:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800c3b2:	416b      	adcs	r3, r5
 800c3b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c3b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	461a      	mov	r2, r3
 800c3c0:	f04f 0300 	mov.w	r3, #0
 800c3c4:	1891      	adds	r1, r2, r2
 800c3c6:	6539      	str	r1, [r7, #80]	; 0x50
 800c3c8:	415b      	adcs	r3, r3
 800c3ca:	657b      	str	r3, [r7, #84]	; 0x54
 800c3cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c3d0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800c3d4:	f7f4 fc10 	bl	8000bf8 <__aeabi_uldivmod>
 800c3d8:	4602      	mov	r2, r0
 800c3da:	460b      	mov	r3, r1
 800c3dc:	4bb3      	ldr	r3, [pc, #716]	; (800c6ac <UART_SetConfig+0x61c>)
 800c3de:	fba3 2302 	umull	r2, r3, r3, r2
 800c3e2:	095b      	lsrs	r3, r3, #5
 800c3e4:	011e      	lsls	r6, r3, #4
 800c3e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c3ea:	461c      	mov	r4, r3
 800c3ec:	f04f 0500 	mov.w	r5, #0
 800c3f0:	4622      	mov	r2, r4
 800c3f2:	462b      	mov	r3, r5
 800c3f4:	1891      	adds	r1, r2, r2
 800c3f6:	64b9      	str	r1, [r7, #72]	; 0x48
 800c3f8:	415b      	adcs	r3, r3
 800c3fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c400:	1912      	adds	r2, r2, r4
 800c402:	eb45 0303 	adc.w	r3, r5, r3
 800c406:	f04f 0000 	mov.w	r0, #0
 800c40a:	f04f 0100 	mov.w	r1, #0
 800c40e:	00d9      	lsls	r1, r3, #3
 800c410:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c414:	00d0      	lsls	r0, r2, #3
 800c416:	4602      	mov	r2, r0
 800c418:	460b      	mov	r3, r1
 800c41a:	1911      	adds	r1, r2, r4
 800c41c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800c420:	416b      	adcs	r3, r5
 800c422:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	461a      	mov	r2, r3
 800c42e:	f04f 0300 	mov.w	r3, #0
 800c432:	1891      	adds	r1, r2, r2
 800c434:	6439      	str	r1, [r7, #64]	; 0x40
 800c436:	415b      	adcs	r3, r3
 800c438:	647b      	str	r3, [r7, #68]	; 0x44
 800c43a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c43e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800c442:	f7f4 fbd9 	bl	8000bf8 <__aeabi_uldivmod>
 800c446:	4602      	mov	r2, r0
 800c448:	460b      	mov	r3, r1
 800c44a:	4b98      	ldr	r3, [pc, #608]	; (800c6ac <UART_SetConfig+0x61c>)
 800c44c:	fba3 1302 	umull	r1, r3, r3, r2
 800c450:	095b      	lsrs	r3, r3, #5
 800c452:	2164      	movs	r1, #100	; 0x64
 800c454:	fb01 f303 	mul.w	r3, r1, r3
 800c458:	1ad3      	subs	r3, r2, r3
 800c45a:	00db      	lsls	r3, r3, #3
 800c45c:	3332      	adds	r3, #50	; 0x32
 800c45e:	4a93      	ldr	r2, [pc, #588]	; (800c6ac <UART_SetConfig+0x61c>)
 800c460:	fba2 2303 	umull	r2, r3, r2, r3
 800c464:	095b      	lsrs	r3, r3, #5
 800c466:	005b      	lsls	r3, r3, #1
 800c468:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c46c:	441e      	add	r6, r3
 800c46e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c472:	4618      	mov	r0, r3
 800c474:	f04f 0100 	mov.w	r1, #0
 800c478:	4602      	mov	r2, r0
 800c47a:	460b      	mov	r3, r1
 800c47c:	1894      	adds	r4, r2, r2
 800c47e:	63bc      	str	r4, [r7, #56]	; 0x38
 800c480:	415b      	adcs	r3, r3
 800c482:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c484:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c488:	1812      	adds	r2, r2, r0
 800c48a:	eb41 0303 	adc.w	r3, r1, r3
 800c48e:	f04f 0400 	mov.w	r4, #0
 800c492:	f04f 0500 	mov.w	r5, #0
 800c496:	00dd      	lsls	r5, r3, #3
 800c498:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c49c:	00d4      	lsls	r4, r2, #3
 800c49e:	4622      	mov	r2, r4
 800c4a0:	462b      	mov	r3, r5
 800c4a2:	1814      	adds	r4, r2, r0
 800c4a4:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800c4a8:	414b      	adcs	r3, r1
 800c4aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c4ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	f04f 0300 	mov.w	r3, #0
 800c4ba:	1891      	adds	r1, r2, r2
 800c4bc:	6339      	str	r1, [r7, #48]	; 0x30
 800c4be:	415b      	adcs	r3, r3
 800c4c0:	637b      	str	r3, [r7, #52]	; 0x34
 800c4c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c4c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c4ca:	f7f4 fb95 	bl	8000bf8 <__aeabi_uldivmod>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	4b76      	ldr	r3, [pc, #472]	; (800c6ac <UART_SetConfig+0x61c>)
 800c4d4:	fba3 1302 	umull	r1, r3, r3, r2
 800c4d8:	095b      	lsrs	r3, r3, #5
 800c4da:	2164      	movs	r1, #100	; 0x64
 800c4dc:	fb01 f303 	mul.w	r3, r1, r3
 800c4e0:	1ad3      	subs	r3, r2, r3
 800c4e2:	00db      	lsls	r3, r3, #3
 800c4e4:	3332      	adds	r3, #50	; 0x32
 800c4e6:	4a71      	ldr	r2, [pc, #452]	; (800c6ac <UART_SetConfig+0x61c>)
 800c4e8:	fba2 2303 	umull	r2, r3, r2, r3
 800c4ec:	095b      	lsrs	r3, r3, #5
 800c4ee:	f003 0207 	and.w	r2, r3, #7
 800c4f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4432      	add	r2, r6
 800c4fa:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800c4fc:	e1a6      	b.n	800c84c <UART_SetConfig+0x7bc>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c4fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c502:	681a      	ldr	r2, [r3, #0]
 800c504:	4b6a      	ldr	r3, [pc, #424]	; (800c6b0 <UART_SetConfig+0x620>)
 800c506:	429a      	cmp	r2, r3
 800c508:	d006      	beq.n	800c518 <UART_SetConfig+0x488>
 800c50a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	4b68      	ldr	r3, [pc, #416]	; (800c6b4 <UART_SetConfig+0x624>)
 800c512:	429a      	cmp	r2, r3
 800c514:	f040 80d0 	bne.w	800c6b8 <UART_SetConfig+0x628>
      pclk = HAL_RCC_GetPCLK2Freq();
 800c518:	f7fc fbbe 	bl	8008c98 <HAL_RCC_GetPCLK2Freq>
 800c51c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c520:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c524:	461c      	mov	r4, r3
 800c526:	f04f 0500 	mov.w	r5, #0
 800c52a:	4622      	mov	r2, r4
 800c52c:	462b      	mov	r3, r5
 800c52e:	1891      	adds	r1, r2, r2
 800c530:	62b9      	str	r1, [r7, #40]	; 0x28
 800c532:	415b      	adcs	r3, r3
 800c534:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c536:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c53a:	1912      	adds	r2, r2, r4
 800c53c:	eb45 0303 	adc.w	r3, r5, r3
 800c540:	f04f 0000 	mov.w	r0, #0
 800c544:	f04f 0100 	mov.w	r1, #0
 800c548:	00d9      	lsls	r1, r3, #3
 800c54a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c54e:	00d0      	lsls	r0, r2, #3
 800c550:	4602      	mov	r2, r0
 800c552:	460b      	mov	r3, r1
 800c554:	eb12 0a04 	adds.w	sl, r2, r4
 800c558:	eb43 0b05 	adc.w	fp, r3, r5
 800c55c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c560:	685b      	ldr	r3, [r3, #4]
 800c562:	4618      	mov	r0, r3
 800c564:	f04f 0100 	mov.w	r1, #0
 800c568:	f04f 0200 	mov.w	r2, #0
 800c56c:	f04f 0300 	mov.w	r3, #0
 800c570:	008b      	lsls	r3, r1, #2
 800c572:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c576:	0082      	lsls	r2, r0, #2
 800c578:	4650      	mov	r0, sl
 800c57a:	4659      	mov	r1, fp
 800c57c:	f7f4 fb3c 	bl	8000bf8 <__aeabi_uldivmod>
 800c580:	4602      	mov	r2, r0
 800c582:	460b      	mov	r3, r1
 800c584:	4b49      	ldr	r3, [pc, #292]	; (800c6ac <UART_SetConfig+0x61c>)
 800c586:	fba3 2302 	umull	r2, r3, r3, r2
 800c58a:	095b      	lsrs	r3, r3, #5
 800c58c:	011e      	lsls	r6, r3, #4
 800c58e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c592:	4618      	mov	r0, r3
 800c594:	f04f 0100 	mov.w	r1, #0
 800c598:	4602      	mov	r2, r0
 800c59a:	460b      	mov	r3, r1
 800c59c:	1894      	adds	r4, r2, r2
 800c59e:	623c      	str	r4, [r7, #32]
 800c5a0:	415b      	adcs	r3, r3
 800c5a2:	627b      	str	r3, [r7, #36]	; 0x24
 800c5a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c5a8:	1812      	adds	r2, r2, r0
 800c5aa:	eb41 0303 	adc.w	r3, r1, r3
 800c5ae:	f04f 0400 	mov.w	r4, #0
 800c5b2:	f04f 0500 	mov.w	r5, #0
 800c5b6:	00dd      	lsls	r5, r3, #3
 800c5b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c5bc:	00d4      	lsls	r4, r2, #3
 800c5be:	4622      	mov	r2, r4
 800c5c0:	462b      	mov	r3, r5
 800c5c2:	1814      	adds	r4, r2, r0
 800c5c4:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800c5c8:	414b      	adcs	r3, r1
 800c5ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c5ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f04f 0100 	mov.w	r1, #0
 800c5da:	f04f 0200 	mov.w	r2, #0
 800c5de:	f04f 0300 	mov.w	r3, #0
 800c5e2:	008b      	lsls	r3, r1, #2
 800c5e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c5e8:	0082      	lsls	r2, r0, #2
 800c5ea:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800c5ee:	f7f4 fb03 	bl	8000bf8 <__aeabi_uldivmod>
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	460b      	mov	r3, r1
 800c5f6:	4b2d      	ldr	r3, [pc, #180]	; (800c6ac <UART_SetConfig+0x61c>)
 800c5f8:	fba3 1302 	umull	r1, r3, r3, r2
 800c5fc:	095b      	lsrs	r3, r3, #5
 800c5fe:	2164      	movs	r1, #100	; 0x64
 800c600:	fb01 f303 	mul.w	r3, r1, r3
 800c604:	1ad3      	subs	r3, r2, r3
 800c606:	011b      	lsls	r3, r3, #4
 800c608:	3332      	adds	r3, #50	; 0x32
 800c60a:	4a28      	ldr	r2, [pc, #160]	; (800c6ac <UART_SetConfig+0x61c>)
 800c60c:	fba2 2303 	umull	r2, r3, r2, r3
 800c610:	095b      	lsrs	r3, r3, #5
 800c612:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c616:	441e      	add	r6, r3
 800c618:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c61c:	4618      	mov	r0, r3
 800c61e:	f04f 0100 	mov.w	r1, #0
 800c622:	4602      	mov	r2, r0
 800c624:	460b      	mov	r3, r1
 800c626:	1894      	adds	r4, r2, r2
 800c628:	61bc      	str	r4, [r7, #24]
 800c62a:	415b      	adcs	r3, r3
 800c62c:	61fb      	str	r3, [r7, #28]
 800c62e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c632:	1812      	adds	r2, r2, r0
 800c634:	eb41 0303 	adc.w	r3, r1, r3
 800c638:	f04f 0400 	mov.w	r4, #0
 800c63c:	f04f 0500 	mov.w	r5, #0
 800c640:	00dd      	lsls	r5, r3, #3
 800c642:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c646:	00d4      	lsls	r4, r2, #3
 800c648:	4622      	mov	r2, r4
 800c64a:	462b      	mov	r3, r5
 800c64c:	1814      	adds	r4, r2, r0
 800c64e:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800c652:	414b      	adcs	r3, r1
 800c654:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	4618      	mov	r0, r3
 800c660:	f04f 0100 	mov.w	r1, #0
 800c664:	f04f 0200 	mov.w	r2, #0
 800c668:	f04f 0300 	mov.w	r3, #0
 800c66c:	008b      	lsls	r3, r1, #2
 800c66e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c672:	0082      	lsls	r2, r0, #2
 800c674:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800c678:	f7f4 fabe 	bl	8000bf8 <__aeabi_uldivmod>
 800c67c:	4602      	mov	r2, r0
 800c67e:	460b      	mov	r3, r1
 800c680:	4b0a      	ldr	r3, [pc, #40]	; (800c6ac <UART_SetConfig+0x61c>)
 800c682:	fba3 1302 	umull	r1, r3, r3, r2
 800c686:	095b      	lsrs	r3, r3, #5
 800c688:	2164      	movs	r1, #100	; 0x64
 800c68a:	fb01 f303 	mul.w	r3, r1, r3
 800c68e:	1ad3      	subs	r3, r2, r3
 800c690:	011b      	lsls	r3, r3, #4
 800c692:	3332      	adds	r3, #50	; 0x32
 800c694:	4a05      	ldr	r2, [pc, #20]	; (800c6ac <UART_SetConfig+0x61c>)
 800c696:	fba2 2303 	umull	r2, r3, r2, r3
 800c69a:	095b      	lsrs	r3, r3, #5
 800c69c:	f003 020f 	and.w	r2, r3, #15
 800c6a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	4432      	add	r2, r6
 800c6a8:	609a      	str	r2, [r3, #8]
 800c6aa:	e0cf      	b.n	800c84c <UART_SetConfig+0x7bc>
 800c6ac:	51eb851f 	.word	0x51eb851f
 800c6b0:	40011000 	.word	0x40011000
 800c6b4:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 800c6b8:	f7fc fada 	bl	8008c70 <HAL_RCC_GetPCLK1Freq>
 800c6bc:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c6c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c6c4:	461c      	mov	r4, r3
 800c6c6:	f04f 0500 	mov.w	r5, #0
 800c6ca:	4622      	mov	r2, r4
 800c6cc:	462b      	mov	r3, r5
 800c6ce:	1891      	adds	r1, r2, r2
 800c6d0:	6139      	str	r1, [r7, #16]
 800c6d2:	415b      	adcs	r3, r3
 800c6d4:	617b      	str	r3, [r7, #20]
 800c6d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c6da:	1912      	adds	r2, r2, r4
 800c6dc:	eb45 0303 	adc.w	r3, r5, r3
 800c6e0:	f04f 0000 	mov.w	r0, #0
 800c6e4:	f04f 0100 	mov.w	r1, #0
 800c6e8:	00d9      	lsls	r1, r3, #3
 800c6ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c6ee:	00d0      	lsls	r0, r2, #3
 800c6f0:	4602      	mov	r2, r0
 800c6f2:	460b      	mov	r3, r1
 800c6f4:	eb12 0804 	adds.w	r8, r2, r4
 800c6f8:	eb43 0905 	adc.w	r9, r3, r5
 800c6fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	4618      	mov	r0, r3
 800c704:	f04f 0100 	mov.w	r1, #0
 800c708:	f04f 0200 	mov.w	r2, #0
 800c70c:	f04f 0300 	mov.w	r3, #0
 800c710:	008b      	lsls	r3, r1, #2
 800c712:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c716:	0082      	lsls	r2, r0, #2
 800c718:	4640      	mov	r0, r8
 800c71a:	4649      	mov	r1, r9
 800c71c:	f7f4 fa6c 	bl	8000bf8 <__aeabi_uldivmod>
 800c720:	4602      	mov	r2, r0
 800c722:	460b      	mov	r3, r1
 800c724:	4b4c      	ldr	r3, [pc, #304]	; (800c858 <UART_SetConfig+0x7c8>)
 800c726:	fba3 2302 	umull	r2, r3, r3, r2
 800c72a:	095b      	lsrs	r3, r3, #5
 800c72c:	011e      	lsls	r6, r3, #4
 800c72e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c732:	4618      	mov	r0, r3
 800c734:	f04f 0100 	mov.w	r1, #0
 800c738:	4602      	mov	r2, r0
 800c73a:	460b      	mov	r3, r1
 800c73c:	1894      	adds	r4, r2, r2
 800c73e:	60bc      	str	r4, [r7, #8]
 800c740:	415b      	adcs	r3, r3
 800c742:	60fb      	str	r3, [r7, #12]
 800c744:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c748:	1812      	adds	r2, r2, r0
 800c74a:	eb41 0303 	adc.w	r3, r1, r3
 800c74e:	f04f 0400 	mov.w	r4, #0
 800c752:	f04f 0500 	mov.w	r5, #0
 800c756:	00dd      	lsls	r5, r3, #3
 800c758:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c75c:	00d4      	lsls	r4, r2, #3
 800c75e:	4622      	mov	r2, r4
 800c760:	462b      	mov	r3, r5
 800c762:	1814      	adds	r4, r2, r0
 800c764:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800c768:	414b      	adcs	r3, r1
 800c76a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c76e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c772:	685b      	ldr	r3, [r3, #4]
 800c774:	4618      	mov	r0, r3
 800c776:	f04f 0100 	mov.w	r1, #0
 800c77a:	f04f 0200 	mov.w	r2, #0
 800c77e:	f04f 0300 	mov.w	r3, #0
 800c782:	008b      	lsls	r3, r1, #2
 800c784:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c788:	0082      	lsls	r2, r0, #2
 800c78a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c78e:	f7f4 fa33 	bl	8000bf8 <__aeabi_uldivmod>
 800c792:	4602      	mov	r2, r0
 800c794:	460b      	mov	r3, r1
 800c796:	4b30      	ldr	r3, [pc, #192]	; (800c858 <UART_SetConfig+0x7c8>)
 800c798:	fba3 1302 	umull	r1, r3, r3, r2
 800c79c:	095b      	lsrs	r3, r3, #5
 800c79e:	2164      	movs	r1, #100	; 0x64
 800c7a0:	fb01 f303 	mul.w	r3, r1, r3
 800c7a4:	1ad3      	subs	r3, r2, r3
 800c7a6:	011b      	lsls	r3, r3, #4
 800c7a8:	3332      	adds	r3, #50	; 0x32
 800c7aa:	4a2b      	ldr	r2, [pc, #172]	; (800c858 <UART_SetConfig+0x7c8>)
 800c7ac:	fba2 2303 	umull	r2, r3, r2, r3
 800c7b0:	095b      	lsrs	r3, r3, #5
 800c7b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c7b6:	441e      	add	r6, r3
 800c7b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f04f 0100 	mov.w	r1, #0
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	1894      	adds	r4, r2, r2
 800c7c8:	603c      	str	r4, [r7, #0]
 800c7ca:	415b      	adcs	r3, r3
 800c7cc:	607b      	str	r3, [r7, #4]
 800c7ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7d2:	1812      	adds	r2, r2, r0
 800c7d4:	eb41 0303 	adc.w	r3, r1, r3
 800c7d8:	f04f 0400 	mov.w	r4, #0
 800c7dc:	f04f 0500 	mov.w	r5, #0
 800c7e0:	00dd      	lsls	r5, r3, #3
 800c7e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c7e6:	00d4      	lsls	r4, r2, #3
 800c7e8:	4622      	mov	r2, r4
 800c7ea:	462b      	mov	r3, r5
 800c7ec:	1814      	adds	r4, r2, r0
 800c7ee:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800c7f2:	414b      	adcs	r3, r1
 800c7f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c7f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	4618      	mov	r0, r3
 800c800:	f04f 0100 	mov.w	r1, #0
 800c804:	f04f 0200 	mov.w	r2, #0
 800c808:	f04f 0300 	mov.w	r3, #0
 800c80c:	008b      	lsls	r3, r1, #2
 800c80e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c812:	0082      	lsls	r2, r0, #2
 800c814:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800c818:	f7f4 f9ee 	bl	8000bf8 <__aeabi_uldivmod>
 800c81c:	4602      	mov	r2, r0
 800c81e:	460b      	mov	r3, r1
 800c820:	4b0d      	ldr	r3, [pc, #52]	; (800c858 <UART_SetConfig+0x7c8>)
 800c822:	fba3 1302 	umull	r1, r3, r3, r2
 800c826:	095b      	lsrs	r3, r3, #5
 800c828:	2164      	movs	r1, #100	; 0x64
 800c82a:	fb01 f303 	mul.w	r3, r1, r3
 800c82e:	1ad3      	subs	r3, r2, r3
 800c830:	011b      	lsls	r3, r3, #4
 800c832:	3332      	adds	r3, #50	; 0x32
 800c834:	4a08      	ldr	r2, [pc, #32]	; (800c858 <UART_SetConfig+0x7c8>)
 800c836:	fba2 2303 	umull	r2, r3, r2, r3
 800c83a:	095b      	lsrs	r3, r3, #5
 800c83c:	f003 020f 	and.w	r2, r3, #15
 800c840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	4432      	add	r2, r6
 800c848:	609a      	str	r2, [r3, #8]
}
 800c84a:	e7ff      	b.n	800c84c <UART_SetConfig+0x7bc>
 800c84c:	bf00      	nop
 800c84e:	37f4      	adds	r7, #244	; 0xf4
 800c850:	46bd      	mov	sp, r7
 800c852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c856:	bf00      	nop
 800c858:	51eb851f 	.word	0x51eb851f

0800c85c <__errno>:
 800c85c:	4b01      	ldr	r3, [pc, #4]	; (800c864 <__errno+0x8>)
 800c85e:	6818      	ldr	r0, [r3, #0]
 800c860:	4770      	bx	lr
 800c862:	bf00      	nop
 800c864:	2000020c 	.word	0x2000020c

0800c868 <__libc_init_array>:
 800c868:	b570      	push	{r4, r5, r6, lr}
 800c86a:	4d0d      	ldr	r5, [pc, #52]	; (800c8a0 <__libc_init_array+0x38>)
 800c86c:	4c0d      	ldr	r4, [pc, #52]	; (800c8a4 <__libc_init_array+0x3c>)
 800c86e:	1b64      	subs	r4, r4, r5
 800c870:	10a4      	asrs	r4, r4, #2
 800c872:	2600      	movs	r6, #0
 800c874:	42a6      	cmp	r6, r4
 800c876:	d109      	bne.n	800c88c <__libc_init_array+0x24>
 800c878:	4d0b      	ldr	r5, [pc, #44]	; (800c8a8 <__libc_init_array+0x40>)
 800c87a:	4c0c      	ldr	r4, [pc, #48]	; (800c8ac <__libc_init_array+0x44>)
 800c87c:	f001 fea2 	bl	800e5c4 <_init>
 800c880:	1b64      	subs	r4, r4, r5
 800c882:	10a4      	asrs	r4, r4, #2
 800c884:	2600      	movs	r6, #0
 800c886:	42a6      	cmp	r6, r4
 800c888:	d105      	bne.n	800c896 <__libc_init_array+0x2e>
 800c88a:	bd70      	pop	{r4, r5, r6, pc}
 800c88c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c890:	4798      	blx	r3
 800c892:	3601      	adds	r6, #1
 800c894:	e7ee      	b.n	800c874 <__libc_init_array+0xc>
 800c896:	f855 3b04 	ldr.w	r3, [r5], #4
 800c89a:	4798      	blx	r3
 800c89c:	3601      	adds	r6, #1
 800c89e:	e7f2      	b.n	800c886 <__libc_init_array+0x1e>
 800c8a0:	0800eb08 	.word	0x0800eb08
 800c8a4:	0800eb08 	.word	0x0800eb08
 800c8a8:	0800eb08 	.word	0x0800eb08
 800c8ac:	0800eb0c 	.word	0x0800eb0c

0800c8b0 <memset>:
 800c8b0:	4402      	add	r2, r0
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d100      	bne.n	800c8ba <memset+0xa>
 800c8b8:	4770      	bx	lr
 800c8ba:	f803 1b01 	strb.w	r1, [r3], #1
 800c8be:	e7f9      	b.n	800c8b4 <memset+0x4>

0800c8c0 <atan>:
 800c8c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c4:	ec55 4b10 	vmov	r4, r5, d0
 800c8c8:	4bc3      	ldr	r3, [pc, #780]	; (800cbd8 <atan+0x318>)
 800c8ca:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c8ce:	429e      	cmp	r6, r3
 800c8d0:	46ab      	mov	fp, r5
 800c8d2:	dd18      	ble.n	800c906 <atan+0x46>
 800c8d4:	4bc1      	ldr	r3, [pc, #772]	; (800cbdc <atan+0x31c>)
 800c8d6:	429e      	cmp	r6, r3
 800c8d8:	dc01      	bgt.n	800c8de <atan+0x1e>
 800c8da:	d109      	bne.n	800c8f0 <atan+0x30>
 800c8dc:	b144      	cbz	r4, 800c8f0 <atan+0x30>
 800c8de:	4622      	mov	r2, r4
 800c8e0:	462b      	mov	r3, r5
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	4629      	mov	r1, r5
 800c8e6:	f7f3 fc89 	bl	80001fc <__adddf3>
 800c8ea:	4604      	mov	r4, r0
 800c8ec:	460d      	mov	r5, r1
 800c8ee:	e006      	b.n	800c8fe <atan+0x3e>
 800c8f0:	f1bb 0f00 	cmp.w	fp, #0
 800c8f4:	f300 8131 	bgt.w	800cb5a <atan+0x29a>
 800c8f8:	a59b      	add	r5, pc, #620	; (adr r5, 800cb68 <atan+0x2a8>)
 800c8fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c8fe:	ec45 4b10 	vmov	d0, r4, r5
 800c902:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c906:	4bb6      	ldr	r3, [pc, #728]	; (800cbe0 <atan+0x320>)
 800c908:	429e      	cmp	r6, r3
 800c90a:	dc14      	bgt.n	800c936 <atan+0x76>
 800c90c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c910:	429e      	cmp	r6, r3
 800c912:	dc0d      	bgt.n	800c930 <atan+0x70>
 800c914:	a396      	add	r3, pc, #600	; (adr r3, 800cb70 <atan+0x2b0>)
 800c916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91a:	ee10 0a10 	vmov	r0, s0
 800c91e:	4629      	mov	r1, r5
 800c920:	f7f3 fc6c 	bl	80001fc <__adddf3>
 800c924:	4baf      	ldr	r3, [pc, #700]	; (800cbe4 <atan+0x324>)
 800c926:	2200      	movs	r2, #0
 800c928:	f7f4 f8ae 	bl	8000a88 <__aeabi_dcmpgt>
 800c92c:	2800      	cmp	r0, #0
 800c92e:	d1e6      	bne.n	800c8fe <atan+0x3e>
 800c930:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c934:	e02b      	b.n	800c98e <atan+0xce>
 800c936:	f000 f9b3 	bl	800cca0 <fabs>
 800c93a:	4bab      	ldr	r3, [pc, #684]	; (800cbe8 <atan+0x328>)
 800c93c:	429e      	cmp	r6, r3
 800c93e:	ec55 4b10 	vmov	r4, r5, d0
 800c942:	f300 80bf 	bgt.w	800cac4 <atan+0x204>
 800c946:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c94a:	429e      	cmp	r6, r3
 800c94c:	f300 80a0 	bgt.w	800ca90 <atan+0x1d0>
 800c950:	ee10 2a10 	vmov	r2, s0
 800c954:	ee10 0a10 	vmov	r0, s0
 800c958:	462b      	mov	r3, r5
 800c95a:	4629      	mov	r1, r5
 800c95c:	f7f3 fc4e 	bl	80001fc <__adddf3>
 800c960:	4ba0      	ldr	r3, [pc, #640]	; (800cbe4 <atan+0x324>)
 800c962:	2200      	movs	r2, #0
 800c964:	f7f3 fc48 	bl	80001f8 <__aeabi_dsub>
 800c968:	2200      	movs	r2, #0
 800c96a:	4606      	mov	r6, r0
 800c96c:	460f      	mov	r7, r1
 800c96e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c972:	4620      	mov	r0, r4
 800c974:	4629      	mov	r1, r5
 800c976:	f7f3 fc41 	bl	80001fc <__adddf3>
 800c97a:	4602      	mov	r2, r0
 800c97c:	460b      	mov	r3, r1
 800c97e:	4630      	mov	r0, r6
 800c980:	4639      	mov	r1, r7
 800c982:	f7f3 ff1b 	bl	80007bc <__aeabi_ddiv>
 800c986:	f04f 0a00 	mov.w	sl, #0
 800c98a:	4604      	mov	r4, r0
 800c98c:	460d      	mov	r5, r1
 800c98e:	4622      	mov	r2, r4
 800c990:	462b      	mov	r3, r5
 800c992:	4620      	mov	r0, r4
 800c994:	4629      	mov	r1, r5
 800c996:	f7f3 fde7 	bl	8000568 <__aeabi_dmul>
 800c99a:	4602      	mov	r2, r0
 800c99c:	460b      	mov	r3, r1
 800c99e:	4680      	mov	r8, r0
 800c9a0:	4689      	mov	r9, r1
 800c9a2:	f7f3 fde1 	bl	8000568 <__aeabi_dmul>
 800c9a6:	a374      	add	r3, pc, #464	; (adr r3, 800cb78 <atan+0x2b8>)
 800c9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ac:	4606      	mov	r6, r0
 800c9ae:	460f      	mov	r7, r1
 800c9b0:	f7f3 fdda 	bl	8000568 <__aeabi_dmul>
 800c9b4:	a372      	add	r3, pc, #456	; (adr r3, 800cb80 <atan+0x2c0>)
 800c9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ba:	f7f3 fc1f 	bl	80001fc <__adddf3>
 800c9be:	4632      	mov	r2, r6
 800c9c0:	463b      	mov	r3, r7
 800c9c2:	f7f3 fdd1 	bl	8000568 <__aeabi_dmul>
 800c9c6:	a370      	add	r3, pc, #448	; (adr r3, 800cb88 <atan+0x2c8>)
 800c9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9cc:	f7f3 fc16 	bl	80001fc <__adddf3>
 800c9d0:	4632      	mov	r2, r6
 800c9d2:	463b      	mov	r3, r7
 800c9d4:	f7f3 fdc8 	bl	8000568 <__aeabi_dmul>
 800c9d8:	a36d      	add	r3, pc, #436	; (adr r3, 800cb90 <atan+0x2d0>)
 800c9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9de:	f7f3 fc0d 	bl	80001fc <__adddf3>
 800c9e2:	4632      	mov	r2, r6
 800c9e4:	463b      	mov	r3, r7
 800c9e6:	f7f3 fdbf 	bl	8000568 <__aeabi_dmul>
 800c9ea:	a36b      	add	r3, pc, #428	; (adr r3, 800cb98 <atan+0x2d8>)
 800c9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f0:	f7f3 fc04 	bl	80001fc <__adddf3>
 800c9f4:	4632      	mov	r2, r6
 800c9f6:	463b      	mov	r3, r7
 800c9f8:	f7f3 fdb6 	bl	8000568 <__aeabi_dmul>
 800c9fc:	a368      	add	r3, pc, #416	; (adr r3, 800cba0 <atan+0x2e0>)
 800c9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca02:	f7f3 fbfb 	bl	80001fc <__adddf3>
 800ca06:	4642      	mov	r2, r8
 800ca08:	464b      	mov	r3, r9
 800ca0a:	f7f3 fdad 	bl	8000568 <__aeabi_dmul>
 800ca0e:	a366      	add	r3, pc, #408	; (adr r3, 800cba8 <atan+0x2e8>)
 800ca10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca14:	4680      	mov	r8, r0
 800ca16:	4689      	mov	r9, r1
 800ca18:	4630      	mov	r0, r6
 800ca1a:	4639      	mov	r1, r7
 800ca1c:	f7f3 fda4 	bl	8000568 <__aeabi_dmul>
 800ca20:	a363      	add	r3, pc, #396	; (adr r3, 800cbb0 <atan+0x2f0>)
 800ca22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca26:	f7f3 fbe7 	bl	80001f8 <__aeabi_dsub>
 800ca2a:	4632      	mov	r2, r6
 800ca2c:	463b      	mov	r3, r7
 800ca2e:	f7f3 fd9b 	bl	8000568 <__aeabi_dmul>
 800ca32:	a361      	add	r3, pc, #388	; (adr r3, 800cbb8 <atan+0x2f8>)
 800ca34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca38:	f7f3 fbde 	bl	80001f8 <__aeabi_dsub>
 800ca3c:	4632      	mov	r2, r6
 800ca3e:	463b      	mov	r3, r7
 800ca40:	f7f3 fd92 	bl	8000568 <__aeabi_dmul>
 800ca44:	a35e      	add	r3, pc, #376	; (adr r3, 800cbc0 <atan+0x300>)
 800ca46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4a:	f7f3 fbd5 	bl	80001f8 <__aeabi_dsub>
 800ca4e:	4632      	mov	r2, r6
 800ca50:	463b      	mov	r3, r7
 800ca52:	f7f3 fd89 	bl	8000568 <__aeabi_dmul>
 800ca56:	a35c      	add	r3, pc, #368	; (adr r3, 800cbc8 <atan+0x308>)
 800ca58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5c:	f7f3 fbcc 	bl	80001f8 <__aeabi_dsub>
 800ca60:	4632      	mov	r2, r6
 800ca62:	463b      	mov	r3, r7
 800ca64:	f7f3 fd80 	bl	8000568 <__aeabi_dmul>
 800ca68:	4602      	mov	r2, r0
 800ca6a:	460b      	mov	r3, r1
 800ca6c:	4640      	mov	r0, r8
 800ca6e:	4649      	mov	r1, r9
 800ca70:	f7f3 fbc4 	bl	80001fc <__adddf3>
 800ca74:	4622      	mov	r2, r4
 800ca76:	462b      	mov	r3, r5
 800ca78:	f7f3 fd76 	bl	8000568 <__aeabi_dmul>
 800ca7c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800ca80:	4602      	mov	r2, r0
 800ca82:	460b      	mov	r3, r1
 800ca84:	d14b      	bne.n	800cb1e <atan+0x25e>
 800ca86:	4620      	mov	r0, r4
 800ca88:	4629      	mov	r1, r5
 800ca8a:	f7f3 fbb5 	bl	80001f8 <__aeabi_dsub>
 800ca8e:	e72c      	b.n	800c8ea <atan+0x2a>
 800ca90:	ee10 0a10 	vmov	r0, s0
 800ca94:	4b53      	ldr	r3, [pc, #332]	; (800cbe4 <atan+0x324>)
 800ca96:	2200      	movs	r2, #0
 800ca98:	4629      	mov	r1, r5
 800ca9a:	f7f3 fbad 	bl	80001f8 <__aeabi_dsub>
 800ca9e:	4b51      	ldr	r3, [pc, #324]	; (800cbe4 <atan+0x324>)
 800caa0:	4606      	mov	r6, r0
 800caa2:	460f      	mov	r7, r1
 800caa4:	2200      	movs	r2, #0
 800caa6:	4620      	mov	r0, r4
 800caa8:	4629      	mov	r1, r5
 800caaa:	f7f3 fba7 	bl	80001fc <__adddf3>
 800caae:	4602      	mov	r2, r0
 800cab0:	460b      	mov	r3, r1
 800cab2:	4630      	mov	r0, r6
 800cab4:	4639      	mov	r1, r7
 800cab6:	f7f3 fe81 	bl	80007bc <__aeabi_ddiv>
 800caba:	f04f 0a01 	mov.w	sl, #1
 800cabe:	4604      	mov	r4, r0
 800cac0:	460d      	mov	r5, r1
 800cac2:	e764      	b.n	800c98e <atan+0xce>
 800cac4:	4b49      	ldr	r3, [pc, #292]	; (800cbec <atan+0x32c>)
 800cac6:	429e      	cmp	r6, r3
 800cac8:	da1d      	bge.n	800cb06 <atan+0x246>
 800caca:	ee10 0a10 	vmov	r0, s0
 800cace:	4b48      	ldr	r3, [pc, #288]	; (800cbf0 <atan+0x330>)
 800cad0:	2200      	movs	r2, #0
 800cad2:	4629      	mov	r1, r5
 800cad4:	f7f3 fb90 	bl	80001f8 <__aeabi_dsub>
 800cad8:	4b45      	ldr	r3, [pc, #276]	; (800cbf0 <atan+0x330>)
 800cada:	4606      	mov	r6, r0
 800cadc:	460f      	mov	r7, r1
 800cade:	2200      	movs	r2, #0
 800cae0:	4620      	mov	r0, r4
 800cae2:	4629      	mov	r1, r5
 800cae4:	f7f3 fd40 	bl	8000568 <__aeabi_dmul>
 800cae8:	4b3e      	ldr	r3, [pc, #248]	; (800cbe4 <atan+0x324>)
 800caea:	2200      	movs	r2, #0
 800caec:	f7f3 fb86 	bl	80001fc <__adddf3>
 800caf0:	4602      	mov	r2, r0
 800caf2:	460b      	mov	r3, r1
 800caf4:	4630      	mov	r0, r6
 800caf6:	4639      	mov	r1, r7
 800caf8:	f7f3 fe60 	bl	80007bc <__aeabi_ddiv>
 800cafc:	f04f 0a02 	mov.w	sl, #2
 800cb00:	4604      	mov	r4, r0
 800cb02:	460d      	mov	r5, r1
 800cb04:	e743      	b.n	800c98e <atan+0xce>
 800cb06:	462b      	mov	r3, r5
 800cb08:	ee10 2a10 	vmov	r2, s0
 800cb0c:	4939      	ldr	r1, [pc, #228]	; (800cbf4 <atan+0x334>)
 800cb0e:	2000      	movs	r0, #0
 800cb10:	f7f3 fe54 	bl	80007bc <__aeabi_ddiv>
 800cb14:	f04f 0a03 	mov.w	sl, #3
 800cb18:	4604      	mov	r4, r0
 800cb1a:	460d      	mov	r5, r1
 800cb1c:	e737      	b.n	800c98e <atan+0xce>
 800cb1e:	4b36      	ldr	r3, [pc, #216]	; (800cbf8 <atan+0x338>)
 800cb20:	4e36      	ldr	r6, [pc, #216]	; (800cbfc <atan+0x33c>)
 800cb22:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cb26:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800cb2a:	e9da 2300 	ldrd	r2, r3, [sl]
 800cb2e:	f7f3 fb63 	bl	80001f8 <__aeabi_dsub>
 800cb32:	4622      	mov	r2, r4
 800cb34:	462b      	mov	r3, r5
 800cb36:	f7f3 fb5f 	bl	80001f8 <__aeabi_dsub>
 800cb3a:	4602      	mov	r2, r0
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cb42:	f7f3 fb59 	bl	80001f8 <__aeabi_dsub>
 800cb46:	f1bb 0f00 	cmp.w	fp, #0
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	460d      	mov	r5, r1
 800cb4e:	f6bf aed6 	bge.w	800c8fe <atan+0x3e>
 800cb52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb56:	461d      	mov	r5, r3
 800cb58:	e6d1      	b.n	800c8fe <atan+0x3e>
 800cb5a:	a51d      	add	r5, pc, #116	; (adr r5, 800cbd0 <atan+0x310>)
 800cb5c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cb60:	e6cd      	b.n	800c8fe <atan+0x3e>
 800cb62:	bf00      	nop
 800cb64:	f3af 8000 	nop.w
 800cb68:	54442d18 	.word	0x54442d18
 800cb6c:	bff921fb 	.word	0xbff921fb
 800cb70:	8800759c 	.word	0x8800759c
 800cb74:	7e37e43c 	.word	0x7e37e43c
 800cb78:	e322da11 	.word	0xe322da11
 800cb7c:	3f90ad3a 	.word	0x3f90ad3a
 800cb80:	24760deb 	.word	0x24760deb
 800cb84:	3fa97b4b 	.word	0x3fa97b4b
 800cb88:	a0d03d51 	.word	0xa0d03d51
 800cb8c:	3fb10d66 	.word	0x3fb10d66
 800cb90:	c54c206e 	.word	0xc54c206e
 800cb94:	3fb745cd 	.word	0x3fb745cd
 800cb98:	920083ff 	.word	0x920083ff
 800cb9c:	3fc24924 	.word	0x3fc24924
 800cba0:	5555550d 	.word	0x5555550d
 800cba4:	3fd55555 	.word	0x3fd55555
 800cba8:	2c6a6c2f 	.word	0x2c6a6c2f
 800cbac:	bfa2b444 	.word	0xbfa2b444
 800cbb0:	52defd9a 	.word	0x52defd9a
 800cbb4:	3fadde2d 	.word	0x3fadde2d
 800cbb8:	af749a6d 	.word	0xaf749a6d
 800cbbc:	3fb3b0f2 	.word	0x3fb3b0f2
 800cbc0:	fe231671 	.word	0xfe231671
 800cbc4:	3fbc71c6 	.word	0x3fbc71c6
 800cbc8:	9998ebc4 	.word	0x9998ebc4
 800cbcc:	3fc99999 	.word	0x3fc99999
 800cbd0:	54442d18 	.word	0x54442d18
 800cbd4:	3ff921fb 	.word	0x3ff921fb
 800cbd8:	440fffff 	.word	0x440fffff
 800cbdc:	7ff00000 	.word	0x7ff00000
 800cbe0:	3fdbffff 	.word	0x3fdbffff
 800cbe4:	3ff00000 	.word	0x3ff00000
 800cbe8:	3ff2ffff 	.word	0x3ff2ffff
 800cbec:	40038000 	.word	0x40038000
 800cbf0:	3ff80000 	.word	0x3ff80000
 800cbf4:	bff00000 	.word	0xbff00000
 800cbf8:	0800e8d0 	.word	0x0800e8d0
 800cbfc:	0800e8b0 	.word	0x0800e8b0

0800cc00 <cos>:
 800cc00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc02:	ec53 2b10 	vmov	r2, r3, d0
 800cc06:	4824      	ldr	r0, [pc, #144]	; (800cc98 <cos+0x98>)
 800cc08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cc0c:	4281      	cmp	r1, r0
 800cc0e:	dc06      	bgt.n	800cc1e <cos+0x1e>
 800cc10:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800cc90 <cos+0x90>
 800cc14:	f000 ff00 	bl	800da18 <__kernel_cos>
 800cc18:	ec51 0b10 	vmov	r0, r1, d0
 800cc1c:	e007      	b.n	800cc2e <cos+0x2e>
 800cc1e:	481f      	ldr	r0, [pc, #124]	; (800cc9c <cos+0x9c>)
 800cc20:	4281      	cmp	r1, r0
 800cc22:	dd09      	ble.n	800cc38 <cos+0x38>
 800cc24:	ee10 0a10 	vmov	r0, s0
 800cc28:	4619      	mov	r1, r3
 800cc2a:	f7f3 fae5 	bl	80001f8 <__aeabi_dsub>
 800cc2e:	ec41 0b10 	vmov	d0, r0, r1
 800cc32:	b005      	add	sp, #20
 800cc34:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc38:	4668      	mov	r0, sp
 800cc3a:	f000 fc2d 	bl	800d498 <__ieee754_rem_pio2>
 800cc3e:	f000 0003 	and.w	r0, r0, #3
 800cc42:	2801      	cmp	r0, #1
 800cc44:	d007      	beq.n	800cc56 <cos+0x56>
 800cc46:	2802      	cmp	r0, #2
 800cc48:	d012      	beq.n	800cc70 <cos+0x70>
 800cc4a:	b9c0      	cbnz	r0, 800cc7e <cos+0x7e>
 800cc4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc50:	ed9d 0b00 	vldr	d0, [sp]
 800cc54:	e7de      	b.n	800cc14 <cos+0x14>
 800cc56:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc5a:	ed9d 0b00 	vldr	d0, [sp]
 800cc5e:	f001 fae3 	bl	800e228 <__kernel_sin>
 800cc62:	ec53 2b10 	vmov	r2, r3, d0
 800cc66:	ee10 0a10 	vmov	r0, s0
 800cc6a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cc6e:	e7de      	b.n	800cc2e <cos+0x2e>
 800cc70:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc74:	ed9d 0b00 	vldr	d0, [sp]
 800cc78:	f000 fece 	bl	800da18 <__kernel_cos>
 800cc7c:	e7f1      	b.n	800cc62 <cos+0x62>
 800cc7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc82:	ed9d 0b00 	vldr	d0, [sp]
 800cc86:	2001      	movs	r0, #1
 800cc88:	f001 face 	bl	800e228 <__kernel_sin>
 800cc8c:	e7c4      	b.n	800cc18 <cos+0x18>
 800cc8e:	bf00      	nop
	...
 800cc98:	3fe921fb 	.word	0x3fe921fb
 800cc9c:	7fefffff 	.word	0x7fefffff

0800cca0 <fabs>:
 800cca0:	ec51 0b10 	vmov	r0, r1, d0
 800cca4:	ee10 2a10 	vmov	r2, s0
 800cca8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ccac:	ec43 2b10 	vmov	d0, r2, r3
 800ccb0:	4770      	bx	lr
 800ccb2:	0000      	movs	r0, r0
 800ccb4:	0000      	movs	r0, r0
	...

0800ccb8 <sin>:
 800ccb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ccba:	ec53 2b10 	vmov	r2, r3, d0
 800ccbe:	4826      	ldr	r0, [pc, #152]	; (800cd58 <sin+0xa0>)
 800ccc0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ccc4:	4281      	cmp	r1, r0
 800ccc6:	dc07      	bgt.n	800ccd8 <sin+0x20>
 800ccc8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800cd50 <sin+0x98>
 800cccc:	2000      	movs	r0, #0
 800ccce:	f001 faab 	bl	800e228 <__kernel_sin>
 800ccd2:	ec51 0b10 	vmov	r0, r1, d0
 800ccd6:	e007      	b.n	800cce8 <sin+0x30>
 800ccd8:	4820      	ldr	r0, [pc, #128]	; (800cd5c <sin+0xa4>)
 800ccda:	4281      	cmp	r1, r0
 800ccdc:	dd09      	ble.n	800ccf2 <sin+0x3a>
 800ccde:	ee10 0a10 	vmov	r0, s0
 800cce2:	4619      	mov	r1, r3
 800cce4:	f7f3 fa88 	bl	80001f8 <__aeabi_dsub>
 800cce8:	ec41 0b10 	vmov	d0, r0, r1
 800ccec:	b005      	add	sp, #20
 800ccee:	f85d fb04 	ldr.w	pc, [sp], #4
 800ccf2:	4668      	mov	r0, sp
 800ccf4:	f000 fbd0 	bl	800d498 <__ieee754_rem_pio2>
 800ccf8:	f000 0003 	and.w	r0, r0, #3
 800ccfc:	2801      	cmp	r0, #1
 800ccfe:	d008      	beq.n	800cd12 <sin+0x5a>
 800cd00:	2802      	cmp	r0, #2
 800cd02:	d00d      	beq.n	800cd20 <sin+0x68>
 800cd04:	b9d0      	cbnz	r0, 800cd3c <sin+0x84>
 800cd06:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd0a:	ed9d 0b00 	vldr	d0, [sp]
 800cd0e:	2001      	movs	r0, #1
 800cd10:	e7dd      	b.n	800ccce <sin+0x16>
 800cd12:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd16:	ed9d 0b00 	vldr	d0, [sp]
 800cd1a:	f000 fe7d 	bl	800da18 <__kernel_cos>
 800cd1e:	e7d8      	b.n	800ccd2 <sin+0x1a>
 800cd20:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd24:	ed9d 0b00 	vldr	d0, [sp]
 800cd28:	2001      	movs	r0, #1
 800cd2a:	f001 fa7d 	bl	800e228 <__kernel_sin>
 800cd2e:	ec53 2b10 	vmov	r2, r3, d0
 800cd32:	ee10 0a10 	vmov	r0, s0
 800cd36:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cd3a:	e7d5      	b.n	800cce8 <sin+0x30>
 800cd3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd40:	ed9d 0b00 	vldr	d0, [sp]
 800cd44:	f000 fe68 	bl	800da18 <__kernel_cos>
 800cd48:	e7f1      	b.n	800cd2e <sin+0x76>
 800cd4a:	bf00      	nop
 800cd4c:	f3af 8000 	nop.w
	...
 800cd58:	3fe921fb 	.word	0x3fe921fb
 800cd5c:	7fefffff 	.word	0x7fefffff

0800cd60 <acos>:
 800cd60:	b538      	push	{r3, r4, r5, lr}
 800cd62:	ed2d 8b02 	vpush	{d8}
 800cd66:	ec55 4b10 	vmov	r4, r5, d0
 800cd6a:	f000 f869 	bl	800ce40 <__ieee754_acos>
 800cd6e:	4b16      	ldr	r3, [pc, #88]	; (800cdc8 <acos+0x68>)
 800cd70:	eeb0 8a40 	vmov.f32	s16, s0
 800cd74:	eef0 8a60 	vmov.f32	s17, s1
 800cd78:	f993 3000 	ldrsb.w	r3, [r3]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	d01c      	beq.n	800cdba <acos+0x5a>
 800cd80:	4622      	mov	r2, r4
 800cd82:	462b      	mov	r3, r5
 800cd84:	4620      	mov	r0, r4
 800cd86:	4629      	mov	r1, r5
 800cd88:	f7f3 fe88 	bl	8000a9c <__aeabi_dcmpun>
 800cd8c:	b9a8      	cbnz	r0, 800cdba <acos+0x5a>
 800cd8e:	ec45 4b10 	vmov	d0, r4, r5
 800cd92:	f7ff ff85 	bl	800cca0 <fabs>
 800cd96:	4b0d      	ldr	r3, [pc, #52]	; (800cdcc <acos+0x6c>)
 800cd98:	ec51 0b10 	vmov	r0, r1, d0
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	f7f3 fe73 	bl	8000a88 <__aeabi_dcmpgt>
 800cda2:	b150      	cbz	r0, 800cdba <acos+0x5a>
 800cda4:	f7ff fd5a 	bl	800c85c <__errno>
 800cda8:	ecbd 8b02 	vpop	{d8}
 800cdac:	2321      	movs	r3, #33	; 0x21
 800cdae:	6003      	str	r3, [r0, #0]
 800cdb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdb4:	4806      	ldr	r0, [pc, #24]	; (800cdd0 <acos+0x70>)
 800cdb6:	f001 bb77 	b.w	800e4a8 <nan>
 800cdba:	eeb0 0a48 	vmov.f32	s0, s16
 800cdbe:	eef0 0a68 	vmov.f32	s1, s17
 800cdc2:	ecbd 8b02 	vpop	{d8}
 800cdc6:	bd38      	pop	{r3, r4, r5, pc}
 800cdc8:	20000270 	.word	0x20000270
 800cdcc:	3ff00000 	.word	0x3ff00000
 800cdd0:	0800e8f0 	.word	0x0800e8f0

0800cdd4 <atan2>:
 800cdd4:	f000 ba94 	b.w	800d300 <__ieee754_atan2>

0800cdd8 <sqrt>:
 800cdd8:	b538      	push	{r3, r4, r5, lr}
 800cdda:	ed2d 8b02 	vpush	{d8}
 800cdde:	ec55 4b10 	vmov	r4, r5, d0
 800cde2:	f000 fd63 	bl	800d8ac <__ieee754_sqrt>
 800cde6:	4b15      	ldr	r3, [pc, #84]	; (800ce3c <sqrt+0x64>)
 800cde8:	eeb0 8a40 	vmov.f32	s16, s0
 800cdec:	eef0 8a60 	vmov.f32	s17, s1
 800cdf0:	f993 3000 	ldrsb.w	r3, [r3]
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	d019      	beq.n	800ce2c <sqrt+0x54>
 800cdf8:	4622      	mov	r2, r4
 800cdfa:	462b      	mov	r3, r5
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	4629      	mov	r1, r5
 800ce00:	f7f3 fe4c 	bl	8000a9c <__aeabi_dcmpun>
 800ce04:	b990      	cbnz	r0, 800ce2c <sqrt+0x54>
 800ce06:	2200      	movs	r2, #0
 800ce08:	2300      	movs	r3, #0
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	4629      	mov	r1, r5
 800ce0e:	f7f3 fe1d 	bl	8000a4c <__aeabi_dcmplt>
 800ce12:	b158      	cbz	r0, 800ce2c <sqrt+0x54>
 800ce14:	f7ff fd22 	bl	800c85c <__errno>
 800ce18:	2321      	movs	r3, #33	; 0x21
 800ce1a:	6003      	str	r3, [r0, #0]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	2300      	movs	r3, #0
 800ce20:	4610      	mov	r0, r2
 800ce22:	4619      	mov	r1, r3
 800ce24:	f7f3 fcca 	bl	80007bc <__aeabi_ddiv>
 800ce28:	ec41 0b18 	vmov	d8, r0, r1
 800ce2c:	eeb0 0a48 	vmov.f32	s0, s16
 800ce30:	eef0 0a68 	vmov.f32	s1, s17
 800ce34:	ecbd 8b02 	vpop	{d8}
 800ce38:	bd38      	pop	{r3, r4, r5, pc}
 800ce3a:	bf00      	nop
 800ce3c:	20000270 	.word	0x20000270

0800ce40 <__ieee754_acos>:
 800ce40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce44:	ec55 4b10 	vmov	r4, r5, d0
 800ce48:	49b7      	ldr	r1, [pc, #732]	; (800d128 <__ieee754_acos+0x2e8>)
 800ce4a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ce4e:	428b      	cmp	r3, r1
 800ce50:	dd1b      	ble.n	800ce8a <__ieee754_acos+0x4a>
 800ce52:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800ce56:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ce5a:	4323      	orrs	r3, r4
 800ce5c:	d106      	bne.n	800ce6c <__ieee754_acos+0x2c>
 800ce5e:	2d00      	cmp	r5, #0
 800ce60:	f300 8211 	bgt.w	800d286 <__ieee754_acos+0x446>
 800ce64:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800d0c0 <__ieee754_acos+0x280>
 800ce68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce6c:	ee10 2a10 	vmov	r2, s0
 800ce70:	462b      	mov	r3, r5
 800ce72:	ee10 0a10 	vmov	r0, s0
 800ce76:	4629      	mov	r1, r5
 800ce78:	f7f3 f9be 	bl	80001f8 <__aeabi_dsub>
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	460b      	mov	r3, r1
 800ce80:	f7f3 fc9c 	bl	80007bc <__aeabi_ddiv>
 800ce84:	ec41 0b10 	vmov	d0, r0, r1
 800ce88:	e7ee      	b.n	800ce68 <__ieee754_acos+0x28>
 800ce8a:	49a8      	ldr	r1, [pc, #672]	; (800d12c <__ieee754_acos+0x2ec>)
 800ce8c:	428b      	cmp	r3, r1
 800ce8e:	f300 8087 	bgt.w	800cfa0 <__ieee754_acos+0x160>
 800ce92:	4aa7      	ldr	r2, [pc, #668]	; (800d130 <__ieee754_acos+0x2f0>)
 800ce94:	4293      	cmp	r3, r2
 800ce96:	f340 81f9 	ble.w	800d28c <__ieee754_acos+0x44c>
 800ce9a:	ee10 2a10 	vmov	r2, s0
 800ce9e:	ee10 0a10 	vmov	r0, s0
 800cea2:	462b      	mov	r3, r5
 800cea4:	4629      	mov	r1, r5
 800cea6:	f7f3 fb5f 	bl	8000568 <__aeabi_dmul>
 800ceaa:	a387      	add	r3, pc, #540	; (adr r3, 800d0c8 <__ieee754_acos+0x288>)
 800ceac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb0:	4606      	mov	r6, r0
 800ceb2:	460f      	mov	r7, r1
 800ceb4:	f7f3 fb58 	bl	8000568 <__aeabi_dmul>
 800ceb8:	a385      	add	r3, pc, #532	; (adr r3, 800d0d0 <__ieee754_acos+0x290>)
 800ceba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cebe:	f7f3 f99d 	bl	80001fc <__adddf3>
 800cec2:	4632      	mov	r2, r6
 800cec4:	463b      	mov	r3, r7
 800cec6:	f7f3 fb4f 	bl	8000568 <__aeabi_dmul>
 800ceca:	a383      	add	r3, pc, #524	; (adr r3, 800d0d8 <__ieee754_acos+0x298>)
 800cecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced0:	f7f3 f992 	bl	80001f8 <__aeabi_dsub>
 800ced4:	4632      	mov	r2, r6
 800ced6:	463b      	mov	r3, r7
 800ced8:	f7f3 fb46 	bl	8000568 <__aeabi_dmul>
 800cedc:	a380      	add	r3, pc, #512	; (adr r3, 800d0e0 <__ieee754_acos+0x2a0>)
 800cede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee2:	f7f3 f98b 	bl	80001fc <__adddf3>
 800cee6:	4632      	mov	r2, r6
 800cee8:	463b      	mov	r3, r7
 800ceea:	f7f3 fb3d 	bl	8000568 <__aeabi_dmul>
 800ceee:	a37e      	add	r3, pc, #504	; (adr r3, 800d0e8 <__ieee754_acos+0x2a8>)
 800cef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef4:	f7f3 f980 	bl	80001f8 <__aeabi_dsub>
 800cef8:	4632      	mov	r2, r6
 800cefa:	463b      	mov	r3, r7
 800cefc:	f7f3 fb34 	bl	8000568 <__aeabi_dmul>
 800cf00:	a37b      	add	r3, pc, #492	; (adr r3, 800d0f0 <__ieee754_acos+0x2b0>)
 800cf02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf06:	f7f3 f979 	bl	80001fc <__adddf3>
 800cf0a:	4632      	mov	r2, r6
 800cf0c:	463b      	mov	r3, r7
 800cf0e:	f7f3 fb2b 	bl	8000568 <__aeabi_dmul>
 800cf12:	a379      	add	r3, pc, #484	; (adr r3, 800d0f8 <__ieee754_acos+0x2b8>)
 800cf14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf18:	4680      	mov	r8, r0
 800cf1a:	4689      	mov	r9, r1
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	4639      	mov	r1, r7
 800cf20:	f7f3 fb22 	bl	8000568 <__aeabi_dmul>
 800cf24:	a376      	add	r3, pc, #472	; (adr r3, 800d100 <__ieee754_acos+0x2c0>)
 800cf26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf2a:	f7f3 f965 	bl	80001f8 <__aeabi_dsub>
 800cf2e:	4632      	mov	r2, r6
 800cf30:	463b      	mov	r3, r7
 800cf32:	f7f3 fb19 	bl	8000568 <__aeabi_dmul>
 800cf36:	a374      	add	r3, pc, #464	; (adr r3, 800d108 <__ieee754_acos+0x2c8>)
 800cf38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf3c:	f7f3 f95e 	bl	80001fc <__adddf3>
 800cf40:	4632      	mov	r2, r6
 800cf42:	463b      	mov	r3, r7
 800cf44:	f7f3 fb10 	bl	8000568 <__aeabi_dmul>
 800cf48:	a371      	add	r3, pc, #452	; (adr r3, 800d110 <__ieee754_acos+0x2d0>)
 800cf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4e:	f7f3 f953 	bl	80001f8 <__aeabi_dsub>
 800cf52:	4632      	mov	r2, r6
 800cf54:	463b      	mov	r3, r7
 800cf56:	f7f3 fb07 	bl	8000568 <__aeabi_dmul>
 800cf5a:	4b76      	ldr	r3, [pc, #472]	; (800d134 <__ieee754_acos+0x2f4>)
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	f7f3 f94d 	bl	80001fc <__adddf3>
 800cf62:	4602      	mov	r2, r0
 800cf64:	460b      	mov	r3, r1
 800cf66:	4640      	mov	r0, r8
 800cf68:	4649      	mov	r1, r9
 800cf6a:	f7f3 fc27 	bl	80007bc <__aeabi_ddiv>
 800cf6e:	4622      	mov	r2, r4
 800cf70:	462b      	mov	r3, r5
 800cf72:	f7f3 faf9 	bl	8000568 <__aeabi_dmul>
 800cf76:	4602      	mov	r2, r0
 800cf78:	460b      	mov	r3, r1
 800cf7a:	a167      	add	r1, pc, #412	; (adr r1, 800d118 <__ieee754_acos+0x2d8>)
 800cf7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf80:	f7f3 f93a 	bl	80001f8 <__aeabi_dsub>
 800cf84:	4602      	mov	r2, r0
 800cf86:	460b      	mov	r3, r1
 800cf88:	4620      	mov	r0, r4
 800cf8a:	4629      	mov	r1, r5
 800cf8c:	f7f3 f934 	bl	80001f8 <__aeabi_dsub>
 800cf90:	4602      	mov	r2, r0
 800cf92:	460b      	mov	r3, r1
 800cf94:	a162      	add	r1, pc, #392	; (adr r1, 800d120 <__ieee754_acos+0x2e0>)
 800cf96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf9a:	f7f3 f92d 	bl	80001f8 <__aeabi_dsub>
 800cf9e:	e771      	b.n	800ce84 <__ieee754_acos+0x44>
 800cfa0:	2d00      	cmp	r5, #0
 800cfa2:	f280 80cb 	bge.w	800d13c <__ieee754_acos+0x2fc>
 800cfa6:	ee10 0a10 	vmov	r0, s0
 800cfaa:	4b62      	ldr	r3, [pc, #392]	; (800d134 <__ieee754_acos+0x2f4>)
 800cfac:	2200      	movs	r2, #0
 800cfae:	4629      	mov	r1, r5
 800cfb0:	f7f3 f924 	bl	80001fc <__adddf3>
 800cfb4:	4b60      	ldr	r3, [pc, #384]	; (800d138 <__ieee754_acos+0x2f8>)
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	f7f3 fad6 	bl	8000568 <__aeabi_dmul>
 800cfbc:	a342      	add	r3, pc, #264	; (adr r3, 800d0c8 <__ieee754_acos+0x288>)
 800cfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfc2:	4604      	mov	r4, r0
 800cfc4:	460d      	mov	r5, r1
 800cfc6:	f7f3 facf 	bl	8000568 <__aeabi_dmul>
 800cfca:	a341      	add	r3, pc, #260	; (adr r3, 800d0d0 <__ieee754_acos+0x290>)
 800cfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd0:	f7f3 f914 	bl	80001fc <__adddf3>
 800cfd4:	4622      	mov	r2, r4
 800cfd6:	462b      	mov	r3, r5
 800cfd8:	f7f3 fac6 	bl	8000568 <__aeabi_dmul>
 800cfdc:	a33e      	add	r3, pc, #248	; (adr r3, 800d0d8 <__ieee754_acos+0x298>)
 800cfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe2:	f7f3 f909 	bl	80001f8 <__aeabi_dsub>
 800cfe6:	4622      	mov	r2, r4
 800cfe8:	462b      	mov	r3, r5
 800cfea:	f7f3 fabd 	bl	8000568 <__aeabi_dmul>
 800cfee:	a33c      	add	r3, pc, #240	; (adr r3, 800d0e0 <__ieee754_acos+0x2a0>)
 800cff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff4:	f7f3 f902 	bl	80001fc <__adddf3>
 800cff8:	4622      	mov	r2, r4
 800cffa:	462b      	mov	r3, r5
 800cffc:	f7f3 fab4 	bl	8000568 <__aeabi_dmul>
 800d000:	a339      	add	r3, pc, #228	; (adr r3, 800d0e8 <__ieee754_acos+0x2a8>)
 800d002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d006:	f7f3 f8f7 	bl	80001f8 <__aeabi_dsub>
 800d00a:	4622      	mov	r2, r4
 800d00c:	462b      	mov	r3, r5
 800d00e:	f7f3 faab 	bl	8000568 <__aeabi_dmul>
 800d012:	a337      	add	r3, pc, #220	; (adr r3, 800d0f0 <__ieee754_acos+0x2b0>)
 800d014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d018:	f7f3 f8f0 	bl	80001fc <__adddf3>
 800d01c:	4622      	mov	r2, r4
 800d01e:	462b      	mov	r3, r5
 800d020:	f7f3 faa2 	bl	8000568 <__aeabi_dmul>
 800d024:	ec45 4b10 	vmov	d0, r4, r5
 800d028:	4680      	mov	r8, r0
 800d02a:	4689      	mov	r9, r1
 800d02c:	f000 fc3e 	bl	800d8ac <__ieee754_sqrt>
 800d030:	a331      	add	r3, pc, #196	; (adr r3, 800d0f8 <__ieee754_acos+0x2b8>)
 800d032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d036:	4620      	mov	r0, r4
 800d038:	4629      	mov	r1, r5
 800d03a:	ec57 6b10 	vmov	r6, r7, d0
 800d03e:	f7f3 fa93 	bl	8000568 <__aeabi_dmul>
 800d042:	a32f      	add	r3, pc, #188	; (adr r3, 800d100 <__ieee754_acos+0x2c0>)
 800d044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d048:	f7f3 f8d6 	bl	80001f8 <__aeabi_dsub>
 800d04c:	4622      	mov	r2, r4
 800d04e:	462b      	mov	r3, r5
 800d050:	f7f3 fa8a 	bl	8000568 <__aeabi_dmul>
 800d054:	a32c      	add	r3, pc, #176	; (adr r3, 800d108 <__ieee754_acos+0x2c8>)
 800d056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d05a:	f7f3 f8cf 	bl	80001fc <__adddf3>
 800d05e:	4622      	mov	r2, r4
 800d060:	462b      	mov	r3, r5
 800d062:	f7f3 fa81 	bl	8000568 <__aeabi_dmul>
 800d066:	a32a      	add	r3, pc, #168	; (adr r3, 800d110 <__ieee754_acos+0x2d0>)
 800d068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06c:	f7f3 f8c4 	bl	80001f8 <__aeabi_dsub>
 800d070:	4622      	mov	r2, r4
 800d072:	462b      	mov	r3, r5
 800d074:	f7f3 fa78 	bl	8000568 <__aeabi_dmul>
 800d078:	4b2e      	ldr	r3, [pc, #184]	; (800d134 <__ieee754_acos+0x2f4>)
 800d07a:	2200      	movs	r2, #0
 800d07c:	f7f3 f8be 	bl	80001fc <__adddf3>
 800d080:	4602      	mov	r2, r0
 800d082:	460b      	mov	r3, r1
 800d084:	4640      	mov	r0, r8
 800d086:	4649      	mov	r1, r9
 800d088:	f7f3 fb98 	bl	80007bc <__aeabi_ddiv>
 800d08c:	4632      	mov	r2, r6
 800d08e:	463b      	mov	r3, r7
 800d090:	f7f3 fa6a 	bl	8000568 <__aeabi_dmul>
 800d094:	a320      	add	r3, pc, #128	; (adr r3, 800d118 <__ieee754_acos+0x2d8>)
 800d096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d09a:	f7f3 f8ad 	bl	80001f8 <__aeabi_dsub>
 800d09e:	4632      	mov	r2, r6
 800d0a0:	463b      	mov	r3, r7
 800d0a2:	f7f3 f8ab 	bl	80001fc <__adddf3>
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	460b      	mov	r3, r1
 800d0aa:	f7f3 f8a7 	bl	80001fc <__adddf3>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	460b      	mov	r3, r1
 800d0b2:	a103      	add	r1, pc, #12	; (adr r1, 800d0c0 <__ieee754_acos+0x280>)
 800d0b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0b8:	e76f      	b.n	800cf9a <__ieee754_acos+0x15a>
 800d0ba:	bf00      	nop
 800d0bc:	f3af 8000 	nop.w
 800d0c0:	54442d18 	.word	0x54442d18
 800d0c4:	400921fb 	.word	0x400921fb
 800d0c8:	0dfdf709 	.word	0x0dfdf709
 800d0cc:	3f023de1 	.word	0x3f023de1
 800d0d0:	7501b288 	.word	0x7501b288
 800d0d4:	3f49efe0 	.word	0x3f49efe0
 800d0d8:	b5688f3b 	.word	0xb5688f3b
 800d0dc:	3fa48228 	.word	0x3fa48228
 800d0e0:	0e884455 	.word	0x0e884455
 800d0e4:	3fc9c155 	.word	0x3fc9c155
 800d0e8:	03eb6f7d 	.word	0x03eb6f7d
 800d0ec:	3fd4d612 	.word	0x3fd4d612
 800d0f0:	55555555 	.word	0x55555555
 800d0f4:	3fc55555 	.word	0x3fc55555
 800d0f8:	b12e9282 	.word	0xb12e9282
 800d0fc:	3fb3b8c5 	.word	0x3fb3b8c5
 800d100:	1b8d0159 	.word	0x1b8d0159
 800d104:	3fe6066c 	.word	0x3fe6066c
 800d108:	9c598ac8 	.word	0x9c598ac8
 800d10c:	40002ae5 	.word	0x40002ae5
 800d110:	1c8a2d4b 	.word	0x1c8a2d4b
 800d114:	40033a27 	.word	0x40033a27
 800d118:	33145c07 	.word	0x33145c07
 800d11c:	3c91a626 	.word	0x3c91a626
 800d120:	54442d18 	.word	0x54442d18
 800d124:	3ff921fb 	.word	0x3ff921fb
 800d128:	3fefffff 	.word	0x3fefffff
 800d12c:	3fdfffff 	.word	0x3fdfffff
 800d130:	3c600000 	.word	0x3c600000
 800d134:	3ff00000 	.word	0x3ff00000
 800d138:	3fe00000 	.word	0x3fe00000
 800d13c:	ee10 2a10 	vmov	r2, s0
 800d140:	462b      	mov	r3, r5
 800d142:	496d      	ldr	r1, [pc, #436]	; (800d2f8 <__ieee754_acos+0x4b8>)
 800d144:	2000      	movs	r0, #0
 800d146:	f7f3 f857 	bl	80001f8 <__aeabi_dsub>
 800d14a:	4b6c      	ldr	r3, [pc, #432]	; (800d2fc <__ieee754_acos+0x4bc>)
 800d14c:	2200      	movs	r2, #0
 800d14e:	f7f3 fa0b 	bl	8000568 <__aeabi_dmul>
 800d152:	4604      	mov	r4, r0
 800d154:	460d      	mov	r5, r1
 800d156:	ec45 4b10 	vmov	d0, r4, r5
 800d15a:	f000 fba7 	bl	800d8ac <__ieee754_sqrt>
 800d15e:	a34e      	add	r3, pc, #312	; (adr r3, 800d298 <__ieee754_acos+0x458>)
 800d160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d164:	4620      	mov	r0, r4
 800d166:	4629      	mov	r1, r5
 800d168:	ec59 8b10 	vmov	r8, r9, d0
 800d16c:	f7f3 f9fc 	bl	8000568 <__aeabi_dmul>
 800d170:	a34b      	add	r3, pc, #300	; (adr r3, 800d2a0 <__ieee754_acos+0x460>)
 800d172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d176:	f7f3 f841 	bl	80001fc <__adddf3>
 800d17a:	4622      	mov	r2, r4
 800d17c:	462b      	mov	r3, r5
 800d17e:	f7f3 f9f3 	bl	8000568 <__aeabi_dmul>
 800d182:	a349      	add	r3, pc, #292	; (adr r3, 800d2a8 <__ieee754_acos+0x468>)
 800d184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d188:	f7f3 f836 	bl	80001f8 <__aeabi_dsub>
 800d18c:	4622      	mov	r2, r4
 800d18e:	462b      	mov	r3, r5
 800d190:	f7f3 f9ea 	bl	8000568 <__aeabi_dmul>
 800d194:	a346      	add	r3, pc, #280	; (adr r3, 800d2b0 <__ieee754_acos+0x470>)
 800d196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d19a:	f7f3 f82f 	bl	80001fc <__adddf3>
 800d19e:	4622      	mov	r2, r4
 800d1a0:	462b      	mov	r3, r5
 800d1a2:	f7f3 f9e1 	bl	8000568 <__aeabi_dmul>
 800d1a6:	a344      	add	r3, pc, #272	; (adr r3, 800d2b8 <__ieee754_acos+0x478>)
 800d1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ac:	f7f3 f824 	bl	80001f8 <__aeabi_dsub>
 800d1b0:	4622      	mov	r2, r4
 800d1b2:	462b      	mov	r3, r5
 800d1b4:	f7f3 f9d8 	bl	8000568 <__aeabi_dmul>
 800d1b8:	a341      	add	r3, pc, #260	; (adr r3, 800d2c0 <__ieee754_acos+0x480>)
 800d1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1be:	f7f3 f81d 	bl	80001fc <__adddf3>
 800d1c2:	4622      	mov	r2, r4
 800d1c4:	462b      	mov	r3, r5
 800d1c6:	f7f3 f9cf 	bl	8000568 <__aeabi_dmul>
 800d1ca:	a33f      	add	r3, pc, #252	; (adr r3, 800d2c8 <__ieee754_acos+0x488>)
 800d1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d0:	4682      	mov	sl, r0
 800d1d2:	468b      	mov	fp, r1
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	4629      	mov	r1, r5
 800d1d8:	f7f3 f9c6 	bl	8000568 <__aeabi_dmul>
 800d1dc:	a33c      	add	r3, pc, #240	; (adr r3, 800d2d0 <__ieee754_acos+0x490>)
 800d1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e2:	f7f3 f809 	bl	80001f8 <__aeabi_dsub>
 800d1e6:	4622      	mov	r2, r4
 800d1e8:	462b      	mov	r3, r5
 800d1ea:	f7f3 f9bd 	bl	8000568 <__aeabi_dmul>
 800d1ee:	a33a      	add	r3, pc, #232	; (adr r3, 800d2d8 <__ieee754_acos+0x498>)
 800d1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1f4:	f7f3 f802 	bl	80001fc <__adddf3>
 800d1f8:	4622      	mov	r2, r4
 800d1fa:	462b      	mov	r3, r5
 800d1fc:	f7f3 f9b4 	bl	8000568 <__aeabi_dmul>
 800d200:	a337      	add	r3, pc, #220	; (adr r3, 800d2e0 <__ieee754_acos+0x4a0>)
 800d202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d206:	f7f2 fff7 	bl	80001f8 <__aeabi_dsub>
 800d20a:	4622      	mov	r2, r4
 800d20c:	462b      	mov	r3, r5
 800d20e:	f7f3 f9ab 	bl	8000568 <__aeabi_dmul>
 800d212:	4b39      	ldr	r3, [pc, #228]	; (800d2f8 <__ieee754_acos+0x4b8>)
 800d214:	2200      	movs	r2, #0
 800d216:	f7f2 fff1 	bl	80001fc <__adddf3>
 800d21a:	4602      	mov	r2, r0
 800d21c:	460b      	mov	r3, r1
 800d21e:	4650      	mov	r0, sl
 800d220:	4659      	mov	r1, fp
 800d222:	f7f3 facb 	bl	80007bc <__aeabi_ddiv>
 800d226:	4642      	mov	r2, r8
 800d228:	464b      	mov	r3, r9
 800d22a:	f7f3 f99d 	bl	8000568 <__aeabi_dmul>
 800d22e:	2600      	movs	r6, #0
 800d230:	4682      	mov	sl, r0
 800d232:	468b      	mov	fp, r1
 800d234:	4632      	mov	r2, r6
 800d236:	464b      	mov	r3, r9
 800d238:	4630      	mov	r0, r6
 800d23a:	4649      	mov	r1, r9
 800d23c:	f7f3 f994 	bl	8000568 <__aeabi_dmul>
 800d240:	4602      	mov	r2, r0
 800d242:	460b      	mov	r3, r1
 800d244:	4620      	mov	r0, r4
 800d246:	4629      	mov	r1, r5
 800d248:	f7f2 ffd6 	bl	80001f8 <__aeabi_dsub>
 800d24c:	4632      	mov	r2, r6
 800d24e:	4604      	mov	r4, r0
 800d250:	460d      	mov	r5, r1
 800d252:	464b      	mov	r3, r9
 800d254:	4640      	mov	r0, r8
 800d256:	4649      	mov	r1, r9
 800d258:	f7f2 ffd0 	bl	80001fc <__adddf3>
 800d25c:	4602      	mov	r2, r0
 800d25e:	460b      	mov	r3, r1
 800d260:	4620      	mov	r0, r4
 800d262:	4629      	mov	r1, r5
 800d264:	f7f3 faaa 	bl	80007bc <__aeabi_ddiv>
 800d268:	4602      	mov	r2, r0
 800d26a:	460b      	mov	r3, r1
 800d26c:	4650      	mov	r0, sl
 800d26e:	4659      	mov	r1, fp
 800d270:	f7f2 ffc4 	bl	80001fc <__adddf3>
 800d274:	4632      	mov	r2, r6
 800d276:	464b      	mov	r3, r9
 800d278:	f7f2 ffc0 	bl	80001fc <__adddf3>
 800d27c:	4602      	mov	r2, r0
 800d27e:	460b      	mov	r3, r1
 800d280:	f7f2 ffbc 	bl	80001fc <__adddf3>
 800d284:	e5fe      	b.n	800ce84 <__ieee754_acos+0x44>
 800d286:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800d2e8 <__ieee754_acos+0x4a8>
 800d28a:	e5ed      	b.n	800ce68 <__ieee754_acos+0x28>
 800d28c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800d2f0 <__ieee754_acos+0x4b0>
 800d290:	e5ea      	b.n	800ce68 <__ieee754_acos+0x28>
 800d292:	bf00      	nop
 800d294:	f3af 8000 	nop.w
 800d298:	0dfdf709 	.word	0x0dfdf709
 800d29c:	3f023de1 	.word	0x3f023de1
 800d2a0:	7501b288 	.word	0x7501b288
 800d2a4:	3f49efe0 	.word	0x3f49efe0
 800d2a8:	b5688f3b 	.word	0xb5688f3b
 800d2ac:	3fa48228 	.word	0x3fa48228
 800d2b0:	0e884455 	.word	0x0e884455
 800d2b4:	3fc9c155 	.word	0x3fc9c155
 800d2b8:	03eb6f7d 	.word	0x03eb6f7d
 800d2bc:	3fd4d612 	.word	0x3fd4d612
 800d2c0:	55555555 	.word	0x55555555
 800d2c4:	3fc55555 	.word	0x3fc55555
 800d2c8:	b12e9282 	.word	0xb12e9282
 800d2cc:	3fb3b8c5 	.word	0x3fb3b8c5
 800d2d0:	1b8d0159 	.word	0x1b8d0159
 800d2d4:	3fe6066c 	.word	0x3fe6066c
 800d2d8:	9c598ac8 	.word	0x9c598ac8
 800d2dc:	40002ae5 	.word	0x40002ae5
 800d2e0:	1c8a2d4b 	.word	0x1c8a2d4b
 800d2e4:	40033a27 	.word	0x40033a27
	...
 800d2f0:	54442d18 	.word	0x54442d18
 800d2f4:	3ff921fb 	.word	0x3ff921fb
 800d2f8:	3ff00000 	.word	0x3ff00000
 800d2fc:	3fe00000 	.word	0x3fe00000

0800d300 <__ieee754_atan2>:
 800d300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d304:	ec57 6b11 	vmov	r6, r7, d1
 800d308:	4273      	negs	r3, r6
 800d30a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800d490 <__ieee754_atan2+0x190>
 800d30e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d312:	4333      	orrs	r3, r6
 800d314:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d318:	4573      	cmp	r3, lr
 800d31a:	ec51 0b10 	vmov	r0, r1, d0
 800d31e:	ee11 8a10 	vmov	r8, s2
 800d322:	d80a      	bhi.n	800d33a <__ieee754_atan2+0x3a>
 800d324:	4244      	negs	r4, r0
 800d326:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d32a:	4304      	orrs	r4, r0
 800d32c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d330:	4574      	cmp	r4, lr
 800d332:	ee10 9a10 	vmov	r9, s0
 800d336:	468c      	mov	ip, r1
 800d338:	d907      	bls.n	800d34a <__ieee754_atan2+0x4a>
 800d33a:	4632      	mov	r2, r6
 800d33c:	463b      	mov	r3, r7
 800d33e:	f7f2 ff5d 	bl	80001fc <__adddf3>
 800d342:	ec41 0b10 	vmov	d0, r0, r1
 800d346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d34a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d34e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d352:	4334      	orrs	r4, r6
 800d354:	d103      	bne.n	800d35e <__ieee754_atan2+0x5e>
 800d356:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d35a:	f7ff bab1 	b.w	800c8c0 <atan>
 800d35e:	17bc      	asrs	r4, r7, #30
 800d360:	f004 0402 	and.w	r4, r4, #2
 800d364:	ea53 0909 	orrs.w	r9, r3, r9
 800d368:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d36c:	d107      	bne.n	800d37e <__ieee754_atan2+0x7e>
 800d36e:	2c02      	cmp	r4, #2
 800d370:	d060      	beq.n	800d434 <__ieee754_atan2+0x134>
 800d372:	2c03      	cmp	r4, #3
 800d374:	d1e5      	bne.n	800d342 <__ieee754_atan2+0x42>
 800d376:	a142      	add	r1, pc, #264	; (adr r1, 800d480 <__ieee754_atan2+0x180>)
 800d378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d37c:	e7e1      	b.n	800d342 <__ieee754_atan2+0x42>
 800d37e:	ea52 0808 	orrs.w	r8, r2, r8
 800d382:	d106      	bne.n	800d392 <__ieee754_atan2+0x92>
 800d384:	f1bc 0f00 	cmp.w	ip, #0
 800d388:	da5f      	bge.n	800d44a <__ieee754_atan2+0x14a>
 800d38a:	a13f      	add	r1, pc, #252	; (adr r1, 800d488 <__ieee754_atan2+0x188>)
 800d38c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d390:	e7d7      	b.n	800d342 <__ieee754_atan2+0x42>
 800d392:	4572      	cmp	r2, lr
 800d394:	d10f      	bne.n	800d3b6 <__ieee754_atan2+0xb6>
 800d396:	4293      	cmp	r3, r2
 800d398:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d39c:	d107      	bne.n	800d3ae <__ieee754_atan2+0xae>
 800d39e:	2c02      	cmp	r4, #2
 800d3a0:	d84c      	bhi.n	800d43c <__ieee754_atan2+0x13c>
 800d3a2:	4b35      	ldr	r3, [pc, #212]	; (800d478 <__ieee754_atan2+0x178>)
 800d3a4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d3a8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d3ac:	e7c9      	b.n	800d342 <__ieee754_atan2+0x42>
 800d3ae:	2c02      	cmp	r4, #2
 800d3b0:	d848      	bhi.n	800d444 <__ieee754_atan2+0x144>
 800d3b2:	4b32      	ldr	r3, [pc, #200]	; (800d47c <__ieee754_atan2+0x17c>)
 800d3b4:	e7f6      	b.n	800d3a4 <__ieee754_atan2+0xa4>
 800d3b6:	4573      	cmp	r3, lr
 800d3b8:	d0e4      	beq.n	800d384 <__ieee754_atan2+0x84>
 800d3ba:	1a9b      	subs	r3, r3, r2
 800d3bc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d3c0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d3c4:	da1e      	bge.n	800d404 <__ieee754_atan2+0x104>
 800d3c6:	2f00      	cmp	r7, #0
 800d3c8:	da01      	bge.n	800d3ce <__ieee754_atan2+0xce>
 800d3ca:	323c      	adds	r2, #60	; 0x3c
 800d3cc:	db1e      	blt.n	800d40c <__ieee754_atan2+0x10c>
 800d3ce:	4632      	mov	r2, r6
 800d3d0:	463b      	mov	r3, r7
 800d3d2:	f7f3 f9f3 	bl	80007bc <__aeabi_ddiv>
 800d3d6:	ec41 0b10 	vmov	d0, r0, r1
 800d3da:	f7ff fc61 	bl	800cca0 <fabs>
 800d3de:	f7ff fa6f 	bl	800c8c0 <atan>
 800d3e2:	ec51 0b10 	vmov	r0, r1, d0
 800d3e6:	2c01      	cmp	r4, #1
 800d3e8:	d013      	beq.n	800d412 <__ieee754_atan2+0x112>
 800d3ea:	2c02      	cmp	r4, #2
 800d3ec:	d015      	beq.n	800d41a <__ieee754_atan2+0x11a>
 800d3ee:	2c00      	cmp	r4, #0
 800d3f0:	d0a7      	beq.n	800d342 <__ieee754_atan2+0x42>
 800d3f2:	a319      	add	r3, pc, #100	; (adr r3, 800d458 <__ieee754_atan2+0x158>)
 800d3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f8:	f7f2 fefe 	bl	80001f8 <__aeabi_dsub>
 800d3fc:	a318      	add	r3, pc, #96	; (adr r3, 800d460 <__ieee754_atan2+0x160>)
 800d3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d402:	e014      	b.n	800d42e <__ieee754_atan2+0x12e>
 800d404:	a118      	add	r1, pc, #96	; (adr r1, 800d468 <__ieee754_atan2+0x168>)
 800d406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d40a:	e7ec      	b.n	800d3e6 <__ieee754_atan2+0xe6>
 800d40c:	2000      	movs	r0, #0
 800d40e:	2100      	movs	r1, #0
 800d410:	e7e9      	b.n	800d3e6 <__ieee754_atan2+0xe6>
 800d412:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d416:	4619      	mov	r1, r3
 800d418:	e793      	b.n	800d342 <__ieee754_atan2+0x42>
 800d41a:	a30f      	add	r3, pc, #60	; (adr r3, 800d458 <__ieee754_atan2+0x158>)
 800d41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d420:	f7f2 feea 	bl	80001f8 <__aeabi_dsub>
 800d424:	4602      	mov	r2, r0
 800d426:	460b      	mov	r3, r1
 800d428:	a10d      	add	r1, pc, #52	; (adr r1, 800d460 <__ieee754_atan2+0x160>)
 800d42a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d42e:	f7f2 fee3 	bl	80001f8 <__aeabi_dsub>
 800d432:	e786      	b.n	800d342 <__ieee754_atan2+0x42>
 800d434:	a10a      	add	r1, pc, #40	; (adr r1, 800d460 <__ieee754_atan2+0x160>)
 800d436:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d43a:	e782      	b.n	800d342 <__ieee754_atan2+0x42>
 800d43c:	a10c      	add	r1, pc, #48	; (adr r1, 800d470 <__ieee754_atan2+0x170>)
 800d43e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d442:	e77e      	b.n	800d342 <__ieee754_atan2+0x42>
 800d444:	2000      	movs	r0, #0
 800d446:	2100      	movs	r1, #0
 800d448:	e77b      	b.n	800d342 <__ieee754_atan2+0x42>
 800d44a:	a107      	add	r1, pc, #28	; (adr r1, 800d468 <__ieee754_atan2+0x168>)
 800d44c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d450:	e777      	b.n	800d342 <__ieee754_atan2+0x42>
 800d452:	bf00      	nop
 800d454:	f3af 8000 	nop.w
 800d458:	33145c07 	.word	0x33145c07
 800d45c:	3ca1a626 	.word	0x3ca1a626
 800d460:	54442d18 	.word	0x54442d18
 800d464:	400921fb 	.word	0x400921fb
 800d468:	54442d18 	.word	0x54442d18
 800d46c:	3ff921fb 	.word	0x3ff921fb
 800d470:	54442d18 	.word	0x54442d18
 800d474:	3fe921fb 	.word	0x3fe921fb
 800d478:	0800e8f8 	.word	0x0800e8f8
 800d47c:	0800e910 	.word	0x0800e910
 800d480:	54442d18 	.word	0x54442d18
 800d484:	c00921fb 	.word	0xc00921fb
 800d488:	54442d18 	.word	0x54442d18
 800d48c:	bff921fb 	.word	0xbff921fb
 800d490:	7ff00000 	.word	0x7ff00000
 800d494:	00000000 	.word	0x00000000

0800d498 <__ieee754_rem_pio2>:
 800d498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d49c:	ed2d 8b02 	vpush	{d8}
 800d4a0:	ec55 4b10 	vmov	r4, r5, d0
 800d4a4:	4bca      	ldr	r3, [pc, #808]	; (800d7d0 <__ieee754_rem_pio2+0x338>)
 800d4a6:	b08b      	sub	sp, #44	; 0x2c
 800d4a8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d4ac:	4598      	cmp	r8, r3
 800d4ae:	4682      	mov	sl, r0
 800d4b0:	9502      	str	r5, [sp, #8]
 800d4b2:	dc08      	bgt.n	800d4c6 <__ieee754_rem_pio2+0x2e>
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	ed80 0b00 	vstr	d0, [r0]
 800d4bc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d4c0:	f04f 0b00 	mov.w	fp, #0
 800d4c4:	e028      	b.n	800d518 <__ieee754_rem_pio2+0x80>
 800d4c6:	4bc3      	ldr	r3, [pc, #780]	; (800d7d4 <__ieee754_rem_pio2+0x33c>)
 800d4c8:	4598      	cmp	r8, r3
 800d4ca:	dc78      	bgt.n	800d5be <__ieee754_rem_pio2+0x126>
 800d4cc:	9b02      	ldr	r3, [sp, #8]
 800d4ce:	4ec2      	ldr	r6, [pc, #776]	; (800d7d8 <__ieee754_rem_pio2+0x340>)
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	ee10 0a10 	vmov	r0, s0
 800d4d6:	a3b0      	add	r3, pc, #704	; (adr r3, 800d798 <__ieee754_rem_pio2+0x300>)
 800d4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4dc:	4629      	mov	r1, r5
 800d4de:	dd39      	ble.n	800d554 <__ieee754_rem_pio2+0xbc>
 800d4e0:	f7f2 fe8a 	bl	80001f8 <__aeabi_dsub>
 800d4e4:	45b0      	cmp	r8, r6
 800d4e6:	4604      	mov	r4, r0
 800d4e8:	460d      	mov	r5, r1
 800d4ea:	d01b      	beq.n	800d524 <__ieee754_rem_pio2+0x8c>
 800d4ec:	a3ac      	add	r3, pc, #688	; (adr r3, 800d7a0 <__ieee754_rem_pio2+0x308>)
 800d4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f2:	f7f2 fe81 	bl	80001f8 <__aeabi_dsub>
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	e9ca 2300 	strd	r2, r3, [sl]
 800d4fe:	4620      	mov	r0, r4
 800d500:	4629      	mov	r1, r5
 800d502:	f7f2 fe79 	bl	80001f8 <__aeabi_dsub>
 800d506:	a3a6      	add	r3, pc, #664	; (adr r3, 800d7a0 <__ieee754_rem_pio2+0x308>)
 800d508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50c:	f7f2 fe74 	bl	80001f8 <__aeabi_dsub>
 800d510:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d514:	f04f 0b01 	mov.w	fp, #1
 800d518:	4658      	mov	r0, fp
 800d51a:	b00b      	add	sp, #44	; 0x2c
 800d51c:	ecbd 8b02 	vpop	{d8}
 800d520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d524:	a3a0      	add	r3, pc, #640	; (adr r3, 800d7a8 <__ieee754_rem_pio2+0x310>)
 800d526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52a:	f7f2 fe65 	bl	80001f8 <__aeabi_dsub>
 800d52e:	a3a0      	add	r3, pc, #640	; (adr r3, 800d7b0 <__ieee754_rem_pio2+0x318>)
 800d530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d534:	4604      	mov	r4, r0
 800d536:	460d      	mov	r5, r1
 800d538:	f7f2 fe5e 	bl	80001f8 <__aeabi_dsub>
 800d53c:	4602      	mov	r2, r0
 800d53e:	460b      	mov	r3, r1
 800d540:	e9ca 2300 	strd	r2, r3, [sl]
 800d544:	4620      	mov	r0, r4
 800d546:	4629      	mov	r1, r5
 800d548:	f7f2 fe56 	bl	80001f8 <__aeabi_dsub>
 800d54c:	a398      	add	r3, pc, #608	; (adr r3, 800d7b0 <__ieee754_rem_pio2+0x318>)
 800d54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d552:	e7db      	b.n	800d50c <__ieee754_rem_pio2+0x74>
 800d554:	f7f2 fe52 	bl	80001fc <__adddf3>
 800d558:	45b0      	cmp	r8, r6
 800d55a:	4604      	mov	r4, r0
 800d55c:	460d      	mov	r5, r1
 800d55e:	d016      	beq.n	800d58e <__ieee754_rem_pio2+0xf6>
 800d560:	a38f      	add	r3, pc, #572	; (adr r3, 800d7a0 <__ieee754_rem_pio2+0x308>)
 800d562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d566:	f7f2 fe49 	bl	80001fc <__adddf3>
 800d56a:	4602      	mov	r2, r0
 800d56c:	460b      	mov	r3, r1
 800d56e:	e9ca 2300 	strd	r2, r3, [sl]
 800d572:	4620      	mov	r0, r4
 800d574:	4629      	mov	r1, r5
 800d576:	f7f2 fe3f 	bl	80001f8 <__aeabi_dsub>
 800d57a:	a389      	add	r3, pc, #548	; (adr r3, 800d7a0 <__ieee754_rem_pio2+0x308>)
 800d57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d580:	f7f2 fe3c 	bl	80001fc <__adddf3>
 800d584:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800d588:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d58c:	e7c4      	b.n	800d518 <__ieee754_rem_pio2+0x80>
 800d58e:	a386      	add	r3, pc, #536	; (adr r3, 800d7a8 <__ieee754_rem_pio2+0x310>)
 800d590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d594:	f7f2 fe32 	bl	80001fc <__adddf3>
 800d598:	a385      	add	r3, pc, #532	; (adr r3, 800d7b0 <__ieee754_rem_pio2+0x318>)
 800d59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59e:	4604      	mov	r4, r0
 800d5a0:	460d      	mov	r5, r1
 800d5a2:	f7f2 fe2b 	bl	80001fc <__adddf3>
 800d5a6:	4602      	mov	r2, r0
 800d5a8:	460b      	mov	r3, r1
 800d5aa:	e9ca 2300 	strd	r2, r3, [sl]
 800d5ae:	4620      	mov	r0, r4
 800d5b0:	4629      	mov	r1, r5
 800d5b2:	f7f2 fe21 	bl	80001f8 <__aeabi_dsub>
 800d5b6:	a37e      	add	r3, pc, #504	; (adr r3, 800d7b0 <__ieee754_rem_pio2+0x318>)
 800d5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5bc:	e7e0      	b.n	800d580 <__ieee754_rem_pio2+0xe8>
 800d5be:	4b87      	ldr	r3, [pc, #540]	; (800d7dc <__ieee754_rem_pio2+0x344>)
 800d5c0:	4598      	cmp	r8, r3
 800d5c2:	f300 80d9 	bgt.w	800d778 <__ieee754_rem_pio2+0x2e0>
 800d5c6:	f7ff fb6b 	bl	800cca0 <fabs>
 800d5ca:	ec55 4b10 	vmov	r4, r5, d0
 800d5ce:	ee10 0a10 	vmov	r0, s0
 800d5d2:	a379      	add	r3, pc, #484	; (adr r3, 800d7b8 <__ieee754_rem_pio2+0x320>)
 800d5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d8:	4629      	mov	r1, r5
 800d5da:	f7f2 ffc5 	bl	8000568 <__aeabi_dmul>
 800d5de:	4b80      	ldr	r3, [pc, #512]	; (800d7e0 <__ieee754_rem_pio2+0x348>)
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	f7f2 fe0b 	bl	80001fc <__adddf3>
 800d5e6:	f7f3 fa6f 	bl	8000ac8 <__aeabi_d2iz>
 800d5ea:	4683      	mov	fp, r0
 800d5ec:	f7f2 ff52 	bl	8000494 <__aeabi_i2d>
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	460b      	mov	r3, r1
 800d5f4:	ec43 2b18 	vmov	d8, r2, r3
 800d5f8:	a367      	add	r3, pc, #412	; (adr r3, 800d798 <__ieee754_rem_pio2+0x300>)
 800d5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fe:	f7f2 ffb3 	bl	8000568 <__aeabi_dmul>
 800d602:	4602      	mov	r2, r0
 800d604:	460b      	mov	r3, r1
 800d606:	4620      	mov	r0, r4
 800d608:	4629      	mov	r1, r5
 800d60a:	f7f2 fdf5 	bl	80001f8 <__aeabi_dsub>
 800d60e:	a364      	add	r3, pc, #400	; (adr r3, 800d7a0 <__ieee754_rem_pio2+0x308>)
 800d610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d614:	4606      	mov	r6, r0
 800d616:	460f      	mov	r7, r1
 800d618:	ec51 0b18 	vmov	r0, r1, d8
 800d61c:	f7f2 ffa4 	bl	8000568 <__aeabi_dmul>
 800d620:	f1bb 0f1f 	cmp.w	fp, #31
 800d624:	4604      	mov	r4, r0
 800d626:	460d      	mov	r5, r1
 800d628:	dc0d      	bgt.n	800d646 <__ieee754_rem_pio2+0x1ae>
 800d62a:	4b6e      	ldr	r3, [pc, #440]	; (800d7e4 <__ieee754_rem_pio2+0x34c>)
 800d62c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800d630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d634:	4543      	cmp	r3, r8
 800d636:	d006      	beq.n	800d646 <__ieee754_rem_pio2+0x1ae>
 800d638:	4622      	mov	r2, r4
 800d63a:	462b      	mov	r3, r5
 800d63c:	4630      	mov	r0, r6
 800d63e:	4639      	mov	r1, r7
 800d640:	f7f2 fdda 	bl	80001f8 <__aeabi_dsub>
 800d644:	e00f      	b.n	800d666 <__ieee754_rem_pio2+0x1ce>
 800d646:	462b      	mov	r3, r5
 800d648:	4622      	mov	r2, r4
 800d64a:	4630      	mov	r0, r6
 800d64c:	4639      	mov	r1, r7
 800d64e:	f7f2 fdd3 	bl	80001f8 <__aeabi_dsub>
 800d652:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d656:	9303      	str	r3, [sp, #12]
 800d658:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d65c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800d660:	f1b8 0f10 	cmp.w	r8, #16
 800d664:	dc02      	bgt.n	800d66c <__ieee754_rem_pio2+0x1d4>
 800d666:	e9ca 0100 	strd	r0, r1, [sl]
 800d66a:	e039      	b.n	800d6e0 <__ieee754_rem_pio2+0x248>
 800d66c:	a34e      	add	r3, pc, #312	; (adr r3, 800d7a8 <__ieee754_rem_pio2+0x310>)
 800d66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d672:	ec51 0b18 	vmov	r0, r1, d8
 800d676:	f7f2 ff77 	bl	8000568 <__aeabi_dmul>
 800d67a:	4604      	mov	r4, r0
 800d67c:	460d      	mov	r5, r1
 800d67e:	4602      	mov	r2, r0
 800d680:	460b      	mov	r3, r1
 800d682:	4630      	mov	r0, r6
 800d684:	4639      	mov	r1, r7
 800d686:	f7f2 fdb7 	bl	80001f8 <__aeabi_dsub>
 800d68a:	4602      	mov	r2, r0
 800d68c:	460b      	mov	r3, r1
 800d68e:	4680      	mov	r8, r0
 800d690:	4689      	mov	r9, r1
 800d692:	4630      	mov	r0, r6
 800d694:	4639      	mov	r1, r7
 800d696:	f7f2 fdaf 	bl	80001f8 <__aeabi_dsub>
 800d69a:	4622      	mov	r2, r4
 800d69c:	462b      	mov	r3, r5
 800d69e:	f7f2 fdab 	bl	80001f8 <__aeabi_dsub>
 800d6a2:	a343      	add	r3, pc, #268	; (adr r3, 800d7b0 <__ieee754_rem_pio2+0x318>)
 800d6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a8:	4604      	mov	r4, r0
 800d6aa:	460d      	mov	r5, r1
 800d6ac:	ec51 0b18 	vmov	r0, r1, d8
 800d6b0:	f7f2 ff5a 	bl	8000568 <__aeabi_dmul>
 800d6b4:	4622      	mov	r2, r4
 800d6b6:	462b      	mov	r3, r5
 800d6b8:	f7f2 fd9e 	bl	80001f8 <__aeabi_dsub>
 800d6bc:	4602      	mov	r2, r0
 800d6be:	460b      	mov	r3, r1
 800d6c0:	4604      	mov	r4, r0
 800d6c2:	460d      	mov	r5, r1
 800d6c4:	4640      	mov	r0, r8
 800d6c6:	4649      	mov	r1, r9
 800d6c8:	f7f2 fd96 	bl	80001f8 <__aeabi_dsub>
 800d6cc:	9a03      	ldr	r2, [sp, #12]
 800d6ce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d6d2:	1ad3      	subs	r3, r2, r3
 800d6d4:	2b31      	cmp	r3, #49	; 0x31
 800d6d6:	dc24      	bgt.n	800d722 <__ieee754_rem_pio2+0x28a>
 800d6d8:	e9ca 0100 	strd	r0, r1, [sl]
 800d6dc:	4646      	mov	r6, r8
 800d6de:	464f      	mov	r7, r9
 800d6e0:	e9da 8900 	ldrd	r8, r9, [sl]
 800d6e4:	4630      	mov	r0, r6
 800d6e6:	4642      	mov	r2, r8
 800d6e8:	464b      	mov	r3, r9
 800d6ea:	4639      	mov	r1, r7
 800d6ec:	f7f2 fd84 	bl	80001f8 <__aeabi_dsub>
 800d6f0:	462b      	mov	r3, r5
 800d6f2:	4622      	mov	r2, r4
 800d6f4:	f7f2 fd80 	bl	80001f8 <__aeabi_dsub>
 800d6f8:	9b02      	ldr	r3, [sp, #8]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d700:	f6bf af0a 	bge.w	800d518 <__ieee754_rem_pio2+0x80>
 800d704:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d708:	f8ca 3004 	str.w	r3, [sl, #4]
 800d70c:	f8ca 8000 	str.w	r8, [sl]
 800d710:	f8ca 0008 	str.w	r0, [sl, #8]
 800d714:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d718:	f8ca 300c 	str.w	r3, [sl, #12]
 800d71c:	f1cb 0b00 	rsb	fp, fp, #0
 800d720:	e6fa      	b.n	800d518 <__ieee754_rem_pio2+0x80>
 800d722:	a327      	add	r3, pc, #156	; (adr r3, 800d7c0 <__ieee754_rem_pio2+0x328>)
 800d724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d728:	ec51 0b18 	vmov	r0, r1, d8
 800d72c:	f7f2 ff1c 	bl	8000568 <__aeabi_dmul>
 800d730:	4604      	mov	r4, r0
 800d732:	460d      	mov	r5, r1
 800d734:	4602      	mov	r2, r0
 800d736:	460b      	mov	r3, r1
 800d738:	4640      	mov	r0, r8
 800d73a:	4649      	mov	r1, r9
 800d73c:	f7f2 fd5c 	bl	80001f8 <__aeabi_dsub>
 800d740:	4602      	mov	r2, r0
 800d742:	460b      	mov	r3, r1
 800d744:	4606      	mov	r6, r0
 800d746:	460f      	mov	r7, r1
 800d748:	4640      	mov	r0, r8
 800d74a:	4649      	mov	r1, r9
 800d74c:	f7f2 fd54 	bl	80001f8 <__aeabi_dsub>
 800d750:	4622      	mov	r2, r4
 800d752:	462b      	mov	r3, r5
 800d754:	f7f2 fd50 	bl	80001f8 <__aeabi_dsub>
 800d758:	a31b      	add	r3, pc, #108	; (adr r3, 800d7c8 <__ieee754_rem_pio2+0x330>)
 800d75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75e:	4604      	mov	r4, r0
 800d760:	460d      	mov	r5, r1
 800d762:	ec51 0b18 	vmov	r0, r1, d8
 800d766:	f7f2 feff 	bl	8000568 <__aeabi_dmul>
 800d76a:	4622      	mov	r2, r4
 800d76c:	462b      	mov	r3, r5
 800d76e:	f7f2 fd43 	bl	80001f8 <__aeabi_dsub>
 800d772:	4604      	mov	r4, r0
 800d774:	460d      	mov	r5, r1
 800d776:	e75f      	b.n	800d638 <__ieee754_rem_pio2+0x1a0>
 800d778:	4b1b      	ldr	r3, [pc, #108]	; (800d7e8 <__ieee754_rem_pio2+0x350>)
 800d77a:	4598      	cmp	r8, r3
 800d77c:	dd36      	ble.n	800d7ec <__ieee754_rem_pio2+0x354>
 800d77e:	ee10 2a10 	vmov	r2, s0
 800d782:	462b      	mov	r3, r5
 800d784:	4620      	mov	r0, r4
 800d786:	4629      	mov	r1, r5
 800d788:	f7f2 fd36 	bl	80001f8 <__aeabi_dsub>
 800d78c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d790:	e9ca 0100 	strd	r0, r1, [sl]
 800d794:	e694      	b.n	800d4c0 <__ieee754_rem_pio2+0x28>
 800d796:	bf00      	nop
 800d798:	54400000 	.word	0x54400000
 800d79c:	3ff921fb 	.word	0x3ff921fb
 800d7a0:	1a626331 	.word	0x1a626331
 800d7a4:	3dd0b461 	.word	0x3dd0b461
 800d7a8:	1a600000 	.word	0x1a600000
 800d7ac:	3dd0b461 	.word	0x3dd0b461
 800d7b0:	2e037073 	.word	0x2e037073
 800d7b4:	3ba3198a 	.word	0x3ba3198a
 800d7b8:	6dc9c883 	.word	0x6dc9c883
 800d7bc:	3fe45f30 	.word	0x3fe45f30
 800d7c0:	2e000000 	.word	0x2e000000
 800d7c4:	3ba3198a 	.word	0x3ba3198a
 800d7c8:	252049c1 	.word	0x252049c1
 800d7cc:	397b839a 	.word	0x397b839a
 800d7d0:	3fe921fb 	.word	0x3fe921fb
 800d7d4:	4002d97b 	.word	0x4002d97b
 800d7d8:	3ff921fb 	.word	0x3ff921fb
 800d7dc:	413921fb 	.word	0x413921fb
 800d7e0:	3fe00000 	.word	0x3fe00000
 800d7e4:	0800e928 	.word	0x0800e928
 800d7e8:	7fefffff 	.word	0x7fefffff
 800d7ec:	ea4f 5428 	mov.w	r4, r8, asr #20
 800d7f0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800d7f4:	ee10 0a10 	vmov	r0, s0
 800d7f8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800d7fc:	ee10 6a10 	vmov	r6, s0
 800d800:	460f      	mov	r7, r1
 800d802:	f7f3 f961 	bl	8000ac8 <__aeabi_d2iz>
 800d806:	f7f2 fe45 	bl	8000494 <__aeabi_i2d>
 800d80a:	4602      	mov	r2, r0
 800d80c:	460b      	mov	r3, r1
 800d80e:	4630      	mov	r0, r6
 800d810:	4639      	mov	r1, r7
 800d812:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d816:	f7f2 fcef 	bl	80001f8 <__aeabi_dsub>
 800d81a:	4b22      	ldr	r3, [pc, #136]	; (800d8a4 <__ieee754_rem_pio2+0x40c>)
 800d81c:	2200      	movs	r2, #0
 800d81e:	f7f2 fea3 	bl	8000568 <__aeabi_dmul>
 800d822:	460f      	mov	r7, r1
 800d824:	4606      	mov	r6, r0
 800d826:	f7f3 f94f 	bl	8000ac8 <__aeabi_d2iz>
 800d82a:	f7f2 fe33 	bl	8000494 <__aeabi_i2d>
 800d82e:	4602      	mov	r2, r0
 800d830:	460b      	mov	r3, r1
 800d832:	4630      	mov	r0, r6
 800d834:	4639      	mov	r1, r7
 800d836:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d83a:	f7f2 fcdd 	bl	80001f8 <__aeabi_dsub>
 800d83e:	4b19      	ldr	r3, [pc, #100]	; (800d8a4 <__ieee754_rem_pio2+0x40c>)
 800d840:	2200      	movs	r2, #0
 800d842:	f7f2 fe91 	bl	8000568 <__aeabi_dmul>
 800d846:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d84a:	ad04      	add	r5, sp, #16
 800d84c:	f04f 0803 	mov.w	r8, #3
 800d850:	46a9      	mov	r9, r5
 800d852:	2600      	movs	r6, #0
 800d854:	2700      	movs	r7, #0
 800d856:	4632      	mov	r2, r6
 800d858:	463b      	mov	r3, r7
 800d85a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d85e:	46c3      	mov	fp, r8
 800d860:	3d08      	subs	r5, #8
 800d862:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d866:	f7f3 f8e7 	bl	8000a38 <__aeabi_dcmpeq>
 800d86a:	2800      	cmp	r0, #0
 800d86c:	d1f3      	bne.n	800d856 <__ieee754_rem_pio2+0x3be>
 800d86e:	4b0e      	ldr	r3, [pc, #56]	; (800d8a8 <__ieee754_rem_pio2+0x410>)
 800d870:	9301      	str	r3, [sp, #4]
 800d872:	2302      	movs	r3, #2
 800d874:	9300      	str	r3, [sp, #0]
 800d876:	4622      	mov	r2, r4
 800d878:	465b      	mov	r3, fp
 800d87a:	4651      	mov	r1, sl
 800d87c:	4648      	mov	r0, r9
 800d87e:	f000 f993 	bl	800dba8 <__kernel_rem_pio2>
 800d882:	9b02      	ldr	r3, [sp, #8]
 800d884:	2b00      	cmp	r3, #0
 800d886:	4683      	mov	fp, r0
 800d888:	f6bf ae46 	bge.w	800d518 <__ieee754_rem_pio2+0x80>
 800d88c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d890:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d894:	f8ca 3004 	str.w	r3, [sl, #4]
 800d898:	f8da 300c 	ldr.w	r3, [sl, #12]
 800d89c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d8a0:	e73a      	b.n	800d718 <__ieee754_rem_pio2+0x280>
 800d8a2:	bf00      	nop
 800d8a4:	41700000 	.word	0x41700000
 800d8a8:	0800e9a8 	.word	0x0800e9a8

0800d8ac <__ieee754_sqrt>:
 800d8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8b0:	ec55 4b10 	vmov	r4, r5, d0
 800d8b4:	4e56      	ldr	r6, [pc, #344]	; (800da10 <__ieee754_sqrt+0x164>)
 800d8b6:	43ae      	bics	r6, r5
 800d8b8:	ee10 0a10 	vmov	r0, s0
 800d8bc:	ee10 3a10 	vmov	r3, s0
 800d8c0:	4629      	mov	r1, r5
 800d8c2:	462a      	mov	r2, r5
 800d8c4:	d110      	bne.n	800d8e8 <__ieee754_sqrt+0x3c>
 800d8c6:	ee10 2a10 	vmov	r2, s0
 800d8ca:	462b      	mov	r3, r5
 800d8cc:	f7f2 fe4c 	bl	8000568 <__aeabi_dmul>
 800d8d0:	4602      	mov	r2, r0
 800d8d2:	460b      	mov	r3, r1
 800d8d4:	4620      	mov	r0, r4
 800d8d6:	4629      	mov	r1, r5
 800d8d8:	f7f2 fc90 	bl	80001fc <__adddf3>
 800d8dc:	4604      	mov	r4, r0
 800d8de:	460d      	mov	r5, r1
 800d8e0:	ec45 4b10 	vmov	d0, r4, r5
 800d8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8e8:	2d00      	cmp	r5, #0
 800d8ea:	dc10      	bgt.n	800d90e <__ieee754_sqrt+0x62>
 800d8ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d8f0:	4330      	orrs	r0, r6
 800d8f2:	d0f5      	beq.n	800d8e0 <__ieee754_sqrt+0x34>
 800d8f4:	b15d      	cbz	r5, 800d90e <__ieee754_sqrt+0x62>
 800d8f6:	ee10 2a10 	vmov	r2, s0
 800d8fa:	462b      	mov	r3, r5
 800d8fc:	ee10 0a10 	vmov	r0, s0
 800d900:	f7f2 fc7a 	bl	80001f8 <__aeabi_dsub>
 800d904:	4602      	mov	r2, r0
 800d906:	460b      	mov	r3, r1
 800d908:	f7f2 ff58 	bl	80007bc <__aeabi_ddiv>
 800d90c:	e7e6      	b.n	800d8dc <__ieee754_sqrt+0x30>
 800d90e:	1509      	asrs	r1, r1, #20
 800d910:	d076      	beq.n	800da00 <__ieee754_sqrt+0x154>
 800d912:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d916:	07ce      	lsls	r6, r1, #31
 800d918:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800d91c:	bf5e      	ittt	pl
 800d91e:	0fda      	lsrpl	r2, r3, #31
 800d920:	005b      	lslpl	r3, r3, #1
 800d922:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800d926:	0fda      	lsrs	r2, r3, #31
 800d928:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800d92c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800d930:	2000      	movs	r0, #0
 800d932:	106d      	asrs	r5, r5, #1
 800d934:	005b      	lsls	r3, r3, #1
 800d936:	f04f 0e16 	mov.w	lr, #22
 800d93a:	4684      	mov	ip, r0
 800d93c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d940:	eb0c 0401 	add.w	r4, ip, r1
 800d944:	4294      	cmp	r4, r2
 800d946:	bfde      	ittt	le
 800d948:	1b12      	suble	r2, r2, r4
 800d94a:	eb04 0c01 	addle.w	ip, r4, r1
 800d94e:	1840      	addle	r0, r0, r1
 800d950:	0052      	lsls	r2, r2, #1
 800d952:	f1be 0e01 	subs.w	lr, lr, #1
 800d956:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d95a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d95e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d962:	d1ed      	bne.n	800d940 <__ieee754_sqrt+0x94>
 800d964:	4671      	mov	r1, lr
 800d966:	2720      	movs	r7, #32
 800d968:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d96c:	4562      	cmp	r2, ip
 800d96e:	eb04 060e 	add.w	r6, r4, lr
 800d972:	dc02      	bgt.n	800d97a <__ieee754_sqrt+0xce>
 800d974:	d113      	bne.n	800d99e <__ieee754_sqrt+0xf2>
 800d976:	429e      	cmp	r6, r3
 800d978:	d811      	bhi.n	800d99e <__ieee754_sqrt+0xf2>
 800d97a:	2e00      	cmp	r6, #0
 800d97c:	eb06 0e04 	add.w	lr, r6, r4
 800d980:	da43      	bge.n	800da0a <__ieee754_sqrt+0x15e>
 800d982:	f1be 0f00 	cmp.w	lr, #0
 800d986:	db40      	blt.n	800da0a <__ieee754_sqrt+0x15e>
 800d988:	f10c 0801 	add.w	r8, ip, #1
 800d98c:	eba2 020c 	sub.w	r2, r2, ip
 800d990:	429e      	cmp	r6, r3
 800d992:	bf88      	it	hi
 800d994:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800d998:	1b9b      	subs	r3, r3, r6
 800d99a:	4421      	add	r1, r4
 800d99c:	46c4      	mov	ip, r8
 800d99e:	0052      	lsls	r2, r2, #1
 800d9a0:	3f01      	subs	r7, #1
 800d9a2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d9a6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d9aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d9ae:	d1dd      	bne.n	800d96c <__ieee754_sqrt+0xc0>
 800d9b0:	4313      	orrs	r3, r2
 800d9b2:	d006      	beq.n	800d9c2 <__ieee754_sqrt+0x116>
 800d9b4:	1c4c      	adds	r4, r1, #1
 800d9b6:	bf13      	iteet	ne
 800d9b8:	3101      	addne	r1, #1
 800d9ba:	3001      	addeq	r0, #1
 800d9bc:	4639      	moveq	r1, r7
 800d9be:	f021 0101 	bicne.w	r1, r1, #1
 800d9c2:	1043      	asrs	r3, r0, #1
 800d9c4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d9c8:	0849      	lsrs	r1, r1, #1
 800d9ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d9ce:	07c2      	lsls	r2, r0, #31
 800d9d0:	bf48      	it	mi
 800d9d2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800d9d6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800d9da:	460c      	mov	r4, r1
 800d9dc:	463d      	mov	r5, r7
 800d9de:	e77f      	b.n	800d8e0 <__ieee754_sqrt+0x34>
 800d9e0:	0ada      	lsrs	r2, r3, #11
 800d9e2:	3815      	subs	r0, #21
 800d9e4:	055b      	lsls	r3, r3, #21
 800d9e6:	2a00      	cmp	r2, #0
 800d9e8:	d0fa      	beq.n	800d9e0 <__ieee754_sqrt+0x134>
 800d9ea:	02d7      	lsls	r7, r2, #11
 800d9ec:	d50a      	bpl.n	800da04 <__ieee754_sqrt+0x158>
 800d9ee:	f1c1 0420 	rsb	r4, r1, #32
 800d9f2:	fa23 f404 	lsr.w	r4, r3, r4
 800d9f6:	1e4d      	subs	r5, r1, #1
 800d9f8:	408b      	lsls	r3, r1
 800d9fa:	4322      	orrs	r2, r4
 800d9fc:	1b41      	subs	r1, r0, r5
 800d9fe:	e788      	b.n	800d912 <__ieee754_sqrt+0x66>
 800da00:	4608      	mov	r0, r1
 800da02:	e7f0      	b.n	800d9e6 <__ieee754_sqrt+0x13a>
 800da04:	0052      	lsls	r2, r2, #1
 800da06:	3101      	adds	r1, #1
 800da08:	e7ef      	b.n	800d9ea <__ieee754_sqrt+0x13e>
 800da0a:	46e0      	mov	r8, ip
 800da0c:	e7be      	b.n	800d98c <__ieee754_sqrt+0xe0>
 800da0e:	bf00      	nop
 800da10:	7ff00000 	.word	0x7ff00000
 800da14:	00000000 	.word	0x00000000

0800da18 <__kernel_cos>:
 800da18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da1c:	ec57 6b10 	vmov	r6, r7, d0
 800da20:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800da24:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800da28:	ed8d 1b00 	vstr	d1, [sp]
 800da2c:	da07      	bge.n	800da3e <__kernel_cos+0x26>
 800da2e:	ee10 0a10 	vmov	r0, s0
 800da32:	4639      	mov	r1, r7
 800da34:	f7f3 f848 	bl	8000ac8 <__aeabi_d2iz>
 800da38:	2800      	cmp	r0, #0
 800da3a:	f000 8088 	beq.w	800db4e <__kernel_cos+0x136>
 800da3e:	4632      	mov	r2, r6
 800da40:	463b      	mov	r3, r7
 800da42:	4630      	mov	r0, r6
 800da44:	4639      	mov	r1, r7
 800da46:	f7f2 fd8f 	bl	8000568 <__aeabi_dmul>
 800da4a:	4b51      	ldr	r3, [pc, #324]	; (800db90 <__kernel_cos+0x178>)
 800da4c:	2200      	movs	r2, #0
 800da4e:	4604      	mov	r4, r0
 800da50:	460d      	mov	r5, r1
 800da52:	f7f2 fd89 	bl	8000568 <__aeabi_dmul>
 800da56:	a340      	add	r3, pc, #256	; (adr r3, 800db58 <__kernel_cos+0x140>)
 800da58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da5c:	4682      	mov	sl, r0
 800da5e:	468b      	mov	fp, r1
 800da60:	4620      	mov	r0, r4
 800da62:	4629      	mov	r1, r5
 800da64:	f7f2 fd80 	bl	8000568 <__aeabi_dmul>
 800da68:	a33d      	add	r3, pc, #244	; (adr r3, 800db60 <__kernel_cos+0x148>)
 800da6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6e:	f7f2 fbc5 	bl	80001fc <__adddf3>
 800da72:	4622      	mov	r2, r4
 800da74:	462b      	mov	r3, r5
 800da76:	f7f2 fd77 	bl	8000568 <__aeabi_dmul>
 800da7a:	a33b      	add	r3, pc, #236	; (adr r3, 800db68 <__kernel_cos+0x150>)
 800da7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da80:	f7f2 fbba 	bl	80001f8 <__aeabi_dsub>
 800da84:	4622      	mov	r2, r4
 800da86:	462b      	mov	r3, r5
 800da88:	f7f2 fd6e 	bl	8000568 <__aeabi_dmul>
 800da8c:	a338      	add	r3, pc, #224	; (adr r3, 800db70 <__kernel_cos+0x158>)
 800da8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da92:	f7f2 fbb3 	bl	80001fc <__adddf3>
 800da96:	4622      	mov	r2, r4
 800da98:	462b      	mov	r3, r5
 800da9a:	f7f2 fd65 	bl	8000568 <__aeabi_dmul>
 800da9e:	a336      	add	r3, pc, #216	; (adr r3, 800db78 <__kernel_cos+0x160>)
 800daa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa4:	f7f2 fba8 	bl	80001f8 <__aeabi_dsub>
 800daa8:	4622      	mov	r2, r4
 800daaa:	462b      	mov	r3, r5
 800daac:	f7f2 fd5c 	bl	8000568 <__aeabi_dmul>
 800dab0:	a333      	add	r3, pc, #204	; (adr r3, 800db80 <__kernel_cos+0x168>)
 800dab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab6:	f7f2 fba1 	bl	80001fc <__adddf3>
 800daba:	4622      	mov	r2, r4
 800dabc:	462b      	mov	r3, r5
 800dabe:	f7f2 fd53 	bl	8000568 <__aeabi_dmul>
 800dac2:	4622      	mov	r2, r4
 800dac4:	462b      	mov	r3, r5
 800dac6:	f7f2 fd4f 	bl	8000568 <__aeabi_dmul>
 800daca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dace:	4604      	mov	r4, r0
 800dad0:	460d      	mov	r5, r1
 800dad2:	4630      	mov	r0, r6
 800dad4:	4639      	mov	r1, r7
 800dad6:	f7f2 fd47 	bl	8000568 <__aeabi_dmul>
 800dada:	460b      	mov	r3, r1
 800dadc:	4602      	mov	r2, r0
 800dade:	4629      	mov	r1, r5
 800dae0:	4620      	mov	r0, r4
 800dae2:	f7f2 fb89 	bl	80001f8 <__aeabi_dsub>
 800dae6:	4b2b      	ldr	r3, [pc, #172]	; (800db94 <__kernel_cos+0x17c>)
 800dae8:	4598      	cmp	r8, r3
 800daea:	4606      	mov	r6, r0
 800daec:	460f      	mov	r7, r1
 800daee:	dc10      	bgt.n	800db12 <__kernel_cos+0xfa>
 800daf0:	4602      	mov	r2, r0
 800daf2:	460b      	mov	r3, r1
 800daf4:	4650      	mov	r0, sl
 800daf6:	4659      	mov	r1, fp
 800daf8:	f7f2 fb7e 	bl	80001f8 <__aeabi_dsub>
 800dafc:	460b      	mov	r3, r1
 800dafe:	4926      	ldr	r1, [pc, #152]	; (800db98 <__kernel_cos+0x180>)
 800db00:	4602      	mov	r2, r0
 800db02:	2000      	movs	r0, #0
 800db04:	f7f2 fb78 	bl	80001f8 <__aeabi_dsub>
 800db08:	ec41 0b10 	vmov	d0, r0, r1
 800db0c:	b003      	add	sp, #12
 800db0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db12:	4b22      	ldr	r3, [pc, #136]	; (800db9c <__kernel_cos+0x184>)
 800db14:	4920      	ldr	r1, [pc, #128]	; (800db98 <__kernel_cos+0x180>)
 800db16:	4598      	cmp	r8, r3
 800db18:	bfcc      	ite	gt
 800db1a:	4d21      	ldrgt	r5, [pc, #132]	; (800dba0 <__kernel_cos+0x188>)
 800db1c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800db20:	2400      	movs	r4, #0
 800db22:	4622      	mov	r2, r4
 800db24:	462b      	mov	r3, r5
 800db26:	2000      	movs	r0, #0
 800db28:	f7f2 fb66 	bl	80001f8 <__aeabi_dsub>
 800db2c:	4622      	mov	r2, r4
 800db2e:	4680      	mov	r8, r0
 800db30:	4689      	mov	r9, r1
 800db32:	462b      	mov	r3, r5
 800db34:	4650      	mov	r0, sl
 800db36:	4659      	mov	r1, fp
 800db38:	f7f2 fb5e 	bl	80001f8 <__aeabi_dsub>
 800db3c:	4632      	mov	r2, r6
 800db3e:	463b      	mov	r3, r7
 800db40:	f7f2 fb5a 	bl	80001f8 <__aeabi_dsub>
 800db44:	4602      	mov	r2, r0
 800db46:	460b      	mov	r3, r1
 800db48:	4640      	mov	r0, r8
 800db4a:	4649      	mov	r1, r9
 800db4c:	e7da      	b.n	800db04 <__kernel_cos+0xec>
 800db4e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800db88 <__kernel_cos+0x170>
 800db52:	e7db      	b.n	800db0c <__kernel_cos+0xf4>
 800db54:	f3af 8000 	nop.w
 800db58:	be8838d4 	.word	0xbe8838d4
 800db5c:	bda8fae9 	.word	0xbda8fae9
 800db60:	bdb4b1c4 	.word	0xbdb4b1c4
 800db64:	3e21ee9e 	.word	0x3e21ee9e
 800db68:	809c52ad 	.word	0x809c52ad
 800db6c:	3e927e4f 	.word	0x3e927e4f
 800db70:	19cb1590 	.word	0x19cb1590
 800db74:	3efa01a0 	.word	0x3efa01a0
 800db78:	16c15177 	.word	0x16c15177
 800db7c:	3f56c16c 	.word	0x3f56c16c
 800db80:	5555554c 	.word	0x5555554c
 800db84:	3fa55555 	.word	0x3fa55555
 800db88:	00000000 	.word	0x00000000
 800db8c:	3ff00000 	.word	0x3ff00000
 800db90:	3fe00000 	.word	0x3fe00000
 800db94:	3fd33332 	.word	0x3fd33332
 800db98:	3ff00000 	.word	0x3ff00000
 800db9c:	3fe90000 	.word	0x3fe90000
 800dba0:	3fd20000 	.word	0x3fd20000
 800dba4:	00000000 	.word	0x00000000

0800dba8 <__kernel_rem_pio2>:
 800dba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbac:	ed2d 8b02 	vpush	{d8}
 800dbb0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800dbb4:	f112 0f14 	cmn.w	r2, #20
 800dbb8:	9308      	str	r3, [sp, #32]
 800dbba:	9101      	str	r1, [sp, #4]
 800dbbc:	4bc6      	ldr	r3, [pc, #792]	; (800ded8 <__kernel_rem_pio2+0x330>)
 800dbbe:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800dbc0:	9009      	str	r0, [sp, #36]	; 0x24
 800dbc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dbc6:	9304      	str	r3, [sp, #16]
 800dbc8:	9b08      	ldr	r3, [sp, #32]
 800dbca:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800dbce:	bfa8      	it	ge
 800dbd0:	1ed4      	subge	r4, r2, #3
 800dbd2:	9306      	str	r3, [sp, #24]
 800dbd4:	bfb2      	itee	lt
 800dbd6:	2400      	movlt	r4, #0
 800dbd8:	2318      	movge	r3, #24
 800dbda:	fb94 f4f3 	sdivge	r4, r4, r3
 800dbde:	f06f 0317 	mvn.w	r3, #23
 800dbe2:	fb04 3303 	mla	r3, r4, r3, r3
 800dbe6:	eb03 0a02 	add.w	sl, r3, r2
 800dbea:	9b04      	ldr	r3, [sp, #16]
 800dbec:	9a06      	ldr	r2, [sp, #24]
 800dbee:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800dec8 <__kernel_rem_pio2+0x320>
 800dbf2:	eb03 0802 	add.w	r8, r3, r2
 800dbf6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800dbf8:	1aa7      	subs	r7, r4, r2
 800dbfa:	ae20      	add	r6, sp, #128	; 0x80
 800dbfc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800dc00:	2500      	movs	r5, #0
 800dc02:	4545      	cmp	r5, r8
 800dc04:	dd18      	ble.n	800dc38 <__kernel_rem_pio2+0x90>
 800dc06:	9b08      	ldr	r3, [sp, #32]
 800dc08:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800dc0c:	aa20      	add	r2, sp, #128	; 0x80
 800dc0e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800dec8 <__kernel_rem_pio2+0x320>
 800dc12:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800dc16:	f1c3 0301 	rsb	r3, r3, #1
 800dc1a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800dc1e:	9307      	str	r3, [sp, #28]
 800dc20:	9b07      	ldr	r3, [sp, #28]
 800dc22:	9a04      	ldr	r2, [sp, #16]
 800dc24:	4443      	add	r3, r8
 800dc26:	429a      	cmp	r2, r3
 800dc28:	db2f      	blt.n	800dc8a <__kernel_rem_pio2+0xe2>
 800dc2a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800dc2e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800dc32:	462f      	mov	r7, r5
 800dc34:	2600      	movs	r6, #0
 800dc36:	e01b      	b.n	800dc70 <__kernel_rem_pio2+0xc8>
 800dc38:	42ef      	cmn	r7, r5
 800dc3a:	d407      	bmi.n	800dc4c <__kernel_rem_pio2+0xa4>
 800dc3c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800dc40:	f7f2 fc28 	bl	8000494 <__aeabi_i2d>
 800dc44:	e8e6 0102 	strd	r0, r1, [r6], #8
 800dc48:	3501      	adds	r5, #1
 800dc4a:	e7da      	b.n	800dc02 <__kernel_rem_pio2+0x5a>
 800dc4c:	ec51 0b18 	vmov	r0, r1, d8
 800dc50:	e7f8      	b.n	800dc44 <__kernel_rem_pio2+0x9c>
 800dc52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc56:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800dc5a:	f7f2 fc85 	bl	8000568 <__aeabi_dmul>
 800dc5e:	4602      	mov	r2, r0
 800dc60:	460b      	mov	r3, r1
 800dc62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc66:	f7f2 fac9 	bl	80001fc <__adddf3>
 800dc6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc6e:	3601      	adds	r6, #1
 800dc70:	9b06      	ldr	r3, [sp, #24]
 800dc72:	429e      	cmp	r6, r3
 800dc74:	f1a7 0708 	sub.w	r7, r7, #8
 800dc78:	ddeb      	ble.n	800dc52 <__kernel_rem_pio2+0xaa>
 800dc7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dc7e:	3508      	adds	r5, #8
 800dc80:	ecab 7b02 	vstmia	fp!, {d7}
 800dc84:	f108 0801 	add.w	r8, r8, #1
 800dc88:	e7ca      	b.n	800dc20 <__kernel_rem_pio2+0x78>
 800dc8a:	9b04      	ldr	r3, [sp, #16]
 800dc8c:	aa0c      	add	r2, sp, #48	; 0x30
 800dc8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dc92:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc94:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800dc96:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800dc9a:	9c04      	ldr	r4, [sp, #16]
 800dc9c:	930a      	str	r3, [sp, #40]	; 0x28
 800dc9e:	ab98      	add	r3, sp, #608	; 0x260
 800dca0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dca4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800dca8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800dcac:	f8cd b008 	str.w	fp, [sp, #8]
 800dcb0:	4625      	mov	r5, r4
 800dcb2:	2d00      	cmp	r5, #0
 800dcb4:	dc78      	bgt.n	800dda8 <__kernel_rem_pio2+0x200>
 800dcb6:	ec47 6b10 	vmov	d0, r6, r7
 800dcba:	4650      	mov	r0, sl
 800dcbc:	f000 fbfc 	bl	800e4b8 <scalbn>
 800dcc0:	ec57 6b10 	vmov	r6, r7, d0
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800dcca:	ee10 0a10 	vmov	r0, s0
 800dcce:	4639      	mov	r1, r7
 800dcd0:	f7f2 fc4a 	bl	8000568 <__aeabi_dmul>
 800dcd4:	ec41 0b10 	vmov	d0, r0, r1
 800dcd8:	f000 fb66 	bl	800e3a8 <floor>
 800dcdc:	4b7f      	ldr	r3, [pc, #508]	; (800dedc <__kernel_rem_pio2+0x334>)
 800dcde:	ec51 0b10 	vmov	r0, r1, d0
 800dce2:	2200      	movs	r2, #0
 800dce4:	f7f2 fc40 	bl	8000568 <__aeabi_dmul>
 800dce8:	4602      	mov	r2, r0
 800dcea:	460b      	mov	r3, r1
 800dcec:	4630      	mov	r0, r6
 800dcee:	4639      	mov	r1, r7
 800dcf0:	f7f2 fa82 	bl	80001f8 <__aeabi_dsub>
 800dcf4:	460f      	mov	r7, r1
 800dcf6:	4606      	mov	r6, r0
 800dcf8:	f7f2 fee6 	bl	8000ac8 <__aeabi_d2iz>
 800dcfc:	9007      	str	r0, [sp, #28]
 800dcfe:	f7f2 fbc9 	bl	8000494 <__aeabi_i2d>
 800dd02:	4602      	mov	r2, r0
 800dd04:	460b      	mov	r3, r1
 800dd06:	4630      	mov	r0, r6
 800dd08:	4639      	mov	r1, r7
 800dd0a:	f7f2 fa75 	bl	80001f8 <__aeabi_dsub>
 800dd0e:	f1ba 0f00 	cmp.w	sl, #0
 800dd12:	4606      	mov	r6, r0
 800dd14:	460f      	mov	r7, r1
 800dd16:	dd70      	ble.n	800ddfa <__kernel_rem_pio2+0x252>
 800dd18:	1e62      	subs	r2, r4, #1
 800dd1a:	ab0c      	add	r3, sp, #48	; 0x30
 800dd1c:	9d07      	ldr	r5, [sp, #28]
 800dd1e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800dd22:	f1ca 0118 	rsb	r1, sl, #24
 800dd26:	fa40 f301 	asr.w	r3, r0, r1
 800dd2a:	441d      	add	r5, r3
 800dd2c:	408b      	lsls	r3, r1
 800dd2e:	1ac0      	subs	r0, r0, r3
 800dd30:	ab0c      	add	r3, sp, #48	; 0x30
 800dd32:	9507      	str	r5, [sp, #28]
 800dd34:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800dd38:	f1ca 0317 	rsb	r3, sl, #23
 800dd3c:	fa40 f303 	asr.w	r3, r0, r3
 800dd40:	9302      	str	r3, [sp, #8]
 800dd42:	9b02      	ldr	r3, [sp, #8]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	dd66      	ble.n	800de16 <__kernel_rem_pio2+0x26e>
 800dd48:	9b07      	ldr	r3, [sp, #28]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	9307      	str	r3, [sp, #28]
 800dd50:	4615      	mov	r5, r2
 800dd52:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800dd56:	4294      	cmp	r4, r2
 800dd58:	f300 8099 	bgt.w	800de8e <__kernel_rem_pio2+0x2e6>
 800dd5c:	f1ba 0f00 	cmp.w	sl, #0
 800dd60:	dd07      	ble.n	800dd72 <__kernel_rem_pio2+0x1ca>
 800dd62:	f1ba 0f01 	cmp.w	sl, #1
 800dd66:	f000 80a5 	beq.w	800deb4 <__kernel_rem_pio2+0x30c>
 800dd6a:	f1ba 0f02 	cmp.w	sl, #2
 800dd6e:	f000 80c1 	beq.w	800def4 <__kernel_rem_pio2+0x34c>
 800dd72:	9b02      	ldr	r3, [sp, #8]
 800dd74:	2b02      	cmp	r3, #2
 800dd76:	d14e      	bne.n	800de16 <__kernel_rem_pio2+0x26e>
 800dd78:	4632      	mov	r2, r6
 800dd7a:	463b      	mov	r3, r7
 800dd7c:	4958      	ldr	r1, [pc, #352]	; (800dee0 <__kernel_rem_pio2+0x338>)
 800dd7e:	2000      	movs	r0, #0
 800dd80:	f7f2 fa3a 	bl	80001f8 <__aeabi_dsub>
 800dd84:	4606      	mov	r6, r0
 800dd86:	460f      	mov	r7, r1
 800dd88:	2d00      	cmp	r5, #0
 800dd8a:	d044      	beq.n	800de16 <__kernel_rem_pio2+0x26e>
 800dd8c:	4650      	mov	r0, sl
 800dd8e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800ded0 <__kernel_rem_pio2+0x328>
 800dd92:	f000 fb91 	bl	800e4b8 <scalbn>
 800dd96:	4630      	mov	r0, r6
 800dd98:	4639      	mov	r1, r7
 800dd9a:	ec53 2b10 	vmov	r2, r3, d0
 800dd9e:	f7f2 fa2b 	bl	80001f8 <__aeabi_dsub>
 800dda2:	4606      	mov	r6, r0
 800dda4:	460f      	mov	r7, r1
 800dda6:	e036      	b.n	800de16 <__kernel_rem_pio2+0x26e>
 800dda8:	4b4e      	ldr	r3, [pc, #312]	; (800dee4 <__kernel_rem_pio2+0x33c>)
 800ddaa:	2200      	movs	r2, #0
 800ddac:	4630      	mov	r0, r6
 800ddae:	4639      	mov	r1, r7
 800ddb0:	f7f2 fbda 	bl	8000568 <__aeabi_dmul>
 800ddb4:	f7f2 fe88 	bl	8000ac8 <__aeabi_d2iz>
 800ddb8:	f7f2 fb6c 	bl	8000494 <__aeabi_i2d>
 800ddbc:	4b4a      	ldr	r3, [pc, #296]	; (800dee8 <__kernel_rem_pio2+0x340>)
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	4680      	mov	r8, r0
 800ddc2:	4689      	mov	r9, r1
 800ddc4:	f7f2 fbd0 	bl	8000568 <__aeabi_dmul>
 800ddc8:	4602      	mov	r2, r0
 800ddca:	460b      	mov	r3, r1
 800ddcc:	4630      	mov	r0, r6
 800ddce:	4639      	mov	r1, r7
 800ddd0:	f7f2 fa12 	bl	80001f8 <__aeabi_dsub>
 800ddd4:	f7f2 fe78 	bl	8000ac8 <__aeabi_d2iz>
 800ddd8:	9b02      	ldr	r3, [sp, #8]
 800ddda:	f843 0b04 	str.w	r0, [r3], #4
 800ddde:	3d01      	subs	r5, #1
 800dde0:	9302      	str	r3, [sp, #8]
 800dde2:	ab70      	add	r3, sp, #448	; 0x1c0
 800dde4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800dde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddec:	4640      	mov	r0, r8
 800ddee:	4649      	mov	r1, r9
 800ddf0:	f7f2 fa04 	bl	80001fc <__adddf3>
 800ddf4:	4606      	mov	r6, r0
 800ddf6:	460f      	mov	r7, r1
 800ddf8:	e75b      	b.n	800dcb2 <__kernel_rem_pio2+0x10a>
 800ddfa:	d105      	bne.n	800de08 <__kernel_rem_pio2+0x260>
 800ddfc:	1e63      	subs	r3, r4, #1
 800ddfe:	aa0c      	add	r2, sp, #48	; 0x30
 800de00:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800de04:	15c3      	asrs	r3, r0, #23
 800de06:	e79b      	b.n	800dd40 <__kernel_rem_pio2+0x198>
 800de08:	4b38      	ldr	r3, [pc, #224]	; (800deec <__kernel_rem_pio2+0x344>)
 800de0a:	2200      	movs	r2, #0
 800de0c:	f7f2 fe32 	bl	8000a74 <__aeabi_dcmpge>
 800de10:	2800      	cmp	r0, #0
 800de12:	d139      	bne.n	800de88 <__kernel_rem_pio2+0x2e0>
 800de14:	9002      	str	r0, [sp, #8]
 800de16:	2200      	movs	r2, #0
 800de18:	2300      	movs	r3, #0
 800de1a:	4630      	mov	r0, r6
 800de1c:	4639      	mov	r1, r7
 800de1e:	f7f2 fe0b 	bl	8000a38 <__aeabi_dcmpeq>
 800de22:	2800      	cmp	r0, #0
 800de24:	f000 80b4 	beq.w	800df90 <__kernel_rem_pio2+0x3e8>
 800de28:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800de2c:	465b      	mov	r3, fp
 800de2e:	2200      	movs	r2, #0
 800de30:	9904      	ldr	r1, [sp, #16]
 800de32:	428b      	cmp	r3, r1
 800de34:	da65      	bge.n	800df02 <__kernel_rem_pio2+0x35a>
 800de36:	2a00      	cmp	r2, #0
 800de38:	d07b      	beq.n	800df32 <__kernel_rem_pio2+0x38a>
 800de3a:	ab0c      	add	r3, sp, #48	; 0x30
 800de3c:	f1aa 0a18 	sub.w	sl, sl, #24
 800de40:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800de44:	2b00      	cmp	r3, #0
 800de46:	f000 80a0 	beq.w	800df8a <__kernel_rem_pio2+0x3e2>
 800de4a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800ded0 <__kernel_rem_pio2+0x328>
 800de4e:	4650      	mov	r0, sl
 800de50:	f000 fb32 	bl	800e4b8 <scalbn>
 800de54:	4f23      	ldr	r7, [pc, #140]	; (800dee4 <__kernel_rem_pio2+0x33c>)
 800de56:	ec55 4b10 	vmov	r4, r5, d0
 800de5a:	46d8      	mov	r8, fp
 800de5c:	2600      	movs	r6, #0
 800de5e:	f1b8 0f00 	cmp.w	r8, #0
 800de62:	f280 80cf 	bge.w	800e004 <__kernel_rem_pio2+0x45c>
 800de66:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800dec8 <__kernel_rem_pio2+0x320>
 800de6a:	465f      	mov	r7, fp
 800de6c:	f04f 0800 	mov.w	r8, #0
 800de70:	2f00      	cmp	r7, #0
 800de72:	f2c0 80fd 	blt.w	800e070 <__kernel_rem_pio2+0x4c8>
 800de76:	ab70      	add	r3, sp, #448	; 0x1c0
 800de78:	f8df a074 	ldr.w	sl, [pc, #116]	; 800def0 <__kernel_rem_pio2+0x348>
 800de7c:	ec55 4b18 	vmov	r4, r5, d8
 800de80:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800de84:	2600      	movs	r6, #0
 800de86:	e0e5      	b.n	800e054 <__kernel_rem_pio2+0x4ac>
 800de88:	2302      	movs	r3, #2
 800de8a:	9302      	str	r3, [sp, #8]
 800de8c:	e75c      	b.n	800dd48 <__kernel_rem_pio2+0x1a0>
 800de8e:	f8db 3000 	ldr.w	r3, [fp]
 800de92:	b955      	cbnz	r5, 800deaa <__kernel_rem_pio2+0x302>
 800de94:	b123      	cbz	r3, 800dea0 <__kernel_rem_pio2+0x2f8>
 800de96:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800de9a:	f8cb 3000 	str.w	r3, [fp]
 800de9e:	2301      	movs	r3, #1
 800dea0:	3201      	adds	r2, #1
 800dea2:	f10b 0b04 	add.w	fp, fp, #4
 800dea6:	461d      	mov	r5, r3
 800dea8:	e755      	b.n	800dd56 <__kernel_rem_pio2+0x1ae>
 800deaa:	1acb      	subs	r3, r1, r3
 800deac:	f8cb 3000 	str.w	r3, [fp]
 800deb0:	462b      	mov	r3, r5
 800deb2:	e7f5      	b.n	800dea0 <__kernel_rem_pio2+0x2f8>
 800deb4:	1e62      	subs	r2, r4, #1
 800deb6:	ab0c      	add	r3, sp, #48	; 0x30
 800deb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800debc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dec0:	a90c      	add	r1, sp, #48	; 0x30
 800dec2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800dec6:	e754      	b.n	800dd72 <__kernel_rem_pio2+0x1ca>
	...
 800ded4:	3ff00000 	.word	0x3ff00000
 800ded8:	0800eaf0 	.word	0x0800eaf0
 800dedc:	40200000 	.word	0x40200000
 800dee0:	3ff00000 	.word	0x3ff00000
 800dee4:	3e700000 	.word	0x3e700000
 800dee8:	41700000 	.word	0x41700000
 800deec:	3fe00000 	.word	0x3fe00000
 800def0:	0800eab0 	.word	0x0800eab0
 800def4:	1e62      	subs	r2, r4, #1
 800def6:	ab0c      	add	r3, sp, #48	; 0x30
 800def8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800defc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800df00:	e7de      	b.n	800dec0 <__kernel_rem_pio2+0x318>
 800df02:	a90c      	add	r1, sp, #48	; 0x30
 800df04:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800df08:	3b01      	subs	r3, #1
 800df0a:	430a      	orrs	r2, r1
 800df0c:	e790      	b.n	800de30 <__kernel_rem_pio2+0x288>
 800df0e:	3301      	adds	r3, #1
 800df10:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800df14:	2900      	cmp	r1, #0
 800df16:	d0fa      	beq.n	800df0e <__kernel_rem_pio2+0x366>
 800df18:	9a08      	ldr	r2, [sp, #32]
 800df1a:	18e3      	adds	r3, r4, r3
 800df1c:	18a6      	adds	r6, r4, r2
 800df1e:	aa20      	add	r2, sp, #128	; 0x80
 800df20:	1c65      	adds	r5, r4, #1
 800df22:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800df26:	9302      	str	r3, [sp, #8]
 800df28:	9b02      	ldr	r3, [sp, #8]
 800df2a:	42ab      	cmp	r3, r5
 800df2c:	da04      	bge.n	800df38 <__kernel_rem_pio2+0x390>
 800df2e:	461c      	mov	r4, r3
 800df30:	e6b5      	b.n	800dc9e <__kernel_rem_pio2+0xf6>
 800df32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800df34:	2301      	movs	r3, #1
 800df36:	e7eb      	b.n	800df10 <__kernel_rem_pio2+0x368>
 800df38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800df3e:	f7f2 faa9 	bl	8000494 <__aeabi_i2d>
 800df42:	e8e6 0102 	strd	r0, r1, [r6], #8
 800df46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df48:	46b3      	mov	fp, r6
 800df4a:	461c      	mov	r4, r3
 800df4c:	2700      	movs	r7, #0
 800df4e:	f04f 0800 	mov.w	r8, #0
 800df52:	f04f 0900 	mov.w	r9, #0
 800df56:	9b06      	ldr	r3, [sp, #24]
 800df58:	429f      	cmp	r7, r3
 800df5a:	dd06      	ble.n	800df6a <__kernel_rem_pio2+0x3c2>
 800df5c:	ab70      	add	r3, sp, #448	; 0x1c0
 800df5e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800df62:	e9c3 8900 	strd	r8, r9, [r3]
 800df66:	3501      	adds	r5, #1
 800df68:	e7de      	b.n	800df28 <__kernel_rem_pio2+0x380>
 800df6a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800df6e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800df72:	f7f2 faf9 	bl	8000568 <__aeabi_dmul>
 800df76:	4602      	mov	r2, r0
 800df78:	460b      	mov	r3, r1
 800df7a:	4640      	mov	r0, r8
 800df7c:	4649      	mov	r1, r9
 800df7e:	f7f2 f93d 	bl	80001fc <__adddf3>
 800df82:	3701      	adds	r7, #1
 800df84:	4680      	mov	r8, r0
 800df86:	4689      	mov	r9, r1
 800df88:	e7e5      	b.n	800df56 <__kernel_rem_pio2+0x3ae>
 800df8a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800df8e:	e754      	b.n	800de3a <__kernel_rem_pio2+0x292>
 800df90:	ec47 6b10 	vmov	d0, r6, r7
 800df94:	f1ca 0000 	rsb	r0, sl, #0
 800df98:	f000 fa8e 	bl	800e4b8 <scalbn>
 800df9c:	ec57 6b10 	vmov	r6, r7, d0
 800dfa0:	4b9f      	ldr	r3, [pc, #636]	; (800e220 <__kernel_rem_pio2+0x678>)
 800dfa2:	ee10 0a10 	vmov	r0, s0
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	4639      	mov	r1, r7
 800dfaa:	f7f2 fd63 	bl	8000a74 <__aeabi_dcmpge>
 800dfae:	b300      	cbz	r0, 800dff2 <__kernel_rem_pio2+0x44a>
 800dfb0:	4b9c      	ldr	r3, [pc, #624]	; (800e224 <__kernel_rem_pio2+0x67c>)
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	4630      	mov	r0, r6
 800dfb6:	4639      	mov	r1, r7
 800dfb8:	f7f2 fad6 	bl	8000568 <__aeabi_dmul>
 800dfbc:	f7f2 fd84 	bl	8000ac8 <__aeabi_d2iz>
 800dfc0:	4605      	mov	r5, r0
 800dfc2:	f7f2 fa67 	bl	8000494 <__aeabi_i2d>
 800dfc6:	4b96      	ldr	r3, [pc, #600]	; (800e220 <__kernel_rem_pio2+0x678>)
 800dfc8:	2200      	movs	r2, #0
 800dfca:	f7f2 facd 	bl	8000568 <__aeabi_dmul>
 800dfce:	460b      	mov	r3, r1
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	4639      	mov	r1, r7
 800dfd4:	4630      	mov	r0, r6
 800dfd6:	f7f2 f90f 	bl	80001f8 <__aeabi_dsub>
 800dfda:	f7f2 fd75 	bl	8000ac8 <__aeabi_d2iz>
 800dfde:	f104 0b01 	add.w	fp, r4, #1
 800dfe2:	ab0c      	add	r3, sp, #48	; 0x30
 800dfe4:	f10a 0a18 	add.w	sl, sl, #24
 800dfe8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dfec:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800dff0:	e72b      	b.n	800de4a <__kernel_rem_pio2+0x2a2>
 800dff2:	4630      	mov	r0, r6
 800dff4:	4639      	mov	r1, r7
 800dff6:	f7f2 fd67 	bl	8000ac8 <__aeabi_d2iz>
 800dffa:	ab0c      	add	r3, sp, #48	; 0x30
 800dffc:	46a3      	mov	fp, r4
 800dffe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e002:	e722      	b.n	800de4a <__kernel_rem_pio2+0x2a2>
 800e004:	ab70      	add	r3, sp, #448	; 0x1c0
 800e006:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800e00a:	ab0c      	add	r3, sp, #48	; 0x30
 800e00c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e010:	f7f2 fa40 	bl	8000494 <__aeabi_i2d>
 800e014:	4622      	mov	r2, r4
 800e016:	462b      	mov	r3, r5
 800e018:	f7f2 faa6 	bl	8000568 <__aeabi_dmul>
 800e01c:	4632      	mov	r2, r6
 800e01e:	e9c9 0100 	strd	r0, r1, [r9]
 800e022:	463b      	mov	r3, r7
 800e024:	4620      	mov	r0, r4
 800e026:	4629      	mov	r1, r5
 800e028:	f7f2 fa9e 	bl	8000568 <__aeabi_dmul>
 800e02c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e030:	4604      	mov	r4, r0
 800e032:	460d      	mov	r5, r1
 800e034:	e713      	b.n	800de5e <__kernel_rem_pio2+0x2b6>
 800e036:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e03a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800e03e:	f7f2 fa93 	bl	8000568 <__aeabi_dmul>
 800e042:	4602      	mov	r2, r0
 800e044:	460b      	mov	r3, r1
 800e046:	4620      	mov	r0, r4
 800e048:	4629      	mov	r1, r5
 800e04a:	f7f2 f8d7 	bl	80001fc <__adddf3>
 800e04e:	3601      	adds	r6, #1
 800e050:	4604      	mov	r4, r0
 800e052:	460d      	mov	r5, r1
 800e054:	9b04      	ldr	r3, [sp, #16]
 800e056:	429e      	cmp	r6, r3
 800e058:	dc01      	bgt.n	800e05e <__kernel_rem_pio2+0x4b6>
 800e05a:	45b0      	cmp	r8, r6
 800e05c:	daeb      	bge.n	800e036 <__kernel_rem_pio2+0x48e>
 800e05e:	ab48      	add	r3, sp, #288	; 0x120
 800e060:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e064:	e9c3 4500 	strd	r4, r5, [r3]
 800e068:	3f01      	subs	r7, #1
 800e06a:	f108 0801 	add.w	r8, r8, #1
 800e06e:	e6ff      	b.n	800de70 <__kernel_rem_pio2+0x2c8>
 800e070:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e072:	2b02      	cmp	r3, #2
 800e074:	dc0b      	bgt.n	800e08e <__kernel_rem_pio2+0x4e6>
 800e076:	2b00      	cmp	r3, #0
 800e078:	dc6e      	bgt.n	800e158 <__kernel_rem_pio2+0x5b0>
 800e07a:	d045      	beq.n	800e108 <__kernel_rem_pio2+0x560>
 800e07c:	9b07      	ldr	r3, [sp, #28]
 800e07e:	f003 0007 	and.w	r0, r3, #7
 800e082:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e086:	ecbd 8b02 	vpop	{d8}
 800e08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e08e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e090:	2b03      	cmp	r3, #3
 800e092:	d1f3      	bne.n	800e07c <__kernel_rem_pio2+0x4d4>
 800e094:	ab48      	add	r3, sp, #288	; 0x120
 800e096:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800e09a:	46d0      	mov	r8, sl
 800e09c:	46d9      	mov	r9, fp
 800e09e:	f1b9 0f00 	cmp.w	r9, #0
 800e0a2:	f1a8 0808 	sub.w	r8, r8, #8
 800e0a6:	dc64      	bgt.n	800e172 <__kernel_rem_pio2+0x5ca>
 800e0a8:	465c      	mov	r4, fp
 800e0aa:	2c01      	cmp	r4, #1
 800e0ac:	f1aa 0a08 	sub.w	sl, sl, #8
 800e0b0:	dc7e      	bgt.n	800e1b0 <__kernel_rem_pio2+0x608>
 800e0b2:	2000      	movs	r0, #0
 800e0b4:	2100      	movs	r1, #0
 800e0b6:	f1bb 0f01 	cmp.w	fp, #1
 800e0ba:	f300 8097 	bgt.w	800e1ec <__kernel_rem_pio2+0x644>
 800e0be:	9b02      	ldr	r3, [sp, #8]
 800e0c0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800e0c4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	f040 8099 	bne.w	800e200 <__kernel_rem_pio2+0x658>
 800e0ce:	9b01      	ldr	r3, [sp, #4]
 800e0d0:	e9c3 5600 	strd	r5, r6, [r3]
 800e0d4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e0d8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e0dc:	e7ce      	b.n	800e07c <__kernel_rem_pio2+0x4d4>
 800e0de:	ab48      	add	r3, sp, #288	; 0x120
 800e0e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e8:	f7f2 f888 	bl	80001fc <__adddf3>
 800e0ec:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e0f0:	f1bb 0f00 	cmp.w	fp, #0
 800e0f4:	daf3      	bge.n	800e0de <__kernel_rem_pio2+0x536>
 800e0f6:	9b02      	ldr	r3, [sp, #8]
 800e0f8:	b113      	cbz	r3, 800e100 <__kernel_rem_pio2+0x558>
 800e0fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e0fe:	4619      	mov	r1, r3
 800e100:	9b01      	ldr	r3, [sp, #4]
 800e102:	e9c3 0100 	strd	r0, r1, [r3]
 800e106:	e7b9      	b.n	800e07c <__kernel_rem_pio2+0x4d4>
 800e108:	2000      	movs	r0, #0
 800e10a:	2100      	movs	r1, #0
 800e10c:	e7f0      	b.n	800e0f0 <__kernel_rem_pio2+0x548>
 800e10e:	ab48      	add	r3, sp, #288	; 0x120
 800e110:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e118:	f7f2 f870 	bl	80001fc <__adddf3>
 800e11c:	3c01      	subs	r4, #1
 800e11e:	2c00      	cmp	r4, #0
 800e120:	daf5      	bge.n	800e10e <__kernel_rem_pio2+0x566>
 800e122:	9b02      	ldr	r3, [sp, #8]
 800e124:	b1e3      	cbz	r3, 800e160 <__kernel_rem_pio2+0x5b8>
 800e126:	4602      	mov	r2, r0
 800e128:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e12c:	9c01      	ldr	r4, [sp, #4]
 800e12e:	e9c4 2300 	strd	r2, r3, [r4]
 800e132:	4602      	mov	r2, r0
 800e134:	460b      	mov	r3, r1
 800e136:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e13a:	f7f2 f85d 	bl	80001f8 <__aeabi_dsub>
 800e13e:	ad4a      	add	r5, sp, #296	; 0x128
 800e140:	2401      	movs	r4, #1
 800e142:	45a3      	cmp	fp, r4
 800e144:	da0f      	bge.n	800e166 <__kernel_rem_pio2+0x5be>
 800e146:	9b02      	ldr	r3, [sp, #8]
 800e148:	b113      	cbz	r3, 800e150 <__kernel_rem_pio2+0x5a8>
 800e14a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e14e:	4619      	mov	r1, r3
 800e150:	9b01      	ldr	r3, [sp, #4]
 800e152:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e156:	e791      	b.n	800e07c <__kernel_rem_pio2+0x4d4>
 800e158:	465c      	mov	r4, fp
 800e15a:	2000      	movs	r0, #0
 800e15c:	2100      	movs	r1, #0
 800e15e:	e7de      	b.n	800e11e <__kernel_rem_pio2+0x576>
 800e160:	4602      	mov	r2, r0
 800e162:	460b      	mov	r3, r1
 800e164:	e7e2      	b.n	800e12c <__kernel_rem_pio2+0x584>
 800e166:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800e16a:	f7f2 f847 	bl	80001fc <__adddf3>
 800e16e:	3401      	adds	r4, #1
 800e170:	e7e7      	b.n	800e142 <__kernel_rem_pio2+0x59a>
 800e172:	e9d8 4500 	ldrd	r4, r5, [r8]
 800e176:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800e17a:	4620      	mov	r0, r4
 800e17c:	4632      	mov	r2, r6
 800e17e:	463b      	mov	r3, r7
 800e180:	4629      	mov	r1, r5
 800e182:	f7f2 f83b 	bl	80001fc <__adddf3>
 800e186:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e18a:	4602      	mov	r2, r0
 800e18c:	460b      	mov	r3, r1
 800e18e:	4620      	mov	r0, r4
 800e190:	4629      	mov	r1, r5
 800e192:	f7f2 f831 	bl	80001f8 <__aeabi_dsub>
 800e196:	4632      	mov	r2, r6
 800e198:	463b      	mov	r3, r7
 800e19a:	f7f2 f82f 	bl	80001fc <__adddf3>
 800e19e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e1a2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800e1a6:	ed88 7b00 	vstr	d7, [r8]
 800e1aa:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800e1ae:	e776      	b.n	800e09e <__kernel_rem_pio2+0x4f6>
 800e1b0:	e9da 8900 	ldrd	r8, r9, [sl]
 800e1b4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e1b8:	4640      	mov	r0, r8
 800e1ba:	4632      	mov	r2, r6
 800e1bc:	463b      	mov	r3, r7
 800e1be:	4649      	mov	r1, r9
 800e1c0:	f7f2 f81c 	bl	80001fc <__adddf3>
 800e1c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e1c8:	4602      	mov	r2, r0
 800e1ca:	460b      	mov	r3, r1
 800e1cc:	4640      	mov	r0, r8
 800e1ce:	4649      	mov	r1, r9
 800e1d0:	f7f2 f812 	bl	80001f8 <__aeabi_dsub>
 800e1d4:	4632      	mov	r2, r6
 800e1d6:	463b      	mov	r3, r7
 800e1d8:	f7f2 f810 	bl	80001fc <__adddf3>
 800e1dc:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e1e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e1e4:	ed8a 7b00 	vstr	d7, [sl]
 800e1e8:	3c01      	subs	r4, #1
 800e1ea:	e75e      	b.n	800e0aa <__kernel_rem_pio2+0x502>
 800e1ec:	ab48      	add	r3, sp, #288	; 0x120
 800e1ee:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f6:	f7f2 f801 	bl	80001fc <__adddf3>
 800e1fa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e1fe:	e75a      	b.n	800e0b6 <__kernel_rem_pio2+0x50e>
 800e200:	9b01      	ldr	r3, [sp, #4]
 800e202:	9a01      	ldr	r2, [sp, #4]
 800e204:	601d      	str	r5, [r3, #0]
 800e206:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800e20a:	605c      	str	r4, [r3, #4]
 800e20c:	609f      	str	r7, [r3, #8]
 800e20e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800e212:	60d3      	str	r3, [r2, #12]
 800e214:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e218:	6110      	str	r0, [r2, #16]
 800e21a:	6153      	str	r3, [r2, #20]
 800e21c:	e72e      	b.n	800e07c <__kernel_rem_pio2+0x4d4>
 800e21e:	bf00      	nop
 800e220:	41700000 	.word	0x41700000
 800e224:	3e700000 	.word	0x3e700000

0800e228 <__kernel_sin>:
 800e228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e22c:	ed2d 8b04 	vpush	{d8-d9}
 800e230:	eeb0 8a41 	vmov.f32	s16, s2
 800e234:	eef0 8a61 	vmov.f32	s17, s3
 800e238:	ec55 4b10 	vmov	r4, r5, d0
 800e23c:	b083      	sub	sp, #12
 800e23e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e242:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e246:	9001      	str	r0, [sp, #4]
 800e248:	da06      	bge.n	800e258 <__kernel_sin+0x30>
 800e24a:	ee10 0a10 	vmov	r0, s0
 800e24e:	4629      	mov	r1, r5
 800e250:	f7f2 fc3a 	bl	8000ac8 <__aeabi_d2iz>
 800e254:	2800      	cmp	r0, #0
 800e256:	d051      	beq.n	800e2fc <__kernel_sin+0xd4>
 800e258:	4622      	mov	r2, r4
 800e25a:	462b      	mov	r3, r5
 800e25c:	4620      	mov	r0, r4
 800e25e:	4629      	mov	r1, r5
 800e260:	f7f2 f982 	bl	8000568 <__aeabi_dmul>
 800e264:	4682      	mov	sl, r0
 800e266:	468b      	mov	fp, r1
 800e268:	4602      	mov	r2, r0
 800e26a:	460b      	mov	r3, r1
 800e26c:	4620      	mov	r0, r4
 800e26e:	4629      	mov	r1, r5
 800e270:	f7f2 f97a 	bl	8000568 <__aeabi_dmul>
 800e274:	a341      	add	r3, pc, #260	; (adr r3, 800e37c <__kernel_sin+0x154>)
 800e276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27a:	4680      	mov	r8, r0
 800e27c:	4689      	mov	r9, r1
 800e27e:	4650      	mov	r0, sl
 800e280:	4659      	mov	r1, fp
 800e282:	f7f2 f971 	bl	8000568 <__aeabi_dmul>
 800e286:	a33f      	add	r3, pc, #252	; (adr r3, 800e384 <__kernel_sin+0x15c>)
 800e288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28c:	f7f1 ffb4 	bl	80001f8 <__aeabi_dsub>
 800e290:	4652      	mov	r2, sl
 800e292:	465b      	mov	r3, fp
 800e294:	f7f2 f968 	bl	8000568 <__aeabi_dmul>
 800e298:	a33c      	add	r3, pc, #240	; (adr r3, 800e38c <__kernel_sin+0x164>)
 800e29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e29e:	f7f1 ffad 	bl	80001fc <__adddf3>
 800e2a2:	4652      	mov	r2, sl
 800e2a4:	465b      	mov	r3, fp
 800e2a6:	f7f2 f95f 	bl	8000568 <__aeabi_dmul>
 800e2aa:	a33a      	add	r3, pc, #232	; (adr r3, 800e394 <__kernel_sin+0x16c>)
 800e2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b0:	f7f1 ffa2 	bl	80001f8 <__aeabi_dsub>
 800e2b4:	4652      	mov	r2, sl
 800e2b6:	465b      	mov	r3, fp
 800e2b8:	f7f2 f956 	bl	8000568 <__aeabi_dmul>
 800e2bc:	a337      	add	r3, pc, #220	; (adr r3, 800e39c <__kernel_sin+0x174>)
 800e2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c2:	f7f1 ff9b 	bl	80001fc <__adddf3>
 800e2c6:	9b01      	ldr	r3, [sp, #4]
 800e2c8:	4606      	mov	r6, r0
 800e2ca:	460f      	mov	r7, r1
 800e2cc:	b9eb      	cbnz	r3, 800e30a <__kernel_sin+0xe2>
 800e2ce:	4602      	mov	r2, r0
 800e2d0:	460b      	mov	r3, r1
 800e2d2:	4650      	mov	r0, sl
 800e2d4:	4659      	mov	r1, fp
 800e2d6:	f7f2 f947 	bl	8000568 <__aeabi_dmul>
 800e2da:	a325      	add	r3, pc, #148	; (adr r3, 800e370 <__kernel_sin+0x148>)
 800e2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e0:	f7f1 ff8a 	bl	80001f8 <__aeabi_dsub>
 800e2e4:	4642      	mov	r2, r8
 800e2e6:	464b      	mov	r3, r9
 800e2e8:	f7f2 f93e 	bl	8000568 <__aeabi_dmul>
 800e2ec:	4602      	mov	r2, r0
 800e2ee:	460b      	mov	r3, r1
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	4629      	mov	r1, r5
 800e2f4:	f7f1 ff82 	bl	80001fc <__adddf3>
 800e2f8:	4604      	mov	r4, r0
 800e2fa:	460d      	mov	r5, r1
 800e2fc:	ec45 4b10 	vmov	d0, r4, r5
 800e300:	b003      	add	sp, #12
 800e302:	ecbd 8b04 	vpop	{d8-d9}
 800e306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e30a:	4b1b      	ldr	r3, [pc, #108]	; (800e378 <__kernel_sin+0x150>)
 800e30c:	ec51 0b18 	vmov	r0, r1, d8
 800e310:	2200      	movs	r2, #0
 800e312:	f7f2 f929 	bl	8000568 <__aeabi_dmul>
 800e316:	4632      	mov	r2, r6
 800e318:	ec41 0b19 	vmov	d9, r0, r1
 800e31c:	463b      	mov	r3, r7
 800e31e:	4640      	mov	r0, r8
 800e320:	4649      	mov	r1, r9
 800e322:	f7f2 f921 	bl	8000568 <__aeabi_dmul>
 800e326:	4602      	mov	r2, r0
 800e328:	460b      	mov	r3, r1
 800e32a:	ec51 0b19 	vmov	r0, r1, d9
 800e32e:	f7f1 ff63 	bl	80001f8 <__aeabi_dsub>
 800e332:	4652      	mov	r2, sl
 800e334:	465b      	mov	r3, fp
 800e336:	f7f2 f917 	bl	8000568 <__aeabi_dmul>
 800e33a:	ec53 2b18 	vmov	r2, r3, d8
 800e33e:	f7f1 ff5b 	bl	80001f8 <__aeabi_dsub>
 800e342:	a30b      	add	r3, pc, #44	; (adr r3, 800e370 <__kernel_sin+0x148>)
 800e344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e348:	4606      	mov	r6, r0
 800e34a:	460f      	mov	r7, r1
 800e34c:	4640      	mov	r0, r8
 800e34e:	4649      	mov	r1, r9
 800e350:	f7f2 f90a 	bl	8000568 <__aeabi_dmul>
 800e354:	4602      	mov	r2, r0
 800e356:	460b      	mov	r3, r1
 800e358:	4630      	mov	r0, r6
 800e35a:	4639      	mov	r1, r7
 800e35c:	f7f1 ff4e 	bl	80001fc <__adddf3>
 800e360:	4602      	mov	r2, r0
 800e362:	460b      	mov	r3, r1
 800e364:	4620      	mov	r0, r4
 800e366:	4629      	mov	r1, r5
 800e368:	f7f1 ff46 	bl	80001f8 <__aeabi_dsub>
 800e36c:	e7c4      	b.n	800e2f8 <__kernel_sin+0xd0>
 800e36e:	bf00      	nop
 800e370:	55555549 	.word	0x55555549
 800e374:	3fc55555 	.word	0x3fc55555
 800e378:	3fe00000 	.word	0x3fe00000
 800e37c:	5acfd57c 	.word	0x5acfd57c
 800e380:	3de5d93a 	.word	0x3de5d93a
 800e384:	8a2b9ceb 	.word	0x8a2b9ceb
 800e388:	3e5ae5e6 	.word	0x3e5ae5e6
 800e38c:	57b1fe7d 	.word	0x57b1fe7d
 800e390:	3ec71de3 	.word	0x3ec71de3
 800e394:	19c161d5 	.word	0x19c161d5
 800e398:	3f2a01a0 	.word	0x3f2a01a0
 800e39c:	1110f8a6 	.word	0x1110f8a6
 800e3a0:	3f811111 	.word	0x3f811111
 800e3a4:	00000000 	.word	0x00000000

0800e3a8 <floor>:
 800e3a8:	ec51 0b10 	vmov	r0, r1, d0
 800e3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e3b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e3b8:	2e13      	cmp	r6, #19
 800e3ba:	ee10 5a10 	vmov	r5, s0
 800e3be:	ee10 8a10 	vmov	r8, s0
 800e3c2:	460c      	mov	r4, r1
 800e3c4:	dc32      	bgt.n	800e42c <floor+0x84>
 800e3c6:	2e00      	cmp	r6, #0
 800e3c8:	da14      	bge.n	800e3f4 <floor+0x4c>
 800e3ca:	a333      	add	r3, pc, #204	; (adr r3, 800e498 <floor+0xf0>)
 800e3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d0:	f7f1 ff14 	bl	80001fc <__adddf3>
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	f7f2 fb56 	bl	8000a88 <__aeabi_dcmpgt>
 800e3dc:	b138      	cbz	r0, 800e3ee <floor+0x46>
 800e3de:	2c00      	cmp	r4, #0
 800e3e0:	da57      	bge.n	800e492 <floor+0xea>
 800e3e2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e3e6:	431d      	orrs	r5, r3
 800e3e8:	d001      	beq.n	800e3ee <floor+0x46>
 800e3ea:	4c2d      	ldr	r4, [pc, #180]	; (800e4a0 <floor+0xf8>)
 800e3ec:	2500      	movs	r5, #0
 800e3ee:	4621      	mov	r1, r4
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	e025      	b.n	800e440 <floor+0x98>
 800e3f4:	4f2b      	ldr	r7, [pc, #172]	; (800e4a4 <floor+0xfc>)
 800e3f6:	4137      	asrs	r7, r6
 800e3f8:	ea01 0307 	and.w	r3, r1, r7
 800e3fc:	4303      	orrs	r3, r0
 800e3fe:	d01f      	beq.n	800e440 <floor+0x98>
 800e400:	a325      	add	r3, pc, #148	; (adr r3, 800e498 <floor+0xf0>)
 800e402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e406:	f7f1 fef9 	bl	80001fc <__adddf3>
 800e40a:	2200      	movs	r2, #0
 800e40c:	2300      	movs	r3, #0
 800e40e:	f7f2 fb3b 	bl	8000a88 <__aeabi_dcmpgt>
 800e412:	2800      	cmp	r0, #0
 800e414:	d0eb      	beq.n	800e3ee <floor+0x46>
 800e416:	2c00      	cmp	r4, #0
 800e418:	bfbe      	ittt	lt
 800e41a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e41e:	fa43 f606 	asrlt.w	r6, r3, r6
 800e422:	19a4      	addlt	r4, r4, r6
 800e424:	ea24 0407 	bic.w	r4, r4, r7
 800e428:	2500      	movs	r5, #0
 800e42a:	e7e0      	b.n	800e3ee <floor+0x46>
 800e42c:	2e33      	cmp	r6, #51	; 0x33
 800e42e:	dd0b      	ble.n	800e448 <floor+0xa0>
 800e430:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e434:	d104      	bne.n	800e440 <floor+0x98>
 800e436:	ee10 2a10 	vmov	r2, s0
 800e43a:	460b      	mov	r3, r1
 800e43c:	f7f1 fede 	bl	80001fc <__adddf3>
 800e440:	ec41 0b10 	vmov	d0, r0, r1
 800e444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e448:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e44c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e450:	fa23 f707 	lsr.w	r7, r3, r7
 800e454:	4207      	tst	r7, r0
 800e456:	d0f3      	beq.n	800e440 <floor+0x98>
 800e458:	a30f      	add	r3, pc, #60	; (adr r3, 800e498 <floor+0xf0>)
 800e45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e45e:	f7f1 fecd 	bl	80001fc <__adddf3>
 800e462:	2200      	movs	r2, #0
 800e464:	2300      	movs	r3, #0
 800e466:	f7f2 fb0f 	bl	8000a88 <__aeabi_dcmpgt>
 800e46a:	2800      	cmp	r0, #0
 800e46c:	d0bf      	beq.n	800e3ee <floor+0x46>
 800e46e:	2c00      	cmp	r4, #0
 800e470:	da02      	bge.n	800e478 <floor+0xd0>
 800e472:	2e14      	cmp	r6, #20
 800e474:	d103      	bne.n	800e47e <floor+0xd6>
 800e476:	3401      	adds	r4, #1
 800e478:	ea25 0507 	bic.w	r5, r5, r7
 800e47c:	e7b7      	b.n	800e3ee <floor+0x46>
 800e47e:	2301      	movs	r3, #1
 800e480:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e484:	fa03 f606 	lsl.w	r6, r3, r6
 800e488:	4435      	add	r5, r6
 800e48a:	4545      	cmp	r5, r8
 800e48c:	bf38      	it	cc
 800e48e:	18e4      	addcc	r4, r4, r3
 800e490:	e7f2      	b.n	800e478 <floor+0xd0>
 800e492:	2500      	movs	r5, #0
 800e494:	462c      	mov	r4, r5
 800e496:	e7aa      	b.n	800e3ee <floor+0x46>
 800e498:	8800759c 	.word	0x8800759c
 800e49c:	7e37e43c 	.word	0x7e37e43c
 800e4a0:	bff00000 	.word	0xbff00000
 800e4a4:	000fffff 	.word	0x000fffff

0800e4a8 <nan>:
 800e4a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e4b0 <nan+0x8>
 800e4ac:	4770      	bx	lr
 800e4ae:	bf00      	nop
 800e4b0:	00000000 	.word	0x00000000
 800e4b4:	7ff80000 	.word	0x7ff80000

0800e4b8 <scalbn>:
 800e4b8:	b570      	push	{r4, r5, r6, lr}
 800e4ba:	ec55 4b10 	vmov	r4, r5, d0
 800e4be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e4c2:	4606      	mov	r6, r0
 800e4c4:	462b      	mov	r3, r5
 800e4c6:	b99a      	cbnz	r2, 800e4f0 <scalbn+0x38>
 800e4c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e4cc:	4323      	orrs	r3, r4
 800e4ce:	d036      	beq.n	800e53e <scalbn+0x86>
 800e4d0:	4b39      	ldr	r3, [pc, #228]	; (800e5b8 <scalbn+0x100>)
 800e4d2:	4629      	mov	r1, r5
 800e4d4:	ee10 0a10 	vmov	r0, s0
 800e4d8:	2200      	movs	r2, #0
 800e4da:	f7f2 f845 	bl	8000568 <__aeabi_dmul>
 800e4de:	4b37      	ldr	r3, [pc, #220]	; (800e5bc <scalbn+0x104>)
 800e4e0:	429e      	cmp	r6, r3
 800e4e2:	4604      	mov	r4, r0
 800e4e4:	460d      	mov	r5, r1
 800e4e6:	da10      	bge.n	800e50a <scalbn+0x52>
 800e4e8:	a32b      	add	r3, pc, #172	; (adr r3, 800e598 <scalbn+0xe0>)
 800e4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ee:	e03a      	b.n	800e566 <scalbn+0xae>
 800e4f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e4f4:	428a      	cmp	r2, r1
 800e4f6:	d10c      	bne.n	800e512 <scalbn+0x5a>
 800e4f8:	ee10 2a10 	vmov	r2, s0
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	4629      	mov	r1, r5
 800e500:	f7f1 fe7c 	bl	80001fc <__adddf3>
 800e504:	4604      	mov	r4, r0
 800e506:	460d      	mov	r5, r1
 800e508:	e019      	b.n	800e53e <scalbn+0x86>
 800e50a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e50e:	460b      	mov	r3, r1
 800e510:	3a36      	subs	r2, #54	; 0x36
 800e512:	4432      	add	r2, r6
 800e514:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e518:	428a      	cmp	r2, r1
 800e51a:	dd08      	ble.n	800e52e <scalbn+0x76>
 800e51c:	2d00      	cmp	r5, #0
 800e51e:	a120      	add	r1, pc, #128	; (adr r1, 800e5a0 <scalbn+0xe8>)
 800e520:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e524:	da1c      	bge.n	800e560 <scalbn+0xa8>
 800e526:	a120      	add	r1, pc, #128	; (adr r1, 800e5a8 <scalbn+0xf0>)
 800e528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e52c:	e018      	b.n	800e560 <scalbn+0xa8>
 800e52e:	2a00      	cmp	r2, #0
 800e530:	dd08      	ble.n	800e544 <scalbn+0x8c>
 800e532:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e536:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e53a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e53e:	ec45 4b10 	vmov	d0, r4, r5
 800e542:	bd70      	pop	{r4, r5, r6, pc}
 800e544:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e548:	da19      	bge.n	800e57e <scalbn+0xc6>
 800e54a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e54e:	429e      	cmp	r6, r3
 800e550:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e554:	dd0a      	ble.n	800e56c <scalbn+0xb4>
 800e556:	a112      	add	r1, pc, #72	; (adr r1, 800e5a0 <scalbn+0xe8>)
 800e558:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d1e2      	bne.n	800e526 <scalbn+0x6e>
 800e560:	a30f      	add	r3, pc, #60	; (adr r3, 800e5a0 <scalbn+0xe8>)
 800e562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e566:	f7f1 ffff 	bl	8000568 <__aeabi_dmul>
 800e56a:	e7cb      	b.n	800e504 <scalbn+0x4c>
 800e56c:	a10a      	add	r1, pc, #40	; (adr r1, 800e598 <scalbn+0xe0>)
 800e56e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d0b8      	beq.n	800e4e8 <scalbn+0x30>
 800e576:	a10e      	add	r1, pc, #56	; (adr r1, 800e5b0 <scalbn+0xf8>)
 800e578:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e57c:	e7b4      	b.n	800e4e8 <scalbn+0x30>
 800e57e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e582:	3236      	adds	r2, #54	; 0x36
 800e584:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e588:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e58c:	4620      	mov	r0, r4
 800e58e:	4b0c      	ldr	r3, [pc, #48]	; (800e5c0 <scalbn+0x108>)
 800e590:	2200      	movs	r2, #0
 800e592:	e7e8      	b.n	800e566 <scalbn+0xae>
 800e594:	f3af 8000 	nop.w
 800e598:	c2f8f359 	.word	0xc2f8f359
 800e59c:	01a56e1f 	.word	0x01a56e1f
 800e5a0:	8800759c 	.word	0x8800759c
 800e5a4:	7e37e43c 	.word	0x7e37e43c
 800e5a8:	8800759c 	.word	0x8800759c
 800e5ac:	fe37e43c 	.word	0xfe37e43c
 800e5b0:	c2f8f359 	.word	0xc2f8f359
 800e5b4:	81a56e1f 	.word	0x81a56e1f
 800e5b8:	43500000 	.word	0x43500000
 800e5bc:	ffff3cb0 	.word	0xffff3cb0
 800e5c0:	3c900000 	.word	0x3c900000

0800e5c4 <_init>:
 800e5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5c6:	bf00      	nop
 800e5c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5ca:	bc08      	pop	{r3}
 800e5cc:	469e      	mov	lr, r3
 800e5ce:	4770      	bx	lr

0800e5d0 <_fini>:
 800e5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5d2:	bf00      	nop
 800e5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5d6:	bc08      	pop	{r3}
 800e5d8:	469e      	mov	lr, r3
 800e5da:	4770      	bx	lr
