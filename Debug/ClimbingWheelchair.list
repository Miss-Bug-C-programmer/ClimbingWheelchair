
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000609c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006248  08006248  00016248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006268  08006268  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006268  08006268  00016268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006270  08006270  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006270  08006270  00016270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006274  08006274  00016274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  20000080  080062f4  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  080062f4  00020560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d31  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003535  00000000  00000000  00037ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0003b318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001248  00000000  00000000  0003c6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000422b  00000000  00000000  0003d938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b50  00000000  00000000  00041b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e195e  00000000  00000000  000596b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013b011  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051f0  00000000  00000000  0013b064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000080 	.word	0x20000080
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006230 	.word	0x08006230

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000084 	.word	0x20000084
 80001e8:	08006230 	.word	0x08006230

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <ADC_Read>:
//		      HAL_Delay(5000);
}


void ADC_Read(int16_t *data)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 80004ec:	2200      	movs	r2, #0
 80004ee:	2110      	movs	r1, #16
 80004f0:	4808      	ldr	r0, [pc, #32]	; (8000514 <ADC_Read+0x30>)
 80004f2:	f003 f81d 	bl	8003530 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 80004f6:	2302      	movs	r3, #2
 80004f8:	2208      	movs	r2, #8
 80004fa:	6879      	ldr	r1, [r7, #4]
 80004fc:	4806      	ldr	r0, [pc, #24]	; (8000518 <ADC_Read+0x34>)
 80004fe:	f003 ff27 	bl	8004350 <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 8000502:	2201      	movs	r2, #1
 8000504:	2110      	movs	r1, #16
 8000506:	4803      	ldr	r0, [pc, #12]	; (8000514 <ADC_Read+0x30>)
 8000508:	f003 f812 	bl	8003530 <HAL_GPIO_WritePin>
}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40020000 	.word	0x40020000
 8000518:	200000dc 	.word	0x200000dc

0800051c <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	889b      	ldrh	r3, [r3, #4]
 800052e:	4619      	mov	r1, r3
 8000530:	4610      	mov	r0, r2
 8000532:	f002 ffe5 	bl	8003500 <HAL_GPIO_ReadPin>
 8000536:	4603      	mov	r3, r0
 8000538:	461a      	mov	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	799a      	ldrb	r2, [r3, #6]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	79db      	ldrb	r3, [r3, #7]
 8000546:	429a      	cmp	r2, r3
 8000548:	d004      	beq.n	8000554 <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 800054a:	f001 fb8d 	bl	8001c68 <HAL_GetTick>
 800054e:	4602      	mov	r2, r0
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 8000554:	f001 fb88 	bl	8001c68 <HAL_GetTick>
 8000558:	4602      	mov	r2, r0
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	68db      	ldr	r3, [r3, #12]
 800055e:	1ad3      	subs	r3, r2, r3
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	429a      	cmp	r2, r3
 8000564:	d209      	bcs.n	800057a <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	799a      	ldrb	r2, [r3, #6]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	7a1b      	ldrb	r3, [r3, #8]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d101      	bne.n	800057a <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 8000576:	2301      	movs	r3, #1
 8000578:	e004      	b.n	8000584 <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	799a      	ldrb	r2, [r3, #6]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 8000582:	2300      	movs	r3, #0
}
 8000584:	4618      	mov	r0, r3
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8000590:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <MX_CAN1_Init+0x64>)
 8000592:	4a18      	ldr	r2, [pc, #96]	; (80005f4 <MX_CAN1_Init+0x68>)
 8000594:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000596:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <MX_CAN1_Init+0x64>)
 8000598:	2209      	movs	r2, #9
 800059a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800059c:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <MX_CAN1_Init+0x64>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005a2:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005ae:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005b6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005b8:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005be:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005c4:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005d0:	4b07      	ldr	r3, [pc, #28]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005d8:	2200      	movs	r2, #0
 80005da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005dc:	4804      	ldr	r0, [pc, #16]	; (80005f0 <MX_CAN1_Init+0x64>)
 80005de:	f001 fb73 	bl	8001cc8 <HAL_CAN_Init>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005e8:	f000 fda4 	bl	8001134 <Error_Handler>
  }

}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	2000015c 	.word	0x2000015c
 80005f4:	40006400 	.word	0x40006400

080005f8 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 80005fc:	4b17      	ldr	r3, [pc, #92]	; (800065c <MX_CAN2_Init+0x64>)
 80005fe:	4a18      	ldr	r2, [pc, #96]	; (8000660 <MX_CAN2_Init+0x68>)
 8000600:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8000602:	4b16      	ldr	r3, [pc, #88]	; (800065c <MX_CAN2_Init+0x64>)
 8000604:	2209      	movs	r2, #9
 8000606:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_CAN2_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800060e:	4b13      	ldr	r3, [pc, #76]	; (800065c <MX_CAN2_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000614:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_CAN2_Init+0x64>)
 8000616:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800061a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_CAN2_Init+0x64>)
 800061e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000622:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <MX_CAN2_Init+0x64>)
 8000626:	2200      	movs	r2, #0
 8000628:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_CAN2_Init+0x64>)
 800062c:	2200      	movs	r2, #0
 800062e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <MX_CAN2_Init+0x64>)
 8000632:	2200      	movs	r2, #0
 8000634:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_CAN2_Init+0x64>)
 8000638:	2200      	movs	r2, #0
 800063a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <MX_CAN2_Init+0x64>)
 800063e:	2200      	movs	r2, #0
 8000640:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_CAN2_Init+0x64>)
 8000644:	2200      	movs	r2, #0
 8000646:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <MX_CAN2_Init+0x64>)
 800064a:	f001 fb3d 	bl	8001cc8 <HAL_CAN_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000654:	f000 fd6e 	bl	8001134 <Error_Handler>
  }

}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000134 	.word	0x20000134
 8000660:	40006800 	.word	0x40006800

08000664 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08c      	sub	sp, #48	; 0x30
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a53      	ldr	r2, [pc, #332]	; (80007d0 <HAL_CAN_MspInit+0x16c>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d13d      	bne.n	8000702 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000686:	4b53      	ldr	r3, [pc, #332]	; (80007d4 <HAL_CAN_MspInit+0x170>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	3301      	adds	r3, #1
 800068c:	4a51      	ldr	r2, [pc, #324]	; (80007d4 <HAL_CAN_MspInit+0x170>)
 800068e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000690:	4b50      	ldr	r3, [pc, #320]	; (80007d4 <HAL_CAN_MspInit+0x170>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d10d      	bne.n	80006b4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]
 800069c:	4b4e      	ldr	r3, [pc, #312]	; (80007d8 <HAL_CAN_MspInit+0x174>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	4a4d      	ldr	r2, [pc, #308]	; (80007d8 <HAL_CAN_MspInit+0x174>)
 80006a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
 80006a8:	4b4b      	ldr	r3, [pc, #300]	; (80007d8 <HAL_CAN_MspInit+0x174>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006b0:	61bb      	str	r3, [r7, #24]
 80006b2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	4b47      	ldr	r3, [pc, #284]	; (80007d8 <HAL_CAN_MspInit+0x174>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006bc:	4a46      	ldr	r2, [pc, #280]	; (80007d8 <HAL_CAN_MspInit+0x174>)
 80006be:	f043 0308 	orr.w	r3, r3, #8
 80006c2:	6313      	str	r3, [r2, #48]	; 0x30
 80006c4:	4b44      	ldr	r3, [pc, #272]	; (80007d8 <HAL_CAN_MspInit+0x174>)
 80006c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c8:	f003 0308 	and.w	r3, r3, #8
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006d0:	2303      	movs	r3, #3
 80006d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d4:	2302      	movs	r3, #2
 80006d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006dc:	2303      	movs	r3, #3
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006e0:	2309      	movs	r3, #9
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	483c      	ldr	r0, [pc, #240]	; (80007dc <HAL_CAN_MspInit+0x178>)
 80006ec:	f002 fd5c 	bl	80031a8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2100      	movs	r1, #0
 80006f4:	2014      	movs	r0, #20
 80006f6:	f002 fa1a 	bl	8002b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006fa:	2014      	movs	r0, #20
 80006fc:	f002 fa33 	bl	8002b66 <HAL_NVIC_EnableIRQ>

	HAL_CAN_Start(&hcan1);
	HAL_CAN_Start(&hcan2);
  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000700:	e061      	b.n	80007c6 <HAL_CAN_MspInit+0x162>
  else if(canHandle->Instance==CAN2)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a36      	ldr	r2, [pc, #216]	; (80007e0 <HAL_CAN_MspInit+0x17c>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d15c      	bne.n	80007c6 <HAL_CAN_MspInit+0x162>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800070c:	2300      	movs	r3, #0
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	4b31      	ldr	r3, [pc, #196]	; (80007d8 <HAL_CAN_MspInit+0x174>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	4a30      	ldr	r2, [pc, #192]	; (80007d8 <HAL_CAN_MspInit+0x174>)
 8000716:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800071a:	6413      	str	r3, [r2, #64]	; 0x40
 800071c:	4b2e      	ldr	r3, [pc, #184]	; (80007d8 <HAL_CAN_MspInit+0x174>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000728:	4b2a      	ldr	r3, [pc, #168]	; (80007d4 <HAL_CAN_MspInit+0x170>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	3301      	adds	r3, #1
 800072e:	4a29      	ldr	r2, [pc, #164]	; (80007d4 <HAL_CAN_MspInit+0x170>)
 8000730:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000732:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <HAL_CAN_MspInit+0x170>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d10d      	bne.n	8000756 <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <HAL_CAN_MspInit+0x174>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	4a25      	ldr	r2, [pc, #148]	; (80007d8 <HAL_CAN_MspInit+0x174>)
 8000744:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000748:	6413      	str	r3, [r2, #64]	; 0x40
 800074a:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <HAL_CAN_MspInit+0x174>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <HAL_CAN_MspInit+0x174>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a1e      	ldr	r2, [pc, #120]	; (80007d8 <HAL_CAN_MspInit+0x174>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <HAL_CAN_MspInit+0x174>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000772:	2360      	movs	r3, #96	; 0x60
 8000774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077e:	2303      	movs	r3, #3
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000782:	2309      	movs	r3, #9
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	4619      	mov	r1, r3
 800078c:	4815      	ldr	r0, [pc, #84]	; (80007e4 <HAL_CAN_MspInit+0x180>)
 800078e:	f002 fd0b 	bl	80031a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2100      	movs	r1, #0
 8000796:	2041      	movs	r0, #65	; 0x41
 8000798:	f002 f9c9 	bl	8002b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800079c:	2041      	movs	r0, #65	; 0x41
 800079e:	f002 f9e2 	bl	8002b66 <HAL_NVIC_EnableIRQ>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80007a2:	2102      	movs	r1, #2
 80007a4:	4810      	ldr	r0, [pc, #64]	; (80007e8 <HAL_CAN_MspInit+0x184>)
 80007a6:	f001 fe9c 	bl	80024e2 <HAL_CAN_ActivateNotification>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 80007aa:	2101      	movs	r1, #1
 80007ac:	480e      	ldr	r0, [pc, #56]	; (80007e8 <HAL_CAN_MspInit+0x184>)
 80007ae:	f001 fe98 	bl	80024e2 <HAL_CAN_ActivateNotification>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
 80007b2:	2110      	movs	r1, #16
 80007b4:	480d      	ldr	r0, [pc, #52]	; (80007ec <HAL_CAN_MspInit+0x188>)
 80007b6:	f001 fe94 	bl	80024e2 <HAL_CAN_ActivateNotification>
	HAL_CAN_Start(&hcan1);
 80007ba:	480b      	ldr	r0, [pc, #44]	; (80007e8 <HAL_CAN_MspInit+0x184>)
 80007bc:	f001 fc60 	bl	8002080 <HAL_CAN_Start>
	HAL_CAN_Start(&hcan2);
 80007c0:	480a      	ldr	r0, [pc, #40]	; (80007ec <HAL_CAN_MspInit+0x188>)
 80007c2:	f001 fc5d 	bl	8002080 <HAL_CAN_Start>
}
 80007c6:	bf00      	nop
 80007c8:	3730      	adds	r7, #48	; 0x30
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40006400 	.word	0x40006400
 80007d4:	2000009c 	.word	0x2000009c
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020c00 	.word	0x40020c00
 80007e0:	40006800 	.word	0x40006800
 80007e4:	40020400 	.word	0x40020400
 80007e8:	2000015c 	.word	0x2000015c
 80007ec:	20000134 	.word	0x20000134

080007f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_DMA_Init+0x3c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a0b      	ldr	r2, [pc, #44]	; (800082c <MX_DMA_Init+0x3c>)
 8000800:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_DMA_Init+0x3c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	2100      	movs	r1, #0
 8000816:	200c      	movs	r0, #12
 8000818:	f002 f989 	bl	8002b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800081c:	200c      	movs	r0, #12
 800081e:	f002 f9a2 	bl	8002b66 <HAL_NVIC_EnableIRQ>

}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800

08000830 <ENCODER_Init>:
CAN_FilterTypeDef canfil_2;
//uint8_t incoming[8];
//CAN_RxHeaderTypeDef RxHeader;

void ENCODER_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  //Assign each encoder to one of the two CAN buses
	encoderLeft.hcan = &hcan1;
 8000834:	4b2e      	ldr	r3, [pc, #184]	; (80008f0 <ENCODER_Init+0xc0>)
 8000836:	4a2f      	ldr	r2, [pc, #188]	; (80008f4 <ENCODER_Init+0xc4>)
 8000838:	601a      	str	r2, [r3, #0]
	encoderRight.hcan = &hcan2;
 800083a:	4b2f      	ldr	r3, [pc, #188]	; (80008f8 <ENCODER_Init+0xc8>)
 800083c:	4a2f      	ldr	r2, [pc, #188]	; (80008fc <ENCODER_Init+0xcc>)
 800083e:	601a      	str	r2, [r3, #0]
	
	//Set Tx header for each encoder handle
	ENCODER_Set_TxHeader(&encoderLeft, ENC_ADDR_LEFT);
 8000840:	2101      	movs	r1, #1
 8000842:	482b      	ldr	r0, [pc, #172]	; (80008f0 <ENCODER_Init+0xc0>)
 8000844:	f000 f893 	bl	800096e <ENCODER_Set_TxHeader>
	ENCODER_Set_TxHeader(&encoderRight, ENC_ADDR_RIGHT);
 8000848:	2101      	movs	r1, #1
 800084a:	482b      	ldr	r0, [pc, #172]	; (80008f8 <ENCODER_Init+0xc8>)
 800084c:	f000 f88f 	bl	800096e <ENCODER_Set_TxHeader>
	 
	//Filter Config - FIFO1 is assigned to hcan1_right and FIFO1 is assigned to hcan2_left
	canfil_1.FilterBank = 0;
 8000850:	4b2b      	ldr	r3, [pc, #172]	; (8000900 <ENCODER_Init+0xd0>)
 8000852:	2200      	movs	r2, #0
 8000854:	615a      	str	r2, [r3, #20]
	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 8000856:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <ENCODER_Init+0xd0>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 800085c:	4b28      	ldr	r3, [pc, #160]	; (8000900 <ENCODER_Init+0xd0>)
 800085e:	2201      	movs	r2, #1
 8000860:	61da      	str	r2, [r3, #28]
	canfil_1.FilterIdHigh = 0x0000;
 8000862:	4b27      	ldr	r3, [pc, #156]	; (8000900 <ENCODER_Init+0xd0>)
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
	canfil_1.FilterIdLow = 0x0000;
 8000868:	4b25      	ldr	r3, [pc, #148]	; (8000900 <ENCODER_Init+0xd0>)
 800086a:	2200      	movs	r2, #0
 800086c:	605a      	str	r2, [r3, #4]
	canfil_1.FilterMaskIdHigh = 0x0000;
 800086e:	4b24      	ldr	r3, [pc, #144]	; (8000900 <ENCODER_Init+0xd0>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
	canfil_1.FilterMaskIdLow = 0x0000;
 8000874:	4b22      	ldr	r3, [pc, #136]	; (8000900 <ENCODER_Init+0xd0>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <ENCODER_Init+0xd0>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
	canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 8000880:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <ENCODER_Init+0xd0>)
 8000882:	2201      	movs	r2, #1
 8000884:	621a      	str	r2, [r3, #32]
	canfil_1.SlaveStartFilterBank = 14;
 8000886:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <ENCODER_Init+0xd0>)
 8000888:	220e      	movs	r2, #14
 800088a:	625a      	str	r2, [r3, #36]	; 0x24

	
	canfil_2.FilterBank = 14;
 800088c:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <ENCODER_Init+0xd4>)
 800088e:	220e      	movs	r2, #14
 8000890:	615a      	str	r2, [r3, #20]
	canfil_2.FilterMode = CAN_FILTERMODE_IDMASK;
 8000892:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <ENCODER_Init+0xd4>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
	canfil_2.FilterScale = CAN_FILTERSCALE_32BIT;
 8000898:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <ENCODER_Init+0xd4>)
 800089a:	2201      	movs	r2, #1
 800089c:	61da      	str	r2, [r3, #28]
	canfil_2.FilterIdHigh = 0x0000;
 800089e:	4b19      	ldr	r3, [pc, #100]	; (8000904 <ENCODER_Init+0xd4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
	canfil_2.FilterIdLow = 0x0000;
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <ENCODER_Init+0xd4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
	canfil_2.FilterMaskIdHigh = 0x0000;
 80008aa:	4b16      	ldr	r3, [pc, #88]	; (8000904 <ENCODER_Init+0xd4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
	canfil_2.FilterMaskIdLow = 0x0000;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <ENCODER_Init+0xd4>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
	canfil_2.FilterFIFOAssignment = CAN_RX_FIFO1;
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <ENCODER_Init+0xd4>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	611a      	str	r2, [r3, #16]
	canfil_2.FilterActivation = CAN_FILTER_ENABLE;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <ENCODER_Init+0xd4>)
 80008be:	2201      	movs	r2, #1
 80008c0:	621a      	str	r2, [r3, #32]
	canfil_2.SlaveStartFilterBank = 14;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <ENCODER_Init+0xd4>)
 80008c4:	220e      	movs	r2, #14
 80008c6:	625a      	str	r2, [r3, #36]	; 0x24

	if(HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK )	Error_Handler();
 80008c8:	490d      	ldr	r1, [pc, #52]	; (8000900 <ENCODER_Init+0xd0>)
 80008ca:	480a      	ldr	r0, [pc, #40]	; (80008f4 <ENCODER_Init+0xc4>)
 80008cc:	f001 faf8 	bl	8001ec0 <HAL_CAN_ConfigFilter>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <ENCODER_Init+0xaa>
 80008d6:	f000 fc2d 	bl	8001134 <Error_Handler>
	if(HAL_CAN_ConfigFilter(&hcan2, &canfil_2) != HAL_OK )	Error_Handler();
 80008da:	490a      	ldr	r1, [pc, #40]	; (8000904 <ENCODER_Init+0xd4>)
 80008dc:	4807      	ldr	r0, [pc, #28]	; (80008fc <ENCODER_Init+0xcc>)
 80008de:	f001 faef 	bl	8001ec0 <HAL_CAN_ConfigFilter>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <ENCODER_Init+0xbc>
 80008e8:	f000 fc24 	bl	8001134 <Error_Handler>

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200001ac 	.word	0x200001ac
 80008f4:	2000015c 	.word	0x2000015c
 80008f8:	200001fc 	.word	0x200001fc
 80008fc:	20000134 	.word	0x20000134
 8000900:	2000024c 	.word	0x2000024c
 8000904:	20000184 	.word	0x20000184

08000908 <ENCODER_Sort_Incoming>:

void ENCODER_Sort_Incoming(uint8_t* incoming_array, EncoderHandle* Encoder_ptr){
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
	Encoder_ptr->rawRead[0] = incoming_array[0];
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Encoder_ptr->rawRead[1] = incoming_array[1];
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	785a      	ldrb	r2, [r3, #1]
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Encoder_ptr->rawRead[2] = incoming_array[2];
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	789a      	ldrb	r2, [r3, #2]
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Encoder_ptr->rawRead[3] = incoming_array[3];
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	78da      	ldrb	r2, [r3, #3]
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	Encoder_ptr->rawRead[4] = incoming_array[4];
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	791a      	ldrb	r2, [r3, #4]
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Encoder_ptr->rawRead[5] = incoming_array[5];
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	795a      	ldrb	r2, [r3, #5]
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Encoder_ptr->rawRead[6] = incoming_array[6];
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	799a      	ldrb	r2, [r3, #6]
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Encoder_ptr->rawRead[7] = incoming_array[7];
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	79da      	ldrb	r2, [r3, #7]
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <ENCODER_Set_TxHeader>:

void ENCODER_Set_TxHeader(EncoderHandle* Encoder_ptr, uint32_t Encoder_Address){
 800096e:	b480      	push	{r7}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
 8000976:	6039      	str	r1, [r7, #0]
	Encoder_ptr->canTxHeader.DLC = 4;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2204      	movs	r2, #4
 800097c:	631a      	str	r2, [r3, #48]	; 0x30
	Encoder_ptr->canTxHeader.IDE = CAN_ID_STD;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2200      	movs	r2, #0
 8000982:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder_ptr->canTxHeader.RTR = CAN_RTR_DATA;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2200      	movs	r2, #0
 8000988:	62da      	str	r2, [r3, #44]	; 0x2c
	Encoder_ptr->canTxHeader.StdId = Encoder_Address;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	683a      	ldr	r2, [r7, #0]
 800098e:	621a      	str	r2, [r3, #32]
	Encoder_ptr->canTxHeader.TransmitGlobalTime = DISABLE;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2200      	movs	r2, #0
 8000994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Encoder_ptr->canTxHeader.ExtId = 0;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <ENCODER_Read>:

void ENCODER_Read(EncoderHandle* Encoder_ptr){
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b082      	sub	sp, #8
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
	Encoder_ptr->sendData[0] = Encoder_ptr->canTxHeader.DLC;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	Encoder_ptr->sendData[1] = Encoder_ptr->canTxHeader.StdId;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6a1b      	ldr	r3, [r3, #32]
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	Encoder_ptr->sendData[2] = 0x01;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2201      	movs	r2, #1
 80009ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	Encoder_ptr->sendData[3] = 0x00;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	
	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6818      	ldr	r0, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f103 0120 	add.w	r1, r3, #32
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f103 0244 	add.w	r2, r3, #68	; 0x44
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3338      	adds	r3, #56	; 0x38
 80009ee:	f001 fb8b 	bl	8002108 <HAL_CAN_AddTxMessage>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <ENCODER_Get_Angle>:
	Encoder_ptr->sendData[3] = 0x01;

	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
}

void ENCODER_Get_Angle(EncoderHandle* Encoder_ptr){
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
	ENCODER_Read(Encoder_ptr);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff ffd1 	bl	80009aa <ENCODER_Read>
	Encoder_ptr->angle32Bit.b8[0] = Encoder_ptr->rawRead[3];
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Encoder_ptr->angle32Bit.b8[1] = Encoder_ptr->rawRead[4];
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Encoder_ptr->angle32Bit.b8[2] = Encoder_ptr->rawRead[5];
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Encoder_ptr->angle32Bit.b8[3] = Encoder_ptr->rawRead[6];
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	Encoder_ptr->angleDeg = (Encoder_ptr->rawRead[3] + Encoder_ptr->rawRead[4]*0x100 + Encoder_ptr->rawRead[5]*0x10000)*360/0x1000;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8000a3e:	461a      	mov	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000a46:	021b      	lsls	r3, r3, #8
 8000a48:	441a      	add	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8000a50:	041b      	lsls	r3, r3, #16
 8000a52:	4413      	add	r3, r2
 8000a54:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000a58:	fb02 f303 	mul.w	r3, r2, r3
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	da01      	bge.n	8000a64 <ENCODER_Get_Angle+0x6a>
 8000a60:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000a64:	131b      	asrs	r3, r3, #12
 8000a66:	461a      	mov	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <MX_GPIO_Init>:
     PB13   ------> SPI2_SCK
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08c      	sub	sp, #48	; 0x30
 8000a78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61bb      	str	r3, [r7, #24]
 8000a8e:	4b82      	ldr	r3, [pc, #520]	; (8000c98 <MX_GPIO_Init+0x224>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a81      	ldr	r2, [pc, #516]	; (8000c98 <MX_GPIO_Init+0x224>)
 8000a94:	f043 0310 	orr.w	r3, r3, #16
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b7f      	ldr	r3, [pc, #508]	; (8000c98 <MX_GPIO_Init+0x224>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0310 	and.w	r3, r3, #16
 8000aa2:	61bb      	str	r3, [r7, #24]
 8000aa4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	4b7b      	ldr	r3, [pc, #492]	; (8000c98 <MX_GPIO_Init+0x224>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a7a      	ldr	r2, [pc, #488]	; (8000c98 <MX_GPIO_Init+0x224>)
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b78      	ldr	r3, [pc, #480]	; (8000c98 <MX_GPIO_Init+0x224>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0304 	and.w	r3, r3, #4
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b74      	ldr	r3, [pc, #464]	; (8000c98 <MX_GPIO_Init+0x224>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a73      	ldr	r2, [pc, #460]	; (8000c98 <MX_GPIO_Init+0x224>)
 8000acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b71      	ldr	r3, [pc, #452]	; (8000c98 <MX_GPIO_Init+0x224>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b6d      	ldr	r3, [pc, #436]	; (8000c98 <MX_GPIO_Init+0x224>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a6c      	ldr	r2, [pc, #432]	; (8000c98 <MX_GPIO_Init+0x224>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b6a      	ldr	r3, [pc, #424]	; (8000c98 <MX_GPIO_Init+0x224>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	4b66      	ldr	r3, [pc, #408]	; (8000c98 <MX_GPIO_Init+0x224>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a65      	ldr	r2, [pc, #404]	; (8000c98 <MX_GPIO_Init+0x224>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b63      	ldr	r3, [pc, #396]	; (8000c98 <MX_GPIO_Init+0x224>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	4b5f      	ldr	r3, [pc, #380]	; (8000c98 <MX_GPIO_Init+0x224>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a5e      	ldr	r2, [pc, #376]	; (8000c98 <MX_GPIO_Init+0x224>)
 8000b20:	f043 0308 	orr.w	r3, r3, #8
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b5c      	ldr	r3, [pc, #368]	; (8000c98 <MX_GPIO_Init+0x224>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8000b32:	2200      	movs	r2, #0
 8000b34:	213f      	movs	r1, #63	; 0x3f
 8000b36:	4859      	ldr	r0, [pc, #356]	; (8000c9c <MX_GPIO_Init+0x228>)
 8000b38:	f002 fcfa 	bl	8003530 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2110      	movs	r1, #16
 8000b40:	4857      	ldr	r0, [pc, #348]	; (8000ca0 <MX_GPIO_Init+0x22c>)
 8000b42:	f002 fcf5 	bl	8003530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8000b46:	2200      	movs	r2, #0
 8000b48:	219b      	movs	r1, #155	; 0x9b
 8000b4a:	4856      	ldr	r0, [pc, #344]	; (8000ca4 <MX_GPIO_Init+0x230>)
 8000b4c:	f002 fcf0 	bl	8003530 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8000b56:	4854      	ldr	r0, [pc, #336]	; (8000ca8 <MX_GPIO_Init+0x234>)
 8000b58:	f002 fcea 	bl	8003530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f64e 4108 	movw	r1, #60424	; 0xec08
 8000b62:	4852      	ldr	r0, [pc, #328]	; (8000cac <MX_GPIO_Init+0x238>)
 8000b64:	f002 fce4 	bl	8003530 <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8000b68:	2307      	movs	r3, #7
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b70:	2302      	movs	r3, #2
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	484b      	ldr	r0, [pc, #300]	; (8000ca8 <MX_GPIO_Init+0x234>)
 8000b7c:	f002 fb14 	bl	80031a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 8000b80:	f248 1378 	movw	r3, #33144	; 0x8178
 8000b84:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	4844      	ldr	r0, [pc, #272]	; (8000ca8 <MX_GPIO_Init+0x234>)
 8000b96:	f002 fb07 	bl	80031a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8000b9a:	233f      	movs	r3, #63	; 0x3f
 8000b9c:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000baa:	f107 031c 	add.w	r3, r7, #28
 8000bae:	4619      	mov	r1, r3
 8000bb0:	483a      	ldr	r0, [pc, #232]	; (8000c9c <MX_GPIO_Init+0x228>)
 8000bb2:	f002 faf9 	bl	80031a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8000bb6:	2310      	movs	r3, #16
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4834      	ldr	r0, [pc, #208]	; (8000ca0 <MX_GPIO_Init+0x22c>)
 8000bce:	f002 faeb 	bl	80031a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8000bd2:	2380      	movs	r3, #128	; 0x80
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bd6:	4b36      	ldr	r3, [pc, #216]	; (8000cb0 <MX_GPIO_Init+0x23c>)
 8000bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	482e      	ldr	r0, [pc, #184]	; (8000ca0 <MX_GPIO_Init+0x22c>)
 8000be6:	f002 fadf 	bl	80031a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8000bea:	239b      	movs	r3, #155	; 0x9b
 8000bec:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4828      	ldr	r0, [pc, #160]	; (8000ca4 <MX_GPIO_Init+0x230>)
 8000c02:	f002 fad1 	bl	80031a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 8000c06:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4822      	ldr	r0, [pc, #136]	; (8000ca8 <MX_GPIO_Init+0x234>)
 8000c20:	f002 fac2 	bl	80031a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin|CUI_SPI2_MOSI_Pin;
 8000c24:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c36:	2305      	movs	r3, #5
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4818      	ldr	r0, [pc, #96]	; (8000ca4 <MX_GPIO_Init+0x230>)
 8000c42:	f002 fab1 	bl	80031a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8000c46:	f64e 4308 	movw	r3, #60424	; 0xec08
 8000c4a:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4813      	ldr	r0, [pc, #76]	; (8000cac <MX_GPIO_Init+0x238>)
 8000c60:	f002 faa2 	bl	80031a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 8000c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	480c      	ldr	r0, [pc, #48]	; (8000cac <MX_GPIO_Init+0x238>)
 8000c7a:	f002 fa95 	bl	80031a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	2017      	movs	r0, #23
 8000c84:	f001 ff53 	bl	8002b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c88:	2017      	movs	r0, #23
 8000c8a:	f001 ff6c 	bl	8002b66 <HAL_NVIC_EnableIRQ>

}
 8000c8e:	bf00      	nop
 8000c90:	3730      	adds	r7, #48	; 0x30
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020800 	.word	0x40020800
 8000ca0:	40020000 	.word	0x40020000
 8000ca4:	40020400 	.word	0x40020400
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40020c00 	.word	0x40020c00
 8000cb0:	10210000 	.word	0x10210000

08000cb4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <MX_I2C1_Init+0x74>)
 8000cba:	4a1c      	ldr	r2, [pc, #112]	; (8000d2c <MX_I2C1_Init+0x78>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000cbe:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <MX_I2C1_Init+0x74>)
 8000cc0:	4a1b      	ldr	r2, [pc, #108]	; (8000d30 <MX_I2C1_Init+0x7c>)
 8000cc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cc4:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <MX_I2C1_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cca:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <MX_I2C1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd0:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <MX_I2C1_Init+0x74>)
 8000cd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <MX_I2C1_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cde:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <MX_I2C1_Init+0x74>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce4:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <MX_I2C1_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_I2C1_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <MX_I2C1_Init+0x74>)
 8000cf2:	f002 fc4f 	bl	8003594 <HAL_I2C_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cfc:	f000 fa1a 	bl	8001134 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d00:	2100      	movs	r1, #0
 8000d02:	4809      	ldr	r0, [pc, #36]	; (8000d28 <MX_I2C1_Init+0x74>)
 8000d04:	f002 fd8a 	bl	800381c <HAL_I2CEx_ConfigAnalogFilter>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000d0e:	f000 fa11 	bl	8001134 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d12:	2100      	movs	r1, #0
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <MX_I2C1_Init+0x74>)
 8000d16:	f002 fdbd 	bl	8003894 <HAL_I2CEx_ConfigDigitalFilter>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000d20:	f000 fa08 	bl	8001134 <Error_Handler>
  }

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000274 	.word	0x20000274
 8000d2c:	40005400 	.word	0x40005400
 8000d30:	00061a80 	.word	0x00061a80

08000d34 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <HAL_I2C_MspInit+0x84>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d12c      	bne.n	8000db0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_I2C_MspInit+0x88>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <HAL_I2C_MspInit+0x88>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_I2C_MspInit+0x88>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8000d72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d78:	2312      	movs	r3, #18
 8000d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d80:	2303      	movs	r3, #3
 8000d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d84:	2304      	movs	r3, #4
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <HAL_I2C_MspInit+0x8c>)
 8000d90:	f002 fa0a 	bl	80031a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_I2C_MspInit+0x88>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <HAL_I2C_MspInit+0x88>)
 8000d9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000da2:	6413      	str	r3, [r2, #64]	; 0x40
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <HAL_I2C_MspInit+0x88>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000db0:	bf00      	nop
 8000db2:	3728      	adds	r7, #40	; 0x28
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40005400 	.word	0x40005400
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020400 	.word	0x40020400

08000dc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dca:	f000 fee7 	bl	8001b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dce:	f000 f8a7 	bl	8000f20 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 8000dd2:	f003 fa25 	bl	8004220 <HAL_RCC_GetHCLKFreq>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4a46      	ldr	r2, [pc, #280]	; (8000ef4 <main+0x130>)
 8000dda:	fba2 2303 	umull	r2, r3, r2, r3
 8000dde:	099b      	lsrs	r3, r3, #6
 8000de0:	4618      	mov	r0, r3
 8000de2:	f001 fece 	bl	8002b82 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000de6:	2004      	movs	r0, #4
 8000de8:	f001 fed8 	bl	8002b9c <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df4:	f001 fe9b 	bl	8002b2e <HAL_NVIC_SetPriority>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df8:	f7ff fe3c 	bl	8000a74 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dfc:	f7ff fcf8 	bl	80007f0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000e00:	f7ff ff58 	bl	8000cb4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000e04:	f000 fab0 	bl	8001368 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e08:	f000 fb4e 	bl	80014a8 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000e0c:	f000 fdf8 	bl	8001a00 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000e10:	f000 fbc4 	bl	800159c <MX_TIM3_Init>
  MX_TIM8_Init();
 8000e14:	f000 fc44 	bl	80016a0 <MX_TIM8_Init>
  MX_CAN1_Init();
 8000e18:	f7ff fbb8 	bl	800058c <MX_CAN1_Init>
  MX_CAN2_Init();
 8000e1c:	f7ff fbec 	bl	80005f8 <MX_CAN2_Init>
  MX_SPI1_Init();
 8000e20:	f000 f990 	bl	8001144 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //Initialize hardware communication
//  joystick_Init();
//  ADC_Init();
//  ADC_DataRequest();
  ENCODER_Init();
 8000e24:	f7ff fd04 	bl	8000830 <ENCODER_Init>
//  DWT_Init();
//  while(MPU6050_Init(&hi2c1)==1);
  HAL_Delay(100);
 8000e28:	2064      	movs	r0, #100	; 0x64
 8000e2a:	f000 ff29 	bl	8001c80 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t prev_time = HAL_GetTick();
 8000e2e:	f000 ff1b 	bl	8001c68 <HAL_GetTick>
 8000e32:	60f8      	str	r0, [r7, #12]


  HAL_Delay(500);
 8000e34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e38:	f000 ff22 	bl	8001c80 <HAL_Delay>
	ENCODER_Get_Angle(&encoderLeft);
 8000e3c:	482e      	ldr	r0, [pc, #184]	; (8000ef8 <main+0x134>)
 8000e3e:	f7ff fddc 	bl	80009fa <ENCODER_Get_Angle>
  	ENCODER_Get_Angle(&encoderRight);
 8000e42:	482e      	ldr	r0, [pc, #184]	; (8000efc <main+0x138>)
 8000e44:	f7ff fdd9 	bl	80009fa <ENCODER_Get_Angle>
  	HAL_Delay(500);
 8000e48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e4c:	f000 ff18 	bl	8001c80 <HAL_Delay>
  //debug variable
  uint32_t debug_prev_time = HAL_GetTick();
 8000e50:	f000 ff0a 	bl	8001c68 <HAL_GetTick>
 8000e54:	60b8      	str	r0, [r7, #8]
  uint8_t led_status = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	71fb      	strb	r3, [r7, #7]
//  float speed = 0;
  while (1)
  {
	//Code to debug with blinking LED
      if (HAL_GetTick() - debug_prev_time >= 1000){
 8000e5a:	f000 ff05 	bl	8001c68 <HAL_GetTick>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e68:	d317      	bcc.n	8000e9a <main+0xd6>
	  if (led_status == 0){
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d107      	bne.n	8000e80 <main+0xbc>
//	      count++;
	      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000e70:	2201      	movs	r2, #1
 8000e72:	2108      	movs	r1, #8
 8000e74:	4822      	ldr	r0, [pc, #136]	; (8000f00 <main+0x13c>)
 8000e76:	f002 fb5b 	bl	8003530 <HAL_GPIO_WritePin>
	      led_status = 1;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	71fb      	strb	r3, [r7, #7]
 8000e7e:	e009      	b.n	8000e94 <main+0xd0>
	  }
	  else if (led_status == 1){
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d106      	bne.n	8000e94 <main+0xd0>
	      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2108      	movs	r1, #8
 8000e8a:	481d      	ldr	r0, [pc, #116]	; (8000f00 <main+0x13c>)
 8000e8c:	f002 fb50 	bl	8003530 <HAL_GPIO_WritePin>
	      led_status = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	71fb      	strb	r3, [r7, #7]
	  }
	  debug_prev_time = HAL_GetTick();
 8000e94:	f000 fee8 	bl	8001c68 <HAL_GetTick>
 8000e98:	60b8      	str	r0, [r7, #8]
//      runMotor(&backMotor, 100, 1);

//      runMotor(&backMotor, speed++, 1);

    //Loop should execute once every 1 tick
    if(HAL_GetTick() - prev_time >= 100)
 8000e9a:	f000 fee5 	bl	8001c68 <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b63      	cmp	r3, #99	; 0x63
 8000ea6:	d9d8      	bls.n	8000e5a <main+0x96>
    {
//	ADC_DataRequest();

    	ENCODER_Get_Angle(&encoderLeft);
 8000ea8:	4813      	ldr	r0, [pc, #76]	; (8000ef8 <main+0x134>)
 8000eaa:	f7ff fda6 	bl	80009fa <ENCODER_Get_Angle>
    	ENCODER_Get_Angle(&encoderRight);
 8000eae:	4813      	ldr	r0, [pc, #76]	; (8000efc <main+0x138>)
 8000eb0:	f7ff fda3 	bl	80009fa <ENCODER_Get_Angle>

	//Get kamlan filtered angle from MPU6050
//	MPU6050_Read_All(&hi2c1, &MPU6050);
	GPIO_Digital_Filtered_Input(&button1, 30);
 8000eb4:	211e      	movs	r1, #30
 8000eb6:	4813      	ldr	r0, [pc, #76]	; (8000f04 <main+0x140>)
 8000eb8:	f7ff fb30 	bl	800051c <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&button2, 30);
 8000ebc:	211e      	movs	r1, #30
 8000ebe:	4812      	ldr	r0, [pc, #72]	; (8000f08 <main+0x144>)
 8000ec0:	f7ff fb2c 	bl	800051c <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&button3, 30);
 8000ec4:	211e      	movs	r1, #30
 8000ec6:	4811      	ldr	r0, [pc, #68]	; (8000f0c <main+0x148>)
 8000ec8:	f7ff fb28 	bl	800051c <GPIO_Digital_Filtered_Input>

	GPIO_Digital_Filtered_Input(&rearLS1, 5);
 8000ecc:	2105      	movs	r1, #5
 8000ece:	4810      	ldr	r0, [pc, #64]	; (8000f10 <main+0x14c>)
 8000ed0:	f7ff fb24 	bl	800051c <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&rearLS2, 5);
 8000ed4:	2105      	movs	r1, #5
 8000ed6:	480f      	ldr	r0, [pc, #60]	; (8000f14 <main+0x150>)
 8000ed8:	f7ff fb20 	bl	800051c <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&backLS1, 5);
 8000edc:	2105      	movs	r1, #5
 8000ede:	480e      	ldr	r0, [pc, #56]	; (8000f18 <main+0x154>)
 8000ee0:	f7ff fb1c 	bl	800051c <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&backLS2, 5);
 8000ee4:	2105      	movs	r1, #5
 8000ee6:	480d      	ldr	r0, [pc, #52]	; (8000f1c <main+0x158>)
 8000ee8:	f7ff fb18 	bl	800051c <GPIO_Digital_Filtered_Input>
//
//	//Climbing phase start



	prev_time = HAL_GetTick();
 8000eec:	f000 febc 	bl	8001c68 <HAL_GetTick>
 8000ef0:	60f8      	str	r0, [r7, #12]
      if (HAL_GetTick() - debug_prev_time >= 1000){
 8000ef2:	e7b2      	b.n	8000e5a <main+0x96>
 8000ef4:	10624dd3 	.word	0x10624dd3
 8000ef8:	200001ac 	.word	0x200001ac
 8000efc:	200001fc 	.word	0x200001fc
 8000f00:	40020400 	.word	0x40020400
 8000f04:	20000040 	.word	0x20000040
 8000f08:	20000050 	.word	0x20000050
 8000f0c:	20000060 	.word	0x20000060
 8000f10:	20000000 	.word	0x20000000
 8000f14:	20000010 	.word	0x20000010
 8000f18:	20000020 	.word	0x20000020
 8000f1c:	20000030 	.word	0x20000030

08000f20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b094      	sub	sp, #80	; 0x50
 8000f24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f26:	f107 0320 	add.w	r3, r7, #32
 8000f2a:	2230      	movs	r2, #48	; 0x30
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f005 f976 	bl	8006220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f44:	2300      	movs	r3, #0
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <SystemClock_Config+0xd8>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	4a2a      	ldr	r2, [pc, #168]	; (8000ff8 <SystemClock_Config+0xd8>)
 8000f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f52:	6413      	str	r3, [r2, #64]	; 0x40
 8000f54:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <SystemClock_Config+0xd8>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f60:	2300      	movs	r3, #0
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	4b25      	ldr	r3, [pc, #148]	; (8000ffc <SystemClock_Config+0xdc>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a24      	ldr	r2, [pc, #144]	; (8000ffc <SystemClock_Config+0xdc>)
 8000f6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <SystemClock_Config+0xdc>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f86:	2302      	movs	r3, #2
 8000f88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f90:	2308      	movs	r3, #8
 8000f92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000f94:	23b4      	movs	r3, #180	; 0xb4
 8000f96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa0:	f107 0320 	add.w	r3, r7, #32
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 fd05 	bl	80039b4 <HAL_RCC_OscConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fb0:	f000 f8c0 	bl	8001134 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fb4:	f002 fcae 	bl	8003914 <HAL_PWREx_EnableOverDrive>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000fbe:	f000 f8b9 	bl	8001134 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fd2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	2105      	movs	r1, #5
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f002 ff57 	bl	8003e94 <HAL_RCC_ClockConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000fec:	f000 f8a2 	bl	8001134 <Error_Handler>
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	3750      	adds	r7, #80	; 0x50
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40007000 	.word	0x40007000

08001000 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin){
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	2b80      	cmp	r3, #128	; 0x80
 800100e:	d11c      	bne.n	800104a <HAL_GPIO_EXTI_Callback+0x4a>
    case AD_BUSY_Pin:{
      if (HAL_GetTick()-prev_adc_time > 1){
 8001010:	f000 fe2a 	bl	8001c68 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <HAL_GPIO_EXTI_Callback+0x58>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b01      	cmp	r3, #1
 800101e:	d916      	bls.n	800104e <HAL_GPIO_EXTI_Callback+0x4e>
	  ADC_Read(&adc_rawData[0]);
 8001020:	480e      	ldr	r0, [pc, #56]	; (800105c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001022:	f7ff fa5f 	bl	80004e4 <ADC_Read>
	  tempJoyRawDataX = adc_rawData[0];
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001028:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102c:	461a      	mov	r2, r3
 800102e:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <HAL_GPIO_EXTI_Callback+0x60>)
 8001030:	601a      	str	r2, [r3, #0]
	  tempJoyRawDataY = adc_rawData[1];
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001034:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001038:	461a      	mov	r2, r3
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_GPIO_EXTI_Callback+0x64>)
 800103c:	601a      	str	r2, [r3, #0]
	  prev_adc_time = HAL_GetTick();
 800103e:	f000 fe13 	bl	8001c68 <HAL_GetTick>
 8001042:	4603      	mov	r3, r0
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <HAL_GPIO_EXTI_Callback+0x58>)
 8001046:	6013      	str	r3, [r2, #0]
      }
    }

      break;
 8001048:	e001      	b.n	800104e <HAL_GPIO_EXTI_Callback+0x4e>
    default:
      break;
 800104a:	bf00      	nop
 800104c:	e000      	b.n	8001050 <HAL_GPIO_EXTI_Callback+0x50>
      break;
 800104e:	bf00      	nop
  }
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200000a0 	.word	0x200000a0
 800105c:	20000340 	.word	0x20000340
 8001060:	200003b8 	.word	0x200003b8
 8001064:	200002c8 	.word	0x200002c8

08001068 <HAL_CAN_RxFifo0MsgPendingCallback>:
	}

}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	//Left Encoder Callback
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	if (hcan == &hcan1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a18      	ldr	r2, [pc, #96]	; (80010d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d112      	bne.n	800109e <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	4a16      	ldr	r2, [pc, #88]	; (80010d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800107e:	2100      	movs	r1, #0
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f001 f91c 	bl	80022be <HAL_CAN_GetRxMessage>
		if(incoming[1] == ENC_ADDR_LEFT)
 8001086:	7a7b      	ldrb	r3, [r7, #9]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d105      	bne.n	8001098 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
			ENCODER_Sort_Incoming(incoming, &encoderLeft);
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	4912      	ldr	r1, [pc, #72]	; (80010dc <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff fc38 	bl	8000908 <ENCODER_Sort_Incoming>
		ENCODER_Get_Angle(&encoderLeft);
 8001098:	4810      	ldr	r0, [pc, #64]	; (80010dc <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800109a:	f7ff fcae 	bl	80009fa <ENCODER_Get_Angle>

	}

	if (hcan == &hcan2)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a0f      	ldr	r2, [pc, #60]	; (80010e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d112      	bne.n	80010cc <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
		{
			HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80010ac:	2100      	movs	r1, #0
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f001 f905 	bl	80022be <HAL_CAN_GetRxMessage>
			if(incoming[1] == ENC_ADDR_RIGHT)
 80010b4:	7a7b      	ldrb	r3, [r7, #9]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d105      	bne.n	80010c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
				ENCODER_Sort_Incoming(incoming, &encoderRight);
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	4909      	ldr	r1, [pc, #36]	; (80010e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fc21 	bl	8000908 <ENCODER_Sort_Incoming>

			ENCODER_Get_Angle(&encoderRight);
 80010c6:	4807      	ldr	r0, [pc, #28]	; (80010e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 80010c8:	f7ff fc97 	bl	80009fa <ENCODER_Get_Angle>

		}
}
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	2000015c 	.word	0x2000015c
 80010d8:	200000a4 	.word	0x200000a4
 80010dc:	200001ac 	.word	0x200001ac
 80010e0:	20000134 	.word	0x20000134
 80010e4:	200001fc 	.word	0x200001fc

080010e8 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	//Right encoder callback
	if (hcan == &hcan2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <HAL_CAN_RxFifo1MsgPendingCallback+0x40>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d112      	bne.n	800111e <HAL_CAN_RxFifo1MsgPendingCallback+0x36>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &canRxHeader, incoming);
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	4a0b      	ldr	r2, [pc, #44]	; (800112c <HAL_CAN_RxFifo1MsgPendingCallback+0x44>)
 80010fe:	2101      	movs	r1, #1
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f001 f8dc 	bl	80022be <HAL_CAN_GetRxMessage>
		if(incoming[1] == ENC_ADDR_RIGHT)
 8001106:	7a7b      	ldrb	r3, [r7, #9]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d105      	bne.n	8001118 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
			ENCODER_Sort_Incoming(incoming, &encoderRight);
 800110c:	f107 0308 	add.w	r3, r7, #8
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <HAL_CAN_RxFifo1MsgPendingCallback+0x48>)
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fbf8 	bl	8000908 <ENCODER_Sort_Incoming>

		ENCODER_Get_Angle(&encoderRight);
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <HAL_CAN_RxFifo1MsgPendingCallback+0x48>)
 800111a:	f7ff fc6e 	bl	80009fa <ENCODER_Get_Angle>

	}
}
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000134 	.word	0x20000134
 800112c:	200000c0 	.word	0x200000c0
 8001130:	200001fc 	.word	0x200001fc

08001134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <MX_SPI1_Init+0x68>)
 800114a:	4a19      	ldr	r2, [pc, #100]	; (80011b0 <MX_SPI1_Init+0x6c>)
 800114c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <MX_SPI1_Init+0x68>)
 8001150:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001154:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <MX_SPI1_Init+0x68>)
 8001158:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800115c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <MX_SPI1_Init+0x68>)
 8001160:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001164:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_SPI1_Init+0x68>)
 8001168:	2202      	movs	r2, #2
 800116a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_SPI1_Init+0x68>)
 800116e:	2200      	movs	r2, #0
 8001170:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_SPI1_Init+0x68>)
 8001174:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001178:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_SPI1_Init+0x68>)
 800117c:	2228      	movs	r2, #40	; 0x28
 800117e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <MX_SPI1_Init+0x68>)
 8001182:	2200      	movs	r2, #0
 8001184:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_SPI1_Init+0x68>)
 8001188:	2200      	movs	r2, #0
 800118a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <MX_SPI1_Init+0x68>)
 800118e:	2200      	movs	r2, #0
 8001190:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_SPI1_Init+0x68>)
 8001194:	220a      	movs	r2, #10
 8001196:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <MX_SPI1_Init+0x68>)
 800119a:	f003 f875 	bl	8004288 <HAL_SPI_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80011a4:	f7ff ffc6 	bl	8001134 <Error_Handler>
  }

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200000dc 	.word	0x200000dc
 80011b0:	40013000 	.word	0x40013000

080011b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a19      	ldr	r2, [pc, #100]	; (8001238 <HAL_SPI_MspInit+0x84>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d12b      	bne.n	800122e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <HAL_SPI_MspInit+0x88>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	4a17      	ldr	r2, [pc, #92]	; (800123c <HAL_SPI_MspInit+0x88>)
 80011e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011e4:	6453      	str	r3, [r2, #68]	; 0x44
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_SPI_MspInit+0x88>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_SPI_MspInit+0x88>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a10      	ldr	r2, [pc, #64]	; (800123c <HAL_SPI_MspInit+0x88>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <HAL_SPI_MspInit+0x88>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 800120e:	2360      	movs	r3, #96	; 0x60
 8001210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	2303      	movs	r3, #3
 800121c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800121e:	2305      	movs	r3, #5
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <HAL_SPI_MspInit+0x8c>)
 800122a:	f001 ffbd 	bl	80031a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	; 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40013000 	.word	0x40013000
 800123c:	40023800 	.word	0x40023800
 8001240:	40020000 	.word	0x40020000

08001244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <HAL_MspInit+0x4c>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <HAL_MspInit+0x4c>)
 8001254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001258:	6453      	str	r3, [r2, #68]	; 0x44
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <HAL_MspInit+0x4c>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	603b      	str	r3, [r7, #0]
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_MspInit+0x4c>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	4a08      	ldr	r2, [pc, #32]	; (8001290 <HAL_MspInit+0x4c>)
 8001270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001274:	6413      	str	r3, [r2, #64]	; 0x40
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_MspInit+0x4c>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800

08001294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <HardFault_Handler+0x4>

080012a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <MemManage_Handler+0x4>

080012ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <BusFault_Handler+0x4>

080012b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <UsageFault_Handler+0x4>

080012ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e8:	f000 fcaa 	bl	8001c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <DMA1_Stream1_IRQHandler+0x10>)
 80012f6:	f001 fd1b 	bl	8002d30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200004bc 	.word	0x200004bc

08001304 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001308:	4802      	ldr	r0, [pc, #8]	; (8001314 <CAN1_RX0_IRQHandler+0x10>)
 800130a:	f001 f910 	bl	800252e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	2000015c 	.word	0x2000015c

08001318 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800131c:	2080      	movs	r0, #128	; 0x80
 800131e:	f002 f921 	bl	8003564 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <CAN2_RX1_IRQHandler+0x10>)
 800132e:	f001 f8fe 	bl	800252e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000134 	.word	0x20000134

0800133c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <SystemInit+0x28>)
 8001342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001346:	4a07      	ldr	r2, [pc, #28]	; (8001364 <SystemInit+0x28>)
 8001348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800134c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <SystemInit+0x28>)
 8001352:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001356:	609a      	str	r2, [r3, #8]
#endif
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b096      	sub	sp, #88	; 0x58
 800136c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]
 8001396:	615a      	str	r2, [r3, #20]
 8001398:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2220      	movs	r2, #32
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f004 ff3d 	bl	8006220 <memset>

  htim1.Instance = TIM1;
 80013a6:	4b3e      	ldr	r3, [pc, #248]	; (80014a0 <MX_TIM1_Init+0x138>)
 80013a8:	4a3e      	ldr	r2, [pc, #248]	; (80014a4 <MX_TIM1_Init+0x13c>)
 80013aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 80013ac:	4b3c      	ldr	r3, [pc, #240]	; (80014a0 <MX_TIM1_Init+0x138>)
 80013ae:	22b3      	movs	r2, #179	; 0xb3
 80013b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b2:	4b3b      	ldr	r3, [pc, #236]	; (80014a0 <MX_TIM1_Init+0x138>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80013b8:	4b39      	ldr	r3, [pc, #228]	; (80014a0 <MX_TIM1_Init+0x138>)
 80013ba:	2263      	movs	r2, #99	; 0x63
 80013bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013be:	4b38      	ldr	r3, [pc, #224]	; (80014a0 <MX_TIM1_Init+0x138>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013c4:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <MX_TIM1_Init+0x138>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ca:	4b35      	ldr	r3, [pc, #212]	; (80014a0 <MX_TIM1_Init+0x138>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013d0:	4833      	ldr	r0, [pc, #204]	; (80014a0 <MX_TIM1_Init+0x138>)
 80013d2:	f003 fb79 	bl	8004ac8 <HAL_TIM_Base_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80013dc:	f7ff feaa 	bl	8001134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013ea:	4619      	mov	r1, r3
 80013ec:	482c      	ldr	r0, [pc, #176]	; (80014a0 <MX_TIM1_Init+0x138>)
 80013ee:	f003 fd63 	bl	8004eb8 <HAL_TIM_ConfigClockSource>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80013f8:	f7ff fe9c 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013fc:	4828      	ldr	r0, [pc, #160]	; (80014a0 <MX_TIM1_Init+0x138>)
 80013fe:	f003 fb8e 	bl	8004b1e <HAL_TIM_PWM_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001408:	f7ff fe94 	bl	8001134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001414:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001418:	4619      	mov	r1, r3
 800141a:	4821      	ldr	r0, [pc, #132]	; (80014a0 <MX_TIM1_Init+0x138>)
 800141c:	f004 fa24 	bl	8005868 <HAL_TIMEx_MasterConfigSynchronization>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001426:	f7ff fe85 	bl	8001134 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800142a:	2360      	movs	r3, #96	; 0x60
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001432:	2300      	movs	r3, #0
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001436:	2300      	movs	r3, #0
 8001438:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001442:	2300      	movs	r3, #0
 8001444:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144a:	2204      	movs	r2, #4
 800144c:	4619      	mov	r1, r3
 800144e:	4814      	ldr	r0, [pc, #80]	; (80014a0 <MX_TIM1_Init+0x138>)
 8001450:	f003 fc6c 	bl	8004d2c <HAL_TIM_PWM_ConfigChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800145a:	f7ff fe6b 	bl	8001134 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001472:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001476:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	4619      	mov	r1, r3
 8001480:	4807      	ldr	r0, [pc, #28]	; (80014a0 <MX_TIM1_Init+0x138>)
 8001482:	f004 fa6d 	bl	8005960 <HAL_TIMEx_ConfigBreakDeadTime>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800148c:	f7ff fe52 	bl	8001134 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001490:	4803      	ldr	r0, [pc, #12]	; (80014a0 <MX_TIM1_Init+0x138>)
 8001492:	f000 fa2b 	bl	80018ec <HAL_TIM_MspPostInit>

}
 8001496:	bf00      	nop
 8001498:	3758      	adds	r7, #88	; 0x58
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2000043c 	.word	0x2000043c
 80014a4:	40010000 	.word	0x40010000

080014a8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	; 0x28
 80014ac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ae:	f107 0318 	add.w	r3, r7, #24
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014bc:	f107 0310 	add.w	r3, r7, #16
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014c6:	463b      	mov	r3, r7
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 80014d2:	4b31      	ldr	r3, [pc, #196]	; (8001598 <MX_TIM2_Init+0xf0>)
 80014d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 80014da:	4b2f      	ldr	r3, [pc, #188]	; (8001598 <MX_TIM2_Init+0xf0>)
 80014dc:	22b3      	movs	r2, #179	; 0xb3
 80014de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e0:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <MX_TIM2_Init+0xf0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536-1;
 80014e6:	4b2c      	ldr	r3, [pc, #176]	; (8001598 <MX_TIM2_Init+0xf0>)
 80014e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ee:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <MX_TIM2_Init+0xf0>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f4:	4b28      	ldr	r3, [pc, #160]	; (8001598 <MX_TIM2_Init+0xf0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014fa:	4827      	ldr	r0, [pc, #156]	; (8001598 <MX_TIM2_Init+0xf0>)
 80014fc:	f003 fae4 	bl	8004ac8 <HAL_TIM_Base_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8001506:	f7ff fe15 	bl	8001134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001510:	f107 0318 	add.w	r3, r7, #24
 8001514:	4619      	mov	r1, r3
 8001516:	4820      	ldr	r0, [pc, #128]	; (8001598 <MX_TIM2_Init+0xf0>)
 8001518:	f003 fcce 	bl	8004eb8 <HAL_TIM_ConfigClockSource>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001522:	f7ff fe07 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001526:	481c      	ldr	r0, [pc, #112]	; (8001598 <MX_TIM2_Init+0xf0>)
 8001528:	f003 fb2e 	bl	8004b88 <HAL_TIM_IC_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001532:	f7ff fdff 	bl	8001134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800153e:	f107 0310 	add.w	r3, r7, #16
 8001542:	4619      	mov	r1, r3
 8001544:	4814      	ldr	r0, [pc, #80]	; (8001598 <MX_TIM2_Init+0xf0>)
 8001546:	f004 f98f 	bl	8005868 <HAL_TIMEx_MasterConfigSynchronization>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001550:	f7ff fdf0 	bl	8001134 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001554:	2300      	movs	r3, #0
 8001556:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001558:	2301      	movs	r3, #1
 800155a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001564:	463b      	mov	r3, r7
 8001566:	2208      	movs	r2, #8
 8001568:	4619      	mov	r1, r3
 800156a:	480b      	ldr	r0, [pc, #44]	; (8001598 <MX_TIM2_Init+0xf0>)
 800156c:	f003 fb41 	bl	8004bf2 <HAL_TIM_IC_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001576:	f7ff fddd 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800157a:	463b      	mov	r3, r7
 800157c:	220c      	movs	r2, #12
 800157e:	4619      	mov	r1, r3
 8001580:	4805      	ldr	r0, [pc, #20]	; (8001598 <MX_TIM2_Init+0xf0>)
 8001582:	f003 fb36 	bl	8004bf2 <HAL_TIM_IC_ConfigChannel>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 800158c:	f7ff fdd2 	bl	8001134 <Error_Handler>
  }

}
 8001590:	bf00      	nop
 8001592:	3728      	adds	r7, #40	; 0x28
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	2000047c 	.word	0x2000047c

0800159c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08e      	sub	sp, #56	; 0x38
 80015a0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b0:	f107 0320 	add.w	r3, r7, #32
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
 80015c8:	615a      	str	r2, [r3, #20]
 80015ca:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80015cc:	4b32      	ldr	r3, [pc, #200]	; (8001698 <MX_TIM3_Init+0xfc>)
 80015ce:	4a33      	ldr	r2, [pc, #204]	; (800169c <MX_TIM3_Init+0x100>)
 80015d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 80015d2:	4b31      	ldr	r3, [pc, #196]	; (8001698 <MX_TIM3_Init+0xfc>)
 80015d4:	2259      	movs	r2, #89	; 0x59
 80015d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d8:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <MX_TIM3_Init+0xfc>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 80015de:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <MX_TIM3_Init+0xfc>)
 80015e0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80015e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015e6:	4b2c      	ldr	r3, [pc, #176]	; (8001698 <MX_TIM3_Init+0xfc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ec:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <MX_TIM3_Init+0xfc>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015f2:	4829      	ldr	r0, [pc, #164]	; (8001698 <MX_TIM3_Init+0xfc>)
 80015f4:	f003 fa68 	bl	8004ac8 <HAL_TIM_Base_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80015fe:	f7ff fd99 	bl	8001134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001608:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800160c:	4619      	mov	r1, r3
 800160e:	4822      	ldr	r0, [pc, #136]	; (8001698 <MX_TIM3_Init+0xfc>)
 8001610:	f003 fc52 	bl	8004eb8 <HAL_TIM_ConfigClockSource>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800161a:	f7ff fd8b 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800161e:	481e      	ldr	r0, [pc, #120]	; (8001698 <MX_TIM3_Init+0xfc>)
 8001620:	f003 fa7d 	bl	8004b1e <HAL_TIM_PWM_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800162a:	f7ff fd83 	bl	8001134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001636:	f107 0320 	add.w	r3, r7, #32
 800163a:	4619      	mov	r1, r3
 800163c:	4816      	ldr	r0, [pc, #88]	; (8001698 <MX_TIM3_Init+0xfc>)
 800163e:	f004 f913 	bl	8005868 <HAL_TIMEx_MasterConfigSynchronization>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001648:	f7ff fd74 	bl	8001134 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800164c:	2360      	movs	r3, #96	; 0x60
 800164e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8001650:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001654:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	2200      	movs	r2, #0
 8001662:	4619      	mov	r1, r3
 8001664:	480c      	ldr	r0, [pc, #48]	; (8001698 <MX_TIM3_Init+0xfc>)
 8001666:	f003 fb61 	bl	8004d2c <HAL_TIM_PWM_ConfigChannel>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001670:	f7ff fd60 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2204      	movs	r2, #4
 8001678:	4619      	mov	r1, r3
 800167a:	4807      	ldr	r0, [pc, #28]	; (8001698 <MX_TIM3_Init+0xfc>)
 800167c:	f003 fb56 	bl	8004d2c <HAL_TIM_PWM_ConfigChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001686:	f7ff fd55 	bl	8001134 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800168a:	4803      	ldr	r0, [pc, #12]	; (8001698 <MX_TIM3_Init+0xfc>)
 800168c:	f000 f92e 	bl	80018ec <HAL_TIM_MspPostInit>

}
 8001690:	bf00      	nop
 8001692:	3738      	adds	r7, #56	; 0x38
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	200003fc 	.word	0x200003fc
 800169c:	40000400 	.word	0x40000400

080016a0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b096      	sub	sp, #88	; 0x58
 80016a4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]
 80016ce:	615a      	str	r2, [r3, #20]
 80016d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	2220      	movs	r2, #32
 80016d6:	2100      	movs	r1, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f004 fda1 	bl	8006220 <memset>

  htim8.Instance = TIM8;
 80016de:	4b3d      	ldr	r3, [pc, #244]	; (80017d4 <MX_TIM8_Init+0x134>)
 80016e0:	4a3d      	ldr	r2, [pc, #244]	; (80017d8 <MX_TIM8_Init+0x138>)
 80016e2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 80016e4:	4b3b      	ldr	r3, [pc, #236]	; (80017d4 <MX_TIM8_Init+0x134>)
 80016e6:	22b3      	movs	r2, #179	; 0xb3
 80016e8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ea:	4b3a      	ldr	r3, [pc, #232]	; (80017d4 <MX_TIM8_Init+0x134>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 80016f0:	4b38      	ldr	r3, [pc, #224]	; (80017d4 <MX_TIM8_Init+0x134>)
 80016f2:	2263      	movs	r2, #99	; 0x63
 80016f4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f6:	4b37      	ldr	r3, [pc, #220]	; (80017d4 <MX_TIM8_Init+0x134>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016fc:	4b35      	ldr	r3, [pc, #212]	; (80017d4 <MX_TIM8_Init+0x134>)
 80016fe:	2200      	movs	r2, #0
 8001700:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001702:	4b34      	ldr	r3, [pc, #208]	; (80017d4 <MX_TIM8_Init+0x134>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001708:	4832      	ldr	r0, [pc, #200]	; (80017d4 <MX_TIM8_Init+0x134>)
 800170a:	f003 f9dd 	bl	8004ac8 <HAL_TIM_Base_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001714:	f7ff fd0e 	bl	8001134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800171e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001722:	4619      	mov	r1, r3
 8001724:	482b      	ldr	r0, [pc, #172]	; (80017d4 <MX_TIM8_Init+0x134>)
 8001726:	f003 fbc7 	bl	8004eb8 <HAL_TIM_ConfigClockSource>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001730:	f7ff fd00 	bl	8001134 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001734:	4827      	ldr	r0, [pc, #156]	; (80017d4 <MX_TIM8_Init+0x134>)
 8001736:	f003 f9f2 	bl	8004b1e <HAL_TIM_PWM_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001740:	f7ff fcf8 	bl	8001134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001744:	2300      	movs	r3, #0
 8001746:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800174c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001750:	4619      	mov	r1, r3
 8001752:	4820      	ldr	r0, [pc, #128]	; (80017d4 <MX_TIM8_Init+0x134>)
 8001754:	f004 f888 	bl	8005868 <HAL_TIMEx_MasterConfigSynchronization>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800175e:	f7ff fce9 	bl	8001134 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001762:	2360      	movs	r3, #96	; 0x60
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800176a:	2300      	movs	r3, #0
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001772:	2300      	movs	r3, #0
 8001774:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800177a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177e:	220c      	movs	r2, #12
 8001780:	4619      	mov	r1, r3
 8001782:	4814      	ldr	r0, [pc, #80]	; (80017d4 <MX_TIM8_Init+0x134>)
 8001784:	f003 fad2 	bl	8004d2c <HAL_TIM_PWM_ConfigChannel>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 800178e:	f7ff fcd1 	bl	8001134 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	4619      	mov	r1, r3
 80017b4:	4807      	ldr	r0, [pc, #28]	; (80017d4 <MX_TIM8_Init+0x134>)
 80017b6:	f004 f8d3 	bl	8005960 <HAL_TIMEx_ConfigBreakDeadTime>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM8_Init+0x124>
  {
    Error_Handler();
 80017c0:	f7ff fcb8 	bl	8001134 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 80017c4:	4803      	ldr	r0, [pc, #12]	; (80017d4 <MX_TIM8_Init+0x134>)
 80017c6:	f000 f891 	bl	80018ec <HAL_TIM_MspPostInit>

}
 80017ca:	bf00      	nop
 80017cc:	3758      	adds	r7, #88	; 0x58
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200003bc 	.word	0x200003bc
 80017d8:	40010400 	.word	0x40010400

080017dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08c      	sub	sp, #48	; 0x30
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 031c 	add.w	r3, r7, #28
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a37      	ldr	r2, [pc, #220]	; (80018d8 <HAL_TIM_Base_MspInit+0xfc>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d10e      	bne.n	800181c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	61bb      	str	r3, [r7, #24]
 8001802:	4b36      	ldr	r3, [pc, #216]	; (80018dc <HAL_TIM_Base_MspInit+0x100>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	4a35      	ldr	r2, [pc, #212]	; (80018dc <HAL_TIM_Base_MspInit+0x100>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6453      	str	r3, [r2, #68]	; 0x44
 800180e:	4b33      	ldr	r3, [pc, #204]	; (80018dc <HAL_TIM_Base_MspInit+0x100>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	61bb      	str	r3, [r7, #24]
 8001818:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800181a:	e059      	b.n	80018d0 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001824:	d12d      	bne.n	8001882 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	4b2c      	ldr	r3, [pc, #176]	; (80018dc <HAL_TIM_Base_MspInit+0x100>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	4a2b      	ldr	r2, [pc, #172]	; (80018dc <HAL_TIM_Base_MspInit+0x100>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6413      	str	r3, [r2, #64]	; 0x40
 8001836:	4b29      	ldr	r3, [pc, #164]	; (80018dc <HAL_TIM_Base_MspInit+0x100>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	4b25      	ldr	r3, [pc, #148]	; (80018dc <HAL_TIM_Base_MspInit+0x100>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a24      	ldr	r2, [pc, #144]	; (80018dc <HAL_TIM_Base_MspInit+0x100>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b22      	ldr	r3, [pc, #136]	; (80018dc <HAL_TIM_Base_MspInit+0x100>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin|ClimbSpeed_TIM2_CH4_Pin;
 800185e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001870:	2301      	movs	r3, #1
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001874:	f107 031c 	add.w	r3, r7, #28
 8001878:	4619      	mov	r1, r3
 800187a:	4819      	ldr	r0, [pc, #100]	; (80018e0 <HAL_TIM_Base_MspInit+0x104>)
 800187c:	f001 fc94 	bl	80031a8 <HAL_GPIO_Init>
}
 8001880:	e026      	b.n	80018d0 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM3)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a17      	ldr	r2, [pc, #92]	; (80018e4 <HAL_TIM_Base_MspInit+0x108>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d10e      	bne.n	80018aa <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_TIM_Base_MspInit+0x100>)
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	4a11      	ldr	r2, [pc, #68]	; (80018dc <HAL_TIM_Base_MspInit+0x100>)
 8001896:	f043 0302 	orr.w	r3, r3, #2
 800189a:	6413      	str	r3, [r2, #64]	; 0x40
 800189c:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_TIM_Base_MspInit+0x100>)
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
}
 80018a8:	e012      	b.n	80018d0 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM8)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a0e      	ldr	r2, [pc, #56]	; (80018e8 <HAL_TIM_Base_MspInit+0x10c>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d10d      	bne.n	80018d0 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <HAL_TIM_Base_MspInit+0x100>)
 80018ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018bc:	4a07      	ldr	r2, [pc, #28]	; (80018dc <HAL_TIM_Base_MspInit+0x100>)
 80018be:	f043 0302 	orr.w	r3, r3, #2
 80018c2:	6453      	str	r3, [r2, #68]	; 0x44
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_TIM_Base_MspInit+0x100>)
 80018c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	68bb      	ldr	r3, [r7, #8]
}
 80018d0:	bf00      	nop
 80018d2:	3730      	adds	r7, #48	; 0x30
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40010000 	.word	0x40010000
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020400 	.word	0x40020400
 80018e4:	40000400 	.word	0x40000400
 80018e8:	40010400 	.word	0x40010400

080018ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a37      	ldr	r2, [pc, #220]	; (80019e8 <HAL_TIM_MspPostInit+0xfc>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d11f      	bne.n	800194e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	4b36      	ldr	r3, [pc, #216]	; (80019ec <HAL_TIM_MspPostInit+0x100>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a35      	ldr	r2, [pc, #212]	; (80019ec <HAL_TIM_MspPostInit+0x100>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b33      	ldr	r3, [pc, #204]	; (80019ec <HAL_TIM_MspPostInit+0x100>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 800192a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800192e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800193c:	2301      	movs	r3, #1
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	4619      	mov	r1, r3
 8001946:	482a      	ldr	r0, [pc, #168]	; (80019f0 <HAL_TIM_MspPostInit+0x104>)
 8001948:	f001 fc2e 	bl	80031a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800194c:	e047      	b.n	80019de <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a28      	ldr	r2, [pc, #160]	; (80019f4 <HAL_TIM_MspPostInit+0x108>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d11e      	bne.n	8001996 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	4b23      	ldr	r3, [pc, #140]	; (80019ec <HAL_TIM_MspPostInit+0x100>)
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	4a22      	ldr	r2, [pc, #136]	; (80019ec <HAL_TIM_MspPostInit+0x100>)
 8001962:	f043 0304 	orr.w	r3, r3, #4
 8001966:	6313      	str	r3, [r2, #48]	; 0x30
 8001968:	4b20      	ldr	r3, [pc, #128]	; (80019ec <HAL_TIM_MspPostInit+0x100>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	f003 0304 	and.w	r3, r3, #4
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 8001974:	23c0      	movs	r3, #192	; 0xc0
 8001976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001984:	2302      	movs	r3, #2
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	481a      	ldr	r0, [pc, #104]	; (80019f8 <HAL_TIM_MspPostInit+0x10c>)
 8001990:	f001 fc0a 	bl	80031a8 <HAL_GPIO_Init>
}
 8001994:	e023      	b.n	80019de <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM8)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a18      	ldr	r2, [pc, #96]	; (80019fc <HAL_TIM_MspPostInit+0x110>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d11e      	bne.n	80019de <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <HAL_TIM_MspPostInit+0x100>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	4a10      	ldr	r2, [pc, #64]	; (80019ec <HAL_TIM_MspPostInit+0x100>)
 80019aa:	f043 0304 	orr.w	r3, r3, #4
 80019ae:	6313      	str	r3, [r2, #48]	; 0x30
 80019b0:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <HAL_TIM_MspPostInit+0x100>)
 80019b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Climb_TIM8_CH4_Pin;
 80019bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80019ce:	2303      	movs	r3, #3
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM8_CH4_GPIO_Port, &GPIO_InitStruct);
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	4619      	mov	r1, r3
 80019d8:	4807      	ldr	r0, [pc, #28]	; (80019f8 <HAL_TIM_MspPostInit+0x10c>)
 80019da:	f001 fbe5 	bl	80031a8 <HAL_GPIO_Init>
}
 80019de:	bf00      	nop
 80019e0:	3728      	adds	r7, #40	; 0x28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40010000 	.word	0x40010000
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020000 	.word	0x40020000
 80019f4:	40000400 	.word	0x40000400
 80019f8:	40020800 	.word	0x40020800
 80019fc:	40010400 	.word	0x40010400

08001a00 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <MX_USART3_UART_Init+0x4c>)
 8001a06:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <MX_USART3_UART_Init+0x50>)
 8001a08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <MX_USART3_UART_Init+0x4c>)
 8001a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <MX_USART3_UART_Init+0x4c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <MX_USART3_UART_Init+0x4c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <MX_USART3_UART_Init+0x4c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <MX_USART3_UART_Init+0x4c>)
 8001a26:	220c      	movs	r2, #12
 8001a28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <MX_USART3_UART_Init+0x4c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <MX_USART3_UART_Init+0x4c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a36:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_USART3_UART_Init+0x4c>)
 8001a38:	f003 ffe4 	bl	8005a04 <HAL_UART_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a42:	f7ff fb77 	bl	8001134 <Error_Handler>
  }

}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2000051c 	.word	0x2000051c
 8001a50:	40004800 	.word	0x40004800

08001a54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	; 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a30      	ldr	r2, [pc, #192]	; (8001b34 <HAL_UART_MspInit+0xe0>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d15a      	bne.n	8001b2c <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	4b2f      	ldr	r3, [pc, #188]	; (8001b38 <HAL_UART_MspInit+0xe4>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	4a2e      	ldr	r2, [pc, #184]	; (8001b38 <HAL_UART_MspInit+0xe4>)
 8001a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a84:	6413      	str	r3, [r2, #64]	; 0x40
 8001a86:	4b2c      	ldr	r3, [pc, #176]	; (8001b38 <HAL_UART_MspInit+0xe4>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b28      	ldr	r3, [pc, #160]	; (8001b38 <HAL_UART_MspInit+0xe4>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a27      	ldr	r2, [pc, #156]	; (8001b38 <HAL_UART_MspInit+0xe4>)
 8001a9c:	f043 0308 	orr.w	r3, r3, #8
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <HAL_UART_MspInit+0xe4>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 8001aae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abc:	2303      	movs	r3, #3
 8001abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ac0:	2307      	movs	r3, #7
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	481c      	ldr	r0, [pc, #112]	; (8001b3c <HAL_UART_MspInit+0xe8>)
 8001acc:	f001 fb6c 	bl	80031a8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <HAL_UART_MspInit+0xec>)
 8001ad2:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <HAL_UART_MspInit+0xf0>)
 8001ad4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <HAL_UART_MspInit+0xec>)
 8001ad8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001adc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <HAL_UART_MspInit+0xec>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <HAL_UART_MspInit+0xec>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <HAL_UART_MspInit+0xec>)
 8001aec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001af0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_UART_MspInit+0xec>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <HAL_UART_MspInit+0xec>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <HAL_UART_MspInit+0xec>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <HAL_UART_MspInit+0xec>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <HAL_UART_MspInit+0xec>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001b10:	480b      	ldr	r0, [pc, #44]	; (8001b40 <HAL_UART_MspInit+0xec>)
 8001b12:	f001 f85f 	bl	8002bd4 <HAL_DMA_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001b1c:	f7ff fb0a 	bl	8001134 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a07      	ldr	r2, [pc, #28]	; (8001b40 <HAL_UART_MspInit+0xec>)
 8001b24:	635a      	str	r2, [r3, #52]	; 0x34
 8001b26:	4a06      	ldr	r2, [pc, #24]	; (8001b40 <HAL_UART_MspInit+0xec>)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3728      	adds	r7, #40	; 0x28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40004800 	.word	0x40004800
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020c00 	.word	0x40020c00
 8001b40:	200004bc 	.word	0x200004bc
 8001b44:	40026028 	.word	0x40026028

08001b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b80 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b4e:	e003      	b.n	8001b58 <LoopCopyDataInit>

08001b50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b56:	3104      	adds	r1, #4

08001b58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b58:	480b      	ldr	r0, [pc, #44]	; (8001b88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b60:	d3f6      	bcc.n	8001b50 <CopyDataInit>
  ldr  r2, =_sbss
 8001b62:	4a0b      	ldr	r2, [pc, #44]	; (8001b90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b64:	e002      	b.n	8001b6c <LoopFillZerobss>

08001b66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b68:	f842 3b04 	str.w	r3, [r2], #4

08001b6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b70:	d3f9      	bcc.n	8001b66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b72:	f7ff fbe3 	bl	800133c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b76:	f004 fb2f 	bl	80061d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b7a:	f7ff f923 	bl	8000dc4 <main>
  bx  lr    
 8001b7e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b80:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001b84:	08006278 	.word	0x08006278
  ldr  r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b8c:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8001b90:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8001b94:	20000560 	.word	0x20000560

08001b98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b98:	e7fe      	b.n	8001b98 <ADC_IRQHandler>
	...

08001b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <HAL_Init+0x40>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a0d      	ldr	r2, [pc, #52]	; (8001bdc <HAL_Init+0x40>)
 8001ba6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001baa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_Init+0x40>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <HAL_Init+0x40>)
 8001bb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <HAL_Init+0x40>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a07      	ldr	r2, [pc, #28]	; (8001bdc <HAL_Init+0x40>)
 8001bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc4:	2003      	movs	r0, #3
 8001bc6:	f000 ffa7 	bl	8002b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f000 f808 	bl	8001be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd0:	f7ff fb38 	bl	8001244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023c00 	.word	0x40023c00

08001be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be8:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_InitTick+0x54>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_InitTick+0x58>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 ffbf 	bl	8002b82 <HAL_SYSTICK_Config>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00e      	b.n	8001c2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b0f      	cmp	r3, #15
 8001c12:	d80a      	bhi.n	8001c2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c14:	2200      	movs	r2, #0
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c1c:	f000 ff87 	bl	8002b2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c20:	4a06      	ldr	r2, [pc, #24]	; (8001c3c <HAL_InitTick+0x5c>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	e000      	b.n	8001c2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000070 	.word	0x20000070
 8001c38:	20000078 	.word	0x20000078
 8001c3c:	20000074 	.word	0x20000074

08001c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_IncTick+0x20>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_IncTick+0x24>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <HAL_IncTick+0x24>)
 8001c52:	6013      	str	r3, [r2, #0]
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000078 	.word	0x20000078
 8001c64:	2000055c 	.word	0x2000055c

08001c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <HAL_GetTick+0x14>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	2000055c 	.word	0x2000055c

08001c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c88:	f7ff ffee 	bl	8001c68 <HAL_GetTick>
 8001c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c98:	d005      	beq.n	8001ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <HAL_Delay+0x44>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ca6:	bf00      	nop
 8001ca8:	f7ff ffde 	bl	8001c68 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d8f7      	bhi.n	8001ca8 <HAL_Delay+0x28>
  {
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000078 	.word	0x20000078

08001cc8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e0ed      	b.n	8001eb6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d102      	bne.n	8001cec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7fe fcbc 	bl	8000664 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0202 	bic.w	r2, r2, #2
 8001cfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cfc:	f7ff ffb4 	bl	8001c68 <HAL_GetTick>
 8001d00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d02:	e012      	b.n	8001d2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d04:	f7ff ffb0 	bl	8001c68 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b0a      	cmp	r3, #10
 8001d10:	d90b      	bls.n	8001d2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2205      	movs	r2, #5
 8001d22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e0c5      	b.n	8001eb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1e5      	bne.n	8001d04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d48:	f7ff ff8e 	bl	8001c68 <HAL_GetTick>
 8001d4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d4e:	e012      	b.n	8001d76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d50:	f7ff ff8a 	bl	8001c68 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b0a      	cmp	r3, #10
 8001d5c:	d90b      	bls.n	8001d76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2205      	movs	r2, #5
 8001d6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e09f      	b.n	8001eb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0e5      	beq.n	8001d50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	7e1b      	ldrb	r3, [r3, #24]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d108      	bne.n	8001d9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	e007      	b.n	8001dae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	7e5b      	ldrb	r3, [r3, #25]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d108      	bne.n	8001dc8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	e007      	b.n	8001dd8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7e9b      	ldrb	r3, [r3, #26]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d108      	bne.n	8001df2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0220 	orr.w	r2, r2, #32
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	e007      	b.n	8001e02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0220 	bic.w	r2, r2, #32
 8001e00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7edb      	ldrb	r3, [r3, #27]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d108      	bne.n	8001e1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0210 	bic.w	r2, r2, #16
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	e007      	b.n	8001e2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0210 	orr.w	r2, r2, #16
 8001e2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7f1b      	ldrb	r3, [r3, #28]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d108      	bne.n	8001e46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0208 	orr.w	r2, r2, #8
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	e007      	b.n	8001e56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0208 	bic.w	r2, r2, #8
 8001e54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7f5b      	ldrb	r3, [r3, #29]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d108      	bne.n	8001e70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 0204 	orr.w	r2, r2, #4
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	e007      	b.n	8001e80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0204 	bic.w	r2, r2, #4
 8001e7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	ea42 0103 	orr.w	r1, r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	1e5a      	subs	r2, r3, #1
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ed6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ed8:	7cfb      	ldrb	r3, [r7, #19]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d003      	beq.n	8001ee6 <HAL_CAN_ConfigFilter+0x26>
 8001ede:	7cfb      	ldrb	r3, [r7, #19]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	f040 80be 	bne.w	8002062 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001ee6:	4b65      	ldr	r3, [pc, #404]	; (800207c <HAL_CAN_ConfigFilter+0x1bc>)
 8001ee8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ef0:	f043 0201 	orr.w	r2, r3, #1
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f00:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	021b      	lsls	r3, r3, #8
 8001f16:	431a      	orrs	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	f003 031f 	and.w	r3, r3, #31
 8001f26:	2201      	movs	r2, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	401a      	ands	r2, r3
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d123      	bne.n	8001f90 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	401a      	ands	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f6a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3248      	adds	r2, #72	; 0x48
 8001f70:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f84:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f86:	6979      	ldr	r1, [r7, #20]
 8001f88:	3348      	adds	r3, #72	; 0x48
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	440b      	add	r3, r1
 8001f8e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d122      	bne.n	8001fde <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fb8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	3248      	adds	r2, #72	; 0x48
 8001fbe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fd2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fd4:	6979      	ldr	r1, [r7, #20]
 8001fd6:	3348      	adds	r3, #72	; 0x48
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	440b      	add	r3, r1
 8001fdc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d109      	bne.n	8001ffa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001ff8:	e007      	b.n	800200a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	431a      	orrs	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d109      	bne.n	8002026 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	43db      	mvns	r3, r3
 800201c:	401a      	ands	r2, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002024:	e007      	b.n	8002036 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	431a      	orrs	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d107      	bne.n	800204e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	431a      	orrs	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002054:	f023 0201 	bic.w	r2, r3, #1
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	e006      	b.n	8002070 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
  }
}
 8002070:	4618      	mov	r0, r3
 8002072:	371c      	adds	r7, #28
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	40006400 	.word	0x40006400

08002080 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b01      	cmp	r3, #1
 8002092:	d12e      	bne.n	80020f2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0201 	bic.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020ac:	f7ff fddc 	bl	8001c68 <HAL_GetTick>
 80020b0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020b2:	e012      	b.n	80020da <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020b4:	f7ff fdd8 	bl	8001c68 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b0a      	cmp	r3, #10
 80020c0:	d90b      	bls.n	80020da <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2205      	movs	r2, #5
 80020d2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e012      	b.n	8002100 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1e5      	bne.n	80020b4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e006      	b.n	8002100 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
  }
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002108:	b480      	push	{r7}
 800210a:	b089      	sub	sp, #36	; 0x24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f893 3020 	ldrb.w	r3, [r3, #32]
 800211c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002126:	7ffb      	ldrb	r3, [r7, #31]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d003      	beq.n	8002134 <HAL_CAN_AddTxMessage+0x2c>
 800212c:	7ffb      	ldrb	r3, [r7, #31]
 800212e:	2b02      	cmp	r3, #2
 8002130:	f040 80b8 	bne.w	80022a4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10a      	bne.n	8002154 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002144:	2b00      	cmp	r3, #0
 8002146:	d105      	bne.n	8002154 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 80a0 	beq.w	8002294 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	0e1b      	lsrs	r3, r3, #24
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d907      	bls.n	8002174 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e09e      	b.n	80022b2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002174:	2201      	movs	r2, #1
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	409a      	lsls	r2, r3
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10d      	bne.n	80021a2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002190:	68f9      	ldr	r1, [r7, #12]
 8002192:	6809      	ldr	r1, [r1, #0]
 8002194:	431a      	orrs	r2, r3
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	3318      	adds	r3, #24
 800219a:	011b      	lsls	r3, r3, #4
 800219c:	440b      	add	r3, r1
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	e00f      	b.n	80021c2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021ac:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021b2:	68f9      	ldr	r1, [r7, #12]
 80021b4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80021b6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	3318      	adds	r3, #24
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	440b      	add	r3, r1
 80021c0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6819      	ldr	r1, [r3, #0]
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	3318      	adds	r3, #24
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	440b      	add	r3, r1
 80021d2:	3304      	adds	r3, #4
 80021d4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	7d1b      	ldrb	r3, [r3, #20]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d111      	bne.n	8002202 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	3318      	adds	r3, #24
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	4413      	add	r3, r2
 80021ea:	3304      	adds	r3, #4
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	6811      	ldr	r1, [r2, #0]
 80021f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	3318      	adds	r3, #24
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	440b      	add	r3, r1
 80021fe:	3304      	adds	r3, #4
 8002200:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3307      	adds	r3, #7
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	061a      	lsls	r2, r3, #24
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3306      	adds	r3, #6
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	041b      	lsls	r3, r3, #16
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3305      	adds	r3, #5
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	021b      	lsls	r3, r3, #8
 800221c:	4313      	orrs	r3, r2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	3204      	adds	r2, #4
 8002222:	7812      	ldrb	r2, [r2, #0]
 8002224:	4610      	mov	r0, r2
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	6811      	ldr	r1, [r2, #0]
 800222a:	ea43 0200 	orr.w	r2, r3, r0
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	440b      	add	r3, r1
 8002234:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002238:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3303      	adds	r3, #3
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	061a      	lsls	r2, r3, #24
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3302      	adds	r3, #2
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	041b      	lsls	r3, r3, #16
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3301      	adds	r3, #1
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	021b      	lsls	r3, r3, #8
 8002254:	4313      	orrs	r3, r2
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	7812      	ldrb	r2, [r2, #0]
 800225a:	4610      	mov	r0, r2
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	6811      	ldr	r1, [r2, #0]
 8002260:	ea43 0200 	orr.w	r2, r3, r0
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	440b      	add	r3, r1
 800226a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800226e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	3318      	adds	r3, #24
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	4413      	add	r3, r2
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	6811      	ldr	r1, [r2, #0]
 8002282:	f043 0201 	orr.w	r2, r3, #1
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	3318      	adds	r3, #24
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	440b      	add	r3, r1
 800228e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	e00e      	b.n	80022b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e006      	b.n	80022b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
  }
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3724      	adds	r7, #36	; 0x24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80022be:	b480      	push	{r7}
 80022c0:	b087      	sub	sp, #28
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022d2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d003      	beq.n	80022e2 <HAL_CAN_GetRxMessage+0x24>
 80022da:	7dfb      	ldrb	r3, [r7, #23]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	f040 80f3 	bne.w	80024c8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10e      	bne.n	8002306 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d116      	bne.n	8002324 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e0e7      	b.n	80024d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d107      	bne.n	8002324 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0d8      	b.n	80024d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	331b      	adds	r3, #27
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	4413      	add	r3, r2
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0204 	and.w	r2, r3, #4
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10c      	bne.n	800235c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	331b      	adds	r3, #27
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	4413      	add	r3, r2
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	0d5b      	lsrs	r3, r3, #21
 8002352:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	e00b      	b.n	8002374 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	331b      	adds	r3, #27
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	4413      	add	r3, r2
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	08db      	lsrs	r3, r3, #3
 800236c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	331b      	adds	r3, #27
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	4413      	add	r3, r2
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0202 	and.w	r2, r3, #2
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	331b      	adds	r3, #27
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	4413      	add	r3, r2
 8002396:	3304      	adds	r3, #4
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 020f 	and.w	r2, r3, #15
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	331b      	adds	r3, #27
 80023aa:	011b      	lsls	r3, r3, #4
 80023ac:	4413      	add	r3, r2
 80023ae:	3304      	adds	r3, #4
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	0a1b      	lsrs	r3, r3, #8
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	331b      	adds	r3, #27
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	4413      	add	r3, r2
 80023c6:	3304      	adds	r3, #4
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	0c1b      	lsrs	r3, r3, #16
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	011b      	lsls	r3, r3, #4
 80023da:	4413      	add	r3, r2
 80023dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	0a1a      	lsrs	r2, r3, #8
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	3301      	adds	r3, #1
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	4413      	add	r3, r2
 800240c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	0c1a      	lsrs	r2, r3, #16
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	3302      	adds	r3, #2
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	4413      	add	r3, r2
 8002426:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	0e1a      	lsrs	r2, r3, #24
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	3303      	adds	r3, #3
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	4413      	add	r3, r2
 8002440:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	3304      	adds	r3, #4
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	011b      	lsls	r3, r3, #4
 8002456:	4413      	add	r3, r2
 8002458:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	0a1a      	lsrs	r2, r3, #8
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	3305      	adds	r3, #5
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	4413      	add	r3, r2
 8002472:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	0c1a      	lsrs	r2, r3, #16
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	3306      	adds	r3, #6
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	4413      	add	r3, r2
 800248c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	0e1a      	lsrs	r2, r3, #24
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	3307      	adds	r3, #7
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d108      	bne.n	80024b4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f042 0220 	orr.w	r2, r2, #32
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	e007      	b.n	80024c4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691a      	ldr	r2, [r3, #16]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0220 	orr.w	r2, r2, #32
 80024c2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	e006      	b.n	80024d6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
  }
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	371c      	adds	r7, #28
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b085      	sub	sp, #20
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024f2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d002      	beq.n	8002500 <HAL_CAN_ActivateNotification+0x1e>
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d109      	bne.n	8002514 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6959      	ldr	r1, [r3, #20]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	e006      	b.n	8002522 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
  }
}
 8002522:	4618      	mov	r0, r3
 8002524:	3714      	adds	r7, #20
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b08a      	sub	sp, #40	; 0x28
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002536:	2300      	movs	r3, #0
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d07c      	beq.n	800266e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d023      	beq.n	80025c6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2201      	movs	r2, #1
 8002584:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 f983 	bl	800289c <HAL_CAN_TxMailbox0CompleteCallback>
 8002596:	e016      	b.n	80025c6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d004      	beq.n	80025ac <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
 80025aa:	e00c      	b.n	80025c6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d004      	beq.n	80025c0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
 80025be:	e002      	b.n	80025c6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f989 	bl	80028d8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d024      	beq.n	800261a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f963 	bl	80028b0 <HAL_CAN_TxMailbox1CompleteCallback>
 80025ea:	e016      	b.n	800261a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d004      	beq.n	8002600 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
 80025fe:	e00c      	b.n	800261a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002606:	2b00      	cmp	r3, #0
 8002608:	d004      	beq.n	8002614 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
 8002612:	e002      	b.n	800261a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f969 	bl	80028ec <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d024      	beq.n	800266e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800262c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f943 	bl	80028c4 <HAL_CAN_TxMailbox2CompleteCallback>
 800263e:	e016      	b.n	800266e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d004      	beq.n	8002654 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
 8002652:	e00c      	b.n	800266e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d004      	beq.n	8002668 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
 8002666:	e002      	b.n	800266e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f949 	bl	8002900 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00c      	beq.n	8002692 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	2b00      	cmp	r3, #0
 8002680:	d007      	beq.n	8002692 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002688:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2210      	movs	r2, #16
 8002690:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00b      	beq.n	80026b4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d006      	beq.n	80026b4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2208      	movs	r2, #8
 80026ac:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f930 	bl	8002914 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d009      	beq.n	80026d2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7fe fccb 	bl	8001068 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00c      	beq.n	80026f6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d007      	beq.n	80026f6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2210      	movs	r2, #16
 80026f4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00b      	beq.n	8002718 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d006      	beq.n	8002718 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2208      	movs	r2, #8
 8002710:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f908 	bl	8002928 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	2b00      	cmp	r3, #0
 8002720:	d009      	beq.n	8002736 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7fe fcd9 	bl	80010e8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00b      	beq.n	8002758 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	2b00      	cmp	r3, #0
 8002748:	d006      	beq.n	8002758 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2210      	movs	r2, #16
 8002750:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f8f2 	bl	800293c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00b      	beq.n	800277a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d006      	beq.n	800277a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2208      	movs	r2, #8
 8002772:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f8eb 	bl	8002950 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d07b      	beq.n	800287c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	2b00      	cmp	r3, #0
 800278c:	d072      	beq.n	8002874 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	f043 0302 	orr.w	r3, r3, #2
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	f043 0304 	orr.w	r3, r3, #4
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d043      	beq.n	8002874 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d03e      	beq.n	8002874 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027fc:	2b60      	cmp	r3, #96	; 0x60
 80027fe:	d02b      	beq.n	8002858 <HAL_CAN_IRQHandler+0x32a>
 8002800:	2b60      	cmp	r3, #96	; 0x60
 8002802:	d82e      	bhi.n	8002862 <HAL_CAN_IRQHandler+0x334>
 8002804:	2b50      	cmp	r3, #80	; 0x50
 8002806:	d022      	beq.n	800284e <HAL_CAN_IRQHandler+0x320>
 8002808:	2b50      	cmp	r3, #80	; 0x50
 800280a:	d82a      	bhi.n	8002862 <HAL_CAN_IRQHandler+0x334>
 800280c:	2b40      	cmp	r3, #64	; 0x40
 800280e:	d019      	beq.n	8002844 <HAL_CAN_IRQHandler+0x316>
 8002810:	2b40      	cmp	r3, #64	; 0x40
 8002812:	d826      	bhi.n	8002862 <HAL_CAN_IRQHandler+0x334>
 8002814:	2b30      	cmp	r3, #48	; 0x30
 8002816:	d010      	beq.n	800283a <HAL_CAN_IRQHandler+0x30c>
 8002818:	2b30      	cmp	r3, #48	; 0x30
 800281a:	d822      	bhi.n	8002862 <HAL_CAN_IRQHandler+0x334>
 800281c:	2b10      	cmp	r3, #16
 800281e:	d002      	beq.n	8002826 <HAL_CAN_IRQHandler+0x2f8>
 8002820:	2b20      	cmp	r3, #32
 8002822:	d005      	beq.n	8002830 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002824:	e01d      	b.n	8002862 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	f043 0308 	orr.w	r3, r3, #8
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800282e:	e019      	b.n	8002864 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	f043 0310 	orr.w	r3, r3, #16
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002838:	e014      	b.n	8002864 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	f043 0320 	orr.w	r3, r3, #32
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002842:	e00f      	b.n	8002864 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800284c:	e00a      	b.n	8002864 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002856:	e005      	b.n	8002864 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002860:	e000      	b.n	8002864 <HAL_CAN_IRQHandler+0x336>
            break;
 8002862:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699a      	ldr	r2, [r3, #24]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002872:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2204      	movs	r2, #4
 800287a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	2b00      	cmp	r3, #0
 8002880:	d008      	beq.n	8002894 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f868 	bl	8002964 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002894:	bf00      	nop
 8002896:	3728      	adds	r7, #40	; 0x28
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <__NVIC_SetPriorityGrouping+0x44>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002994:	4013      	ands	r3, r2
 8002996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029aa:	4a04      	ldr	r2, [pc, #16]	; (80029bc <__NVIC_SetPriorityGrouping+0x44>)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	60d3      	str	r3, [r2, #12]
}
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c4:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <__NVIC_GetPriorityGrouping+0x18>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	0a1b      	lsrs	r3, r3, #8
 80029ca:	f003 0307 	and.w	r3, r3, #7
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	db0b      	blt.n	8002a06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	f003 021f 	and.w	r2, r3, #31
 80029f4:	4907      	ldr	r1, [pc, #28]	; (8002a14 <__NVIC_EnableIRQ+0x38>)
 80029f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	2001      	movs	r0, #1
 80029fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	e000e100 	.word	0xe000e100

08002a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	6039      	str	r1, [r7, #0]
 8002a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	db0a      	blt.n	8002a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	490c      	ldr	r1, [pc, #48]	; (8002a64 <__NVIC_SetPriority+0x4c>)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	0112      	lsls	r2, r2, #4
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	440b      	add	r3, r1
 8002a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a40:	e00a      	b.n	8002a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	4908      	ldr	r1, [pc, #32]	; (8002a68 <__NVIC_SetPriority+0x50>)
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	3b04      	subs	r3, #4
 8002a50:	0112      	lsls	r2, r2, #4
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	440b      	add	r3, r1
 8002a56:	761a      	strb	r2, [r3, #24]
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000e100 	.word	0xe000e100
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b089      	sub	sp, #36	; 0x24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f1c3 0307 	rsb	r3, r3, #7
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	bf28      	it	cs
 8002a8a:	2304      	movcs	r3, #4
 8002a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3304      	adds	r3, #4
 8002a92:	2b06      	cmp	r3, #6
 8002a94:	d902      	bls.n	8002a9c <NVIC_EncodePriority+0x30>
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3b03      	subs	r3, #3
 8002a9a:	e000      	b.n	8002a9e <NVIC_EncodePriority+0x32>
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	401a      	ands	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ab4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	fa01 f303 	lsl.w	r3, r1, r3
 8002abe:	43d9      	mvns	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac4:	4313      	orrs	r3, r2
         );
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3724      	adds	r7, #36	; 0x24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
	...

08002ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ae4:	d301      	bcc.n	8002aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e00f      	b.n	8002b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aea:	4a0a      	ldr	r2, [pc, #40]	; (8002b14 <SysTick_Config+0x40>)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002af2:	210f      	movs	r1, #15
 8002af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002af8:	f7ff ff8e 	bl	8002a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <SysTick_Config+0x40>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b02:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <SysTick_Config+0x40>)
 8002b04:	2207      	movs	r2, #7
 8002b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	e000e010 	.word	0xe000e010

08002b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff ff29 	bl	8002978 <__NVIC_SetPriorityGrouping>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b086      	sub	sp, #24
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	4603      	mov	r3, r0
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
 8002b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b40:	f7ff ff3e 	bl	80029c0 <__NVIC_GetPriorityGrouping>
 8002b44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	6978      	ldr	r0, [r7, #20]
 8002b4c:	f7ff ff8e 	bl	8002a6c <NVIC_EncodePriority>
 8002b50:	4602      	mov	r2, r0
 8002b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff ff5d 	bl	8002a18 <__NVIC_SetPriority>
}
 8002b5e:	bf00      	nop
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff ff31 	bl	80029dc <__NVIC_EnableIRQ>
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff ffa2 	bl	8002ad4 <SysTick_Config>
 8002b90:	4603      	mov	r3, r0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d106      	bne.n	8002bb8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002baa:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a08      	ldr	r2, [pc, #32]	; (8002bd0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002bb0:	f043 0304 	orr.w	r3, r3, #4
 8002bb4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002bb6:	e005      	b.n	8002bc4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a04      	ldr	r2, [pc, #16]	; (8002bd0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002bbe:	f023 0304 	bic.w	r3, r3, #4
 8002bc2:	6013      	str	r3, [r2, #0]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	e000e010 	.word	0xe000e010

08002bd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002be0:	f7ff f842 	bl	8001c68 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e099      	b.n	8002d24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0201 	bic.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c10:	e00f      	b.n	8002c32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c12:	f7ff f829 	bl	8001c68 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b05      	cmp	r3, #5
 8002c1e:	d908      	bls.n	8002c32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2220      	movs	r2, #32
 8002c24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2203      	movs	r2, #3
 8002c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e078      	b.n	8002d24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1e8      	bne.n	8002c12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	4b38      	ldr	r3, [pc, #224]	; (8002d2c <HAL_DMA_Init+0x158>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a1b      	ldr	r3, [r3, #32]
 8002c7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d107      	bne.n	8002c9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	4313      	orrs	r3, r2
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f023 0307 	bic.w	r3, r3, #7
 8002cb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d117      	bne.n	8002cf6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00e      	beq.n	8002cf6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f9e9 	bl	80030b0 <DMA_CheckFifoParam>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2240      	movs	r2, #64	; 0x40
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e016      	b.n	8002d24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f9a0 	bl	8003044 <DMA_CalcBaseAndBitshift>
 8002d04:	4603      	mov	r3, r0
 8002d06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0c:	223f      	movs	r2, #63	; 0x3f
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	f010803f 	.word	0xf010803f

08002d30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d3c:	4b92      	ldr	r3, [pc, #584]	; (8002f88 <HAL_DMA_IRQHandler+0x258>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a92      	ldr	r2, [pc, #584]	; (8002f8c <HAL_DMA_IRQHandler+0x25c>)
 8002d42:	fba2 2303 	umull	r2, r3, r2, r3
 8002d46:	0a9b      	lsrs	r3, r3, #10
 8002d48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5a:	2208      	movs	r2, #8
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d01a      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d013      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0204 	bic.w	r2, r2, #4
 8002d82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d88:	2208      	movs	r2, #8
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d94:	f043 0201 	orr.w	r2, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da0:	2201      	movs	r2, #1
 8002da2:	409a      	lsls	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d012      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00b      	beq.n	8002dd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	409a      	lsls	r2, r3
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dca:	f043 0202 	orr.w	r2, r3, #2
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	409a      	lsls	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d012      	beq.n	8002e08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00b      	beq.n	8002e08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df4:	2204      	movs	r2, #4
 8002df6:	409a      	lsls	r2, r3
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e00:	f043 0204 	orr.w	r2, r3, #4
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0c:	2210      	movs	r2, #16
 8002e0e:	409a      	lsls	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d043      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d03c      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2a:	2210      	movs	r2, #16
 8002e2c:	409a      	lsls	r2, r3
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d018      	beq.n	8002e72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d108      	bne.n	8002e60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d024      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	4798      	blx	r3
 8002e5e:	e01f      	b.n	8002ea0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d01b      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	4798      	blx	r3
 8002e70:	e016      	b.n	8002ea0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d107      	bne.n	8002e90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0208 	bic.w	r2, r2, #8
 8002e8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	409a      	lsls	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 808e 	beq.w	8002fce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 8086 	beq.w	8002fce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b05      	cmp	r3, #5
 8002ed8:	d136      	bne.n	8002f48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0216 	bic.w	r2, r2, #22
 8002ee8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695a      	ldr	r2, [r3, #20]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ef8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d103      	bne.n	8002f0a <HAL_DMA_IRQHandler+0x1da>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0208 	bic.w	r2, r2, #8
 8002f18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1e:	223f      	movs	r2, #63	; 0x3f
 8002f20:	409a      	lsls	r2, r3
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d07d      	beq.n	800303a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	4798      	blx	r3
        }
        return;
 8002f46:	e078      	b.n	800303a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d01c      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d108      	bne.n	8002f76 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d030      	beq.n	8002fce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	4798      	blx	r3
 8002f74:	e02b      	b.n	8002fce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d027      	beq.n	8002fce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	4798      	blx	r3
 8002f86:	e022      	b.n	8002fce <HAL_DMA_IRQHandler+0x29e>
 8002f88:	20000070 	.word	0x20000070
 8002f8c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10f      	bne.n	8002fbe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0210 	bic.w	r2, r2, #16
 8002fac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d032      	beq.n	800303c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d022      	beq.n	8003028 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2205      	movs	r2, #5
 8002fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 0201 	bic.w	r2, r2, #1
 8002ff8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	429a      	cmp	r2, r3
 8003004:	d307      	bcc.n	8003016 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f2      	bne.n	8002ffa <HAL_DMA_IRQHandler+0x2ca>
 8003014:	e000      	b.n	8003018 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003016:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4798      	blx	r3
 8003038:	e000      	b.n	800303c <HAL_DMA_IRQHandler+0x30c>
        return;
 800303a:	bf00      	nop
    }
  }
}
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop

08003044 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	3b10      	subs	r3, #16
 8003054:	4a14      	ldr	r2, [pc, #80]	; (80030a8 <DMA_CalcBaseAndBitshift+0x64>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	091b      	lsrs	r3, r3, #4
 800305c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800305e:	4a13      	ldr	r2, [pc, #76]	; (80030ac <DMA_CalcBaseAndBitshift+0x68>)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4413      	add	r3, r2
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b03      	cmp	r3, #3
 8003070:	d909      	bls.n	8003086 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800307a:	f023 0303 	bic.w	r3, r3, #3
 800307e:	1d1a      	adds	r2, r3, #4
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	659a      	str	r2, [r3, #88]	; 0x58
 8003084:	e007      	b.n	8003096 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800308e:	f023 0303 	bic.w	r3, r3, #3
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800309a:	4618      	mov	r0, r3
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	aaaaaaab 	.word	0xaaaaaaab
 80030ac:	08006260 	.word	0x08006260

080030b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d11f      	bne.n	800310a <DMA_CheckFifoParam+0x5a>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d856      	bhi.n	800317e <DMA_CheckFifoParam+0xce>
 80030d0:	a201      	add	r2, pc, #4	; (adr r2, 80030d8 <DMA_CheckFifoParam+0x28>)
 80030d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d6:	bf00      	nop
 80030d8:	080030e9 	.word	0x080030e9
 80030dc:	080030fb 	.word	0x080030fb
 80030e0:	080030e9 	.word	0x080030e9
 80030e4:	0800317f 	.word	0x0800317f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d046      	beq.n	8003182 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f8:	e043      	b.n	8003182 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003102:	d140      	bne.n	8003186 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003108:	e03d      	b.n	8003186 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003112:	d121      	bne.n	8003158 <DMA_CheckFifoParam+0xa8>
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b03      	cmp	r3, #3
 8003118:	d837      	bhi.n	800318a <DMA_CheckFifoParam+0xda>
 800311a:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <DMA_CheckFifoParam+0x70>)
 800311c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003120:	08003131 	.word	0x08003131
 8003124:	08003137 	.word	0x08003137
 8003128:	08003131 	.word	0x08003131
 800312c:	08003149 	.word	0x08003149
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
      break;
 8003134:	e030      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d025      	beq.n	800318e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003146:	e022      	b.n	800318e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003150:	d11f      	bne.n	8003192 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003156:	e01c      	b.n	8003192 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d903      	bls.n	8003166 <DMA_CheckFifoParam+0xb6>
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d003      	beq.n	800316c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003164:	e018      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	73fb      	strb	r3, [r7, #15]
      break;
 800316a:	e015      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00e      	beq.n	8003196 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
      break;
 800317c:	e00b      	b.n	8003196 <DMA_CheckFifoParam+0xe6>
      break;
 800317e:	bf00      	nop
 8003180:	e00a      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;
 8003182:	bf00      	nop
 8003184:	e008      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;
 8003186:	bf00      	nop
 8003188:	e006      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;
 800318a:	bf00      	nop
 800318c:	e004      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;
 800318e:	bf00      	nop
 8003190:	e002      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;   
 8003192:	bf00      	nop
 8003194:	e000      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;
 8003196:	bf00      	nop
    }
  } 
  
  return status; 
 8003198:	7bfb      	ldrb	r3, [r7, #15]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop

080031a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b089      	sub	sp, #36	; 0x24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	e177      	b.n	80034b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031c4:	2201      	movs	r2, #1
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4013      	ands	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	429a      	cmp	r2, r3
 80031de:	f040 8166 	bne.w	80034ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d00b      	beq.n	8003202 <HAL_GPIO_Init+0x5a>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d007      	beq.n	8003202 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031f6:	2b11      	cmp	r3, #17
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b12      	cmp	r3, #18
 8003200:	d130      	bne.n	8003264 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	2203      	movs	r2, #3
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003238:	2201      	movs	r2, #1
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	091b      	lsrs	r3, r3, #4
 800324e:	f003 0201 	and.w	r2, r3, #1
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	2203      	movs	r2, #3
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b02      	cmp	r3, #2
 800329a:	d003      	beq.n	80032a4 <HAL_GPIO_Init+0xfc>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b12      	cmp	r3, #18
 80032a2:	d123      	bne.n	80032ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	08da      	lsrs	r2, r3, #3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3208      	adds	r2, #8
 80032ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	220f      	movs	r2, #15
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	08da      	lsrs	r2, r3, #3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3208      	adds	r2, #8
 80032e6:	69b9      	ldr	r1, [r7, #24]
 80032e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	2203      	movs	r2, #3
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 0203 	and.w	r2, r3, #3
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80c0 	beq.w	80034ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	4b66      	ldr	r3, [pc, #408]	; (80034cc <HAL_GPIO_Init+0x324>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	4a65      	ldr	r2, [pc, #404]	; (80034cc <HAL_GPIO_Init+0x324>)
 8003338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800333c:	6453      	str	r3, [r2, #68]	; 0x44
 800333e:	4b63      	ldr	r3, [pc, #396]	; (80034cc <HAL_GPIO_Init+0x324>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800334a:	4a61      	ldr	r2, [pc, #388]	; (80034d0 <HAL_GPIO_Init+0x328>)
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	089b      	lsrs	r3, r3, #2
 8003350:	3302      	adds	r3, #2
 8003352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	220f      	movs	r2, #15
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a58      	ldr	r2, [pc, #352]	; (80034d4 <HAL_GPIO_Init+0x32c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d037      	beq.n	80033e6 <HAL_GPIO_Init+0x23e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a57      	ldr	r2, [pc, #348]	; (80034d8 <HAL_GPIO_Init+0x330>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d031      	beq.n	80033e2 <HAL_GPIO_Init+0x23a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a56      	ldr	r2, [pc, #344]	; (80034dc <HAL_GPIO_Init+0x334>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d02b      	beq.n	80033de <HAL_GPIO_Init+0x236>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a55      	ldr	r2, [pc, #340]	; (80034e0 <HAL_GPIO_Init+0x338>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d025      	beq.n	80033da <HAL_GPIO_Init+0x232>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a54      	ldr	r2, [pc, #336]	; (80034e4 <HAL_GPIO_Init+0x33c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d01f      	beq.n	80033d6 <HAL_GPIO_Init+0x22e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a53      	ldr	r2, [pc, #332]	; (80034e8 <HAL_GPIO_Init+0x340>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d019      	beq.n	80033d2 <HAL_GPIO_Init+0x22a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a52      	ldr	r2, [pc, #328]	; (80034ec <HAL_GPIO_Init+0x344>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d013      	beq.n	80033ce <HAL_GPIO_Init+0x226>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a51      	ldr	r2, [pc, #324]	; (80034f0 <HAL_GPIO_Init+0x348>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d00d      	beq.n	80033ca <HAL_GPIO_Init+0x222>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a50      	ldr	r2, [pc, #320]	; (80034f4 <HAL_GPIO_Init+0x34c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d007      	beq.n	80033c6 <HAL_GPIO_Init+0x21e>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a4f      	ldr	r2, [pc, #316]	; (80034f8 <HAL_GPIO_Init+0x350>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d101      	bne.n	80033c2 <HAL_GPIO_Init+0x21a>
 80033be:	2309      	movs	r3, #9
 80033c0:	e012      	b.n	80033e8 <HAL_GPIO_Init+0x240>
 80033c2:	230a      	movs	r3, #10
 80033c4:	e010      	b.n	80033e8 <HAL_GPIO_Init+0x240>
 80033c6:	2308      	movs	r3, #8
 80033c8:	e00e      	b.n	80033e8 <HAL_GPIO_Init+0x240>
 80033ca:	2307      	movs	r3, #7
 80033cc:	e00c      	b.n	80033e8 <HAL_GPIO_Init+0x240>
 80033ce:	2306      	movs	r3, #6
 80033d0:	e00a      	b.n	80033e8 <HAL_GPIO_Init+0x240>
 80033d2:	2305      	movs	r3, #5
 80033d4:	e008      	b.n	80033e8 <HAL_GPIO_Init+0x240>
 80033d6:	2304      	movs	r3, #4
 80033d8:	e006      	b.n	80033e8 <HAL_GPIO_Init+0x240>
 80033da:	2303      	movs	r3, #3
 80033dc:	e004      	b.n	80033e8 <HAL_GPIO_Init+0x240>
 80033de:	2302      	movs	r3, #2
 80033e0:	e002      	b.n	80033e8 <HAL_GPIO_Init+0x240>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <HAL_GPIO_Init+0x240>
 80033e6:	2300      	movs	r3, #0
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	f002 0203 	and.w	r2, r2, #3
 80033ee:	0092      	lsls	r2, r2, #2
 80033f0:	4093      	lsls	r3, r2
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033f8:	4935      	ldr	r1, [pc, #212]	; (80034d0 <HAL_GPIO_Init+0x328>)
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	089b      	lsrs	r3, r3, #2
 80033fe:	3302      	adds	r3, #2
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003406:	4b3d      	ldr	r3, [pc, #244]	; (80034fc <HAL_GPIO_Init+0x354>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	43db      	mvns	r3, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4013      	ands	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800342a:	4a34      	ldr	r2, [pc, #208]	; (80034fc <HAL_GPIO_Init+0x354>)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003430:	4b32      	ldr	r3, [pc, #200]	; (80034fc <HAL_GPIO_Init+0x354>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003454:	4a29      	ldr	r2, [pc, #164]	; (80034fc <HAL_GPIO_Init+0x354>)
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800345a:	4b28      	ldr	r3, [pc, #160]	; (80034fc <HAL_GPIO_Init+0x354>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	43db      	mvns	r3, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4013      	ands	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800347e:	4a1f      	ldr	r2, [pc, #124]	; (80034fc <HAL_GPIO_Init+0x354>)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003484:	4b1d      	ldr	r3, [pc, #116]	; (80034fc <HAL_GPIO_Init+0x354>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034a8:	4a14      	ldr	r2, [pc, #80]	; (80034fc <HAL_GPIO_Init+0x354>)
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	3301      	adds	r3, #1
 80034b2:	61fb      	str	r3, [r7, #28]
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	2b0f      	cmp	r3, #15
 80034b8:	f67f ae84 	bls.w	80031c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034bc:	bf00      	nop
 80034be:	bf00      	nop
 80034c0:	3724      	adds	r7, #36	; 0x24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40013800 	.word	0x40013800
 80034d4:	40020000 	.word	0x40020000
 80034d8:	40020400 	.word	0x40020400
 80034dc:	40020800 	.word	0x40020800
 80034e0:	40020c00 	.word	0x40020c00
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40021400 	.word	0x40021400
 80034ec:	40021800 	.word	0x40021800
 80034f0:	40021c00 	.word	0x40021c00
 80034f4:	40022000 	.word	0x40022000
 80034f8:	40022400 	.word	0x40022400
 80034fc:	40013c00 	.word	0x40013c00

08003500 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691a      	ldr	r2, [r3, #16]
 8003510:	887b      	ldrh	r3, [r7, #2]
 8003512:	4013      	ands	r3, r2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
 800351c:	e001      	b.n	8003522 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800351e:	2300      	movs	r3, #0
 8003520:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003522:	7bfb      	ldrb	r3, [r7, #15]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	807b      	strh	r3, [r7, #2]
 800353c:	4613      	mov	r3, r2
 800353e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003540:	787b      	ldrb	r3, [r7, #1]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003546:	887a      	ldrh	r2, [r7, #2]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800354c:	e003      	b.n	8003556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800354e:	887b      	ldrh	r3, [r7, #2]
 8003550:	041a      	lsls	r2, r3, #16
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	619a      	str	r2, [r3, #24]
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
	...

08003564 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	4603      	mov	r3, r0
 800356c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800356e:	4b08      	ldr	r3, [pc, #32]	; (8003590 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003570:	695a      	ldr	r2, [r3, #20]
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	4013      	ands	r3, r2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d006      	beq.n	8003588 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800357a:	4a05      	ldr	r2, [pc, #20]	; (8003590 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800357c:	88fb      	ldrh	r3, [r7, #6]
 800357e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	4618      	mov	r0, r3
 8003584:	f7fd fd3c 	bl	8001000 <HAL_GPIO_EXTI_Callback>
  }
}
 8003588:	bf00      	nop
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40013c00 	.word	0x40013c00

08003594 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e12b      	b.n	80037fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7fd fbba 	bl	8000d34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2224      	movs	r2, #36	; 0x24
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0201 	bic.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035f8:	f000 fe1e 	bl	8004238 <HAL_RCC_GetPCLK1Freq>
 80035fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4a81      	ldr	r2, [pc, #516]	; (8003808 <HAL_I2C_Init+0x274>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d807      	bhi.n	8003618 <HAL_I2C_Init+0x84>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4a80      	ldr	r2, [pc, #512]	; (800380c <HAL_I2C_Init+0x278>)
 800360c:	4293      	cmp	r3, r2
 800360e:	bf94      	ite	ls
 8003610:	2301      	movls	r3, #1
 8003612:	2300      	movhi	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	e006      	b.n	8003626 <HAL_I2C_Init+0x92>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4a7d      	ldr	r2, [pc, #500]	; (8003810 <HAL_I2C_Init+0x27c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	bf94      	ite	ls
 8003620:	2301      	movls	r3, #1
 8003622:	2300      	movhi	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e0e7      	b.n	80037fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4a78      	ldr	r2, [pc, #480]	; (8003814 <HAL_I2C_Init+0x280>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	0c9b      	lsrs	r3, r3, #18
 8003638:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	430a      	orrs	r2, r1
 800364c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	4a6a      	ldr	r2, [pc, #424]	; (8003808 <HAL_I2C_Init+0x274>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d802      	bhi.n	8003668 <HAL_I2C_Init+0xd4>
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	3301      	adds	r3, #1
 8003666:	e009      	b.n	800367c <HAL_I2C_Init+0xe8>
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800366e:	fb02 f303 	mul.w	r3, r2, r3
 8003672:	4a69      	ldr	r2, [pc, #420]	; (8003818 <HAL_I2C_Init+0x284>)
 8003674:	fba2 2303 	umull	r2, r3, r2, r3
 8003678:	099b      	lsrs	r3, r3, #6
 800367a:	3301      	adds	r3, #1
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	430b      	orrs	r3, r1
 8003682:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800368e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	495c      	ldr	r1, [pc, #368]	; (8003808 <HAL_I2C_Init+0x274>)
 8003698:	428b      	cmp	r3, r1
 800369a:	d819      	bhi.n	80036d0 <HAL_I2C_Init+0x13c>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	1e59      	subs	r1, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80036aa:	1c59      	adds	r1, r3, #1
 80036ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036b0:	400b      	ands	r3, r1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <HAL_I2C_Init+0x138>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1e59      	subs	r1, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80036c4:	3301      	adds	r3, #1
 80036c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ca:	e051      	b.n	8003770 <HAL_I2C_Init+0x1dc>
 80036cc:	2304      	movs	r3, #4
 80036ce:	e04f      	b.n	8003770 <HAL_I2C_Init+0x1dc>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d111      	bne.n	80036fc <HAL_I2C_Init+0x168>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	1e58      	subs	r0, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6859      	ldr	r1, [r3, #4]
 80036e0:	460b      	mov	r3, r1
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	440b      	add	r3, r1
 80036e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ea:	3301      	adds	r3, #1
 80036ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	bf0c      	ite	eq
 80036f4:	2301      	moveq	r3, #1
 80036f6:	2300      	movne	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	e012      	b.n	8003722 <HAL_I2C_Init+0x18e>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	1e58      	subs	r0, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6859      	ldr	r1, [r3, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	0099      	lsls	r1, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003712:	3301      	adds	r3, #1
 8003714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003718:	2b00      	cmp	r3, #0
 800371a:	bf0c      	ite	eq
 800371c:	2301      	moveq	r3, #1
 800371e:	2300      	movne	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_I2C_Init+0x196>
 8003726:	2301      	movs	r3, #1
 8003728:	e022      	b.n	8003770 <HAL_I2C_Init+0x1dc>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10e      	bne.n	8003750 <HAL_I2C_Init+0x1bc>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1e58      	subs	r0, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6859      	ldr	r1, [r3, #4]
 800373a:	460b      	mov	r3, r1
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	440b      	add	r3, r1
 8003740:	fbb0 f3f3 	udiv	r3, r0, r3
 8003744:	3301      	adds	r3, #1
 8003746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800374a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800374e:	e00f      	b.n	8003770 <HAL_I2C_Init+0x1dc>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	1e58      	subs	r0, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6859      	ldr	r1, [r3, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	0099      	lsls	r1, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	fbb0 f3f3 	udiv	r3, r0, r3
 8003766:	3301      	adds	r3, #1
 8003768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800376c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	6809      	ldr	r1, [r1, #0]
 8003774:	4313      	orrs	r3, r2
 8003776:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69da      	ldr	r2, [r3, #28]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800379e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6911      	ldr	r1, [r2, #16]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	68d2      	ldr	r2, [r2, #12]
 80037aa:	4311      	orrs	r1, r2
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6812      	ldr	r2, [r2, #0]
 80037b0:	430b      	orrs	r3, r1
 80037b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695a      	ldr	r2, [r3, #20]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	000186a0 	.word	0x000186a0
 800380c:	001e847f 	.word	0x001e847f
 8003810:	003d08ff 	.word	0x003d08ff
 8003814:	431bde83 	.word	0x431bde83
 8003818:	10624dd3 	.word	0x10624dd3

0800381c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b20      	cmp	r3, #32
 8003830:	d129      	bne.n	8003886 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2224      	movs	r2, #36	; 0x24
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0201 	bic.w	r2, r2, #1
 8003848:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0210 	bic.w	r2, r2, #16
 8003858:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f042 0201 	orr.w	r2, r2, #1
 8003878:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	e000      	b.n	8003888 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003886:	2302      	movs	r3, #2
  }
}
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800389e:	2300      	movs	r3, #0
 80038a0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b20      	cmp	r3, #32
 80038ac:	d12a      	bne.n	8003904 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2224      	movs	r2, #36	; 0x24
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0201 	bic.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80038ce:	89fb      	ldrh	r3, [r7, #14]
 80038d0:	f023 030f 	bic.w	r3, r3, #15
 80038d4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	b29a      	uxth	r2, r3
 80038da:	89fb      	ldrh	r3, [r7, #14]
 80038dc:	4313      	orrs	r3, r2
 80038de:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	89fa      	ldrh	r2, [r7, #14]
 80038e6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	e000      	b.n	8003906 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003904:	2302      	movs	r3, #2
  }
}
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800391a:	2300      	movs	r3, #0
 800391c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	603b      	str	r3, [r7, #0]
 8003922:	4b20      	ldr	r3, [pc, #128]	; (80039a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	4a1f      	ldr	r2, [pc, #124]	; (80039a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392c:	6413      	str	r3, [r2, #64]	; 0x40
 800392e:	4b1d      	ldr	r3, [pc, #116]	; (80039a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800393a:	4b1b      	ldr	r3, [pc, #108]	; (80039a8 <HAL_PWREx_EnableOverDrive+0x94>)
 800393c:	2201      	movs	r2, #1
 800393e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003940:	f7fe f992 	bl	8001c68 <HAL_GetTick>
 8003944:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003946:	e009      	b.n	800395c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003948:	f7fe f98e 	bl	8001c68 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003956:	d901      	bls.n	800395c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e01f      	b.n	800399c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800395c:	4b13      	ldr	r3, [pc, #76]	; (80039ac <HAL_PWREx_EnableOverDrive+0x98>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003968:	d1ee      	bne.n	8003948 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800396a:	4b11      	ldr	r3, [pc, #68]	; (80039b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800396c:	2201      	movs	r2, #1
 800396e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003970:	f7fe f97a 	bl	8001c68 <HAL_GetTick>
 8003974:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003976:	e009      	b.n	800398c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003978:	f7fe f976 	bl	8001c68 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003986:	d901      	bls.n	800398c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e007      	b.n	800399c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800398c:	4b07      	ldr	r3, [pc, #28]	; (80039ac <HAL_PWREx_EnableOverDrive+0x98>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003994:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003998:	d1ee      	bne.n	8003978 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40023800 	.word	0x40023800
 80039a8:	420e0040 	.word	0x420e0040
 80039ac:	40007000 	.word	0x40007000
 80039b0:	420e0044 	.word	0x420e0044

080039b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e25b      	b.n	8003e7e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d075      	beq.n	8003abe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039d2:	4ba3      	ldr	r3, [pc, #652]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 030c 	and.w	r3, r3, #12
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d00c      	beq.n	80039f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039de:	4ba0      	ldr	r3, [pc, #640]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d112      	bne.n	8003a10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ea:	4b9d      	ldr	r3, [pc, #628]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039f6:	d10b      	bne.n	8003a10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f8:	4b99      	ldr	r3, [pc, #612]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d05b      	beq.n	8003abc <HAL_RCC_OscConfig+0x108>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d157      	bne.n	8003abc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e236      	b.n	8003e7e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a18:	d106      	bne.n	8003a28 <HAL_RCC_OscConfig+0x74>
 8003a1a:	4b91      	ldr	r3, [pc, #580]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a90      	ldr	r2, [pc, #576]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	e01d      	b.n	8003a64 <HAL_RCC_OscConfig+0xb0>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCC_OscConfig+0x98>
 8003a32:	4b8b      	ldr	r3, [pc, #556]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a8a      	ldr	r2, [pc, #552]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	4b88      	ldr	r3, [pc, #544]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a87      	ldr	r2, [pc, #540]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	e00b      	b.n	8003a64 <HAL_RCC_OscConfig+0xb0>
 8003a4c:	4b84      	ldr	r3, [pc, #528]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a83      	ldr	r2, [pc, #524]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	4b81      	ldr	r3, [pc, #516]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a80      	ldr	r2, [pc, #512]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d013      	beq.n	8003a94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6c:	f7fe f8fc 	bl	8001c68 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a74:	f7fe f8f8 	bl	8001c68 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b64      	cmp	r3, #100	; 0x64
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e1fb      	b.n	8003e7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a86:	4b76      	ldr	r3, [pc, #472]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0xc0>
 8003a92:	e014      	b.n	8003abe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a94:	f7fe f8e8 	bl	8001c68 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a9c:	f7fe f8e4 	bl	8001c68 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b64      	cmp	r3, #100	; 0x64
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e1e7      	b.n	8003e7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aae:	4b6c      	ldr	r3, [pc, #432]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0xe8>
 8003aba:	e000      	b.n	8003abe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d063      	beq.n	8003b92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aca:	4b65      	ldr	r3, [pc, #404]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00b      	beq.n	8003aee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ad6:	4b62      	ldr	r3, [pc, #392]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d11c      	bne.n	8003b1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ae2:	4b5f      	ldr	r3, [pc, #380]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d116      	bne.n	8003b1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aee:	4b5c      	ldr	r3, [pc, #368]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <HAL_RCC_OscConfig+0x152>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d001      	beq.n	8003b06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e1bb      	b.n	8003e7e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b06:	4b56      	ldr	r3, [pc, #344]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	4952      	ldr	r1, [pc, #328]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1a:	e03a      	b.n	8003b92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d020      	beq.n	8003b66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b24:	4b4f      	ldr	r3, [pc, #316]	; (8003c64 <HAL_RCC_OscConfig+0x2b0>)
 8003b26:	2201      	movs	r2, #1
 8003b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2a:	f7fe f89d 	bl	8001c68 <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b32:	f7fe f899 	bl	8001c68 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e19c      	b.n	8003e7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b44:	4b46      	ldr	r3, [pc, #280]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f0      	beq.n	8003b32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b50:	4b43      	ldr	r3, [pc, #268]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	4940      	ldr	r1, [pc, #256]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	600b      	str	r3, [r1, #0]
 8003b64:	e015      	b.n	8003b92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b66:	4b3f      	ldr	r3, [pc, #252]	; (8003c64 <HAL_RCC_OscConfig+0x2b0>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6c:	f7fe f87c 	bl	8001c68 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b74:	f7fe f878 	bl	8001c68 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e17b      	b.n	8003e7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b86:	4b36      	ldr	r3, [pc, #216]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f0      	bne.n	8003b74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d030      	beq.n	8003c00 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d016      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ba6:	4b30      	ldr	r3, [pc, #192]	; (8003c68 <HAL_RCC_OscConfig+0x2b4>)
 8003ba8:	2201      	movs	r2, #1
 8003baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bac:	f7fe f85c 	bl	8001c68 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb4:	f7fe f858 	bl	8001c68 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e15b      	b.n	8003e7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc6:	4b26      	ldr	r3, [pc, #152]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x200>
 8003bd2:	e015      	b.n	8003c00 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd4:	4b24      	ldr	r3, [pc, #144]	; (8003c68 <HAL_RCC_OscConfig+0x2b4>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bda:	f7fe f845 	bl	8001c68 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be2:	f7fe f841 	bl	8001c68 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e144      	b.n	8003e7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf4:	4b1a      	ldr	r3, [pc, #104]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1f0      	bne.n	8003be2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 80a0 	beq.w	8003d4e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c12:	4b13      	ldr	r3, [pc, #76]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10f      	bne.n	8003c3e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	4b0f      	ldr	r3, [pc, #60]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	4a0e      	ldr	r2, [pc, #56]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c2e:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c36:	60bb      	str	r3, [r7, #8]
 8003c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3e:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <HAL_RCC_OscConfig+0x2b8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d121      	bne.n	8003c8e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c4a:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <HAL_RCC_OscConfig+0x2b8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a07      	ldr	r2, [pc, #28]	; (8003c6c <HAL_RCC_OscConfig+0x2b8>)
 8003c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c56:	f7fe f807 	bl	8001c68 <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5c:	e011      	b.n	8003c82 <HAL_RCC_OscConfig+0x2ce>
 8003c5e:	bf00      	nop
 8003c60:	40023800 	.word	0x40023800
 8003c64:	42470000 	.word	0x42470000
 8003c68:	42470e80 	.word	0x42470e80
 8003c6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c70:	f7fd fffa 	bl	8001c68 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e0fd      	b.n	8003e7e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c82:	4b81      	ldr	r3, [pc, #516]	; (8003e88 <HAL_RCC_OscConfig+0x4d4>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d106      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x2f0>
 8003c96:	4b7d      	ldr	r3, [pc, #500]	; (8003e8c <HAL_RCC_OscConfig+0x4d8>)
 8003c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9a:	4a7c      	ldr	r2, [pc, #496]	; (8003e8c <HAL_RCC_OscConfig+0x4d8>)
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca2:	e01c      	b.n	8003cde <HAL_RCC_OscConfig+0x32a>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2b05      	cmp	r3, #5
 8003caa:	d10c      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x312>
 8003cac:	4b77      	ldr	r3, [pc, #476]	; (8003e8c <HAL_RCC_OscConfig+0x4d8>)
 8003cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb0:	4a76      	ldr	r2, [pc, #472]	; (8003e8c <HAL_RCC_OscConfig+0x4d8>)
 8003cb2:	f043 0304 	orr.w	r3, r3, #4
 8003cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb8:	4b74      	ldr	r3, [pc, #464]	; (8003e8c <HAL_RCC_OscConfig+0x4d8>)
 8003cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbc:	4a73      	ldr	r2, [pc, #460]	; (8003e8c <HAL_RCC_OscConfig+0x4d8>)
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc4:	e00b      	b.n	8003cde <HAL_RCC_OscConfig+0x32a>
 8003cc6:	4b71      	ldr	r3, [pc, #452]	; (8003e8c <HAL_RCC_OscConfig+0x4d8>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	4a70      	ldr	r2, [pc, #448]	; (8003e8c <HAL_RCC_OscConfig+0x4d8>)
 8003ccc:	f023 0301 	bic.w	r3, r3, #1
 8003cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd2:	4b6e      	ldr	r3, [pc, #440]	; (8003e8c <HAL_RCC_OscConfig+0x4d8>)
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd6:	4a6d      	ldr	r2, [pc, #436]	; (8003e8c <HAL_RCC_OscConfig+0x4d8>)
 8003cd8:	f023 0304 	bic.w	r3, r3, #4
 8003cdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d015      	beq.n	8003d12 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce6:	f7fd ffbf 	bl	8001c68 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cec:	e00a      	b.n	8003d04 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cee:	f7fd ffbb 	bl	8001c68 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e0bc      	b.n	8003e7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d04:	4b61      	ldr	r3, [pc, #388]	; (8003e8c <HAL_RCC_OscConfig+0x4d8>)
 8003d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0ee      	beq.n	8003cee <HAL_RCC_OscConfig+0x33a>
 8003d10:	e014      	b.n	8003d3c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d12:	f7fd ffa9 	bl	8001c68 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d18:	e00a      	b.n	8003d30 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d1a:	f7fd ffa5 	bl	8001c68 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e0a6      	b.n	8003e7e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d30:	4b56      	ldr	r3, [pc, #344]	; (8003e8c <HAL_RCC_OscConfig+0x4d8>)
 8003d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1ee      	bne.n	8003d1a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d3c:	7dfb      	ldrb	r3, [r7, #23]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d105      	bne.n	8003d4e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d42:	4b52      	ldr	r3, [pc, #328]	; (8003e8c <HAL_RCC_OscConfig+0x4d8>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	4a51      	ldr	r2, [pc, #324]	; (8003e8c <HAL_RCC_OscConfig+0x4d8>)
 8003d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 8092 	beq.w	8003e7c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d58:	4b4c      	ldr	r3, [pc, #304]	; (8003e8c <HAL_RCC_OscConfig+0x4d8>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 030c 	and.w	r3, r3, #12
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d05c      	beq.n	8003e1e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d141      	bne.n	8003df0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6c:	4b48      	ldr	r3, [pc, #288]	; (8003e90 <HAL_RCC_OscConfig+0x4dc>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d72:	f7fd ff79 	bl	8001c68 <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d7a:	f7fd ff75 	bl	8001c68 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e078      	b.n	8003e7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8c:	4b3f      	ldr	r3, [pc, #252]	; (8003e8c <HAL_RCC_OscConfig+0x4d8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1f0      	bne.n	8003d7a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69da      	ldr	r2, [r3, #28]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	019b      	lsls	r3, r3, #6
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	085b      	lsrs	r3, r3, #1
 8003db0:	3b01      	subs	r3, #1
 8003db2:	041b      	lsls	r3, r3, #16
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	061b      	lsls	r3, r3, #24
 8003dbc:	4933      	ldr	r1, [pc, #204]	; (8003e8c <HAL_RCC_OscConfig+0x4d8>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dc2:	4b33      	ldr	r3, [pc, #204]	; (8003e90 <HAL_RCC_OscConfig+0x4dc>)
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc8:	f7fd ff4e 	bl	8001c68 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd0:	f7fd ff4a 	bl	8001c68 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e04d      	b.n	8003e7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de2:	4b2a      	ldr	r3, [pc, #168]	; (8003e8c <HAL_RCC_OscConfig+0x4d8>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x41c>
 8003dee:	e045      	b.n	8003e7c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df0:	4b27      	ldr	r3, [pc, #156]	; (8003e90 <HAL_RCC_OscConfig+0x4dc>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df6:	f7fd ff37 	bl	8001c68 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfc:	e008      	b.n	8003e10 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dfe:	f7fd ff33 	bl	8001c68 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e036      	b.n	8003e7e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e10:	4b1e      	ldr	r3, [pc, #120]	; (8003e8c <HAL_RCC_OscConfig+0x4d8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1f0      	bne.n	8003dfe <HAL_RCC_OscConfig+0x44a>
 8003e1c:	e02e      	b.n	8003e7c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e029      	b.n	8003e7e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e2a:	4b18      	ldr	r3, [pc, #96]	; (8003e8c <HAL_RCC_OscConfig+0x4d8>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d11c      	bne.n	8003e78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d115      	bne.n	8003e78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e52:	4013      	ands	r3, r2
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d10d      	bne.n	8003e78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d106      	bne.n	8003e78 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d001      	beq.n	8003e7c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40007000 	.word	0x40007000
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	42470060 	.word	0x42470060

08003e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e0cc      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea8:	4b68      	ldr	r3, [pc, #416]	; (800404c <HAL_RCC_ClockConfig+0x1b8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 030f 	and.w	r3, r3, #15
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d90c      	bls.n	8003ed0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb6:	4b65      	ldr	r3, [pc, #404]	; (800404c <HAL_RCC_ClockConfig+0x1b8>)
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ebe:	4b63      	ldr	r3, [pc, #396]	; (800404c <HAL_RCC_ClockConfig+0x1b8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d001      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0b8      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d020      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ee8:	4b59      	ldr	r3, [pc, #356]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	4a58      	ldr	r2, [pc, #352]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ef2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0308 	and.w	r3, r3, #8
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d005      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f00:	4b53      	ldr	r3, [pc, #332]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	4a52      	ldr	r2, [pc, #328]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f0c:	4b50      	ldr	r3, [pc, #320]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	494d      	ldr	r1, [pc, #308]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d044      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d107      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f32:	4b47      	ldr	r3, [pc, #284]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d119      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e07f      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d003      	beq.n	8003f52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d107      	bne.n	8003f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f52:	4b3f      	ldr	r3, [pc, #252]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d109      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e06f      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f62:	4b3b      	ldr	r3, [pc, #236]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e067      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f72:	4b37      	ldr	r3, [pc, #220]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f023 0203 	bic.w	r2, r3, #3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	4934      	ldr	r1, [pc, #208]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f84:	f7fd fe70 	bl	8001c68 <HAL_GetTick>
 8003f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8a:	e00a      	b.n	8003fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f8c:	f7fd fe6c 	bl	8001c68 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e04f      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa2:	4b2b      	ldr	r3, [pc, #172]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 020c 	and.w	r2, r3, #12
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d1eb      	bne.n	8003f8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb4:	4b25      	ldr	r3, [pc, #148]	; (800404c <HAL_RCC_ClockConfig+0x1b8>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 030f 	and.w	r3, r3, #15
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d20c      	bcs.n	8003fdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc2:	4b22      	ldr	r3, [pc, #136]	; (800404c <HAL_RCC_ClockConfig+0x1b8>)
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fca:	4b20      	ldr	r3, [pc, #128]	; (800404c <HAL_RCC_ClockConfig+0x1b8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d001      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e032      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d008      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe8:	4b19      	ldr	r3, [pc, #100]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	4916      	ldr	r1, [pc, #88]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d009      	beq.n	800401a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004006:	4b12      	ldr	r3, [pc, #72]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	490e      	ldr	r1, [pc, #56]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8004016:	4313      	orrs	r3, r2
 8004018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800401a:	f000 f821 	bl	8004060 <HAL_RCC_GetSysClockFreq>
 800401e:	4602      	mov	r2, r0
 8004020:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <HAL_RCC_ClockConfig+0x1bc>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	091b      	lsrs	r3, r3, #4
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	490a      	ldr	r1, [pc, #40]	; (8004054 <HAL_RCC_ClockConfig+0x1c0>)
 800402c:	5ccb      	ldrb	r3, [r1, r3]
 800402e:	fa22 f303 	lsr.w	r3, r2, r3
 8004032:	4a09      	ldr	r2, [pc, #36]	; (8004058 <HAL_RCC_ClockConfig+0x1c4>)
 8004034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004036:	4b09      	ldr	r3, [pc, #36]	; (800405c <HAL_RCC_ClockConfig+0x1c8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f7fd fdd0 	bl	8001be0 <HAL_InitTick>

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40023c00 	.word	0x40023c00
 8004050:	40023800 	.word	0x40023800
 8004054:	08006248 	.word	0x08006248
 8004058:	20000070 	.word	0x20000070
 800405c:	20000074 	.word	0x20000074

08004060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004060:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	607b      	str	r3, [r7, #4]
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	2300      	movs	r3, #0
 8004072:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004078:	4b67      	ldr	r3, [pc, #412]	; (8004218 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 030c 	and.w	r3, r3, #12
 8004080:	2b08      	cmp	r3, #8
 8004082:	d00d      	beq.n	80040a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004084:	2b08      	cmp	r3, #8
 8004086:	f200 80bd 	bhi.w	8004204 <HAL_RCC_GetSysClockFreq+0x1a4>
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <HAL_RCC_GetSysClockFreq+0x34>
 800408e:	2b04      	cmp	r3, #4
 8004090:	d003      	beq.n	800409a <HAL_RCC_GetSysClockFreq+0x3a>
 8004092:	e0b7      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004094:	4b61      	ldr	r3, [pc, #388]	; (800421c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004096:	60bb      	str	r3, [r7, #8]
       break;
 8004098:	e0b7      	b.n	800420a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800409a:	4b60      	ldr	r3, [pc, #384]	; (800421c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800409c:	60bb      	str	r3, [r7, #8]
      break;
 800409e:	e0b4      	b.n	800420a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040a0:	4b5d      	ldr	r3, [pc, #372]	; (8004218 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040aa:	4b5b      	ldr	r3, [pc, #364]	; (8004218 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d04d      	beq.n	8004152 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040b6:	4b58      	ldr	r3, [pc, #352]	; (8004218 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	099b      	lsrs	r3, r3, #6
 80040bc:	461a      	mov	r2, r3
 80040be:	f04f 0300 	mov.w	r3, #0
 80040c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040c6:	f04f 0100 	mov.w	r1, #0
 80040ca:	ea02 0800 	and.w	r8, r2, r0
 80040ce:	ea03 0901 	and.w	r9, r3, r1
 80040d2:	4640      	mov	r0, r8
 80040d4:	4649      	mov	r1, r9
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	014b      	lsls	r3, r1, #5
 80040e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040e4:	0142      	lsls	r2, r0, #5
 80040e6:	4610      	mov	r0, r2
 80040e8:	4619      	mov	r1, r3
 80040ea:	ebb0 0008 	subs.w	r0, r0, r8
 80040ee:	eb61 0109 	sbc.w	r1, r1, r9
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	018b      	lsls	r3, r1, #6
 80040fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004100:	0182      	lsls	r2, r0, #6
 8004102:	1a12      	subs	r2, r2, r0
 8004104:	eb63 0301 	sbc.w	r3, r3, r1
 8004108:	f04f 0000 	mov.w	r0, #0
 800410c:	f04f 0100 	mov.w	r1, #0
 8004110:	00d9      	lsls	r1, r3, #3
 8004112:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004116:	00d0      	lsls	r0, r2, #3
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	eb12 0208 	adds.w	r2, r2, r8
 8004120:	eb43 0309 	adc.w	r3, r3, r9
 8004124:	f04f 0000 	mov.w	r0, #0
 8004128:	f04f 0100 	mov.w	r1, #0
 800412c:	0299      	lsls	r1, r3, #10
 800412e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004132:	0290      	lsls	r0, r2, #10
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	4610      	mov	r0, r2
 800413a:	4619      	mov	r1, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	461a      	mov	r2, r3
 8004140:	f04f 0300 	mov.w	r3, #0
 8004144:	f7fc f852 	bl	80001ec <__aeabi_uldivmod>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	4613      	mov	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	e04a      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004152:	4b31      	ldr	r3, [pc, #196]	; (8004218 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	099b      	lsrs	r3, r3, #6
 8004158:	461a      	mov	r2, r3
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004162:	f04f 0100 	mov.w	r1, #0
 8004166:	ea02 0400 	and.w	r4, r2, r0
 800416a:	ea03 0501 	and.w	r5, r3, r1
 800416e:	4620      	mov	r0, r4
 8004170:	4629      	mov	r1, r5
 8004172:	f04f 0200 	mov.w	r2, #0
 8004176:	f04f 0300 	mov.w	r3, #0
 800417a:	014b      	lsls	r3, r1, #5
 800417c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004180:	0142      	lsls	r2, r0, #5
 8004182:	4610      	mov	r0, r2
 8004184:	4619      	mov	r1, r3
 8004186:	1b00      	subs	r0, r0, r4
 8004188:	eb61 0105 	sbc.w	r1, r1, r5
 800418c:	f04f 0200 	mov.w	r2, #0
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	018b      	lsls	r3, r1, #6
 8004196:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800419a:	0182      	lsls	r2, r0, #6
 800419c:	1a12      	subs	r2, r2, r0
 800419e:	eb63 0301 	sbc.w	r3, r3, r1
 80041a2:	f04f 0000 	mov.w	r0, #0
 80041a6:	f04f 0100 	mov.w	r1, #0
 80041aa:	00d9      	lsls	r1, r3, #3
 80041ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041b0:	00d0      	lsls	r0, r2, #3
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	1912      	adds	r2, r2, r4
 80041b8:	eb45 0303 	adc.w	r3, r5, r3
 80041bc:	f04f 0000 	mov.w	r0, #0
 80041c0:	f04f 0100 	mov.w	r1, #0
 80041c4:	0299      	lsls	r1, r3, #10
 80041c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80041ca:	0290      	lsls	r0, r2, #10
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4610      	mov	r0, r2
 80041d2:	4619      	mov	r1, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	461a      	mov	r2, r3
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	f7fc f806 	bl	80001ec <__aeabi_uldivmod>
 80041e0:	4602      	mov	r2, r0
 80041e2:	460b      	mov	r3, r1
 80041e4:	4613      	mov	r3, r2
 80041e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	0c1b      	lsrs	r3, r3, #16
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	3301      	adds	r3, #1
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004200:	60bb      	str	r3, [r7, #8]
      break;
 8004202:	e002      	b.n	800420a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004204:	4b05      	ldr	r3, [pc, #20]	; (800421c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004206:	60bb      	str	r3, [r7, #8]
      break;
 8004208:	bf00      	nop
    }
  }
  return sysclockfreq;
 800420a:	68bb      	ldr	r3, [r7, #8]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004216:	bf00      	nop
 8004218:	40023800 	.word	0x40023800
 800421c:	00f42400 	.word	0x00f42400

08004220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004224:	4b03      	ldr	r3, [pc, #12]	; (8004234 <HAL_RCC_GetHCLKFreq+0x14>)
 8004226:	681b      	ldr	r3, [r3, #0]
}
 8004228:	4618      	mov	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	20000070 	.word	0x20000070

08004238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800423c:	f7ff fff0 	bl	8004220 <HAL_RCC_GetHCLKFreq>
 8004240:	4602      	mov	r2, r0
 8004242:	4b05      	ldr	r3, [pc, #20]	; (8004258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	0a9b      	lsrs	r3, r3, #10
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	4903      	ldr	r1, [pc, #12]	; (800425c <HAL_RCC_GetPCLK1Freq+0x24>)
 800424e:	5ccb      	ldrb	r3, [r1, r3]
 8004250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004254:	4618      	mov	r0, r3
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40023800 	.word	0x40023800
 800425c:	08006258 	.word	0x08006258

08004260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004264:	f7ff ffdc 	bl	8004220 <HAL_RCC_GetHCLKFreq>
 8004268:	4602      	mov	r2, r0
 800426a:	4b05      	ldr	r3, [pc, #20]	; (8004280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	0b5b      	lsrs	r3, r3, #13
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	4903      	ldr	r1, [pc, #12]	; (8004284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004276:	5ccb      	ldrb	r3, [r1, r3]
 8004278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800427c:	4618      	mov	r0, r3
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40023800 	.word	0x40023800
 8004284:	08006258 	.word	0x08006258

08004288 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e056      	b.n	8004348 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d106      	bne.n	80042ba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7fc ff7d 	bl	80011b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2202      	movs	r2, #2
 80042be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	431a      	orrs	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	431a      	orrs	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	431a      	orrs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042f6:	431a      	orrs	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	431a      	orrs	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	ea42 0103 	orr.w	r1, r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	0c1b      	lsrs	r3, r3, #16
 8004318:	f003 0104 	and.w	r1, r3, #4
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	69da      	ldr	r2, [r3, #28]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004336:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b088      	sub	sp, #32
 8004354:	af02      	add	r7, sp, #8
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	603b      	str	r3, [r7, #0]
 800435c:	4613      	mov	r3, r2
 800435e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004360:	2300      	movs	r3, #0
 8004362:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800436c:	d112      	bne.n	8004394 <HAL_SPI_Receive+0x44>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10e      	bne.n	8004394 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2204      	movs	r2, #4
 800437a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800437e:	88fa      	ldrh	r2, [r7, #6]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	4613      	mov	r3, r2
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	68b9      	ldr	r1, [r7, #8]
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 f8e9 	bl	8004562 <HAL_SPI_TransmitReceive>
 8004390:	4603      	mov	r3, r0
 8004392:	e0e2      	b.n	800455a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800439a:	2b01      	cmp	r3, #1
 800439c:	d101      	bne.n	80043a2 <HAL_SPI_Receive+0x52>
 800439e:	2302      	movs	r3, #2
 80043a0:	e0db      	b.n	800455a <HAL_SPI_Receive+0x20a>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043aa:	f7fd fc5d 	bl	8001c68 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d002      	beq.n	80043c2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80043bc:	2302      	movs	r3, #2
 80043be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043c0:	e0c2      	b.n	8004548 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <HAL_SPI_Receive+0x7e>
 80043c8:	88fb      	ldrh	r3, [r7, #6]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d102      	bne.n	80043d4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043d2:	e0b9      	b.n	8004548 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2204      	movs	r2, #4
 80043d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	68ba      	ldr	r2, [r7, #8]
 80043e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	88fa      	ldrh	r2, [r7, #6]
 80043ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	88fa      	ldrh	r2, [r7, #6]
 80043f2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800441a:	d107      	bne.n	800442c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800442a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004436:	2b40      	cmp	r3, #64	; 0x40
 8004438:	d007      	beq.n	800444a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004448:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d162      	bne.n	8004518 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004452:	e02e      	b.n	80044b2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b01      	cmp	r3, #1
 8004460:	d115      	bne.n	800448e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f103 020c 	add.w	r2, r3, #12
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446e:	7812      	ldrb	r2, [r2, #0]
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800448c:	e011      	b.n	80044b2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800448e:	f7fd fbeb 	bl	8001c68 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d803      	bhi.n	80044a6 <HAL_SPI_Receive+0x156>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044a4:	d102      	bne.n	80044ac <HAL_SPI_Receive+0x15c>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d102      	bne.n	80044b2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	75fb      	strb	r3, [r7, #23]
          goto error;
 80044b0:	e04a      	b.n	8004548 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1cb      	bne.n	8004454 <HAL_SPI_Receive+0x104>
 80044bc:	e031      	b.n	8004522 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d113      	bne.n	80044f4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	b292      	uxth	r2, r2
 80044d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	1c9a      	adds	r2, r3, #2
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044f2:	e011      	b.n	8004518 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044f4:	f7fd fbb8 	bl	8001c68 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d803      	bhi.n	800450c <HAL_SPI_Receive+0x1bc>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800450a:	d102      	bne.n	8004512 <HAL_SPI_Receive+0x1c2>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d102      	bne.n	8004518 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004516:	e017      	b.n	8004548 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800451c:	b29b      	uxth	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1cd      	bne.n	80044be <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	6839      	ldr	r1, [r7, #0]
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 fa27 	bl	800497a <SPI_EndRxTransaction>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d002      	beq.n	8004538 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2220      	movs	r2, #32
 8004536:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	75fb      	strb	r3, [r7, #23]
 8004544:	e000      	b.n	8004548 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004546:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004558:	7dfb      	ldrb	r3, [r7, #23]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b08c      	sub	sp, #48	; 0x30
 8004566:	af00      	add	r7, sp, #0
 8004568:	60f8      	str	r0, [r7, #12]
 800456a:	60b9      	str	r1, [r7, #8]
 800456c:	607a      	str	r2, [r7, #4]
 800456e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004570:	2301      	movs	r3, #1
 8004572:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004580:	2b01      	cmp	r3, #1
 8004582:	d101      	bne.n	8004588 <HAL_SPI_TransmitReceive+0x26>
 8004584:	2302      	movs	r3, #2
 8004586:	e18a      	b.n	800489e <HAL_SPI_TransmitReceive+0x33c>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004590:	f7fd fb6a 	bl	8001c68 <HAL_GetTick>
 8004594:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800459c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80045a6:	887b      	ldrh	r3, [r7, #2]
 80045a8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d00f      	beq.n	80045d2 <HAL_SPI_TransmitReceive+0x70>
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045b8:	d107      	bne.n	80045ca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d103      	bne.n	80045ca <HAL_SPI_TransmitReceive+0x68>
 80045c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d003      	beq.n	80045d2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80045ca:	2302      	movs	r3, #2
 80045cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80045d0:	e15b      	b.n	800488a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_SPI_TransmitReceive+0x82>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d002      	beq.n	80045e4 <HAL_SPI_TransmitReceive+0x82>
 80045de:	887b      	ldrh	r3, [r7, #2]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d103      	bne.n	80045ec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80045ea:	e14e      	b.n	800488a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d003      	beq.n	8004600 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2205      	movs	r2, #5
 80045fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	887a      	ldrh	r2, [r7, #2]
 8004610:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	887a      	ldrh	r2, [r7, #2]
 8004616:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	887a      	ldrh	r2, [r7, #2]
 8004622:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	887a      	ldrh	r2, [r7, #2]
 8004628:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004640:	2b40      	cmp	r3, #64	; 0x40
 8004642:	d007      	beq.n	8004654 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004652:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800465c:	d178      	bne.n	8004750 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <HAL_SPI_TransmitReceive+0x10a>
 8004666:	8b7b      	ldrh	r3, [r7, #26]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d166      	bne.n	800473a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004670:	881a      	ldrh	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467c:	1c9a      	adds	r2, r3, #2
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004686:	b29b      	uxth	r3, r3
 8004688:	3b01      	subs	r3, #1
 800468a:	b29a      	uxth	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004690:	e053      	b.n	800473a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b02      	cmp	r3, #2
 800469e:	d11b      	bne.n	80046d8 <HAL_SPI_TransmitReceive+0x176>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d016      	beq.n	80046d8 <HAL_SPI_TransmitReceive+0x176>
 80046aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d113      	bne.n	80046d8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	881a      	ldrh	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	1c9a      	adds	r2, r3, #2
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d119      	bne.n	800471a <HAL_SPI_TransmitReceive+0x1b8>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d014      	beq.n	800471a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	b292      	uxth	r2, r2
 80046fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004702:	1c9a      	adds	r2, r3, #2
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004716:	2301      	movs	r3, #1
 8004718:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800471a:	f7fd faa5 	bl	8001c68 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004726:	429a      	cmp	r2, r3
 8004728:	d807      	bhi.n	800473a <HAL_SPI_TransmitReceive+0x1d8>
 800472a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004730:	d003      	beq.n	800473a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004738:	e0a7      	b.n	800488a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800473e:	b29b      	uxth	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1a6      	bne.n	8004692 <HAL_SPI_TransmitReceive+0x130>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1a1      	bne.n	8004692 <HAL_SPI_TransmitReceive+0x130>
 800474e:	e07c      	b.n	800484a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <HAL_SPI_TransmitReceive+0x1fc>
 8004758:	8b7b      	ldrh	r3, [r7, #26]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d16b      	bne.n	8004836 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	330c      	adds	r3, #12
 8004768:	7812      	ldrb	r2, [r2, #0]
 800476a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800477a:	b29b      	uxth	r3, r3
 800477c:	3b01      	subs	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004784:	e057      	b.n	8004836 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b02      	cmp	r3, #2
 8004792:	d11c      	bne.n	80047ce <HAL_SPI_TransmitReceive+0x26c>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d017      	beq.n	80047ce <HAL_SPI_TransmitReceive+0x26c>
 800479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d114      	bne.n	80047ce <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	330c      	adds	r3, #12
 80047ae:	7812      	ldrb	r2, [r2, #0]
 80047b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d119      	bne.n	8004810 <HAL_SPI_TransmitReceive+0x2ae>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d014      	beq.n	8004810 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800480c:	2301      	movs	r3, #1
 800480e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004810:	f7fd fa2a 	bl	8001c68 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800481c:	429a      	cmp	r2, r3
 800481e:	d803      	bhi.n	8004828 <HAL_SPI_TransmitReceive+0x2c6>
 8004820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004822:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004826:	d102      	bne.n	800482e <HAL_SPI_TransmitReceive+0x2cc>
 8004828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482a:	2b00      	cmp	r3, #0
 800482c:	d103      	bne.n	8004836 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004834:	e029      	b.n	800488a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1a2      	bne.n	8004786 <HAL_SPI_TransmitReceive+0x224>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d19d      	bne.n	8004786 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800484a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800484c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 f8f8 	bl	8004a44 <SPI_EndRxTxTransaction>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d006      	beq.n	8004868 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2220      	movs	r2, #32
 8004864:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004866:	e010      	b.n	800488a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10b      	bne.n	8004888 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	e000      	b.n	800488a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004888:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800489a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3730      	adds	r7, #48	; 0x30
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b084      	sub	sp, #16
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	603b      	str	r3, [r7, #0]
 80048b2:	4613      	mov	r3, r2
 80048b4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048b6:	e04c      	b.n	8004952 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048be:	d048      	beq.n	8004952 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80048c0:	f7fd f9d2 	bl	8001c68 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d902      	bls.n	80048d6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d13d      	bne.n	8004952 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048ee:	d111      	bne.n	8004914 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f8:	d004      	beq.n	8004904 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004902:	d107      	bne.n	8004914 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004912:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800491c:	d10f      	bne.n	800493e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800493c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e00f      	b.n	8004972 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	4013      	ands	r3, r2
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	429a      	cmp	r2, r3
 8004960:	bf0c      	ite	eq
 8004962:	2301      	moveq	r3, #1
 8004964:	2300      	movne	r3, #0
 8004966:	b2db      	uxtb	r3, r3
 8004968:	461a      	mov	r2, r3
 800496a:	79fb      	ldrb	r3, [r7, #7]
 800496c:	429a      	cmp	r2, r3
 800496e:	d1a3      	bne.n	80048b8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b086      	sub	sp, #24
 800497e:	af02      	add	r7, sp, #8
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800498e:	d111      	bne.n	80049b4 <SPI_EndRxTransaction+0x3a>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004998:	d004      	beq.n	80049a4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a2:	d107      	bne.n	80049b4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049bc:	d12a      	bne.n	8004a14 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c6:	d012      	beq.n	80049ee <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2200      	movs	r2, #0
 80049d0:	2180      	movs	r1, #128	; 0x80
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f7ff ff67 	bl	80048a6 <SPI_WaitFlagStateUntilTimeout>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d02d      	beq.n	8004a3a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e2:	f043 0220 	orr.w	r2, r3, #32
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e026      	b.n	8004a3c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2200      	movs	r2, #0
 80049f6:	2101      	movs	r1, #1
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f7ff ff54 	bl	80048a6 <SPI_WaitFlagStateUntilTimeout>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d01a      	beq.n	8004a3a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a08:	f043 0220 	orr.w	r2, r3, #32
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e013      	b.n	8004a3c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f7ff ff41 	bl	80048a6 <SPI_WaitFlagStateUntilTimeout>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d007      	beq.n	8004a3a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2e:	f043 0220 	orr.w	r2, r3, #32
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e000      	b.n	8004a3c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b088      	sub	sp, #32
 8004a48:	af02      	add	r7, sp, #8
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a50:	4b1b      	ldr	r3, [pc, #108]	; (8004ac0 <SPI_EndRxTxTransaction+0x7c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a1b      	ldr	r2, [pc, #108]	; (8004ac4 <SPI_EndRxTxTransaction+0x80>)
 8004a56:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5a:	0d5b      	lsrs	r3, r3, #21
 8004a5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a6e:	d112      	bne.n	8004a96 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2200      	movs	r2, #0
 8004a78:	2180      	movs	r1, #128	; 0x80
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f7ff ff13 	bl	80048a6 <SPI_WaitFlagStateUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d016      	beq.n	8004ab4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8a:	f043 0220 	orr.w	r2, r3, #32
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e00f      	b.n	8004ab6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00a      	beq.n	8004ab2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aac:	2b80      	cmp	r3, #128	; 0x80
 8004aae:	d0f2      	beq.n	8004a96 <SPI_EndRxTxTransaction+0x52>
 8004ab0:	e000      	b.n	8004ab4 <SPI_EndRxTxTransaction+0x70>
        break;
 8004ab2:	bf00      	nop
  }

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	20000070 	.word	0x20000070
 8004ac4:	165e9f81 	.word	0x165e9f81

08004ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e01d      	b.n	8004b16 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7fc fe74 	bl	80017dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3304      	adds	r3, #4
 8004b04:	4619      	mov	r1, r3
 8004b06:	4610      	mov	r0, r2
 8004b08:	f000 fa9a 	bl	8005040 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e01d      	b.n	8004b6c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d106      	bne.n	8004b4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f815 	bl	8004b74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	3304      	adds	r3, #4
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	f000 fa6f 	bl	8005040 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e01d      	b.n	8004bd6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d106      	bne.n	8004bb4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f815 	bl	8004bde <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4610      	mov	r0, r2
 8004bc8:	f000 fa3a 	bl	8005040 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b083      	sub	sp, #12
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d101      	bne.n	8004c0c <HAL_TIM_IC_ConfigChannel+0x1a>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	e08a      	b.n	8004d22 <HAL_TIM_IC_ConfigChannel+0x130>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d11b      	bne.n	8004c5a <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	6819      	ldr	r1, [r3, #0]
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f000 fc55 	bl	80054e0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699a      	ldr	r2, [r3, #24]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 020c 	bic.w	r2, r2, #12
 8004c44:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	6999      	ldr	r1, [r3, #24]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	619a      	str	r2, [r3, #24]
 8004c58:	e05a      	b.n	8004d10 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b04      	cmp	r3, #4
 8004c5e:	d11c      	bne.n	8004c9a <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6818      	ldr	r0, [r3, #0]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	6819      	ldr	r1, [r3, #0]
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f000 fcd9 	bl	8005626 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699a      	ldr	r2, [r3, #24]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004c82:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6999      	ldr	r1, [r3, #24]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	021a      	lsls	r2, r3, #8
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	619a      	str	r2, [r3, #24]
 8004c98:	e03a      	b.n	8004d10 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d11b      	bne.n	8004cd8 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6818      	ldr	r0, [r3, #0]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	6819      	ldr	r1, [r3, #0]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f000 fd26 	bl	8005700 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	69da      	ldr	r2, [r3, #28]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 020c 	bic.w	r2, r2, #12
 8004cc2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	69d9      	ldr	r1, [r3, #28]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	61da      	str	r2, [r3, #28]
 8004cd6:	e01b      	b.n	8004d10 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6818      	ldr	r0, [r3, #0]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	6819      	ldr	r1, [r3, #0]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f000 fd46 	bl	8005778 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	69da      	ldr	r2, [r3, #28]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004cfa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	69d9      	ldr	r1, [r3, #28]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	021a      	lsls	r2, r3, #8
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d101      	bne.n	8004d46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d42:	2302      	movs	r3, #2
 8004d44:	e0b4      	b.n	8004eb0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2202      	movs	r2, #2
 8004d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b0c      	cmp	r3, #12
 8004d5a:	f200 809f 	bhi.w	8004e9c <HAL_TIM_PWM_ConfigChannel+0x170>
 8004d5e:	a201      	add	r2, pc, #4	; (adr r2, 8004d64 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d64:	08004d99 	.word	0x08004d99
 8004d68:	08004e9d 	.word	0x08004e9d
 8004d6c:	08004e9d 	.word	0x08004e9d
 8004d70:	08004e9d 	.word	0x08004e9d
 8004d74:	08004dd9 	.word	0x08004dd9
 8004d78:	08004e9d 	.word	0x08004e9d
 8004d7c:	08004e9d 	.word	0x08004e9d
 8004d80:	08004e9d 	.word	0x08004e9d
 8004d84:	08004e1b 	.word	0x08004e1b
 8004d88:	08004e9d 	.word	0x08004e9d
 8004d8c:	08004e9d 	.word	0x08004e9d
 8004d90:	08004e9d 	.word	0x08004e9d
 8004d94:	08004e5b 	.word	0x08004e5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68b9      	ldr	r1, [r7, #8]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 f9ee 	bl	8005180 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699a      	ldr	r2, [r3, #24]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0208 	orr.w	r2, r2, #8
 8004db2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	699a      	ldr	r2, [r3, #24]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0204 	bic.w	r2, r2, #4
 8004dc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6999      	ldr	r1, [r3, #24]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	691a      	ldr	r2, [r3, #16]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	619a      	str	r2, [r3, #24]
      break;
 8004dd6:	e062      	b.n	8004e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68b9      	ldr	r1, [r7, #8]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fa3e 	bl	8005260 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699a      	ldr	r2, [r3, #24]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699a      	ldr	r2, [r3, #24]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6999      	ldr	r1, [r3, #24]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	021a      	lsls	r2, r3, #8
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	619a      	str	r2, [r3, #24]
      break;
 8004e18:	e041      	b.n	8004e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68b9      	ldr	r1, [r7, #8]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 fa93 	bl	800534c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69da      	ldr	r2, [r3, #28]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 0208 	orr.w	r2, r2, #8
 8004e34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69da      	ldr	r2, [r3, #28]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0204 	bic.w	r2, r2, #4
 8004e44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69d9      	ldr	r1, [r3, #28]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	61da      	str	r2, [r3, #28]
      break;
 8004e58:	e021      	b.n	8004e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68b9      	ldr	r1, [r7, #8]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 fae7 	bl	8005434 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69da      	ldr	r2, [r3, #28]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69da      	ldr	r2, [r3, #28]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69d9      	ldr	r1, [r3, #28]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	021a      	lsls	r2, r3, #8
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	61da      	str	r2, [r3, #28]
      break;
 8004e9a:	e000      	b.n	8004e9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004e9c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d101      	bne.n	8004ed0 <HAL_TIM_ConfigClockSource+0x18>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	e0b3      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x180>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004eee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ef6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f08:	d03e      	beq.n	8004f88 <HAL_TIM_ConfigClockSource+0xd0>
 8004f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f0e:	f200 8087 	bhi.w	8005020 <HAL_TIM_ConfigClockSource+0x168>
 8004f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f16:	f000 8085 	beq.w	8005024 <HAL_TIM_ConfigClockSource+0x16c>
 8004f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f1e:	d87f      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x168>
 8004f20:	2b70      	cmp	r3, #112	; 0x70
 8004f22:	d01a      	beq.n	8004f5a <HAL_TIM_ConfigClockSource+0xa2>
 8004f24:	2b70      	cmp	r3, #112	; 0x70
 8004f26:	d87b      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x168>
 8004f28:	2b60      	cmp	r3, #96	; 0x60
 8004f2a:	d050      	beq.n	8004fce <HAL_TIM_ConfigClockSource+0x116>
 8004f2c:	2b60      	cmp	r3, #96	; 0x60
 8004f2e:	d877      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x168>
 8004f30:	2b50      	cmp	r3, #80	; 0x50
 8004f32:	d03c      	beq.n	8004fae <HAL_TIM_ConfigClockSource+0xf6>
 8004f34:	2b50      	cmp	r3, #80	; 0x50
 8004f36:	d873      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x168>
 8004f38:	2b40      	cmp	r3, #64	; 0x40
 8004f3a:	d058      	beq.n	8004fee <HAL_TIM_ConfigClockSource+0x136>
 8004f3c:	2b40      	cmp	r3, #64	; 0x40
 8004f3e:	d86f      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x168>
 8004f40:	2b30      	cmp	r3, #48	; 0x30
 8004f42:	d064      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x156>
 8004f44:	2b30      	cmp	r3, #48	; 0x30
 8004f46:	d86b      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x168>
 8004f48:	2b20      	cmp	r3, #32
 8004f4a:	d060      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x156>
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	d867      	bhi.n	8005020 <HAL_TIM_ConfigClockSource+0x168>
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d05c      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x156>
 8004f54:	2b10      	cmp	r3, #16
 8004f56:	d05a      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004f58:	e062      	b.n	8005020 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6818      	ldr	r0, [r3, #0]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	6899      	ldr	r1, [r3, #8]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f000 fc5d 	bl	8005828 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	609a      	str	r2, [r3, #8]
      break;
 8004f86:	e04e      	b.n	8005026 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6818      	ldr	r0, [r3, #0]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	6899      	ldr	r1, [r3, #8]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f000 fc46 	bl	8005828 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004faa:	609a      	str	r2, [r3, #8]
      break;
 8004fac:	e03b      	b.n	8005026 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	6859      	ldr	r1, [r3, #4]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f000 fb04 	bl	80055c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2150      	movs	r1, #80	; 0x50
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fc13 	bl	80057f2 <TIM_ITRx_SetConfig>
      break;
 8004fcc:	e02b      	b.n	8005026 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6818      	ldr	r0, [r3, #0]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	6859      	ldr	r1, [r3, #4]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	f000 fb60 	bl	80056a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2160      	movs	r1, #96	; 0x60
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fc03 	bl	80057f2 <TIM_ITRx_SetConfig>
      break;
 8004fec:	e01b      	b.n	8005026 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	6859      	ldr	r1, [r3, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f000 fae4 	bl	80055c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2140      	movs	r1, #64	; 0x40
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fbf3 	bl	80057f2 <TIM_ITRx_SetConfig>
      break;
 800500c:	e00b      	b.n	8005026 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4619      	mov	r1, r3
 8005018:	4610      	mov	r0, r2
 800501a:	f000 fbea 	bl	80057f2 <TIM_ITRx_SetConfig>
      break;
 800501e:	e002      	b.n	8005026 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005020:	bf00      	nop
 8005022:	e000      	b.n	8005026 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005024:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a40      	ldr	r2, [pc, #256]	; (8005154 <TIM_Base_SetConfig+0x114>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d013      	beq.n	8005080 <TIM_Base_SetConfig+0x40>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800505e:	d00f      	beq.n	8005080 <TIM_Base_SetConfig+0x40>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a3d      	ldr	r2, [pc, #244]	; (8005158 <TIM_Base_SetConfig+0x118>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d00b      	beq.n	8005080 <TIM_Base_SetConfig+0x40>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a3c      	ldr	r2, [pc, #240]	; (800515c <TIM_Base_SetConfig+0x11c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d007      	beq.n	8005080 <TIM_Base_SetConfig+0x40>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a3b      	ldr	r2, [pc, #236]	; (8005160 <TIM_Base_SetConfig+0x120>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d003      	beq.n	8005080 <TIM_Base_SetConfig+0x40>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a3a      	ldr	r2, [pc, #232]	; (8005164 <TIM_Base_SetConfig+0x124>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d108      	bne.n	8005092 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a2f      	ldr	r2, [pc, #188]	; (8005154 <TIM_Base_SetConfig+0x114>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d02b      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a0:	d027      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a2c      	ldr	r2, [pc, #176]	; (8005158 <TIM_Base_SetConfig+0x118>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d023      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a2b      	ldr	r2, [pc, #172]	; (800515c <TIM_Base_SetConfig+0x11c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d01f      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a2a      	ldr	r2, [pc, #168]	; (8005160 <TIM_Base_SetConfig+0x120>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d01b      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a29      	ldr	r2, [pc, #164]	; (8005164 <TIM_Base_SetConfig+0x124>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d017      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a28      	ldr	r2, [pc, #160]	; (8005168 <TIM_Base_SetConfig+0x128>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d013      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a27      	ldr	r2, [pc, #156]	; (800516c <TIM_Base_SetConfig+0x12c>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d00f      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a26      	ldr	r2, [pc, #152]	; (8005170 <TIM_Base_SetConfig+0x130>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00b      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a25      	ldr	r2, [pc, #148]	; (8005174 <TIM_Base_SetConfig+0x134>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d007      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a24      	ldr	r2, [pc, #144]	; (8005178 <TIM_Base_SetConfig+0x138>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d003      	beq.n	80050f2 <TIM_Base_SetConfig+0xb2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a23      	ldr	r2, [pc, #140]	; (800517c <TIM_Base_SetConfig+0x13c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d108      	bne.n	8005104 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	4313      	orrs	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a0a      	ldr	r2, [pc, #40]	; (8005154 <TIM_Base_SetConfig+0x114>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_Base_SetConfig+0xf8>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a0c      	ldr	r2, [pc, #48]	; (8005164 <TIM_Base_SetConfig+0x124>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d103      	bne.n	8005140 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	615a      	str	r2, [r3, #20]
}
 8005146:	bf00      	nop
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40010000 	.word	0x40010000
 8005158:	40000400 	.word	0x40000400
 800515c:	40000800 	.word	0x40000800
 8005160:	40000c00 	.word	0x40000c00
 8005164:	40010400 	.word	0x40010400
 8005168:	40014000 	.word	0x40014000
 800516c:	40014400 	.word	0x40014400
 8005170:	40014800 	.word	0x40014800
 8005174:	40001800 	.word	0x40001800
 8005178:	40001c00 	.word	0x40001c00
 800517c:	40002000 	.word	0x40002000

08005180 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	f023 0201 	bic.w	r2, r3, #1
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f023 0303 	bic.w	r3, r3, #3
 80051b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f023 0302 	bic.w	r3, r3, #2
 80051c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a20      	ldr	r2, [pc, #128]	; (8005258 <TIM_OC1_SetConfig+0xd8>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d003      	beq.n	80051e4 <TIM_OC1_SetConfig+0x64>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a1f      	ldr	r2, [pc, #124]	; (800525c <TIM_OC1_SetConfig+0xdc>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d10c      	bne.n	80051fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f023 0308 	bic.w	r3, r3, #8
 80051ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f023 0304 	bic.w	r3, r3, #4
 80051fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a15      	ldr	r2, [pc, #84]	; (8005258 <TIM_OC1_SetConfig+0xd8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d003      	beq.n	800520e <TIM_OC1_SetConfig+0x8e>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a14      	ldr	r2, [pc, #80]	; (800525c <TIM_OC1_SetConfig+0xdc>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d111      	bne.n	8005232 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800521c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	4313      	orrs	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	4313      	orrs	r3, r2
 8005230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	621a      	str	r2, [r3, #32]
}
 800524c:	bf00      	nop
 800524e:	371c      	adds	r7, #28
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	40010000 	.word	0x40010000
 800525c:	40010400 	.word	0x40010400

08005260 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	f023 0210 	bic.w	r2, r3, #16
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800528e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	021b      	lsls	r3, r3, #8
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f023 0320 	bic.w	r3, r3, #32
 80052aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a22      	ldr	r2, [pc, #136]	; (8005344 <TIM_OC2_SetConfig+0xe4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d003      	beq.n	80052c8 <TIM_OC2_SetConfig+0x68>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a21      	ldr	r2, [pc, #132]	; (8005348 <TIM_OC2_SetConfig+0xe8>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d10d      	bne.n	80052e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	4313      	orrs	r3, r2
 80052da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a17      	ldr	r2, [pc, #92]	; (8005344 <TIM_OC2_SetConfig+0xe4>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <TIM_OC2_SetConfig+0x94>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a16      	ldr	r2, [pc, #88]	; (8005348 <TIM_OC2_SetConfig+0xe8>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d113      	bne.n	800531c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005302:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	4313      	orrs	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	693a      	ldr	r2, [r7, #16]
 8005318:	4313      	orrs	r3, r2
 800531a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	621a      	str	r2, [r3, #32]
}
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40010000 	.word	0x40010000
 8005348:	40010400 	.word	0x40010400

0800534c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0303 	bic.w	r3, r3, #3
 8005382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4313      	orrs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a21      	ldr	r2, [pc, #132]	; (800542c <TIM_OC3_SetConfig+0xe0>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d003      	beq.n	80053b2 <TIM_OC3_SetConfig+0x66>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a20      	ldr	r2, [pc, #128]	; (8005430 <TIM_OC3_SetConfig+0xe4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d10d      	bne.n	80053ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	021b      	lsls	r3, r3, #8
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a16      	ldr	r2, [pc, #88]	; (800542c <TIM_OC3_SetConfig+0xe0>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d003      	beq.n	80053de <TIM_OC3_SetConfig+0x92>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a15      	ldr	r2, [pc, #84]	; (8005430 <TIM_OC3_SetConfig+0xe4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d113      	bne.n	8005406 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	621a      	str	r2, [r3, #32]
}
 8005420:	bf00      	nop
 8005422:	371c      	adds	r7, #28
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	40010000 	.word	0x40010000
 8005430:	40010400 	.word	0x40010400

08005434 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005434:	b480      	push	{r7}
 8005436:	b087      	sub	sp, #28
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800546a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	021b      	lsls	r3, r3, #8
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	4313      	orrs	r3, r2
 8005476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800547e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	031b      	lsls	r3, r3, #12
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4313      	orrs	r3, r2
 800548a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a12      	ldr	r2, [pc, #72]	; (80054d8 <TIM_OC4_SetConfig+0xa4>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d003      	beq.n	800549c <TIM_OC4_SetConfig+0x68>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a11      	ldr	r2, [pc, #68]	; (80054dc <TIM_OC4_SetConfig+0xa8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d109      	bne.n	80054b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	019b      	lsls	r3, r3, #6
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	621a      	str	r2, [r3, #32]
}
 80054ca:	bf00      	nop
 80054cc:	371c      	adds	r7, #28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	40010000 	.word	0x40010000
 80054dc:	40010400 	.word	0x40010400

080054e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	f023 0201 	bic.w	r2, r3, #1
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	4a28      	ldr	r2, [pc, #160]	; (80055ac <TIM_TI1_SetConfig+0xcc>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d01b      	beq.n	8005546 <TIM_TI1_SetConfig+0x66>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005514:	d017      	beq.n	8005546 <TIM_TI1_SetConfig+0x66>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4a25      	ldr	r2, [pc, #148]	; (80055b0 <TIM_TI1_SetConfig+0xd0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d013      	beq.n	8005546 <TIM_TI1_SetConfig+0x66>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4a24      	ldr	r2, [pc, #144]	; (80055b4 <TIM_TI1_SetConfig+0xd4>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00f      	beq.n	8005546 <TIM_TI1_SetConfig+0x66>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4a23      	ldr	r2, [pc, #140]	; (80055b8 <TIM_TI1_SetConfig+0xd8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00b      	beq.n	8005546 <TIM_TI1_SetConfig+0x66>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4a22      	ldr	r2, [pc, #136]	; (80055bc <TIM_TI1_SetConfig+0xdc>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d007      	beq.n	8005546 <TIM_TI1_SetConfig+0x66>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4a21      	ldr	r2, [pc, #132]	; (80055c0 <TIM_TI1_SetConfig+0xe0>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d003      	beq.n	8005546 <TIM_TI1_SetConfig+0x66>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4a20      	ldr	r2, [pc, #128]	; (80055c4 <TIM_TI1_SetConfig+0xe4>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d101      	bne.n	800554a <TIM_TI1_SetConfig+0x6a>
 8005546:	2301      	movs	r3, #1
 8005548:	e000      	b.n	800554c <TIM_TI1_SetConfig+0x6c>
 800554a:	2300      	movs	r3, #0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d008      	beq.n	8005562 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f023 0303 	bic.w	r3, r3, #3
 8005556:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4313      	orrs	r3, r2
 800555e:	617b      	str	r3, [r7, #20]
 8005560:	e003      	b.n	800556a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f043 0301 	orr.w	r3, r3, #1
 8005568:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005570:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	011b      	lsls	r3, r3, #4
 8005576:	b2db      	uxtb	r3, r3
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	4313      	orrs	r3, r2
 800557c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f023 030a 	bic.w	r3, r3, #10
 8005584:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f003 030a 	and.w	r3, r3, #10
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	621a      	str	r2, [r3, #32]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40010000 	.word	0x40010000
 80055b0:	40000400 	.word	0x40000400
 80055b4:	40000800 	.word	0x40000800
 80055b8:	40000c00 	.word	0x40000c00
 80055bc:	40010400 	.word	0x40010400
 80055c0:	40014000 	.word	0x40014000
 80055c4:	40001800 	.word	0x40001800

080055c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f023 0201 	bic.w	r2, r3, #1
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f023 030a 	bic.w	r3, r3, #10
 8005604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	621a      	str	r2, [r3, #32]
}
 800561a:	bf00      	nop
 800561c:	371c      	adds	r7, #28
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005626:	b480      	push	{r7}
 8005628:	b087      	sub	sp, #28
 800562a:	af00      	add	r7, sp, #0
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	607a      	str	r2, [r7, #4]
 8005632:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	f023 0210 	bic.w	r2, r3, #16
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005652:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	021b      	lsls	r3, r3, #8
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	4313      	orrs	r3, r2
 800565c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005664:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	031b      	lsls	r3, r3, #12
 800566a:	b29b      	uxth	r3, r3
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	4313      	orrs	r3, r2
 8005670:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005678:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	011b      	lsls	r3, r3, #4
 800567e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	4313      	orrs	r3, r2
 8005686:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	621a      	str	r2, [r3, #32]
}
 8005694:	bf00      	nop
 8005696:	371c      	adds	r7, #28
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	f023 0210 	bic.w	r2, r3, #16
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	031b      	lsls	r3, r3, #12
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	621a      	str	r2, [r3, #32]
}
 80056f4:	bf00      	nop
 80056f6:	371c      	adds	r7, #28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f023 0303 	bic.w	r3, r3, #3
 800572c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4313      	orrs	r3, r2
 8005734:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800573c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	b2db      	uxtb	r3, r3
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005750:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	021b      	lsls	r3, r3, #8
 8005756:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	4313      	orrs	r3, r2
 800575e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	621a      	str	r2, [r3, #32]
}
 800576c:	bf00      	nop
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
 8005784:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	021b      	lsls	r3, r3, #8
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	031b      	lsls	r3, r3, #12
 80057bc:	b29b      	uxth	r3, r3
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80057ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	031b      	lsls	r3, r3, #12
 80057d0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	621a      	str	r2, [r3, #32]
}
 80057e6:	bf00      	nop
 80057e8:	371c      	adds	r7, #28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b085      	sub	sp, #20
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005808:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4313      	orrs	r3, r2
 8005810:	f043 0307 	orr.w	r3, r3, #7
 8005814:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	609a      	str	r2, [r3, #8]
}
 800581c:	bf00      	nop
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
 8005834:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005842:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	021a      	lsls	r2, r3, #8
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	431a      	orrs	r2, r3
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	4313      	orrs	r3, r2
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	4313      	orrs	r3, r2
 8005854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	609a      	str	r2, [r3, #8]
}
 800585c:	bf00      	nop
 800585e:	371c      	adds	r7, #28
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005878:	2b01      	cmp	r3, #1
 800587a:	d101      	bne.n	8005880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800587c:	2302      	movs	r3, #2
 800587e:	e05a      	b.n	8005936 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a21      	ldr	r2, [pc, #132]	; (8005944 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d022      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058cc:	d01d      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a1d      	ldr	r2, [pc, #116]	; (8005948 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d018      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a1b      	ldr	r2, [pc, #108]	; (800594c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d013      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a1a      	ldr	r2, [pc, #104]	; (8005950 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d00e      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a18      	ldr	r2, [pc, #96]	; (8005954 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d009      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a17      	ldr	r2, [pc, #92]	; (8005958 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d004      	beq.n	800590a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a15      	ldr	r2, [pc, #84]	; (800595c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d10c      	bne.n	8005924 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005910:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	4313      	orrs	r3, r2
 800591a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	40010000 	.word	0x40010000
 8005948:	40000400 	.word	0x40000400
 800594c:	40000800 	.word	0x40000800
 8005950:	40000c00 	.word	0x40000c00
 8005954:	40010400 	.word	0x40010400
 8005958:	40014000 	.word	0x40014000
 800595c:	40001800 	.word	0x40001800

08005960 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005974:	2b01      	cmp	r3, #1
 8005976:	d101      	bne.n	800597c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005978:	2302      	movs	r3, #2
 800597a:	e03d      	b.n	80059f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	4313      	orrs	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e03f      	b.n	8005a96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d106      	bne.n	8005a30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7fc f812 	bl	8001a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2224      	movs	r2, #36	; 0x24
 8005a34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f829 	bl	8005aa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	695a      	ldr	r2, [r3, #20]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68da      	ldr	r2, [r3, #12]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa4:	b0bd      	sub	sp, #244	; 0xf4
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005abc:	68d9      	ldr	r1, [r3, #12]
 8005abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	ea40 0301 	orr.w	r3, r0, r1
 8005ac8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	431a      	orrs	r2, r3
 8005ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8005aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005af8:	f021 010c 	bic.w	r1, r1, #12
 8005afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005b06:	430b      	orrs	r3, r1
 8005b08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b1a:	6999      	ldr	r1, [r3, #24]
 8005b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	ea40 0301 	orr.w	r3, r0, r1
 8005b26:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b32:	f040 81a5 	bne.w	8005e80 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	4bcd      	ldr	r3, [pc, #820]	; (8005e74 <UART_SetConfig+0x3d4>)
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d006      	beq.n	8005b50 <UART_SetConfig+0xb0>
 8005b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	4bcb      	ldr	r3, [pc, #812]	; (8005e78 <UART_SetConfig+0x3d8>)
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	f040 80cb 	bne.w	8005ce6 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b50:	f7fe fb86 	bl	8004260 <HAL_RCC_GetPCLK2Freq>
 8005b54:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b58:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b5c:	461c      	mov	r4, r3
 8005b5e:	f04f 0500 	mov.w	r5, #0
 8005b62:	4622      	mov	r2, r4
 8005b64:	462b      	mov	r3, r5
 8005b66:	1891      	adds	r1, r2, r2
 8005b68:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005b6c:	415b      	adcs	r3, r3
 8005b6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005b72:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005b76:	1912      	adds	r2, r2, r4
 8005b78:	eb45 0303 	adc.w	r3, r5, r3
 8005b7c:	f04f 0000 	mov.w	r0, #0
 8005b80:	f04f 0100 	mov.w	r1, #0
 8005b84:	00d9      	lsls	r1, r3, #3
 8005b86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b8a:	00d0      	lsls	r0, r2, #3
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	1911      	adds	r1, r2, r4
 8005b92:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8005b96:	416b      	adcs	r3, r5
 8005b98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f04f 0300 	mov.w	r3, #0
 8005ba8:	1891      	adds	r1, r2, r2
 8005baa:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8005bae:	415b      	adcs	r3, r3
 8005bb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005bb4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005bb8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005bbc:	f7fa fb16 	bl	80001ec <__aeabi_uldivmod>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4bad      	ldr	r3, [pc, #692]	; (8005e7c <UART_SetConfig+0x3dc>)
 8005bc6:	fba3 2302 	umull	r2, r3, r3, r2
 8005bca:	095b      	lsrs	r3, r3, #5
 8005bcc:	011e      	lsls	r6, r3, #4
 8005bce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005bd2:	461c      	mov	r4, r3
 8005bd4:	f04f 0500 	mov.w	r5, #0
 8005bd8:	4622      	mov	r2, r4
 8005bda:	462b      	mov	r3, r5
 8005bdc:	1891      	adds	r1, r2, r2
 8005bde:	67b9      	str	r1, [r7, #120]	; 0x78
 8005be0:	415b      	adcs	r3, r3
 8005be2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005be4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005be8:	1912      	adds	r2, r2, r4
 8005bea:	eb45 0303 	adc.w	r3, r5, r3
 8005bee:	f04f 0000 	mov.w	r0, #0
 8005bf2:	f04f 0100 	mov.w	r1, #0
 8005bf6:	00d9      	lsls	r1, r3, #3
 8005bf8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bfc:	00d0      	lsls	r0, r2, #3
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	1911      	adds	r1, r2, r4
 8005c04:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8005c08:	416b      	adcs	r3, r5
 8005c0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	461a      	mov	r2, r3
 8005c16:	f04f 0300 	mov.w	r3, #0
 8005c1a:	1891      	adds	r1, r2, r2
 8005c1c:	6739      	str	r1, [r7, #112]	; 0x70
 8005c1e:	415b      	adcs	r3, r3
 8005c20:	677b      	str	r3, [r7, #116]	; 0x74
 8005c22:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005c26:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005c2a:	f7fa fadf 	bl	80001ec <__aeabi_uldivmod>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	4b92      	ldr	r3, [pc, #584]	; (8005e7c <UART_SetConfig+0x3dc>)
 8005c34:	fba3 1302 	umull	r1, r3, r3, r2
 8005c38:	095b      	lsrs	r3, r3, #5
 8005c3a:	2164      	movs	r1, #100	; 0x64
 8005c3c:	fb01 f303 	mul.w	r3, r1, r3
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	3332      	adds	r3, #50	; 0x32
 8005c46:	4a8d      	ldr	r2, [pc, #564]	; (8005e7c <UART_SetConfig+0x3dc>)
 8005c48:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4c:	095b      	lsrs	r3, r3, #5
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c54:	441e      	add	r6, r3
 8005c56:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f04f 0100 	mov.w	r1, #0
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	1894      	adds	r4, r2, r2
 8005c66:	66bc      	str	r4, [r7, #104]	; 0x68
 8005c68:	415b      	adcs	r3, r3
 8005c6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c6c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005c70:	1812      	adds	r2, r2, r0
 8005c72:	eb41 0303 	adc.w	r3, r1, r3
 8005c76:	f04f 0400 	mov.w	r4, #0
 8005c7a:	f04f 0500 	mov.w	r5, #0
 8005c7e:	00dd      	lsls	r5, r3, #3
 8005c80:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c84:	00d4      	lsls	r4, r2, #3
 8005c86:	4622      	mov	r2, r4
 8005c88:	462b      	mov	r3, r5
 8005c8a:	1814      	adds	r4, r2, r0
 8005c8c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8005c90:	414b      	adcs	r3, r1
 8005c92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	f04f 0300 	mov.w	r3, #0
 8005ca2:	1891      	adds	r1, r2, r2
 8005ca4:	6639      	str	r1, [r7, #96]	; 0x60
 8005ca6:	415b      	adcs	r3, r3
 8005ca8:	667b      	str	r3, [r7, #100]	; 0x64
 8005caa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005cae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005cb2:	f7fa fa9b 	bl	80001ec <__aeabi_uldivmod>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	460b      	mov	r3, r1
 8005cba:	4b70      	ldr	r3, [pc, #448]	; (8005e7c <UART_SetConfig+0x3dc>)
 8005cbc:	fba3 1302 	umull	r1, r3, r3, r2
 8005cc0:	095b      	lsrs	r3, r3, #5
 8005cc2:	2164      	movs	r1, #100	; 0x64
 8005cc4:	fb01 f303 	mul.w	r3, r1, r3
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	00db      	lsls	r3, r3, #3
 8005ccc:	3332      	adds	r3, #50	; 0x32
 8005cce:	4a6b      	ldr	r2, [pc, #428]	; (8005e7c <UART_SetConfig+0x3dc>)
 8005cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd4:	095b      	lsrs	r3, r3, #5
 8005cd6:	f003 0207 	and.w	r2, r3, #7
 8005cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4432      	add	r2, r6
 8005ce2:	609a      	str	r2, [r3, #8]
 8005ce4:	e26d      	b.n	80061c2 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ce6:	f7fe faa7 	bl	8004238 <HAL_RCC_GetPCLK1Freq>
 8005cea:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cf2:	461c      	mov	r4, r3
 8005cf4:	f04f 0500 	mov.w	r5, #0
 8005cf8:	4622      	mov	r2, r4
 8005cfa:	462b      	mov	r3, r5
 8005cfc:	1891      	adds	r1, r2, r2
 8005cfe:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d00:	415b      	adcs	r3, r3
 8005d02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d08:	1912      	adds	r2, r2, r4
 8005d0a:	eb45 0303 	adc.w	r3, r5, r3
 8005d0e:	f04f 0000 	mov.w	r0, #0
 8005d12:	f04f 0100 	mov.w	r1, #0
 8005d16:	00d9      	lsls	r1, r3, #3
 8005d18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d1c:	00d0      	lsls	r0, r2, #3
 8005d1e:	4602      	mov	r2, r0
 8005d20:	460b      	mov	r3, r1
 8005d22:	1911      	adds	r1, r2, r4
 8005d24:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8005d28:	416b      	adcs	r3, r5
 8005d2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	461a      	mov	r2, r3
 8005d36:	f04f 0300 	mov.w	r3, #0
 8005d3a:	1891      	adds	r1, r2, r2
 8005d3c:	6539      	str	r1, [r7, #80]	; 0x50
 8005d3e:	415b      	adcs	r3, r3
 8005d40:	657b      	str	r3, [r7, #84]	; 0x54
 8005d42:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d46:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8005d4a:	f7fa fa4f 	bl	80001ec <__aeabi_uldivmod>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4b4a      	ldr	r3, [pc, #296]	; (8005e7c <UART_SetConfig+0x3dc>)
 8005d54:	fba3 2302 	umull	r2, r3, r3, r2
 8005d58:	095b      	lsrs	r3, r3, #5
 8005d5a:	011e      	lsls	r6, r3, #4
 8005d5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d60:	461c      	mov	r4, r3
 8005d62:	f04f 0500 	mov.w	r5, #0
 8005d66:	4622      	mov	r2, r4
 8005d68:	462b      	mov	r3, r5
 8005d6a:	1891      	adds	r1, r2, r2
 8005d6c:	64b9      	str	r1, [r7, #72]	; 0x48
 8005d6e:	415b      	adcs	r3, r3
 8005d70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d72:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d76:	1912      	adds	r2, r2, r4
 8005d78:	eb45 0303 	adc.w	r3, r5, r3
 8005d7c:	f04f 0000 	mov.w	r0, #0
 8005d80:	f04f 0100 	mov.w	r1, #0
 8005d84:	00d9      	lsls	r1, r3, #3
 8005d86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d8a:	00d0      	lsls	r0, r2, #3
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	1911      	adds	r1, r2, r4
 8005d92:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8005d96:	416b      	adcs	r3, r5
 8005d98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	461a      	mov	r2, r3
 8005da4:	f04f 0300 	mov.w	r3, #0
 8005da8:	1891      	adds	r1, r2, r2
 8005daa:	6439      	str	r1, [r7, #64]	; 0x40
 8005dac:	415b      	adcs	r3, r3
 8005dae:	647b      	str	r3, [r7, #68]	; 0x44
 8005db0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005db4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005db8:	f7fa fa18 	bl	80001ec <__aeabi_uldivmod>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4b2e      	ldr	r3, [pc, #184]	; (8005e7c <UART_SetConfig+0x3dc>)
 8005dc2:	fba3 1302 	umull	r1, r3, r3, r2
 8005dc6:	095b      	lsrs	r3, r3, #5
 8005dc8:	2164      	movs	r1, #100	; 0x64
 8005dca:	fb01 f303 	mul.w	r3, r1, r3
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	3332      	adds	r3, #50	; 0x32
 8005dd4:	4a29      	ldr	r2, [pc, #164]	; (8005e7c <UART_SetConfig+0x3dc>)
 8005dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dda:	095b      	lsrs	r3, r3, #5
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005de2:	441e      	add	r6, r3
 8005de4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005de8:	4618      	mov	r0, r3
 8005dea:	f04f 0100 	mov.w	r1, #0
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	1894      	adds	r4, r2, r2
 8005df4:	63bc      	str	r4, [r7, #56]	; 0x38
 8005df6:	415b      	adcs	r3, r3
 8005df8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dfa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005dfe:	1812      	adds	r2, r2, r0
 8005e00:	eb41 0303 	adc.w	r3, r1, r3
 8005e04:	f04f 0400 	mov.w	r4, #0
 8005e08:	f04f 0500 	mov.w	r5, #0
 8005e0c:	00dd      	lsls	r5, r3, #3
 8005e0e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e12:	00d4      	lsls	r4, r2, #3
 8005e14:	4622      	mov	r2, r4
 8005e16:	462b      	mov	r3, r5
 8005e18:	1814      	adds	r4, r2, r0
 8005e1a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8005e1e:	414b      	adcs	r3, r1
 8005e20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f04f 0300 	mov.w	r3, #0
 8005e30:	1891      	adds	r1, r2, r2
 8005e32:	6339      	str	r1, [r7, #48]	; 0x30
 8005e34:	415b      	adcs	r3, r3
 8005e36:	637b      	str	r3, [r7, #52]	; 0x34
 8005e38:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005e3c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005e40:	f7fa f9d4 	bl	80001ec <__aeabi_uldivmod>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <UART_SetConfig+0x3dc>)
 8005e4a:	fba3 1302 	umull	r1, r3, r3, r2
 8005e4e:	095b      	lsrs	r3, r3, #5
 8005e50:	2164      	movs	r1, #100	; 0x64
 8005e52:	fb01 f303 	mul.w	r3, r1, r3
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	3332      	adds	r3, #50	; 0x32
 8005e5c:	4a07      	ldr	r2, [pc, #28]	; (8005e7c <UART_SetConfig+0x3dc>)
 8005e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e62:	095b      	lsrs	r3, r3, #5
 8005e64:	f003 0207 	and.w	r2, r3, #7
 8005e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4432      	add	r2, r6
 8005e70:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005e72:	e1a6      	b.n	80061c2 <UART_SetConfig+0x722>
 8005e74:	40011000 	.word	0x40011000
 8005e78:	40011400 	.word	0x40011400
 8005e7c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	4bd1      	ldr	r3, [pc, #836]	; (80061cc <UART_SetConfig+0x72c>)
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d006      	beq.n	8005e9a <UART_SetConfig+0x3fa>
 8005e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4bcf      	ldr	r3, [pc, #828]	; (80061d0 <UART_SetConfig+0x730>)
 8005e94:	429a      	cmp	r2, r3
 8005e96:	f040 80ca 	bne.w	800602e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e9a:	f7fe f9e1 	bl	8004260 <HAL_RCC_GetPCLK2Freq>
 8005e9e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ea2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ea6:	461c      	mov	r4, r3
 8005ea8:	f04f 0500 	mov.w	r5, #0
 8005eac:	4622      	mov	r2, r4
 8005eae:	462b      	mov	r3, r5
 8005eb0:	1891      	adds	r1, r2, r2
 8005eb2:	62b9      	str	r1, [r7, #40]	; 0x28
 8005eb4:	415b      	adcs	r3, r3
 8005eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ebc:	1912      	adds	r2, r2, r4
 8005ebe:	eb45 0303 	adc.w	r3, r5, r3
 8005ec2:	f04f 0000 	mov.w	r0, #0
 8005ec6:	f04f 0100 	mov.w	r1, #0
 8005eca:	00d9      	lsls	r1, r3, #3
 8005ecc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ed0:	00d0      	lsls	r0, r2, #3
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	eb12 0a04 	adds.w	sl, r2, r4
 8005eda:	eb43 0b05 	adc.w	fp, r3, r5
 8005ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f04f 0100 	mov.w	r1, #0
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	f04f 0300 	mov.w	r3, #0
 8005ef2:	008b      	lsls	r3, r1, #2
 8005ef4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ef8:	0082      	lsls	r2, r0, #2
 8005efa:	4650      	mov	r0, sl
 8005efc:	4659      	mov	r1, fp
 8005efe:	f7fa f975 	bl	80001ec <__aeabi_uldivmod>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	4bb3      	ldr	r3, [pc, #716]	; (80061d4 <UART_SetConfig+0x734>)
 8005f08:	fba3 2302 	umull	r2, r3, r3, r2
 8005f0c:	095b      	lsrs	r3, r3, #5
 8005f0e:	011e      	lsls	r6, r3, #4
 8005f10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f14:	4618      	mov	r0, r3
 8005f16:	f04f 0100 	mov.w	r1, #0
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	1894      	adds	r4, r2, r2
 8005f20:	623c      	str	r4, [r7, #32]
 8005f22:	415b      	adcs	r3, r3
 8005f24:	627b      	str	r3, [r7, #36]	; 0x24
 8005f26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f2a:	1812      	adds	r2, r2, r0
 8005f2c:	eb41 0303 	adc.w	r3, r1, r3
 8005f30:	f04f 0400 	mov.w	r4, #0
 8005f34:	f04f 0500 	mov.w	r5, #0
 8005f38:	00dd      	lsls	r5, r3, #3
 8005f3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f3e:	00d4      	lsls	r4, r2, #3
 8005f40:	4622      	mov	r2, r4
 8005f42:	462b      	mov	r3, r5
 8005f44:	1814      	adds	r4, r2, r0
 8005f46:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8005f4a:	414b      	adcs	r3, r1
 8005f4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f04f 0100 	mov.w	r1, #0
 8005f5c:	f04f 0200 	mov.w	r2, #0
 8005f60:	f04f 0300 	mov.w	r3, #0
 8005f64:	008b      	lsls	r3, r1, #2
 8005f66:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f6a:	0082      	lsls	r2, r0, #2
 8005f6c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8005f70:	f7fa f93c 	bl	80001ec <__aeabi_uldivmod>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4b96      	ldr	r3, [pc, #600]	; (80061d4 <UART_SetConfig+0x734>)
 8005f7a:	fba3 1302 	umull	r1, r3, r3, r2
 8005f7e:	095b      	lsrs	r3, r3, #5
 8005f80:	2164      	movs	r1, #100	; 0x64
 8005f82:	fb01 f303 	mul.w	r3, r1, r3
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	011b      	lsls	r3, r3, #4
 8005f8a:	3332      	adds	r3, #50	; 0x32
 8005f8c:	4a91      	ldr	r2, [pc, #580]	; (80061d4 <UART_SetConfig+0x734>)
 8005f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f92:	095b      	lsrs	r3, r3, #5
 8005f94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f98:	441e      	add	r6, r3
 8005f9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f04f 0100 	mov.w	r1, #0
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	1894      	adds	r4, r2, r2
 8005faa:	61bc      	str	r4, [r7, #24]
 8005fac:	415b      	adcs	r3, r3
 8005fae:	61fb      	str	r3, [r7, #28]
 8005fb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fb4:	1812      	adds	r2, r2, r0
 8005fb6:	eb41 0303 	adc.w	r3, r1, r3
 8005fba:	f04f 0400 	mov.w	r4, #0
 8005fbe:	f04f 0500 	mov.w	r5, #0
 8005fc2:	00dd      	lsls	r5, r3, #3
 8005fc4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fc8:	00d4      	lsls	r4, r2, #3
 8005fca:	4622      	mov	r2, r4
 8005fcc:	462b      	mov	r3, r5
 8005fce:	1814      	adds	r4, r2, r0
 8005fd0:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8005fd4:	414b      	adcs	r3, r1
 8005fd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f04f 0100 	mov.w	r1, #0
 8005fe6:	f04f 0200 	mov.w	r2, #0
 8005fea:	f04f 0300 	mov.w	r3, #0
 8005fee:	008b      	lsls	r3, r1, #2
 8005ff0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ff4:	0082      	lsls	r2, r0, #2
 8005ff6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005ffa:	f7fa f8f7 	bl	80001ec <__aeabi_uldivmod>
 8005ffe:	4602      	mov	r2, r0
 8006000:	460b      	mov	r3, r1
 8006002:	4b74      	ldr	r3, [pc, #464]	; (80061d4 <UART_SetConfig+0x734>)
 8006004:	fba3 1302 	umull	r1, r3, r3, r2
 8006008:	095b      	lsrs	r3, r3, #5
 800600a:	2164      	movs	r1, #100	; 0x64
 800600c:	fb01 f303 	mul.w	r3, r1, r3
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	011b      	lsls	r3, r3, #4
 8006014:	3332      	adds	r3, #50	; 0x32
 8006016:	4a6f      	ldr	r2, [pc, #444]	; (80061d4 <UART_SetConfig+0x734>)
 8006018:	fba2 2303 	umull	r2, r3, r2, r3
 800601c:	095b      	lsrs	r3, r3, #5
 800601e:	f003 020f 	and.w	r2, r3, #15
 8006022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4432      	add	r2, r6
 800602a:	609a      	str	r2, [r3, #8]
 800602c:	e0c9      	b.n	80061c2 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800602e:	f7fe f903 	bl	8004238 <HAL_RCC_GetPCLK1Freq>
 8006032:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006036:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800603a:	461c      	mov	r4, r3
 800603c:	f04f 0500 	mov.w	r5, #0
 8006040:	4622      	mov	r2, r4
 8006042:	462b      	mov	r3, r5
 8006044:	1891      	adds	r1, r2, r2
 8006046:	6139      	str	r1, [r7, #16]
 8006048:	415b      	adcs	r3, r3
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006050:	1912      	adds	r2, r2, r4
 8006052:	eb45 0303 	adc.w	r3, r5, r3
 8006056:	f04f 0000 	mov.w	r0, #0
 800605a:	f04f 0100 	mov.w	r1, #0
 800605e:	00d9      	lsls	r1, r3, #3
 8006060:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006064:	00d0      	lsls	r0, r2, #3
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	eb12 0804 	adds.w	r8, r2, r4
 800606e:	eb43 0905 	adc.w	r9, r3, r5
 8006072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	4618      	mov	r0, r3
 800607a:	f04f 0100 	mov.w	r1, #0
 800607e:	f04f 0200 	mov.w	r2, #0
 8006082:	f04f 0300 	mov.w	r3, #0
 8006086:	008b      	lsls	r3, r1, #2
 8006088:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800608c:	0082      	lsls	r2, r0, #2
 800608e:	4640      	mov	r0, r8
 8006090:	4649      	mov	r1, r9
 8006092:	f7fa f8ab 	bl	80001ec <__aeabi_uldivmod>
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	4b4e      	ldr	r3, [pc, #312]	; (80061d4 <UART_SetConfig+0x734>)
 800609c:	fba3 2302 	umull	r2, r3, r3, r2
 80060a0:	095b      	lsrs	r3, r3, #5
 80060a2:	011e      	lsls	r6, r3, #4
 80060a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060a8:	4618      	mov	r0, r3
 80060aa:	f04f 0100 	mov.w	r1, #0
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	1894      	adds	r4, r2, r2
 80060b4:	60bc      	str	r4, [r7, #8]
 80060b6:	415b      	adcs	r3, r3
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060be:	1812      	adds	r2, r2, r0
 80060c0:	eb41 0303 	adc.w	r3, r1, r3
 80060c4:	f04f 0400 	mov.w	r4, #0
 80060c8:	f04f 0500 	mov.w	r5, #0
 80060cc:	00dd      	lsls	r5, r3, #3
 80060ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060d2:	00d4      	lsls	r4, r2, #3
 80060d4:	4622      	mov	r2, r4
 80060d6:	462b      	mov	r3, r5
 80060d8:	1814      	adds	r4, r2, r0
 80060da:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80060de:	414b      	adcs	r3, r1
 80060e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f04f 0100 	mov.w	r1, #0
 80060f0:	f04f 0200 	mov.w	r2, #0
 80060f4:	f04f 0300 	mov.w	r3, #0
 80060f8:	008b      	lsls	r3, r1, #2
 80060fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060fe:	0082      	lsls	r2, r0, #2
 8006100:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006104:	f7fa f872 	bl	80001ec <__aeabi_uldivmod>
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	4b31      	ldr	r3, [pc, #196]	; (80061d4 <UART_SetConfig+0x734>)
 800610e:	fba3 1302 	umull	r1, r3, r3, r2
 8006112:	095b      	lsrs	r3, r3, #5
 8006114:	2164      	movs	r1, #100	; 0x64
 8006116:	fb01 f303 	mul.w	r3, r1, r3
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	011b      	lsls	r3, r3, #4
 800611e:	3332      	adds	r3, #50	; 0x32
 8006120:	4a2c      	ldr	r2, [pc, #176]	; (80061d4 <UART_SetConfig+0x734>)
 8006122:	fba2 2303 	umull	r2, r3, r2, r3
 8006126:	095b      	lsrs	r3, r3, #5
 8006128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800612c:	441e      	add	r6, r3
 800612e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006132:	4618      	mov	r0, r3
 8006134:	f04f 0100 	mov.w	r1, #0
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	1894      	adds	r4, r2, r2
 800613e:	603c      	str	r4, [r7, #0]
 8006140:	415b      	adcs	r3, r3
 8006142:	607b      	str	r3, [r7, #4]
 8006144:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006148:	1812      	adds	r2, r2, r0
 800614a:	eb41 0303 	adc.w	r3, r1, r3
 800614e:	f04f 0400 	mov.w	r4, #0
 8006152:	f04f 0500 	mov.w	r5, #0
 8006156:	00dd      	lsls	r5, r3, #3
 8006158:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800615c:	00d4      	lsls	r4, r2, #3
 800615e:	4622      	mov	r2, r4
 8006160:	462b      	mov	r3, r5
 8006162:	1814      	adds	r4, r2, r0
 8006164:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8006168:	414b      	adcs	r3, r1
 800616a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800616e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	4618      	mov	r0, r3
 8006176:	f04f 0100 	mov.w	r1, #0
 800617a:	f04f 0200 	mov.w	r2, #0
 800617e:	f04f 0300 	mov.w	r3, #0
 8006182:	008b      	lsls	r3, r1, #2
 8006184:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006188:	0082      	lsls	r2, r0, #2
 800618a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800618e:	f7fa f82d 	bl	80001ec <__aeabi_uldivmod>
 8006192:	4602      	mov	r2, r0
 8006194:	460b      	mov	r3, r1
 8006196:	4b0f      	ldr	r3, [pc, #60]	; (80061d4 <UART_SetConfig+0x734>)
 8006198:	fba3 1302 	umull	r1, r3, r3, r2
 800619c:	095b      	lsrs	r3, r3, #5
 800619e:	2164      	movs	r1, #100	; 0x64
 80061a0:	fb01 f303 	mul.w	r3, r1, r3
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	011b      	lsls	r3, r3, #4
 80061a8:	3332      	adds	r3, #50	; 0x32
 80061aa:	4a0a      	ldr	r2, [pc, #40]	; (80061d4 <UART_SetConfig+0x734>)
 80061ac:	fba2 2303 	umull	r2, r3, r2, r3
 80061b0:	095b      	lsrs	r3, r3, #5
 80061b2:	f003 020f 	and.w	r2, r3, #15
 80061b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4432      	add	r2, r6
 80061be:	609a      	str	r2, [r3, #8]
}
 80061c0:	e7ff      	b.n	80061c2 <UART_SetConfig+0x722>
 80061c2:	bf00      	nop
 80061c4:	37f4      	adds	r7, #244	; 0xf4
 80061c6:	46bd      	mov	sp, r7
 80061c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061cc:	40011000 	.word	0x40011000
 80061d0:	40011400 	.word	0x40011400
 80061d4:	51eb851f 	.word	0x51eb851f

080061d8 <__libc_init_array>:
 80061d8:	b570      	push	{r4, r5, r6, lr}
 80061da:	4d0d      	ldr	r5, [pc, #52]	; (8006210 <__libc_init_array+0x38>)
 80061dc:	4c0d      	ldr	r4, [pc, #52]	; (8006214 <__libc_init_array+0x3c>)
 80061de:	1b64      	subs	r4, r4, r5
 80061e0:	10a4      	asrs	r4, r4, #2
 80061e2:	2600      	movs	r6, #0
 80061e4:	42a6      	cmp	r6, r4
 80061e6:	d109      	bne.n	80061fc <__libc_init_array+0x24>
 80061e8:	4d0b      	ldr	r5, [pc, #44]	; (8006218 <__libc_init_array+0x40>)
 80061ea:	4c0c      	ldr	r4, [pc, #48]	; (800621c <__libc_init_array+0x44>)
 80061ec:	f000 f820 	bl	8006230 <_init>
 80061f0:	1b64      	subs	r4, r4, r5
 80061f2:	10a4      	asrs	r4, r4, #2
 80061f4:	2600      	movs	r6, #0
 80061f6:	42a6      	cmp	r6, r4
 80061f8:	d105      	bne.n	8006206 <__libc_init_array+0x2e>
 80061fa:	bd70      	pop	{r4, r5, r6, pc}
 80061fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006200:	4798      	blx	r3
 8006202:	3601      	adds	r6, #1
 8006204:	e7ee      	b.n	80061e4 <__libc_init_array+0xc>
 8006206:	f855 3b04 	ldr.w	r3, [r5], #4
 800620a:	4798      	blx	r3
 800620c:	3601      	adds	r6, #1
 800620e:	e7f2      	b.n	80061f6 <__libc_init_array+0x1e>
 8006210:	08006270 	.word	0x08006270
 8006214:	08006270 	.word	0x08006270
 8006218:	08006270 	.word	0x08006270
 800621c:	08006274 	.word	0x08006274

08006220 <memset>:
 8006220:	4402      	add	r2, r0
 8006222:	4603      	mov	r3, r0
 8006224:	4293      	cmp	r3, r2
 8006226:	d100      	bne.n	800622a <memset+0xa>
 8006228:	4770      	bx	lr
 800622a:	f803 1b01 	strb.w	r1, [r3], #1
 800622e:	e7f9      	b.n	8006224 <memset+0x4>

08006230 <_init>:
 8006230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006232:	bf00      	nop
 8006234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006236:	bc08      	pop	{r3}
 8006238:	469e      	mov	lr, r3
 800623a:	4770      	bx	lr

0800623c <_fini>:
 800623c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623e:	bf00      	nop
 8006240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006242:	bc08      	pop	{r3}
 8006244:	469e      	mov	lr, r3
 8006246:	4770      	bx	lr
