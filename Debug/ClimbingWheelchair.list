
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008824  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080089d4  080089d4  000189d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a0c  08008a0c  0002012c  2**0
                  CONTENTS
  4 .ARM          00000008  08008a0c  08008a0c  00018a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a14  08008a14  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a14  08008a14  00018a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a18  08008a18  00018a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  08008a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000548  20000130  08008b48  00020130  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000678  08008b48  00020678  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ca1f  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ea7  00000000  00000000  0003cb7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  00040a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001360  00000000  00000000  00041f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e7b  00000000  00000000  000432b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a7c5  00000000  00000000  0006a133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e216b  00000000  00000000  000848f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00166a63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058dc  00000000  00000000  00166ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000130 	.word	0x20000130
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080089bc 	.word	0x080089bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000134 	.word	0x20000134
 80001ec:	080089bc 	.word	0x080089bc

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2uiz>:
 8000aec:	004a      	lsls	r2, r1, #1
 8000aee:	d211      	bcs.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d211      	bcs.n	8000b1a <__aeabi_d2uiz+0x2e>
 8000af6:	d50d      	bpl.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d40e      	bmi.n	8000b20 <__aeabi_d2uiz+0x34>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_d2uiz+0x3a>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_d2f>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b34:	bf24      	itt	cs
 8000b36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3e:	d90d      	bls.n	8000b5c <__aeabi_d2f+0x30>
 8000b40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b54:	bf08      	it	eq
 8000b56:	f020 0001 	biceq.w	r0, r0, #1
 8000b5a:	4770      	bx	lr
 8000b5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b60:	d121      	bne.n	8000ba6 <__aeabi_d2f+0x7a>
 8000b62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b66:	bfbc      	itt	lt
 8000b68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	4770      	bxlt	lr
 8000b6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b76:	f1c2 0218 	rsb	r2, r2, #24
 8000b7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b82:	fa20 f002 	lsr.w	r0, r0, r2
 8000b86:	bf18      	it	ne
 8000b88:	f040 0001 	orrne.w	r0, r0, #1
 8000b8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b98:	ea40 000c 	orr.w	r0, r0, ip
 8000b9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba4:	e7cc      	b.n	8000b40 <__aeabi_d2f+0x14>
 8000ba6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000baa:	d107      	bne.n	8000bbc <__aeabi_d2f+0x90>
 8000bac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bba:	4770      	bxne	lr
 8000bbc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000be0:	f000 b96e 	b.w	8000ec0 <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f806 	bl	8000bfc <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9d08      	ldr	r5, [sp, #32]
 8000c02:	4604      	mov	r4, r0
 8000c04:	468c      	mov	ip, r1
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f040 8083 	bne.w	8000d12 <__udivmoddi4+0x116>
 8000c0c:	428a      	cmp	r2, r1
 8000c0e:	4617      	mov	r7, r2
 8000c10:	d947      	bls.n	8000ca2 <__udivmoddi4+0xa6>
 8000c12:	fab2 f282 	clz	r2, r2
 8000c16:	b142      	cbz	r2, 8000c2a <__udivmoddi4+0x2e>
 8000c18:	f1c2 0020 	rsb	r0, r2, #32
 8000c1c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c20:	4091      	lsls	r1, r2
 8000c22:	4097      	lsls	r7, r2
 8000c24:	ea40 0c01 	orr.w	ip, r0, r1
 8000c28:	4094      	lsls	r4, r2
 8000c2a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2e:	0c23      	lsrs	r3, r4, #16
 8000c30:	fbbc f6f8 	udiv	r6, ip, r8
 8000c34:	fa1f fe87 	uxth.w	lr, r7
 8000c38:	fb08 c116 	mls	r1, r8, r6, ip
 8000c3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c40:	fb06 f10e 	mul.w	r1, r6, lr
 8000c44:	4299      	cmp	r1, r3
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x60>
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c4e:	f080 8119 	bcs.w	8000e84 <__udivmoddi4+0x288>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 8116 	bls.w	8000e84 <__udivmoddi4+0x288>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	443b      	add	r3, r7
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c70:	45a6      	cmp	lr, r4
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x8c>
 8000c74:	193c      	adds	r4, r7, r4
 8000c76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c7a:	f080 8105 	bcs.w	8000e88 <__udivmoddi4+0x28c>
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	f240 8102 	bls.w	8000e88 <__udivmoddi4+0x28c>
 8000c84:	3802      	subs	r0, #2
 8000c86:	443c      	add	r4, r7
 8000c88:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8c:	eba4 040e 	sub.w	r4, r4, lr
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa0>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	b902      	cbnz	r2, 8000ca6 <__udivmoddi4+0xaa>
 8000ca4:	deff      	udf	#255	; 0xff
 8000ca6:	fab2 f282 	clz	r2, r2
 8000caa:	2a00      	cmp	r2, #0
 8000cac:	d150      	bne.n	8000d50 <__udivmoddi4+0x154>
 8000cae:	1bcb      	subs	r3, r1, r7
 8000cb0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb4:	fa1f f887 	uxth.w	r8, r7
 8000cb8:	2601      	movs	r6, #1
 8000cba:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cbe:	0c21      	lsrs	r1, r4, #16
 8000cc0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc8:	fb08 f30c 	mul.w	r3, r8, ip
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0xe4>
 8000cd0:	1879      	adds	r1, r7, r1
 8000cd2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0xe2>
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	f200 80e9 	bhi.w	8000eb0 <__udivmoddi4+0x2b4>
 8000cde:	4684      	mov	ip, r0
 8000ce0:	1ac9      	subs	r1, r1, r3
 8000ce2:	b2a3      	uxth	r3, r4
 8000ce4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cf0:	fb08 f800 	mul.w	r8, r8, r0
 8000cf4:	45a0      	cmp	r8, r4
 8000cf6:	d907      	bls.n	8000d08 <__udivmoddi4+0x10c>
 8000cf8:	193c      	adds	r4, r7, r4
 8000cfa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x10a>
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	f200 80d9 	bhi.w	8000eb8 <__udivmoddi4+0x2bc>
 8000d06:	4618      	mov	r0, r3
 8000d08:	eba4 0408 	sub.w	r4, r4, r8
 8000d0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d10:	e7bf      	b.n	8000c92 <__udivmoddi4+0x96>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0x12e>
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	f000 80b1 	beq.w	8000e7e <__udivmoddi4+0x282>
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d22:	4630      	mov	r0, r6
 8000d24:	4631      	mov	r1, r6
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	fab3 f683 	clz	r6, r3
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d14a      	bne.n	8000dc8 <__udivmoddi4+0x1cc>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d302      	bcc.n	8000d3c <__udivmoddi4+0x140>
 8000d36:	4282      	cmp	r2, r0
 8000d38:	f200 80b8 	bhi.w	8000eac <__udivmoddi4+0x2b0>
 8000d3c:	1a84      	subs	r4, r0, r2
 8000d3e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d42:	2001      	movs	r0, #1
 8000d44:	468c      	mov	ip, r1
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	d0a8      	beq.n	8000c9c <__udivmoddi4+0xa0>
 8000d4a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4e:	e7a5      	b.n	8000c9c <__udivmoddi4+0xa0>
 8000d50:	f1c2 0320 	rsb	r3, r2, #32
 8000d54:	fa20 f603 	lsr.w	r6, r0, r3
 8000d58:	4097      	lsls	r7, r2
 8000d5a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d62:	40d9      	lsrs	r1, r3
 8000d64:	4330      	orrs	r0, r6
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d6c:	fa1f f887 	uxth.w	r8, r7
 8000d70:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f108 	mul.w	r1, r6, r8
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x19c>
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d8a:	f080 808d 	bcs.w	8000ea8 <__udivmoddi4+0x2ac>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 808a 	bls.w	8000ea8 <__udivmoddi4+0x2ac>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	443b      	add	r3, r7
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b281      	uxth	r1, r0
 8000d9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000da0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da8:	fb00 f308 	mul.w	r3, r0, r8
 8000dac:	428b      	cmp	r3, r1
 8000dae:	d907      	bls.n	8000dc0 <__udivmoddi4+0x1c4>
 8000db0:	1879      	adds	r1, r7, r1
 8000db2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000db6:	d273      	bcs.n	8000ea0 <__udivmoddi4+0x2a4>
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d971      	bls.n	8000ea0 <__udivmoddi4+0x2a4>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	4439      	add	r1, r7
 8000dc0:	1acb      	subs	r3, r1, r3
 8000dc2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc6:	e778      	b.n	8000cba <__udivmoddi4+0xbe>
 8000dc8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dcc:	fa03 f406 	lsl.w	r4, r3, r6
 8000dd0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd4:	431c      	orrs	r4, r3
 8000dd6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dda:	fa01 f306 	lsl.w	r3, r1, r6
 8000dde:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000de2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de6:	431f      	orrs	r7, r3
 8000de8:	0c3b      	lsrs	r3, r7, #16
 8000dea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dee:	fa1f f884 	uxth.w	r8, r4
 8000df2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dfa:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	fa02 f206 	lsl.w	r2, r2, r6
 8000e04:	fa00 f306 	lsl.w	r3, r0, r6
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x220>
 8000e0a:	1861      	adds	r1, r4, r1
 8000e0c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e10:	d248      	bcs.n	8000ea4 <__udivmoddi4+0x2a8>
 8000e12:	458a      	cmp	sl, r1
 8000e14:	d946      	bls.n	8000ea4 <__udivmoddi4+0x2a8>
 8000e16:	f1a9 0902 	sub.w	r9, r9, #2
 8000e1a:	4421      	add	r1, r4
 8000e1c:	eba1 010a 	sub.w	r1, r1, sl
 8000e20:	b2bf      	uxth	r7, r7
 8000e22:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e26:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e2a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2e:	fb00 f808 	mul.w	r8, r0, r8
 8000e32:	45b8      	cmp	r8, r7
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x24a>
 8000e36:	19e7      	adds	r7, r4, r7
 8000e38:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e3c:	d22e      	bcs.n	8000e9c <__udivmoddi4+0x2a0>
 8000e3e:	45b8      	cmp	r8, r7
 8000e40:	d92c      	bls.n	8000e9c <__udivmoddi4+0x2a0>
 8000e42:	3802      	subs	r0, #2
 8000e44:	4427      	add	r7, r4
 8000e46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e4a:	eba7 0708 	sub.w	r7, r7, r8
 8000e4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e52:	454f      	cmp	r7, r9
 8000e54:	46c6      	mov	lr, r8
 8000e56:	4649      	mov	r1, r9
 8000e58:	d31a      	bcc.n	8000e90 <__udivmoddi4+0x294>
 8000e5a:	d017      	beq.n	8000e8c <__udivmoddi4+0x290>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x27a>
 8000e5e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e62:	eb67 0701 	sbc.w	r7, r7, r1
 8000e66:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e6a:	40f2      	lsrs	r2, r6
 8000e6c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e70:	40f7      	lsrs	r7, r6
 8000e72:	e9c5 2700 	strd	r2, r7, [r5]
 8000e76:	2600      	movs	r6, #0
 8000e78:	4631      	mov	r1, r6
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	462e      	mov	r6, r5
 8000e80:	4628      	mov	r0, r5
 8000e82:	e70b      	b.n	8000c9c <__udivmoddi4+0xa0>
 8000e84:	4606      	mov	r6, r0
 8000e86:	e6e9      	b.n	8000c5c <__udivmoddi4+0x60>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fd      	b.n	8000c88 <__udivmoddi4+0x8c>
 8000e8c:	4543      	cmp	r3, r8
 8000e8e:	d2e5      	bcs.n	8000e5c <__udivmoddi4+0x260>
 8000e90:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e94:	eb69 0104 	sbc.w	r1, r9, r4
 8000e98:	3801      	subs	r0, #1
 8000e9a:	e7df      	b.n	8000e5c <__udivmoddi4+0x260>
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e7d2      	b.n	8000e46 <__udivmoddi4+0x24a>
 8000ea0:	4660      	mov	r0, ip
 8000ea2:	e78d      	b.n	8000dc0 <__udivmoddi4+0x1c4>
 8000ea4:	4681      	mov	r9, r0
 8000ea6:	e7b9      	b.n	8000e1c <__udivmoddi4+0x220>
 8000ea8:	4666      	mov	r6, ip
 8000eaa:	e775      	b.n	8000d98 <__udivmoddi4+0x19c>
 8000eac:	4630      	mov	r0, r6
 8000eae:	e74a      	b.n	8000d46 <__udivmoddi4+0x14a>
 8000eb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb4:	4439      	add	r1, r7
 8000eb6:	e713      	b.n	8000ce0 <__udivmoddi4+0xe4>
 8000eb8:	3802      	subs	r0, #2
 8000eba:	443c      	add	r4, r7
 8000ebc:	e724      	b.n	8000d08 <__udivmoddi4+0x10c>
 8000ebe:	bf00      	nop

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <pid_create>:
	Author e-mail: ruben at geekfactory dot mx
 */
#include "PID.h"

PID_t pid_create(PID_t pid, float* in, float* out, float* set, float kp, float ki, float kd)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	61f8      	str	r0, [r7, #28]
 8000ecc:	61b9      	str	r1, [r7, #24]
 8000ece:	617a      	str	r2, [r7, #20]
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	ed87 0a03 	vstr	s0, [r7, #12]
 8000ed6:	edc7 0a02 	vstr	s1, [r7, #8]
 8000eda:	ed87 1a01 	vstr	s2, [r7, #4]
	pid->input = in;
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	601a      	str	r2, [r3, #0]
	pid->output = out;
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	605a      	str	r2, [r3, #4]
	pid->setpoint = set;
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	609a      	str	r2, [r3, #8]
	pid->automode = false;
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	pid_limits(pid, 0, 255);
 8000ef8:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000f40 <pid_create+0x7c>
 8000efc:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000f44 <pid_create+0x80>
 8000f00:	69f8      	ldr	r0, [r7, #28]
 8000f02:	f000 f8c3 	bl	800108c <pid_limits>

	// Set default sample time to 100 ms
	pid->sampletime = 100 * (FREQUENCY / 1000);
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	2264      	movs	r2, #100	; 0x64
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c

	pid_direction(pid, E_PID_DIRECT);
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	69f8      	ldr	r0, [r7, #28]
 8000f10:	f000 f95e 	bl	80011d0 <pid_direction>
	PID_tune(pid, kp, ki, kd);
 8000f14:	ed97 1a01 	vldr	s2, [r7, #4]
 8000f18:	edd7 0a02 	vldr	s1, [r7, #8]
 8000f1c:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f20:	69f8      	ldr	r0, [r7, #28]
 8000f22:	f000 f811 	bl	8000f48 <PID_tune>

	pid->lasttime = HAL_GetTick() - pid->sampletime;
 8000f26:	f002 fad9 	bl	80034dc <HAL_GetTick>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f30:	1ad2      	subs	r2, r2, r3
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	629a      	str	r2, [r3, #40]	; 0x28

	return pid;
 8000f36:	69fb      	ldr	r3, [r7, #28]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	437f0000 	.word	0x437f0000
 8000f44:	00000000 	.word	0x00000000

08000f48 <PID_tune>:
	pid->lastin = in;
	pid->lasttime = HAL_GetTick();
}

void PID_tune(PID_t pid, float kp, float ki, float kd)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b087      	sub	sp, #28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f54:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f58:	ed87 1a00 	vstr	s2, [r7]
	// Check for validity
	if (kp < 0 || ki < 0 || kd < 0)
 8000f5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f68:	d452      	bmi.n	8001010 <PID_tune+0xc8>
 8000f6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f76:	d44b      	bmi.n	8001010 <PID_tune+0xc8>
 8000f78:	edd7 7a00 	vldr	s15, [r7]
 8000f7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f84:	d444      	bmi.n	8001010 <PID_tune+0xc8>
		return;
	
	//Compute sample time in seconds
	float ssec = ((float) pid->sampletime) / ((float) FREQUENCY);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8a:	ee07 3a90 	vmov	s15, r3
 8000f8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f92:	eddf 6a22 	vldr	s13, [pc, #136]	; 800101c <PID_tune+0xd4>
 8000f96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9a:	edc7 7a05 	vstr	s15, [r7, #20]

	pid->Kp = kp;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	68ba      	ldr	r2, [r7, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
	pid->Ki = ki * ssec;
 8000fa4:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fa8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->Kd = kd / ssec;
 8000fb6:	edd7 6a00 	vldr	s13, [r7]
 8000fba:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	edc3 7a05 	vstr	s15, [r3, #20]

	if (pid->direction == E_PID_REVERSE) {
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d11f      	bne.n	8001012 <PID_tune+0xca>
		pid->Kp = 0 - pid->Kp;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fd8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001020 <PID_tune+0xd8>
 8000fdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = 0 - pid->Ki;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fec:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001020 <PID_tune+0xd8>
 8000ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = 0 - pid->Kd;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	edd3 7a05 	vldr	s15, [r3, #20]
 8001000:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001020 <PID_tune+0xd8>
 8001004:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	edc3 7a05 	vstr	s15, [r3, #20]
 800100e:	e000      	b.n	8001012 <PID_tune+0xca>
		return;
 8001010:	bf00      	nop
	}
}
 8001012:	371c      	adds	r7, #28
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	447a0000 	.word	0x447a0000
 8001020:	00000000 	.word	0x00000000

08001024 <pid_sample>:

void pid_sample(PID_t pid, uint32_t time)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	if (time > 0) {
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d025      	beq.n	8001080 <pid_sample+0x5c>
		float ratio = (float) (time * (FREQUENCY / 1000)) / (float) pid->sampletime;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	ee07 3a90 	vmov	s15, r3
 800103a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001042:	ee07 3a90 	vmov	s15, r3
 8001046:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800104a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800104e:	edc7 7a03 	vstr	s15, [r7, #12]
		pid->Ki *= ratio;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	ed93 7a04 	vldr	s14, [r3, #16]
 8001058:	edd7 7a03 	vldr	s15, [r7, #12]
 800105c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd /= ratio;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	edd3 6a05 	vldr	s13, [r3, #20]
 800106c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	edc3 7a05 	vstr	s15, [r3, #20]
		pid->sampletime = time * (FREQUENCY / 1000);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <pid_limits>:

void pid_limits(PID_t pid, float min, float max)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	ed87 0a02 	vstr	s0, [r7, #8]
 8001098:	edc7 0a01 	vstr	s1, [r7, #4]
	if (min >= max) return;
 800109c:	ed97 7a02 	vldr	s14, [r7, #8]
 80010a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80010a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ac:	da4d      	bge.n	800114a <pid_limits+0xbe>
	pid->omin = min;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	68ba      	ldr	r2, [r7, #8]
 80010b2:	619a      	str	r2, [r3, #24]
	pid->omax = max;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	61da      	str	r2, [r3, #28]
	//Adjust output to new limits
	if (pid->automode) {
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d043      	beq.n	800114c <pid_limits+0xc0>
		if (*(pid->output) > pid->omax)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	ed93 7a00 	vldr	s14, [r3]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	edd3 7a07 	vldr	s15, [r3, #28]
 80010d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010da:	dd05      	ble.n	80010e8 <pid_limits+0x5c>
			*(pid->output) = pid->omax;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	69d2      	ldr	r2, [r2, #28]
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	e010      	b.n	800110a <pid_limits+0x7e>
		else if (*(pid->output) < pid->omin)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	ed93 7a00 	vldr	s14, [r3]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	edd3 7a06 	vldr	s15, [r3, #24]
 80010f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fe:	d504      	bpl.n	800110a <pid_limits+0x7e>
			*(pid->output) = pid->omin;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	6992      	ldr	r2, [r2, #24]
 8001108:	601a      	str	r2, [r3, #0]

		if (pid->iterm > pid->omax)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	edd3 7a07 	vldr	s15, [r3, #28]
 8001116:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800111a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111e:	dd04      	ble.n	800112a <pid_limits+0x9e>
			pid->iterm = pid->omax;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	69da      	ldr	r2, [r3, #28]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	621a      	str	r2, [r3, #32]
 8001128:	e010      	b.n	800114c <pid_limits+0xc0>
		else if (pid->iterm < pid->omin)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	edd3 7a06 	vldr	s15, [r3, #24]
 8001136:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800113a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113e:	d505      	bpl.n	800114c <pid_limits+0xc0>
			pid->iterm = pid->omin;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	699a      	ldr	r2, [r3, #24]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	621a      	str	r2, [r3, #32]
 8001148:	e000      	b.n	800114c <pid_limits+0xc0>
	if (min >= max) return;
 800114a:	bf00      	nop
	}
}
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <pid_auto>:

void pid_auto(PID_t pid)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
	// If going from manual to auto
	if (!pid->automode) {
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001164:	2b00      	cmp	r3, #0
 8001166:	d12c      	bne.n	80011c2 <pid_auto+0x6c>
		pid->iterm = *(pid->output);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	621a      	str	r2, [r3, #32]
		pid->lastin = *(pid->input);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	625a      	str	r2, [r3, #36]	; 0x24
		if (pid->iterm > pid->omax)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	edd3 7a07 	vldr	s15, [r3, #28]
 8001188:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800118c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001190:	dd04      	ble.n	800119c <pid_auto+0x46>
			pid->iterm = pid->omax;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69da      	ldr	r2, [r3, #28]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	621a      	str	r2, [r3, #32]
 800119a:	e00e      	b.n	80011ba <pid_auto+0x64>
		else if (pid->iterm < pid->omin)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	ed93 7a08 	vldr	s14, [r3, #32]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80011a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b0:	d503      	bpl.n	80011ba <pid_auto+0x64>
			pid->iterm = pid->omin;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	699a      	ldr	r2, [r3, #24]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	621a      	str	r2, [r3, #32]
		pid->automode = true;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2201      	movs	r2, #1
 80011be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <pid_direction>:
{
	pid->automode = false;
}

void pid_direction(PID_t pid, enum pid_control_directions dir)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	70fb      	strb	r3, [r7, #3]
	if (pid->automode && pid->direction != dir) {
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d023      	beq.n	800122e <pid_direction+0x5e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80011ec:	78fa      	ldrb	r2, [r7, #3]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d01d      	beq.n	800122e <pid_direction+0x5e>
		pid->Kp = (0 - pid->Kp);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80011f8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001244 <pid_direction+0x74>
 80011fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = (0 - pid->Ki);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	edd3 7a04 	vldr	s15, [r3, #16]
 800120c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001244 <pid_direction+0x74>
 8001210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = (0 - pid->Kd);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001220:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001244 <pid_direction+0x74>
 8001224:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	pid->direction = dir;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	78fa      	ldrb	r2, [r7, #3]
 8001232:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	00000000 	.word	0x00000000

08001248 <hubMotor_Init>:
#include "X2_6010S.h"
extern uint8_t receive_buf[15];



void hubMotor_Init(){
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HubM_IO_SON_GPIO_Port, HubM_IO_SON_Pin, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001252:	4808      	ldr	r0, [pc, #32]	; (8001274 <hubMotor_Init+0x2c>)
 8001254:	f003 fe58 	bl	8004f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_NOT_GPIO_Port, HubM_IO_NOT_Pin, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <hubMotor_Init+0x2c>)
 8001260:	f003 fe52 	bl	8004f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_POT_GPIO_Port, HubM_IO_POT_Pin, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800126a:	4802      	ldr	r0, [pc, #8]	; (8001274 <hubMotor_Init+0x2c>)
 800126c:	f003 fe4c 	bl	8004f08 <HAL_GPIO_WritePin>
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40020c00 	.word	0x40020c00

08001278 <send_HubMotor>:

void send_HubMotor(float m1_ang_speed, float m2_ang_speed){
 8001278:	b580      	push	{r7, lr}
 800127a:	b08c      	sub	sp, #48	; 0x30
 800127c:	af00      	add	r7, sp, #0
 800127e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001282:	edc7 0a00 	vstr	s1, [r7]
	int16_t motor1_speed, motor2_speed;
	//convert velocity into pulse/second
	motor1_speed = -(int16_t)(m1_ang_speed * 4096.0 / (2 * M_PI));
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff f916 	bl	80004b8 <__aeabi_f2d>
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	4b63      	ldr	r3, [pc, #396]	; (8001420 <send_HubMotor+0x1a8>)
 8001292:	f7ff f969 	bl	8000568 <__aeabi_dmul>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	a35e      	add	r3, pc, #376	; (adr r3, 8001418 <send_HubMotor+0x1a0>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	f7ff fa8a 	bl	80007bc <__aeabi_ddiv>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	f7ff fbf4 	bl	8000a9c <__aeabi_d2iz>
 80012b4:	4603      	mov	r3, r0
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	425b      	negs	r3, r3
 80012bc:	b29b      	uxth	r3, r3
 80012be:	85fb      	strh	r3, [r7, #46]	; 0x2e
	motor2_speed = (int16_t)(m2_ang_speed * 4096.0/ (2 * M_PI));
 80012c0:	6838      	ldr	r0, [r7, #0]
 80012c2:	f7ff f8f9 	bl	80004b8 <__aeabi_f2d>
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	4b55      	ldr	r3, [pc, #340]	; (8001420 <send_HubMotor+0x1a8>)
 80012cc:	f7ff f94c 	bl	8000568 <__aeabi_dmul>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	a34f      	add	r3, pc, #316	; (adr r3, 8001418 <send_HubMotor+0x1a0>)
 80012da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012de:	f7ff fa6d 	bl	80007bc <__aeabi_ddiv>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff fbd7 	bl	8000a9c <__aeabi_d2iz>
 80012ee:	4603      	mov	r3, r0
 80012f0:	85bb      	strh	r3, [r7, #44]	; 0x2c
//	motor1_speed = -(int16_t)(m1_speed);
//	motor2_speed = (int16_t)(m2_speed);

	uint8_t send_buf[15];
	send_buf[0] = 0xAA;
 80012f2:	23aa      	movs	r3, #170	; 0xaa
 80012f4:	733b      	strb	r3, [r7, #12]
	send_buf[1] = 0xA4;
 80012f6:	23a4      	movs	r3, #164	; 0xa4
 80012f8:	737b      	strb	r3, [r7, #13]
	send_buf[2] = 0x0E;
 80012fa:	230e      	movs	r3, #14
 80012fc:	73bb      	strb	r3, [r7, #14]
	send_buf[3] = 0x00;
 80012fe:	2300      	movs	r3, #0
 8001300:	73fb      	strb	r3, [r7, #15]
	send_buf[4] = MOTOR_ENABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	743b      	strb	r3, [r7, #16]
	send_buf[5] = MOTOR_ENCODER_FEEDBACK;
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	747b      	strb	r3, [r7, #17]

	//Set acceleration to constant by default
	//time taken from 0 to 1000rpm
	uint16_t acceleration = 200;
 800130a:	23c8      	movs	r3, #200	; 0xc8
 800130c:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t msb_acce = (uint8_t)((acceleration & 0xFF00) >> 8);
 800130e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	b29b      	uxth	r3, r3
 8001314:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t lsb_acce = (uint8_t)(acceleration & 0x00FF);
 8001318:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800131a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	send_buf[6] = lsb_acce;
 800131e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001322:	74bb      	strb	r3, [r7, #18]
	send_buf[7] = msb_acce;
 8001324:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001328:	74fb      	strb	r3, [r7, #19]

	//Set maximum torque
	//Value: 0 - 450 (300 by default)
	uint16_t max_torque = 350;
 800132a:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800132e:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t msb_max_torque = (uint8_t)((max_torque & 0xFF00) >> 8);
 8001330:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001332:	0a1b      	lsrs	r3, r3, #8
 8001334:	b29b      	uxth	r3, r3
 8001336:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t lsb_max_torque = (uint8_t)(max_torque & 0x00FF);
 800133a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800133c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	send_buf[8] = lsb_max_torque;
 8001340:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001344:	753b      	strb	r3, [r7, #20]
	send_buf[9] = msb_max_torque;
 8001346:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800134a:	757b      	strb	r3, [r7, #21]

	//Set motor1 speed
	uint8_t msb_motor1_speed = (uint8_t)((motor1_speed & 0xFF00) >> 8);
 800134c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001350:	121b      	asrs	r3, r3, #8
 8001352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t lsb_motor1_speed = (uint8_t)(motor1_speed & 0x00FF);
 8001356:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001358:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	send_buf[10] = lsb_motor1_speed;
 800135c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001360:	75bb      	strb	r3, [r7, #22]
	send_buf[11] = msb_motor1_speed;
 8001362:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001366:	75fb      	strb	r3, [r7, #23]

	//Set motor2 speed
	uint8_t msb_motor2_speed = (uint8_t)((motor2_speed & 0xFF00) >> 8);
 8001368:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800136c:	121b      	asrs	r3, r3, #8
 800136e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t lsb_motor2_speed = (uint8_t)(motor2_speed & 0x00FF);
 8001372:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001374:	f887 3020 	strb.w	r3, [r7, #32]
	send_buf[12] = lsb_motor2_speed;
 8001378:	f897 3020 	ldrb.w	r3, [r7, #32]
 800137c:	763b      	strb	r3, [r7, #24]
	send_buf[13] = msb_motor2_speed;
 800137e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001382:	767b      	strb	r3, [r7, #25]

	//checksum byte
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 8001384:	7b3b      	ldrb	r3, [r7, #12]
 8001386:	b29a      	uxth	r2, r3
 8001388:	7b7b      	ldrb	r3, [r7, #13]
 800138a:	b29b      	uxth	r3, r3
 800138c:	4413      	add	r3, r2
 800138e:	b29a      	uxth	r2, r3
 8001390:	7bbb      	ldrb	r3, [r7, #14]
 8001392:	b29b      	uxth	r3, r3
 8001394:	4413      	add	r3, r2
 8001396:	b29a      	uxth	r2, r3
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	b29b      	uxth	r3, r3
 800139c:	4413      	add	r3, r2
 800139e:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[4] + (uint16_t)send_buf[5] + (uint16_t)send_buf[6]
 80013a0:	7c3b      	ldrb	r3, [r7, #16]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4413      	add	r3, r2
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	7c7b      	ldrb	r3, [r7, #17]
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	4413      	add	r3, r2
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	7cbb      	ldrb	r3, [r7, #18]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	4413      	add	r3, r2
 80013b6:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[7] + (uint16_t)send_buf[8] + (uint16_t)send_buf[9]
 80013b8:	7cfb      	ldrb	r3, [r7, #19]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	4413      	add	r3, r2
 80013be:	b29a      	uxth	r2, r3
 80013c0:	7d3b      	ldrb	r3, [r7, #20]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	4413      	add	r3, r2
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	7d7b      	ldrb	r3, [r7, #21]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	4413      	add	r3, r2
 80013ce:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[10] + (uint16_t)send_buf[11] + (uint16_t)send_buf[12]
 80013d0:	7dbb      	ldrb	r3, [r7, #22]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	4413      	add	r3, r2
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	7dfb      	ldrb	r3, [r7, #23]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	4413      	add	r3, r2
 80013de:	b29a      	uxth	r2, r3
 80013e0:	7e3b      	ldrb	r3, [r7, #24]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	4413      	add	r3, r2
 80013e6:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[13];
 80013e8:	7e7b      	ldrb	r3, [r7, #25]
 80013ea:	b29b      	uxth	r3, r3
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 80013ec:	4413      	add	r3, r2
 80013ee:	83fb      	strh	r3, [r7, #30]

	send_buf[14] = (uint8_t)(sum & 0x00FF);
 80013f0:	8bfb      	ldrh	r3, [r7, #30]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	76bb      	strb	r3, [r7, #26]

	HAL_UART_Transmit(&huart3, send_buf, 15,10);
 80013f6:	f107 010c 	add.w	r1, r7, #12
 80013fa:	230a      	movs	r3, #10
 80013fc:	220f      	movs	r2, #15
 80013fe:	4809      	ldr	r0, [pc, #36]	; (8001424 <send_HubMotor+0x1ac>)
 8001400:	f006 facf 	bl	80079a2 <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart3, receive_buf, 15);
 8001404:	220f      	movs	r2, #15
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <send_HubMotor+0x1b0>)
 8001408:	4806      	ldr	r0, [pc, #24]	; (8001424 <send_HubMotor+0x1ac>)
 800140a:	f006 fb63 	bl	8007ad4 <HAL_UART_Receive_DMA>
}
 800140e:	bf00      	nop
 8001410:	3730      	adds	r7, #48	; 0x30
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	54442d18 	.word	0x54442d18
 800141c:	401921fb 	.word	0x401921fb
 8001420:	40b00000 	.word	0x40b00000
 8001424:	200005d4 	.word	0x200005d4
 8001428:	2000045c 	.word	0x2000045c

0800142c <ADC_Init>:
SPI_HandleTypeDef hspi1;

//ADCHandle         hADC;

void ADC_Init()
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0

	//Delay for SPI encoder to startup
//	HAL_Delay(100);

	/*Reset AD7606*/
	AD7606_CS_HIGH;
 8001430:	2201      	movs	r2, #1
 8001432:	2110      	movs	r1, #16
 8001434:	481c      	ldr	r0, [pc, #112]	; (80014a8 <ADC_Init+0x7c>)
 8001436:	f003 fd67 	bl	8004f08 <HAL_GPIO_WritePin>
	AD7606_CV_LOW;
 800143a:	2200      	movs	r2, #0
 800143c:	2120      	movs	r1, #32
 800143e:	481b      	ldr	r0, [pc, #108]	; (80014ac <ADC_Init+0x80>)
 8001440:	f003 fd62 	bl	8004f08 <HAL_GPIO_WritePin>

	AD7606_RST_LOW;
 8001444:	2200      	movs	r2, #0
 8001446:	2110      	movs	r1, #16
 8001448:	4818      	ldr	r0, [pc, #96]	; (80014ac <ADC_Init+0x80>)
 800144a:	f003 fd5d 	bl	8004f08 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800144e:	2001      	movs	r0, #1
 8001450:	f002 f850 	bl	80034f4 <HAL_Delay>
	AD7606_RST_HIGH;
 8001454:	2201      	movs	r2, #1
 8001456:	2110      	movs	r1, #16
 8001458:	4814      	ldr	r0, [pc, #80]	; (80014ac <ADC_Init+0x80>)
 800145a:	f003 fd55 	bl	8004f08 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800145e:	2001      	movs	r0, #1
 8001460:	f002 f848 	bl	80034f4 <HAL_Delay>
	AD7606_RST_LOW;
 8001464:	2200      	movs	r2, #0
 8001466:	2110      	movs	r1, #16
 8001468:	4810      	ldr	r0, [pc, #64]	; (80014ac <ADC_Init+0x80>)
 800146a:	f003 fd4d 	bl	8004f08 <HAL_GPIO_WritePin>

	/*Set analog input range*/
	AD7606_RANGE_LOW_5V;
 800146e:	2200      	movs	r2, #0
 8001470:	2101      	movs	r1, #1
 8001472:	480e      	ldr	r0, [pc, #56]	; (80014ac <ADC_Init+0x80>)
 8001474:	f003 fd48 	bl	8004f08 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001478:	2001      	movs	r0, #1
 800147a:	f002 f83b 	bl	80034f4 <HAL_Delay>

	/*Set oversampling ratio to 32*/
	HAL_GPIO_WritePin(AD7606_OS2_PIN_Port, AD7606_OS2_PIN, GPIO_PIN_SET);
 800147e:	2201      	movs	r2, #1
 8001480:	2102      	movs	r1, #2
 8001482:	480a      	ldr	r0, [pc, #40]	; (80014ac <ADC_Init+0x80>)
 8001484:	f003 fd40 	bl	8004f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS1_PIN_Port, AD7606_OS1_PIN, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	2104      	movs	r1, #4
 800148c:	4807      	ldr	r0, [pc, #28]	; (80014ac <ADC_Init+0x80>)
 800148e:	f003 fd3b 	bl	8004f08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS0_PIN_Port, AD7606_OS0_PIN, GPIO_PIN_SET);
 8001492:	2201      	movs	r2, #1
 8001494:	2108      	movs	r1, #8
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <ADC_Init+0x80>)
 8001498:	f003 fd36 	bl	8004f08 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800149c:	2001      	movs	r0, #1
 800149e:	f002 f829 	bl	80034f4 <HAL_Delay>

//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
//	HAL_Delay(500);
//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40020000 	.word	0x40020000
 80014ac:	40020800 	.word	0x40020800

080014b0 <ADC_DataRequest>:

void ADC_DataRequest(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	AD7606_CV_LOW;
 80014b4:	2200      	movs	r2, #0
 80014b6:	2120      	movs	r1, #32
 80014b8:	4804      	ldr	r0, [pc, #16]	; (80014cc <ADC_DataRequest+0x1c>)
 80014ba:	f003 fd25 	bl	8004f08 <HAL_GPIO_WritePin>
	AD7606_CV_HIGH;
 80014be:	2201      	movs	r2, #1
 80014c0:	2120      	movs	r1, #32
 80014c2:	4802      	ldr	r0, [pc, #8]	; (80014cc <ADC_DataRequest+0x1c>)
 80014c4:	f003 fd20 	bl	8004f08 <HAL_GPIO_WritePin>
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40020800 	.word	0x40020800

080014d0 <ADC_Read>:


void ADC_Read(int16_t *data)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 80014d8:	2200      	movs	r2, #0
 80014da:	2110      	movs	r1, #16
 80014dc:	4808      	ldr	r0, [pc, #32]	; (8001500 <ADC_Read+0x30>)
 80014de:	f003 fd13 	bl	8004f08 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 80014e2:	2302      	movs	r3, #2
 80014e4:	2208      	movs	r2, #8
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	4806      	ldr	r0, [pc, #24]	; (8001504 <ADC_Read+0x34>)
 80014ea:	f004 fc1d 	bl	8005d28 <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 80014ee:	2201      	movs	r2, #1
 80014f0:	2110      	movs	r1, #16
 80014f2:	4803      	ldr	r0, [pc, #12]	; (8001500 <ADC_Read+0x30>)
 80014f4:	f003 fd08 	bl	8004f08 <HAL_GPIO_WritePin>
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40020000 	.word	0x40020000
 8001504:	200001c0 	.word	0x200001c0

08001508 <bd25l_Init>:
	.DIR_pin	= ClimbM_IO_FR2_Pin,
	.pole		= 4,
	.ID		= 2,
};

void bd25l_Init(Motor_TypeDef* motor){
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	enableMotor(motor, 0);
 8001510:	2100      	movs	r1, #0
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 f808 	bl	8001528 <enableMotor>
	brakeMotor(motor, 0);
 8001518:	2100      	movs	r1, #0
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 f828 	bl	8001570 <brakeMotor>
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <enableMotor>:
	brakeMotor(motor, 1);
	enableMotor(motor, 0);

}

void enableMotor(Motor_TypeDef* motor, uint8_t state){
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->EN_port, motor->EN_pin, state);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800153c:	78fa      	ldrb	r2, [r7, #3]
 800153e:	4619      	mov	r1, r3
 8001540:	f003 fce2 	bl	8004f08 <HAL_GPIO_WritePin>
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <emBrakeMotor>:

void emBrakeMotor(uint8_t state){
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Brake_Wheel_GPIO_Port, Brake_Wheel_Pin, state);
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	461a      	mov	r2, r3
 800155a:	2108      	movs	r1, #8
 800155c:	4803      	ldr	r0, [pc, #12]	; (800156c <emBrakeMotor+0x20>)
 800155e:	f003 fcd3 	bl	8004f08 <HAL_GPIO_WritePin>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40020c00 	.word	0x40020c00

08001570 <brakeMotor>:

void brakeMotor(Motor_TypeDef* motor, uint8_t state){
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->BRK_port, motor->BRK_pin, state);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69d8      	ldr	r0, [r3, #28]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	8c1b      	ldrh	r3, [r3, #32]
 8001584:	78fa      	ldrb	r2, [r7, #3]
 8001586:	4619      	mov	r1, r3
 8001588:	f003 fcbe 	bl	8004f08 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(motor->outputPWM, motor->PWM_channel);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	695a      	ldr	r2, [r3, #20]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	8b1b      	ldrh	r3, [r3, #24]
 8001594:	4619      	mov	r1, r3
 8001596:	4610      	mov	r0, r2
 8001598:	f005 f844 	bl	8006624 <HAL_TIM_PWM_Stop>
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <setMotorDir>:

void setMotorDir(Motor_TypeDef* motor, uint8_t dir){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin, dir);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80015b8:	78fa      	ldrb	r2, [r7, #3]
 80015ba:	4619      	mov	r1, r3
 80015bc:	f003 fca4 	bl	8004f08 <HAL_GPIO_WritePin>
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <setMotorSpeed>:

void setMotorSpeed(Motor_TypeDef* motor, float speed){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	ed87 0a00 	vstr	s0, [r7]

	float frequency = 0;
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
	uint16_t period;
	uint32_t duty_cycle; //50%

	if (speed > 100) speed = 100.0;
 80015da:	edd7 7a00 	vldr	s15, [r7]
 80015de:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001710 <setMotorSpeed+0x148>
 80015e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ea:	dd01      	ble.n	80015f0 <setMotorSpeed+0x28>
 80015ec:	4b49      	ldr	r3, [pc, #292]	; (8001714 <setMotorSpeed+0x14c>)
 80015ee:	603b      	str	r3, [r7, #0]
	//Frequency equation derived from data sheet
	frequency = (uint16_t)((speed - 0.2597)/0.02494);
 80015f0:	6838      	ldr	r0, [r7, #0]
 80015f2:	f7fe ff61 	bl	80004b8 <__aeabi_f2d>
 80015f6:	a340      	add	r3, pc, #256	; (adr r3, 80016f8 <setMotorSpeed+0x130>)
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	f7fe fdfc 	bl	80001f8 <__aeabi_dsub>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	a33d      	add	r3, pc, #244	; (adr r3, 8001700 <setMotorSpeed+0x138>)
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	f7ff f8d5 	bl	80007bc <__aeabi_ddiv>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f7ff fa67 	bl	8000aec <__aeabi_d2uiz>
 800161e:	4603      	mov	r3, r0
 8001620:	b29b      	uxth	r3, r3
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800162a:	edc7 7a05 	vstr	s15, [r7, #20]
	period = (int)(1e6/frequency)+1;
 800162e:	6978      	ldr	r0, [r7, #20]
 8001630:	f7fe ff42 	bl	80004b8 <__aeabi_f2d>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	a133      	add	r1, pc, #204	; (adr r1, 8001708 <setMotorSpeed+0x140>)
 800163a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800163e:	f7ff f8bd 	bl	80007bc <__aeabi_ddiv>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	f7ff fa27 	bl	8000a9c <__aeabi_d2iz>
 800164e:	4603      	mov	r3, r0
 8001650:	b29b      	uxth	r3, r3
 8001652:	3301      	adds	r3, #1
 8001654:	827b      	strh	r3, [r7, #18]
	duty_cycle = period / 2;
 8001656:	8a7b      	ldrh	r3, [r7, #18]
 8001658:	085b      	lsrs	r3, r3, #1
 800165a:	b29b      	uxth	r3, r3
 800165c:	60fb      	str	r3, [r7, #12]
//	      motor->outputPWM->Instance->CCR4 = duty_cycle;
//
//	    HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
//	}

	if (speed<4){
 800165e:	edd7 7a00 	vldr	s15, [r7]
 8001662:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800166a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166e:	d503      	bpl.n	8001678 <setMotorSpeed+0xb0>
		brakeMotor(motor, 1);
 8001670:	2101      	movs	r1, #1
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ff7c 	bl	8001570 <brakeMotor>
	}



	motor->outputPWM->Instance->ARR = period;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	8a7a      	ldrh	r2, [r7, #18]
 8001680:	62da      	str	r2, [r3, #44]	; 0x2c
	if(motor->PWM_channel == TIM_CHANNEL_1)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	8b1b      	ldrh	r3, [r3, #24]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d105      	bne.n	8001696 <setMotorSpeed+0xce>
	  motor->outputPWM->Instance->CCR1 = duty_cycle;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	635a      	str	r2, [r3, #52]	; 0x34
 8001694:	e01c      	b.n	80016d0 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_2)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	8b1b      	ldrh	r3, [r3, #24]
 800169a:	2b04      	cmp	r3, #4
 800169c:	d105      	bne.n	80016aa <setMotorSpeed+0xe2>
		  motor->outputPWM->Instance->CCR2 = duty_cycle;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	639a      	str	r2, [r3, #56]	; 0x38
 80016a8:	e012      	b.n	80016d0 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_3)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	8b1b      	ldrh	r3, [r3, #24]
 80016ae:	2b08      	cmp	r3, #8
 80016b0:	d105      	bne.n	80016be <setMotorSpeed+0xf6>
		  motor->outputPWM->Instance->CCR3 = duty_cycle;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80016bc:	e008      	b.n	80016d0 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_4)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	8b1b      	ldrh	r3, [r3, #24]
 80016c2:	2b0c      	cmp	r3, #12
 80016c4:	d104      	bne.n	80016d0 <setMotorSpeed+0x108>
	  motor->outputPWM->Instance->CCR4 = duty_cycle;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	695a      	ldr	r2, [r3, #20]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	8b1b      	ldrh	r3, [r3, #24]
 80016d8:	4619      	mov	r1, r3
 80016da:	4610      	mov	r0, r2
 80016dc:	f004 ff64 	bl	80065a8 <HAL_TIM_PWM_Start>



	motor->outputPWM->Instance->CNT = 0;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2200      	movs	r2, #0
 80016e8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	f3af 8000 	nop.w
 80016f8:	bfb15b57 	.word	0xbfb15b57
 80016fc:	3fd09eec 	.word	0x3fd09eec
 8001700:	1172ef0b 	.word	0x1172ef0b
 8001704:	3f9989df 	.word	0x3f9989df
 8001708:	00000000 	.word	0x00000000
 800170c:	412e8480 	.word	0x412e8480
 8001710:	42c80000 	.word	0x42c80000
 8001714:	42c80000 	.word	0x42c80000

08001718 <runMotor>:
		return -1;
	}
	else return 1;
}

void runMotor(Motor_TypeDef* motor, float speed){
 8001718:	b5b0      	push	{r4, r5, r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	ed87 0a00 	vstr	s0, [r7]
  //	    - positive speed Lift DOWN
  //	    - negative speed lift UP
    if (motor->ID == 1){
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800172a:	2b01      	cmp	r3, #1
 800172c:	d129      	bne.n	8001782 <runMotor+0x6a>
	if (fabs(speed)/speed  >= 0)
 800172e:	edd7 7a00 	vldr	s15, [r7]
 8001732:	eef0 7ae7 	vabs.f32	s15, s15
 8001736:	ee17 0a90 	vmov	r0, s15
 800173a:	f7fe febd 	bl	80004b8 <__aeabi_f2d>
 800173e:	4604      	mov	r4, r0
 8001740:	460d      	mov	r5, r1
 8001742:	6838      	ldr	r0, [r7, #0]
 8001744:	f7fe feb8 	bl	80004b8 <__aeabi_f2d>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4620      	mov	r0, r4
 800174e:	4629      	mov	r1, r5
 8001750:	f7ff f834 	bl	80007bc <__aeabi_ddiv>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	f7ff f986 	bl	8000a74 <__aeabi_dcmpge>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d004      	beq.n	8001778 <runMotor+0x60>
	      setMotorDir(motor, 0);
 800176e:	2100      	movs	r1, #0
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ff17 	bl	80015a4 <setMotorDir>
 8001776:	e032      	b.n	80017de <runMotor+0xc6>
	else
	  setMotorDir(motor, 1);
 8001778:	2101      	movs	r1, #1
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ff12 	bl	80015a4 <setMotorDir>
 8001780:	e02d      	b.n	80017de <runMotor+0xc6>
    }
    else if (motor->ID == 2){
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001788:	2b02      	cmp	r3, #2
 800178a:	d128      	bne.n	80017de <runMotor+0xc6>
	if (fabs(speed)/speed  >= 0)
 800178c:	edd7 7a00 	vldr	s15, [r7]
 8001790:	eef0 7ae7 	vabs.f32	s15, s15
 8001794:	ee17 0a90 	vmov	r0, s15
 8001798:	f7fe fe8e 	bl	80004b8 <__aeabi_f2d>
 800179c:	4604      	mov	r4, r0
 800179e:	460d      	mov	r5, r1
 80017a0:	6838      	ldr	r0, [r7, #0]
 80017a2:	f7fe fe89 	bl	80004b8 <__aeabi_f2d>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4620      	mov	r0, r4
 80017ac:	4629      	mov	r1, r5
 80017ae:	f7ff f805 	bl	80007bc <__aeabi_ddiv>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	f7ff f957 	bl	8000a74 <__aeabi_dcmpge>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d004      	beq.n	80017d6 <runMotor+0xbe>
	  setMotorDir(motor, 1);
 80017cc:	2101      	movs	r1, #1
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff fee8 	bl	80015a4 <setMotorDir>
 80017d4:	e003      	b.n	80017de <runMotor+0xc6>
	else
	  setMotorDir(motor, 0);
 80017d6:	2100      	movs	r1, #0
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff fee3 	bl	80015a4 <setMotorDir>
    }

    HAL_Delay(50);
 80017de:	2032      	movs	r0, #50	; 0x32
 80017e0:	f001 fe88 	bl	80034f4 <HAL_Delay>
    brakeMotor(motor, 0);
 80017e4:	2100      	movs	r1, #0
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff fec2 	bl	8001570 <brakeMotor>
    setMotorSpeed(motor, fabs(speed));
 80017ec:	edd7 7a00 	vldr	s15, [r7]
 80017f0:	eef0 7ae7 	vabs.f32	s15, s15
 80017f4:	eeb0 0a67 	vmov.f32	s0, s15
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff fee5 	bl	80015c8 <setMotorSpeed>

}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bdb0      	pop	{r4, r5, r7, pc}

08001806 <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	889b      	ldrh	r3, [r3, #4]
 8001818:	4619      	mov	r1, r3
 800181a:	4610      	mov	r0, r2
 800181c:	f003 fb5c 	bl	8004ed8 <HAL_GPIO_ReadPin>
 8001820:	4603      	mov	r3, r0
 8001822:	461a      	mov	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	799a      	ldrb	r2, [r3, #6]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	79db      	ldrb	r3, [r3, #7]
 8001830:	429a      	cmp	r2, r3
 8001832:	d004      	beq.n	800183e <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 8001834:	f001 fe52 	bl	80034dc <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 800183e:	f001 fe4d 	bl	80034dc <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	429a      	cmp	r2, r3
 800184e:	d209      	bcs.n	8001864 <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	799a      	ldrb	r2, [r3, #6]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7a1b      	ldrb	r3, [r3, #8]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d101      	bne.n	8001864 <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 8001860:	2301      	movs	r3, #1
 8001862:	e004      	b.n	800186e <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	799a      	ldrb	r2, [r3, #6]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800187e:	4b30      	ldr	r3, [pc, #192]	; (8001940 <MX_CAN1_Init+0xc8>)
 8001880:	4a30      	ldr	r2, [pc, #192]	; (8001944 <MX_CAN1_Init+0xcc>)
 8001882:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8001884:	4b2e      	ldr	r3, [pc, #184]	; (8001940 <MX_CAN1_Init+0xc8>)
 8001886:	2209      	movs	r2, #9
 8001888:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800188a:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <MX_CAN1_Init+0xc8>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001890:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <MX_CAN1_Init+0xc8>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001896:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <MX_CAN1_Init+0xc8>)
 8001898:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800189c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800189e:	4b28      	ldr	r3, [pc, #160]	; (8001940 <MX_CAN1_Init+0xc8>)
 80018a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018a4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80018a6:	4b26      	ldr	r3, [pc, #152]	; (8001940 <MX_CAN1_Init+0xc8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80018ac:	4b24      	ldr	r3, [pc, #144]	; (8001940 <MX_CAN1_Init+0xc8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80018b2:	4b23      	ldr	r3, [pc, #140]	; (8001940 <MX_CAN1_Init+0xc8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80018b8:	4b21      	ldr	r3, [pc, #132]	; (8001940 <MX_CAN1_Init+0xc8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80018be:	4b20      	ldr	r3, [pc, #128]	; (8001940 <MX_CAN1_Init+0xc8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80018c4:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <MX_CAN1_Init+0xc8>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80018ca:	481d      	ldr	r0, [pc, #116]	; (8001940 <MX_CAN1_Init+0xc8>)
 80018cc:	f001 fe36 	bl	800353c <HAL_CAN_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80018d6:	f000 ffc3 	bl	8002860 <Error_Handler>
  }

  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfil_1;
	canfil_1.FilterBank = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 80018de:	2300      	movs	r3, #0
 80018e0:	61bb      	str	r3, [r7, #24]
	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 80018e2:	2301      	movs	r3, #1
 80018e4:	61fb      	str	r3, [r7, #28]
	canfil_1.FilterIdHigh = 0x0000;
 80018e6:	2300      	movs	r3, #0
 80018e8:	603b      	str	r3, [r7, #0]
	canfil_1.FilterIdLow = 0x0000;
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
	canfil_1.FilterMaskIdHigh = 0x0000;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
	canfil_1.FilterMaskIdLow = 0x0000;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
	canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 80018fa:	2301      	movs	r3, #1
 80018fc:	623b      	str	r3, [r7, #32]
	canfil_1.SlaveStartFilterBank = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK)
 8001902:	463b      	mov	r3, r7
 8001904:	4619      	mov	r1, r3
 8001906:	480e      	ldr	r0, [pc, #56]	; (8001940 <MX_CAN1_Init+0xc8>)
 8001908:	f001 ff14 	bl	8003734 <HAL_CAN_ConfigFilter>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_CAN1_Init+0x9e>
				Error_Handler();
 8001912:	f000 ffa5 	bl	8002860 <Error_Handler>

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING))
 8001916:	2102      	movs	r1, #2
 8001918:	4809      	ldr	r0, [pc, #36]	; (8001940 <MX_CAN1_Init+0xc8>)
 800191a:	f002 fa1c 	bl	8003d56 <HAL_CAN_ActivateNotification>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d002      	beq.n	800192a <MX_CAN1_Init+0xb2>
				return Error_Handler();
 8001924:	f000 ff9c 	bl	8002860 <Error_Handler>
 8001928:	e007      	b.n	800193a <MX_CAN1_Init+0xc2>

	if (HAL_CAN_Start(&hcan1))
 800192a:	4805      	ldr	r0, [pc, #20]	; (8001940 <MX_CAN1_Init+0xc8>)
 800192c:	f001 ffe2 	bl	80038f4 <HAL_CAN_Start>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_CAN1_Init+0xc2>
					return Error_Handler();
 8001936:	f000 ff93 	bl	8002860 <Error_Handler>


	    /* USER CODE END CAN1_Init 2 */


}
 800193a:	3728      	adds	r7, #40	; 0x28
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000218 	.word	0x20000218
 8001944:	40006400 	.word	0x40006400

08001948 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a1d      	ldr	r2, [pc, #116]	; (80019dc <HAL_CAN_MspInit+0x94>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d133      	bne.n	80019d2 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	4b1c      	ldr	r3, [pc, #112]	; (80019e0 <HAL_CAN_MspInit+0x98>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	4a1b      	ldr	r2, [pc, #108]	; (80019e0 <HAL_CAN_MspInit+0x98>)
 8001974:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001978:	6413      	str	r3, [r2, #64]	; 0x40
 800197a:	4b19      	ldr	r3, [pc, #100]	; (80019e0 <HAL_CAN_MspInit+0x98>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <HAL_CAN_MspInit+0x98>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <HAL_CAN_MspInit+0x98>)
 8001990:	f043 0308 	orr.w	r3, r3, #8
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_CAN_MspInit+0x98>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019a2:	2303      	movs	r3, #3
 80019a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ae:	2303      	movs	r3, #3
 80019b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80019b2:	2309      	movs	r3, #9
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4619      	mov	r1, r3
 80019bc:	4809      	ldr	r0, [pc, #36]	; (80019e4 <HAL_CAN_MspInit+0x9c>)
 80019be:	f003 f8df 	bl	8004b80 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2100      	movs	r1, #0
 80019c6:	2014      	movs	r0, #20
 80019c8:	f002 fcf5 	bl	80043b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80019cc:	2014      	movs	r0, #20
 80019ce:	f002 fd0e 	bl	80043ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80019d2:	bf00      	nop
 80019d4:	3728      	adds	r7, #40	; 0x28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40006400 	.word	0x40006400
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020c00 	.word	0x40020c00

080019e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <MX_DMA_Init+0x4c>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a0f      	ldr	r2, [pc, #60]	; (8001a34 <MX_DMA_Init+0x4c>)
 80019f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <MX_DMA_Init+0x4c>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	200c      	movs	r0, #12
 8001a10:	f002 fcd1 	bl	80043b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a14:	200c      	movs	r0, #12
 8001a16:	f002 fcea 	bl	80043ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	200e      	movs	r0, #14
 8001a20:	f002 fcc9 	bl	80043b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001a24:	200e      	movs	r0, #14
 8001a26:	f002 fce2 	bl	80043ee <HAL_NVIC_EnableIRQ>

}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800

08001a38 <ENCODER_Init>:
CAN_HandleTypeDef hcan2;
//uint8_t incoming[8];
//CAN_RxHeaderTypeDef RxHeader;

void ENCODER_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  //Assign each encoder to one of the two CAN buses
	encoderBack.hcan = &hcan1;
 8001a3c:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <ENCODER_Init+0x24>)
 8001a3e:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <ENCODER_Init+0x28>)
 8001a40:	601a      	str	r2, [r3, #0]
	encoderFront.hcan = &hcan1;
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <ENCODER_Init+0x2c>)
 8001a44:	4a06      	ldr	r2, [pc, #24]	; (8001a60 <ENCODER_Init+0x28>)
 8001a46:	601a      	str	r2, [r3, #0]
	
	//Set Tx header for each encoder handle
	ENCODER_Set_TxHeader(&encoderBack, ENC_ADDR_LEFT);
 8001a48:	2101      	movs	r1, #1
 8001a4a:	4804      	ldr	r0, [pc, #16]	; (8001a5c <ENCODER_Init+0x24>)
 8001a4c:	f000 f83f 	bl	8001ace <ENCODER_Set_TxHeader>
	ENCODER_Set_TxHeader(&encoderFront, ENC_ADDR_RIGHT);
 8001a50:	2102      	movs	r1, #2
 8001a52:	4804      	ldr	r0, [pc, #16]	; (8001a64 <ENCODER_Init+0x2c>)
 8001a54:	f000 f83b 	bl	8001ace <ENCODER_Set_TxHeader>

}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200002c0 	.word	0x200002c0
 8001a60:	20000218 	.word	0x20000218
 8001a64:	20000268 	.word	0x20000268

08001a68 <ENCODER_Sort_Incoming>:

void ENCODER_Sort_Incoming(uint8_t* incoming_array, EncoderHandle* Encoder_ptr){
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
	Encoder_ptr->rawRead[0] = incoming_array[0];
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	781a      	ldrb	r2, [r3, #0]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Encoder_ptr->rawRead[1] = incoming_array[1];
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	785a      	ldrb	r2, [r3, #1]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Encoder_ptr->rawRead[2] = incoming_array[2];
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	789a      	ldrb	r2, [r3, #2]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Encoder_ptr->rawRead[3] = incoming_array[3];
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	78da      	ldrb	r2, [r3, #3]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	Encoder_ptr->rawRead[4] = incoming_array[4];
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	791a      	ldrb	r2, [r3, #4]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	Encoder_ptr->rawRead[5] = incoming_array[5];
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	795a      	ldrb	r2, [r3, #5]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	Encoder_ptr->rawRead[6] = incoming_array[6];
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	799a      	ldrb	r2, [r3, #6]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	Encoder_ptr->rawRead[7] = incoming_array[7];
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	79da      	ldrb	r2, [r3, #7]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <ENCODER_Set_TxHeader>:

void ENCODER_Set_TxHeader(EncoderHandle* Encoder_ptr, uint32_t Encoder_Address){
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	6039      	str	r1, [r7, #0]
	Encoder_ptr->canTxHeader.DLC = 4;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2204      	movs	r2, #4
 8001adc:	631a      	str	r2, [r3, #48]	; 0x30
	Encoder_ptr->canTxHeader.IDE = CAN_ID_STD;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder_ptr->canTxHeader.RTR = CAN_RTR_DATA;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	62da      	str	r2, [r3, #44]	; 0x2c
	Encoder_ptr->canTxHeader.StdId = Encoder_Address;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	621a      	str	r2, [r3, #32]
	Encoder_ptr->canTxHeader.TransmitGlobalTime = DISABLE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Encoder_ptr->canTxHeader.ExtId = 0;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <ENCODER_Read>:

void ENCODER_Read(EncoderHandle* Encoder_ptr){
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
	Encoder_ptr->sendData[0] = Encoder_ptr->canTxHeader.DLC;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Encoder_ptr->sendData[1] = Encoder_ptr->canTxHeader.StdId;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Encoder_ptr->sendData[2] = 0x01;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Encoder_ptr->sendData[3] = 0x00;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	
	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f103 0120 	add.w	r1, r3, #32
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3338      	adds	r3, #56	; 0x38
 8001b4e:	f001 ff15 	bl	800397c <HAL_CAN_AddTxMessage>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <ENCODER_Get_Angle>:
	Encoder_ptr->sendData[3] = 0x01;

	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
}

void ENCODER_Get_Angle(EncoderHandle* Encoder_ptr){
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
	ENCODER_Read(Encoder_ptr);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffd1 	bl	8001b0a <ENCODER_Read>
	Encoder_ptr->angle32Bit.b8[0] = Encoder_ptr->rawRead[3];
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Encoder_ptr->angle32Bit.b8[1] = Encoder_ptr->rawRead[4];
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Encoder_ptr->angle32Bit.b8[2] = Encoder_ptr->rawRead[5];
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Encoder_ptr->angle32Bit.b8[3] = Encoder_ptr->rawRead[6];
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	//Get the outer gear encoder position
	//Gear ration from inner to outer gear is 1:2. Therefore, (2*4096=)8192 is used
//	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)) ; //Get single turn encoder reading
	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)); //Get single turn encoder reading
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001ba6:	021b      	lsls	r3, r3, #8
 8001ba8:	441a      	add	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001bb0:	041b      	lsls	r3, r3, #16
 8001bb2:	4413      	add	r3, r2
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	645a      	str	r2, [r3, #68]	; 0x44

	//Convert from encoder position to angle in degree
//	Encoder_ptr->angleDeg = (Encoder_ptr->encoder_pos * 360 /8192) ; //Get encoder angle

}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <MX_GPIO_Init>:
     PB13   ------> SPI2_SCK
     PB14   ------> SPI2_MISO
     PB5   ------> CAN2_RX
*/
void MX_GPIO_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08c      	sub	sp, #48	; 0x30
 8001bc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
 8001bd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
 8001bde:	4b8a      	ldr	r3, [pc, #552]	; (8001e08 <MX_GPIO_Init+0x244>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a89      	ldr	r2, [pc, #548]	; (8001e08 <MX_GPIO_Init+0x244>)
 8001be4:	f043 0310 	orr.w	r3, r3, #16
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b87      	ldr	r3, [pc, #540]	; (8001e08 <MX_GPIO_Init+0x244>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0310 	and.w	r3, r3, #16
 8001bf2:	61bb      	str	r3, [r7, #24]
 8001bf4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	4b83      	ldr	r3, [pc, #524]	; (8001e08 <MX_GPIO_Init+0x244>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a82      	ldr	r2, [pc, #520]	; (8001e08 <MX_GPIO_Init+0x244>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b80      	ldr	r3, [pc, #512]	; (8001e08 <MX_GPIO_Init+0x244>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	4b7c      	ldr	r3, [pc, #496]	; (8001e08 <MX_GPIO_Init+0x244>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a7b      	ldr	r2, [pc, #492]	; (8001e08 <MX_GPIO_Init+0x244>)
 8001c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b79      	ldr	r3, [pc, #484]	; (8001e08 <MX_GPIO_Init+0x244>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	4b75      	ldr	r3, [pc, #468]	; (8001e08 <MX_GPIO_Init+0x244>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a74      	ldr	r2, [pc, #464]	; (8001e08 <MX_GPIO_Init+0x244>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b72      	ldr	r3, [pc, #456]	; (8001e08 <MX_GPIO_Init+0x244>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	4b6e      	ldr	r3, [pc, #440]	; (8001e08 <MX_GPIO_Init+0x244>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a6d      	ldr	r2, [pc, #436]	; (8001e08 <MX_GPIO_Init+0x244>)
 8001c54:	f043 0302 	orr.w	r3, r3, #2
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b6b      	ldr	r3, [pc, #428]	; (8001e08 <MX_GPIO_Init+0x244>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	4b67      	ldr	r3, [pc, #412]	; (8001e08 <MX_GPIO_Init+0x244>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a66      	ldr	r2, [pc, #408]	; (8001e08 <MX_GPIO_Init+0x244>)
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b64      	ldr	r3, [pc, #400]	; (8001e08 <MX_GPIO_Init+0x244>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001c82:	2200      	movs	r2, #0
 8001c84:	213f      	movs	r1, #63	; 0x3f
 8001c86:	4861      	ldr	r0, [pc, #388]	; (8001e0c <MX_GPIO_Init+0x248>)
 8001c88:	f003 f93e 	bl	8004f08 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2110      	movs	r1, #16
 8001c90:	485f      	ldr	r0, [pc, #380]	; (8001e10 <MX_GPIO_Init+0x24c>)
 8001c92:	f003 f939 	bl	8004f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001c96:	2200      	movs	r2, #0
 8001c98:	219b      	movs	r1, #155	; 0x9b
 8001c9a:	485e      	ldr	r0, [pc, #376]	; (8001e14 <MX_GPIO_Init+0x250>)
 8001c9c:	f003 f934 	bl	8004f08 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8001ca6:	485c      	ldr	r0, [pc, #368]	; (8001e18 <MX_GPIO_Init+0x254>)
 8001ca8:	f003 f92e 	bl	8004f08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001cac:	2200      	movs	r2, #0
 8001cae:	f64e 4108 	movw	r1, #60424	; 0xec08
 8001cb2:	485a      	ldr	r0, [pc, #360]	; (8001e1c <MX_GPIO_Init+0x258>)
 8001cb4:	f003 f928 	bl	8004f08 <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8001cb8:	2307      	movs	r3, #7
 8001cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4853      	ldr	r0, [pc, #332]	; (8001e18 <MX_GPIO_Init+0x254>)
 8001ccc:	f002 ff58 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 8001cd0:	f248 1378 	movw	r3, #33144	; 0x8178
 8001cd4:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cde:	f107 031c 	add.w	r3, r7, #28
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	484c      	ldr	r0, [pc, #304]	; (8001e18 <MX_GPIO_Init+0x254>)
 8001ce6:	f002 ff4b 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001cea:	233f      	movs	r3, #63	; 0x3f
 8001cec:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cfa:	f107 031c 	add.w	r3, r7, #28
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4842      	ldr	r0, [pc, #264]	; (8001e0c <MX_GPIO_Init+0x248>)
 8001d02:	f002 ff3d 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8001d06:	2310      	movs	r3, #16
 8001d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d12:	2300      	movs	r3, #0
 8001d14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001d16:	f107 031c 	add.w	r3, r7, #28
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	483c      	ldr	r0, [pc, #240]	; (8001e10 <MX_GPIO_Init+0x24c>)
 8001d1e:	f002 ff2f 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d26:	4b3e      	ldr	r3, [pc, #248]	; (8001e20 <MX_GPIO_Init+0x25c>)
 8001d28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001d2e:	f107 031c 	add.w	r3, r7, #28
 8001d32:	4619      	mov	r1, r3
 8001d34:	4836      	ldr	r0, [pc, #216]	; (8001e10 <MX_GPIO_Init+0x24c>)
 8001d36:	f002 ff23 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001d3a:	239b      	movs	r3, #155	; 0x9b
 8001d3c:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d42:	2301      	movs	r3, #1
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d46:	2300      	movs	r3, #0
 8001d48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4a:	f107 031c 	add.w	r3, r7, #28
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4830      	ldr	r0, [pc, #192]	; (8001e14 <MX_GPIO_Init+0x250>)
 8001d52:	f002 ff15 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 8001d56:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8001d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d60:	2301      	movs	r3, #1
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d64:	2300      	movs	r3, #0
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d68:	f107 031c 	add.w	r3, r7, #28
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	482a      	ldr	r0, [pc, #168]	; (8001e18 <MX_GPIO_Init+0x254>)
 8001d70:	f002 ff06 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin;
 8001d74:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d82:	2303      	movs	r3, #3
 8001d84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d86:	2305      	movs	r3, #5
 8001d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8a:	f107 031c 	add.w	r3, r7, #28
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4820      	ldr	r0, [pc, #128]	; (8001e14 <MX_GPIO_Init+0x250>)
 8001d92:	f002 fef5 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001d96:	f64e 4308 	movw	r3, #60424	; 0xec08
 8001d9a:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001da0:	2301      	movs	r3, #1
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da4:	2300      	movs	r3, #0
 8001da6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001da8:	f107 031c 	add.w	r3, r7, #28
 8001dac:	4619      	mov	r1, r3
 8001dae:	481b      	ldr	r0, [pc, #108]	; (8001e1c <MX_GPIO_Init+0x258>)
 8001db0:	f002 fee6 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 8001db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 8001dc2:	f107 031c 	add.w	r3, r7, #28
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4814      	ldr	r0, [pc, #80]	; (8001e1c <MX_GPIO_Init+0x258>)
 8001dca:	f002 fed9 	bl	8004b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001dce:	2320      	movs	r3, #32
 8001dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001dde:	2309      	movs	r3, #9
 8001de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de2:	f107 031c 	add.w	r3, r7, #28
 8001de6:	4619      	mov	r1, r3
 8001de8:	480a      	ldr	r0, [pc, #40]	; (8001e14 <MX_GPIO_Init+0x250>)
 8001dea:	f002 fec9 	bl	8004b80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001dee:	2200      	movs	r2, #0
 8001df0:	2100      	movs	r1, #0
 8001df2:	2017      	movs	r0, #23
 8001df4:	f002 fadf 	bl	80043b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001df8:	2017      	movs	r0, #23
 8001dfa:	f002 faf8 	bl	80043ee <HAL_NVIC_EnableIRQ>

}
 8001dfe:	bf00      	nop
 8001e00:	3730      	adds	r7, #48	; 0x30
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40020800 	.word	0x40020800
 8001e10:	40020000 	.word	0x40020000
 8001e14:	40020400 	.word	0x40020400
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40020c00 	.word	0x40020c00
 8001e20:	10210000 	.word	0x10210000

08001e24 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001e28:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <MX_I2C1_Init+0x74>)
 8001e2a:	4a1c      	ldr	r2, [pc, #112]	; (8001e9c <MX_I2C1_Init+0x78>)
 8001e2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <MX_I2C1_Init+0x74>)
 8001e30:	4a1b      	ldr	r2, [pc, #108]	; (8001ea0 <MX_I2C1_Init+0x7c>)
 8001e32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e34:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <MX_I2C1_Init+0x74>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e3a:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <MX_I2C1_Init+0x74>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e40:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <MX_I2C1_Init+0x74>)
 8001e42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e48:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <MX_I2C1_Init+0x74>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e4e:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <MX_I2C1_Init+0x74>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e54:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <MX_I2C1_Init+0x74>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <MX_I2C1_Init+0x74>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e60:	480d      	ldr	r0, [pc, #52]	; (8001e98 <MX_I2C1_Init+0x74>)
 8001e62:	f003 f883 	bl	8004f6c <HAL_I2C_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e6c:	f000 fcf8 	bl	8002860 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e70:	2100      	movs	r1, #0
 8001e72:	4809      	ldr	r0, [pc, #36]	; (8001e98 <MX_I2C1_Init+0x74>)
 8001e74:	f003 f9be 	bl	80051f4 <HAL_I2CEx_ConfigAnalogFilter>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001e7e:	f000 fcef 	bl	8002860 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e82:	2100      	movs	r1, #0
 8001e84:	4804      	ldr	r0, [pc, #16]	; (8001e98 <MX_I2C1_Init+0x74>)
 8001e86:	f003 f9f1 	bl	800526c <HAL_I2CEx_ConfigDigitalFilter>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001e90:	f000 fce6 	bl	8002860 <Error_Handler>
  }

}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000318 	.word	0x20000318
 8001e9c:	40005400 	.word	0x40005400
 8001ea0:	00061a80 	.word	0x00061a80

08001ea4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <HAL_I2C_MspInit+0x84>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d12c      	bne.n	8001f20 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <HAL_I2C_MspInit+0x88>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a17      	ldr	r2, [pc, #92]	; (8001f2c <HAL_I2C_MspInit+0x88>)
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <HAL_I2C_MspInit+0x88>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8001ee2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ee8:	2312      	movs	r3, #18
 8001eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eec:	2301      	movs	r3, #1
 8001eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	4619      	mov	r1, r3
 8001efe:	480c      	ldr	r0, [pc, #48]	; (8001f30 <HAL_I2C_MspInit+0x8c>)
 8001f00:	f002 fe3e 	bl	8004b80 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <HAL_I2C_MspInit+0x88>)
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	4a07      	ldr	r2, [pc, #28]	; (8001f2c <HAL_I2C_MspInit+0x88>)
 8001f0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f12:	6413      	str	r3, [r2, #64]	; 0x40
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <HAL_I2C_MspInit+0x88>)
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001f20:	bf00      	nop
 8001f22:	3728      	adds	r7, #40	; 0x28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40005400 	.word	0x40005400
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40020400 	.word	0x40020400

08001f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f3a:	f001 fa69 	bl	8003410 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f3e:	f000 fa2f 	bl	80023a0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 8001f42:	f003 fe59 	bl	8005bf8 <HAL_RCC_GetHCLKFreq>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4abd      	ldr	r2, [pc, #756]	; (8002240 <main+0x30c>)
 8001f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4e:	099b      	lsrs	r3, r3, #6
 8001f50:	4618      	mov	r0, r3
 8001f52:	f002 fa5a 	bl	800440a <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001f56:	2004      	movs	r0, #4
 8001f58:	f002 fa64 	bl	8004424 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2100      	movs	r1, #0
 8001f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f64:	f002 fa27 	bl	80043b6 <HAL_NVIC_SetPriority>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f68:	f7ff fe2c 	bl	8001bc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f6c:	f7ff fd3c 	bl	80019e8 <MX_DMA_Init>
  MX_I2C1_Init();
 8001f70:	f7ff ff58 	bl	8001e24 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001f74:	f000 fdd0 	bl	8002b18 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001f78:	f000 fe6e 	bl	8002c58 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001f7c:	f001 f908 	bl	8003190 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001f80:	f000 fede 	bl	8002d40 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001f84:	f000 ff5e 	bl	8002e44 <MX_TIM8_Init>
  MX_CAN1_Init();
 8001f88:	f7ff fc76 	bl	8001878 <MX_CAN1_Init>
  MX_SPI1_Init();
 8001f8c:	f000 fc80 	bl	8002890 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	//Initialize hardware communication
	joystick_Init();
 8001f90:	f001 f9de 	bl	8003350 <joystick_Init>
	ADC_Init();
 8001f94:	f7ff fa4a 	bl	800142c <ADC_Init>
	ADC_DataRequest();
 8001f98:	f7ff fa8a 	bl	80014b0 <ADC_DataRequest>
	ENCODER_Init();
 8001f9c:	f7ff fd4c 	bl	8001a38 <ENCODER_Init>
//		if (HAL_GetTick() - state_count > 5000)
//			Error_Handler();
//	}

	//Start base wheel PWM pin
	wheelSpeedControl_Init(&baseWheelSpeed, base_linSpeedLevel[base_speedLevel],
 8001fa0:	4ba8      	ldr	r3, [pc, #672]	; (8002244 <main+0x310>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4aa8      	ldr	r2, [pc, #672]	; (8002248 <main+0x314>)
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	edd3 7a00 	vldr	s15, [r3]
 8001fae:	4ba5      	ldr	r3, [pc, #660]	; (8002244 <main+0x310>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4aa6      	ldr	r2, [pc, #664]	; (800224c <main+0x318>)
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	ed93 7a00 	vldr	s14, [r3]
 8001fbc:	eef0 0a47 	vmov.f32	s1, s14
 8001fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc4:	48a2      	ldr	r0, [pc, #648]	; (8002250 <main+0x31c>)
 8001fc6:	f001 f9cf 	bl	8003368 <wheelSpeedControl_Init>
			base_angSpeedLevel[base_speedLevel]);
	HAL_TIM_Base_Start(&MOTOR_TIM);
 8001fca:	48a2      	ldr	r0, [pc, #648]	; (8002254 <main+0x320>)
 8001fcc:	f004 fa93 	bl	80064f6 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_1);
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	48a0      	ldr	r0, [pc, #640]	; (8002254 <main+0x320>)
 8001fd4:	f004 fae8 	bl	80065a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_2);
 8001fd8:	2104      	movs	r1, #4
 8001fda:	489e      	ldr	r0, [pc, #632]	; (8002254 <main+0x320>)
 8001fdc:	f004 fae4 	bl	80065a8 <HAL_TIM_PWM_Start>
	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = 1500;
 8001fe0:	4b9c      	ldr	r3, [pc, #624]	; (8002254 <main+0x320>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001fe8:	635a      	str	r2, [r3, #52]	; 0x34
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = 1500;
 8001fea:	4b9a      	ldr	r3, [pc, #616]	; (8002254 <main+0x320>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001ff2:	639a      	str	r2, [r3, #56]	; 0x38

//	//Initialize rear and back motor
	bd25l_Init(&rearMotor);
 8001ff4:	4898      	ldr	r0, [pc, #608]	; (8002258 <main+0x324>)
 8001ff6:	f7ff fa87 	bl	8001508 <bd25l_Init>
	bd25l_Init(&backMotor);
 8001ffa:	4898      	ldr	r0, [pc, #608]	; (800225c <main+0x328>)
 8001ffc:	f7ff fa84 	bl	8001508 <bd25l_Init>
	runMotor(&rearMotor, 0);
 8002000:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8002260 <main+0x32c>
 8002004:	4894      	ldr	r0, [pc, #592]	; (8002258 <main+0x324>)
 8002006:	f7ff fb87 	bl	8001718 <runMotor>
	runMotor(&backMotor, 0);
 800200a:	ed9f 0a95 	vldr	s0, [pc, #596]	; 8002260 <main+0x32c>
 800200e:	4893      	ldr	r0, [pc, #588]	; (800225c <main+0x328>)
 8002010:	f7ff fb82 	bl	8001718 <runMotor>
	HAL_TIM_IC_Start_IT(&htim8, TIM_CHANNEL_4);
 8002014:	210c      	movs	r1, #12
 8002016:	4893      	ldr	r0, [pc, #588]	; (8002264 <main+0x330>)
 8002018:	f004 fb92 	bl	8006740 <HAL_TIM_IC_Start_IT>
	emBrakeMotor(0);
 800201c:	2000      	movs	r0, #0
 800201e:	f7ff fa95 	bl	800154c <emBrakeMotor>
//
	//Initialize hub motor provided joystick control
	hubMotor_Init();
 8002022:	f7ff f911 	bl	8001248 <hubMotor_Init>
	send_HubMotor(0, 0);
 8002026:	eddf 0a8e 	vldr	s1, [pc, #568]	; 8002260 <main+0x32c>
 800202a:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8002260 <main+0x32c>
 800202e:	f7ff f923 	bl	8001278 <send_HubMotor>

	//Initialize front and back climbing position controller
	frontClimb_pid = pid_create(&frontClimb_ctrl, &frontClimb_input,
 8002032:	4b8d      	ldr	r3, [pc, #564]	; (8002268 <main+0x334>)
 8002034:	edd3 7a00 	vldr	s15, [r3]
 8002038:	4b8c      	ldr	r3, [pc, #560]	; (800226c <main+0x338>)
 800203a:	ed93 7a00 	vldr	s14, [r3]
 800203e:	4b8c      	ldr	r3, [pc, #560]	; (8002270 <main+0x33c>)
 8002040:	edd3 6a00 	vldr	s13, [r3]
 8002044:	eeb0 1a66 	vmov.f32	s2, s13
 8002048:	eef0 0a47 	vmov.f32	s1, s14
 800204c:	eeb0 0a67 	vmov.f32	s0, s15
 8002050:	4b88      	ldr	r3, [pc, #544]	; (8002274 <main+0x340>)
 8002052:	4a89      	ldr	r2, [pc, #548]	; (8002278 <main+0x344>)
 8002054:	4989      	ldr	r1, [pc, #548]	; (800227c <main+0x348>)
 8002056:	488a      	ldr	r0, [pc, #552]	; (8002280 <main+0x34c>)
 8002058:	f7fe ff34 	bl	8000ec4 <pid_create>
 800205c:	4603      	mov	r3, r0
 800205e:	4a89      	ldr	r2, [pc, #548]	; (8002284 <main+0x350>)
 8002060:	6013      	str	r3, [r2, #0]
			&frontClimb_output, &frontClimb_setpoint, frontClimb_kp,
			frontClimb_ki, frontClimb_kd);
	pid_limits(frontClimb_pid, -80, 80);
 8002062:	4b88      	ldr	r3, [pc, #544]	; (8002284 <main+0x350>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	eddf 0a88 	vldr	s1, [pc, #544]	; 8002288 <main+0x354>
 800206a:	ed9f 0a88 	vldr	s0, [pc, #544]	; 800228c <main+0x358>
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff f80c 	bl	800108c <pid_limits>
	pid_sample(frontClimb_pid, 1);
 8002074:	4b83      	ldr	r3, [pc, #524]	; (8002284 <main+0x350>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2101      	movs	r1, #1
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe ffd2 	bl	8001024 <pid_sample>
	pid_auto(frontClimb_pid);
 8002080:	4b80      	ldr	r3, [pc, #512]	; (8002284 <main+0x350>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff f866 	bl	8001156 <pid_auto>

	backClimb_pid = pid_create(&backClimb_ctrl, &backClimb_input,
 800208a:	4b81      	ldr	r3, [pc, #516]	; (8002290 <main+0x35c>)
 800208c:	edd3 7a00 	vldr	s15, [r3]
 8002090:	4b80      	ldr	r3, [pc, #512]	; (8002294 <main+0x360>)
 8002092:	ed93 7a00 	vldr	s14, [r3]
 8002096:	4b80      	ldr	r3, [pc, #512]	; (8002298 <main+0x364>)
 8002098:	edd3 6a00 	vldr	s13, [r3]
 800209c:	eeb0 1a66 	vmov.f32	s2, s13
 80020a0:	eef0 0a47 	vmov.f32	s1, s14
 80020a4:	eeb0 0a67 	vmov.f32	s0, s15
 80020a8:	4b7c      	ldr	r3, [pc, #496]	; (800229c <main+0x368>)
 80020aa:	4a7d      	ldr	r2, [pc, #500]	; (80022a0 <main+0x36c>)
 80020ac:	497d      	ldr	r1, [pc, #500]	; (80022a4 <main+0x370>)
 80020ae:	487e      	ldr	r0, [pc, #504]	; (80022a8 <main+0x374>)
 80020b0:	f7fe ff08 	bl	8000ec4 <pid_create>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4a7d      	ldr	r2, [pc, #500]	; (80022ac <main+0x378>)
 80020b8:	6013      	str	r3, [r2, #0]
			&backClimb_output, &backClimb_setpoint, backClimb_kp, backClimb_ki,
			backClimb_kd);
	pid_limits(backClimb_pid, -80, 80);
 80020ba:	4b7c      	ldr	r3, [pc, #496]	; (80022ac <main+0x378>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	eddf 0a72 	vldr	s1, [pc, #456]	; 8002288 <main+0x354>
 80020c2:	ed9f 0a72 	vldr	s0, [pc, #456]	; 800228c <main+0x358>
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe ffe0 	bl	800108c <pid_limits>
	pid_sample(backClimb_pid, 1);
 80020cc:	4b77      	ldr	r3, [pc, #476]	; (80022ac <main+0x378>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2101      	movs	r1, #1
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe ffa6 	bl	8001024 <pid_sample>
	pid_auto(backClimb_pid);
 80020d8:	4b74      	ldr	r3, [pc, #464]	; (80022ac <main+0x378>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff f83a 	bl	8001156 <pid_auto>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t prev_time = HAL_GetTick();
 80020e2:	f001 f9fb 	bl	80034dc <HAL_GetTick>
 80020e6:	6078      	str	r0, [r7, #4]
	ENCODER_Get_Angle(&encoderBack);
 80020e8:	4871      	ldr	r0, [pc, #452]	; (80022b0 <main+0x37c>)
 80020ea:	f7ff fd36 	bl	8001b5a <ENCODER_Get_Angle>
	ENCODER_Get_Angle(&encoderFront);
 80020ee:	4871      	ldr	r0, [pc, #452]	; (80022b4 <main+0x380>)
 80020f0:	f7ff fd33 	bl	8001b5a <ENCODER_Get_Angle>

//	while (state_count++ < 1000)
//		MPU6050_Read_All(&hi2c1, &MPU6050);
//	initial_angle = MPU6050.KalmanAngleX;
	state_count = 0;
 80020f4:	4b70      	ldr	r3, [pc, #448]	; (80022b8 <main+0x384>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
	emBrakeMotor(1);
 80020fa:	2001      	movs	r0, #1
 80020fc:	f7ff fa26 	bl	800154c <emBrakeMotor>
	//Reset encoder position
//	ENCODER_Set_ZeroPosition(&encoderBack);
//	ENCODER_Set_ZeroPosition(&encoderFront);
	HAL_Delay(500);
 8002100:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002104:	f001 f9f6 	bl	80034f4 <HAL_Delay>
		//      MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL -= 50;
		//      runMotor(&backMotor, 100, 1);

		//      runMotor(&backMotor, speed++, 1);
		//Loop should execute once every 1 tick
		if (HAL_GetTick() - prev_time >= 1)
 8002108:	f001 f9e8 	bl	80034dc <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4293      	cmp	r3, r2
 8002112:	d0f9      	beq.n	8002108 <main+0x1d4>
		{
			ADC_DataRequest();
 8002114:	f7ff f9cc 	bl	80014b0 <ADC_DataRequest>
			ENCODER_Read(&encoderBack);
 8002118:	4865      	ldr	r0, [pc, #404]	; (80022b0 <main+0x37c>)
 800211a:	f7ff fcf6 	bl	8001b0a <ENCODER_Read>
			ENCODER_Read(&encoderFront);
 800211e:	4865      	ldr	r0, [pc, #404]	; (80022b4 <main+0x380>)
 8002120:	f7ff fcf3 	bl	8001b0a <ENCODER_Read>

			//Get kamlan filtered angle from MPU6050
//			MPU6050_Read_All(&hi2c1, &MPU6050);
			GPIO_Digital_Filtered_Input(&button1, 30);
 8002124:	211e      	movs	r1, #30
 8002126:	4865      	ldr	r0, [pc, #404]	; (80022bc <main+0x388>)
 8002128:	f7ff fb6d 	bl	8001806 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button2, 30);
 800212c:	211e      	movs	r1, #30
 800212e:	4864      	ldr	r0, [pc, #400]	; (80022c0 <main+0x38c>)
 8002130:	f7ff fb69 	bl	8001806 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button3, 30);
 8002134:	211e      	movs	r1, #30
 8002136:	4863      	ldr	r0, [pc, #396]	; (80022c4 <main+0x390>)
 8002138:	f7ff fb65 	bl	8001806 <GPIO_Digital_Filtered_Input>

			GPIO_Digital_Filtered_Input(&rearLS1, 5);
 800213c:	2105      	movs	r1, #5
 800213e:	4862      	ldr	r0, [pc, #392]	; (80022c8 <main+0x394>)
 8002140:	f7ff fb61 	bl	8001806 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&rearLS2, 5);
 8002144:	2105      	movs	r1, #5
 8002146:	4861      	ldr	r0, [pc, #388]	; (80022cc <main+0x398>)
 8002148:	f7ff fb5d 	bl	8001806 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS1, 5);
 800214c:	2105      	movs	r1, #5
 800214e:	4860      	ldr	r0, [pc, #384]	; (80022d0 <main+0x39c>)
 8002150:	f7ff fb59 	bl	8001806 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS2, 5);
 8002154:	2105      	movs	r1, #5
 8002156:	485f      	ldr	r0, [pc, #380]	; (80022d4 <main+0x3a0>)
 8002158:	f7ff fb55 	bl	8001806 <GPIO_Digital_Filtered_Input>
//				speed[BACK_INDEX] = 0;
//			if (button3.state == GPIO_PIN_SET){
//				motor_speed += 50;
//				HAL_Delay(500);
//			}
			if (button3.state == GPIO_PIN_SET){
 800215c:	4b59      	ldr	r3, [pc, #356]	; (80022c4 <main+0x390>)
 800215e:	7a1b      	ldrb	r3, [r3, #8]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d108      	bne.n	8002176 <main+0x242>
				motor_speed += 50;
 8002164:	4b5c      	ldr	r3, [pc, #368]	; (80022d8 <main+0x3a4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	3332      	adds	r3, #50	; 0x32
 800216a:	4a5b      	ldr	r2, [pc, #364]	; (80022d8 <main+0x3a4>)
 800216c:	6013      	str	r3, [r2, #0]
				HAL_Delay(5000);
 800216e:	f241 3088 	movw	r0, #5000	; 0x1388
 8002172:	f001 f9bf 	bl	80034f4 <HAL_Delay>
			}


			if (button1.state == GPIO_PIN_SET)
 8002176:	4b51      	ldr	r3, [pc, #324]	; (80022bc <main+0x388>)
 8002178:	7a1b      	ldrb	r3, [r3, #8]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d107      	bne.n	800218e <main+0x25a>
				MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = motor_speed + 1500;
 800217e:	4b56      	ldr	r3, [pc, #344]	; (80022d8 <main+0x3a4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 8002186:	4b33      	ldr	r3, [pc, #204]	; (8002254 <main+0x320>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	639a      	str	r2, [r3, #56]	; 0x38
 800218c:	e008      	b.n	80021a0 <main+0x26c>
			else if (button1.state == GPIO_PIN_RESET)
 800218e:	4b4b      	ldr	r3, [pc, #300]	; (80022bc <main+0x388>)
 8002190:	7a1b      	ldrb	r3, [r3, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d104      	bne.n	80021a0 <main+0x26c>
				MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = 1500;
 8002196:	4b2f      	ldr	r3, [pc, #188]	; (8002254 <main+0x320>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800219e:	639a      	str	r2, [r3, #56]	; 0x38

			if (button2.state == GPIO_PIN_SET)
 80021a0:	4b47      	ldr	r3, [pc, #284]	; (80022c0 <main+0x38c>)
 80021a2:	7a1b      	ldrb	r3, [r3, #8]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d107      	bne.n	80021b8 <main+0x284>
				MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = motor_speed + 1500;
 80021a8:	4b4b      	ldr	r3, [pc, #300]	; (80022d8 <main+0x3a4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 80021b0:	4b28      	ldr	r3, [pc, #160]	; (8002254 <main+0x320>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	635a      	str	r2, [r3, #52]	; 0x34
 80021b6:	e008      	b.n	80021ca <main+0x296>
			else if (button2.state == GPIO_PIN_RESET)
 80021b8:	4b41      	ldr	r3, [pc, #260]	; (80022c0 <main+0x38c>)
 80021ba:	7a1b      	ldrb	r3, [r3, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d104      	bne.n	80021ca <main+0x296>
				MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = 1500;
 80021c0:	4b24      	ldr	r3, [pc, #144]	; (8002254 <main+0x320>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80021c8:	635a      	str	r2, [r3, #52]	; 0x34
\

			//!Must not comment the following section
			//Deadzone of climbing motor, force zero to avoid noise
			if (fabs(speed[FRONT_INDEX]) < 5)
 80021ca:	4b44      	ldr	r3, [pc, #272]	; (80022dc <main+0x3a8>)
 80021cc:	edd3 7a00 	vldr	s15, [r3]
 80021d0:	eef0 7ae7 	vabs.f32	s15, s15
 80021d4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80021d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e0:	d503      	bpl.n	80021ea <main+0x2b6>
				speed[FRONT_INDEX] = 0;
 80021e2:	4b3e      	ldr	r3, [pc, #248]	; (80022dc <main+0x3a8>)
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
			if (fabs(speed[BACK_INDEX]) < 5)
 80021ea:	4b3c      	ldr	r3, [pc, #240]	; (80022dc <main+0x3a8>)
 80021ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80021f0:	eef0 7ae7 	vabs.f32	s15, s15
 80021f4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80021f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002200:	d503      	bpl.n	800220a <main+0x2d6>
				speed[BACK_INDEX] = 0;
 8002202:	4b36      	ldr	r3, [pc, #216]	; (80022dc <main+0x3a8>)
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	605a      	str	r2, [r3, #4]
			//*****VERY IMPORTANT AND MUST NOT BE COMMENTED OUT**********************************//
			//Safety check for to avoid the climbing leg overturn
			if (encoderFront.encoder_pos < FRONT_FULL_ROTATION_ENC / 2){
 800220a:	4b2a      	ldr	r3, [pc, #168]	; (80022b4 <main+0x380>)
 800220c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800220e:	f242 3333 	movw	r3, #9011	; 0x2333
 8002212:	085b      	lsrs	r3, r3, #1
 8002214:	429a      	cmp	r2, r3
 8002216:	d263      	bcs.n	80022e0 <main+0x3ac>
				if (encoderFront.encoder_pos > MAX_FRONT_ALLOWABLE_ENC && speed[FRONT_INDEX] > 0)
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <main+0x380>)
 800221a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221c:	f640 421c 	movw	r2, #3100	; 0xc1c
 8002220:	4293      	cmp	r3, r2
 8002222:	d96f      	bls.n	8002304 <main+0x3d0>
 8002224:	4b2d      	ldr	r3, [pc, #180]	; (80022dc <main+0x3a8>)
 8002226:	edd3 7a00 	vldr	s15, [r3]
 800222a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800222e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002232:	dd67      	ble.n	8002304 <main+0x3d0>
					speed[FRONT_INDEX] = 0;
 8002234:	4b29      	ldr	r3, [pc, #164]	; (80022dc <main+0x3a8>)
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	e062      	b.n	8002304 <main+0x3d0>
 800223e:	bf00      	nop
 8002240:	10624dd3 	.word	0x10624dd3
 8002244:	20000150 	.word	0x20000150
 8002248:	080089d4 	.word	0x080089d4
 800224c:	080089e0 	.word	0x080089e0
 8002250:	200000d8 	.word	0x200000d8
 8002254:	200004b4 	.word	0x200004b4
 8002258:	20000000 	.word	0x20000000
 800225c:	20000034 	.word	0x20000034
 8002260:	00000000 	.word	0x00000000
 8002264:	20000474 	.word	0x20000474
 8002268:	20000108 	.word	0x20000108
 800226c:	2000010c 	.word	0x2000010c
 8002270:	20000110 	.word	0x20000110
 8002274:	20000164 	.word	0x20000164
 8002278:	20000160 	.word	0x20000160
 800227c:	2000015c 	.word	0x2000015c
 8002280:	20000428 	.word	0x20000428
 8002284:	20000424 	.word	0x20000424
 8002288:	42a00000 	.word	0x42a00000
 800228c:	c2a00000 	.word	0xc2a00000
 8002290:	20000114 	.word	0x20000114
 8002294:	20000118 	.word	0x20000118
 8002298:	2000011c 	.word	0x2000011c
 800229c:	20000170 	.word	0x20000170
 80022a0:	2000016c 	.word	0x2000016c
 80022a4:	20000168 	.word	0x20000168
 80022a8:	200003e0 	.word	0x200003e0
 80022ac:	20000470 	.word	0x20000470
 80022b0:	200002c0 	.word	0x200002c0
 80022b4:	20000268 	.word	0x20000268
 80022b8:	20000174 	.word	0x20000174
 80022bc:	200000a8 	.word	0x200000a8
 80022c0:	200000b8 	.word	0x200000b8
 80022c4:	200000c8 	.word	0x200000c8
 80022c8:	20000068 	.word	0x20000068
 80022cc:	20000078 	.word	0x20000078
 80022d0:	20000088 	.word	0x20000088
 80022d4:	20000098 	.word	0x20000098
 80022d8:	20000178 	.word	0x20000178
 80022dc:	20000154 	.word	0x20000154
			}
			else{
				if (encoderFront.encoder_pos < MIN_FRONT_ALLOWABLE_ENC && speed[FRONT_INDEX] < 0)
 80022e0:	4b2c      	ldr	r3, [pc, #176]	; (8002394 <main+0x460>)
 80022e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e4:	f641 12c8 	movw	r2, #6600	; 0x19c8
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d20b      	bcs.n	8002304 <main+0x3d0>
 80022ec:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <main+0x464>)
 80022ee:	edd3 7a00 	vldr	s15, [r3]
 80022f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fa:	d503      	bpl.n	8002304 <main+0x3d0>
					speed[FRONT_INDEX] = 0;
 80022fc:	4b26      	ldr	r3, [pc, #152]	; (8002398 <main+0x464>)
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
			}

			if (encoderBack.encoder_pos < BACK_FULL_ROTATION_ENC / 2){
 8002304:	4b25      	ldr	r3, [pc, #148]	; (800239c <main+0x468>)
 8002306:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002308:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800230c:	085b      	lsrs	r3, r3, #1
 800230e:	429a      	cmp	r2, r3
 8002310:	d212      	bcs.n	8002338 <main+0x404>
				if (encoderBack.encoder_pos > MAX_BACK_ALLOWABLE_ENC && speed[BACK_INDEX] > 0)
 8002312:	4b22      	ldr	r3, [pc, #136]	; (800239c <main+0x468>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800231a:	4293      	cmp	r3, r2
 800231c:	d91e      	bls.n	800235c <main+0x428>
 800231e:	4b1e      	ldr	r3, [pc, #120]	; (8002398 <main+0x464>)
 8002320:	edd3 7a01 	vldr	s15, [r3, #4]
 8002324:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232c:	dd16      	ble.n	800235c <main+0x428>
					speed[BACK_INDEX] = 0;
 800232e:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <main+0x464>)
 8002330:	f04f 0200 	mov.w	r2, #0
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	e011      	b.n	800235c <main+0x428>
			}
			else{
				if (encoderBack.encoder_pos < MIN_BACK_ALLOWABLE_ENC && speed[BACK_INDEX] < 0)
 8002338:	4b18      	ldr	r3, [pc, #96]	; (800239c <main+0x468>)
 800233a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233c:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8002340:	4293      	cmp	r3, r2
 8002342:	d20b      	bcs.n	800235c <main+0x428>
 8002344:	4b14      	ldr	r3, [pc, #80]	; (8002398 <main+0x464>)
 8002346:	edd3 7a01 	vldr	s15, [r3, #4]
 800234a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800234e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002352:	d503      	bpl.n	800235c <main+0x428>
					speed[BACK_INDEX] = 0;
 8002354:	4b10      	ldr	r3, [pc, #64]	; (8002398 <main+0x464>)
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	605a      	str	r2, [r3, #4]
			}
			//**********************************************************************************//


			if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 800235c:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <main+0x464>)
 800235e:	edd3 7a00 	vldr	s15, [r3]
 8002362:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236a:	d10b      	bne.n	8002384 <main+0x450>
 800236c:	4b0a      	ldr	r3, [pc, #40]	; (8002398 <main+0x464>)
 800236e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002372:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237a:	d103      	bne.n	8002384 <main+0x450>
				emBrakeMotor(0);
 800237c:	2000      	movs	r0, #0
 800237e:	f7ff f8e5 	bl	800154c <emBrakeMotor>
 8002382:	e002      	b.n	800238a <main+0x456>
			else
				emBrakeMotor(1);
 8002384:	2001      	movs	r0, #1
 8002386:	f7ff f8e1 	bl	800154c <emBrakeMotor>

			prev_time = HAL_GetTick();
 800238a:	f001 f8a7 	bl	80034dc <HAL_GetTick>
 800238e:	6078      	str	r0, [r7, #4]
		if (HAL_GetTick() - prev_time >= 1)
 8002390:	e6ba      	b.n	8002108 <main+0x1d4>
 8002392:	bf00      	nop
 8002394:	20000268 	.word	0x20000268
 8002398:	20000154 	.word	0x20000154
 800239c:	200002c0 	.word	0x200002c0

080023a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b094      	sub	sp, #80	; 0x50
 80023a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023a6:	f107 0320 	add.w	r3, r7, #32
 80023aa:	2230      	movs	r2, #48	; 0x30
 80023ac:	2100      	movs	r1, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f006 fafc 	bl	80089ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023b4:	f107 030c 	add.w	r3, r7, #12
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023c4:	2300      	movs	r3, #0
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <SystemClock_Config+0xd8>)
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	4a2a      	ldr	r2, [pc, #168]	; (8002478 <SystemClock_Config+0xd8>)
 80023ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d2:	6413      	str	r3, [r2, #64]	; 0x40
 80023d4:	4b28      	ldr	r3, [pc, #160]	; (8002478 <SystemClock_Config+0xd8>)
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023e0:	2300      	movs	r3, #0
 80023e2:	607b      	str	r3, [r7, #4]
 80023e4:	4b25      	ldr	r3, [pc, #148]	; (800247c <SystemClock_Config+0xdc>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a24      	ldr	r2, [pc, #144]	; (800247c <SystemClock_Config+0xdc>)
 80023ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	4b22      	ldr	r3, [pc, #136]	; (800247c <SystemClock_Config+0xdc>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80023f8:	607b      	str	r3, [r7, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023fc:	2301      	movs	r3, #1
 80023fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002400:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002406:	2302      	movs	r3, #2
 8002408:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800240a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800240e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002410:	2308      	movs	r3, #8
 8002412:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002414:	23b4      	movs	r3, #180	; 0xb4
 8002416:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002418:	2302      	movs	r3, #2
 800241a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800241c:	2304      	movs	r3, #4
 800241e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002420:	f107 0320 	add.w	r3, r7, #32
 8002424:	4618      	mov	r0, r3
 8002426:	f002 ffb1 	bl	800538c <HAL_RCC_OscConfig>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002430:	f000 fa16 	bl	8002860 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002434:	f002 ff5a 	bl	80052ec <HAL_PWREx_EnableOverDrive>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800243e:	f000 fa0f 	bl	8002860 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002442:	230f      	movs	r3, #15
 8002444:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002446:	2302      	movs	r3, #2
 8002448:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800244e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002452:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002458:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800245a:	f107 030c 	add.w	r3, r7, #12
 800245e:	2105      	movs	r1, #5
 8002460:	4618      	mov	r0, r3
 8002462:	f003 fa03 	bl	800586c <HAL_RCC_ClockConfig>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800246c:	f000 f9f8 	bl	8002860 <Error_Handler>
  }
}
 8002470:	bf00      	nop
 8002472:	3750      	adds	r7, #80	; 0x50
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40023800 	.word	0x40023800
 800247c:	40007000 	.word	0x40007000

08002480 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	2b80      	cmp	r3, #128	; 0x80
 800248e:	d11c      	bne.n	80024ca <HAL_GPIO_EXTI_Callback+0x4a>
	{
	case AD_BUSY_Pin:
	{
		if (HAL_GetTick() - prev_adc_time > 1)
 8002490:	f001 f824 	bl	80034dc <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <HAL_GPIO_EXTI_Callback+0x58>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b01      	cmp	r3, #1
 800249e:	d916      	bls.n	80024ce <HAL_GPIO_EXTI_Callback+0x4e>
		{
			ADC_Read(adc_rawData);
 80024a0:	480e      	ldr	r0, [pc, #56]	; (80024dc <HAL_GPIO_EXTI_Callback+0x5c>)
 80024a2:	f7ff f815 	bl	80014d0 <ADC_Read>
			tempJoyRawDataX = adc_rawData[2];
 80024a6:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <HAL_GPIO_EXTI_Callback+0x5c>)
 80024a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <HAL_GPIO_EXTI_Callback+0x60>)
 80024b0:	601a      	str	r2, [r3, #0]
			tempJoyRawDataY = adc_rawData[1];
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <HAL_GPIO_EXTI_Callback+0x5c>)
 80024b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <HAL_GPIO_EXTI_Callback+0x64>)
 80024bc:	601a      	str	r2, [r3, #0]
			prev_adc_time = HAL_GetTick();
 80024be:	f001 f80d 	bl	80034dc <HAL_GetTick>
 80024c2:	4603      	mov	r3, r0
 80024c4:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <HAL_GPIO_EXTI_Callback+0x58>)
 80024c6:	6013      	str	r3, [r2, #0]
		}
	}
		break;
 80024c8:	e001      	b.n	80024ce <HAL_GPIO_EXTI_Callback+0x4e>
	default:
		break;
 80024ca:	bf00      	nop
 80024cc:	e000      	b.n	80024d0 <HAL_GPIO_EXTI_Callback+0x50>
		break;
 80024ce:	bf00      	nop
	}
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	2000014c 	.word	0x2000014c
 80024dc:	20000414 	.word	0x20000414
 80024e0:	2000046c 	.word	0x2000046c
 80024e4:	20000370 	.word	0x20000370

080024e8 <HAL_UART_RxCpltCallback>:
//
//	}
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	//Hub Encoder callback
	if (huart->Instance == USART3)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a3f      	ldr	r2, [pc, #252]	; (80025f4 <HAL_UART_RxCpltCallback+0x10c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d175      	bne.n	80025e6 <HAL_UART_RxCpltCallback+0xfe>
	{
		//Checksum, make sure that response is correct
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 80024fa:	4b3f      	ldr	r3, [pc, #252]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	b29a      	uxth	r2, r3
 8002500:	4b3d      	ldr	r3, [pc, #244]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 8002502:	785b      	ldrb	r3, [r3, #1]
 8002504:	b29b      	uxth	r3, r3
 8002506:	4413      	add	r3, r2
 8002508:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[2] + (uint16_t) receive_buf[3]
 800250a:	4b3b      	ldr	r3, [pc, #236]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 800250c:	789b      	ldrb	r3, [r3, #2]
 800250e:	b29b      	uxth	r3, r3
 8002510:	4413      	add	r3, r2
 8002512:	b29a      	uxth	r2, r3
 8002514:	4b38      	ldr	r3, [pc, #224]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 8002516:	78db      	ldrb	r3, [r3, #3]
 8002518:	b29b      	uxth	r3, r3
 800251a:	4413      	add	r3, r2
 800251c:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[4] + (uint16_t) receive_buf[5]
 800251e:	4b36      	ldr	r3, [pc, #216]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 8002520:	791b      	ldrb	r3, [r3, #4]
 8002522:	b29b      	uxth	r3, r3
 8002524:	4413      	add	r3, r2
 8002526:	b29a      	uxth	r2, r3
 8002528:	4b33      	ldr	r3, [pc, #204]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 800252a:	795b      	ldrb	r3, [r3, #5]
 800252c:	b29b      	uxth	r3, r3
 800252e:	4413      	add	r3, r2
 8002530:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[6] + (uint16_t) receive_buf[7]
 8002532:	4b31      	ldr	r3, [pc, #196]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 8002534:	799b      	ldrb	r3, [r3, #6]
 8002536:	b29b      	uxth	r3, r3
 8002538:	4413      	add	r3, r2
 800253a:	b29a      	uxth	r2, r3
 800253c:	4b2e      	ldr	r3, [pc, #184]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 800253e:	79db      	ldrb	r3, [r3, #7]
 8002540:	b29b      	uxth	r3, r3
 8002542:	4413      	add	r3, r2
 8002544:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[8] + (uint16_t) receive_buf[9]
 8002546:	4b2c      	ldr	r3, [pc, #176]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 8002548:	7a1b      	ldrb	r3, [r3, #8]
 800254a:	b29b      	uxth	r3, r3
 800254c:	4413      	add	r3, r2
 800254e:	b29a      	uxth	r2, r3
 8002550:	4b29      	ldr	r3, [pc, #164]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 8002552:	7a5b      	ldrb	r3, [r3, #9]
 8002554:	b29b      	uxth	r3, r3
 8002556:	4413      	add	r3, r2
 8002558:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[10] + (uint16_t) receive_buf[11]
 800255a:	4b27      	ldr	r3, [pc, #156]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 800255c:	7a9b      	ldrb	r3, [r3, #10]
 800255e:	b29b      	uxth	r3, r3
 8002560:	4413      	add	r3, r2
 8002562:	b29a      	uxth	r2, r3
 8002564:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 8002566:	7adb      	ldrb	r3, [r3, #11]
 8002568:	b29b      	uxth	r3, r3
 800256a:	4413      	add	r3, r2
 800256c:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[12] + (uint16_t) receive_buf[13];
 800256e:	4b22      	ldr	r3, [pc, #136]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 8002570:	7b1b      	ldrb	r3, [r3, #12]
 8002572:	b29b      	uxth	r3, r3
 8002574:	4413      	add	r3, r2
 8002576:	b29a      	uxth	r2, r3
 8002578:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 800257a:	7b5b      	ldrb	r3, [r3, #13]
 800257c:	b29b      	uxth	r3, r3
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 800257e:	4413      	add	r3, r2
 8002580:	81fb      	strh	r3, [r7, #14]
		if ((uint8_t) sum == receive_buf[14])
 8002582:	89fb      	ldrh	r3, [r7, #14]
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4b1c      	ldr	r3, [pc, #112]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 8002588:	7b9b      	ldrb	r3, [r3, #14]
 800258a:	429a      	cmp	r2, r3
 800258c:	d12b      	bne.n	80025e6 <HAL_UART_RxCpltCallback+0xfe>
		{
			//Encoder Feedback
			if (receive_buf[0] == 0xAA && receive_buf[1] == 0xA4
 800258e:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2baa      	cmp	r3, #170	; 0xaa
 8002594:	d127      	bne.n	80025e6 <HAL_UART_RxCpltCallback+0xfe>
 8002596:	4b18      	ldr	r3, [pc, #96]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 8002598:	785b      	ldrb	r3, [r3, #1]
 800259a:	2ba4      	cmp	r3, #164	; 0xa4
 800259c:	d123      	bne.n	80025e6 <HAL_UART_RxCpltCallback+0xfe>
					&& receive_buf[3] == 0x00)
 800259e:	4b16      	ldr	r3, [pc, #88]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 80025a0:	78db      	ldrb	r3, [r3, #3]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d11f      	bne.n	80025e6 <HAL_UART_RxCpltCallback+0xfe>
			{
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 80025a6:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 80025a8:	7a5b      	ldrb	r3, [r3, #9]
 80025aa:	061a      	lsls	r2, r3, #24
						+ (receive_buf[8] << 16) + (receive_buf[7] << 8)
 80025ac:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 80025ae:	7a1b      	ldrb	r3, [r3, #8]
 80025b0:	041b      	lsls	r3, r3, #16
 80025b2:	441a      	add	r2, r3
 80025b4:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 80025b6:	79db      	ldrb	r3, [r3, #7]
 80025b8:	021b      	lsls	r3, r3, #8
 80025ba:	4413      	add	r3, r2
						+ (receive_buf[6]);
 80025bc:	4a0e      	ldr	r2, [pc, #56]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 80025be:	7992      	ldrb	r2, [r2, #6]
 80025c0:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 80025c2:	4a0e      	ldr	r2, [pc, #56]	; (80025fc <HAL_UART_RxCpltCallback+0x114>)
 80025c4:	6013      	str	r3, [r2, #0]
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 80025c6:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 80025c8:	7b5b      	ldrb	r3, [r3, #13]
 80025ca:	061a      	lsls	r2, r3, #24
						+ (receive_buf[12] << 16) + (receive_buf[11] << 8)
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 80025ce:	7b1b      	ldrb	r3, [r3, #12]
 80025d0:	041b      	lsls	r3, r3, #16
 80025d2:	441a      	add	r2, r3
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 80025d6:	7adb      	ldrb	r3, [r3, #11]
 80025d8:	021b      	lsls	r3, r3, #8
 80025da:	4413      	add	r3, r2
						+ (receive_buf[10]);
 80025dc:	4a06      	ldr	r2, [pc, #24]	; (80025f8 <HAL_UART_RxCpltCallback+0x110>)
 80025de:	7a92      	ldrb	r2, [r2, #10]
 80025e0:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 80025e2:	4a06      	ldr	r2, [pc, #24]	; (80025fc <HAL_UART_RxCpltCallback+0x114>)
 80025e4:	6053      	str	r3, [r2, #4]
			}
		}
	}

}
 80025e6:	bf00      	nop
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	40004800 	.word	0x40004800
 80025f8:	2000045c 	.word	0x2000045c
 80025fc:	20000374 	.word	0x20000374

08002600 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
	//Left Encoder Callback
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	if (hcan == &hcan1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a8d      	ldr	r2, [pc, #564]	; (8002840 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 800260c:	4293      	cmp	r3, r2
 800260e:	f040 810b 	bne.w	8002828 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 8002612:	f107 0308 	add.w	r3, r7, #8
 8002616:	4a8b      	ldr	r2, [pc, #556]	; (8002844 <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8002618:	2100      	movs	r1, #0
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f001 fa89 	bl	8003b32 <HAL_CAN_GetRxMessage>
		if (incoming[1] == ENC_ADDR_LEFT)
 8002620:	7a7b      	ldrb	r3, [r7, #9]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d150      	bne.n	80026c8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
		{
			ENCODER_Sort_Incoming(incoming, &encoderBack);
 8002626:	f107 0308 	add.w	r3, r7, #8
 800262a:	4987      	ldr	r1, [pc, #540]	; (8002848 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fa1b 	bl	8001a68 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderBack);
 8002632:	4885      	ldr	r0, [pc, #532]	; (8002848 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002634:	f7ff fa91 	bl	8001b5a <ENCODER_Get_Angle>
			//Process the angle and GR
			//4096 is encoder single turn value
			//Need to check the encoder value in the correct direction
			encoderBack.encoder_pos = (uint32_t)((4096 * BACK_GEAR_RATIO)
					- encoderBack.encoder_pos)
 8002638:	4b83      	ldr	r3, [pc, #524]	; (8002848 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800263a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							% (4096 * BACK_GEAR_RATIO);
 800263c:	425b      	negs	r3, r3
 800263e:	f3c3 030c 	ubfx	r3, r3, #0, #13
			encoderBack.encoder_pos = (uint32_t)((4096 * BACK_GEAR_RATIO)
 8002642:	4a81      	ldr	r2, [pc, #516]	; (8002848 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002644:	6453      	str	r3, [r2, #68]	; 0x44
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 8002646:	4b80      	ldr	r3, [pc, #512]	; (8002848 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	ee07 3a90 	vmov	s15, r3
 800264e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					/ (4096 * BACK_GEAR_RATIO) * 360 + 36.587;
 8002652:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800284c <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>
 8002656:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800265a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8002850 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 800265e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002662:	ee17 0a90 	vmov	r0, s15
 8002666:	f7fd ff27 	bl	80004b8 <__aeabi_f2d>
 800266a:	a371      	add	r3, pc, #452	; (adr r3, 8002830 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800266c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002670:	f7fd fdc4 	bl	80001fc <__adddf3>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4610      	mov	r0, r2
 800267a:	4619      	mov	r1, r3
 800267c:	f7fe fa56 	bl	8000b2c <__aeabi_d2f>
 8002680:	4603      	mov	r3, r0
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 8002682:	4a71      	ldr	r2, [pc, #452]	; (8002848 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002684:	6413      	str	r3, [r2, #64]	; 0x40
			if (encoderBack.angleDeg > 360)
 8002686:	4b70      	ldr	r3, [pc, #448]	; (8002848 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002688:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800268c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8002850 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 8002690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002698:	dd09      	ble.n	80026ae <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
				encoderBack.angleDeg -= 360;
 800269a:	4b6b      	ldr	r3, [pc, #428]	; (8002848 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800269c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80026a0:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8002850 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 80026a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026a8:	4b67      	ldr	r3, [pc, #412]	; (8002848 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80026aa:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			if (encoderBack.encoder_pos >= MAX_BACK_ALLOWABLE_ENC)
 80026ae:	4b66      	ldr	r3, [pc, #408]	; (8002848 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d306      	bcc.n	80026c8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
				encoderBack.signed_encoder_pos = encoderBack.encoder_pos
 80026ba:	4b63      	ldr	r3, [pc, #396]	; (8002848 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
						- 4096 * BACK_GEAR_RATIO;
 80026be:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80026c2:	461a      	mov	r2, r3
				encoderBack.signed_encoder_pos = encoderBack.encoder_pos
 80026c4:	4b60      	ldr	r3, [pc, #384]	; (8002848 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80026c6:	649a      	str	r2, [r3, #72]	; 0x48
		}
		if (incoming[1] == ENC_ADDR_RIGHT)
 80026c8:	7a7b      	ldrb	r3, [r7, #9]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	f040 80ac 	bne.w	8002828 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
		{
			ENCODER_Sort_Incoming(incoming, &encoderFront);
 80026d0:	f107 0308 	add.w	r3, r7, #8
 80026d4:	495f      	ldr	r1, [pc, #380]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff f9c6 	bl	8001a68 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderFront);
 80026dc:	485d      	ldr	r0, [pc, #372]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80026de:	f7ff fa3c 	bl	8001b5a <ENCODER_Get_Angle>
			if (4096 * 24 - encoderFront.encoder_pos < 30000)
 80026e2:	4b5c      	ldr	r3, [pc, #368]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e6:	f5c3 33c0 	rsb	r3, r3, #98304	; 0x18000
 80026ea:	f247 522f 	movw	r2, #29999	; 0x752f
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d839      	bhi.n	8002766 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
			{
				encoderFront.encoder_pos =
						(4096 * 24 - encoderFront.encoder_pos)
 80026f2:	4b58      	ldr	r3, [pc, #352]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	f5c3 32c0 	rsb	r2, r3, #98304	; 0x18000
								% (uint32_t) (4096 * FRONT_GEAR_RATIO);
 80026fa:	4b57      	ldr	r3, [pc, #348]	; (8002858 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>)
 80026fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002700:	0b5b      	lsrs	r3, r3, #13
 8002702:	f242 3133 	movw	r1, #9011	; 0x2333
 8002706:	fb01 f303 	mul.w	r3, r1, r3
 800270a:	1ad3      	subs	r3, r2, r3
				encoderFront.encoder_pos =
 800270c:	4a51      	ldr	r2, [pc, #324]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 800270e:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002710:	4b50      	ldr	r3, [pc, #320]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002714:	ee07 3a90 	vmov	s15, r3
 8002718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800271c:	ee17 0a90 	vmov	r0, s15
 8002720:	f7fd feca 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587;
 8002724:	a344      	add	r3, pc, #272	; (adr r3, 8002838 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8002726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272a:	f7fe f847 	bl	80007bc <__aeabi_ddiv>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	4b48      	ldr	r3, [pc, #288]	; (800285c <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 800273c:	f7fd ff14 	bl	8000568 <__aeabi_dmul>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4610      	mov	r0, r2
 8002746:	4619      	mov	r1, r3
 8002748:	a339      	add	r3, pc, #228	; (adr r3, 8002830 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 800274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274e:	f7fd fd55 	bl	80001fc <__adddf3>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4610      	mov	r0, r2
 8002758:	4619      	mov	r1, r3
 800275a:	f7fe f9e7 	bl	8000b2c <__aeabi_d2f>
 800275e:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002760:	4a3c      	ldr	r2, [pc, #240]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002762:	6413      	str	r3, [r2, #64]	; 0x40
 8002764:	e047      	b.n	80027f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
			}
			else
			{
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
						- encoderFront.encoder_pos;
 8002766:	4b3b      	ldr	r3, [pc, #236]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd fe82 	bl	8000474 <__aeabi_ui2d>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	a130      	add	r1, pc, #192	; (adr r1, 8002838 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8002776:	e9d1 0100 	ldrd	r0, r1, [r1]
 800277a:	f7fd fd3d 	bl	80001f8 <__aeabi_dsub>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
 8002782:	4610      	mov	r0, r2
 8002784:	4619      	mov	r1, r3
 8002786:	f7fe f9b1 	bl	8000aec <__aeabi_d2uiz>
 800278a:	4603      	mov	r3, r0
 800278c:	4a31      	ldr	r2, [pc, #196]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 800278e:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002790:	4b30      	ldr	r3, [pc, #192]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002794:	ee07 3a90 	vmov	s15, r3
 8002798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800279c:	ee17 0a90 	vmov	r0, s15
 80027a0:	f7fd fe8a 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587 - 360;
 80027a4:	a324      	add	r3, pc, #144	; (adr r3, 8002838 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 80027a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027aa:	f7fe f807 	bl	80007bc <__aeabi_ddiv>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4610      	mov	r0, r2
 80027b4:	4619      	mov	r1, r3
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	4b28      	ldr	r3, [pc, #160]	; (800285c <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 80027bc:	f7fd fed4 	bl	8000568 <__aeabi_dmul>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	a319      	add	r3, pc, #100	; (adr r3, 8002830 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 80027ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ce:	f7fd fd15 	bl	80001fc <__adddf3>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4610      	mov	r0, r2
 80027d8:	4619      	mov	r1, r3
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	4b1f      	ldr	r3, [pc, #124]	; (800285c <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 80027e0:	f7fd fd0a 	bl	80001f8 <__aeabi_dsub>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4610      	mov	r0, r2
 80027ea:	4619      	mov	r1, r3
 80027ec:	f7fe f99e 	bl	8000b2c <__aeabi_d2f>
 80027f0:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 80027f2:	4a18      	ldr	r2, [pc, #96]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80027f4:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (encoderFront.encoder_pos >= MAX_FRONT_ALLOWABLE_ENC)
 80027f6:	4b17      	ldr	r3, [pc, #92]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	f640 421c 	movw	r2, #3100	; 0xc1c
 80027fe:	4293      	cmp	r3, r2
 8002800:	d312      	bcc.n	8002828 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
				encoderFront.signed_encoder_pos = encoderFront.encoder_pos
 8002802:	4b14      	ldr	r3, [pc, #80]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
						- 4096 * FRONT_GEAR_RATIO;
 8002806:	4618      	mov	r0, r3
 8002808:	f7fd fe34 	bl	8000474 <__aeabi_ui2d>
 800280c:	a30a      	add	r3, pc, #40	; (adr r3, 8002838 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 800280e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002812:	f7fd fcf1 	bl	80001f8 <__aeabi_dsub>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
				encoderFront.signed_encoder_pos = encoderFront.encoder_pos
 800281a:	4610      	mov	r0, r2
 800281c:	4619      	mov	r1, r3
 800281e:	f7fe f93d 	bl	8000a9c <__aeabi_d2iz>
 8002822:	4603      	mov	r3, r0
 8002824:	4a0b      	ldr	r2, [pc, #44]	; (8002854 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002826:	6493      	str	r3, [r2, #72]	; 0x48
		}
	}
}
 8002828:	bf00      	nop
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	d0e56042 	.word	0xd0e56042
 8002834:	40424b22 	.word	0x40424b22
 8002838:	9999999a 	.word	0x9999999a
 800283c:	40c19999 	.word	0x40c19999
 8002840:	20000218 	.word	0x20000218
 8002844:	2000017c 	.word	0x2000017c
 8002848:	200002c0 	.word	0x200002c0
 800284c:	46000000 	.word	0x46000000
 8002850:	43b40000 	.word	0x43b40000
 8002854:	20000268 	.word	0x20000268
 8002858:	e8bb8111 	.word	0xe8bb8111
 800285c:	40768000 	.word	0x40768000

08002860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_TIM_PWM_Stop(&MOTOR_TIM, TIM_CHANNEL_1);
 8002864:	2100      	movs	r1, #0
 8002866:	4808      	ldr	r0, [pc, #32]	; (8002888 <Error_Handler+0x28>)
 8002868:	f003 fedc 	bl	8006624 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&MOTOR_TIM, TIM_CHANNEL_2);
 800286c:	2104      	movs	r1, #4
 800286e:	4806      	ldr	r0, [pc, #24]	; (8002888 <Error_Handler+0x28>)
 8002870:	f003 fed8 	bl	8006624 <HAL_TIM_PWM_Stop>
	brakeMotor(&backMotor, 1);
 8002874:	2101      	movs	r1, #1
 8002876:	4805      	ldr	r0, [pc, #20]	; (800288c <Error_Handler+0x2c>)
 8002878:	f7fe fe7a 	bl	8001570 <brakeMotor>
	brakeMotor(&backMotor, 1);
 800287c:	2101      	movs	r1, #1
 800287e:	4803      	ldr	r0, [pc, #12]	; (800288c <Error_Handler+0x2c>)
 8002880:	f7fe fe76 	bl	8001570 <brakeMotor>
  /* USER CODE END Error_Handler_Debug */
}
 8002884:	bf00      	nop
 8002886:	bd80      	pop	{r7, pc}
 8002888:	200004b4 	.word	0x200004b4
 800288c:	20000034 	.word	0x20000034

08002890 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002894:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <MX_SPI1_Init+0x68>)
 8002896:	4a19      	ldr	r2, [pc, #100]	; (80028fc <MX_SPI1_Init+0x6c>)
 8002898:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800289a:	4b17      	ldr	r3, [pc, #92]	; (80028f8 <MX_SPI1_Init+0x68>)
 800289c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80028a2:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <MX_SPI1_Init+0x68>)
 80028a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028a8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80028aa:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <MX_SPI1_Init+0x68>)
 80028ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80028b2:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <MX_SPI1_Init+0x68>)
 80028b4:	2202      	movs	r2, #2
 80028b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028b8:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <MX_SPI1_Init+0x68>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80028be:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <MX_SPI1_Init+0x68>)
 80028c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80028c6:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <MX_SPI1_Init+0x68>)
 80028c8:	2228      	movs	r2, #40	; 0x28
 80028ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028cc:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <MX_SPI1_Init+0x68>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028d2:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <MX_SPI1_Init+0x68>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028d8:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <MX_SPI1_Init+0x68>)
 80028da:	2200      	movs	r2, #0
 80028dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80028de:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <MX_SPI1_Init+0x68>)
 80028e0:	220a      	movs	r2, #10
 80028e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028e4:	4804      	ldr	r0, [pc, #16]	; (80028f8 <MX_SPI1_Init+0x68>)
 80028e6:	f003 f9bb 	bl	8005c60 <HAL_SPI_Init>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80028f0:	f7ff ffb6 	bl	8002860 <Error_Handler>
  }

}
 80028f4:	bf00      	nop
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	200001c0 	.word	0x200001c0
 80028fc:	40013000 	.word	0x40013000

08002900 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	; 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a19      	ldr	r2, [pc, #100]	; (8002984 <HAL_SPI_MspInit+0x84>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d12b      	bne.n	800297a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	4b18      	ldr	r3, [pc, #96]	; (8002988 <HAL_SPI_MspInit+0x88>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	4a17      	ldr	r2, [pc, #92]	; (8002988 <HAL_SPI_MspInit+0x88>)
 800292c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002930:	6453      	str	r3, [r2, #68]	; 0x44
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <HAL_SPI_MspInit+0x88>)
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	4b11      	ldr	r3, [pc, #68]	; (8002988 <HAL_SPI_MspInit+0x88>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	4a10      	ldr	r2, [pc, #64]	; (8002988 <HAL_SPI_MspInit+0x88>)
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	6313      	str	r3, [r2, #48]	; 0x30
 800294e:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <HAL_SPI_MspInit+0x88>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 800295a:	2360      	movs	r3, #96	; 0x60
 800295c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295e:	2302      	movs	r3, #2
 8002960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002966:	2303      	movs	r3, #3
 8002968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800296a:	2305      	movs	r3, #5
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296e:	f107 0314 	add.w	r3, r7, #20
 8002972:	4619      	mov	r1, r3
 8002974:	4805      	ldr	r0, [pc, #20]	; (800298c <HAL_SPI_MspInit+0x8c>)
 8002976:	f002 f903 	bl	8004b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800297a:	bf00      	nop
 800297c:	3728      	adds	r7, #40	; 0x28
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40013000 	.word	0x40013000
 8002988:	40023800 	.word	0x40023800
 800298c:	40020000 	.word	0x40020000

08002990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	607b      	str	r3, [r7, #4]
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <HAL_MspInit+0x4c>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299e:	4a0f      	ldr	r2, [pc, #60]	; (80029dc <HAL_MspInit+0x4c>)
 80029a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029a4:	6453      	str	r3, [r2, #68]	; 0x44
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <HAL_MspInit+0x4c>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ae:	607b      	str	r3, [r7, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	603b      	str	r3, [r7, #0]
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HAL_MspInit+0x4c>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	4a08      	ldr	r2, [pc, #32]	; (80029dc <HAL_MspInit+0x4c>)
 80029bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c0:	6413      	str	r3, [r2, #64]	; 0x40
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_MspInit+0x4c>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40023800 	.word	0x40023800

080029e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ee:	b480      	push	{r7}
 80029f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029f2:	e7fe      	b.n	80029f2 <HardFault_Handler+0x4>

080029f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029f8:	e7fe      	b.n	80029f8 <MemManage_Handler+0x4>

080029fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029fa:	b480      	push	{r7}
 80029fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029fe:	e7fe      	b.n	80029fe <BusFault_Handler+0x4>

08002a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a04:	e7fe      	b.n	8002a04 <UsageFault_Handler+0x4>

08002a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a34:	f000 fd3e 	bl	80034b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a38:	bf00      	nop
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002a40:	4802      	ldr	r0, [pc, #8]	; (8002a4c <DMA1_Stream1_IRQHandler+0x10>)
 8002a42:	f001 fe33 	bl	80046ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000574 	.word	0x20000574

08002a50 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002a54:	4802      	ldr	r0, [pc, #8]	; (8002a60 <DMA1_Stream3_IRQHandler+0x10>)
 8002a56:	f001 fe29 	bl	80046ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000614 	.word	0x20000614

08002a64 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002a68:	4802      	ldr	r0, [pc, #8]	; (8002a74 <CAN1_RX0_IRQHandler+0x10>)
 8002a6a:	f001 f99a 	bl	8003da2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000218 	.word	0x20000218

08002a78 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002a7c:	2080      	movs	r0, #128	; 0x80
 8002a7e:	f002 fa5d 	bl	8004f3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002a8c:	4802      	ldr	r0, [pc, #8]	; (8002a98 <USART3_IRQHandler+0x10>)
 8002a8e:	f005 f8a1 	bl	8007bd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	200005d4 	.word	0x200005d4

08002a9c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002aa0:	4802      	ldr	r0, [pc, #8]	; (8002aac <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002aa2:	f003 feb5 	bl	8006810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000474 	.word	0x20000474

08002ab0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002ab4:	4802      	ldr	r0, [pc, #8]	; (8002ac0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002ab6:	f003 feab 	bl	8006810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000474 	.word	0x20000474

08002ac4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002ac8:	4802      	ldr	r0, [pc, #8]	; (8002ad4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002aca:	f003 fea1 	bl	8006810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000474 	.word	0x20000474

08002ad8 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002adc:	4802      	ldr	r0, [pc, #8]	; (8002ae8 <TIM8_CC_IRQHandler+0x10>)
 8002ade:	f003 fe97 	bl	8006810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000474 	.word	0x20000474

08002aec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002af0:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <SystemInit+0x28>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af6:	4a07      	ldr	r2, [pc, #28]	; (8002b14 <SystemInit+0x28>)
 8002af8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002afc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b00:	4b04      	ldr	r3, [pc, #16]	; (8002b14 <SystemInit+0x28>)
 8002b02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b06:	609a      	str	r2, [r3, #8]
#endif
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b096      	sub	sp, #88	; 0x58
 8002b1c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	609a      	str	r2, [r3, #8]
 8002b2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	605a      	str	r2, [r3, #4]
 8002b40:	609a      	str	r2, [r3, #8]
 8002b42:	60da      	str	r2, [r3, #12]
 8002b44:	611a      	str	r2, [r3, #16]
 8002b46:	615a      	str	r2, [r3, #20]
 8002b48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b4a:	1d3b      	adds	r3, r7, #4
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	2100      	movs	r1, #0
 8002b50:	4618      	mov	r0, r3
 8002b52:	f005 ff2b 	bl	80089ac <memset>

  htim1.Instance = TIM1;
 8002b56:	4b3e      	ldr	r3, [pc, #248]	; (8002c50 <MX_TIM1_Init+0x138>)
 8002b58:	4a3e      	ldr	r2, [pc, #248]	; (8002c54 <MX_TIM1_Init+0x13c>)
 8002b5a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8002b5c:	4b3c      	ldr	r3, [pc, #240]	; (8002c50 <MX_TIM1_Init+0x138>)
 8002b5e:	22b3      	movs	r2, #179	; 0xb3
 8002b60:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b62:	4b3b      	ldr	r3, [pc, #236]	; (8002c50 <MX_TIM1_Init+0x138>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8002b68:	4b39      	ldr	r3, [pc, #228]	; (8002c50 <MX_TIM1_Init+0x138>)
 8002b6a:	2263      	movs	r2, #99	; 0x63
 8002b6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b6e:	4b38      	ldr	r3, [pc, #224]	; (8002c50 <MX_TIM1_Init+0x138>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b74:	4b36      	ldr	r3, [pc, #216]	; (8002c50 <MX_TIM1_Init+0x138>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b7a:	4b35      	ldr	r3, [pc, #212]	; (8002c50 <MX_TIM1_Init+0x138>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b80:	4833      	ldr	r0, [pc, #204]	; (8002c50 <MX_TIM1_Init+0x138>)
 8002b82:	f003 fc8d 	bl	80064a0 <HAL_TIM_Base_Init>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002b8c:	f7ff fe68 	bl	8002860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b94:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	482c      	ldr	r0, [pc, #176]	; (8002c50 <MX_TIM1_Init+0x138>)
 8002b9e:	f004 f8a1 	bl	8006ce4 <HAL_TIM_ConfigClockSource>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002ba8:	f7ff fe5a 	bl	8002860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002bac:	4828      	ldr	r0, [pc, #160]	; (8002c50 <MX_TIM1_Init+0x138>)
 8002bae:	f003 fcc6 	bl	800653e <HAL_TIM_PWM_Init>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002bb8:	f7ff fe52 	bl	8002860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4821      	ldr	r0, [pc, #132]	; (8002c50 <MX_TIM1_Init+0x138>)
 8002bcc:	f004 fdba 	bl	8007744 <HAL_TIMEx_MasterConfigSynchronization>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002bd6:	f7ff fe43 	bl	8002860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bda:	2360      	movs	r3, #96	; 0x60
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002be2:	2300      	movs	r3, #0
 8002be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002be6:	2300      	movs	r3, #0
 8002be8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bfa:	2204      	movs	r2, #4
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4814      	ldr	r0, [pc, #80]	; (8002c50 <MX_TIM1_Init+0x138>)
 8002c00:	f003 ffaa 	bl	8006b58 <HAL_TIM_PWM_ConfigChannel>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002c0a:	f7ff fe29 	bl	8002860 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c26:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c2c:	1d3b      	adds	r3, r7, #4
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4807      	ldr	r0, [pc, #28]	; (8002c50 <MX_TIM1_Init+0x138>)
 8002c32:	f004 fe03 	bl	800783c <HAL_TIMEx_ConfigBreakDeadTime>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002c3c:	f7ff fe10 	bl	8002860 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8002c40:	4803      	ldr	r0, [pc, #12]	; (8002c50 <MX_TIM1_Init+0x138>)
 8002c42:	f000 fa1b 	bl	800307c <HAL_TIM_MspPostInit>

}
 8002c46:	bf00      	nop
 8002c48:	3758      	adds	r7, #88	; 0x58
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	200004f4 	.word	0x200004f4
 8002c54:	40010000 	.word	0x40010000

08002c58 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08e      	sub	sp, #56	; 0x38
 8002c5c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	605a      	str	r2, [r3, #4]
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c6c:	f107 0320 	add.w	r3, r7, #32
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c76:	1d3b      	adds	r3, r7, #4
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	611a      	str	r2, [r3, #16]
 8002c84:	615a      	str	r2, [r3, #20]
 8002c86:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8002c88:	4b2c      	ldr	r3, [pc, #176]	; (8002d3c <MX_TIM2_Init+0xe4>)
 8002c8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8002c90:	4b2a      	ldr	r3, [pc, #168]	; (8002d3c <MX_TIM2_Init+0xe4>)
 8002c92:	2259      	movs	r2, #89	; 0x59
 8002c94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c96:	4b29      	ldr	r3, [pc, #164]	; (8002d3c <MX_TIM2_Init+0xe4>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002c9c:	4b27      	ldr	r3, [pc, #156]	; (8002d3c <MX_TIM2_Init+0xe4>)
 8002c9e:	2263      	movs	r2, #99	; 0x63
 8002ca0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ca2:	4b26      	ldr	r3, [pc, #152]	; (8002d3c <MX_TIM2_Init+0xe4>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ca8:	4b24      	ldr	r3, [pc, #144]	; (8002d3c <MX_TIM2_Init+0xe4>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002cae:	4823      	ldr	r0, [pc, #140]	; (8002d3c <MX_TIM2_Init+0xe4>)
 8002cb0:	f003 fbf6 	bl	80064a0 <HAL_TIM_Base_Init>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002cba:	f7ff fdd1 	bl	8002860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002cc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cc8:	4619      	mov	r1, r3
 8002cca:	481c      	ldr	r0, [pc, #112]	; (8002d3c <MX_TIM2_Init+0xe4>)
 8002ccc:	f004 f80a 	bl	8006ce4 <HAL_TIM_ConfigClockSource>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002cd6:	f7ff fdc3 	bl	8002860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002cda:	4818      	ldr	r0, [pc, #96]	; (8002d3c <MX_TIM2_Init+0xe4>)
 8002cdc:	f003 fc2f 	bl	800653e <HAL_TIM_PWM_Init>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002ce6:	f7ff fdbb 	bl	8002860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cea:	2300      	movs	r3, #0
 8002cec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002cf2:	f107 0320 	add.w	r3, r7, #32
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4810      	ldr	r0, [pc, #64]	; (8002d3c <MX_TIM2_Init+0xe4>)
 8002cfa:	f004 fd23 	bl	8007744 <HAL_TIMEx_MasterConfigSynchronization>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002d04:	f7ff fdac 	bl	8002860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d08:	2360      	movs	r3, #96	; 0x60
 8002d0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d18:	1d3b      	adds	r3, r7, #4
 8002d1a:	2208      	movs	r2, #8
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4807      	ldr	r0, [pc, #28]	; (8002d3c <MX_TIM2_Init+0xe4>)
 8002d20:	f003 ff1a 	bl	8006b58 <HAL_TIM_PWM_ConfigChannel>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002d2a:	f7ff fd99 	bl	8002860 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8002d2e:	4803      	ldr	r0, [pc, #12]	; (8002d3c <MX_TIM2_Init+0xe4>)
 8002d30:	f000 f9a4 	bl	800307c <HAL_TIM_MspPostInit>

}
 8002d34:	bf00      	nop
 8002d36:	3738      	adds	r7, #56	; 0x38
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20000534 	.word	0x20000534

08002d40 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08e      	sub	sp, #56	; 0x38
 8002d44:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	605a      	str	r2, [r3, #4]
 8002d50:	609a      	str	r2, [r3, #8]
 8002d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d54:	f107 0320 	add.w	r3, r7, #32
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d5e:	1d3b      	adds	r3, r7, #4
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	605a      	str	r2, [r3, #4]
 8002d66:	609a      	str	r2, [r3, #8]
 8002d68:	60da      	str	r2, [r3, #12]
 8002d6a:	611a      	str	r2, [r3, #16]
 8002d6c:	615a      	str	r2, [r3, #20]
 8002d6e:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8002d70:	4b32      	ldr	r3, [pc, #200]	; (8002e3c <MX_TIM3_Init+0xfc>)
 8002d72:	4a33      	ldr	r2, [pc, #204]	; (8002e40 <MX_TIM3_Init+0x100>)
 8002d74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8002d76:	4b31      	ldr	r3, [pc, #196]	; (8002e3c <MX_TIM3_Init+0xfc>)
 8002d78:	2259      	movs	r2, #89	; 0x59
 8002d7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d7c:	4b2f      	ldr	r3, [pc, #188]	; (8002e3c <MX_TIM3_Init+0xfc>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8002d82:	4b2e      	ldr	r3, [pc, #184]	; (8002e3c <MX_TIM3_Init+0xfc>)
 8002d84:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002d88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d8a:	4b2c      	ldr	r3, [pc, #176]	; (8002e3c <MX_TIM3_Init+0xfc>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d90:	4b2a      	ldr	r3, [pc, #168]	; (8002e3c <MX_TIM3_Init+0xfc>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d96:	4829      	ldr	r0, [pc, #164]	; (8002e3c <MX_TIM3_Init+0xfc>)
 8002d98:	f003 fb82 	bl	80064a0 <HAL_TIM_Base_Init>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002da2:	f7ff fd5d 	bl	8002860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002dac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002db0:	4619      	mov	r1, r3
 8002db2:	4822      	ldr	r0, [pc, #136]	; (8002e3c <MX_TIM3_Init+0xfc>)
 8002db4:	f003 ff96 	bl	8006ce4 <HAL_TIM_ConfigClockSource>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002dbe:	f7ff fd4f 	bl	8002860 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002dc2:	481e      	ldr	r0, [pc, #120]	; (8002e3c <MX_TIM3_Init+0xfc>)
 8002dc4:	f003 fbbb 	bl	800653e <HAL_TIM_PWM_Init>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002dce:	f7ff fd47 	bl	8002860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002dda:	f107 0320 	add.w	r3, r7, #32
 8002dde:	4619      	mov	r1, r3
 8002de0:	4816      	ldr	r0, [pc, #88]	; (8002e3c <MX_TIM3_Init+0xfc>)
 8002de2:	f004 fcaf 	bl	8007744 <HAL_TIMEx_MasterConfigSynchronization>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002dec:	f7ff fd38 	bl	8002860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002df0:	2360      	movs	r3, #96	; 0x60
 8002df2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8002df4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002df8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e02:	1d3b      	adds	r3, r7, #4
 8002e04:	2200      	movs	r2, #0
 8002e06:	4619      	mov	r1, r3
 8002e08:	480c      	ldr	r0, [pc, #48]	; (8002e3c <MX_TIM3_Init+0xfc>)
 8002e0a:	f003 fea5 	bl	8006b58 <HAL_TIM_PWM_ConfigChannel>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002e14:	f7ff fd24 	bl	8002860 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e18:	1d3b      	adds	r3, r7, #4
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4807      	ldr	r0, [pc, #28]	; (8002e3c <MX_TIM3_Init+0xfc>)
 8002e20:	f003 fe9a 	bl	8006b58 <HAL_TIM_PWM_ConfigChannel>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002e2a:	f7ff fd19 	bl	8002860 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8002e2e:	4803      	ldr	r0, [pc, #12]	; (8002e3c <MX_TIM3_Init+0xfc>)
 8002e30:	f000 f924 	bl	800307c <HAL_TIM_MspPostInit>

}
 8002e34:	bf00      	nop
 8002e36:	3738      	adds	r7, #56	; 0x38
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	200004b4 	.word	0x200004b4
 8002e40:	40000400 	.word	0x40000400

08002e44 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08a      	sub	sp, #40	; 0x28
 8002e48:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e4a:	f107 0318 	add.w	r3, r7, #24
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	605a      	str	r2, [r3, #4]
 8002e54:	609a      	str	r2, [r3, #8]
 8002e56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e58:	f107 0310 	add.w	r3, r7, #16
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002e62:	463b      	mov	r3, r7
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]

  htim8.Instance = TIM8;
 8002e6e:	4b2d      	ldr	r3, [pc, #180]	; (8002f24 <MX_TIM8_Init+0xe0>)
 8002e70:	4a2d      	ldr	r2, [pc, #180]	; (8002f28 <MX_TIM8_Init+0xe4>)
 8002e72:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 90-1;
 8002e74:	4b2b      	ldr	r3, [pc, #172]	; (8002f24 <MX_TIM8_Init+0xe0>)
 8002e76:	2259      	movs	r2, #89	; 0x59
 8002e78:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e7a:	4b2a      	ldr	r3, [pc, #168]	; (8002f24 <MX_TIM8_Init+0xe0>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002e80:	4b28      	ldr	r3, [pc, #160]	; (8002f24 <MX_TIM8_Init+0xe0>)
 8002e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e86:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e88:	4b26      	ldr	r3, [pc, #152]	; (8002f24 <MX_TIM8_Init+0xe0>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002e8e:	4b25      	ldr	r3, [pc, #148]	; (8002f24 <MX_TIM8_Init+0xe0>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e94:	4b23      	ldr	r3, [pc, #140]	; (8002f24 <MX_TIM8_Init+0xe0>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002e9a:	4822      	ldr	r0, [pc, #136]	; (8002f24 <MX_TIM8_Init+0xe0>)
 8002e9c:	f003 fb00 	bl	80064a0 <HAL_TIM_Base_Init>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8002ea6:	f7ff fcdb 	bl	8002860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eae:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002eb0:	f107 0318 	add.w	r3, r7, #24
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	481b      	ldr	r0, [pc, #108]	; (8002f24 <MX_TIM8_Init+0xe0>)
 8002eb8:	f003 ff14 	bl	8006ce4 <HAL_TIM_ConfigClockSource>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8002ec2:	f7ff fccd 	bl	8002860 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8002ec6:	4817      	ldr	r0, [pc, #92]	; (8002f24 <MX_TIM8_Init+0xe0>)
 8002ec8:	f003 fc04 	bl	80066d4 <HAL_TIM_IC_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8002ed2:	f7ff fcc5 	bl	8002860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002ede:	f107 0310 	add.w	r3, r7, #16
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	480f      	ldr	r0, [pc, #60]	; (8002f24 <MX_TIM8_Init+0xe0>)
 8002ee6:	f004 fc2d 	bl	8007744 <HAL_TIMEx_MasterConfigSynchronization>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 8002ef0:	f7ff fcb6 	bl	8002860 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002f04:	463b      	mov	r3, r7
 8002f06:	220c      	movs	r2, #12
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4806      	ldr	r0, [pc, #24]	; (8002f24 <MX_TIM8_Init+0xe0>)
 8002f0c:	f003 fd88 	bl	8006a20 <HAL_TIM_IC_ConfigChannel>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8002f16:	f7ff fca3 	bl	8002860 <Error_Handler>
  }

}
 8002f1a:	bf00      	nop
 8002f1c:	3728      	adds	r7, #40	; 0x28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000474 	.word	0x20000474
 8002f28:	40010400 	.word	0x40010400

08002f2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08c      	sub	sp, #48	; 0x30
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f34:	f107 031c 	add.w	r3, r7, #28
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a47      	ldr	r2, [pc, #284]	; (8003068 <HAL_TIM_Base_MspInit+0x13c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d10e      	bne.n	8002f6c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61bb      	str	r3, [r7, #24]
 8002f52:	4b46      	ldr	r3, [pc, #280]	; (800306c <HAL_TIM_Base_MspInit+0x140>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	4a45      	ldr	r2, [pc, #276]	; (800306c <HAL_TIM_Base_MspInit+0x140>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f5e:	4b43      	ldr	r3, [pc, #268]	; (800306c <HAL_TIM_Base_MspInit+0x140>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	61bb      	str	r3, [r7, #24]
 8002f68:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002f6a:	e079      	b.n	8003060 <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM2)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f74:	d10e      	bne.n	8002f94 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	4b3c      	ldr	r3, [pc, #240]	; (800306c <HAL_TIM_Base_MspInit+0x140>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	4a3b      	ldr	r2, [pc, #236]	; (800306c <HAL_TIM_Base_MspInit+0x140>)
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	6413      	str	r3, [r2, #64]	; 0x40
 8002f86:	4b39      	ldr	r3, [pc, #228]	; (800306c <HAL_TIM_Base_MspInit+0x140>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	697b      	ldr	r3, [r7, #20]
}
 8002f92:	e065      	b.n	8003060 <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM3)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a35      	ldr	r2, [pc, #212]	; (8003070 <HAL_TIM_Base_MspInit+0x144>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d10e      	bne.n	8002fbc <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	4b32      	ldr	r3, [pc, #200]	; (800306c <HAL_TIM_Base_MspInit+0x140>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	4a31      	ldr	r2, [pc, #196]	; (800306c <HAL_TIM_Base_MspInit+0x140>)
 8002fa8:	f043 0302 	orr.w	r3, r3, #2
 8002fac:	6413      	str	r3, [r2, #64]	; 0x40
 8002fae:	4b2f      	ldr	r3, [pc, #188]	; (800306c <HAL_TIM_Base_MspInit+0x140>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	693b      	ldr	r3, [r7, #16]
}
 8002fba:	e051      	b.n	8003060 <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM8)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a2c      	ldr	r2, [pc, #176]	; (8003074 <HAL_TIM_Base_MspInit+0x148>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d14c      	bne.n	8003060 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	4b28      	ldr	r3, [pc, #160]	; (800306c <HAL_TIM_Base_MspInit+0x140>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	4a27      	ldr	r2, [pc, #156]	; (800306c <HAL_TIM_Base_MspInit+0x140>)
 8002fd0:	f043 0302 	orr.w	r3, r3, #2
 8002fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd6:	4b25      	ldr	r3, [pc, #148]	; (800306c <HAL_TIM_Base_MspInit+0x140>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	4b21      	ldr	r3, [pc, #132]	; (800306c <HAL_TIM_Base_MspInit+0x140>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	4a20      	ldr	r2, [pc, #128]	; (800306c <HAL_TIM_Base_MspInit+0x140>)
 8002fec:	f043 0304 	orr.w	r3, r3, #4
 8002ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff2:	4b1e      	ldr	r3, [pc, #120]	; (800306c <HAL_TIM_Base_MspInit+0x140>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	f003 0304 	and.w	r3, r3, #4
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ffe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003004:	2302      	movs	r3, #2
 8003006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003008:	2300      	movs	r3, #0
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300c:	2300      	movs	r3, #0
 800300e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003010:	2303      	movs	r3, #3
 8003012:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003014:	f107 031c 	add.w	r3, r7, #28
 8003018:	4619      	mov	r1, r3
 800301a:	4817      	ldr	r0, [pc, #92]	; (8003078 <HAL_TIM_Base_MspInit+0x14c>)
 800301c:	f001 fdb0 	bl	8004b80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003020:	2200      	movs	r2, #0
 8003022:	2100      	movs	r1, #0
 8003024:	202b      	movs	r0, #43	; 0x2b
 8003026:	f001 f9c6 	bl	80043b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800302a:	202b      	movs	r0, #43	; 0x2b
 800302c:	f001 f9df 	bl	80043ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003030:	2200      	movs	r2, #0
 8003032:	2100      	movs	r1, #0
 8003034:	202c      	movs	r0, #44	; 0x2c
 8003036:	f001 f9be 	bl	80043b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800303a:	202c      	movs	r0, #44	; 0x2c
 800303c:	f001 f9d7 	bl	80043ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8003040:	2200      	movs	r2, #0
 8003042:	2100      	movs	r1, #0
 8003044:	202d      	movs	r0, #45	; 0x2d
 8003046:	f001 f9b6 	bl	80043b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800304a:	202d      	movs	r0, #45	; 0x2d
 800304c:	f001 f9cf 	bl	80043ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8003050:	2200      	movs	r2, #0
 8003052:	2100      	movs	r1, #0
 8003054:	202e      	movs	r0, #46	; 0x2e
 8003056:	f001 f9ae 	bl	80043b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800305a:	202e      	movs	r0, #46	; 0x2e
 800305c:	f001 f9c7 	bl	80043ee <HAL_NVIC_EnableIRQ>
}
 8003060:	bf00      	nop
 8003062:	3730      	adds	r7, #48	; 0x30
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40010000 	.word	0x40010000
 800306c:	40023800 	.word	0x40023800
 8003070:	40000400 	.word	0x40000400
 8003074:	40010400 	.word	0x40010400
 8003078:	40020800 	.word	0x40020800

0800307c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b08a      	sub	sp, #40	; 0x28
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003084:	f107 0314 	add.w	r3, r7, #20
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	605a      	str	r2, [r3, #4]
 800308e:	609a      	str	r2, [r3, #8]
 8003090:	60da      	str	r2, [r3, #12]
 8003092:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a37      	ldr	r2, [pc, #220]	; (8003178 <HAL_TIM_MspPostInit+0xfc>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d11f      	bne.n	80030de <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	4b36      	ldr	r3, [pc, #216]	; (800317c <HAL_TIM_MspPostInit+0x100>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	4a35      	ldr	r2, [pc, #212]	; (800317c <HAL_TIM_MspPostInit+0x100>)
 80030a8:	f043 0310 	orr.w	r3, r3, #16
 80030ac:	6313      	str	r3, [r2, #48]	; 0x30
 80030ae:	4b33      	ldr	r3, [pc, #204]	; (800317c <HAL_TIM_MspPostInit+0x100>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 80030ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c0:	2302      	movs	r3, #2
 80030c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c8:	2300      	movs	r3, #0
 80030ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80030cc:	2301      	movs	r3, #1
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 80030d0:	f107 0314 	add.w	r3, r7, #20
 80030d4:	4619      	mov	r1, r3
 80030d6:	482a      	ldr	r0, [pc, #168]	; (8003180 <HAL_TIM_MspPostInit+0x104>)
 80030d8:	f001 fd52 	bl	8004b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80030dc:	e047      	b.n	800316e <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM2)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e6:	d11f      	bne.n	8003128 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e8:	2300      	movs	r3, #0
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	4b23      	ldr	r3, [pc, #140]	; (800317c <HAL_TIM_MspPostInit+0x100>)
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	4a22      	ldr	r2, [pc, #136]	; (800317c <HAL_TIM_MspPostInit+0x100>)
 80030f2:	f043 0302 	orr.w	r3, r3, #2
 80030f6:	6313      	str	r3, [r2, #48]	; 0x30
 80030f8:	4b20      	ldr	r3, [pc, #128]	; (800317c <HAL_TIM_MspPostInit+0x100>)
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin;
 8003104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310a:	2302      	movs	r3, #2
 800310c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003112:	2300      	movs	r3, #0
 8003114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003116:	2301      	movs	r3, #1
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ClimbSpeed_TIM2_CH3_GPIO_Port, &GPIO_InitStruct);
 800311a:	f107 0314 	add.w	r3, r7, #20
 800311e:	4619      	mov	r1, r3
 8003120:	4818      	ldr	r0, [pc, #96]	; (8003184 <HAL_TIM_MspPostInit+0x108>)
 8003122:	f001 fd2d 	bl	8004b80 <HAL_GPIO_Init>
}
 8003126:	e022      	b.n	800316e <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a16      	ldr	r2, [pc, #88]	; (8003188 <HAL_TIM_MspPostInit+0x10c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d11d      	bne.n	800316e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	4b11      	ldr	r3, [pc, #68]	; (800317c <HAL_TIM_MspPostInit+0x100>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	4a10      	ldr	r2, [pc, #64]	; (800317c <HAL_TIM_MspPostInit+0x100>)
 800313c:	f043 0304 	orr.w	r3, r3, #4
 8003140:	6313      	str	r3, [r2, #48]	; 0x30
 8003142:	4b0e      	ldr	r3, [pc, #56]	; (800317c <HAL_TIM_MspPostInit+0x100>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	60bb      	str	r3, [r7, #8]
 800314c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 800314e:	23c0      	movs	r3, #192	; 0xc0
 8003150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003152:	2302      	movs	r3, #2
 8003154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315a:	2300      	movs	r3, #0
 800315c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800315e:	2302      	movs	r3, #2
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003162:	f107 0314 	add.w	r3, r7, #20
 8003166:	4619      	mov	r1, r3
 8003168:	4808      	ldr	r0, [pc, #32]	; (800318c <HAL_TIM_MspPostInit+0x110>)
 800316a:	f001 fd09 	bl	8004b80 <HAL_GPIO_Init>
}
 800316e:	bf00      	nop
 8003170:	3728      	adds	r7, #40	; 0x28
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40010000 	.word	0x40010000
 800317c:	40023800 	.word	0x40023800
 8003180:	40021000 	.word	0x40021000
 8003184:	40020400 	.word	0x40020400
 8003188:	40000400 	.word	0x40000400
 800318c:	40020800 	.word	0x40020800

08003190 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003194:	4b11      	ldr	r3, [pc, #68]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 8003196:	4a12      	ldr	r2, [pc, #72]	; (80031e0 <MX_USART3_UART_Init+0x50>)
 8003198:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800319a:	4b10      	ldr	r3, [pc, #64]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 800319c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80031a2:	4b0e      	ldr	r3, [pc, #56]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80031ae:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80031b4:	4b09      	ldr	r3, [pc, #36]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 80031b6:	220c      	movs	r2, #12
 80031b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ba:	4b08      	ldr	r3, [pc, #32]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 80031bc:	2200      	movs	r2, #0
 80031be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80031c0:	4b06      	ldr	r3, [pc, #24]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80031c6:	4805      	ldr	r0, [pc, #20]	; (80031dc <MX_USART3_UART_Init+0x4c>)
 80031c8:	f004 fb9e 	bl	8007908 <HAL_UART_Init>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80031d2:	f7ff fb45 	bl	8002860 <Error_Handler>
  }

}
 80031d6:	bf00      	nop
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	200005d4 	.word	0x200005d4
 80031e0:	40004800 	.word	0x40004800

080031e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08a      	sub	sp, #40	; 0x28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ec:	f107 0314 	add.w	r3, r7, #20
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	60da      	str	r2, [r3, #12]
 80031fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a4c      	ldr	r2, [pc, #304]	; (8003334 <HAL_UART_MspInit+0x150>)
 8003202:	4293      	cmp	r3, r2
 8003204:	f040 8091 	bne.w	800332a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003208:	2300      	movs	r3, #0
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	4b4a      	ldr	r3, [pc, #296]	; (8003338 <HAL_UART_MspInit+0x154>)
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	4a49      	ldr	r2, [pc, #292]	; (8003338 <HAL_UART_MspInit+0x154>)
 8003212:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003216:	6413      	str	r3, [r2, #64]	; 0x40
 8003218:	4b47      	ldr	r3, [pc, #284]	; (8003338 <HAL_UART_MspInit+0x154>)
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	4b43      	ldr	r3, [pc, #268]	; (8003338 <HAL_UART_MspInit+0x154>)
 800322a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322c:	4a42      	ldr	r2, [pc, #264]	; (8003338 <HAL_UART_MspInit+0x154>)
 800322e:	f043 0308 	orr.w	r3, r3, #8
 8003232:	6313      	str	r3, [r2, #48]	; 0x30
 8003234:	4b40      	ldr	r3, [pc, #256]	; (8003338 <HAL_UART_MspInit+0x154>)
 8003236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 8003240:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003246:	2302      	movs	r3, #2
 8003248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800324e:	2303      	movs	r3, #3
 8003250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003252:	2307      	movs	r3, #7
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003256:	f107 0314 	add.w	r3, r7, #20
 800325a:	4619      	mov	r1, r3
 800325c:	4837      	ldr	r0, [pc, #220]	; (800333c <HAL_UART_MspInit+0x158>)
 800325e:	f001 fc8f 	bl	8004b80 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003262:	4b37      	ldr	r3, [pc, #220]	; (8003340 <HAL_UART_MspInit+0x15c>)
 8003264:	4a37      	ldr	r2, [pc, #220]	; (8003344 <HAL_UART_MspInit+0x160>)
 8003266:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003268:	4b35      	ldr	r3, [pc, #212]	; (8003340 <HAL_UART_MspInit+0x15c>)
 800326a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800326e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003270:	4b33      	ldr	r3, [pc, #204]	; (8003340 <HAL_UART_MspInit+0x15c>)
 8003272:	2200      	movs	r2, #0
 8003274:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003276:	4b32      	ldr	r3, [pc, #200]	; (8003340 <HAL_UART_MspInit+0x15c>)
 8003278:	2200      	movs	r2, #0
 800327a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800327c:	4b30      	ldr	r3, [pc, #192]	; (8003340 <HAL_UART_MspInit+0x15c>)
 800327e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003282:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003284:	4b2e      	ldr	r3, [pc, #184]	; (8003340 <HAL_UART_MspInit+0x15c>)
 8003286:	2200      	movs	r2, #0
 8003288:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800328a:	4b2d      	ldr	r3, [pc, #180]	; (8003340 <HAL_UART_MspInit+0x15c>)
 800328c:	2200      	movs	r2, #0
 800328e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003290:	4b2b      	ldr	r3, [pc, #172]	; (8003340 <HAL_UART_MspInit+0x15c>)
 8003292:	2200      	movs	r2, #0
 8003294:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003296:	4b2a      	ldr	r3, [pc, #168]	; (8003340 <HAL_UART_MspInit+0x15c>)
 8003298:	2200      	movs	r2, #0
 800329a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800329c:	4b28      	ldr	r3, [pc, #160]	; (8003340 <HAL_UART_MspInit+0x15c>)
 800329e:	2200      	movs	r2, #0
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80032a2:	4827      	ldr	r0, [pc, #156]	; (8003340 <HAL_UART_MspInit+0x15c>)
 80032a4:	f001 f8da 	bl	800445c <HAL_DMA_Init>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80032ae:	f7ff fad7 	bl	8002860 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a22      	ldr	r2, [pc, #136]	; (8003340 <HAL_UART_MspInit+0x15c>)
 80032b6:	635a      	str	r2, [r3, #52]	; 0x34
 80032b8:	4a21      	ldr	r2, [pc, #132]	; (8003340 <HAL_UART_MspInit+0x15c>)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80032be:	4b22      	ldr	r3, [pc, #136]	; (8003348 <HAL_UART_MspInit+0x164>)
 80032c0:	4a22      	ldr	r2, [pc, #136]	; (800334c <HAL_UART_MspInit+0x168>)
 80032c2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80032c4:	4b20      	ldr	r3, [pc, #128]	; (8003348 <HAL_UART_MspInit+0x164>)
 80032c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032ca:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032cc:	4b1e      	ldr	r3, [pc, #120]	; (8003348 <HAL_UART_MspInit+0x164>)
 80032ce:	2240      	movs	r2, #64	; 0x40
 80032d0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032d2:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <HAL_UART_MspInit+0x164>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032d8:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <HAL_UART_MspInit+0x164>)
 80032da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032de:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032e0:	4b19      	ldr	r3, [pc, #100]	; (8003348 <HAL_UART_MspInit+0x164>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032e6:	4b18      	ldr	r3, [pc, #96]	; (8003348 <HAL_UART_MspInit+0x164>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80032ec:	4b16      	ldr	r3, [pc, #88]	; (8003348 <HAL_UART_MspInit+0x164>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032f2:	4b15      	ldr	r3, [pc, #84]	; (8003348 <HAL_UART_MspInit+0x164>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032f8:	4b13      	ldr	r3, [pc, #76]	; (8003348 <HAL_UART_MspInit+0x164>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80032fe:	4812      	ldr	r0, [pc, #72]	; (8003348 <HAL_UART_MspInit+0x164>)
 8003300:	f001 f8ac 	bl	800445c <HAL_DMA_Init>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800330a:	f7ff faa9 	bl	8002860 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a0d      	ldr	r2, [pc, #52]	; (8003348 <HAL_UART_MspInit+0x164>)
 8003312:	631a      	str	r2, [r3, #48]	; 0x30
 8003314:	4a0c      	ldr	r2, [pc, #48]	; (8003348 <HAL_UART_MspInit+0x164>)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800331a:	2200      	movs	r2, #0
 800331c:	2100      	movs	r1, #0
 800331e:	2027      	movs	r0, #39	; 0x27
 8003320:	f001 f849 	bl	80043b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003324:	2027      	movs	r0, #39	; 0x27
 8003326:	f001 f862 	bl	80043ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800332a:	bf00      	nop
 800332c:	3728      	adds	r7, #40	; 0x28
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40004800 	.word	0x40004800
 8003338:	40023800 	.word	0x40023800
 800333c:	40020c00 	.word	0x40020c00
 8003340:	20000574 	.word	0x20000574
 8003344:	40026028 	.word	0x40026028
 8003348:	20000614 	.word	0x20000614
 800334c:	40026058 	.word	0x40026058

08003350 <joystick_Init>:
static const float JoyTurnAngleDeadzone = 0.2;

static const float JoyLeftTurnAngle = 3.142;
static const float JoyRightTurnAngle = 0;

void joystick_Init(void){
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  memset(joyPosBuffer, 0, sizeof(joyPosBuffer));
 8003354:	2228      	movs	r2, #40	; 0x28
 8003356:	2100      	movs	r1, #0
 8003358:	4802      	ldr	r0, [pc, #8]	; (8003364 <joystick_Init+0x14>)
 800335a:	f005 fb27 	bl	80089ac <memset>
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000198 	.word	0x20000198

08003368 <wheelSpeedControl_Init>:

  joy_pos_buffer_cnt++;
}

void wheelSpeedControl_Init(WheelSpeed* wheel, float max_lin_speed, float max_ang_speed)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	ed87 0a02 	vstr	s0, [r7, #8]
 8003374:	edc7 0a01 	vstr	s1, [r7, #4]
  wheel->stable_cnt = 0;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	611a      	str	r2, [r3, #16]
  wheel->cur_r = 0.0f;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f04f 0200 	mov.w	r2, #0
 8003384:	605a      	str	r2, [r3, #4]
  wheel->cur_l = 0.0f;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
  wheel->pre_l= 0.0f;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	609a      	str	r2, [r3, #8]
  wheel->pre_r = 0.0f;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	60da      	str	r2, [r3, #12]
  wheel->max_angular_speed = max_ang_speed;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	619a      	str	r2, [r3, #24]
  wheel->max_linear_speed = max_lin_speed;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	615a      	str	r2, [r3, #20]
  wheel->start_from_stationary = false;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	771a      	strb	r2, [r3, #28]
}
 80033b0:	bf00      	nop
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler: 



  ldr   sp, =_estack       /* set stack pointer */
 80033bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033f4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80033c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80033c2:	e003      	b.n	80033cc <LoopCopyDataInit>

080033c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80033c4:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80033c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80033c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80033ca:	3104      	adds	r1, #4

080033cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80033cc:	480b      	ldr	r0, [pc, #44]	; (80033fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80033ce:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80033d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80033d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80033d4:	d3f6      	bcc.n	80033c4 <CopyDataInit>
  ldr  r2, =_sbss
 80033d6:	4a0b      	ldr	r2, [pc, #44]	; (8003404 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80033d8:	e002      	b.n	80033e0 <LoopFillZerobss>

080033da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80033da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80033dc:	f842 3b04 	str.w	r3, [r2], #4

080033e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80033e0:	4b09      	ldr	r3, [pc, #36]	; (8003408 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80033e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80033e4:	d3f9      	bcc.n	80033da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033e6:	f7ff fb81 	bl	8002aec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033ea:	f005 fabb 	bl	8008964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033ee:	f7fe fda1 	bl	8001f34 <main>
  bx  lr    
 80033f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80033f4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80033f8:	08008a1c 	.word	0x08008a1c
  ldr  r0, =_sdata
 80033fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003400:	2000012c 	.word	0x2000012c
  ldr  r2, =_sbss
 8003404:	20000130 	.word	0x20000130
  ldr  r3, = _ebss
 8003408:	20000678 	.word	0x20000678

0800340c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800340c:	e7fe      	b.n	800340c <ADC_IRQHandler>
	...

08003410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003414:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <HAL_Init+0x40>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a0d      	ldr	r2, [pc, #52]	; (8003450 <HAL_Init+0x40>)
 800341a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800341e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003420:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <HAL_Init+0x40>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a0a      	ldr	r2, [pc, #40]	; (8003450 <HAL_Init+0x40>)
 8003426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800342a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800342c:	4b08      	ldr	r3, [pc, #32]	; (8003450 <HAL_Init+0x40>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a07      	ldr	r2, [pc, #28]	; (8003450 <HAL_Init+0x40>)
 8003432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003436:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003438:	2003      	movs	r0, #3
 800343a:	f000 ffb1 	bl	80043a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800343e:	2000      	movs	r0, #0
 8003440:	f000 f808 	bl	8003454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003444:	f7ff faa4 	bl	8002990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40023c00 	.word	0x40023c00

08003454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800345c:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <HAL_InitTick+0x54>)
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	4b12      	ldr	r3, [pc, #72]	; (80034ac <HAL_InitTick+0x58>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	4619      	mov	r1, r3
 8003466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800346a:	fbb3 f3f1 	udiv	r3, r3, r1
 800346e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003472:	4618      	mov	r0, r3
 8003474:	f000 ffc9 	bl	800440a <HAL_SYSTICK_Config>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e00e      	b.n	80034a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b0f      	cmp	r3, #15
 8003486:	d80a      	bhi.n	800349e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003488:	2200      	movs	r2, #0
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003490:	f000 ff91 	bl	80043b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003494:	4a06      	ldr	r2, [pc, #24]	; (80034b0 <HAL_InitTick+0x5c>)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800349a:	2300      	movs	r3, #0
 800349c:	e000      	b.n	80034a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	20000120 	.word	0x20000120
 80034ac:	20000128 	.word	0x20000128
 80034b0:	20000124 	.word	0x20000124

080034b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034b8:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <HAL_IncTick+0x20>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	461a      	mov	r2, r3
 80034be:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <HAL_IncTick+0x24>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4413      	add	r3, r2
 80034c4:	4a04      	ldr	r2, [pc, #16]	; (80034d8 <HAL_IncTick+0x24>)
 80034c6:	6013      	str	r3, [r2, #0]
}
 80034c8:	bf00      	nop
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20000128 	.word	0x20000128
 80034d8:	20000674 	.word	0x20000674

080034dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  return uwTick;
 80034e0:	4b03      	ldr	r3, [pc, #12]	; (80034f0 <HAL_GetTick+0x14>)
 80034e2:	681b      	ldr	r3, [r3, #0]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	20000674 	.word	0x20000674

080034f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034fc:	f7ff ffee 	bl	80034dc <HAL_GetTick>
 8003500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800350c:	d005      	beq.n	800351a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800350e:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <HAL_Delay+0x44>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	461a      	mov	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4413      	add	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800351a:	bf00      	nop
 800351c:	f7ff ffde 	bl	80034dc <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	429a      	cmp	r2, r3
 800352a:	d8f7      	bhi.n	800351c <HAL_Delay+0x28>
  {
  }
}
 800352c:	bf00      	nop
 800352e:	bf00      	nop
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20000128 	.word	0x20000128

0800353c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e0ed      	b.n	800372a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d102      	bne.n	8003560 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fe f9f4 	bl	8001948 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0202 	bic.w	r2, r2, #2
 800356e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003570:	f7ff ffb4 	bl	80034dc <HAL_GetTick>
 8003574:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003576:	e012      	b.n	800359e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003578:	f7ff ffb0 	bl	80034dc <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b0a      	cmp	r3, #10
 8003584:	d90b      	bls.n	800359e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2205      	movs	r2, #5
 8003596:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e0c5      	b.n	800372a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1e5      	bne.n	8003578 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035bc:	f7ff ff8e 	bl	80034dc <HAL_GetTick>
 80035c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035c2:	e012      	b.n	80035ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035c4:	f7ff ff8a 	bl	80034dc <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b0a      	cmp	r3, #10
 80035d0:	d90b      	bls.n	80035ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2205      	movs	r2, #5
 80035e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e09f      	b.n	800372a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0e5      	beq.n	80035c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	7e1b      	ldrb	r3, [r3, #24]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d108      	bne.n	8003612 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	e007      	b.n	8003622 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003620:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	7e5b      	ldrb	r3, [r3, #25]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d108      	bne.n	800363c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	e007      	b.n	800364c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800364a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	7e9b      	ldrb	r3, [r3, #26]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d108      	bne.n	8003666 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0220 	orr.w	r2, r2, #32
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	e007      	b.n	8003676 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0220 	bic.w	r2, r2, #32
 8003674:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	7edb      	ldrb	r3, [r3, #27]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d108      	bne.n	8003690 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0210 	bic.w	r2, r2, #16
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	e007      	b.n	80036a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0210 	orr.w	r2, r2, #16
 800369e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	7f1b      	ldrb	r3, [r3, #28]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d108      	bne.n	80036ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0208 	orr.w	r2, r2, #8
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	e007      	b.n	80036ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0208 	bic.w	r2, r2, #8
 80036c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	7f5b      	ldrb	r3, [r3, #29]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d108      	bne.n	80036e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0204 	orr.w	r2, r2, #4
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	e007      	b.n	80036f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 0204 	bic.w	r2, r2, #4
 80036f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	ea42 0103 	orr.w	r1, r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	1e5a      	subs	r2, r3, #1
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 3020 	ldrb.w	r3, [r3, #32]
 800374a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800374c:	7cfb      	ldrb	r3, [r7, #19]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d003      	beq.n	800375a <HAL_CAN_ConfigFilter+0x26>
 8003752:	7cfb      	ldrb	r3, [r7, #19]
 8003754:	2b02      	cmp	r3, #2
 8003756:	f040 80be 	bne.w	80038d6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800375a:	4b65      	ldr	r3, [pc, #404]	; (80038f0 <HAL_CAN_ConfigFilter+0x1bc>)
 800375c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003764:	f043 0201 	orr.w	r2, r3, #1
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003774:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	021b      	lsls	r3, r3, #8
 800378a:	431a      	orrs	r2, r3
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f003 031f 	and.w	r3, r3, #31
 800379a:	2201      	movs	r2, #1
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	43db      	mvns	r3, r3
 80037ac:	401a      	ands	r2, r3
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d123      	bne.n	8003804 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	43db      	mvns	r3, r3
 80037c6:	401a      	ands	r2, r3
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80037de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	3248      	adds	r2, #72	; 0x48
 80037e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037fa:	6979      	ldr	r1, [r7, #20]
 80037fc:	3348      	adds	r3, #72	; 0x48
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	440b      	add	r3, r1
 8003802:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d122      	bne.n	8003852 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	431a      	orrs	r2, r3
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800382c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	3248      	adds	r2, #72	; 0x48
 8003832:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003846:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003848:	6979      	ldr	r1, [r7, #20]
 800384a:	3348      	adds	r3, #72	; 0x48
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	440b      	add	r3, r1
 8003850:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d109      	bne.n	800386e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	43db      	mvns	r3, r3
 8003864:	401a      	ands	r2, r3
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800386c:	e007      	b.n	800387e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	431a      	orrs	r2, r3
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	43db      	mvns	r3, r3
 8003890:	401a      	ands	r2, r3
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003898:	e007      	b.n	80038aa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	431a      	orrs	r2, r3
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d107      	bne.n	80038c2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80038c8:	f023 0201 	bic.w	r2, r3, #1
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	e006      	b.n	80038e4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
  }
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	40006400 	.word	0x40006400

080038f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	d12e      	bne.n	8003966 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0201 	bic.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003920:	f7ff fddc 	bl	80034dc <HAL_GetTick>
 8003924:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003926:	e012      	b.n	800394e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003928:	f7ff fdd8 	bl	80034dc <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b0a      	cmp	r3, #10
 8003934:	d90b      	bls.n	800394e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2205      	movs	r2, #5
 8003946:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e012      	b.n	8003974 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e5      	bne.n	8003928 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	e006      	b.n	8003974 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
  }
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800397c:	b480      	push	{r7}
 800397e:	b089      	sub	sp, #36	; 0x24
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003990:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800399a:	7ffb      	ldrb	r3, [r7, #31]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d003      	beq.n	80039a8 <HAL_CAN_AddTxMessage+0x2c>
 80039a0:	7ffb      	ldrb	r3, [r7, #31]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	f040 80b8 	bne.w	8003b18 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10a      	bne.n	80039c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d105      	bne.n	80039c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 80a0 	beq.w	8003b08 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	0e1b      	lsrs	r3, r3, #24
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d907      	bls.n	80039e8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e09e      	b.n	8003b26 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80039e8:	2201      	movs	r2, #1
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	409a      	lsls	r2, r3
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10d      	bne.n	8003a16 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003a04:	68f9      	ldr	r1, [r7, #12]
 8003a06:	6809      	ldr	r1, [r1, #0]
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	3318      	adds	r3, #24
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	440b      	add	r3, r1
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	e00f      	b.n	8003a36 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a20:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a26:	68f9      	ldr	r1, [r7, #12]
 8003a28:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003a2a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	3318      	adds	r3, #24
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	440b      	add	r3, r1
 8003a34:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6819      	ldr	r1, [r3, #0]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	691a      	ldr	r2, [r3, #16]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	3318      	adds	r3, #24
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	440b      	add	r3, r1
 8003a46:	3304      	adds	r3, #4
 8003a48:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	7d1b      	ldrb	r3, [r3, #20]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d111      	bne.n	8003a76 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	3318      	adds	r3, #24
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	4413      	add	r3, r2
 8003a5e:	3304      	adds	r3, #4
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	6811      	ldr	r1, [r2, #0]
 8003a66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	3318      	adds	r3, #24
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	440b      	add	r3, r1
 8003a72:	3304      	adds	r3, #4
 8003a74:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3307      	adds	r3, #7
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	061a      	lsls	r2, r3, #24
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3306      	adds	r3, #6
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	041b      	lsls	r3, r3, #16
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3305      	adds	r3, #5
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	021b      	lsls	r3, r3, #8
 8003a90:	4313      	orrs	r3, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	3204      	adds	r2, #4
 8003a96:	7812      	ldrb	r2, [r2, #0]
 8003a98:	4610      	mov	r0, r2
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	6811      	ldr	r1, [r2, #0]
 8003a9e:	ea43 0200 	orr.w	r2, r3, r0
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	440b      	add	r3, r1
 8003aa8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003aac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3303      	adds	r3, #3
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	061a      	lsls	r2, r3, #24
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3302      	adds	r3, #2
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	041b      	lsls	r3, r3, #16
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	7812      	ldrb	r2, [r2, #0]
 8003ace:	4610      	mov	r0, r2
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	6811      	ldr	r1, [r2, #0]
 8003ad4:	ea43 0200 	orr.w	r2, r3, r0
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	440b      	add	r3, r1
 8003ade:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003ae2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	3318      	adds	r3, #24
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	4413      	add	r3, r2
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	6811      	ldr	r1, [r2, #0]
 8003af6:	f043 0201 	orr.w	r2, r3, #1
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	3318      	adds	r3, #24
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	440b      	add	r3, r1
 8003b02:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	e00e      	b.n	8003b26 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e006      	b.n	8003b26 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
  }
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3724      	adds	r7, #36	; 0x24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003b32:	b480      	push	{r7}
 8003b34:	b087      	sub	sp, #28
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	607a      	str	r2, [r7, #4]
 8003b3e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b46:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b48:	7dfb      	ldrb	r3, [r7, #23]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d003      	beq.n	8003b56 <HAL_CAN_GetRxMessage+0x24>
 8003b4e:	7dfb      	ldrb	r3, [r7, #23]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	f040 80f3 	bne.w	8003d3c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10e      	bne.n	8003b7a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d116      	bne.n	8003b98 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e0e7      	b.n	8003d4a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d107      	bne.n	8003b98 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e0d8      	b.n	8003d4a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	331b      	adds	r3, #27
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	4413      	add	r3, r2
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0204 	and.w	r2, r3, #4
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	331b      	adds	r3, #27
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	4413      	add	r3, r2
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	0d5b      	lsrs	r3, r3, #21
 8003bc6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	e00b      	b.n	8003be8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	331b      	adds	r3, #27
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	4413      	add	r3, r2
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	08db      	lsrs	r3, r3, #3
 8003be0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	331b      	adds	r3, #27
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	4413      	add	r3, r2
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0202 	and.w	r2, r3, #2
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	331b      	adds	r3, #27
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	4413      	add	r3, r2
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 020f 	and.w	r2, r3, #15
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	331b      	adds	r3, #27
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	4413      	add	r3, r2
 8003c22:	3304      	adds	r3, #4
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	0a1b      	lsrs	r3, r3, #8
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	331b      	adds	r3, #27
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	4413      	add	r3, r2
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	0c1b      	lsrs	r3, r3, #16
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	0a1a      	lsrs	r2, r3, #8
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	3301      	adds	r3, #1
 8003c72:	b2d2      	uxtb	r2, r2
 8003c74:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	0c1a      	lsrs	r2, r3, #16
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	3302      	adds	r3, #2
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	0e1a      	lsrs	r2, r3, #24
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	3303      	adds	r3, #3
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	0a1a      	lsrs	r2, r3, #8
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	3305      	adds	r3, #5
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	0c1a      	lsrs	r2, r3, #16
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	3306      	adds	r3, #6
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	0e1a      	lsrs	r2, r3, #24
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	3307      	adds	r3, #7
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d108      	bne.n	8003d28 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f042 0220 	orr.w	r2, r2, #32
 8003d24:	60da      	str	r2, [r3, #12]
 8003d26:	e007      	b.n	8003d38 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691a      	ldr	r2, [r3, #16]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0220 	orr.w	r2, r2, #32
 8003d36:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e006      	b.n	8003d4a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
  }
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	371c      	adds	r7, #28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b085      	sub	sp, #20
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d66:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d002      	beq.n	8003d74 <HAL_CAN_ActivateNotification+0x1e>
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d109      	bne.n	8003d88 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6959      	ldr	r1, [r3, #20]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	e006      	b.n	8003d96 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
  }
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b08a      	sub	sp, #40	; 0x28
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003daa:	2300      	movs	r3, #0
 8003dac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d07c      	beq.n	8003ee2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d023      	beq.n	8003e3a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2201      	movs	r2, #1
 8003df8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f983 	bl	8004110 <HAL_CAN_TxMailbox0CompleteCallback>
 8003e0a:	e016      	b.n	8003e3a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	f003 0304 	and.w	r3, r3, #4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d004      	beq.n	8003e20 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e1e:	e00c      	b.n	8003e3a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d004      	beq.n	8003e34 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
 8003e32:	e002      	b.n	8003e3a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f989 	bl	800414c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d024      	beq.n	8003e8e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e4c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d003      	beq.n	8003e60 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f963 	bl	8004124 <HAL_CAN_TxMailbox1CompleteCallback>
 8003e5e:	e016      	b.n	8003e8e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d004      	beq.n	8003e74 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
 8003e72:	e00c      	b.n	8003e8e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d004      	beq.n	8003e88 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
 8003e86:	e002      	b.n	8003e8e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f969 	bl	8004160 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d024      	beq.n	8003ee2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ea0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f943 	bl	8004138 <HAL_CAN_TxMailbox2CompleteCallback>
 8003eb2:	e016      	b.n	8003ee2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d004      	beq.n	8003ec8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec6:	e00c      	b.n	8003ee2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d004      	beq.n	8003edc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eda:	e002      	b.n	8003ee2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f949 	bl	8004174 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00c      	beq.n	8003f06 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f003 0310 	and.w	r3, r3, #16
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d007      	beq.n	8003f06 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2210      	movs	r2, #16
 8003f04:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00b      	beq.n	8003f28 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d006      	beq.n	8003f28 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2208      	movs	r2, #8
 8003f20:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f930 	bl	8004188 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d009      	beq.n	8003f46 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f7fe fb5d 	bl	8002600 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00c      	beq.n	8003f6a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f003 0310 	and.w	r3, r3, #16
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d007      	beq.n	8003f6a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2210      	movs	r2, #16
 8003f68:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00b      	beq.n	8003f8c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d006      	beq.n	8003f8c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2208      	movs	r2, #8
 8003f84:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f912 	bl	80041b0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	f003 0310 	and.w	r3, r3, #16
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d009      	beq.n	8003faa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f8f9 	bl	800419c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00b      	beq.n	8003fcc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f003 0310 	and.w	r3, r3, #16
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d006      	beq.n	8003fcc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2210      	movs	r2, #16
 8003fc4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f8fc 	bl	80041c4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00b      	beq.n	8003fee <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d006      	beq.n	8003fee <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2208      	movs	r2, #8
 8003fe6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f8f5 	bl	80041d8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d07b      	beq.n	80040f0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d072      	beq.n	80040e8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	f043 0301 	orr.w	r3, r3, #1
 800401c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	f043 0302 	orr.w	r3, r3, #2
 8004038:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	f043 0304 	orr.w	r3, r3, #4
 8004054:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800405c:	2b00      	cmp	r3, #0
 800405e:	d043      	beq.n	80040e8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004066:	2b00      	cmp	r3, #0
 8004068:	d03e      	beq.n	80040e8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004070:	2b60      	cmp	r3, #96	; 0x60
 8004072:	d02b      	beq.n	80040cc <HAL_CAN_IRQHandler+0x32a>
 8004074:	2b60      	cmp	r3, #96	; 0x60
 8004076:	d82e      	bhi.n	80040d6 <HAL_CAN_IRQHandler+0x334>
 8004078:	2b50      	cmp	r3, #80	; 0x50
 800407a:	d022      	beq.n	80040c2 <HAL_CAN_IRQHandler+0x320>
 800407c:	2b50      	cmp	r3, #80	; 0x50
 800407e:	d82a      	bhi.n	80040d6 <HAL_CAN_IRQHandler+0x334>
 8004080:	2b40      	cmp	r3, #64	; 0x40
 8004082:	d019      	beq.n	80040b8 <HAL_CAN_IRQHandler+0x316>
 8004084:	2b40      	cmp	r3, #64	; 0x40
 8004086:	d826      	bhi.n	80040d6 <HAL_CAN_IRQHandler+0x334>
 8004088:	2b30      	cmp	r3, #48	; 0x30
 800408a:	d010      	beq.n	80040ae <HAL_CAN_IRQHandler+0x30c>
 800408c:	2b30      	cmp	r3, #48	; 0x30
 800408e:	d822      	bhi.n	80040d6 <HAL_CAN_IRQHandler+0x334>
 8004090:	2b10      	cmp	r3, #16
 8004092:	d002      	beq.n	800409a <HAL_CAN_IRQHandler+0x2f8>
 8004094:	2b20      	cmp	r3, #32
 8004096:	d005      	beq.n	80040a4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004098:	e01d      	b.n	80040d6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	f043 0308 	orr.w	r3, r3, #8
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040a2:	e019      	b.n	80040d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	f043 0310 	orr.w	r3, r3, #16
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040ac:	e014      	b.n	80040d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	f043 0320 	orr.w	r3, r3, #32
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040b6:	e00f      	b.n	80040d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040c0:	e00a      	b.n	80040d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040ca:	e005      	b.n	80040d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040d4:	e000      	b.n	80040d8 <HAL_CAN_IRQHandler+0x336>
            break;
 80040d6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699a      	ldr	r2, [r3, #24]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80040e6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2204      	movs	r2, #4
 80040ee:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d008      	beq.n	8004108 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	431a      	orrs	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f872 	bl	80041ec <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004108:	bf00      	nop
 800410a:	3728      	adds	r7, #40	; 0x28
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f003 0307 	and.w	r3, r3, #7
 800420e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004210:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <__NVIC_SetPriorityGrouping+0x44>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800421c:	4013      	ands	r3, r2
 800421e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800422c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004232:	4a04      	ldr	r2, [pc, #16]	; (8004244 <__NVIC_SetPriorityGrouping+0x44>)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	60d3      	str	r3, [r2, #12]
}
 8004238:	bf00      	nop
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	e000ed00 	.word	0xe000ed00

08004248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800424c:	4b04      	ldr	r3, [pc, #16]	; (8004260 <__NVIC_GetPriorityGrouping+0x18>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	0a1b      	lsrs	r3, r3, #8
 8004252:	f003 0307 	and.w	r3, r3, #7
}
 8004256:	4618      	mov	r0, r3
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	e000ed00 	.word	0xe000ed00

08004264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	4603      	mov	r3, r0
 800426c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800426e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004272:	2b00      	cmp	r3, #0
 8004274:	db0b      	blt.n	800428e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004276:	79fb      	ldrb	r3, [r7, #7]
 8004278:	f003 021f 	and.w	r2, r3, #31
 800427c:	4907      	ldr	r1, [pc, #28]	; (800429c <__NVIC_EnableIRQ+0x38>)
 800427e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	2001      	movs	r0, #1
 8004286:	fa00 f202 	lsl.w	r2, r0, r2
 800428a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	e000e100 	.word	0xe000e100

080042a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	6039      	str	r1, [r7, #0]
 80042aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	db0a      	blt.n	80042ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	490c      	ldr	r1, [pc, #48]	; (80042ec <__NVIC_SetPriority+0x4c>)
 80042ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042be:	0112      	lsls	r2, r2, #4
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	440b      	add	r3, r1
 80042c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042c8:	e00a      	b.n	80042e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	4908      	ldr	r1, [pc, #32]	; (80042f0 <__NVIC_SetPriority+0x50>)
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	3b04      	subs	r3, #4
 80042d8:	0112      	lsls	r2, r2, #4
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	440b      	add	r3, r1
 80042de:	761a      	strb	r2, [r3, #24]
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	e000e100 	.word	0xe000e100
 80042f0:	e000ed00 	.word	0xe000ed00

080042f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b089      	sub	sp, #36	; 0x24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f1c3 0307 	rsb	r3, r3, #7
 800430e:	2b04      	cmp	r3, #4
 8004310:	bf28      	it	cs
 8004312:	2304      	movcs	r3, #4
 8004314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	3304      	adds	r3, #4
 800431a:	2b06      	cmp	r3, #6
 800431c:	d902      	bls.n	8004324 <NVIC_EncodePriority+0x30>
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	3b03      	subs	r3, #3
 8004322:	e000      	b.n	8004326 <NVIC_EncodePriority+0x32>
 8004324:	2300      	movs	r3, #0
 8004326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	43da      	mvns	r2, r3
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	401a      	ands	r2, r3
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800433c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	fa01 f303 	lsl.w	r3, r1, r3
 8004346:	43d9      	mvns	r1, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800434c:	4313      	orrs	r3, r2
         );
}
 800434e:	4618      	mov	r0, r3
 8004350:	3724      	adds	r7, #36	; 0x24
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
	...

0800435c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3b01      	subs	r3, #1
 8004368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800436c:	d301      	bcc.n	8004372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800436e:	2301      	movs	r3, #1
 8004370:	e00f      	b.n	8004392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004372:	4a0a      	ldr	r2, [pc, #40]	; (800439c <SysTick_Config+0x40>)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3b01      	subs	r3, #1
 8004378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800437a:	210f      	movs	r1, #15
 800437c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004380:	f7ff ff8e 	bl	80042a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <SysTick_Config+0x40>)
 8004386:	2200      	movs	r2, #0
 8004388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800438a:	4b04      	ldr	r3, [pc, #16]	; (800439c <SysTick_Config+0x40>)
 800438c:	2207      	movs	r2, #7
 800438e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	e000e010 	.word	0xe000e010

080043a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7ff ff29 	bl	8004200 <__NVIC_SetPriorityGrouping>
}
 80043ae:	bf00      	nop
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b086      	sub	sp, #24
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	4603      	mov	r3, r0
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
 80043c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043c8:	f7ff ff3e 	bl	8004248 <__NVIC_GetPriorityGrouping>
 80043cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	68b9      	ldr	r1, [r7, #8]
 80043d2:	6978      	ldr	r0, [r7, #20]
 80043d4:	f7ff ff8e 	bl	80042f4 <NVIC_EncodePriority>
 80043d8:	4602      	mov	r2, r0
 80043da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043de:	4611      	mov	r1, r2
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff ff5d 	bl	80042a0 <__NVIC_SetPriority>
}
 80043e6:	bf00      	nop
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b082      	sub	sp, #8
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	4603      	mov	r3, r0
 80043f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff ff31 	bl	8004264 <__NVIC_EnableIRQ>
}
 8004402:	bf00      	nop
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b082      	sub	sp, #8
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7ff ffa2 	bl	800435c <SysTick_Config>
 8004418:	4603      	mov	r3, r0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
	...

08004424 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b04      	cmp	r3, #4
 8004430:	d106      	bne.n	8004440 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8004432:	4b09      	ldr	r3, [pc, #36]	; (8004458 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a08      	ldr	r2, [pc, #32]	; (8004458 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004438:	f043 0304 	orr.w	r3, r3, #4
 800443c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800443e:	e005      	b.n	800444c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a04      	ldr	r2, [pc, #16]	; (8004458 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004446:	f023 0304 	bic.w	r3, r3, #4
 800444a:	6013      	str	r3, [r2, #0]
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	e000e010 	.word	0xe000e010

0800445c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004468:	f7ff f838 	bl	80034dc <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e099      	b.n	80045ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0201 	bic.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004498:	e00f      	b.n	80044ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800449a:	f7ff f81f 	bl	80034dc <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b05      	cmp	r3, #5
 80044a6:	d908      	bls.n	80044ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2203      	movs	r2, #3
 80044b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e078      	b.n	80045ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e8      	bne.n	800449a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4b38      	ldr	r3, [pc, #224]	; (80045b4 <HAL_DMA_Init+0x158>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	2b04      	cmp	r3, #4
 8004512:	d107      	bne.n	8004524 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451c:	4313      	orrs	r3, r2
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	4313      	orrs	r3, r2
 8004522:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f023 0307 	bic.w	r3, r3, #7
 800453a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	4313      	orrs	r3, r2
 8004544:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	2b04      	cmp	r3, #4
 800454c:	d117      	bne.n	800457e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	4313      	orrs	r3, r2
 8004556:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00e      	beq.n	800457e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 fa91 	bl	8004a88 <DMA_CheckFifoParam>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d008      	beq.n	800457e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2240      	movs	r2, #64	; 0x40
 8004570:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800457a:	2301      	movs	r3, #1
 800457c:	e016      	b.n	80045ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fa48 	bl	8004a1c <DMA_CalcBaseAndBitshift>
 800458c:	4603      	mov	r3, r0
 800458e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004594:	223f      	movs	r2, #63	; 0x3f
 8004596:	409a      	lsls	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3718      	adds	r7, #24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	f010803f 	.word	0xf010803f

080045b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
 80045c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <HAL_DMA_Start_IT+0x26>
 80045da:	2302      	movs	r3, #2
 80045dc:	e040      	b.n	8004660 <HAL_DMA_Start_IT+0xa8>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d12f      	bne.n	8004652 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2202      	movs	r2, #2
 80045f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	68b9      	ldr	r1, [r7, #8]
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f9da 	bl	80049c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004610:	223f      	movs	r2, #63	; 0x3f
 8004612:	409a      	lsls	r2, r3
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0216 	orr.w	r2, r2, #22
 8004626:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	2b00      	cmp	r3, #0
 800462e:	d007      	beq.n	8004640 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0208 	orr.w	r2, r2, #8
 800463e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	e005      	b.n	800465e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800465a:	2302      	movs	r3, #2
 800465c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800465e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d004      	beq.n	8004686 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2280      	movs	r2, #128	; 0x80
 8004680:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e00c      	b.n	80046a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2205      	movs	r2, #5
 800468a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0201 	bic.w	r2, r2, #1
 800469c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046b8:	4b92      	ldr	r3, [pc, #584]	; (8004904 <HAL_DMA_IRQHandler+0x258>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a92      	ldr	r2, [pc, #584]	; (8004908 <HAL_DMA_IRQHandler+0x25c>)
 80046be:	fba2 2303 	umull	r2, r3, r2, r3
 80046c2:	0a9b      	lsrs	r3, r3, #10
 80046c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d6:	2208      	movs	r2, #8
 80046d8:	409a      	lsls	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4013      	ands	r3, r2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d01a      	beq.n	8004718 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d013      	beq.n	8004718 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0204 	bic.w	r2, r2, #4
 80046fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004704:	2208      	movs	r2, #8
 8004706:	409a      	lsls	r2, r3
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004710:	f043 0201 	orr.w	r2, r3, #1
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800471c:	2201      	movs	r2, #1
 800471e:	409a      	lsls	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4013      	ands	r3, r2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d012      	beq.n	800474e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00b      	beq.n	800474e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800473a:	2201      	movs	r2, #1
 800473c:	409a      	lsls	r2, r3
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004746:	f043 0202 	orr.w	r2, r3, #2
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004752:	2204      	movs	r2, #4
 8004754:	409a      	lsls	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4013      	ands	r3, r2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d012      	beq.n	8004784 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00b      	beq.n	8004784 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004770:	2204      	movs	r2, #4
 8004772:	409a      	lsls	r2, r3
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477c:	f043 0204 	orr.w	r2, r3, #4
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004788:	2210      	movs	r2, #16
 800478a:	409a      	lsls	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4013      	ands	r3, r2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d043      	beq.n	800481c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d03c      	beq.n	800481c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a6:	2210      	movs	r2, #16
 80047a8:	409a      	lsls	r2, r3
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d018      	beq.n	80047ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d108      	bne.n	80047dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d024      	beq.n	800481c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	4798      	blx	r3
 80047da:	e01f      	b.n	800481c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01b      	beq.n	800481c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	4798      	blx	r3
 80047ec:	e016      	b.n	800481c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d107      	bne.n	800480c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0208 	bic.w	r2, r2, #8
 800480a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004820:	2220      	movs	r2, #32
 8004822:	409a      	lsls	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4013      	ands	r3, r2
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 808e 	beq.w	800494a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0310 	and.w	r3, r3, #16
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 8086 	beq.w	800494a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004842:	2220      	movs	r2, #32
 8004844:	409a      	lsls	r2, r3
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b05      	cmp	r3, #5
 8004854:	d136      	bne.n	80048c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0216 	bic.w	r2, r2, #22
 8004864:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695a      	ldr	r2, [r3, #20]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004874:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	d103      	bne.n	8004886 <HAL_DMA_IRQHandler+0x1da>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004882:	2b00      	cmp	r3, #0
 8004884:	d007      	beq.n	8004896 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0208 	bic.w	r2, r2, #8
 8004894:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800489a:	223f      	movs	r2, #63	; 0x3f
 800489c:	409a      	lsls	r2, r3
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d07d      	beq.n	80049b6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	4798      	blx	r3
        }
        return;
 80048c2:	e078      	b.n	80049b6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d01c      	beq.n	800490c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d108      	bne.n	80048f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d030      	beq.n	800494a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	4798      	blx	r3
 80048f0:	e02b      	b.n	800494a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d027      	beq.n	800494a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	4798      	blx	r3
 8004902:	e022      	b.n	800494a <HAL_DMA_IRQHandler+0x29e>
 8004904:	20000120 	.word	0x20000120
 8004908:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10f      	bne.n	800493a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0210 	bic.w	r2, r2, #16
 8004928:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494e:	2b00      	cmp	r3, #0
 8004950:	d032      	beq.n	80049b8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d022      	beq.n	80049a4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2205      	movs	r2, #5
 8004962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0201 	bic.w	r2, r2, #1
 8004974:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	3301      	adds	r3, #1
 800497a:	60bb      	str	r3, [r7, #8]
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	429a      	cmp	r2, r3
 8004980:	d307      	bcc.n	8004992 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1f2      	bne.n	8004976 <HAL_DMA_IRQHandler+0x2ca>
 8004990:	e000      	b.n	8004994 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004992:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	4798      	blx	r3
 80049b4:	e000      	b.n	80049b8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80049b6:	bf00      	nop
    }
  }
}
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop

080049c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	2b40      	cmp	r3, #64	; 0x40
 80049ec:	d108      	bne.n	8004a00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80049fe:	e007      	b.n	8004a10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	60da      	str	r2, [r3, #12]
}
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	3b10      	subs	r3, #16
 8004a2c:	4a14      	ldr	r2, [pc, #80]	; (8004a80 <DMA_CalcBaseAndBitshift+0x64>)
 8004a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a32:	091b      	lsrs	r3, r3, #4
 8004a34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a36:	4a13      	ldr	r2, [pc, #76]	; (8004a84 <DMA_CalcBaseAndBitshift+0x68>)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d909      	bls.n	8004a5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a52:	f023 0303 	bic.w	r3, r3, #3
 8004a56:	1d1a      	adds	r2, r3, #4
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	659a      	str	r2, [r3, #88]	; 0x58
 8004a5c:	e007      	b.n	8004a6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a66:	f023 0303 	bic.w	r3, r3, #3
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	aaaaaaab 	.word	0xaaaaaaab
 8004a84:	08008a04 	.word	0x08008a04

08004a88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d11f      	bne.n	8004ae2 <DMA_CheckFifoParam+0x5a>
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d856      	bhi.n	8004b56 <DMA_CheckFifoParam+0xce>
 8004aa8:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <DMA_CheckFifoParam+0x28>)
 8004aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aae:	bf00      	nop
 8004ab0:	08004ac1 	.word	0x08004ac1
 8004ab4:	08004ad3 	.word	0x08004ad3
 8004ab8:	08004ac1 	.word	0x08004ac1
 8004abc:	08004b57 	.word	0x08004b57
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d046      	beq.n	8004b5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ad0:	e043      	b.n	8004b5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ada:	d140      	bne.n	8004b5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ae0:	e03d      	b.n	8004b5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aea:	d121      	bne.n	8004b30 <DMA_CheckFifoParam+0xa8>
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2b03      	cmp	r3, #3
 8004af0:	d837      	bhi.n	8004b62 <DMA_CheckFifoParam+0xda>
 8004af2:	a201      	add	r2, pc, #4	; (adr r2, 8004af8 <DMA_CheckFifoParam+0x70>)
 8004af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af8:	08004b09 	.word	0x08004b09
 8004afc:	08004b0f 	.word	0x08004b0f
 8004b00:	08004b09 	.word	0x08004b09
 8004b04:	08004b21 	.word	0x08004b21
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b0c:	e030      	b.n	8004b70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d025      	beq.n	8004b66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b1e:	e022      	b.n	8004b66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b28:	d11f      	bne.n	8004b6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b2e:	e01c      	b.n	8004b6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d903      	bls.n	8004b3e <DMA_CheckFifoParam+0xb6>
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	d003      	beq.n	8004b44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b3c:	e018      	b.n	8004b70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	73fb      	strb	r3, [r7, #15]
      break;
 8004b42:	e015      	b.n	8004b70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00e      	beq.n	8004b6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	73fb      	strb	r3, [r7, #15]
      break;
 8004b54:	e00b      	b.n	8004b6e <DMA_CheckFifoParam+0xe6>
      break;
 8004b56:	bf00      	nop
 8004b58:	e00a      	b.n	8004b70 <DMA_CheckFifoParam+0xe8>
      break;
 8004b5a:	bf00      	nop
 8004b5c:	e008      	b.n	8004b70 <DMA_CheckFifoParam+0xe8>
      break;
 8004b5e:	bf00      	nop
 8004b60:	e006      	b.n	8004b70 <DMA_CheckFifoParam+0xe8>
      break;
 8004b62:	bf00      	nop
 8004b64:	e004      	b.n	8004b70 <DMA_CheckFifoParam+0xe8>
      break;
 8004b66:	bf00      	nop
 8004b68:	e002      	b.n	8004b70 <DMA_CheckFifoParam+0xe8>
      break;   
 8004b6a:	bf00      	nop
 8004b6c:	e000      	b.n	8004b70 <DMA_CheckFifoParam+0xe8>
      break;
 8004b6e:	bf00      	nop
    }
  } 
  
  return status; 
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop

08004b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b089      	sub	sp, #36	; 0x24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b96:	2300      	movs	r3, #0
 8004b98:	61fb      	str	r3, [r7, #28]
 8004b9a:	e177      	b.n	8004e8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4013      	ands	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	f040 8166 	bne.w	8004e86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d00b      	beq.n	8004bda <HAL_GPIO_Init+0x5a>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d007      	beq.n	8004bda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004bce:	2b11      	cmp	r3, #17
 8004bd0:	d003      	beq.n	8004bda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b12      	cmp	r3, #18
 8004bd8:	d130      	bne.n	8004c3c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	2203      	movs	r2, #3
 8004be6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bea:	43db      	mvns	r3, r3
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c10:	2201      	movs	r2, #1
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	fa02 f303 	lsl.w	r3, r2, r3
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	091b      	lsrs	r3, r3, #4
 8004c26:	f003 0201 	and.w	r2, r3, #1
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	2203      	movs	r2, #3
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	43db      	mvns	r3, r3
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	4013      	ands	r3, r2
 8004c52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	689a      	ldr	r2, [r3, #8]
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d003      	beq.n	8004c7c <HAL_GPIO_Init+0xfc>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2b12      	cmp	r3, #18
 8004c7a:	d123      	bne.n	8004cc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	08da      	lsrs	r2, r3, #3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3208      	adds	r2, #8
 8004c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	220f      	movs	r2, #15
 8004c94:	fa02 f303 	lsl.w	r3, r2, r3
 8004c98:	43db      	mvns	r3, r3
 8004c9a:	69ba      	ldr	r2, [r7, #24]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	08da      	lsrs	r2, r3, #3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	3208      	adds	r2, #8
 8004cbe:	69b9      	ldr	r1, [r7, #24]
 8004cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	2203      	movs	r2, #3
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	43db      	mvns	r3, r3
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f003 0203 	and.w	r2, r3, #3
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	69ba      	ldr	r2, [r7, #24]
 8004cf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 80c0 	beq.w	8004e86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	4b66      	ldr	r3, [pc, #408]	; (8004ea4 <HAL_GPIO_Init+0x324>)
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0e:	4a65      	ldr	r2, [pc, #404]	; (8004ea4 <HAL_GPIO_Init+0x324>)
 8004d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d14:	6453      	str	r3, [r2, #68]	; 0x44
 8004d16:	4b63      	ldr	r3, [pc, #396]	; (8004ea4 <HAL_GPIO_Init+0x324>)
 8004d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d22:	4a61      	ldr	r2, [pc, #388]	; (8004ea8 <HAL_GPIO_Init+0x328>)
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	089b      	lsrs	r3, r3, #2
 8004d28:	3302      	adds	r3, #2
 8004d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	220f      	movs	r2, #15
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	43db      	mvns	r3, r3
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	4013      	ands	r3, r2
 8004d44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a58      	ldr	r2, [pc, #352]	; (8004eac <HAL_GPIO_Init+0x32c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d037      	beq.n	8004dbe <HAL_GPIO_Init+0x23e>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a57      	ldr	r2, [pc, #348]	; (8004eb0 <HAL_GPIO_Init+0x330>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d031      	beq.n	8004dba <HAL_GPIO_Init+0x23a>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a56      	ldr	r2, [pc, #344]	; (8004eb4 <HAL_GPIO_Init+0x334>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d02b      	beq.n	8004db6 <HAL_GPIO_Init+0x236>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a55      	ldr	r2, [pc, #340]	; (8004eb8 <HAL_GPIO_Init+0x338>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d025      	beq.n	8004db2 <HAL_GPIO_Init+0x232>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a54      	ldr	r2, [pc, #336]	; (8004ebc <HAL_GPIO_Init+0x33c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d01f      	beq.n	8004dae <HAL_GPIO_Init+0x22e>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a53      	ldr	r2, [pc, #332]	; (8004ec0 <HAL_GPIO_Init+0x340>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d019      	beq.n	8004daa <HAL_GPIO_Init+0x22a>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a52      	ldr	r2, [pc, #328]	; (8004ec4 <HAL_GPIO_Init+0x344>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d013      	beq.n	8004da6 <HAL_GPIO_Init+0x226>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a51      	ldr	r2, [pc, #324]	; (8004ec8 <HAL_GPIO_Init+0x348>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00d      	beq.n	8004da2 <HAL_GPIO_Init+0x222>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a50      	ldr	r2, [pc, #320]	; (8004ecc <HAL_GPIO_Init+0x34c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d007      	beq.n	8004d9e <HAL_GPIO_Init+0x21e>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a4f      	ldr	r2, [pc, #316]	; (8004ed0 <HAL_GPIO_Init+0x350>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d101      	bne.n	8004d9a <HAL_GPIO_Init+0x21a>
 8004d96:	2309      	movs	r3, #9
 8004d98:	e012      	b.n	8004dc0 <HAL_GPIO_Init+0x240>
 8004d9a:	230a      	movs	r3, #10
 8004d9c:	e010      	b.n	8004dc0 <HAL_GPIO_Init+0x240>
 8004d9e:	2308      	movs	r3, #8
 8004da0:	e00e      	b.n	8004dc0 <HAL_GPIO_Init+0x240>
 8004da2:	2307      	movs	r3, #7
 8004da4:	e00c      	b.n	8004dc0 <HAL_GPIO_Init+0x240>
 8004da6:	2306      	movs	r3, #6
 8004da8:	e00a      	b.n	8004dc0 <HAL_GPIO_Init+0x240>
 8004daa:	2305      	movs	r3, #5
 8004dac:	e008      	b.n	8004dc0 <HAL_GPIO_Init+0x240>
 8004dae:	2304      	movs	r3, #4
 8004db0:	e006      	b.n	8004dc0 <HAL_GPIO_Init+0x240>
 8004db2:	2303      	movs	r3, #3
 8004db4:	e004      	b.n	8004dc0 <HAL_GPIO_Init+0x240>
 8004db6:	2302      	movs	r3, #2
 8004db8:	e002      	b.n	8004dc0 <HAL_GPIO_Init+0x240>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e000      	b.n	8004dc0 <HAL_GPIO_Init+0x240>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	69fa      	ldr	r2, [r7, #28]
 8004dc2:	f002 0203 	and.w	r2, r2, #3
 8004dc6:	0092      	lsls	r2, r2, #2
 8004dc8:	4093      	lsls	r3, r2
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dd0:	4935      	ldr	r1, [pc, #212]	; (8004ea8 <HAL_GPIO_Init+0x328>)
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	089b      	lsrs	r3, r3, #2
 8004dd6:	3302      	adds	r3, #2
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dde:	4b3d      	ldr	r3, [pc, #244]	; (8004ed4 <HAL_GPIO_Init+0x354>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	43db      	mvns	r3, r3
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	4013      	ands	r3, r2
 8004dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e02:	4a34      	ldr	r2, [pc, #208]	; (8004ed4 <HAL_GPIO_Init+0x354>)
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004e08:	4b32      	ldr	r3, [pc, #200]	; (8004ed4 <HAL_GPIO_Init+0x354>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	43db      	mvns	r3, r3
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	4013      	ands	r3, r2
 8004e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e2c:	4a29      	ldr	r2, [pc, #164]	; (8004ed4 <HAL_GPIO_Init+0x354>)
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e32:	4b28      	ldr	r3, [pc, #160]	; (8004ed4 <HAL_GPIO_Init+0x354>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e56:	4a1f      	ldr	r2, [pc, #124]	; (8004ed4 <HAL_GPIO_Init+0x354>)
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e5c:	4b1d      	ldr	r3, [pc, #116]	; (8004ed4 <HAL_GPIO_Init+0x354>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	43db      	mvns	r3, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e80:	4a14      	ldr	r2, [pc, #80]	; (8004ed4 <HAL_GPIO_Init+0x354>)
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	61fb      	str	r3, [r7, #28]
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	2b0f      	cmp	r3, #15
 8004e90:	f67f ae84 	bls.w	8004b9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e94:	bf00      	nop
 8004e96:	bf00      	nop
 8004e98:	3724      	adds	r7, #36	; 0x24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	40013800 	.word	0x40013800
 8004eac:	40020000 	.word	0x40020000
 8004eb0:	40020400 	.word	0x40020400
 8004eb4:	40020800 	.word	0x40020800
 8004eb8:	40020c00 	.word	0x40020c00
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	40021400 	.word	0x40021400
 8004ec4:	40021800 	.word	0x40021800
 8004ec8:	40021c00 	.word	0x40021c00
 8004ecc:	40022000 	.word	0x40022000
 8004ed0:	40022400 	.word	0x40022400
 8004ed4:	40013c00 	.word	0x40013c00

08004ed8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	887b      	ldrh	r3, [r7, #2]
 8004eea:	4013      	ands	r3, r2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	73fb      	strb	r3, [r7, #15]
 8004ef4:	e001      	b.n	8004efa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	460b      	mov	r3, r1
 8004f12:	807b      	strh	r3, [r7, #2]
 8004f14:	4613      	mov	r3, r2
 8004f16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f18:	787b      	ldrb	r3, [r7, #1]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f1e:	887a      	ldrh	r2, [r7, #2]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f24:	e003      	b.n	8004f2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f26:	887b      	ldrh	r3, [r7, #2]
 8004f28:	041a      	lsls	r2, r3, #16
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	619a      	str	r2, [r3, #24]
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
	...

08004f3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	4603      	mov	r3, r0
 8004f44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004f46:	4b08      	ldr	r3, [pc, #32]	; (8004f68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f48:	695a      	ldr	r2, [r3, #20]
 8004f4a:	88fb      	ldrh	r3, [r7, #6]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d006      	beq.n	8004f60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f52:	4a05      	ldr	r2, [pc, #20]	; (8004f68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f54:	88fb      	ldrh	r3, [r7, #6]
 8004f56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f58:	88fb      	ldrh	r3, [r7, #6]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fd fa90 	bl	8002480 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f60:	bf00      	nop
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40013c00 	.word	0x40013c00

08004f6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e12b      	b.n	80051d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fc ff86 	bl	8001ea4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2224      	movs	r2, #36	; 0x24
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0201 	bic.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004fd0:	f000 fe1e 	bl	8005c10 <HAL_RCC_GetPCLK1Freq>
 8004fd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	4a81      	ldr	r2, [pc, #516]	; (80051e0 <HAL_I2C_Init+0x274>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d807      	bhi.n	8004ff0 <HAL_I2C_Init+0x84>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4a80      	ldr	r2, [pc, #512]	; (80051e4 <HAL_I2C_Init+0x278>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	bf94      	ite	ls
 8004fe8:	2301      	movls	r3, #1
 8004fea:	2300      	movhi	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	e006      	b.n	8004ffe <HAL_I2C_Init+0x92>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4a7d      	ldr	r2, [pc, #500]	; (80051e8 <HAL_I2C_Init+0x27c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	bf94      	ite	ls
 8004ff8:	2301      	movls	r3, #1
 8004ffa:	2300      	movhi	r3, #0
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e0e7      	b.n	80051d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4a78      	ldr	r2, [pc, #480]	; (80051ec <HAL_I2C_Init+0x280>)
 800500a:	fba2 2303 	umull	r2, r3, r2, r3
 800500e:	0c9b      	lsrs	r3, r3, #18
 8005010:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	430a      	orrs	r2, r1
 8005024:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	4a6a      	ldr	r2, [pc, #424]	; (80051e0 <HAL_I2C_Init+0x274>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d802      	bhi.n	8005040 <HAL_I2C_Init+0xd4>
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	3301      	adds	r3, #1
 800503e:	e009      	b.n	8005054 <HAL_I2C_Init+0xe8>
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005046:	fb02 f303 	mul.w	r3, r2, r3
 800504a:	4a69      	ldr	r2, [pc, #420]	; (80051f0 <HAL_I2C_Init+0x284>)
 800504c:	fba2 2303 	umull	r2, r3, r2, r3
 8005050:	099b      	lsrs	r3, r3, #6
 8005052:	3301      	adds	r3, #1
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6812      	ldr	r2, [r2, #0]
 8005058:	430b      	orrs	r3, r1
 800505a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005066:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	495c      	ldr	r1, [pc, #368]	; (80051e0 <HAL_I2C_Init+0x274>)
 8005070:	428b      	cmp	r3, r1
 8005072:	d819      	bhi.n	80050a8 <HAL_I2C_Init+0x13c>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	1e59      	subs	r1, r3, #1
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005082:	1c59      	adds	r1, r3, #1
 8005084:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005088:	400b      	ands	r3, r1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <HAL_I2C_Init+0x138>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	1e59      	subs	r1, r3, #1
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	fbb1 f3f3 	udiv	r3, r1, r3
 800509c:	3301      	adds	r3, #1
 800509e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050a2:	e051      	b.n	8005148 <HAL_I2C_Init+0x1dc>
 80050a4:	2304      	movs	r3, #4
 80050a6:	e04f      	b.n	8005148 <HAL_I2C_Init+0x1dc>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d111      	bne.n	80050d4 <HAL_I2C_Init+0x168>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	1e58      	subs	r0, r3, #1
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6859      	ldr	r1, [r3, #4]
 80050b8:	460b      	mov	r3, r1
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	440b      	add	r3, r1
 80050be:	fbb0 f3f3 	udiv	r3, r0, r3
 80050c2:	3301      	adds	r3, #1
 80050c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	bf0c      	ite	eq
 80050cc:	2301      	moveq	r3, #1
 80050ce:	2300      	movne	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	e012      	b.n	80050fa <HAL_I2C_Init+0x18e>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	1e58      	subs	r0, r3, #1
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6859      	ldr	r1, [r3, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	440b      	add	r3, r1
 80050e2:	0099      	lsls	r1, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80050ea:	3301      	adds	r3, #1
 80050ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	bf0c      	ite	eq
 80050f4:	2301      	moveq	r3, #1
 80050f6:	2300      	movne	r3, #0
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <HAL_I2C_Init+0x196>
 80050fe:	2301      	movs	r3, #1
 8005100:	e022      	b.n	8005148 <HAL_I2C_Init+0x1dc>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10e      	bne.n	8005128 <HAL_I2C_Init+0x1bc>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	1e58      	subs	r0, r3, #1
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6859      	ldr	r1, [r3, #4]
 8005112:	460b      	mov	r3, r1
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	440b      	add	r3, r1
 8005118:	fbb0 f3f3 	udiv	r3, r0, r3
 800511c:	3301      	adds	r3, #1
 800511e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005126:	e00f      	b.n	8005148 <HAL_I2C_Init+0x1dc>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	1e58      	subs	r0, r3, #1
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6859      	ldr	r1, [r3, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	440b      	add	r3, r1
 8005136:	0099      	lsls	r1, r3, #2
 8005138:	440b      	add	r3, r1
 800513a:	fbb0 f3f3 	udiv	r3, r0, r3
 800513e:	3301      	adds	r3, #1
 8005140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005144:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005148:	6879      	ldr	r1, [r7, #4]
 800514a:	6809      	ldr	r1, [r1, #0]
 800514c:	4313      	orrs	r3, r2
 800514e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69da      	ldr	r2, [r3, #28]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005176:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6911      	ldr	r1, [r2, #16]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	68d2      	ldr	r2, [r2, #12]
 8005182:	4311      	orrs	r1, r2
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6812      	ldr	r2, [r2, #0]
 8005188:	430b      	orrs	r3, r1
 800518a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	695a      	ldr	r2, [r3, #20]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	699b      	ldr	r3, [r3, #24]
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	000186a0 	.word	0x000186a0
 80051e4:	001e847f 	.word	0x001e847f
 80051e8:	003d08ff 	.word	0x003d08ff
 80051ec:	431bde83 	.word	0x431bde83
 80051f0:	10624dd3 	.word	0x10624dd3

080051f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b20      	cmp	r3, #32
 8005208:	d129      	bne.n	800525e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2224      	movs	r2, #36	; 0x24
 800520e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0201 	bic.w	r2, r2, #1
 8005220:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0210 	bic.w	r2, r2, #16
 8005230:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f042 0201 	orr.w	r2, r2, #1
 8005250:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2220      	movs	r2, #32
 8005256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	e000      	b.n	8005260 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800525e:	2302      	movs	r3, #2
  }
}
 8005260:	4618      	mov	r0, r3
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b20      	cmp	r3, #32
 8005284:	d12a      	bne.n	80052dc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2224      	movs	r2, #36	; 0x24
 800528a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0201 	bic.w	r2, r2, #1
 800529c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80052a6:	89fb      	ldrh	r3, [r7, #14]
 80052a8:	f023 030f 	bic.w	r3, r3, #15
 80052ac:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	89fb      	ldrh	r3, [r7, #14]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	89fa      	ldrh	r2, [r7, #14]
 80052be:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0201 	orr.w	r2, r2, #1
 80052ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	e000      	b.n	80052de <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80052dc:	2302      	movs	r3, #2
  }
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
	...

080052ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80052f6:	2300      	movs	r3, #0
 80052f8:	603b      	str	r3, [r7, #0]
 80052fa:	4b20      	ldr	r3, [pc, #128]	; (800537c <HAL_PWREx_EnableOverDrive+0x90>)
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	4a1f      	ldr	r2, [pc, #124]	; (800537c <HAL_PWREx_EnableOverDrive+0x90>)
 8005300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005304:	6413      	str	r3, [r2, #64]	; 0x40
 8005306:	4b1d      	ldr	r3, [pc, #116]	; (800537c <HAL_PWREx_EnableOverDrive+0x90>)
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800530e:	603b      	str	r3, [r7, #0]
 8005310:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005312:	4b1b      	ldr	r3, [pc, #108]	; (8005380 <HAL_PWREx_EnableOverDrive+0x94>)
 8005314:	2201      	movs	r2, #1
 8005316:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005318:	f7fe f8e0 	bl	80034dc <HAL_GetTick>
 800531c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800531e:	e009      	b.n	8005334 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005320:	f7fe f8dc 	bl	80034dc <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800532e:	d901      	bls.n	8005334 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e01f      	b.n	8005374 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005334:	4b13      	ldr	r3, [pc, #76]	; (8005384 <HAL_PWREx_EnableOverDrive+0x98>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800533c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005340:	d1ee      	bne.n	8005320 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005342:	4b11      	ldr	r3, [pc, #68]	; (8005388 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005344:	2201      	movs	r2, #1
 8005346:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005348:	f7fe f8c8 	bl	80034dc <HAL_GetTick>
 800534c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800534e:	e009      	b.n	8005364 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005350:	f7fe f8c4 	bl	80034dc <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800535e:	d901      	bls.n	8005364 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e007      	b.n	8005374 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005364:	4b07      	ldr	r3, [pc, #28]	; (8005384 <HAL_PWREx_EnableOverDrive+0x98>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005370:	d1ee      	bne.n	8005350 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	40023800 	.word	0x40023800
 8005380:	420e0040 	.word	0x420e0040
 8005384:	40007000 	.word	0x40007000
 8005388:	420e0044 	.word	0x420e0044

0800538c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e25b      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d075      	beq.n	8005496 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053aa:	4ba3      	ldr	r3, [pc, #652]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 030c 	and.w	r3, r3, #12
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d00c      	beq.n	80053d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053b6:	4ba0      	ldr	r3, [pc, #640]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053be:	2b08      	cmp	r3, #8
 80053c0:	d112      	bne.n	80053e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053c2:	4b9d      	ldr	r3, [pc, #628]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053ce:	d10b      	bne.n	80053e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d0:	4b99      	ldr	r3, [pc, #612]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d05b      	beq.n	8005494 <HAL_RCC_OscConfig+0x108>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d157      	bne.n	8005494 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e236      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053f0:	d106      	bne.n	8005400 <HAL_RCC_OscConfig+0x74>
 80053f2:	4b91      	ldr	r3, [pc, #580]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a90      	ldr	r2, [pc, #576]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80053f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	e01d      	b.n	800543c <HAL_RCC_OscConfig+0xb0>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005408:	d10c      	bne.n	8005424 <HAL_RCC_OscConfig+0x98>
 800540a:	4b8b      	ldr	r3, [pc, #556]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a8a      	ldr	r2, [pc, #552]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	4b88      	ldr	r3, [pc, #544]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a87      	ldr	r2, [pc, #540]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 800541c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	e00b      	b.n	800543c <HAL_RCC_OscConfig+0xb0>
 8005424:	4b84      	ldr	r3, [pc, #528]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a83      	ldr	r2, [pc, #524]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 800542a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800542e:	6013      	str	r3, [r2, #0]
 8005430:	4b81      	ldr	r3, [pc, #516]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a80      	ldr	r2, [pc, #512]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800543a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d013      	beq.n	800546c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005444:	f7fe f84a 	bl	80034dc <HAL_GetTick>
 8005448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800544a:	e008      	b.n	800545e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800544c:	f7fe f846 	bl	80034dc <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b64      	cmp	r3, #100	; 0x64
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e1fb      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800545e:	4b76      	ldr	r3, [pc, #472]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d0f0      	beq.n	800544c <HAL_RCC_OscConfig+0xc0>
 800546a:	e014      	b.n	8005496 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800546c:	f7fe f836 	bl	80034dc <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005474:	f7fe f832 	bl	80034dc <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b64      	cmp	r3, #100	; 0x64
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e1e7      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005486:	4b6c      	ldr	r3, [pc, #432]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1f0      	bne.n	8005474 <HAL_RCC_OscConfig+0xe8>
 8005492:	e000      	b.n	8005496 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d063      	beq.n	800556a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054a2:	4b65      	ldr	r3, [pc, #404]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 030c 	and.w	r3, r3, #12
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00b      	beq.n	80054c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ae:	4b62      	ldr	r3, [pc, #392]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054b6:	2b08      	cmp	r3, #8
 80054b8:	d11c      	bne.n	80054f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ba:	4b5f      	ldr	r3, [pc, #380]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d116      	bne.n	80054f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054c6:	4b5c      	ldr	r3, [pc, #368]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d005      	beq.n	80054de <HAL_RCC_OscConfig+0x152>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d001      	beq.n	80054de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e1bb      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054de:	4b56      	ldr	r3, [pc, #344]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	4952      	ldr	r1, [pc, #328]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054f2:	e03a      	b.n	800556a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d020      	beq.n	800553e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054fc:	4b4f      	ldr	r3, [pc, #316]	; (800563c <HAL_RCC_OscConfig+0x2b0>)
 80054fe:	2201      	movs	r2, #1
 8005500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005502:	f7fd ffeb 	bl	80034dc <HAL_GetTick>
 8005506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005508:	e008      	b.n	800551c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800550a:	f7fd ffe7 	bl	80034dc <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e19c      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800551c:	4b46      	ldr	r3, [pc, #280]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0f0      	beq.n	800550a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005528:	4b43      	ldr	r3, [pc, #268]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	00db      	lsls	r3, r3, #3
 8005536:	4940      	ldr	r1, [pc, #256]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005538:	4313      	orrs	r3, r2
 800553a:	600b      	str	r3, [r1, #0]
 800553c:	e015      	b.n	800556a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800553e:	4b3f      	ldr	r3, [pc, #252]	; (800563c <HAL_RCC_OscConfig+0x2b0>)
 8005540:	2200      	movs	r2, #0
 8005542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005544:	f7fd ffca 	bl	80034dc <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800554c:	f7fd ffc6 	bl	80034dc <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e17b      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800555e:	4b36      	ldr	r3, [pc, #216]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1f0      	bne.n	800554c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0308 	and.w	r3, r3, #8
 8005572:	2b00      	cmp	r3, #0
 8005574:	d030      	beq.n	80055d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d016      	beq.n	80055ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800557e:	4b30      	ldr	r3, [pc, #192]	; (8005640 <HAL_RCC_OscConfig+0x2b4>)
 8005580:	2201      	movs	r2, #1
 8005582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005584:	f7fd ffaa 	bl	80034dc <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800558c:	f7fd ffa6 	bl	80034dc <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e15b      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800559e:	4b26      	ldr	r3, [pc, #152]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80055a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0f0      	beq.n	800558c <HAL_RCC_OscConfig+0x200>
 80055aa:	e015      	b.n	80055d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055ac:	4b24      	ldr	r3, [pc, #144]	; (8005640 <HAL_RCC_OscConfig+0x2b4>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055b2:	f7fd ff93 	bl	80034dc <HAL_GetTick>
 80055b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055ba:	f7fd ff8f 	bl	80034dc <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e144      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055cc:	4b1a      	ldr	r3, [pc, #104]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80055ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1f0      	bne.n	80055ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 80a0 	beq.w	8005726 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055e6:	2300      	movs	r3, #0
 80055e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ea:	4b13      	ldr	r3, [pc, #76]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10f      	bne.n	8005616 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055f6:	2300      	movs	r3, #0
 80055f8:	60bb      	str	r3, [r7, #8]
 80055fa:	4b0f      	ldr	r3, [pc, #60]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	4a0e      	ldr	r2, [pc, #56]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005604:	6413      	str	r3, [r2, #64]	; 0x40
 8005606:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <HAL_RCC_OscConfig+0x2ac>)
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800560e:	60bb      	str	r3, [r7, #8]
 8005610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005612:	2301      	movs	r3, #1
 8005614:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005616:	4b0b      	ldr	r3, [pc, #44]	; (8005644 <HAL_RCC_OscConfig+0x2b8>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561e:	2b00      	cmp	r3, #0
 8005620:	d121      	bne.n	8005666 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005622:	4b08      	ldr	r3, [pc, #32]	; (8005644 <HAL_RCC_OscConfig+0x2b8>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a07      	ldr	r2, [pc, #28]	; (8005644 <HAL_RCC_OscConfig+0x2b8>)
 8005628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800562c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800562e:	f7fd ff55 	bl	80034dc <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005634:	e011      	b.n	800565a <HAL_RCC_OscConfig+0x2ce>
 8005636:	bf00      	nop
 8005638:	40023800 	.word	0x40023800
 800563c:	42470000 	.word	0x42470000
 8005640:	42470e80 	.word	0x42470e80
 8005644:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005648:	f7fd ff48 	bl	80034dc <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e0fd      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800565a:	4b81      	ldr	r3, [pc, #516]	; (8005860 <HAL_RCC_OscConfig+0x4d4>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005662:	2b00      	cmp	r3, #0
 8005664:	d0f0      	beq.n	8005648 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d106      	bne.n	800567c <HAL_RCC_OscConfig+0x2f0>
 800566e:	4b7d      	ldr	r3, [pc, #500]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 8005670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005672:	4a7c      	ldr	r2, [pc, #496]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 8005674:	f043 0301 	orr.w	r3, r3, #1
 8005678:	6713      	str	r3, [r2, #112]	; 0x70
 800567a:	e01c      	b.n	80056b6 <HAL_RCC_OscConfig+0x32a>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b05      	cmp	r3, #5
 8005682:	d10c      	bne.n	800569e <HAL_RCC_OscConfig+0x312>
 8005684:	4b77      	ldr	r3, [pc, #476]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 8005686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005688:	4a76      	ldr	r2, [pc, #472]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 800568a:	f043 0304 	orr.w	r3, r3, #4
 800568e:	6713      	str	r3, [r2, #112]	; 0x70
 8005690:	4b74      	ldr	r3, [pc, #464]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 8005692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005694:	4a73      	ldr	r2, [pc, #460]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 8005696:	f043 0301 	orr.w	r3, r3, #1
 800569a:	6713      	str	r3, [r2, #112]	; 0x70
 800569c:	e00b      	b.n	80056b6 <HAL_RCC_OscConfig+0x32a>
 800569e:	4b71      	ldr	r3, [pc, #452]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 80056a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a2:	4a70      	ldr	r2, [pc, #448]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 80056a4:	f023 0301 	bic.w	r3, r3, #1
 80056a8:	6713      	str	r3, [r2, #112]	; 0x70
 80056aa:	4b6e      	ldr	r3, [pc, #440]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 80056ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ae:	4a6d      	ldr	r2, [pc, #436]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 80056b0:	f023 0304 	bic.w	r3, r3, #4
 80056b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d015      	beq.n	80056ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056be:	f7fd ff0d 	bl	80034dc <HAL_GetTick>
 80056c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c4:	e00a      	b.n	80056dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056c6:	f7fd ff09 	bl	80034dc <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e0bc      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056dc:	4b61      	ldr	r3, [pc, #388]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 80056de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0ee      	beq.n	80056c6 <HAL_RCC_OscConfig+0x33a>
 80056e8:	e014      	b.n	8005714 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ea:	f7fd fef7 	bl	80034dc <HAL_GetTick>
 80056ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056f0:	e00a      	b.n	8005708 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056f2:	f7fd fef3 	bl	80034dc <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005700:	4293      	cmp	r3, r2
 8005702:	d901      	bls.n	8005708 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e0a6      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005708:	4b56      	ldr	r3, [pc, #344]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 800570a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1ee      	bne.n	80056f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005714:	7dfb      	ldrb	r3, [r7, #23]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d105      	bne.n	8005726 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800571a:	4b52      	ldr	r3, [pc, #328]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	4a51      	ldr	r2, [pc, #324]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 8005720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005724:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 8092 	beq.w	8005854 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005730:	4b4c      	ldr	r3, [pc, #304]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f003 030c 	and.w	r3, r3, #12
 8005738:	2b08      	cmp	r3, #8
 800573a:	d05c      	beq.n	80057f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	2b02      	cmp	r3, #2
 8005742:	d141      	bne.n	80057c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005744:	4b48      	ldr	r3, [pc, #288]	; (8005868 <HAL_RCC_OscConfig+0x4dc>)
 8005746:	2200      	movs	r2, #0
 8005748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574a:	f7fd fec7 	bl	80034dc <HAL_GetTick>
 800574e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005750:	e008      	b.n	8005764 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005752:	f7fd fec3 	bl	80034dc <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e078      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005764:	4b3f      	ldr	r3, [pc, #252]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1f0      	bne.n	8005752 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	69da      	ldr	r2, [r3, #28]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	431a      	orrs	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	019b      	lsls	r3, r3, #6
 8005780:	431a      	orrs	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005786:	085b      	lsrs	r3, r3, #1
 8005788:	3b01      	subs	r3, #1
 800578a:	041b      	lsls	r3, r3, #16
 800578c:	431a      	orrs	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005792:	061b      	lsls	r3, r3, #24
 8005794:	4933      	ldr	r1, [pc, #204]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 8005796:	4313      	orrs	r3, r2
 8005798:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800579a:	4b33      	ldr	r3, [pc, #204]	; (8005868 <HAL_RCC_OscConfig+0x4dc>)
 800579c:	2201      	movs	r2, #1
 800579e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a0:	f7fd fe9c 	bl	80034dc <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057a8:	f7fd fe98 	bl	80034dc <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e04d      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ba:	4b2a      	ldr	r3, [pc, #168]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0f0      	beq.n	80057a8 <HAL_RCC_OscConfig+0x41c>
 80057c6:	e045      	b.n	8005854 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c8:	4b27      	ldr	r3, [pc, #156]	; (8005868 <HAL_RCC_OscConfig+0x4dc>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ce:	f7fd fe85 	bl	80034dc <HAL_GetTick>
 80057d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d4:	e008      	b.n	80057e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057d6:	f7fd fe81 	bl	80034dc <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d901      	bls.n	80057e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e036      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057e8:	4b1e      	ldr	r3, [pc, #120]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1f0      	bne.n	80057d6 <HAL_RCC_OscConfig+0x44a>
 80057f4:	e02e      	b.n	8005854 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d101      	bne.n	8005802 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e029      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005802:	4b18      	ldr	r3, [pc, #96]	; (8005864 <HAL_RCC_OscConfig+0x4d8>)
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	429a      	cmp	r2, r3
 8005814:	d11c      	bne.n	8005850 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005820:	429a      	cmp	r2, r3
 8005822:	d115      	bne.n	8005850 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800582a:	4013      	ands	r3, r2
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005830:	4293      	cmp	r3, r2
 8005832:	d10d      	bne.n	8005850 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800583e:	429a      	cmp	r2, r3
 8005840:	d106      	bne.n	8005850 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800584c:	429a      	cmp	r2, r3
 800584e:	d001      	beq.n	8005854 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e000      	b.n	8005856 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	40007000 	.word	0x40007000
 8005864:	40023800 	.word	0x40023800
 8005868:	42470060 	.word	0x42470060

0800586c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d101      	bne.n	8005880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e0cc      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005880:	4b68      	ldr	r3, [pc, #416]	; (8005a24 <HAL_RCC_ClockConfig+0x1b8>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 030f 	and.w	r3, r3, #15
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	429a      	cmp	r2, r3
 800588c:	d90c      	bls.n	80058a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800588e:	4b65      	ldr	r3, [pc, #404]	; (8005a24 <HAL_RCC_ClockConfig+0x1b8>)
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005896:	4b63      	ldr	r3, [pc, #396]	; (8005a24 <HAL_RCC_ClockConfig+0x1b8>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d001      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e0b8      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d020      	beq.n	80058f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d005      	beq.n	80058cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058c0:	4b59      	ldr	r3, [pc, #356]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	4a58      	ldr	r2, [pc, #352]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 80058c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0308 	and.w	r3, r3, #8
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d005      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058d8:	4b53      	ldr	r3, [pc, #332]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	4a52      	ldr	r2, [pc, #328]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058e4:	4b50      	ldr	r3, [pc, #320]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	494d      	ldr	r1, [pc, #308]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d044      	beq.n	800598c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d107      	bne.n	800591a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800590a:	4b47      	ldr	r3, [pc, #284]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d119      	bne.n	800594a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e07f      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d003      	beq.n	800592a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005926:	2b03      	cmp	r3, #3
 8005928:	d107      	bne.n	800593a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800592a:	4b3f      	ldr	r3, [pc, #252]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d109      	bne.n	800594a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e06f      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800593a:	4b3b      	ldr	r3, [pc, #236]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e067      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800594a:	4b37      	ldr	r3, [pc, #220]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f023 0203 	bic.w	r2, r3, #3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	4934      	ldr	r1, [pc, #208]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 8005958:	4313      	orrs	r3, r2
 800595a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800595c:	f7fd fdbe 	bl	80034dc <HAL_GetTick>
 8005960:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005962:	e00a      	b.n	800597a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005964:	f7fd fdba 	bl	80034dc <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005972:	4293      	cmp	r3, r2
 8005974:	d901      	bls.n	800597a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e04f      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800597a:	4b2b      	ldr	r3, [pc, #172]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f003 020c 	and.w	r2, r3, #12
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	429a      	cmp	r2, r3
 800598a:	d1eb      	bne.n	8005964 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800598c:	4b25      	ldr	r3, [pc, #148]	; (8005a24 <HAL_RCC_ClockConfig+0x1b8>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 030f 	and.w	r3, r3, #15
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	429a      	cmp	r2, r3
 8005998:	d20c      	bcs.n	80059b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800599a:	4b22      	ldr	r3, [pc, #136]	; (8005a24 <HAL_RCC_ClockConfig+0x1b8>)
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	b2d2      	uxtb	r2, r2
 80059a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a2:	4b20      	ldr	r3, [pc, #128]	; (8005a24 <HAL_RCC_ClockConfig+0x1b8>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d001      	beq.n	80059b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e032      	b.n	8005a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0304 	and.w	r3, r3, #4
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d008      	beq.n	80059d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059c0:	4b19      	ldr	r3, [pc, #100]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	4916      	ldr	r1, [pc, #88]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0308 	and.w	r3, r3, #8
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d009      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059de:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	490e      	ldr	r1, [pc, #56]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059f2:	f000 f821 	bl	8005a38 <HAL_RCC_GetSysClockFreq>
 80059f6:	4602      	mov	r2, r0
 80059f8:	4b0b      	ldr	r3, [pc, #44]	; (8005a28 <HAL_RCC_ClockConfig+0x1bc>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	091b      	lsrs	r3, r3, #4
 80059fe:	f003 030f 	and.w	r3, r3, #15
 8005a02:	490a      	ldr	r1, [pc, #40]	; (8005a2c <HAL_RCC_ClockConfig+0x1c0>)
 8005a04:	5ccb      	ldrb	r3, [r1, r3]
 8005a06:	fa22 f303 	lsr.w	r3, r2, r3
 8005a0a:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <HAL_RCC_ClockConfig+0x1c4>)
 8005a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a0e:	4b09      	ldr	r3, [pc, #36]	; (8005a34 <HAL_RCC_ClockConfig+0x1c8>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fd fd1e 	bl	8003454 <HAL_InitTick>

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	40023c00 	.word	0x40023c00
 8005a28:	40023800 	.word	0x40023800
 8005a2c:	080089ec 	.word	0x080089ec
 8005a30:	20000120 	.word	0x20000120
 8005a34:	20000124 	.word	0x20000124

08005a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005a3c:	b084      	sub	sp, #16
 8005a3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	607b      	str	r3, [r7, #4]
 8005a44:	2300      	movs	r3, #0
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	2300      	movs	r3, #0
 8005a4a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a50:	4b67      	ldr	r3, [pc, #412]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	f003 030c 	and.w	r3, r3, #12
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d00d      	beq.n	8005a78 <HAL_RCC_GetSysClockFreq+0x40>
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	f200 80bd 	bhi.w	8005bdc <HAL_RCC_GetSysClockFreq+0x1a4>
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <HAL_RCC_GetSysClockFreq+0x34>
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d003      	beq.n	8005a72 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a6a:	e0b7      	b.n	8005bdc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a6c:	4b61      	ldr	r3, [pc, #388]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005a6e:	60bb      	str	r3, [r7, #8]
       break;
 8005a70:	e0b7      	b.n	8005be2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a72:	4b60      	ldr	r3, [pc, #384]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005a74:	60bb      	str	r3, [r7, #8]
      break;
 8005a76:	e0b4      	b.n	8005be2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a78:	4b5d      	ldr	r3, [pc, #372]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a82:	4b5b      	ldr	r3, [pc, #364]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d04d      	beq.n	8005b2a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a8e:	4b58      	ldr	r3, [pc, #352]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	099b      	lsrs	r3, r3, #6
 8005a94:	461a      	mov	r2, r3
 8005a96:	f04f 0300 	mov.w	r3, #0
 8005a9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a9e:	f04f 0100 	mov.w	r1, #0
 8005aa2:	ea02 0800 	and.w	r8, r2, r0
 8005aa6:	ea03 0901 	and.w	r9, r3, r1
 8005aaa:	4640      	mov	r0, r8
 8005aac:	4649      	mov	r1, r9
 8005aae:	f04f 0200 	mov.w	r2, #0
 8005ab2:	f04f 0300 	mov.w	r3, #0
 8005ab6:	014b      	lsls	r3, r1, #5
 8005ab8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005abc:	0142      	lsls	r2, r0, #5
 8005abe:	4610      	mov	r0, r2
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	ebb0 0008 	subs.w	r0, r0, r8
 8005ac6:	eb61 0109 	sbc.w	r1, r1, r9
 8005aca:	f04f 0200 	mov.w	r2, #0
 8005ace:	f04f 0300 	mov.w	r3, #0
 8005ad2:	018b      	lsls	r3, r1, #6
 8005ad4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005ad8:	0182      	lsls	r2, r0, #6
 8005ada:	1a12      	subs	r2, r2, r0
 8005adc:	eb63 0301 	sbc.w	r3, r3, r1
 8005ae0:	f04f 0000 	mov.w	r0, #0
 8005ae4:	f04f 0100 	mov.w	r1, #0
 8005ae8:	00d9      	lsls	r1, r3, #3
 8005aea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005aee:	00d0      	lsls	r0, r2, #3
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	eb12 0208 	adds.w	r2, r2, r8
 8005af8:	eb43 0309 	adc.w	r3, r3, r9
 8005afc:	f04f 0000 	mov.w	r0, #0
 8005b00:	f04f 0100 	mov.w	r1, #0
 8005b04:	0299      	lsls	r1, r3, #10
 8005b06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005b0a:	0290      	lsls	r0, r2, #10
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4610      	mov	r0, r2
 8005b12:	4619      	mov	r1, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	461a      	mov	r2, r3
 8005b18:	f04f 0300 	mov.w	r3, #0
 8005b1c:	f7fb f856 	bl	8000bcc <__aeabi_uldivmod>
 8005b20:	4602      	mov	r2, r0
 8005b22:	460b      	mov	r3, r1
 8005b24:	4613      	mov	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	e04a      	b.n	8005bc0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b2a:	4b31      	ldr	r3, [pc, #196]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	099b      	lsrs	r3, r3, #6
 8005b30:	461a      	mov	r2, r3
 8005b32:	f04f 0300 	mov.w	r3, #0
 8005b36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b3a:	f04f 0100 	mov.w	r1, #0
 8005b3e:	ea02 0400 	and.w	r4, r2, r0
 8005b42:	ea03 0501 	and.w	r5, r3, r1
 8005b46:	4620      	mov	r0, r4
 8005b48:	4629      	mov	r1, r5
 8005b4a:	f04f 0200 	mov.w	r2, #0
 8005b4e:	f04f 0300 	mov.w	r3, #0
 8005b52:	014b      	lsls	r3, r1, #5
 8005b54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b58:	0142      	lsls	r2, r0, #5
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	1b00      	subs	r0, r0, r4
 8005b60:	eb61 0105 	sbc.w	r1, r1, r5
 8005b64:	f04f 0200 	mov.w	r2, #0
 8005b68:	f04f 0300 	mov.w	r3, #0
 8005b6c:	018b      	lsls	r3, r1, #6
 8005b6e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b72:	0182      	lsls	r2, r0, #6
 8005b74:	1a12      	subs	r2, r2, r0
 8005b76:	eb63 0301 	sbc.w	r3, r3, r1
 8005b7a:	f04f 0000 	mov.w	r0, #0
 8005b7e:	f04f 0100 	mov.w	r1, #0
 8005b82:	00d9      	lsls	r1, r3, #3
 8005b84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b88:	00d0      	lsls	r0, r2, #3
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	1912      	adds	r2, r2, r4
 8005b90:	eb45 0303 	adc.w	r3, r5, r3
 8005b94:	f04f 0000 	mov.w	r0, #0
 8005b98:	f04f 0100 	mov.w	r1, #0
 8005b9c:	0299      	lsls	r1, r3, #10
 8005b9e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005ba2:	0290      	lsls	r0, r2, #10
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4610      	mov	r0, r2
 8005baa:	4619      	mov	r1, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	f04f 0300 	mov.w	r3, #0
 8005bb4:	f7fb f80a 	bl	8000bcc <__aeabi_uldivmod>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bc0:	4b0b      	ldr	r3, [pc, #44]	; (8005bf0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	0c1b      	lsrs	r3, r3, #16
 8005bc6:	f003 0303 	and.w	r3, r3, #3
 8005bca:	3301      	adds	r3, #1
 8005bcc:	005b      	lsls	r3, r3, #1
 8005bce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd8:	60bb      	str	r3, [r7, #8]
      break;
 8005bda:	e002      	b.n	8005be2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bdc:	4b05      	ldr	r3, [pc, #20]	; (8005bf4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005bde:	60bb      	str	r3, [r7, #8]
      break;
 8005be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005be2:	68bb      	ldr	r3, [r7, #8]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005bee:	bf00      	nop
 8005bf0:	40023800 	.word	0x40023800
 8005bf4:	00f42400 	.word	0x00f42400

08005bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bfc:	4b03      	ldr	r3, [pc, #12]	; (8005c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	20000120 	.word	0x20000120

08005c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c14:	f7ff fff0 	bl	8005bf8 <HAL_RCC_GetHCLKFreq>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	4b05      	ldr	r3, [pc, #20]	; (8005c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	0a9b      	lsrs	r3, r3, #10
 8005c20:	f003 0307 	and.w	r3, r3, #7
 8005c24:	4903      	ldr	r1, [pc, #12]	; (8005c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c26:	5ccb      	ldrb	r3, [r1, r3]
 8005c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	40023800 	.word	0x40023800
 8005c34:	080089fc 	.word	0x080089fc

08005c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c3c:	f7ff ffdc 	bl	8005bf8 <HAL_RCC_GetHCLKFreq>
 8005c40:	4602      	mov	r2, r0
 8005c42:	4b05      	ldr	r3, [pc, #20]	; (8005c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	0b5b      	lsrs	r3, r3, #13
 8005c48:	f003 0307 	and.w	r3, r3, #7
 8005c4c:	4903      	ldr	r1, [pc, #12]	; (8005c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c4e:	5ccb      	ldrb	r3, [r1, r3]
 8005c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	40023800 	.word	0x40023800
 8005c5c:	080089fc 	.word	0x080089fc

08005c60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e056      	b.n	8005d20 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d106      	bne.n	8005c92 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7fc fe37 	bl	8002900 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2202      	movs	r2, #2
 8005c96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ca8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	ea42 0103 	orr.w	r1, r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	0c1b      	lsrs	r3, r3, #16
 8005cf0:	f003 0104 	and.w	r1, r3, #4
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	69da      	ldr	r2, [r3, #28]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af02      	add	r7, sp, #8
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	603b      	str	r3, [r7, #0]
 8005d34:	4613      	mov	r3, r2
 8005d36:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d44:	d112      	bne.n	8005d6c <HAL_SPI_Receive+0x44>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10e      	bne.n	8005d6c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2204      	movs	r2, #4
 8005d52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d56:	88fa      	ldrh	r2, [r7, #6]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	68b9      	ldr	r1, [r7, #8]
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 f8e9 	bl	8005f3a <HAL_SPI_TransmitReceive>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	e0e2      	b.n	8005f32 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d101      	bne.n	8005d7a <HAL_SPI_Receive+0x52>
 8005d76:	2302      	movs	r3, #2
 8005d78:	e0db      	b.n	8005f32 <HAL_SPI_Receive+0x20a>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d82:	f7fd fbab 	bl	80034dc <HAL_GetTick>
 8005d86:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d002      	beq.n	8005d9a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005d94:	2302      	movs	r3, #2
 8005d96:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d98:	e0c2      	b.n	8005f20 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d002      	beq.n	8005da6 <HAL_SPI_Receive+0x7e>
 8005da0:	88fb      	ldrh	r3, [r7, #6]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d102      	bne.n	8005dac <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005daa:	e0b9      	b.n	8005f20 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2204      	movs	r2, #4
 8005db0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	88fa      	ldrh	r2, [r7, #6]
 8005dc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	88fa      	ldrh	r2, [r7, #6]
 8005dca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005df2:	d107      	bne.n	8005e04 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e02:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0e:	2b40      	cmp	r3, #64	; 0x40
 8005e10:	d007      	beq.n	8005e22 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e20:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d162      	bne.n	8005ef0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005e2a:	e02e      	b.n	8005e8a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d115      	bne.n	8005e66 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f103 020c 	add.w	r2, r3, #12
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e46:	7812      	ldrb	r2, [r2, #0]
 8005e48:	b2d2      	uxtb	r2, r2
 8005e4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e50:	1c5a      	adds	r2, r3, #1
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e64:	e011      	b.n	8005e8a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e66:	f7fd fb39 	bl	80034dc <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d803      	bhi.n	8005e7e <HAL_SPI_Receive+0x156>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e7c:	d102      	bne.n	8005e84 <HAL_SPI_Receive+0x15c>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d102      	bne.n	8005e8a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005e88:	e04a      	b.n	8005f20 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1cb      	bne.n	8005e2c <HAL_SPI_Receive+0x104>
 8005e94:	e031      	b.n	8005efa <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d113      	bne.n	8005ecc <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eae:	b292      	uxth	r2, r2
 8005eb0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb6:	1c9a      	adds	r2, r3, #2
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005eca:	e011      	b.n	8005ef0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ecc:	f7fd fb06 	bl	80034dc <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d803      	bhi.n	8005ee4 <HAL_SPI_Receive+0x1bc>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ee2:	d102      	bne.n	8005eea <HAL_SPI_Receive+0x1c2>
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d102      	bne.n	8005ef0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005eee:	e017      	b.n	8005f20 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1cd      	bne.n	8005e96 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	6839      	ldr	r1, [r7, #0]
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 fa27 	bl	8006352 <SPI_EndRxTransaction>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d002      	beq.n	8005f10 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	75fb      	strb	r3, [r7, #23]
 8005f1c:	e000      	b.n	8005f20 <HAL_SPI_Receive+0x1f8>
  }

error :
 8005f1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3718      	adds	r7, #24
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b08c      	sub	sp, #48	; 0x30
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	60f8      	str	r0, [r7, #12]
 8005f42:	60b9      	str	r1, [r7, #8]
 8005f44:	607a      	str	r2, [r7, #4]
 8005f46:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d101      	bne.n	8005f60 <HAL_SPI_TransmitReceive+0x26>
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	e18a      	b.n	8006276 <HAL_SPI_TransmitReceive+0x33c>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f68:	f7fd fab8 	bl	80034dc <HAL_GetTick>
 8005f6c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005f7e:	887b      	ldrh	r3, [r7, #2]
 8005f80:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d00f      	beq.n	8005faa <HAL_SPI_TransmitReceive+0x70>
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f90:	d107      	bne.n	8005fa2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d103      	bne.n	8005fa2 <HAL_SPI_TransmitReceive+0x68>
 8005f9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	d003      	beq.n	8005faa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005fa8:	e15b      	b.n	8006262 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d005      	beq.n	8005fbc <HAL_SPI_TransmitReceive+0x82>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d002      	beq.n	8005fbc <HAL_SPI_TransmitReceive+0x82>
 8005fb6:	887b      	ldrh	r3, [r7, #2]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d103      	bne.n	8005fc4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005fc2:	e14e      	b.n	8006262 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	d003      	beq.n	8005fd8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2205      	movs	r2, #5
 8005fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	887a      	ldrh	r2, [r7, #2]
 8005fe8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	887a      	ldrh	r2, [r7, #2]
 8005fee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	887a      	ldrh	r2, [r7, #2]
 8005ffa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	887a      	ldrh	r2, [r7, #2]
 8006000:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006018:	2b40      	cmp	r3, #64	; 0x40
 800601a:	d007      	beq.n	800602c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800602a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006034:	d178      	bne.n	8006128 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <HAL_SPI_TransmitReceive+0x10a>
 800603e:	8b7b      	ldrh	r3, [r7, #26]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d166      	bne.n	8006112 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006048:	881a      	ldrh	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006054:	1c9a      	adds	r2, r3, #2
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800605e:	b29b      	uxth	r3, r3
 8006060:	3b01      	subs	r3, #1
 8006062:	b29a      	uxth	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006068:	e053      	b.n	8006112 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	2b02      	cmp	r3, #2
 8006076:	d11b      	bne.n	80060b0 <HAL_SPI_TransmitReceive+0x176>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800607c:	b29b      	uxth	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d016      	beq.n	80060b0 <HAL_SPI_TransmitReceive+0x176>
 8006082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006084:	2b01      	cmp	r3, #1
 8006086:	d113      	bne.n	80060b0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608c:	881a      	ldrh	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006098:	1c9a      	adds	r2, r3, #2
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	3b01      	subs	r3, #1
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d119      	bne.n	80060f2 <HAL_SPI_TransmitReceive+0x1b8>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d014      	beq.n	80060f2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68da      	ldr	r2, [r3, #12]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d2:	b292      	uxth	r2, r2
 80060d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060da:	1c9a      	adds	r2, r3, #2
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	3b01      	subs	r3, #1
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060ee:	2301      	movs	r3, #1
 80060f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80060f2:	f7fd f9f3 	bl	80034dc <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060fe:	429a      	cmp	r2, r3
 8006100:	d807      	bhi.n	8006112 <HAL_SPI_TransmitReceive+0x1d8>
 8006102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006108:	d003      	beq.n	8006112 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006110:	e0a7      	b.n	8006262 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006116:	b29b      	uxth	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1a6      	bne.n	800606a <HAL_SPI_TransmitReceive+0x130>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006120:	b29b      	uxth	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1a1      	bne.n	800606a <HAL_SPI_TransmitReceive+0x130>
 8006126:	e07c      	b.n	8006222 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <HAL_SPI_TransmitReceive+0x1fc>
 8006130:	8b7b      	ldrh	r3, [r7, #26]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d16b      	bne.n	800620e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	330c      	adds	r3, #12
 8006140:	7812      	ldrb	r2, [r2, #0]
 8006142:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006148:	1c5a      	adds	r2, r3, #1
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006152:	b29b      	uxth	r3, r3
 8006154:	3b01      	subs	r3, #1
 8006156:	b29a      	uxth	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800615c:	e057      	b.n	800620e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b02      	cmp	r3, #2
 800616a:	d11c      	bne.n	80061a6 <HAL_SPI_TransmitReceive+0x26c>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006170:	b29b      	uxth	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d017      	beq.n	80061a6 <HAL_SPI_TransmitReceive+0x26c>
 8006176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006178:	2b01      	cmp	r3, #1
 800617a:	d114      	bne.n	80061a6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	330c      	adds	r3, #12
 8006186:	7812      	ldrb	r2, [r2, #0]
 8006188:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006198:	b29b      	uxth	r3, r3
 800619a:	3b01      	subs	r3, #1
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d119      	bne.n	80061e8 <HAL_SPI_TransmitReceive+0x2ae>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d014      	beq.n	80061e8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68da      	ldr	r2, [r3, #12]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c8:	b2d2      	uxtb	r2, r2
 80061ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061da:	b29b      	uxth	r3, r3
 80061dc:	3b01      	subs	r3, #1
 80061de:	b29a      	uxth	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061e4:	2301      	movs	r3, #1
 80061e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80061e8:	f7fd f978 	bl	80034dc <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d803      	bhi.n	8006200 <HAL_SPI_TransmitReceive+0x2c6>
 80061f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061fe:	d102      	bne.n	8006206 <HAL_SPI_TransmitReceive+0x2cc>
 8006200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006202:	2b00      	cmp	r3, #0
 8006204:	d103      	bne.n	800620e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800620c:	e029      	b.n	8006262 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006212:	b29b      	uxth	r3, r3
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1a2      	bne.n	800615e <HAL_SPI_TransmitReceive+0x224>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800621c:	b29b      	uxth	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d19d      	bne.n	800615e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006224:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f000 f8f8 	bl	800641c <SPI_EndRxTxTransaction>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d006      	beq.n	8006240 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2220      	movs	r2, #32
 800623c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800623e:	e010      	b.n	8006262 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10b      	bne.n	8006260 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006248:	2300      	movs	r3, #0
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	617b      	str	r3, [r7, #20]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	e000      	b.n	8006262 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006260:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006272:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006276:	4618      	mov	r0, r3
 8006278:	3730      	adds	r7, #48	; 0x30
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	60f8      	str	r0, [r7, #12]
 8006286:	60b9      	str	r1, [r7, #8]
 8006288:	603b      	str	r3, [r7, #0]
 800628a:	4613      	mov	r3, r2
 800628c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800628e:	e04c      	b.n	800632a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006296:	d048      	beq.n	800632a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006298:	f7fd f920 	bl	80034dc <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d902      	bls.n	80062ae <SPI_WaitFlagStateUntilTimeout+0x30>
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d13d      	bne.n	800632a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80062bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062c6:	d111      	bne.n	80062ec <SPI_WaitFlagStateUntilTimeout+0x6e>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062d0:	d004      	beq.n	80062dc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062da:	d107      	bne.n	80062ec <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062f4:	d10f      	bne.n	8006316 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006314:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e00f      	b.n	800634a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	4013      	ands	r3, r2
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	429a      	cmp	r2, r3
 8006338:	bf0c      	ite	eq
 800633a:	2301      	moveq	r3, #1
 800633c:	2300      	movne	r3, #0
 800633e:	b2db      	uxtb	r3, r3
 8006340:	461a      	mov	r2, r3
 8006342:	79fb      	ldrb	r3, [r7, #7]
 8006344:	429a      	cmp	r2, r3
 8006346:	d1a3      	bne.n	8006290 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b086      	sub	sp, #24
 8006356:	af02      	add	r7, sp, #8
 8006358:	60f8      	str	r0, [r7, #12]
 800635a:	60b9      	str	r1, [r7, #8]
 800635c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006366:	d111      	bne.n	800638c <SPI_EndRxTransaction+0x3a>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006370:	d004      	beq.n	800637c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800637a:	d107      	bne.n	800638c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800638a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006394:	d12a      	bne.n	80063ec <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800639e:	d012      	beq.n	80063c6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	2200      	movs	r2, #0
 80063a8:	2180      	movs	r1, #128	; 0x80
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f7ff ff67 	bl	800627e <SPI_WaitFlagStateUntilTimeout>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d02d      	beq.n	8006412 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ba:	f043 0220 	orr.w	r2, r3, #32
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e026      	b.n	8006414 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	2200      	movs	r2, #0
 80063ce:	2101      	movs	r1, #1
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f7ff ff54 	bl	800627e <SPI_WaitFlagStateUntilTimeout>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d01a      	beq.n	8006412 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e0:	f043 0220 	orr.w	r2, r3, #32
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e013      	b.n	8006414 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2200      	movs	r2, #0
 80063f4:	2101      	movs	r1, #1
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f7ff ff41 	bl	800627e <SPI_WaitFlagStateUntilTimeout>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d007      	beq.n	8006412 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006406:	f043 0220 	orr.w	r2, r3, #32
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e000      	b.n	8006414 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b088      	sub	sp, #32
 8006420:	af02      	add	r7, sp, #8
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006428:	4b1b      	ldr	r3, [pc, #108]	; (8006498 <SPI_EndRxTxTransaction+0x7c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a1b      	ldr	r2, [pc, #108]	; (800649c <SPI_EndRxTxTransaction+0x80>)
 800642e:	fba2 2303 	umull	r2, r3, r2, r3
 8006432:	0d5b      	lsrs	r3, r3, #21
 8006434:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006438:	fb02 f303 	mul.w	r3, r2, r3
 800643c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006446:	d112      	bne.n	800646e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	2200      	movs	r2, #0
 8006450:	2180      	movs	r1, #128	; 0x80
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f7ff ff13 	bl	800627e <SPI_WaitFlagStateUntilTimeout>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d016      	beq.n	800648c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006462:	f043 0220 	orr.w	r2, r3, #32
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e00f      	b.n	800648e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00a      	beq.n	800648a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	3b01      	subs	r3, #1
 8006478:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006484:	2b80      	cmp	r3, #128	; 0x80
 8006486:	d0f2      	beq.n	800646e <SPI_EndRxTxTransaction+0x52>
 8006488:	e000      	b.n	800648c <SPI_EndRxTxTransaction+0x70>
        break;
 800648a:	bf00      	nop
  }

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20000120 	.word	0x20000120
 800649c:	165e9f81 	.word	0x165e9f81

080064a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e01d      	b.n	80064ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d106      	bne.n	80064cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7fc fd30 	bl	8002f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	3304      	adds	r3, #4
 80064dc:	4619      	mov	r1, r3
 80064de:	4610      	mov	r0, r2
 80064e0:	f000 fcf6 	bl	8006ed0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b085      	sub	sp, #20
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2202      	movs	r2, #2
 8006502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f003 0307 	and.w	r3, r3, #7
 8006510:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b06      	cmp	r3, #6
 8006516:	d007      	beq.n	8006528 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f042 0201 	orr.w	r2, r2, #1
 8006526:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b082      	sub	sp, #8
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e01d      	b.n	800658c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b00      	cmp	r3, #0
 800655a:	d106      	bne.n	800656a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f815 	bl	8006594 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2202      	movs	r2, #2
 800656e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	3304      	adds	r3, #4
 800657a:	4619      	mov	r1, r3
 800657c:	4610      	mov	r0, r2
 800657e:	f000 fca7 	bl	8006ed0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2201      	movs	r2, #1
 80065b8:	6839      	ldr	r1, [r7, #0]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f001 f89c 	bl	80076f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a15      	ldr	r2, [pc, #84]	; (800661c <HAL_TIM_PWM_Start+0x74>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d004      	beq.n	80065d4 <HAL_TIM_PWM_Start+0x2c>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a14      	ldr	r2, [pc, #80]	; (8006620 <HAL_TIM_PWM_Start+0x78>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d101      	bne.n	80065d8 <HAL_TIM_PWM_Start+0x30>
 80065d4:	2301      	movs	r3, #1
 80065d6:	e000      	b.n	80065da <HAL_TIM_PWM_Start+0x32>
 80065d8:	2300      	movs	r3, #0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d007      	beq.n	80065ee <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f003 0307 	and.w	r3, r3, #7
 80065f8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b06      	cmp	r3, #6
 80065fe:	d007      	beq.n	8006610 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0201 	orr.w	r2, r2, #1
 800660e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	40010000 	.word	0x40010000
 8006620:	40010400 	.word	0x40010400

08006624 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2200      	movs	r2, #0
 8006634:	6839      	ldr	r1, [r7, #0]
 8006636:	4618      	mov	r0, r3
 8006638:	f001 f85e 	bl	80076f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a22      	ldr	r2, [pc, #136]	; (80066cc <HAL_TIM_PWM_Stop+0xa8>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d004      	beq.n	8006650 <HAL_TIM_PWM_Stop+0x2c>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a21      	ldr	r2, [pc, #132]	; (80066d0 <HAL_TIM_PWM_Stop+0xac>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d101      	bne.n	8006654 <HAL_TIM_PWM_Stop+0x30>
 8006650:	2301      	movs	r3, #1
 8006652:	e000      	b.n	8006656 <HAL_TIM_PWM_Stop+0x32>
 8006654:	2300      	movs	r3, #0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d017      	beq.n	800668a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6a1a      	ldr	r2, [r3, #32]
 8006660:	f241 1311 	movw	r3, #4369	; 0x1111
 8006664:	4013      	ands	r3, r2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10f      	bne.n	800668a <HAL_TIM_PWM_Stop+0x66>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6a1a      	ldr	r2, [r3, #32]
 8006670:	f240 4344 	movw	r3, #1092	; 0x444
 8006674:	4013      	ands	r3, r2
 8006676:	2b00      	cmp	r3, #0
 8006678:	d107      	bne.n	800668a <HAL_TIM_PWM_Stop+0x66>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006688:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	6a1a      	ldr	r2, [r3, #32]
 8006690:	f241 1311 	movw	r3, #4369	; 0x1111
 8006694:	4013      	ands	r3, r2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10f      	bne.n	80066ba <HAL_TIM_PWM_Stop+0x96>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6a1a      	ldr	r2, [r3, #32]
 80066a0:	f240 4344 	movw	r3, #1092	; 0x444
 80066a4:	4013      	ands	r3, r2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d107      	bne.n	80066ba <HAL_TIM_PWM_Stop+0x96>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0201 	bic.w	r2, r2, #1
 80066b8:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	40010000 	.word	0x40010000
 80066d0:	40010400 	.word	0x40010400

080066d4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e01d      	b.n	8006722 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d106      	bne.n	8006700 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f815 	bl	800672a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	3304      	adds	r3, #4
 8006710:	4619      	mov	r1, r3
 8006712:	4610      	mov	r0, r2
 8006714:	f000 fbdc 	bl	8006ed0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
	...

08006740 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2b0c      	cmp	r3, #12
 800674e:	d841      	bhi.n	80067d4 <HAL_TIM_IC_Start_IT+0x94>
 8006750:	a201      	add	r2, pc, #4	; (adr r2, 8006758 <HAL_TIM_IC_Start_IT+0x18>)
 8006752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006756:	bf00      	nop
 8006758:	0800678d 	.word	0x0800678d
 800675c:	080067d5 	.word	0x080067d5
 8006760:	080067d5 	.word	0x080067d5
 8006764:	080067d5 	.word	0x080067d5
 8006768:	0800679f 	.word	0x0800679f
 800676c:	080067d5 	.word	0x080067d5
 8006770:	080067d5 	.word	0x080067d5
 8006774:	080067d5 	.word	0x080067d5
 8006778:	080067b1 	.word	0x080067b1
 800677c:	080067d5 	.word	0x080067d5
 8006780:	080067d5 	.word	0x080067d5
 8006784:	080067d5 	.word	0x080067d5
 8006788:	080067c3 	.word	0x080067c3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68da      	ldr	r2, [r3, #12]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f042 0202 	orr.w	r2, r2, #2
 800679a:	60da      	str	r2, [r3, #12]
      break;
 800679c:	e01b      	b.n	80067d6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68da      	ldr	r2, [r3, #12]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f042 0204 	orr.w	r2, r2, #4
 80067ac:	60da      	str	r2, [r3, #12]
      break;
 80067ae:	e012      	b.n	80067d6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f042 0208 	orr.w	r2, r2, #8
 80067be:	60da      	str	r2, [r3, #12]
      break;
 80067c0:	e009      	b.n	80067d6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68da      	ldr	r2, [r3, #12]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f042 0210 	orr.w	r2, r2, #16
 80067d0:	60da      	str	r2, [r3, #12]
      break;
 80067d2:	e000      	b.n	80067d6 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80067d4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2201      	movs	r2, #1
 80067dc:	6839      	ldr	r1, [r7, #0]
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 ff8a 	bl	80076f8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2b06      	cmp	r3, #6
 80067f4:	d007      	beq.n	8006806 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f042 0201 	orr.w	r2, r2, #1
 8006804:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	f003 0302 	and.w	r3, r3, #2
 8006822:	2b02      	cmp	r3, #2
 8006824:	d122      	bne.n	800686c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f003 0302 	and.w	r3, r3, #2
 8006830:	2b02      	cmp	r3, #2
 8006832:	d11b      	bne.n	800686c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f06f 0202 	mvn.w	r2, #2
 800683c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	f003 0303 	and.w	r3, r3, #3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d003      	beq.n	800685a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fb1e 	bl	8006e94 <HAL_TIM_IC_CaptureCallback>
 8006858:	e005      	b.n	8006866 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fb10 	bl	8006e80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fb21 	bl	8006ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f003 0304 	and.w	r3, r3, #4
 8006876:	2b04      	cmp	r3, #4
 8006878:	d122      	bne.n	80068c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f003 0304 	and.w	r3, r3, #4
 8006884:	2b04      	cmp	r3, #4
 8006886:	d11b      	bne.n	80068c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f06f 0204 	mvn.w	r2, #4
 8006890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2202      	movs	r2, #2
 8006896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 faf4 	bl	8006e94 <HAL_TIM_IC_CaptureCallback>
 80068ac:	e005      	b.n	80068ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fae6 	bl	8006e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 faf7 	bl	8006ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	2b08      	cmp	r3, #8
 80068cc:	d122      	bne.n	8006914 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f003 0308 	and.w	r3, r3, #8
 80068d8:	2b08      	cmp	r3, #8
 80068da:	d11b      	bne.n	8006914 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f06f 0208 	mvn.w	r2, #8
 80068e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2204      	movs	r2, #4
 80068ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	f003 0303 	and.w	r3, r3, #3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 faca 	bl	8006e94 <HAL_TIM_IC_CaptureCallback>
 8006900:	e005      	b.n	800690e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 fabc 	bl	8006e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 facd 	bl	8006ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	f003 0310 	and.w	r3, r3, #16
 800691e:	2b10      	cmp	r3, #16
 8006920:	d122      	bne.n	8006968 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f003 0310 	and.w	r3, r3, #16
 800692c:	2b10      	cmp	r3, #16
 800692e:	d11b      	bne.n	8006968 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f06f 0210 	mvn.w	r2, #16
 8006938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2208      	movs	r2, #8
 800693e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800694a:	2b00      	cmp	r3, #0
 800694c:	d003      	beq.n	8006956 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 faa0 	bl	8006e94 <HAL_TIM_IC_CaptureCallback>
 8006954:	e005      	b.n	8006962 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fa92 	bl	8006e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 faa3 	bl	8006ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b01      	cmp	r3, #1
 8006974:	d10e      	bne.n	8006994 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	2b01      	cmp	r3, #1
 8006982:	d107      	bne.n	8006994 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f06f 0201 	mvn.w	r2, #1
 800698c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fa6c 	bl	8006e6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800699e:	2b80      	cmp	r3, #128	; 0x80
 80069a0:	d10e      	bne.n	80069c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ac:	2b80      	cmp	r3, #128	; 0x80
 80069ae:	d107      	bne.n	80069c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 ff9a 	bl	80078f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ca:	2b40      	cmp	r3, #64	; 0x40
 80069cc:	d10e      	bne.n	80069ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d8:	2b40      	cmp	r3, #64	; 0x40
 80069da:	d107      	bne.n	80069ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fa68 	bl	8006ebc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	f003 0320 	and.w	r3, r3, #32
 80069f6:	2b20      	cmp	r3, #32
 80069f8:	d10e      	bne.n	8006a18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f003 0320 	and.w	r3, r3, #32
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	d107      	bne.n	8006a18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f06f 0220 	mvn.w	r2, #32
 8006a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 ff64 	bl	80078e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a18:	bf00      	nop
 8006a1a:	3708      	adds	r7, #8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d101      	bne.n	8006a3a <HAL_TIM_IC_ConfigChannel+0x1a>
 8006a36:	2302      	movs	r3, #2
 8006a38:	e08a      	b.n	8006b50 <HAL_TIM_IC_ConfigChannel+0x130>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2202      	movs	r2, #2
 8006a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d11b      	bne.n	8006a88 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6818      	ldr	r0, [r3, #0]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	6819      	ldr	r1, [r3, #0]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f000 fc86 	bl	8007370 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699a      	ldr	r2, [r3, #24]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 020c 	bic.w	r2, r2, #12
 8006a72:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	6999      	ldr	r1, [r3, #24]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	689a      	ldr	r2, [r3, #8]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	430a      	orrs	r2, r1
 8006a84:	619a      	str	r2, [r3, #24]
 8006a86:	e05a      	b.n	8006b3e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b04      	cmp	r3, #4
 8006a8c:	d11c      	bne.n	8006ac8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6818      	ldr	r0, [r3, #0]
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	6819      	ldr	r1, [r3, #0]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	685a      	ldr	r2, [r3, #4]
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f000 fd0a 	bl	80074b6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	699a      	ldr	r2, [r3, #24]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006ab0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6999      	ldr	r1, [r3, #24]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	021a      	lsls	r2, r3, #8
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	619a      	str	r2, [r3, #24]
 8006ac6:	e03a      	b.n	8006b3e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2b08      	cmp	r3, #8
 8006acc:	d11b      	bne.n	8006b06 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6818      	ldr	r0, [r3, #0]
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	6819      	ldr	r1, [r3, #0]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	685a      	ldr	r2, [r3, #4]
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	f000 fd57 	bl	8007590 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	69da      	ldr	r2, [r3, #28]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f022 020c 	bic.w	r2, r2, #12
 8006af0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	69d9      	ldr	r1, [r3, #28]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	61da      	str	r2, [r3, #28]
 8006b04:	e01b      	b.n	8006b3e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6818      	ldr	r0, [r3, #0]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	6819      	ldr	r1, [r3, #0]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	f000 fd77 	bl	8007608 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	69da      	ldr	r2, [r3, #28]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006b28:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	69d9      	ldr	r1, [r3, #28]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	021a      	lsls	r2, r3, #8
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d101      	bne.n	8006b72 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006b6e:	2302      	movs	r3, #2
 8006b70:	e0b4      	b.n	8006cdc <HAL_TIM_PWM_ConfigChannel+0x184>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2202      	movs	r2, #2
 8006b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b0c      	cmp	r3, #12
 8006b86:	f200 809f 	bhi.w	8006cc8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006b8a:	a201      	add	r2, pc, #4	; (adr r2, 8006b90 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b90:	08006bc5 	.word	0x08006bc5
 8006b94:	08006cc9 	.word	0x08006cc9
 8006b98:	08006cc9 	.word	0x08006cc9
 8006b9c:	08006cc9 	.word	0x08006cc9
 8006ba0:	08006c05 	.word	0x08006c05
 8006ba4:	08006cc9 	.word	0x08006cc9
 8006ba8:	08006cc9 	.word	0x08006cc9
 8006bac:	08006cc9 	.word	0x08006cc9
 8006bb0:	08006c47 	.word	0x08006c47
 8006bb4:	08006cc9 	.word	0x08006cc9
 8006bb8:	08006cc9 	.word	0x08006cc9
 8006bbc:	08006cc9 	.word	0x08006cc9
 8006bc0:	08006c87 	.word	0x08006c87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68b9      	ldr	r1, [r7, #8]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 fa20 	bl	8007010 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	699a      	ldr	r2, [r3, #24]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f042 0208 	orr.w	r2, r2, #8
 8006bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	699a      	ldr	r2, [r3, #24]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f022 0204 	bic.w	r2, r2, #4
 8006bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	6999      	ldr	r1, [r3, #24]
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	691a      	ldr	r2, [r3, #16]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	619a      	str	r2, [r3, #24]
      break;
 8006c02:	e062      	b.n	8006cca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 fa70 	bl	80070f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699a      	ldr	r2, [r3, #24]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	699a      	ldr	r2, [r3, #24]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6999      	ldr	r1, [r3, #24]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	021a      	lsls	r2, r3, #8
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	430a      	orrs	r2, r1
 8006c42:	619a      	str	r2, [r3, #24]
      break;
 8006c44:	e041      	b.n	8006cca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68b9      	ldr	r1, [r7, #8]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f000 fac5 	bl	80071dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	69da      	ldr	r2, [r3, #28]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f042 0208 	orr.w	r2, r2, #8
 8006c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	69da      	ldr	r2, [r3, #28]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0204 	bic.w	r2, r2, #4
 8006c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	69d9      	ldr	r1, [r3, #28]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	691a      	ldr	r2, [r3, #16]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	61da      	str	r2, [r3, #28]
      break;
 8006c84:	e021      	b.n	8006cca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68b9      	ldr	r1, [r7, #8]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 fb19 	bl	80072c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69da      	ldr	r2, [r3, #28]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69da      	ldr	r2, [r3, #28]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69d9      	ldr	r1, [r3, #28]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	021a      	lsls	r2, r3, #8
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	61da      	str	r2, [r3, #28]
      break;
 8006cc6:	e000      	b.n	8006cca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006cc8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <HAL_TIM_ConfigClockSource+0x18>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e0b3      	b.n	8006e64 <HAL_TIM_ConfigClockSource+0x180>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d34:	d03e      	beq.n	8006db4 <HAL_TIM_ConfigClockSource+0xd0>
 8006d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d3a:	f200 8087 	bhi.w	8006e4c <HAL_TIM_ConfigClockSource+0x168>
 8006d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d42:	f000 8085 	beq.w	8006e50 <HAL_TIM_ConfigClockSource+0x16c>
 8006d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d4a:	d87f      	bhi.n	8006e4c <HAL_TIM_ConfigClockSource+0x168>
 8006d4c:	2b70      	cmp	r3, #112	; 0x70
 8006d4e:	d01a      	beq.n	8006d86 <HAL_TIM_ConfigClockSource+0xa2>
 8006d50:	2b70      	cmp	r3, #112	; 0x70
 8006d52:	d87b      	bhi.n	8006e4c <HAL_TIM_ConfigClockSource+0x168>
 8006d54:	2b60      	cmp	r3, #96	; 0x60
 8006d56:	d050      	beq.n	8006dfa <HAL_TIM_ConfigClockSource+0x116>
 8006d58:	2b60      	cmp	r3, #96	; 0x60
 8006d5a:	d877      	bhi.n	8006e4c <HAL_TIM_ConfigClockSource+0x168>
 8006d5c:	2b50      	cmp	r3, #80	; 0x50
 8006d5e:	d03c      	beq.n	8006dda <HAL_TIM_ConfigClockSource+0xf6>
 8006d60:	2b50      	cmp	r3, #80	; 0x50
 8006d62:	d873      	bhi.n	8006e4c <HAL_TIM_ConfigClockSource+0x168>
 8006d64:	2b40      	cmp	r3, #64	; 0x40
 8006d66:	d058      	beq.n	8006e1a <HAL_TIM_ConfigClockSource+0x136>
 8006d68:	2b40      	cmp	r3, #64	; 0x40
 8006d6a:	d86f      	bhi.n	8006e4c <HAL_TIM_ConfigClockSource+0x168>
 8006d6c:	2b30      	cmp	r3, #48	; 0x30
 8006d6e:	d064      	beq.n	8006e3a <HAL_TIM_ConfigClockSource+0x156>
 8006d70:	2b30      	cmp	r3, #48	; 0x30
 8006d72:	d86b      	bhi.n	8006e4c <HAL_TIM_ConfigClockSource+0x168>
 8006d74:	2b20      	cmp	r3, #32
 8006d76:	d060      	beq.n	8006e3a <HAL_TIM_ConfigClockSource+0x156>
 8006d78:	2b20      	cmp	r3, #32
 8006d7a:	d867      	bhi.n	8006e4c <HAL_TIM_ConfigClockSource+0x168>
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d05c      	beq.n	8006e3a <HAL_TIM_ConfigClockSource+0x156>
 8006d80:	2b10      	cmp	r3, #16
 8006d82:	d05a      	beq.n	8006e3a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006d84:	e062      	b.n	8006e4c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6818      	ldr	r0, [r3, #0]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	6899      	ldr	r1, [r3, #8]
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	f000 fc8f 	bl	80076b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006da8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	609a      	str	r2, [r3, #8]
      break;
 8006db2:	e04e      	b.n	8006e52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6818      	ldr	r0, [r3, #0]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	6899      	ldr	r1, [r3, #8]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f000 fc78 	bl	80076b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	689a      	ldr	r2, [r3, #8]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dd6:	609a      	str	r2, [r3, #8]
      break;
 8006dd8:	e03b      	b.n	8006e52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6818      	ldr	r0, [r3, #0]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	6859      	ldr	r1, [r3, #4]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	461a      	mov	r2, r3
 8006de8:	f000 fb36 	bl	8007458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2150      	movs	r1, #80	; 0x50
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fc45 	bl	8007682 <TIM_ITRx_SetConfig>
      break;
 8006df8:	e02b      	b.n	8006e52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6818      	ldr	r0, [r3, #0]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	6859      	ldr	r1, [r3, #4]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	461a      	mov	r2, r3
 8006e08:	f000 fb92 	bl	8007530 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2160      	movs	r1, #96	; 0x60
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 fc35 	bl	8007682 <TIM_ITRx_SetConfig>
      break;
 8006e18:	e01b      	b.n	8006e52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6818      	ldr	r0, [r3, #0]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	6859      	ldr	r1, [r3, #4]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	461a      	mov	r2, r3
 8006e28:	f000 fb16 	bl	8007458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2140      	movs	r1, #64	; 0x40
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 fc25 	bl	8007682 <TIM_ITRx_SetConfig>
      break;
 8006e38:	e00b      	b.n	8006e52 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4619      	mov	r1, r3
 8006e44:	4610      	mov	r0, r2
 8006e46:	f000 fc1c 	bl	8007682 <TIM_ITRx_SetConfig>
      break;
 8006e4a:	e002      	b.n	8006e52 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006e4c:	bf00      	nop
 8006e4e:	e000      	b.n	8006e52 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006e50:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e88:	bf00      	nop
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a40      	ldr	r2, [pc, #256]	; (8006fe4 <TIM_Base_SetConfig+0x114>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d013      	beq.n	8006f10 <TIM_Base_SetConfig+0x40>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eee:	d00f      	beq.n	8006f10 <TIM_Base_SetConfig+0x40>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a3d      	ldr	r2, [pc, #244]	; (8006fe8 <TIM_Base_SetConfig+0x118>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d00b      	beq.n	8006f10 <TIM_Base_SetConfig+0x40>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a3c      	ldr	r2, [pc, #240]	; (8006fec <TIM_Base_SetConfig+0x11c>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d007      	beq.n	8006f10 <TIM_Base_SetConfig+0x40>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a3b      	ldr	r2, [pc, #236]	; (8006ff0 <TIM_Base_SetConfig+0x120>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d003      	beq.n	8006f10 <TIM_Base_SetConfig+0x40>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a3a      	ldr	r2, [pc, #232]	; (8006ff4 <TIM_Base_SetConfig+0x124>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d108      	bne.n	8006f22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a2f      	ldr	r2, [pc, #188]	; (8006fe4 <TIM_Base_SetConfig+0x114>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d02b      	beq.n	8006f82 <TIM_Base_SetConfig+0xb2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f30:	d027      	beq.n	8006f82 <TIM_Base_SetConfig+0xb2>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a2c      	ldr	r2, [pc, #176]	; (8006fe8 <TIM_Base_SetConfig+0x118>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d023      	beq.n	8006f82 <TIM_Base_SetConfig+0xb2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a2b      	ldr	r2, [pc, #172]	; (8006fec <TIM_Base_SetConfig+0x11c>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d01f      	beq.n	8006f82 <TIM_Base_SetConfig+0xb2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a2a      	ldr	r2, [pc, #168]	; (8006ff0 <TIM_Base_SetConfig+0x120>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d01b      	beq.n	8006f82 <TIM_Base_SetConfig+0xb2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a29      	ldr	r2, [pc, #164]	; (8006ff4 <TIM_Base_SetConfig+0x124>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d017      	beq.n	8006f82 <TIM_Base_SetConfig+0xb2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a28      	ldr	r2, [pc, #160]	; (8006ff8 <TIM_Base_SetConfig+0x128>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d013      	beq.n	8006f82 <TIM_Base_SetConfig+0xb2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a27      	ldr	r2, [pc, #156]	; (8006ffc <TIM_Base_SetConfig+0x12c>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d00f      	beq.n	8006f82 <TIM_Base_SetConfig+0xb2>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a26      	ldr	r2, [pc, #152]	; (8007000 <TIM_Base_SetConfig+0x130>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d00b      	beq.n	8006f82 <TIM_Base_SetConfig+0xb2>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a25      	ldr	r2, [pc, #148]	; (8007004 <TIM_Base_SetConfig+0x134>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d007      	beq.n	8006f82 <TIM_Base_SetConfig+0xb2>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a24      	ldr	r2, [pc, #144]	; (8007008 <TIM_Base_SetConfig+0x138>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d003      	beq.n	8006f82 <TIM_Base_SetConfig+0xb2>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a23      	ldr	r2, [pc, #140]	; (800700c <TIM_Base_SetConfig+0x13c>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d108      	bne.n	8006f94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a0a      	ldr	r2, [pc, #40]	; (8006fe4 <TIM_Base_SetConfig+0x114>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d003      	beq.n	8006fc8 <TIM_Base_SetConfig+0xf8>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a0c      	ldr	r2, [pc, #48]	; (8006ff4 <TIM_Base_SetConfig+0x124>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d103      	bne.n	8006fd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	691a      	ldr	r2, [r3, #16]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	615a      	str	r2, [r3, #20]
}
 8006fd6:	bf00      	nop
 8006fd8:	3714      	adds	r7, #20
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	40010000 	.word	0x40010000
 8006fe8:	40000400 	.word	0x40000400
 8006fec:	40000800 	.word	0x40000800
 8006ff0:	40000c00 	.word	0x40000c00
 8006ff4:	40010400 	.word	0x40010400
 8006ff8:	40014000 	.word	0x40014000
 8006ffc:	40014400 	.word	0x40014400
 8007000:	40014800 	.word	0x40014800
 8007004:	40001800 	.word	0x40001800
 8007008:	40001c00 	.word	0x40001c00
 800700c:	40002000 	.word	0x40002000

08007010 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	f023 0201 	bic.w	r2, r3, #1
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800703e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f023 0303 	bic.w	r3, r3, #3
 8007046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	4313      	orrs	r3, r2
 8007050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f023 0302 	bic.w	r3, r3, #2
 8007058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	4313      	orrs	r3, r2
 8007062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a20      	ldr	r2, [pc, #128]	; (80070e8 <TIM_OC1_SetConfig+0xd8>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d003      	beq.n	8007074 <TIM_OC1_SetConfig+0x64>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a1f      	ldr	r2, [pc, #124]	; (80070ec <TIM_OC1_SetConfig+0xdc>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d10c      	bne.n	800708e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f023 0308 	bic.w	r3, r3, #8
 800707a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	4313      	orrs	r3, r2
 8007084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f023 0304 	bic.w	r3, r3, #4
 800708c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a15      	ldr	r2, [pc, #84]	; (80070e8 <TIM_OC1_SetConfig+0xd8>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d003      	beq.n	800709e <TIM_OC1_SetConfig+0x8e>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a14      	ldr	r2, [pc, #80]	; (80070ec <TIM_OC1_SetConfig+0xdc>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d111      	bne.n	80070c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	4313      	orrs	r3, r2
 80070c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	621a      	str	r2, [r3, #32]
}
 80070dc:	bf00      	nop
 80070de:	371c      	adds	r7, #28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	40010000 	.word	0x40010000
 80070ec:	40010400 	.word	0x40010400

080070f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b087      	sub	sp, #28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	f023 0210 	bic.w	r2, r3, #16
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800711e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	021b      	lsls	r3, r3, #8
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	4313      	orrs	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f023 0320 	bic.w	r3, r3, #32
 800713a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	011b      	lsls	r3, r3, #4
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	4313      	orrs	r3, r2
 8007146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a22      	ldr	r2, [pc, #136]	; (80071d4 <TIM_OC2_SetConfig+0xe4>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d003      	beq.n	8007158 <TIM_OC2_SetConfig+0x68>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a21      	ldr	r2, [pc, #132]	; (80071d8 <TIM_OC2_SetConfig+0xe8>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d10d      	bne.n	8007174 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800715e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	011b      	lsls	r3, r3, #4
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	4313      	orrs	r3, r2
 800716a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007172:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a17      	ldr	r2, [pc, #92]	; (80071d4 <TIM_OC2_SetConfig+0xe4>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d003      	beq.n	8007184 <TIM_OC2_SetConfig+0x94>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a16      	ldr	r2, [pc, #88]	; (80071d8 <TIM_OC2_SetConfig+0xe8>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d113      	bne.n	80071ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800718a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007192:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	4313      	orrs	r3, r2
 800719e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	693a      	ldr	r2, [r7, #16]
 80071b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	685a      	ldr	r2, [r3, #4]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	621a      	str	r2, [r3, #32]
}
 80071c6:	bf00      	nop
 80071c8:	371c      	adds	r7, #28
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	40010000 	.word	0x40010000
 80071d8:	40010400 	.word	0x40010400

080071dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071dc:	b480      	push	{r7}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800720a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f023 0303 	bic.w	r3, r3, #3
 8007212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	4313      	orrs	r3, r2
 800721c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	021b      	lsls	r3, r3, #8
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	4313      	orrs	r3, r2
 8007230:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a21      	ldr	r2, [pc, #132]	; (80072bc <TIM_OC3_SetConfig+0xe0>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d003      	beq.n	8007242 <TIM_OC3_SetConfig+0x66>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a20      	ldr	r2, [pc, #128]	; (80072c0 <TIM_OC3_SetConfig+0xe4>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d10d      	bne.n	800725e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007248:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	021b      	lsls	r3, r3, #8
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	4313      	orrs	r3, r2
 8007254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800725c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a16      	ldr	r2, [pc, #88]	; (80072bc <TIM_OC3_SetConfig+0xe0>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d003      	beq.n	800726e <TIM_OC3_SetConfig+0x92>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a15      	ldr	r2, [pc, #84]	; (80072c0 <TIM_OC3_SetConfig+0xe4>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d113      	bne.n	8007296 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800727c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	011b      	lsls	r3, r3, #4
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	4313      	orrs	r3, r2
 8007288:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	011b      	lsls	r3, r3, #4
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	4313      	orrs	r3, r2
 8007294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	621a      	str	r2, [r3, #32]
}
 80072b0:	bf00      	nop
 80072b2:	371c      	adds	r7, #28
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	40010000 	.word	0x40010000
 80072c0:	40010400 	.word	0x40010400

080072c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b087      	sub	sp, #28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	021b      	lsls	r3, r3, #8
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	4313      	orrs	r3, r2
 8007306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800730e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	031b      	lsls	r3, r3, #12
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	4313      	orrs	r3, r2
 800731a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a12      	ldr	r2, [pc, #72]	; (8007368 <TIM_OC4_SetConfig+0xa4>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d003      	beq.n	800732c <TIM_OC4_SetConfig+0x68>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a11      	ldr	r2, [pc, #68]	; (800736c <TIM_OC4_SetConfig+0xa8>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d109      	bne.n	8007340 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007332:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	019b      	lsls	r3, r3, #6
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	4313      	orrs	r3, r2
 800733e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	621a      	str	r2, [r3, #32]
}
 800735a:	bf00      	nop
 800735c:	371c      	adds	r7, #28
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	40010000 	.word	0x40010000
 800736c:	40010400 	.word	0x40010400

08007370 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007370:	b480      	push	{r7}
 8007372:	b087      	sub	sp, #28
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	f023 0201 	bic.w	r2, r3, #1
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	4a28      	ldr	r2, [pc, #160]	; (800743c <TIM_TI1_SetConfig+0xcc>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d01b      	beq.n	80073d6 <TIM_TI1_SetConfig+0x66>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073a4:	d017      	beq.n	80073d6 <TIM_TI1_SetConfig+0x66>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	4a25      	ldr	r2, [pc, #148]	; (8007440 <TIM_TI1_SetConfig+0xd0>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d013      	beq.n	80073d6 <TIM_TI1_SetConfig+0x66>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4a24      	ldr	r2, [pc, #144]	; (8007444 <TIM_TI1_SetConfig+0xd4>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d00f      	beq.n	80073d6 <TIM_TI1_SetConfig+0x66>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	4a23      	ldr	r2, [pc, #140]	; (8007448 <TIM_TI1_SetConfig+0xd8>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d00b      	beq.n	80073d6 <TIM_TI1_SetConfig+0x66>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	4a22      	ldr	r2, [pc, #136]	; (800744c <TIM_TI1_SetConfig+0xdc>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d007      	beq.n	80073d6 <TIM_TI1_SetConfig+0x66>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	4a21      	ldr	r2, [pc, #132]	; (8007450 <TIM_TI1_SetConfig+0xe0>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d003      	beq.n	80073d6 <TIM_TI1_SetConfig+0x66>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	4a20      	ldr	r2, [pc, #128]	; (8007454 <TIM_TI1_SetConfig+0xe4>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d101      	bne.n	80073da <TIM_TI1_SetConfig+0x6a>
 80073d6:	2301      	movs	r3, #1
 80073d8:	e000      	b.n	80073dc <TIM_TI1_SetConfig+0x6c>
 80073da:	2300      	movs	r3, #0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d008      	beq.n	80073f2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f023 0303 	bic.w	r3, r3, #3
 80073e6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	617b      	str	r3, [r7, #20]
 80073f0:	e003      	b.n	80073fa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f043 0301 	orr.w	r3, r3, #1
 80073f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007400:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	011b      	lsls	r3, r3, #4
 8007406:	b2db      	uxtb	r3, r3
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	4313      	orrs	r3, r2
 800740c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	f023 030a 	bic.w	r3, r3, #10
 8007414:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f003 030a 	and.w	r3, r3, #10
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	4313      	orrs	r3, r2
 8007420:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	621a      	str	r2, [r3, #32]
}
 800742e:	bf00      	nop
 8007430:	371c      	adds	r7, #28
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	40010000 	.word	0x40010000
 8007440:	40000400 	.word	0x40000400
 8007444:	40000800 	.word	0x40000800
 8007448:	40000c00 	.word	0x40000c00
 800744c:	40010400 	.word	0x40010400
 8007450:	40014000 	.word	0x40014000
 8007454:	40001800 	.word	0x40001800

08007458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6a1b      	ldr	r3, [r3, #32]
 8007468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	f023 0201 	bic.w	r2, r3, #1
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	011b      	lsls	r3, r3, #4
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	4313      	orrs	r3, r2
 800748c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f023 030a 	bic.w	r3, r3, #10
 8007494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	4313      	orrs	r3, r2
 800749c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	621a      	str	r2, [r3, #32]
}
 80074aa:	bf00      	nop
 80074ac:	371c      	adds	r7, #28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b087      	sub	sp, #28
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	60f8      	str	r0, [r7, #12]
 80074be:	60b9      	str	r1, [r7, #8]
 80074c0:	607a      	str	r2, [r7, #4]
 80074c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6a1b      	ldr	r3, [r3, #32]
 80074c8:	f023 0210 	bic.w	r2, r3, #16
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	699b      	ldr	r3, [r3, #24]
 80074d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	021b      	lsls	r3, r3, #8
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	031b      	lsls	r3, r3, #12
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	4313      	orrs	r3, r2
 8007500:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007508:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	011b      	lsls	r3, r3, #4
 800750e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	4313      	orrs	r3, r2
 8007516:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	693a      	ldr	r2, [r7, #16]
 8007522:	621a      	str	r2, [r3, #32]
}
 8007524:	bf00      	nop
 8007526:	371c      	adds	r7, #28
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007530:	b480      	push	{r7}
 8007532:	b087      	sub	sp, #28
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6a1b      	ldr	r3, [r3, #32]
 8007540:	f023 0210 	bic.w	r2, r3, #16
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800755a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	031b      	lsls	r3, r3, #12
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	4313      	orrs	r3, r2
 8007564:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800756c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	011b      	lsls	r3, r3, #4
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	4313      	orrs	r3, r2
 8007576:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	621a      	str	r2, [r3, #32]
}
 8007584:	bf00      	nop
 8007586:	371c      	adds	r7, #28
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007590:	b480      	push	{r7}
 8007592:	b087      	sub	sp, #28
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
 800759c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6a1b      	ldr	r3, [r3, #32]
 80075b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f023 0303 	bic.w	r3, r3, #3
 80075bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	011b      	lsls	r3, r3, #4
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80075e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	021b      	lsls	r3, r3, #8
 80075e6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	621a      	str	r2, [r3, #32]
}
 80075fc:	bf00      	nop
 80075fe:	371c      	adds	r7, #28
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007608:	b480      	push	{r7}
 800760a:	b087      	sub	sp, #28
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
 8007614:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	69db      	ldr	r3, [r3, #28]
 8007626:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007634:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	021b      	lsls	r3, r3, #8
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	4313      	orrs	r3, r2
 800763e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007646:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	031b      	lsls	r3, r3, #12
 800764c:	b29b      	uxth	r3, r3
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	4313      	orrs	r3, r2
 8007652:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800765a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	031b      	lsls	r3, r3, #12
 8007660:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	4313      	orrs	r3, r2
 8007668:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	697a      	ldr	r2, [r7, #20]
 800766e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	621a      	str	r2, [r3, #32]
}
 8007676:	bf00      	nop
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007682:	b480      	push	{r7}
 8007684:	b085      	sub	sp, #20
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4313      	orrs	r3, r2
 80076a0:	f043 0307 	orr.w	r3, r3, #7
 80076a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	609a      	str	r2, [r3, #8]
}
 80076ac:	bf00      	nop
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b087      	sub	sp, #28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
 80076c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	021a      	lsls	r2, r3, #8
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	431a      	orrs	r2, r3
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	4313      	orrs	r3, r2
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	697a      	ldr	r2, [r7, #20]
 80076ea:	609a      	str	r2, [r3, #8]
}
 80076ec:	bf00      	nop
 80076ee:	371c      	adds	r7, #28
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b087      	sub	sp, #28
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	f003 031f 	and.w	r3, r3, #31
 800770a:	2201      	movs	r2, #1
 800770c:	fa02 f303 	lsl.w	r3, r2, r3
 8007710:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6a1a      	ldr	r2, [r3, #32]
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	43db      	mvns	r3, r3
 800771a:	401a      	ands	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6a1a      	ldr	r2, [r3, #32]
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	f003 031f 	and.w	r3, r3, #31
 800772a:	6879      	ldr	r1, [r7, #4]
 800772c:	fa01 f303 	lsl.w	r3, r1, r3
 8007730:	431a      	orrs	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	621a      	str	r2, [r3, #32]
}
 8007736:	bf00      	nop
 8007738:	371c      	adds	r7, #28
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr
	...

08007744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007754:	2b01      	cmp	r3, #1
 8007756:	d101      	bne.n	800775c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007758:	2302      	movs	r3, #2
 800775a:	e05a      	b.n	8007812 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2202      	movs	r2, #2
 8007768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007782:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	4313      	orrs	r3, r2
 800778c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a21      	ldr	r2, [pc, #132]	; (8007820 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d022      	beq.n	80077e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077a8:	d01d      	beq.n	80077e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a1d      	ldr	r2, [pc, #116]	; (8007824 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d018      	beq.n	80077e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a1b      	ldr	r2, [pc, #108]	; (8007828 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d013      	beq.n	80077e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a1a      	ldr	r2, [pc, #104]	; (800782c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d00e      	beq.n	80077e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a18      	ldr	r2, [pc, #96]	; (8007830 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d009      	beq.n	80077e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a17      	ldr	r2, [pc, #92]	; (8007834 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d004      	beq.n	80077e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a15      	ldr	r2, [pc, #84]	; (8007838 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d10c      	bne.n	8007800 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68ba      	ldr	r2, [r7, #8]
 80077fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3714      	adds	r7, #20
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	40010000 	.word	0x40010000
 8007824:	40000400 	.word	0x40000400
 8007828:	40000800 	.word	0x40000800
 800782c:	40000c00 	.word	0x40000c00
 8007830:	40010400 	.word	0x40010400
 8007834:	40014000 	.word	0x40014000
 8007838:	40001800 	.word	0x40001800

0800783c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007846:	2300      	movs	r3, #0
 8007848:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007850:	2b01      	cmp	r3, #1
 8007852:	d101      	bne.n	8007858 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007854:	2302      	movs	r3, #2
 8007856:	e03d      	b.n	80078d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	4313      	orrs	r3, r2
 800786c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	4313      	orrs	r3, r2
 800787a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	4313      	orrs	r3, r2
 8007888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4313      	orrs	r3, r2
 8007896:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	4313      	orrs	r3, r2
 80078c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e03f      	b.n	800799a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d106      	bne.n	8007934 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7fb fc58 	bl	80031e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2224      	movs	r2, #36	; 0x24
 8007938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68da      	ldr	r2, [r3, #12]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800794a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fc6d 	bl	800822c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	691a      	ldr	r2, [r3, #16]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007960:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	695a      	ldr	r2, [r3, #20]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007970:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68da      	ldr	r2, [r3, #12]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007980:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2220      	movs	r2, #32
 800798c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2220      	movs	r2, #32
 8007994:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b088      	sub	sp, #32
 80079a6:	af02      	add	r7, sp, #8
 80079a8:	60f8      	str	r0, [r7, #12]
 80079aa:	60b9      	str	r1, [r7, #8]
 80079ac:	603b      	str	r3, [r7, #0]
 80079ae:	4613      	mov	r3, r2
 80079b0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80079b2:	2300      	movs	r3, #0
 80079b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b20      	cmp	r3, #32
 80079c0:	f040 8083 	bne.w	8007aca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <HAL_UART_Transmit+0x2e>
 80079ca:	88fb      	ldrh	r3, [r7, #6]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e07b      	b.n	8007acc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d101      	bne.n	80079e2 <HAL_UART_Transmit+0x40>
 80079de:	2302      	movs	r3, #2
 80079e0:	e074      	b.n	8007acc <HAL_UART_Transmit+0x12a>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2221      	movs	r2, #33	; 0x21
 80079f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80079f8:	f7fb fd70 	bl	80034dc <HAL_GetTick>
 80079fc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	88fa      	ldrh	r2, [r7, #6]
 8007a02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	88fa      	ldrh	r2, [r7, #6]
 8007a08:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007a12:	e042      	b.n	8007a9a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	b29a      	uxth	r2, r3
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a2a:	d122      	bne.n	8007a72 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	2200      	movs	r2, #0
 8007a34:	2180      	movs	r1, #128	; 0x80
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f000 fa76 	bl	8007f28 <UART_WaitOnFlagUntilTimeout>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e042      	b.n	8007acc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	881b      	ldrh	r3, [r3, #0]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a58:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d103      	bne.n	8007a6a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	3302      	adds	r3, #2
 8007a66:	60bb      	str	r3, [r7, #8]
 8007a68:	e017      	b.n	8007a9a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	60bb      	str	r3, [r7, #8]
 8007a70:	e013      	b.n	8007a9a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	2180      	movs	r1, #128	; 0x80
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f000 fa53 	bl	8007f28 <UART_WaitOnFlagUntilTimeout>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d001      	beq.n	8007a8c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e01f      	b.n	8007acc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	1c5a      	adds	r2, r3, #1
 8007a90:	60ba      	str	r2, [r7, #8]
 8007a92:	781a      	ldrb	r2, [r3, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1b7      	bne.n	8007a14 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	9300      	str	r3, [sp, #0]
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	2140      	movs	r1, #64	; 0x40
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 fa3a 	bl	8007f28 <UART_WaitOnFlagUntilTimeout>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e006      	b.n	8007acc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2220      	movs	r2, #32
 8007ac2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	e000      	b.n	8007acc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007aca:	2302      	movs	r3, #2
  }
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3718      	adds	r7, #24
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b20      	cmp	r3, #32
 8007aec:	d166      	bne.n	8007bbc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d002      	beq.n	8007afa <HAL_UART_Receive_DMA+0x26>
 8007af4:	88fb      	ldrh	r3, [r7, #6]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e05f      	b.n	8007bbe <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d101      	bne.n	8007b0c <HAL_UART_Receive_DMA+0x38>
 8007b08:	2302      	movs	r3, #2
 8007b0a:	e058      	b.n	8007bbe <HAL_UART_Receive_DMA+0xea>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	88fa      	ldrh	r2, [r7, #6]
 8007b1e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2222      	movs	r2, #34	; 0x22
 8007b2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b32:	4a25      	ldr	r2, [pc, #148]	; (8007bc8 <HAL_UART_Receive_DMA+0xf4>)
 8007b34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b3a:	4a24      	ldr	r2, [pc, #144]	; (8007bcc <HAL_UART_Receive_DMA+0xf8>)
 8007b3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b42:	4a23      	ldr	r2, [pc, #140]	; (8007bd0 <HAL_UART_Receive_DMA+0xfc>)
 8007b44:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8007b4e:	f107 0308 	add.w	r3, r7, #8
 8007b52:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	3304      	adds	r3, #4
 8007b5e:	4619      	mov	r1, r3
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	88fb      	ldrh	r3, [r7, #6]
 8007b66:	f7fc fd27 	bl	80045b8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	613b      	str	r3, [r7, #16]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	613b      	str	r3, [r7, #16]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	613b      	str	r3, [r7, #16]
 8007b7e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68da      	ldr	r2, [r3, #12]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b96:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	695a      	ldr	r2, [r3, #20]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f042 0201 	orr.w	r2, r2, #1
 8007ba6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	695a      	ldr	r2, [r3, #20]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bb6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	e000      	b.n	8007bbe <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007bbc:	2302      	movs	r3, #2
  }
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3718      	adds	r7, #24
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	08007e11 	.word	0x08007e11
 8007bcc:	08007e79 	.word	0x08007e79
 8007bd0:	08007e95 	.word	0x08007e95

08007bd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b088      	sub	sp, #32
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	f003 030f 	and.w	r3, r3, #15
 8007c02:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10d      	bne.n	8007c26 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	f003 0320 	and.w	r3, r3, #32
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d008      	beq.n	8007c26 <HAL_UART_IRQHandler+0x52>
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	f003 0320 	and.w	r3, r3, #32
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d003      	beq.n	8007c26 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fa82 	bl	8008128 <UART_Receive_IT>
      return;
 8007c24:	e0d0      	b.n	8007dc8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 80b0 	beq.w	8007d8e <HAL_UART_IRQHandler+0x1ba>
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d105      	bne.n	8007c44 <HAL_UART_IRQHandler+0x70>
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 80a5 	beq.w	8007d8e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	f003 0301 	and.w	r3, r3, #1
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00a      	beq.n	8007c64 <HAL_UART_IRQHandler+0x90>
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d005      	beq.n	8007c64 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c5c:	f043 0201 	orr.w	r2, r3, #1
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	f003 0304 	and.w	r3, r3, #4
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00a      	beq.n	8007c84 <HAL_UART_IRQHandler+0xb0>
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f003 0301 	and.w	r3, r3, #1
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d005      	beq.n	8007c84 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c7c:	f043 0202 	orr.w	r2, r3, #2
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	f003 0302 	and.w	r3, r3, #2
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00a      	beq.n	8007ca4 <HAL_UART_IRQHandler+0xd0>
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	f003 0301 	and.w	r3, r3, #1
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d005      	beq.n	8007ca4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9c:	f043 0204 	orr.w	r2, r3, #4
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	f003 0308 	and.w	r3, r3, #8
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00f      	beq.n	8007cce <HAL_UART_IRQHandler+0xfa>
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	f003 0320 	and.w	r3, r3, #32
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d104      	bne.n	8007cc2 <HAL_UART_IRQHandler+0xee>
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d005      	beq.n	8007cce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc6:	f043 0208 	orr.w	r2, r3, #8
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d077      	beq.n	8007dc6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	f003 0320 	and.w	r3, r3, #32
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d007      	beq.n	8007cf0 <HAL_UART_IRQHandler+0x11c>
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	f003 0320 	and.w	r3, r3, #32
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d002      	beq.n	8007cf0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fa1c 	bl	8008128 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cfa:	2b40      	cmp	r3, #64	; 0x40
 8007cfc:	bf0c      	ite	eq
 8007cfe:	2301      	moveq	r3, #1
 8007d00:	2300      	movne	r3, #0
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d0a:	f003 0308 	and.w	r3, r3, #8
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d102      	bne.n	8007d18 <HAL_UART_IRQHandler+0x144>
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d031      	beq.n	8007d7c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 f965 	bl	8007fe8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d28:	2b40      	cmp	r3, #64	; 0x40
 8007d2a:	d123      	bne.n	8007d74 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	695a      	ldr	r2, [r3, #20]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d3a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d013      	beq.n	8007d6c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d48:	4a21      	ldr	r2, [pc, #132]	; (8007dd0 <HAL_UART_IRQHandler+0x1fc>)
 8007d4a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fc fc89 	bl	8004668 <HAL_DMA_Abort_IT>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d016      	beq.n	8007d8a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007d66:	4610      	mov	r0, r2
 8007d68:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d6a:	e00e      	b.n	8007d8a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f845 	bl	8007dfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d72:	e00a      	b.n	8007d8a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f841 	bl	8007dfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d7a:	e006      	b.n	8007d8a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f83d 	bl	8007dfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007d88:	e01d      	b.n	8007dc6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d8a:	bf00      	nop
    return;
 8007d8c:	e01b      	b.n	8007dc6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d008      	beq.n	8007daa <HAL_UART_IRQHandler+0x1d6>
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d003      	beq.n	8007daa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f952 	bl	800804c <UART_Transmit_IT>
    return;
 8007da8:	e00e      	b.n	8007dc8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d009      	beq.n	8007dc8 <HAL_UART_IRQHandler+0x1f4>
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d004      	beq.n	8007dc8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f99a 	bl	80080f8 <UART_EndTransmit_IT>
    return;
 8007dc4:	e000      	b.n	8007dc8 <HAL_UART_IRQHandler+0x1f4>
    return;
 8007dc6:	bf00      	nop
  }
}
 8007dc8:	3720      	adds	r7, #32
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	08008025 	.word	0x08008025

08007dd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d11e      	bne.n	8007e6a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68da      	ldr	r2, [r3, #12]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e40:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	695a      	ldr	r2, [r3, #20]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f022 0201 	bic.w	r2, r2, #1
 8007e50:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	695a      	ldr	r2, [r3, #20]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e60:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2220      	movs	r2, #32
 8007e66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f7fa fb3c 	bl	80024e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e70:	bf00      	nop
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e84:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f7ff ffae 	bl	8007de8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e8c:	bf00      	nop
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	695b      	ldr	r3, [r3, #20]
 8007eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eb0:	2b80      	cmp	r3, #128	; 0x80
 8007eb2:	bf0c      	ite	eq
 8007eb4:	2301      	moveq	r3, #1
 8007eb6:	2300      	movne	r3, #0
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b21      	cmp	r3, #33	; 0x21
 8007ec6:	d108      	bne.n	8007eda <UART_DMAError+0x46>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d005      	beq.n	8007eda <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007ed4:	68b8      	ldr	r0, [r7, #8]
 8007ed6:	f000 f871 	bl	8007fbc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	695b      	ldr	r3, [r3, #20]
 8007ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee4:	2b40      	cmp	r3, #64	; 0x40
 8007ee6:	bf0c      	ite	eq
 8007ee8:	2301      	moveq	r3, #1
 8007eea:	2300      	movne	r3, #0
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	2b22      	cmp	r3, #34	; 0x22
 8007efa:	d108      	bne.n	8007f0e <UART_DMAError+0x7a>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d005      	beq.n	8007f0e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	2200      	movs	r2, #0
 8007f06:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007f08:	68b8      	ldr	r0, [r7, #8]
 8007f0a:	f000 f86d 	bl	8007fe8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f12:	f043 0210 	orr.w	r2, r3, #16
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f1a:	68b8      	ldr	r0, [r7, #8]
 8007f1c:	f7ff ff6e 	bl	8007dfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f20:	bf00      	nop
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	603b      	str	r3, [r7, #0]
 8007f34:	4613      	mov	r3, r2
 8007f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f38:	e02c      	b.n	8007f94 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f40:	d028      	beq.n	8007f94 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d007      	beq.n	8007f58 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f48:	f7fb fac8 	bl	80034dc <HAL_GetTick>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	69ba      	ldr	r2, [r7, #24]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d21d      	bcs.n	8007f94 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f66:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	695a      	ldr	r2, [r3, #20]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f022 0201 	bic.w	r2, r2, #1
 8007f76:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2220      	movs	r2, #32
 8007f84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e00f      	b.n	8007fb4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	bf0c      	ite	eq
 8007fa4:	2301      	moveq	r3, #1
 8007fa6:	2300      	movne	r3, #0
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	461a      	mov	r2, r3
 8007fac:	79fb      	ldrb	r3, [r7, #7]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d0c3      	beq.n	8007f3a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68da      	ldr	r2, [r3, #12]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007fd2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2220      	movs	r2, #32
 8007fd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68da      	ldr	r2, [r3, #12]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007ffe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	695a      	ldr	r2, [r3, #20]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f022 0201 	bic.w	r2, r2, #1
 800800e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2220      	movs	r2, #32
 8008014:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008030:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f7ff fedc 	bl	8007dfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008044:	bf00      	nop
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800805a:	b2db      	uxtb	r3, r3
 800805c:	2b21      	cmp	r3, #33	; 0x21
 800805e:	d144      	bne.n	80080ea <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008068:	d11a      	bne.n	80080a0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	881b      	ldrh	r3, [r3, #0]
 8008074:	461a      	mov	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800807e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d105      	bne.n	8008094 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a1b      	ldr	r3, [r3, #32]
 800808c:	1c9a      	adds	r2, r3, #2
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	621a      	str	r2, [r3, #32]
 8008092:	e00e      	b.n	80080b2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a1b      	ldr	r3, [r3, #32]
 8008098:	1c5a      	adds	r2, r3, #1
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	621a      	str	r2, [r3, #32]
 800809e:	e008      	b.n	80080b2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a1b      	ldr	r3, [r3, #32]
 80080a4:	1c59      	adds	r1, r3, #1
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	6211      	str	r1, [r2, #32]
 80080aa:	781a      	ldrb	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	3b01      	subs	r3, #1
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	4619      	mov	r1, r3
 80080c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10f      	bne.n	80080e6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68da      	ldr	r2, [r3, #12]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68da      	ldr	r2, [r3, #12]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	e000      	b.n	80080ec <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80080ea:	2302      	movs	r3, #2
  }
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68da      	ldr	r2, [r3, #12]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800810e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2220      	movs	r2, #32
 8008114:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f7ff fe5b 	bl	8007dd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2b22      	cmp	r3, #34	; 0x22
 800813a:	d171      	bne.n	8008220 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008144:	d123      	bne.n	800818e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10e      	bne.n	8008172 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	b29b      	uxth	r3, r3
 800815c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008160:	b29a      	uxth	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816a:	1c9a      	adds	r2, r3, #2
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	629a      	str	r2, [r3, #40]	; 0x28
 8008170:	e029      	b.n	80081c6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	b29b      	uxth	r3, r3
 800817a:	b2db      	uxtb	r3, r3
 800817c:	b29a      	uxth	r2, r3
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008186:	1c5a      	adds	r2, r3, #1
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	629a      	str	r2, [r3, #40]	; 0x28
 800818c:	e01b      	b.n	80081c6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10a      	bne.n	80081ac <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	6858      	ldr	r0, [r3, #4]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a0:	1c59      	adds	r1, r3, #1
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	6291      	str	r1, [r2, #40]	; 0x28
 80081a6:	b2c2      	uxtb	r2, r0
 80081a8:	701a      	strb	r2, [r3, #0]
 80081aa:	e00c      	b.n	80081c6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	b2da      	uxtb	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b8:	1c58      	adds	r0, r3, #1
 80081ba:	6879      	ldr	r1, [r7, #4]
 80081bc:	6288      	str	r0, [r1, #40]	; 0x28
 80081be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80081c2:	b2d2      	uxtb	r2, r2
 80081c4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	3b01      	subs	r3, #1
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	4619      	mov	r1, r3
 80081d4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d120      	bne.n	800821c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68da      	ldr	r2, [r3, #12]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f022 0220 	bic.w	r2, r2, #32
 80081e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68da      	ldr	r2, [r3, #12]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	695a      	ldr	r2, [r3, #20]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f022 0201 	bic.w	r2, r2, #1
 8008208:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2220      	movs	r2, #32
 800820e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7fa f968 	bl	80024e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008218:	2300      	movs	r3, #0
 800821a:	e002      	b.n	8008222 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800821c:	2300      	movs	r3, #0
 800821e:	e000      	b.n	8008222 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008220:	2302      	movs	r3, #2
  }
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
	...

0800822c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800822c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008230:	b0bd      	sub	sp, #244	; 0xf4
 8008232:	af00      	add	r7, sp, #0
 8008234:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008248:	68d9      	ldr	r1, [r3, #12]
 800824a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	ea40 0301 	orr.w	r3, r0, r1
 8008254:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800825a:	689a      	ldr	r2, [r3, #8]
 800825c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	431a      	orrs	r2, r3
 8008264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	431a      	orrs	r2, r3
 800826c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	4313      	orrs	r3, r2
 8008274:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8008278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008284:	f021 010c 	bic.w	r1, r1, #12
 8008288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008292:	430b      	orrs	r3, r1
 8008294:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80082a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a6:	6999      	ldr	r1, [r3, #24]
 80082a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	ea40 0301 	orr.w	r3, r0, r1
 80082b2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082b8:	69db      	ldr	r3, [r3, #28]
 80082ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082be:	f040 81a5 	bne.w	800860c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80082c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	4bcd      	ldr	r3, [pc, #820]	; (8008600 <UART_SetConfig+0x3d4>)
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d006      	beq.n	80082dc <UART_SetConfig+0xb0>
 80082ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	4bcb      	ldr	r3, [pc, #812]	; (8008604 <UART_SetConfig+0x3d8>)
 80082d6:	429a      	cmp	r2, r3
 80082d8:	f040 80cb 	bne.w	8008472 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082dc:	f7fd fcac 	bl	8005c38 <HAL_RCC_GetPCLK2Freq>
 80082e0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80082e8:	461c      	mov	r4, r3
 80082ea:	f04f 0500 	mov.w	r5, #0
 80082ee:	4622      	mov	r2, r4
 80082f0:	462b      	mov	r3, r5
 80082f2:	1891      	adds	r1, r2, r2
 80082f4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80082f8:	415b      	adcs	r3, r3
 80082fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80082fe:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008302:	1912      	adds	r2, r2, r4
 8008304:	eb45 0303 	adc.w	r3, r5, r3
 8008308:	f04f 0000 	mov.w	r0, #0
 800830c:	f04f 0100 	mov.w	r1, #0
 8008310:	00d9      	lsls	r1, r3, #3
 8008312:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008316:	00d0      	lsls	r0, r2, #3
 8008318:	4602      	mov	r2, r0
 800831a:	460b      	mov	r3, r1
 800831c:	1911      	adds	r1, r2, r4
 800831e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8008322:	416b      	adcs	r3, r5
 8008324:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	461a      	mov	r2, r3
 8008330:	f04f 0300 	mov.w	r3, #0
 8008334:	1891      	adds	r1, r2, r2
 8008336:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800833a:	415b      	adcs	r3, r3
 800833c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008340:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008344:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008348:	f7f8 fc40 	bl	8000bcc <__aeabi_uldivmod>
 800834c:	4602      	mov	r2, r0
 800834e:	460b      	mov	r3, r1
 8008350:	4bad      	ldr	r3, [pc, #692]	; (8008608 <UART_SetConfig+0x3dc>)
 8008352:	fba3 2302 	umull	r2, r3, r3, r2
 8008356:	095b      	lsrs	r3, r3, #5
 8008358:	011e      	lsls	r6, r3, #4
 800835a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800835e:	461c      	mov	r4, r3
 8008360:	f04f 0500 	mov.w	r5, #0
 8008364:	4622      	mov	r2, r4
 8008366:	462b      	mov	r3, r5
 8008368:	1891      	adds	r1, r2, r2
 800836a:	67b9      	str	r1, [r7, #120]	; 0x78
 800836c:	415b      	adcs	r3, r3
 800836e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008370:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008374:	1912      	adds	r2, r2, r4
 8008376:	eb45 0303 	adc.w	r3, r5, r3
 800837a:	f04f 0000 	mov.w	r0, #0
 800837e:	f04f 0100 	mov.w	r1, #0
 8008382:	00d9      	lsls	r1, r3, #3
 8008384:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008388:	00d0      	lsls	r0, r2, #3
 800838a:	4602      	mov	r2, r0
 800838c:	460b      	mov	r3, r1
 800838e:	1911      	adds	r1, r2, r4
 8008390:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008394:	416b      	adcs	r3, r5
 8008396:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800839a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	461a      	mov	r2, r3
 80083a2:	f04f 0300 	mov.w	r3, #0
 80083a6:	1891      	adds	r1, r2, r2
 80083a8:	6739      	str	r1, [r7, #112]	; 0x70
 80083aa:	415b      	adcs	r3, r3
 80083ac:	677b      	str	r3, [r7, #116]	; 0x74
 80083ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80083b2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80083b6:	f7f8 fc09 	bl	8000bcc <__aeabi_uldivmod>
 80083ba:	4602      	mov	r2, r0
 80083bc:	460b      	mov	r3, r1
 80083be:	4b92      	ldr	r3, [pc, #584]	; (8008608 <UART_SetConfig+0x3dc>)
 80083c0:	fba3 1302 	umull	r1, r3, r3, r2
 80083c4:	095b      	lsrs	r3, r3, #5
 80083c6:	2164      	movs	r1, #100	; 0x64
 80083c8:	fb01 f303 	mul.w	r3, r1, r3
 80083cc:	1ad3      	subs	r3, r2, r3
 80083ce:	00db      	lsls	r3, r3, #3
 80083d0:	3332      	adds	r3, #50	; 0x32
 80083d2:	4a8d      	ldr	r2, [pc, #564]	; (8008608 <UART_SetConfig+0x3dc>)
 80083d4:	fba2 2303 	umull	r2, r3, r2, r3
 80083d8:	095b      	lsrs	r3, r3, #5
 80083da:	005b      	lsls	r3, r3, #1
 80083dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80083e0:	441e      	add	r6, r3
 80083e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80083e6:	4618      	mov	r0, r3
 80083e8:	f04f 0100 	mov.w	r1, #0
 80083ec:	4602      	mov	r2, r0
 80083ee:	460b      	mov	r3, r1
 80083f0:	1894      	adds	r4, r2, r2
 80083f2:	66bc      	str	r4, [r7, #104]	; 0x68
 80083f4:	415b      	adcs	r3, r3
 80083f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083f8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80083fc:	1812      	adds	r2, r2, r0
 80083fe:	eb41 0303 	adc.w	r3, r1, r3
 8008402:	f04f 0400 	mov.w	r4, #0
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	00dd      	lsls	r5, r3, #3
 800840c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008410:	00d4      	lsls	r4, r2, #3
 8008412:	4622      	mov	r2, r4
 8008414:	462b      	mov	r3, r5
 8008416:	1814      	adds	r4, r2, r0
 8008418:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800841c:	414b      	adcs	r3, r1
 800841e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	461a      	mov	r2, r3
 800842a:	f04f 0300 	mov.w	r3, #0
 800842e:	1891      	adds	r1, r2, r2
 8008430:	6639      	str	r1, [r7, #96]	; 0x60
 8008432:	415b      	adcs	r3, r3
 8008434:	667b      	str	r3, [r7, #100]	; 0x64
 8008436:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800843a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800843e:	f7f8 fbc5 	bl	8000bcc <__aeabi_uldivmod>
 8008442:	4602      	mov	r2, r0
 8008444:	460b      	mov	r3, r1
 8008446:	4b70      	ldr	r3, [pc, #448]	; (8008608 <UART_SetConfig+0x3dc>)
 8008448:	fba3 1302 	umull	r1, r3, r3, r2
 800844c:	095b      	lsrs	r3, r3, #5
 800844e:	2164      	movs	r1, #100	; 0x64
 8008450:	fb01 f303 	mul.w	r3, r1, r3
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	00db      	lsls	r3, r3, #3
 8008458:	3332      	adds	r3, #50	; 0x32
 800845a:	4a6b      	ldr	r2, [pc, #428]	; (8008608 <UART_SetConfig+0x3dc>)
 800845c:	fba2 2303 	umull	r2, r3, r2, r3
 8008460:	095b      	lsrs	r3, r3, #5
 8008462:	f003 0207 	and.w	r2, r3, #7
 8008466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4432      	add	r2, r6
 800846e:	609a      	str	r2, [r3, #8]
 8008470:	e26d      	b.n	800894e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008472:	f7fd fbcd 	bl	8005c10 <HAL_RCC_GetPCLK1Freq>
 8008476:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800847a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800847e:	461c      	mov	r4, r3
 8008480:	f04f 0500 	mov.w	r5, #0
 8008484:	4622      	mov	r2, r4
 8008486:	462b      	mov	r3, r5
 8008488:	1891      	adds	r1, r2, r2
 800848a:	65b9      	str	r1, [r7, #88]	; 0x58
 800848c:	415b      	adcs	r3, r3
 800848e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008490:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008494:	1912      	adds	r2, r2, r4
 8008496:	eb45 0303 	adc.w	r3, r5, r3
 800849a:	f04f 0000 	mov.w	r0, #0
 800849e:	f04f 0100 	mov.w	r1, #0
 80084a2:	00d9      	lsls	r1, r3, #3
 80084a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80084a8:	00d0      	lsls	r0, r2, #3
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	1911      	adds	r1, r2, r4
 80084b0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80084b4:	416b      	adcs	r3, r5
 80084b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	461a      	mov	r2, r3
 80084c2:	f04f 0300 	mov.w	r3, #0
 80084c6:	1891      	adds	r1, r2, r2
 80084c8:	6539      	str	r1, [r7, #80]	; 0x50
 80084ca:	415b      	adcs	r3, r3
 80084cc:	657b      	str	r3, [r7, #84]	; 0x54
 80084ce:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80084d2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80084d6:	f7f8 fb79 	bl	8000bcc <__aeabi_uldivmod>
 80084da:	4602      	mov	r2, r0
 80084dc:	460b      	mov	r3, r1
 80084de:	4b4a      	ldr	r3, [pc, #296]	; (8008608 <UART_SetConfig+0x3dc>)
 80084e0:	fba3 2302 	umull	r2, r3, r3, r2
 80084e4:	095b      	lsrs	r3, r3, #5
 80084e6:	011e      	lsls	r6, r3, #4
 80084e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80084ec:	461c      	mov	r4, r3
 80084ee:	f04f 0500 	mov.w	r5, #0
 80084f2:	4622      	mov	r2, r4
 80084f4:	462b      	mov	r3, r5
 80084f6:	1891      	adds	r1, r2, r2
 80084f8:	64b9      	str	r1, [r7, #72]	; 0x48
 80084fa:	415b      	adcs	r3, r3
 80084fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008502:	1912      	adds	r2, r2, r4
 8008504:	eb45 0303 	adc.w	r3, r5, r3
 8008508:	f04f 0000 	mov.w	r0, #0
 800850c:	f04f 0100 	mov.w	r1, #0
 8008510:	00d9      	lsls	r1, r3, #3
 8008512:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008516:	00d0      	lsls	r0, r2, #3
 8008518:	4602      	mov	r2, r0
 800851a:	460b      	mov	r3, r1
 800851c:	1911      	adds	r1, r2, r4
 800851e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8008522:	416b      	adcs	r3, r5
 8008524:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	461a      	mov	r2, r3
 8008530:	f04f 0300 	mov.w	r3, #0
 8008534:	1891      	adds	r1, r2, r2
 8008536:	6439      	str	r1, [r7, #64]	; 0x40
 8008538:	415b      	adcs	r3, r3
 800853a:	647b      	str	r3, [r7, #68]	; 0x44
 800853c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008540:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008544:	f7f8 fb42 	bl	8000bcc <__aeabi_uldivmod>
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	4b2e      	ldr	r3, [pc, #184]	; (8008608 <UART_SetConfig+0x3dc>)
 800854e:	fba3 1302 	umull	r1, r3, r3, r2
 8008552:	095b      	lsrs	r3, r3, #5
 8008554:	2164      	movs	r1, #100	; 0x64
 8008556:	fb01 f303 	mul.w	r3, r1, r3
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	00db      	lsls	r3, r3, #3
 800855e:	3332      	adds	r3, #50	; 0x32
 8008560:	4a29      	ldr	r2, [pc, #164]	; (8008608 <UART_SetConfig+0x3dc>)
 8008562:	fba2 2303 	umull	r2, r3, r2, r3
 8008566:	095b      	lsrs	r3, r3, #5
 8008568:	005b      	lsls	r3, r3, #1
 800856a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800856e:	441e      	add	r6, r3
 8008570:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008574:	4618      	mov	r0, r3
 8008576:	f04f 0100 	mov.w	r1, #0
 800857a:	4602      	mov	r2, r0
 800857c:	460b      	mov	r3, r1
 800857e:	1894      	adds	r4, r2, r2
 8008580:	63bc      	str	r4, [r7, #56]	; 0x38
 8008582:	415b      	adcs	r3, r3
 8008584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008586:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800858a:	1812      	adds	r2, r2, r0
 800858c:	eb41 0303 	adc.w	r3, r1, r3
 8008590:	f04f 0400 	mov.w	r4, #0
 8008594:	f04f 0500 	mov.w	r5, #0
 8008598:	00dd      	lsls	r5, r3, #3
 800859a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800859e:	00d4      	lsls	r4, r2, #3
 80085a0:	4622      	mov	r2, r4
 80085a2:	462b      	mov	r3, r5
 80085a4:	1814      	adds	r4, r2, r0
 80085a6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80085aa:	414b      	adcs	r3, r1
 80085ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	461a      	mov	r2, r3
 80085b8:	f04f 0300 	mov.w	r3, #0
 80085bc:	1891      	adds	r1, r2, r2
 80085be:	6339      	str	r1, [r7, #48]	; 0x30
 80085c0:	415b      	adcs	r3, r3
 80085c2:	637b      	str	r3, [r7, #52]	; 0x34
 80085c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80085c8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80085cc:	f7f8 fafe 	bl	8000bcc <__aeabi_uldivmod>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	4b0c      	ldr	r3, [pc, #48]	; (8008608 <UART_SetConfig+0x3dc>)
 80085d6:	fba3 1302 	umull	r1, r3, r3, r2
 80085da:	095b      	lsrs	r3, r3, #5
 80085dc:	2164      	movs	r1, #100	; 0x64
 80085de:	fb01 f303 	mul.w	r3, r1, r3
 80085e2:	1ad3      	subs	r3, r2, r3
 80085e4:	00db      	lsls	r3, r3, #3
 80085e6:	3332      	adds	r3, #50	; 0x32
 80085e8:	4a07      	ldr	r2, [pc, #28]	; (8008608 <UART_SetConfig+0x3dc>)
 80085ea:	fba2 2303 	umull	r2, r3, r2, r3
 80085ee:	095b      	lsrs	r3, r3, #5
 80085f0:	f003 0207 	and.w	r2, r3, #7
 80085f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4432      	add	r2, r6
 80085fc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80085fe:	e1a6      	b.n	800894e <UART_SetConfig+0x722>
 8008600:	40011000 	.word	0x40011000
 8008604:	40011400 	.word	0x40011400
 8008608:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800860c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	4bd1      	ldr	r3, [pc, #836]	; (8008958 <UART_SetConfig+0x72c>)
 8008614:	429a      	cmp	r2, r3
 8008616:	d006      	beq.n	8008626 <UART_SetConfig+0x3fa>
 8008618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	4bcf      	ldr	r3, [pc, #828]	; (800895c <UART_SetConfig+0x730>)
 8008620:	429a      	cmp	r2, r3
 8008622:	f040 80ca 	bne.w	80087ba <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008626:	f7fd fb07 	bl	8005c38 <HAL_RCC_GetPCLK2Freq>
 800862a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800862e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008632:	461c      	mov	r4, r3
 8008634:	f04f 0500 	mov.w	r5, #0
 8008638:	4622      	mov	r2, r4
 800863a:	462b      	mov	r3, r5
 800863c:	1891      	adds	r1, r2, r2
 800863e:	62b9      	str	r1, [r7, #40]	; 0x28
 8008640:	415b      	adcs	r3, r3
 8008642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008644:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008648:	1912      	adds	r2, r2, r4
 800864a:	eb45 0303 	adc.w	r3, r5, r3
 800864e:	f04f 0000 	mov.w	r0, #0
 8008652:	f04f 0100 	mov.w	r1, #0
 8008656:	00d9      	lsls	r1, r3, #3
 8008658:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800865c:	00d0      	lsls	r0, r2, #3
 800865e:	4602      	mov	r2, r0
 8008660:	460b      	mov	r3, r1
 8008662:	eb12 0a04 	adds.w	sl, r2, r4
 8008666:	eb43 0b05 	adc.w	fp, r3, r5
 800866a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	4618      	mov	r0, r3
 8008672:	f04f 0100 	mov.w	r1, #0
 8008676:	f04f 0200 	mov.w	r2, #0
 800867a:	f04f 0300 	mov.w	r3, #0
 800867e:	008b      	lsls	r3, r1, #2
 8008680:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008684:	0082      	lsls	r2, r0, #2
 8008686:	4650      	mov	r0, sl
 8008688:	4659      	mov	r1, fp
 800868a:	f7f8 fa9f 	bl	8000bcc <__aeabi_uldivmod>
 800868e:	4602      	mov	r2, r0
 8008690:	460b      	mov	r3, r1
 8008692:	4bb3      	ldr	r3, [pc, #716]	; (8008960 <UART_SetConfig+0x734>)
 8008694:	fba3 2302 	umull	r2, r3, r3, r2
 8008698:	095b      	lsrs	r3, r3, #5
 800869a:	011e      	lsls	r6, r3, #4
 800869c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086a0:	4618      	mov	r0, r3
 80086a2:	f04f 0100 	mov.w	r1, #0
 80086a6:	4602      	mov	r2, r0
 80086a8:	460b      	mov	r3, r1
 80086aa:	1894      	adds	r4, r2, r2
 80086ac:	623c      	str	r4, [r7, #32]
 80086ae:	415b      	adcs	r3, r3
 80086b0:	627b      	str	r3, [r7, #36]	; 0x24
 80086b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80086b6:	1812      	adds	r2, r2, r0
 80086b8:	eb41 0303 	adc.w	r3, r1, r3
 80086bc:	f04f 0400 	mov.w	r4, #0
 80086c0:	f04f 0500 	mov.w	r5, #0
 80086c4:	00dd      	lsls	r5, r3, #3
 80086c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80086ca:	00d4      	lsls	r4, r2, #3
 80086cc:	4622      	mov	r2, r4
 80086ce:	462b      	mov	r3, r5
 80086d0:	1814      	adds	r4, r2, r0
 80086d2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80086d6:	414b      	adcs	r3, r1
 80086d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80086dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f04f 0100 	mov.w	r1, #0
 80086e8:	f04f 0200 	mov.w	r2, #0
 80086ec:	f04f 0300 	mov.w	r3, #0
 80086f0:	008b      	lsls	r3, r1, #2
 80086f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80086f6:	0082      	lsls	r2, r0, #2
 80086f8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80086fc:	f7f8 fa66 	bl	8000bcc <__aeabi_uldivmod>
 8008700:	4602      	mov	r2, r0
 8008702:	460b      	mov	r3, r1
 8008704:	4b96      	ldr	r3, [pc, #600]	; (8008960 <UART_SetConfig+0x734>)
 8008706:	fba3 1302 	umull	r1, r3, r3, r2
 800870a:	095b      	lsrs	r3, r3, #5
 800870c:	2164      	movs	r1, #100	; 0x64
 800870e:	fb01 f303 	mul.w	r3, r1, r3
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	011b      	lsls	r3, r3, #4
 8008716:	3332      	adds	r3, #50	; 0x32
 8008718:	4a91      	ldr	r2, [pc, #580]	; (8008960 <UART_SetConfig+0x734>)
 800871a:	fba2 2303 	umull	r2, r3, r2, r3
 800871e:	095b      	lsrs	r3, r3, #5
 8008720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008724:	441e      	add	r6, r3
 8008726:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800872a:	4618      	mov	r0, r3
 800872c:	f04f 0100 	mov.w	r1, #0
 8008730:	4602      	mov	r2, r0
 8008732:	460b      	mov	r3, r1
 8008734:	1894      	adds	r4, r2, r2
 8008736:	61bc      	str	r4, [r7, #24]
 8008738:	415b      	adcs	r3, r3
 800873a:	61fb      	str	r3, [r7, #28]
 800873c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008740:	1812      	adds	r2, r2, r0
 8008742:	eb41 0303 	adc.w	r3, r1, r3
 8008746:	f04f 0400 	mov.w	r4, #0
 800874a:	f04f 0500 	mov.w	r5, #0
 800874e:	00dd      	lsls	r5, r3, #3
 8008750:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008754:	00d4      	lsls	r4, r2, #3
 8008756:	4622      	mov	r2, r4
 8008758:	462b      	mov	r3, r5
 800875a:	1814      	adds	r4, r2, r0
 800875c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8008760:	414b      	adcs	r3, r1
 8008762:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	4618      	mov	r0, r3
 800876e:	f04f 0100 	mov.w	r1, #0
 8008772:	f04f 0200 	mov.w	r2, #0
 8008776:	f04f 0300 	mov.w	r3, #0
 800877a:	008b      	lsls	r3, r1, #2
 800877c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008780:	0082      	lsls	r2, r0, #2
 8008782:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008786:	f7f8 fa21 	bl	8000bcc <__aeabi_uldivmod>
 800878a:	4602      	mov	r2, r0
 800878c:	460b      	mov	r3, r1
 800878e:	4b74      	ldr	r3, [pc, #464]	; (8008960 <UART_SetConfig+0x734>)
 8008790:	fba3 1302 	umull	r1, r3, r3, r2
 8008794:	095b      	lsrs	r3, r3, #5
 8008796:	2164      	movs	r1, #100	; 0x64
 8008798:	fb01 f303 	mul.w	r3, r1, r3
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	011b      	lsls	r3, r3, #4
 80087a0:	3332      	adds	r3, #50	; 0x32
 80087a2:	4a6f      	ldr	r2, [pc, #444]	; (8008960 <UART_SetConfig+0x734>)
 80087a4:	fba2 2303 	umull	r2, r3, r2, r3
 80087a8:	095b      	lsrs	r3, r3, #5
 80087aa:	f003 020f 	and.w	r2, r3, #15
 80087ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4432      	add	r2, r6
 80087b6:	609a      	str	r2, [r3, #8]
 80087b8:	e0c9      	b.n	800894e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80087ba:	f7fd fa29 	bl	8005c10 <HAL_RCC_GetPCLK1Freq>
 80087be:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80087c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80087c6:	461c      	mov	r4, r3
 80087c8:	f04f 0500 	mov.w	r5, #0
 80087cc:	4622      	mov	r2, r4
 80087ce:	462b      	mov	r3, r5
 80087d0:	1891      	adds	r1, r2, r2
 80087d2:	6139      	str	r1, [r7, #16]
 80087d4:	415b      	adcs	r3, r3
 80087d6:	617b      	str	r3, [r7, #20]
 80087d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80087dc:	1912      	adds	r2, r2, r4
 80087de:	eb45 0303 	adc.w	r3, r5, r3
 80087e2:	f04f 0000 	mov.w	r0, #0
 80087e6:	f04f 0100 	mov.w	r1, #0
 80087ea:	00d9      	lsls	r1, r3, #3
 80087ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80087f0:	00d0      	lsls	r0, r2, #3
 80087f2:	4602      	mov	r2, r0
 80087f4:	460b      	mov	r3, r1
 80087f6:	eb12 0804 	adds.w	r8, r2, r4
 80087fa:	eb43 0905 	adc.w	r9, r3, r5
 80087fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	4618      	mov	r0, r3
 8008806:	f04f 0100 	mov.w	r1, #0
 800880a:	f04f 0200 	mov.w	r2, #0
 800880e:	f04f 0300 	mov.w	r3, #0
 8008812:	008b      	lsls	r3, r1, #2
 8008814:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008818:	0082      	lsls	r2, r0, #2
 800881a:	4640      	mov	r0, r8
 800881c:	4649      	mov	r1, r9
 800881e:	f7f8 f9d5 	bl	8000bcc <__aeabi_uldivmod>
 8008822:	4602      	mov	r2, r0
 8008824:	460b      	mov	r3, r1
 8008826:	4b4e      	ldr	r3, [pc, #312]	; (8008960 <UART_SetConfig+0x734>)
 8008828:	fba3 2302 	umull	r2, r3, r3, r2
 800882c:	095b      	lsrs	r3, r3, #5
 800882e:	011e      	lsls	r6, r3, #4
 8008830:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008834:	4618      	mov	r0, r3
 8008836:	f04f 0100 	mov.w	r1, #0
 800883a:	4602      	mov	r2, r0
 800883c:	460b      	mov	r3, r1
 800883e:	1894      	adds	r4, r2, r2
 8008840:	60bc      	str	r4, [r7, #8]
 8008842:	415b      	adcs	r3, r3
 8008844:	60fb      	str	r3, [r7, #12]
 8008846:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800884a:	1812      	adds	r2, r2, r0
 800884c:	eb41 0303 	adc.w	r3, r1, r3
 8008850:	f04f 0400 	mov.w	r4, #0
 8008854:	f04f 0500 	mov.w	r5, #0
 8008858:	00dd      	lsls	r5, r3, #3
 800885a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800885e:	00d4      	lsls	r4, r2, #3
 8008860:	4622      	mov	r2, r4
 8008862:	462b      	mov	r3, r5
 8008864:	1814      	adds	r4, r2, r0
 8008866:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800886a:	414b      	adcs	r3, r1
 800886c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	4618      	mov	r0, r3
 8008878:	f04f 0100 	mov.w	r1, #0
 800887c:	f04f 0200 	mov.w	r2, #0
 8008880:	f04f 0300 	mov.w	r3, #0
 8008884:	008b      	lsls	r3, r1, #2
 8008886:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800888a:	0082      	lsls	r2, r0, #2
 800888c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008890:	f7f8 f99c 	bl	8000bcc <__aeabi_uldivmod>
 8008894:	4602      	mov	r2, r0
 8008896:	460b      	mov	r3, r1
 8008898:	4b31      	ldr	r3, [pc, #196]	; (8008960 <UART_SetConfig+0x734>)
 800889a:	fba3 1302 	umull	r1, r3, r3, r2
 800889e:	095b      	lsrs	r3, r3, #5
 80088a0:	2164      	movs	r1, #100	; 0x64
 80088a2:	fb01 f303 	mul.w	r3, r1, r3
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	011b      	lsls	r3, r3, #4
 80088aa:	3332      	adds	r3, #50	; 0x32
 80088ac:	4a2c      	ldr	r2, [pc, #176]	; (8008960 <UART_SetConfig+0x734>)
 80088ae:	fba2 2303 	umull	r2, r3, r2, r3
 80088b2:	095b      	lsrs	r3, r3, #5
 80088b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088b8:	441e      	add	r6, r3
 80088ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088be:	4618      	mov	r0, r3
 80088c0:	f04f 0100 	mov.w	r1, #0
 80088c4:	4602      	mov	r2, r0
 80088c6:	460b      	mov	r3, r1
 80088c8:	1894      	adds	r4, r2, r2
 80088ca:	603c      	str	r4, [r7, #0]
 80088cc:	415b      	adcs	r3, r3
 80088ce:	607b      	str	r3, [r7, #4]
 80088d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088d4:	1812      	adds	r2, r2, r0
 80088d6:	eb41 0303 	adc.w	r3, r1, r3
 80088da:	f04f 0400 	mov.w	r4, #0
 80088de:	f04f 0500 	mov.w	r5, #0
 80088e2:	00dd      	lsls	r5, r3, #3
 80088e4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80088e8:	00d4      	lsls	r4, r2, #3
 80088ea:	4622      	mov	r2, r4
 80088ec:	462b      	mov	r3, r5
 80088ee:	1814      	adds	r4, r2, r0
 80088f0:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80088f4:	414b      	adcs	r3, r1
 80088f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80088fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	4618      	mov	r0, r3
 8008902:	f04f 0100 	mov.w	r1, #0
 8008906:	f04f 0200 	mov.w	r2, #0
 800890a:	f04f 0300 	mov.w	r3, #0
 800890e:	008b      	lsls	r3, r1, #2
 8008910:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008914:	0082      	lsls	r2, r0, #2
 8008916:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800891a:	f7f8 f957 	bl	8000bcc <__aeabi_uldivmod>
 800891e:	4602      	mov	r2, r0
 8008920:	460b      	mov	r3, r1
 8008922:	4b0f      	ldr	r3, [pc, #60]	; (8008960 <UART_SetConfig+0x734>)
 8008924:	fba3 1302 	umull	r1, r3, r3, r2
 8008928:	095b      	lsrs	r3, r3, #5
 800892a:	2164      	movs	r1, #100	; 0x64
 800892c:	fb01 f303 	mul.w	r3, r1, r3
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	011b      	lsls	r3, r3, #4
 8008934:	3332      	adds	r3, #50	; 0x32
 8008936:	4a0a      	ldr	r2, [pc, #40]	; (8008960 <UART_SetConfig+0x734>)
 8008938:	fba2 2303 	umull	r2, r3, r2, r3
 800893c:	095b      	lsrs	r3, r3, #5
 800893e:	f003 020f 	and.w	r2, r3, #15
 8008942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4432      	add	r2, r6
 800894a:	609a      	str	r2, [r3, #8]
}
 800894c:	e7ff      	b.n	800894e <UART_SetConfig+0x722>
 800894e:	bf00      	nop
 8008950:	37f4      	adds	r7, #244	; 0xf4
 8008952:	46bd      	mov	sp, r7
 8008954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008958:	40011000 	.word	0x40011000
 800895c:	40011400 	.word	0x40011400
 8008960:	51eb851f 	.word	0x51eb851f

08008964 <__libc_init_array>:
 8008964:	b570      	push	{r4, r5, r6, lr}
 8008966:	4d0d      	ldr	r5, [pc, #52]	; (800899c <__libc_init_array+0x38>)
 8008968:	4c0d      	ldr	r4, [pc, #52]	; (80089a0 <__libc_init_array+0x3c>)
 800896a:	1b64      	subs	r4, r4, r5
 800896c:	10a4      	asrs	r4, r4, #2
 800896e:	2600      	movs	r6, #0
 8008970:	42a6      	cmp	r6, r4
 8008972:	d109      	bne.n	8008988 <__libc_init_array+0x24>
 8008974:	4d0b      	ldr	r5, [pc, #44]	; (80089a4 <__libc_init_array+0x40>)
 8008976:	4c0c      	ldr	r4, [pc, #48]	; (80089a8 <__libc_init_array+0x44>)
 8008978:	f000 f820 	bl	80089bc <_init>
 800897c:	1b64      	subs	r4, r4, r5
 800897e:	10a4      	asrs	r4, r4, #2
 8008980:	2600      	movs	r6, #0
 8008982:	42a6      	cmp	r6, r4
 8008984:	d105      	bne.n	8008992 <__libc_init_array+0x2e>
 8008986:	bd70      	pop	{r4, r5, r6, pc}
 8008988:	f855 3b04 	ldr.w	r3, [r5], #4
 800898c:	4798      	blx	r3
 800898e:	3601      	adds	r6, #1
 8008990:	e7ee      	b.n	8008970 <__libc_init_array+0xc>
 8008992:	f855 3b04 	ldr.w	r3, [r5], #4
 8008996:	4798      	blx	r3
 8008998:	3601      	adds	r6, #1
 800899a:	e7f2      	b.n	8008982 <__libc_init_array+0x1e>
 800899c:	08008a14 	.word	0x08008a14
 80089a0:	08008a14 	.word	0x08008a14
 80089a4:	08008a14 	.word	0x08008a14
 80089a8:	08008a18 	.word	0x08008a18

080089ac <memset>:
 80089ac:	4402      	add	r2, r0
 80089ae:	4603      	mov	r3, r0
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d100      	bne.n	80089b6 <memset+0xa>
 80089b4:	4770      	bx	lr
 80089b6:	f803 1b01 	strb.w	r1, [r3], #1
 80089ba:	e7f9      	b.n	80089b0 <memset+0x4>

080089bc <_init>:
 80089bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089be:	bf00      	nop
 80089c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089c2:	bc08      	pop	{r3}
 80089c4:	469e      	mov	lr, r3
 80089c6:	4770      	bx	lr

080089c8 <_fini>:
 80089c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ca:	bf00      	nop
 80089cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ce:	bc08      	pop	{r3}
 80089d0:	469e      	mov	lr, r3
 80089d2:	4770      	bx	lr
