
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cd4  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08009e88  08009e88  00019e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a138  0800a138  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a138  0800a138  0001a138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a140  0800a140  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a140  0800a140  0001a140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a144  0800a144  0001a144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b4  20000000  0800a148  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  200001b8  0800a2fc  000201b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  0800a2fc  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aac5  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bee  00000000  00000000  0003aca9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  0003e898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001308  00000000  00000000  0003fd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f0e  00000000  00000000  00041068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019af7  00000000  00000000  00067f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1c01  00000000  00000000  00081a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016366e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c30  00000000  00000000  001636c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001b8 	.word	0x200001b8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009e6c 	.word	0x08009e6c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001bc 	.word	0x200001bc
 80001ec:	08009e6c 	.word	0x08009e6c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <pid_need_compute>:

	return pid;
}

bool pid_need_compute(PID_t pid)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	// Check if the PID period has elapsed
	return(HAL_GetTick() - pid->lasttime >= pid->sampletime) ? true : false;
 8000ef8:	f002 fa0e 	bl	8003318 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f02:	1ad2      	subs	r2, r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	bf2c      	ite	cs
 8000f0c:	2301      	movcs	r3, #1
 8000f0e:	2300      	movcc	r3, #0
 8000f10:	b2db      	uxtb	r3, r3
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <pid_compute>:
void pid_compute(PID_t pid)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b086      	sub	sp, #24
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
	// Check if control is enabled
	if (!pid->automode)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f000 8084 	beq.w	8001036 <pid_compute+0x11c>
		return ;
	
	float in = *(pid->input);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	613b      	str	r3, [r7, #16]
	// Compute error
	float error = (*(pid->setpoint)) - in;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	ed93 7a00 	vldr	s14, [r3]
 8000f3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f46:	edc7 7a03 	vstr	s15, [r7, #12]
	// Compute integral
	pid->iterm += (pid->Ki * error);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	edd3 6a04 	vldr	s13, [r3, #16]
 8000f56:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	edc3 7a08 	vstr	s15, [r3, #32]
	if (pid->iterm > pid->omax)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7c:	dd04      	ble.n	8000f88 <pid_compute+0x6e>
		pid->iterm = pid->omax;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69da      	ldr	r2, [r3, #28]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	621a      	str	r2, [r3, #32]
 8000f86:	e00e      	b.n	8000fa6 <pid_compute+0x8c>
	else if (pid->iterm < pid->omin)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9c:	d503      	bpl.n	8000fa6 <pid_compute+0x8c>
		pid->iterm = pid->omin;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	699a      	ldr	r2, [r3, #24]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	621a      	str	r2, [r3, #32]
	// Compute differential on input
	float dinput = in - pid->lastin;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000fac:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fb4:	edc7 7a02 	vstr	s15, [r7, #8]
	// Compute PID output
	float out = pid->Kp * error + pid->iterm - pid->Kd * dinput;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	ed93 7a03 	vldr	s14, [r3, #12]
 8000fbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	edd3 7a08 	vldr	s15, [r3, #32]
 8000fcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	edd3 6a05 	vldr	s13, [r3, #20]
 8000fd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fe2:	edc7 7a05 	vstr	s15, [r7, #20]
	// Apply limit to output value
	if (out > pid->omax)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	edd3 7a07 	vldr	s15, [r3, #28]
 8000fec:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ff0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff8:	dd03      	ble.n	8001002 <pid_compute+0xe8>
		out = pid->omax;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	e00c      	b.n	800101c <pid_compute+0x102>
	else if (out < pid->omin)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	edd3 7a06 	vldr	s15, [r3, #24]
 8001008:	ed97 7a05 	vldr	s14, [r7, #20]
 800100c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001014:	d502      	bpl.n	800101c <pid_compute+0x102>
		out = pid->omin;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	617b      	str	r3, [r7, #20]
	// Output to pointed variable
	(*pid->output) = out;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	601a      	str	r2, [r3, #0]
	// Keep track of some variables for next execution
	pid->lastin = in;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
	pid->lasttime = HAL_GetTick();
 800102a:	f002 f975 	bl	8003318 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	629a      	str	r2, [r3, #40]	; 0x28
 8001034:	e000      	b.n	8001038 <pid_compute+0x11e>
		return ;
 8001036:	bf00      	nop
}
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <ADC_Read>:
//		      HAL_Delay(5000);
}


void ADC_Read(int16_t *data)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 8001048:	2200      	movs	r2, #0
 800104a:	2110      	movs	r1, #16
 800104c:	4808      	ldr	r0, [pc, #32]	; (8001070 <ADC_Read+0x30>)
 800104e:	f003 fdd1 	bl	8004bf4 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 8001052:	2302      	movs	r3, #2
 8001054:	2208      	movs	r2, #8
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	4806      	ldr	r0, [pc, #24]	; (8001074 <ADC_Read+0x34>)
 800105a:	f004 fcdb 	bl	8005a14 <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 800105e:	2201      	movs	r2, #1
 8001060:	2110      	movs	r1, #16
 8001062:	4803      	ldr	r0, [pc, #12]	; (8001070 <ADC_Read+0x30>)
 8001064:	f003 fdc6 	bl	8004bf4 <HAL_GPIO_WritePin>
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40020000 	.word	0x40020000
 8001074:	20000240 	.word	0x20000240

08001078 <brakeMotor>:

void emBrakeMotor(uint8_t state){
	HAL_GPIO_WritePin(Brake_Wheel_GPIO_Port, Brake_Wheel_Pin, state);
}

void brakeMotor(Motor_TypeDef* motor, uint8_t state){
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->BRK_port, motor->BRK_pin, state);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69d8      	ldr	r0, [r3, #28]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	8c1b      	ldrh	r3, [r3, #32]
 800108c:	78fa      	ldrb	r2, [r7, #3]
 800108e:	4619      	mov	r1, r3
 8001090:	f003 fdb0 	bl	8004bf4 <HAL_GPIO_WritePin>
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <setMotorDir>:

void setMotorDir(Motor_TypeDef* motor, uint8_t dir){
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin, dir);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80010b0:	78fa      	ldrb	r2, [r7, #3]
 80010b2:	4619      	mov	r1, r3
 80010b4:	f003 fd9e 	bl	8004bf4 <HAL_GPIO_WritePin>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <setMotorSpeed>:

void setMotorSpeed(Motor_TypeDef* motor, float speed){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	ed87 0a00 	vstr	s0, [r7]

	float frequency = 0;
 80010cc:	f04f 0300 	mov.w	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
	uint16_t period;
	uint32_t duty_cycle; //50%

	if (speed > 100) speed = 100.0;
 80010d2:	edd7 7a00 	vldr	s15, [r7]
 80010d6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001208 <setMotorSpeed+0x148>
 80010da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e2:	dd01      	ble.n	80010e8 <setMotorSpeed+0x28>
 80010e4:	4b49      	ldr	r3, [pc, #292]	; (800120c <setMotorSpeed+0x14c>)
 80010e6:	603b      	str	r3, [r7, #0]
	//Frequency equation derived from data sheet
	frequency = (uint16_t)((speed - 0.2597)/0.02494);
 80010e8:	6838      	ldr	r0, [r7, #0]
 80010ea:	f7ff f9e5 	bl	80004b8 <__aeabi_f2d>
 80010ee:	a340      	add	r3, pc, #256	; (adr r3, 80011f0 <setMotorSpeed+0x130>)
 80010f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f4:	f7ff f880 	bl	80001f8 <__aeabi_dsub>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4610      	mov	r0, r2
 80010fe:	4619      	mov	r1, r3
 8001100:	a33d      	add	r3, pc, #244	; (adr r3, 80011f8 <setMotorSpeed+0x138>)
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	f7ff fb59 	bl	80007bc <__aeabi_ddiv>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f7ff fd01 	bl	8000b18 <__aeabi_d2uiz>
 8001116:	4603      	mov	r3, r0
 8001118:	b29b      	uxth	r3, r3
 800111a:	ee07 3a90 	vmov	s15, r3
 800111e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001122:	edc7 7a05 	vstr	s15, [r7, #20]
	period = (int)(1e6/frequency)+1;
 8001126:	6978      	ldr	r0, [r7, #20]
 8001128:	f7ff f9c6 	bl	80004b8 <__aeabi_f2d>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	a133      	add	r1, pc, #204	; (adr r1, 8001200 <setMotorSpeed+0x140>)
 8001132:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001136:	f7ff fb41 	bl	80007bc <__aeabi_ddiv>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4610      	mov	r0, r2
 8001140:	4619      	mov	r1, r3
 8001142:	f7ff fcc1 	bl	8000ac8 <__aeabi_d2iz>
 8001146:	4603      	mov	r3, r0
 8001148:	b29b      	uxth	r3, r3
 800114a:	3301      	adds	r3, #1
 800114c:	827b      	strh	r3, [r7, #18]
	duty_cycle = period / 2;
 800114e:	8a7b      	ldrh	r3, [r7, #18]
 8001150:	085b      	lsrs	r3, r3, #1
 8001152:	b29b      	uxth	r3, r3
 8001154:	60fb      	str	r3, [r7, #12]
//	      motor->outputPWM->Instance->CCR4 = duty_cycle;
//
//	    HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
//	}

	if (speed<4){
 8001156:	edd7 7a00 	vldr	s15, [r7]
 800115a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800115e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001166:	d503      	bpl.n	8001170 <setMotorSpeed+0xb0>
		brakeMotor(motor, 1);
 8001168:	2101      	movs	r1, #1
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ff84 	bl	8001078 <brakeMotor>
	}



	motor->outputPWM->Instance->ARR = period;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	8a7a      	ldrh	r2, [r7, #18]
 8001178:	62da      	str	r2, [r3, #44]	; 0x2c
	if(motor->PWM_channel == TIM_CHANNEL_1)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	8b1b      	ldrh	r3, [r3, #24]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d105      	bne.n	800118e <setMotorSpeed+0xce>
	  motor->outputPWM->Instance->CCR1 = duty_cycle;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	635a      	str	r2, [r3, #52]	; 0x34
 800118c:	e01c      	b.n	80011c8 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_2)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	8b1b      	ldrh	r3, [r3, #24]
 8001192:	2b04      	cmp	r3, #4
 8001194:	d105      	bne.n	80011a2 <setMotorSpeed+0xe2>
		  motor->outputPWM->Instance->CCR2 = duty_cycle;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	639a      	str	r2, [r3, #56]	; 0x38
 80011a0:	e012      	b.n	80011c8 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_3)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	8b1b      	ldrh	r3, [r3, #24]
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d105      	bne.n	80011b6 <setMotorSpeed+0xf6>
		  motor->outputPWM->Instance->CCR3 = duty_cycle;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80011b4:	e008      	b.n	80011c8 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_4)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	8b1b      	ldrh	r3, [r3, #24]
 80011ba:	2b0c      	cmp	r3, #12
 80011bc:	d104      	bne.n	80011c8 <setMotorSpeed+0x108>
	  motor->outputPWM->Instance->CCR4 = duty_cycle;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	695a      	ldr	r2, [r3, #20]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	8b1b      	ldrh	r3, [r3, #24]
 80011d0:	4619      	mov	r1, r3
 80011d2:	4610      	mov	r0, r2
 80011d4:	f005 f83a 	bl	800624c <HAL_TIM_PWM_Start>



	motor->outputPWM->Instance->CNT = 0;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2200      	movs	r2, #0
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011e2:	bf00      	nop
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	f3af 8000 	nop.w
 80011f0:	bfb15b57 	.word	0xbfb15b57
 80011f4:	3fd09eec 	.word	0x3fd09eec
 80011f8:	1172ef0b 	.word	0x1172ef0b
 80011fc:	3f9989df 	.word	0x3f9989df
 8001200:	00000000 	.word	0x00000000
 8001204:	412e8480 	.word	0x412e8480
 8001208:	42c80000 	.word	0x42c80000
 800120c:	42c80000 	.word	0x42c80000

08001210 <runMotor>:
		return -1;
	}
	else return 1;
}

void runMotor(Motor_TypeDef* motor, float speed){
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	ed87 0a00 	vstr	s0, [r7]
  //	    - positive speed Lift DOWN
  //	    - negative speed lift UP
    if (motor->ID == 1){
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001222:	2b01      	cmp	r3, #1
 8001224:	d129      	bne.n	800127a <runMotor+0x6a>
	if (fabs(speed)/speed  >= 0)
 8001226:	edd7 7a00 	vldr	s15, [r7]
 800122a:	eef0 7ae7 	vabs.f32	s15, s15
 800122e:	ee17 0a90 	vmov	r0, s15
 8001232:	f7ff f941 	bl	80004b8 <__aeabi_f2d>
 8001236:	4604      	mov	r4, r0
 8001238:	460d      	mov	r5, r1
 800123a:	6838      	ldr	r0, [r7, #0]
 800123c:	f7ff f93c 	bl	80004b8 <__aeabi_f2d>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4620      	mov	r0, r4
 8001246:	4629      	mov	r1, r5
 8001248:	f7ff fab8 	bl	80007bc <__aeabi_ddiv>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4610      	mov	r0, r2
 8001252:	4619      	mov	r1, r3
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	f04f 0300 	mov.w	r3, #0
 800125c:	f7ff fc0a 	bl	8000a74 <__aeabi_dcmpge>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d004      	beq.n	8001270 <runMotor+0x60>
	      setMotorDir(motor, 0);
 8001266:	2100      	movs	r1, #0
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff17 	bl	800109c <setMotorDir>
 800126e:	e032      	b.n	80012d6 <runMotor+0xc6>
	else
	  setMotorDir(motor, 1);
 8001270:	2101      	movs	r1, #1
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ff12 	bl	800109c <setMotorDir>
 8001278:	e02d      	b.n	80012d6 <runMotor+0xc6>
    }
    else if (motor->ID == 2){
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001280:	2b02      	cmp	r3, #2
 8001282:	d128      	bne.n	80012d6 <runMotor+0xc6>
	if (fabs(speed)/speed  >= 0)
 8001284:	edd7 7a00 	vldr	s15, [r7]
 8001288:	eef0 7ae7 	vabs.f32	s15, s15
 800128c:	ee17 0a90 	vmov	r0, s15
 8001290:	f7ff f912 	bl	80004b8 <__aeabi_f2d>
 8001294:	4604      	mov	r4, r0
 8001296:	460d      	mov	r5, r1
 8001298:	6838      	ldr	r0, [r7, #0]
 800129a:	f7ff f90d 	bl	80004b8 <__aeabi_f2d>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4620      	mov	r0, r4
 80012a4:	4629      	mov	r1, r5
 80012a6:	f7ff fa89 	bl	80007bc <__aeabi_ddiv>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	f04f 0300 	mov.w	r3, #0
 80012ba:	f7ff fbdb 	bl	8000a74 <__aeabi_dcmpge>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d004      	beq.n	80012ce <runMotor+0xbe>
	  setMotorDir(motor, 1);
 80012c4:	2101      	movs	r1, #1
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff fee8 	bl	800109c <setMotorDir>
 80012cc:	e003      	b.n	80012d6 <runMotor+0xc6>
	else
	  setMotorDir(motor, 0);
 80012ce:	2100      	movs	r1, #0
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff fee3 	bl	800109c <setMotorDir>
    }

    HAL_Delay(50);
 80012d6:	2032      	movs	r0, #50	; 0x32
 80012d8:	f002 f82a 	bl	8003330 <HAL_Delay>
    brakeMotor(motor, 0);
 80012dc:	2100      	movs	r1, #0
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff feca 	bl	8001078 <brakeMotor>
    setMotorSpeed(motor, fabs(speed));
 80012e4:	edd7 7a00 	vldr	s15, [r7]
 80012e8:	eef0 7ae7 	vabs.f32	s15, s15
 80012ec:	eeb0 0a67 	vmov.f32	s0, s15
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff fee5 	bl	80010c0 <setMotorSpeed>

}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bdb0      	pop	{r4, r5, r7, pc}

080012fe <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	889b      	ldrh	r3, [r3, #4]
 8001310:	4619      	mov	r1, r3
 8001312:	4610      	mov	r0, r2
 8001314:	f003 fc56 	bl	8004bc4 <HAL_GPIO_ReadPin>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	799a      	ldrb	r2, [r3, #6]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	79db      	ldrb	r3, [r3, #7]
 8001328:	429a      	cmp	r2, r3
 800132a:	d004      	beq.n	8001336 <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 800132c:	f001 fff4 	bl	8003318 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 8001336:	f001 ffef 	bl	8003318 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d209      	bcs.n	800135c <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	799a      	ldrb	r2, [r3, #6]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7a1b      	ldrb	r3, [r3, #8]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d101      	bne.n	800135c <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 8001358:	2301      	movs	r3, #1
 800135a:	e004      	b.n	8001366 <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	799a      	ldrb	r2, [r3, #6]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001374:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <MX_CAN1_Init+0x64>)
 8001376:	4a18      	ldr	r2, [pc, #96]	; (80013d8 <MX_CAN1_Init+0x68>)
 8001378:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <MX_CAN1_Init+0x64>)
 800137c:	2209      	movs	r2, #9
 800137e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <MX_CAN1_Init+0x64>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <MX_CAN1_Init+0x64>)
 8001388:	2200      	movs	r2, #0
 800138a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <MX_CAN1_Init+0x64>)
 800138e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001392:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <MX_CAN1_Init+0x64>)
 8001396:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800139a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800139c:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <MX_CAN1_Init+0x64>)
 800139e:	2200      	movs	r2, #0
 80013a0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80013a2:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_CAN1_Init+0x64>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80013a8:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <MX_CAN1_Init+0x64>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_CAN1_Init+0x64>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <MX_CAN1_Init+0x64>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_CAN1_Init+0x64>)
 80013bc:	2200      	movs	r2, #0
 80013be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80013c0:	4804      	ldr	r0, [pc, #16]	; (80013d4 <MX_CAN1_Init+0x64>)
 80013c2:	f001 ffd9 	bl	8003378 <HAL_CAN_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80013cc:	f000 fe44 	bl	8002058 <Error_Handler>
  }

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000298 	.word	0x20000298
 80013d8:	40006400 	.word	0x40006400

080013dc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a20      	ldr	r2, [pc, #128]	; (800147c <HAL_CAN_MspInit+0xa0>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d13a      	bne.n	8001474 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <HAL_CAN_MspInit+0xa4>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	4a1e      	ldr	r2, [pc, #120]	; (8001480 <HAL_CAN_MspInit+0xa4>)
 8001408:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800140c:	6413      	str	r3, [r2, #64]	; 0x40
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <HAL_CAN_MspInit+0xa4>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_CAN_MspInit+0xa4>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a17      	ldr	r2, [pc, #92]	; (8001480 <HAL_CAN_MspInit+0xa4>)
 8001424:	f043 0308 	orr.w	r3, r3, #8
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_CAN_MspInit+0xa4>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001436:	2303      	movs	r3, #3
 8001438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001442:	2303      	movs	r3, #3
 8001444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001446:	2309      	movs	r3, #9
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <HAL_CAN_MspInit+0xa8>)
 8001452:	f003 fa0b 	bl	800486c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	2014      	movs	r0, #20
 800145c:	f002 fec9 	bl	80041f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001460:	2014      	movs	r0, #20
 8001462:	f002 fee2 	bl	800422a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001466:	2102      	movs	r1, #2
 8001468:	4807      	ldr	r0, [pc, #28]	; (8001488 <HAL_CAN_MspInit+0xac>)
 800146a:	f002 fb92 	bl	8003b92 <HAL_CAN_ActivateNotification>
    HAL_CAN_Start(&hcan1);
 800146e:	4806      	ldr	r0, [pc, #24]	; (8001488 <HAL_CAN_MspInit+0xac>)
 8001470:	f002 f95e 	bl	8003730 <HAL_CAN_Start>
  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001474:	bf00      	nop
 8001476:	3728      	adds	r7, #40	; 0x28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40006400 	.word	0x40006400
 8001480:	40023800 	.word	0x40023800
 8001484:	40020c00 	.word	0x40020c00
 8001488:	20000298 	.word	0x20000298

0800148c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_DMA_Init+0x3c>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <MX_DMA_Init+0x3c>)
 800149c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_DMA_Init+0x3c>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	200c      	movs	r0, #12
 80014b4:	f002 fe9d 	bl	80041f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80014b8:	200c      	movs	r0, #12
 80014ba:	f002 feb6 	bl	800422a <HAL_NVIC_EnableIRQ>

}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800

080014cc <ENCODER_Init>:
CAN_FilterTypeDef canfil_2;
//uint8_t incoming[8];
//CAN_RxHeaderTypeDef RxHeader;

void ENCODER_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  //Assign each encoder to one of the two CAN buses
	encoderLeft.hcan = &hcan1;
 80014d0:	4b2e      	ldr	r3, [pc, #184]	; (800158c <ENCODER_Init+0xc0>)
 80014d2:	4a2f      	ldr	r2, [pc, #188]	; (8001590 <ENCODER_Init+0xc4>)
 80014d4:	601a      	str	r2, [r3, #0]
	encoderRight.hcan = &hcan1;
 80014d6:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <ENCODER_Init+0xc8>)
 80014d8:	4a2d      	ldr	r2, [pc, #180]	; (8001590 <ENCODER_Init+0xc4>)
 80014da:	601a      	str	r2, [r3, #0]
	
	//Set Tx header for each encoder handle
	ENCODER_Set_TxHeader(&encoderLeft, ENC_ADDR_LEFT);
 80014dc:	2101      	movs	r1, #1
 80014de:	482b      	ldr	r0, [pc, #172]	; (800158c <ENCODER_Init+0xc0>)
 80014e0:	f000 f893 	bl	800160a <ENCODER_Set_TxHeader>
	ENCODER_Set_TxHeader(&encoderRight, ENC_ADDR_RIGHT);
 80014e4:	2102      	movs	r1, #2
 80014e6:	482b      	ldr	r0, [pc, #172]	; (8001594 <ENCODER_Init+0xc8>)
 80014e8:	f000 f88f 	bl	800160a <ENCODER_Set_TxHeader>
	 
	//Filter Config - FIFO1 is assigned to hcan1_right and FIFO1 is assigned to hcan2_left
	canfil_1.FilterBank = 0;
 80014ec:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <ENCODER_Init+0xcc>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 80014f2:	4b29      	ldr	r3, [pc, #164]	; (8001598 <ENCODER_Init+0xcc>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 80014f8:	4b27      	ldr	r3, [pc, #156]	; (8001598 <ENCODER_Init+0xcc>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	61da      	str	r2, [r3, #28]
	canfil_1.FilterIdHigh = 0x0000;
 80014fe:	4b26      	ldr	r3, [pc, #152]	; (8001598 <ENCODER_Init+0xcc>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
	canfil_1.FilterIdLow = 0x0000;
 8001504:	4b24      	ldr	r3, [pc, #144]	; (8001598 <ENCODER_Init+0xcc>)
 8001506:	2200      	movs	r2, #0
 8001508:	605a      	str	r2, [r3, #4]
	canfil_1.FilterMaskIdHigh = 0x0000;
 800150a:	4b23      	ldr	r3, [pc, #140]	; (8001598 <ENCODER_Init+0xcc>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
	canfil_1.FilterMaskIdLow = 0x0000;
 8001510:	4b21      	ldr	r3, [pc, #132]	; (8001598 <ENCODER_Init+0xcc>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001516:	4b20      	ldr	r3, [pc, #128]	; (8001598 <ENCODER_Init+0xcc>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
	canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <ENCODER_Init+0xcc>)
 800151e:	2201      	movs	r2, #1
 8001520:	621a      	str	r2, [r3, #32]
	canfil_1.SlaveStartFilterBank = 14;
 8001522:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <ENCODER_Init+0xcc>)
 8001524:	220e      	movs	r2, #14
 8001526:	625a      	str	r2, [r3, #36]	; 0x24

	
	canfil_2.FilterBank = 14;
 8001528:	4b1c      	ldr	r3, [pc, #112]	; (800159c <ENCODER_Init+0xd0>)
 800152a:	220e      	movs	r2, #14
 800152c:	615a      	str	r2, [r3, #20]
	canfil_2.FilterMode = CAN_FILTERMODE_IDMASK;
 800152e:	4b1b      	ldr	r3, [pc, #108]	; (800159c <ENCODER_Init+0xd0>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
	canfil_2.FilterScale = CAN_FILTERSCALE_32BIT;
 8001534:	4b19      	ldr	r3, [pc, #100]	; (800159c <ENCODER_Init+0xd0>)
 8001536:	2201      	movs	r2, #1
 8001538:	61da      	str	r2, [r3, #28]
	canfil_2.FilterIdHigh = 0x0000;
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <ENCODER_Init+0xd0>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
	canfil_2.FilterIdLow = 0x0000;
 8001540:	4b16      	ldr	r3, [pc, #88]	; (800159c <ENCODER_Init+0xd0>)
 8001542:	2200      	movs	r2, #0
 8001544:	605a      	str	r2, [r3, #4]
	canfil_2.FilterMaskIdHigh = 0x0000;
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <ENCODER_Init+0xd0>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
	canfil_2.FilterMaskIdLow = 0x0000;
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <ENCODER_Init+0xd0>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
	canfil_2.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <ENCODER_Init+0xd0>)
 8001554:	2201      	movs	r2, #1
 8001556:	611a      	str	r2, [r3, #16]
	canfil_2.FilterActivation = CAN_FILTER_ENABLE;
 8001558:	4b10      	ldr	r3, [pc, #64]	; (800159c <ENCODER_Init+0xd0>)
 800155a:	2201      	movs	r2, #1
 800155c:	621a      	str	r2, [r3, #32]
	canfil_2.SlaveStartFilterBank = 14;
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <ENCODER_Init+0xd0>)
 8001560:	220e      	movs	r2, #14
 8001562:	625a      	str	r2, [r3, #36]	; 0x24

	if(HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK )	Error_Handler();
 8001564:	490c      	ldr	r1, [pc, #48]	; (8001598 <ENCODER_Init+0xcc>)
 8001566:	480a      	ldr	r0, [pc, #40]	; (8001590 <ENCODER_Init+0xc4>)
 8001568:	f002 f802 	bl	8003570 <HAL_CAN_ConfigFilter>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <ENCODER_Init+0xaa>
 8001572:	f000 fd71 	bl	8002058 <Error_Handler>
	if(HAL_CAN_ConfigFilter(&hcan2, &canfil_2) != HAL_OK )	Error_Handler();
 8001576:	4909      	ldr	r1, [pc, #36]	; (800159c <ENCODER_Init+0xd0>)
 8001578:	4809      	ldr	r0, [pc, #36]	; (80015a0 <ENCODER_Init+0xd4>)
 800157a:	f001 fff9 	bl	8003570 <HAL_CAN_ConfigFilter>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <ENCODER_Init+0xbc>
 8001584:	f000 fd68 	bl	8002058 <Error_Handler>

}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200002e8 	.word	0x200002e8
 8001590:	20000298 	.word	0x20000298
 8001594:	20000360 	.word	0x20000360
 8001598:	200003b0 	.word	0x200003b0
 800159c:	200002c0 	.word	0x200002c0
 80015a0:	20000338 	.word	0x20000338

080015a4 <ENCODER_Sort_Incoming>:

void ENCODER_Sort_Incoming(uint8_t* incoming_array, EncoderHandle* Encoder_ptr){
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
	Encoder_ptr->rawRead[0] = incoming_array[0];
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	781a      	ldrb	r2, [r3, #0]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Encoder_ptr->rawRead[1] = incoming_array[1];
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	785a      	ldrb	r2, [r3, #1]
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Encoder_ptr->rawRead[2] = incoming_array[2];
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	789a      	ldrb	r2, [r3, #2]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Encoder_ptr->rawRead[3] = incoming_array[3];
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	78da      	ldrb	r2, [r3, #3]
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	Encoder_ptr->rawRead[4] = incoming_array[4];
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	791a      	ldrb	r2, [r3, #4]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Encoder_ptr->rawRead[5] = incoming_array[5];
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	795a      	ldrb	r2, [r3, #5]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Encoder_ptr->rawRead[6] = incoming_array[6];
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	799a      	ldrb	r2, [r3, #6]
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Encoder_ptr->rawRead[7] = incoming_array[7];
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	79da      	ldrb	r2, [r3, #7]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <ENCODER_Set_TxHeader>:

void ENCODER_Set_TxHeader(EncoderHandle* Encoder_ptr, uint32_t Encoder_Address){
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	6039      	str	r1, [r7, #0]
	Encoder_ptr->canTxHeader.DLC = 4;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2204      	movs	r2, #4
 8001618:	631a      	str	r2, [r3, #48]	; 0x30
	Encoder_ptr->canTxHeader.IDE = CAN_ID_STD;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder_ptr->canTxHeader.RTR = CAN_RTR_DATA;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	62da      	str	r2, [r3, #44]	; 0x2c
	Encoder_ptr->canTxHeader.StdId = Encoder_Address;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	621a      	str	r2, [r3, #32]
	Encoder_ptr->canTxHeader.TransmitGlobalTime = DISABLE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Encoder_ptr->canTxHeader.ExtId = 0;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <ENCODER_Read>:

void ENCODER_Read(EncoderHandle* Encoder_ptr){
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
	Encoder_ptr->sendData[0] = Encoder_ptr->canTxHeader.DLC;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	b2da      	uxtb	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	Encoder_ptr->sendData[1] = Encoder_ptr->canTxHeader.StdId;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a1b      	ldr	r3, [r3, #32]
 800165e:	b2da      	uxtb	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	Encoder_ptr->sendData[2] = 0x01;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	Encoder_ptr->sendData[3] = 0x00;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	
	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f103 0120 	add.w	r1, r3, #32
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f103 0244 	add.w	r2, r3, #68	; 0x44
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3338      	adds	r3, #56	; 0x38
 800168a:	f002 f895 	bl	80037b8 <HAL_CAN_AddTxMessage>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <ENCODER_Get_Angle>:
	Encoder_ptr->sendData[3] = 0x01;

	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
}

void ENCODER_Get_Angle(EncoderHandle* Encoder_ptr){
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
	ENCODER_Read(Encoder_ptr);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ffd1 	bl	8001646 <ENCODER_Read>
	Encoder_ptr->angle32Bit.b8[0] = Encoder_ptr->rawRead[3];
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Encoder_ptr->angle32Bit.b8[1] = Encoder_ptr->rawRead[4];
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Encoder_ptr->angle32Bit.b8[2] = Encoder_ptr->rawRead[5];
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Encoder_ptr->angle32Bit.b8[3] = Encoder_ptr->rawRead[6];
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	Encoder_ptr->angleDeg = (Encoder_ptr->rawRead[3] + Encoder_ptr->rawRead[4]*0x100 + Encoder_ptr->rawRead[5]*0x10000)*360/0x1000;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80016da:	461a      	mov	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	441a      	add	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80016ec:	041b      	lsls	r3, r3, #16
 80016ee:	4413      	add	r3, r2
 80016f0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80016f4:	fb02 f303 	mul.w	r3, r2, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	da01      	bge.n	8001700 <ENCODER_Get_Angle+0x6a>
 80016fc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001700:	131b      	asrs	r3, r3, #12
 8001702:	461a      	mov	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <MX_GPIO_Init>:
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
     PB5   ------> CAN2_RX
*/
void MX_GPIO_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08c      	sub	sp, #48	; 0x30
 8001714:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001716:	f107 031c 	add.w	r3, r7, #28
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	61bb      	str	r3, [r7, #24]
 800172a:	4b8a      	ldr	r3, [pc, #552]	; (8001954 <MX_GPIO_Init+0x244>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a89      	ldr	r2, [pc, #548]	; (8001954 <MX_GPIO_Init+0x244>)
 8001730:	f043 0310 	orr.w	r3, r3, #16
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b87      	ldr	r3, [pc, #540]	; (8001954 <MX_GPIO_Init+0x244>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0310 	and.w	r3, r3, #16
 800173e:	61bb      	str	r3, [r7, #24]
 8001740:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	4b83      	ldr	r3, [pc, #524]	; (8001954 <MX_GPIO_Init+0x244>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a82      	ldr	r2, [pc, #520]	; (8001954 <MX_GPIO_Init+0x244>)
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b80      	ldr	r3, [pc, #512]	; (8001954 <MX_GPIO_Init+0x244>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	4b7c      	ldr	r3, [pc, #496]	; (8001954 <MX_GPIO_Init+0x244>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a7b      	ldr	r2, [pc, #492]	; (8001954 <MX_GPIO_Init+0x244>)
 8001768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b79      	ldr	r3, [pc, #484]	; (8001954 <MX_GPIO_Init+0x244>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b75      	ldr	r3, [pc, #468]	; (8001954 <MX_GPIO_Init+0x244>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a74      	ldr	r2, [pc, #464]	; (8001954 <MX_GPIO_Init+0x244>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b72      	ldr	r3, [pc, #456]	; (8001954 <MX_GPIO_Init+0x244>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	4b6e      	ldr	r3, [pc, #440]	; (8001954 <MX_GPIO_Init+0x244>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a6d      	ldr	r2, [pc, #436]	; (8001954 <MX_GPIO_Init+0x244>)
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b6b      	ldr	r3, [pc, #428]	; (8001954 <MX_GPIO_Init+0x244>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	4b67      	ldr	r3, [pc, #412]	; (8001954 <MX_GPIO_Init+0x244>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a66      	ldr	r2, [pc, #408]	; (8001954 <MX_GPIO_Init+0x244>)
 80017bc:	f043 0308 	orr.w	r3, r3, #8
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b64      	ldr	r3, [pc, #400]	; (8001954 <MX_GPIO_Init+0x244>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 80017ce:	2200      	movs	r2, #0
 80017d0:	213f      	movs	r1, #63	; 0x3f
 80017d2:	4861      	ldr	r0, [pc, #388]	; (8001958 <MX_GPIO_Init+0x248>)
 80017d4:	f003 fa0e 	bl	8004bf4 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 80017d8:	2200      	movs	r2, #0
 80017da:	2110      	movs	r1, #16
 80017dc:	485f      	ldr	r0, [pc, #380]	; (800195c <MX_GPIO_Init+0x24c>)
 80017de:	f003 fa09 	bl	8004bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 80017e2:	2200      	movs	r2, #0
 80017e4:	219b      	movs	r1, #155	; 0x9b
 80017e6:	485e      	ldr	r0, [pc, #376]	; (8001960 <MX_GPIO_Init+0x250>)
 80017e8:	f003 fa04 	bl	8004bf4 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 80017f2:	485c      	ldr	r0, [pc, #368]	; (8001964 <MX_GPIO_Init+0x254>)
 80017f4:	f003 f9fe 	bl	8004bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 80017f8:	2200      	movs	r2, #0
 80017fa:	f64e 4108 	movw	r1, #60424	; 0xec08
 80017fe:	485a      	ldr	r0, [pc, #360]	; (8001968 <MX_GPIO_Init+0x258>)
 8001800:	f003 f9f8 	bl	8004bf4 <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8001804:	2307      	movs	r3, #7
 8001806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800180c:	2302      	movs	r3, #2
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001810:	f107 031c 	add.w	r3, r7, #28
 8001814:	4619      	mov	r1, r3
 8001816:	4853      	ldr	r0, [pc, #332]	; (8001964 <MX_GPIO_Init+0x254>)
 8001818:	f003 f828 	bl	800486c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 800181c:	f248 1378 	movw	r3, #33144	; 0x8178
 8001820:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001822:	2300      	movs	r3, #0
 8001824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001826:	2301      	movs	r3, #1
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800182a:	f107 031c 	add.w	r3, r7, #28
 800182e:	4619      	mov	r1, r3
 8001830:	484c      	ldr	r0, [pc, #304]	; (8001964 <MX_GPIO_Init+0x254>)
 8001832:	f003 f81b 	bl	800486c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001836:	233f      	movs	r3, #63	; 0x3f
 8001838:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183a:	2301      	movs	r3, #1
 800183c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800183e:	2301      	movs	r3, #1
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001846:	f107 031c 	add.w	r3, r7, #28
 800184a:	4619      	mov	r1, r3
 800184c:	4842      	ldr	r0, [pc, #264]	; (8001958 <MX_GPIO_Init+0x248>)
 800184e:	f003 f80d 	bl	800486c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8001852:	2310      	movs	r3, #16
 8001854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	2301      	movs	r3, #1
 8001858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800185a:	2301      	movs	r3, #1
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 031c 	add.w	r3, r7, #28
 8001866:	4619      	mov	r1, r3
 8001868:	483c      	ldr	r0, [pc, #240]	; (800195c <MX_GPIO_Init+0x24c>)
 800186a:	f002 ffff 	bl	800486c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001872:	4b3e      	ldr	r3, [pc, #248]	; (800196c <MX_GPIO_Init+0x25c>)
 8001874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 800187a:	f107 031c 	add.w	r3, r7, #28
 800187e:	4619      	mov	r1, r3
 8001880:	4836      	ldr	r0, [pc, #216]	; (800195c <MX_GPIO_Init+0x24c>)
 8001882:	f002 fff3 	bl	800486c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001886:	239b      	movs	r3, #155	; 0x9b
 8001888:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188a:	2301      	movs	r3, #1
 800188c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188e:	2301      	movs	r3, #1
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	2300      	movs	r3, #0
 8001894:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	4619      	mov	r1, r3
 800189c:	4830      	ldr	r0, [pc, #192]	; (8001960 <MX_GPIO_Init+0x250>)
 800189e:	f002 ffe5 	bl	800486c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 80018a2:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 80018a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a8:	2301      	movs	r3, #1
 80018aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ac:	2301      	movs	r3, #1
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018b4:	f107 031c 	add.w	r3, r7, #28
 80018b8:	4619      	mov	r1, r3
 80018ba:	482a      	ldr	r0, [pc, #168]	; (8001964 <MX_GPIO_Init+0x254>)
 80018bc:	f002 ffd6 	bl	800486c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin|CUI_SPI2_MOSI_Pin;
 80018c0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80018c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ce:	2303      	movs	r3, #3
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018d2:	2305      	movs	r3, #5
 80018d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d6:	f107 031c 	add.w	r3, r7, #28
 80018da:	4619      	mov	r1, r3
 80018dc:	4820      	ldr	r0, [pc, #128]	; (8001960 <MX_GPIO_Init+0x250>)
 80018de:	f002 ffc5 	bl	800486c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 80018e2:	f64e 4308 	movw	r3, #60424	; 0xec08
 80018e6:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e8:	2301      	movs	r3, #1
 80018ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ec:	2301      	movs	r3, #1
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	4619      	mov	r1, r3
 80018fa:	481b      	ldr	r0, [pc, #108]	; (8001968 <MX_GPIO_Init+0x258>)
 80018fc:	f002 ffb6 	bl	800486c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 8001900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 800190e:	f107 031c 	add.w	r3, r7, #28
 8001912:	4619      	mov	r1, r3
 8001914:	4814      	ldr	r0, [pc, #80]	; (8001968 <MX_GPIO_Init+0x258>)
 8001916:	f002 ffa9 	bl	800486c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800191a:	2320      	movs	r3, #32
 800191c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800192a:	2309      	movs	r3, #9
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192e:	f107 031c 	add.w	r3, r7, #28
 8001932:	4619      	mov	r1, r3
 8001934:	480a      	ldr	r0, [pc, #40]	; (8001960 <MX_GPIO_Init+0x250>)
 8001936:	f002 ff99 	bl	800486c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2100      	movs	r1, #0
 800193e:	2017      	movs	r0, #23
 8001940:	f002 fc57 	bl	80041f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001944:	2017      	movs	r0, #23
 8001946:	f002 fc70 	bl	800422a <HAL_NVIC_EnableIRQ>

}
 800194a:	bf00      	nop
 800194c:	3730      	adds	r7, #48	; 0x30
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800
 8001958:	40020800 	.word	0x40020800
 800195c:	40020000 	.word	0x40020000
 8001960:	40020400 	.word	0x40020400
 8001964:	40021000 	.word	0x40021000
 8001968:	40020c00 	.word	0x40020c00
 800196c:	10210000 	.word	0x10210000

08001970 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001974:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <MX_I2C1_Init+0x74>)
 8001976:	4a1c      	ldr	r2, [pc, #112]	; (80019e8 <MX_I2C1_Init+0x78>)
 8001978:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800197a:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <MX_I2C1_Init+0x74>)
 800197c:	4a1b      	ldr	r2, [pc, #108]	; (80019ec <MX_I2C1_Init+0x7c>)
 800197e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001980:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <MX_I2C1_Init+0x74>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001986:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <MX_I2C1_Init+0x74>)
 8001988:	2200      	movs	r2, #0
 800198a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800198c:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <MX_I2C1_Init+0x74>)
 800198e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001992:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001994:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <MX_I2C1_Init+0x74>)
 8001996:	2200      	movs	r2, #0
 8001998:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <MX_I2C1_Init+0x74>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019a0:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <MX_I2C1_Init+0x74>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019a6:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <MX_I2C1_Init+0x74>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019ac:	480d      	ldr	r0, [pc, #52]	; (80019e4 <MX_I2C1_Init+0x74>)
 80019ae:	f003 f953 	bl	8004c58 <HAL_I2C_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019b8:	f000 fb4e 	bl	8002058 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019bc:	2100      	movs	r1, #0
 80019be:	4809      	ldr	r0, [pc, #36]	; (80019e4 <MX_I2C1_Init+0x74>)
 80019c0:	f003 fa8e 	bl	8004ee0 <HAL_I2CEx_ConfigAnalogFilter>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80019ca:	f000 fb45 	bl	8002058 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019ce:	2100      	movs	r1, #0
 80019d0:	4804      	ldr	r0, [pc, #16]	; (80019e4 <MX_I2C1_Init+0x74>)
 80019d2:	f003 fac1 	bl	8004f58 <HAL_I2CEx_ConfigDigitalFilter>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80019dc:	f000 fb3c 	bl	8002058 <Error_Handler>
  }

}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	200003d8 	.word	0x200003d8
 80019e8:	40005400 	.word	0x40005400
 80019ec:	00061a80 	.word	0x00061a80

080019f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a19      	ldr	r2, [pc, #100]	; (8001a74 <HAL_I2C_MspInit+0x84>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d12c      	bne.n	8001a6c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <HAL_I2C_MspInit+0x88>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a17      	ldr	r2, [pc, #92]	; (8001a78 <HAL_I2C_MspInit+0x88>)
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <HAL_I2C_MspInit+0x88>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8001a2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a34:	2312      	movs	r3, #18
 8001a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a40:	2304      	movs	r3, #4
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	4619      	mov	r1, r3
 8001a4a:	480c      	ldr	r0, [pc, #48]	; (8001a7c <HAL_I2C_MspInit+0x8c>)
 8001a4c:	f002 ff0e 	bl	800486c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_I2C_MspInit+0x88>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <HAL_I2C_MspInit+0x88>)
 8001a5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_I2C_MspInit+0x88>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	3728      	adds	r7, #40	; 0x28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40005400 	.word	0x40005400
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40020400 	.word	0x40020400

08001a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a84:	b084      	sub	sp, #16
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a88:	f001 fbe0 	bl	800324c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a8c:	f000 f9e8 	bl	8001e60 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 8001a90:	f003 ff28 	bl	80058e4 <HAL_RCC_GetHCLKFreq>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4a97      	ldr	r2, [pc, #604]	; (8001cf4 <main+0x274>)
 8001a98:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9c:	099b      	lsrs	r3, r3, #6
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f002 fbd1 	bl	8004246 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001aa4:	2004      	movs	r0, #4
 8001aa6:	f002 fbdb 	bl	8004260 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2100      	movs	r1, #0
 8001aae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ab2:	f002 fb9e 	bl	80041f2 <HAL_NVIC_SetPriority>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ab6:	f7ff fe2b 	bl	8001710 <MX_GPIO_Init>
  MX_DMA_Init();
 8001aba:	f7ff fce7 	bl	800148c <MX_DMA_Init>
  MX_I2C1_Init();
 8001abe:	f7ff ff57 	bl	8001970 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001ac2:	f000 fbd9 	bl	8002278 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001ac6:	f000 fc77 	bl	80023b8 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001aca:	f000 ff21 	bl	8002910 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001ace:	f000 fced 	bl	80024ac <MX_TIM3_Init>
  MX_TIM8_Init();
 8001ad2:	f000 fd6d 	bl	80025b0 <MX_TIM8_Init>
  MX_CAN1_Init();
 8001ad6:	f7ff fc4b 	bl	8001370 <MX_CAN1_Init>
  MX_SPI1_Init();
 8001ada:	f000 fac5 	bl	8002068 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //Initialize hardware communication
//  joystick_Init();
//  ADC_Init();
//  ADC_DataRequest();
  ENCODER_Init();
 8001ade:	f7ff fcf5 	bl	80014cc <ENCODER_Init>
//  DWT_Init();
//  while(MPU6050_Init(&hi2c1)==1);
  HAL_Delay(100);
 8001ae2:	2064      	movs	r0, #100	; 0x64
 8001ae4:	f001 fc24 	bl	8003330 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t prev_time = HAL_GetTick();
 8001ae8:	f001 fc16 	bl	8003318 <HAL_GetTick>
 8001aec:	60f8      	str	r0, [r7, #12]


  HAL_Delay(500);
 8001aee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001af2:	f001 fc1d 	bl	8003330 <HAL_Delay>
	ENCODER_Get_Angle(&encoderLeft);
 8001af6:	4880      	ldr	r0, [pc, #512]	; (8001cf8 <main+0x278>)
 8001af8:	f7ff fdcd 	bl	8001696 <ENCODER_Get_Angle>
  	ENCODER_Get_Angle(&encoderRight);
 8001afc:	487f      	ldr	r0, [pc, #508]	; (8001cfc <main+0x27c>)
 8001afe:	f7ff fdca 	bl	8001696 <ENCODER_Get_Angle>
  	HAL_Delay(500);
 8001b02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b06:	f001 fc13 	bl	8003330 <HAL_Delay>
  //debug variable
  uint32_t debug_prev_time = HAL_GetTick();
 8001b0a:	f001 fc05 	bl	8003318 <HAL_GetTick>
 8001b0e:	60b8      	str	r0, [r7, #8]
  uint8_t led_status = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	71fb      	strb	r3, [r7, #7]
//  float speed = 0;
  while (1)
  {
	//Code to debug with blinking LED
      if (HAL_GetTick() - debug_prev_time >= 1000){
 8001b14:	f001 fc00 	bl	8003318 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b22:	d317      	bcc.n	8001b54 <main+0xd4>
	  if (led_status == 0){
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d107      	bne.n	8001b3a <main+0xba>
//	      count++;
	      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	2108      	movs	r1, #8
 8001b2e:	4874      	ldr	r0, [pc, #464]	; (8001d00 <main+0x280>)
 8001b30:	f003 f860 	bl	8004bf4 <HAL_GPIO_WritePin>
	      led_status = 1;
 8001b34:	2301      	movs	r3, #1
 8001b36:	71fb      	strb	r3, [r7, #7]
 8001b38:	e009      	b.n	8001b4e <main+0xce>
	  }
	  else if (led_status == 1){
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d106      	bne.n	8001b4e <main+0xce>
	      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2108      	movs	r1, #8
 8001b44:	486e      	ldr	r0, [pc, #440]	; (8001d00 <main+0x280>)
 8001b46:	f003 f855 	bl	8004bf4 <HAL_GPIO_WritePin>
	      led_status = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	71fb      	strb	r3, [r7, #7]
	  }
	  debug_prev_time = HAL_GetTick();
 8001b4e:	f001 fbe3 	bl	8003318 <HAL_GetTick>
 8001b52:	60b8      	str	r0, [r7, #8]
//      runMotor(&backMotor, 100, 1);

//      runMotor(&backMotor, speed++, 1);

    //Loop should execute once every 1 tick
    if(HAL_GetTick() - prev_time >= 1)
 8001b54:	f001 fbe0 	bl	8003318 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d0d9      	beq.n	8001b14 <main+0x94>
    {
//	ADC_DataRequest();

	//Get kamlan filtered angle from MPU6050
//	MPU6050_Read_All(&hi2c1, &MPU6050);
	GPIO_Digital_Filtered_Input(&button1, 30);
 8001b60:	211e      	movs	r1, #30
 8001b62:	4868      	ldr	r0, [pc, #416]	; (8001d04 <main+0x284>)
 8001b64:	f7ff fbcb 	bl	80012fe <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&button2, 30);
 8001b68:	211e      	movs	r1, #30
 8001b6a:	4867      	ldr	r0, [pc, #412]	; (8001d08 <main+0x288>)
 8001b6c:	f7ff fbc7 	bl	80012fe <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&button3, 30);
 8001b70:	211e      	movs	r1, #30
 8001b72:	4866      	ldr	r0, [pc, #408]	; (8001d0c <main+0x28c>)
 8001b74:	f7ff fbc3 	bl	80012fe <GPIO_Digital_Filtered_Input>

	GPIO_Digital_Filtered_Input(&rearLS1, 5);
 8001b78:	2105      	movs	r1, #5
 8001b7a:	4865      	ldr	r0, [pc, #404]	; (8001d10 <main+0x290>)
 8001b7c:	f7ff fbbf 	bl	80012fe <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&rearLS2, 5);
 8001b80:	2105      	movs	r1, #5
 8001b82:	4864      	ldr	r0, [pc, #400]	; (8001d14 <main+0x294>)
 8001b84:	f7ff fbbb 	bl	80012fe <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&backLS1, 5);
 8001b88:	2105      	movs	r1, #5
 8001b8a:	4863      	ldr	r0, [pc, #396]	; (8001d18 <main+0x298>)
 8001b8c:	f7ff fbb7 	bl	80012fe <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&backLS2, 5);
 8001b90:	2105      	movs	r1, #5
 8001b92:	4862      	ldr	r0, [pc, #392]	; (8001d1c <main+0x29c>)
 8001b94:	f7ff fbb3 	bl	80012fe <GPIO_Digital_Filtered_Input>
//1. Climbing wheel extension
//2. Wheelchair lifting/dropping
//3. Climbing wheel retraction
//---------------------------------------------------------------------------------------------------
	//Climbing wheel start landing when button3 is pressed
	if (button3.state == 1 && front_touchdown == false && back_touchdown == false && lifting_mode == 0){
 8001b98:	4b5c      	ldr	r3, [pc, #368]	; (8001d0c <main+0x28c>)
 8001b9a:	7a1b      	ldrb	r3, [r3, #8]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	f040 809a 	bne.w	8001cd6 <main+0x256>
 8001ba2:	4b5f      	ldr	r3, [pc, #380]	; (8001d20 <main+0x2a0>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f040 8095 	bne.w	8001cd6 <main+0x256>
 8001bac:	4b5d      	ldr	r3, [pc, #372]	; (8001d24 <main+0x2a4>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f040 8090 	bne.w	8001cd6 <main+0x256>
 8001bb6:	4b5c      	ldr	r3, [pc, #368]	; (8001d28 <main+0x2a8>)
 8001bb8:	f993 3000 	ldrsb.w	r3, [r3]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f040 808a 	bne.w	8001cd6 <main+0x256>
	    while(front_touchdown == false || back_touchdown == false){
 8001bc2:	e07e      	b.n	8001cc2 <main+0x242>
	    	//if front touch before back, climbing up process
	    	if (back_touchdown == 0 && front_touchdown == 1)
 8001bc4:	4b57      	ldr	r3, [pc, #348]	; (8001d24 <main+0x2a4>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d107      	bne.n	8001bdc <main+0x15c>
 8001bcc:	4b54      	ldr	r3, [pc, #336]	; (8001d20 <main+0x2a0>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d103      	bne.n	8001bdc <main+0x15c>
	    		lifting_mode = 1;
 8001bd4:	4b54      	ldr	r3, [pc, #336]	; (8001d28 <main+0x2a8>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	e00a      	b.n	8001bf2 <main+0x172>
	    	//if back touch before front, climbing down process
	    	else if (back_touchdown == 1 && front_touchdown == 0)
 8001bdc:	4b51      	ldr	r3, [pc, #324]	; (8001d24 <main+0x2a4>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d106      	bne.n	8001bf2 <main+0x172>
 8001be4:	4b4e      	ldr	r3, [pc, #312]	; (8001d20 <main+0x2a0>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d102      	bne.n	8001bf2 <main+0x172>
	    		lifting_mode = 2;
 8001bec:	4b4e      	ldr	r3, [pc, #312]	; (8001d28 <main+0x2a8>)
 8001bee:	2202      	movs	r2, #2
 8001bf0:	701a      	strb	r2, [r3, #0]

	    	initial_angle = exp_angle_filter * MPU6050.KalmanAngleX + (1-exp_angle_filter) * initial_angle;
 8001bf2:	4b4e      	ldr	r3, [pc, #312]	; (8001d2c <main+0x2ac>)
 8001bf4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8001bf8:	4b4d      	ldr	r3, [pc, #308]	; (8001d30 <main+0x2b0>)
 8001bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfe:	f7fe fcb3 	bl	8000568 <__aeabi_dmul>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4690      	mov	r8, r2
 8001c08:	4699      	mov	r9, r3
 8001c0a:	4b49      	ldr	r3, [pc, #292]	; (8001d30 <main+0x2b0>)
 8001c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c10:	f04f 0000 	mov.w	r0, #0
 8001c14:	4947      	ldr	r1, [pc, #284]	; (8001d34 <main+0x2b4>)
 8001c16:	f7fe faef 	bl	80001f8 <__aeabi_dsub>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	4b45      	ldr	r3, [pc, #276]	; (8001d38 <main+0x2b8>)
 8001c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c28:	f7fe fc9e 	bl	8000568 <__aeabi_dmul>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4640      	mov	r0, r8
 8001c32:	4649      	mov	r1, r9
 8001c34:	f7fe fae2 	bl	80001fc <__adddf3>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	493e      	ldr	r1, [pc, #248]	; (8001d38 <main+0x2b8>)
 8001c3e:	e9c1 2300 	strd	r2, r3, [r1]

			if (back_touchdown == false)
 8001c42:	4b38      	ldr	r3, [pc, #224]	; (8001d24 <main+0x2a4>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d105      	bne.n	8001c56 <main+0x1d6>
				runMotor(&backMotor, 10);
 8001c4a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001c4e:	483b      	ldr	r0, [pc, #236]	; (8001d3c <main+0x2bc>)
 8001c50:	f7ff fade 	bl	8001210 <runMotor>
 8001c54:	e004      	b.n	8001c60 <main+0x1e0>
			else
				runMotor(&backMotor, 0);
 8001c56:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8001d40 <main+0x2c0>
 8001c5a:	4838      	ldr	r0, [pc, #224]	; (8001d3c <main+0x2bc>)
 8001c5c:	f7ff fad8 	bl	8001210 <runMotor>

			if (front_touchdown == false)
 8001c60:	4b2f      	ldr	r3, [pc, #188]	; (8001d20 <main+0x2a0>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d105      	bne.n	8001c74 <main+0x1f4>
				runMotor(&rearMotor, 10);
 8001c68:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001c6c:	4835      	ldr	r0, [pc, #212]	; (8001d44 <main+0x2c4>)
 8001c6e:	f7ff facf 	bl	8001210 <runMotor>
 8001c72:	e004      	b.n	8001c7e <main+0x1fe>
			else
				runMotor(&rearMotor, 0);
 8001c74:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8001d40 <main+0x2c0>
 8001c78:	4832      	ldr	r0, [pc, #200]	; (8001d44 <main+0x2c4>)
 8001c7a:	f7ff fac9 	bl	8001210 <runMotor>

			if (GPIO_Digital_Filtered_Input(&rearLS1, 5) || GPIO_Digital_Filtered_Input(&rearLS2, 5))
 8001c7e:	2105      	movs	r1, #5
 8001c80:	4823      	ldr	r0, [pc, #140]	; (8001d10 <main+0x290>)
 8001c82:	f7ff fb3c 	bl	80012fe <GPIO_Digital_Filtered_Input>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d106      	bne.n	8001c9a <main+0x21a>
 8001c8c:	2105      	movs	r1, #5
 8001c8e:	4821      	ldr	r0, [pc, #132]	; (8001d14 <main+0x294>)
 8001c90:	f7ff fb35 	bl	80012fe <GPIO_Digital_Filtered_Input>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <main+0x220>
				front_touchdown = 1;
 8001c9a:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <main+0x2a0>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	701a      	strb	r2, [r3, #0]
			if (GPIO_Digital_Filtered_Input(&backLS1, 5) || GPIO_Digital_Filtered_Input(&backLS2, 5))
 8001ca0:	2105      	movs	r1, #5
 8001ca2:	481d      	ldr	r0, [pc, #116]	; (8001d18 <main+0x298>)
 8001ca4:	f7ff fb2b 	bl	80012fe <GPIO_Digital_Filtered_Input>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d106      	bne.n	8001cbc <main+0x23c>
 8001cae:	2105      	movs	r1, #5
 8001cb0:	481a      	ldr	r0, [pc, #104]	; (8001d1c <main+0x29c>)
 8001cb2:	f7ff fb24 	bl	80012fe <GPIO_Digital_Filtered_Input>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d002      	beq.n	8001cc2 <main+0x242>
				back_touchdown = 1;
 8001cbc:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <main+0x2a4>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]
	    while(front_touchdown == false || back_touchdown == false){
 8001cc2:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <main+0x2a0>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f43f af7c 	beq.w	8001bc4 <main+0x144>
 8001ccc:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <main+0x2a4>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f43f af77 	beq.w	8001bc4 <main+0x144>
	    }
	}

	//Normal wheelchair mode, basic joystick control mode
	if (lifting_mode == 0){
 8001cd6:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <main+0x2a8>)
 8001cd8:	f993 3000 	ldrsb.w	r3, [r3]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d137      	bne.n	8001d50 <main+0x2d0>
	    wheel_Control(&baseWheelSpeed);
 8001ce0:	4819      	ldr	r0, [pc, #100]	; (8001d48 <main+0x2c8>)
 8001ce2:	f001 f853 	bl	8002d8c <wheel_Control>
	    baseMotorCommand();
 8001ce6:	f000 f993 	bl	8002010 <baseMotorCommand>
		wheel_Control(&climbWheelSpeed);
 8001cea:	4818      	ldr	r0, [pc, #96]	; (8001d4c <main+0x2cc>)
 8001cec:	f001 f84e 	bl	8002d8c <wheel_Control>
 8001cf0:	e09a      	b.n	8001e28 <main+0x3a8>
 8001cf2:	bf00      	nop
 8001cf4:	10624dd3 	.word	0x10624dd3
 8001cf8:	200002e8 	.word	0x200002e8
 8001cfc:	20000360 	.word	0x20000360
 8001d00:	40020400 	.word	0x40020400
 8001d04:	20000108 	.word	0x20000108
 8001d08:	20000118 	.word	0x20000118
 8001d0c:	20000128 	.word	0x20000128
 8001d10:	200000c8 	.word	0x200000c8
 8001d14:	200000d8 	.word	0x200000d8
 8001d18:	200000e8 	.word	0x200000e8
 8001d1c:	200000f8 	.word	0x200000f8
 8001d20:	200001d9 	.word	0x200001d9
 8001d24:	200001da 	.word	0x200001da
 8001d28:	200001d8 	.word	0x200001d8
 8001d2c:	20000440 	.word	0x20000440
 8001d30:	20000138 	.word	0x20000138
 8001d34:	3ff00000 	.word	0x3ff00000
 8001d38:	200001e8 	.word	0x200001e8
 8001d3c:	20000034 	.word	0x20000034
 8001d40:	00000000 	.word	0x00000000
 8001d44:	20000000 	.word	0x20000000
 8001d48:	20000068 	.word	0x20000068
 8001d4c:	20000098 	.word	0x20000098
	}

	//Climbing up process
	else if (lifting_mode == 1){
 8001d50:	4b37      	ldr	r3, [pc, #220]	; (8001e30 <main+0x3b0>)
 8001d52:	f993 3000 	ldrsb.w	r3, [r3]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d166      	bne.n	8001e28 <main+0x3a8>
		//TODO: Measure curb height
		curb_height = CLIMBING_LEG_LENGTH * cos(encoderLeft.angleDeg) + BASE_HEIGHT;
 8001d5a:	4b36      	ldr	r3, [pc, #216]	; (8001e34 <main+0x3b4>)
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fbab 	bl	80004b8 <__aeabi_f2d>
 8001d62:	4680      	mov	r8, r0
 8001d64:	4689      	mov	r9, r1
 8001d66:	4b34      	ldr	r3, [pc, #208]	; (8001e38 <main+0x3b8>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fb82 	bl	8000474 <__aeabi_ui2d>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	ec43 2b10 	vmov	d0, r2, r3
 8001d78:	f005 ffc6 	bl	8007d08 <cos>
 8001d7c:	ec53 2b10 	vmov	r2, r3, d0
 8001d80:	4640      	mov	r0, r8
 8001d82:	4649      	mov	r1, r9
 8001d84:	f7fe fbf0 	bl	8000568 <__aeabi_dmul>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4690      	mov	r8, r2
 8001d8e:	4699      	mov	r9, r3
 8001d90:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <main+0x3bc>)
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fb90 	bl	80004b8 <__aeabi_f2d>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4640      	mov	r0, r8
 8001d9e:	4649      	mov	r1, r9
 8001da0:	f7fe fa2c 	bl	80001fc <__adddf3>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4610      	mov	r0, r2
 8001daa:	4619      	mov	r1, r3
 8001dac:	f7fe fed4 	bl	8000b58 <__aeabi_d2f>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4a23      	ldr	r2, [pc, #140]	; (8001e40 <main+0x3c0>)
 8001db4:	6013      	str	r3, [r2, #0]
		//TODO:


		//2. In the mean while, the back wheel will balance the robot
		// Check if need to compute PID
		if (pid_need_compute(balance_pid) && fabs(initial_angle - MPU6050.KalmanAngleX) > 1.0){
 8001db6:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <main+0x3c4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff f898 	bl	8000ef0 <pid_need_compute>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d030      	beq.n	8001e28 <main+0x3a8>
 8001dc6:	4b20      	ldr	r3, [pc, #128]	; (8001e48 <main+0x3c8>)
 8001dc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dcc:	4b1f      	ldr	r3, [pc, #124]	; (8001e4c <main+0x3cc>)
 8001dce:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8001dd2:	f7fe fa11 	bl	80001f8 <__aeabi_dsub>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4614      	mov	r4, r2
 8001ddc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <main+0x3d0>)
 8001de6:	4620      	mov	r0, r4
 8001de8:	4629      	mov	r1, r5
 8001dea:	f7fe fe4d 	bl	8000a88 <__aeabi_dcmpgt>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d019      	beq.n	8001e28 <main+0x3a8>
			// Read process feedback
			climbUp_input = (MPU6050.KalmanAngleX - initial_angle);
 8001df4:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <main+0x3cc>)
 8001df6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8001dfa:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <main+0x3c8>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f7fe f9fa 	bl	80001f8 <__aeabi_dsub>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f7fe fea4 	bl	8000b58 <__aeabi_d2f>
 8001e10:	4603      	mov	r3, r0
 8001e12:	4a10      	ldr	r2, [pc, #64]	; (8001e54 <main+0x3d4>)
 8001e14:	6013      	str	r3, [r2, #0]
			// Compute new PID output value
			pid_compute(balance_pid);
 8001e16:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <main+0x3c4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff f87d 	bl	8000f1a <pid_compute>
			//Change actuator value
			speed[BACK_INDEX] = climbUp_output;
 8001e20:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <main+0x3d8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0d      	ldr	r2, [pc, #52]	; (8001e5c <main+0x3dc>)
 8001e26:	6053      	str	r3, [r2, #4]
//
//	//Climbing phase start



	prev_time = HAL_GetTick();
 8001e28:	f001 fa76 	bl	8003318 <HAL_GetTick>
 8001e2c:	60f8      	str	r0, [r7, #12]
      if (HAL_GetTick() - debug_prev_time >= 1000){
 8001e2e:	e671      	b.n	8001b14 <main+0x94>
 8001e30:	200001d8 	.word	0x200001d8
 8001e34:	3df5c28f 	.word	0x3df5c28f
 8001e38:	200002e8 	.word	0x200002e8
 8001e3c:	3f666666 	.word	0x3f666666
 8001e40:	200001dc 	.word	0x200001dc
 8001e44:	200004a0 	.word	0x200004a0
 8001e48:	200001e8 	.word	0x200001e8
 8001e4c:	20000440 	.word	0x20000440
 8001e50:	3ff00000 	.word	0x3ff00000
 8001e54:	200001f0 	.word	0x200001f0
 8001e58:	200001f4 	.word	0x200001f4
 8001e5c:	200001e0 	.word	0x200001e0

08001e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b094      	sub	sp, #80	; 0x50
 8001e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e66:	f107 0320 	add.w	r3, r7, #32
 8001e6a:	2230      	movs	r2, #48	; 0x30
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f005 fda2 	bl	80079b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e74:	f107 030c 	add.w	r3, r7, #12
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <SystemClock_Config+0xd8>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	4a2a      	ldr	r2, [pc, #168]	; (8001f38 <SystemClock_Config+0xd8>)
 8001e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e92:	6413      	str	r3, [r2, #64]	; 0x40
 8001e94:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <SystemClock_Config+0xd8>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <SystemClock_Config+0xdc>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a24      	ldr	r2, [pc, #144]	; (8001f3c <SystemClock_Config+0xdc>)
 8001eaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <SystemClock_Config+0xdc>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001eb8:	607b      	str	r3, [r7, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ec0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001eca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ed0:	2308      	movs	r3, #8
 8001ed2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001ed4:	23b4      	movs	r3, #180	; 0xb4
 8001ed6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001edc:	2304      	movs	r3, #4
 8001ede:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ee0:	f107 0320 	add.w	r3, r7, #32
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f003 f8c7 	bl	8005078 <HAL_RCC_OscConfig>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ef0:	f000 f8b2 	bl	8002058 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ef4:	f003 f870 	bl	8004fd8 <HAL_PWREx_EnableOverDrive>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001efe:	f000 f8ab 	bl	8002058 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f02:	230f      	movs	r3, #15
 8001f04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f06:	2302      	movs	r3, #2
 8001f08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f1a:	f107 030c 	add.w	r3, r7, #12
 8001f1e:	2105      	movs	r1, #5
 8001f20:	4618      	mov	r0, r3
 8001f22:	f003 fb19 	bl	8005558 <HAL_RCC_ClockConfig>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001f2c:	f000 f894 	bl	8002058 <Error_Handler>
  }
}
 8001f30:	bf00      	nop
 8001f32:	3750      	adds	r7, #80	; 0x50
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40007000 	.word	0x40007000

08001f40 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin){
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	2b80      	cmp	r3, #128	; 0x80
 8001f4e:	d11c      	bne.n	8001f8a <HAL_GPIO_EXTI_Callback+0x4a>
    case AD_BUSY_Pin:{
      if (HAL_GetTick()-prev_adc_time > 1){
 8001f50:	f001 f9e2 	bl	8003318 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <HAL_GPIO_EXTI_Callback+0x58>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d916      	bls.n	8001f8e <HAL_GPIO_EXTI_Callback+0x4e>
	  ADC_Read(&adc_rawData[0]);
 8001f60:	480e      	ldr	r0, [pc, #56]	; (8001f9c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001f62:	f7ff f86d 	bl	8001040 <ADC_Read>
	  tempJoyRawDataX = adc_rawData[0];
 8001f66:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001f68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <HAL_GPIO_EXTI_Callback+0x60>)
 8001f70:	601a      	str	r2, [r3, #0]
	  tempJoyRawDataY = adc_rawData[1];
 8001f72:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001f74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <HAL_GPIO_EXTI_Callback+0x64>)
 8001f7c:	601a      	str	r2, [r3, #0]
	  prev_adc_time = HAL_GetTick();
 8001f7e:	f001 f9cb 	bl	8003318 <HAL_GetTick>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <HAL_GPIO_EXTI_Callback+0x58>)
 8001f86:	6013      	str	r3, [r2, #0]
      }
    }

      break;
 8001f88:	e001      	b.n	8001f8e <HAL_GPIO_EXTI_Callback+0x4e>
    default:
      break;
 8001f8a:	bf00      	nop
 8001f8c:	e000      	b.n	8001f90 <HAL_GPIO_EXTI_Callback+0x50>
      break;
 8001f8e:	bf00      	nop
  }
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	200001d4 	.word	0x200001d4
 8001f9c:	200004a8 	.word	0x200004a8
 8001fa0:	20000504 	.word	0x20000504
 8001fa4:	20000430 	.word	0x20000430

08001fa8 <HAL_CAN_RxFifo0MsgPendingCallback>:
	}

}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
	//Left Encoder Callback
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	if (hcan == &hcan1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a13      	ldr	r2, [pc, #76]	; (8002000 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d11e      	bne.n	8001ff6 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 8001fb8:	f107 0308 	add.w	r3, r7, #8
 8001fbc:	4a11      	ldr	r2, [pc, #68]	; (8002004 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f001 fcd4 	bl	800396e <HAL_CAN_GetRxMessage>
		if(incoming[1] == ENC_ADDR_LEFT){
 8001fc6:	7a7b      	ldrb	r3, [r7, #9]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d108      	bne.n	8001fde <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
			ENCODER_Sort_Incoming(incoming, &encoderLeft);
 8001fcc:	f107 0308 	add.w	r3, r7, #8
 8001fd0:	490d      	ldr	r1, [pc, #52]	; (8002008 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff fae6 	bl	80015a4 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderLeft);
 8001fd8:	480b      	ldr	r0, [pc, #44]	; (8002008 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8001fda:	f7ff fb5c 	bl	8001696 <ENCODER_Get_Angle>
		}
		if(incoming[1] == ENC_ADDR_RIGHT){
 8001fde:	7a7b      	ldrb	r3, [r7, #9]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d108      	bne.n	8001ff6 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
			ENCODER_Sort_Incoming(incoming, &encoderRight);
 8001fe4:	f107 0308 	add.w	r3, r7, #8
 8001fe8:	4908      	ldr	r1, [pc, #32]	; (800200c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fada 	bl	80015a4 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderRight);
 8001ff0:	4806      	ldr	r0, [pc, #24]	; (800200c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8001ff2:	f7ff fb50 	bl	8001696 <ENCODER_Get_Angle>
		}

	}

}
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000298 	.word	0x20000298
 8002004:	200001f8 	.word	0x200001f8
 8002008:	200002e8 	.word	0x200002e8
 800200c:	20000360 	.word	0x20000360

08002010 <baseMotorCommand>:


void baseMotorCommand(void){
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = (int)baseWheelSpeed.cur_r  + 1500;
 8002014:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <baseMotorCommand+0x40>)
 8002016:	edd3 7a01 	vldr	s15, [r3, #4]
 800201a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800201e:	ee17 3a90 	vmov	r3, s15
 8002022:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <baseMotorCommand+0x44>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	635a      	str	r2, [r3, #52]	; 0x34
  MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = (int)baseWheelSpeed.cur_l + 1500;
 800202c:	4b08      	ldr	r3, [pc, #32]	; (8002050 <baseMotorCommand+0x40>)
 800202e:	edd3 7a00 	vldr	s15, [r3]
 8002032:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002036:	ee17 3a90 	vmov	r3, s15
 800203a:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 800203e:	4b05      	ldr	r3, [pc, #20]	; (8002054 <baseMotorCommand+0x44>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	20000068 	.word	0x20000068
 8002054:	20000548 	.word	0x20000548

08002058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800206c:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <MX_SPI1_Init+0x68>)
 800206e:	4a19      	ldr	r2, [pc, #100]	; (80020d4 <MX_SPI1_Init+0x6c>)
 8002070:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002072:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <MX_SPI1_Init+0x68>)
 8002074:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002078:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <MX_SPI1_Init+0x68>)
 800207c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002080:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002082:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <MX_SPI1_Init+0x68>)
 8002084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002088:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800208a:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <MX_SPI1_Init+0x68>)
 800208c:	2202      	movs	r2, #2
 800208e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <MX_SPI1_Init+0x68>)
 8002092:	2200      	movs	r2, #0
 8002094:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002096:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <MX_SPI1_Init+0x68>)
 8002098:	f44f 7200 	mov.w	r2, #512	; 0x200
 800209c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800209e:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <MX_SPI1_Init+0x68>)
 80020a0:	2228      	movs	r2, #40	; 0x28
 80020a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020a4:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <MX_SPI1_Init+0x68>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <MX_SPI1_Init+0x68>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020b0:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <MX_SPI1_Init+0x68>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <MX_SPI1_Init+0x68>)
 80020b8:	220a      	movs	r2, #10
 80020ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020bc:	4804      	ldr	r0, [pc, #16]	; (80020d0 <MX_SPI1_Init+0x68>)
 80020be:	f003 fc45 	bl	800594c <HAL_SPI_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80020c8:	f7ff ffc6 	bl	8002058 <Error_Handler>
  }

}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20000240 	.word	0x20000240
 80020d4:	40013000 	.word	0x40013000

080020d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08a      	sub	sp, #40	; 0x28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a19      	ldr	r2, [pc, #100]	; (800215c <HAL_SPI_MspInit+0x84>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d12b      	bne.n	8002152 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	4b18      	ldr	r3, [pc, #96]	; (8002160 <HAL_SPI_MspInit+0x88>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	4a17      	ldr	r2, [pc, #92]	; (8002160 <HAL_SPI_MspInit+0x88>)
 8002104:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002108:	6453      	str	r3, [r2, #68]	; 0x44
 800210a:	4b15      	ldr	r3, [pc, #84]	; (8002160 <HAL_SPI_MspInit+0x88>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_SPI_MspInit+0x88>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4a10      	ldr	r2, [pc, #64]	; (8002160 <HAL_SPI_MspInit+0x88>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <HAL_SPI_MspInit+0x88>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 8002132:	2360      	movs	r3, #96	; 0x60
 8002134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213e:	2303      	movs	r3, #3
 8002140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002142:	2305      	movs	r3, #5
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	f107 0314 	add.w	r3, r7, #20
 800214a:	4619      	mov	r1, r3
 800214c:	4805      	ldr	r0, [pc, #20]	; (8002164 <HAL_SPI_MspInit+0x8c>)
 800214e:	f002 fb8d 	bl	800486c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002152:	bf00      	nop
 8002154:	3728      	adds	r7, #40	; 0x28
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40013000 	.word	0x40013000
 8002160:	40023800 	.word	0x40023800
 8002164:	40020000 	.word	0x40020000

08002168 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <HAL_MspInit+0x4c>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	4a0f      	ldr	r2, [pc, #60]	; (80021b4 <HAL_MspInit+0x4c>)
 8002178:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800217c:	6453      	str	r3, [r2, #68]	; 0x44
 800217e:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <HAL_MspInit+0x4c>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	603b      	str	r3, [r7, #0]
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_MspInit+0x4c>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	4a08      	ldr	r2, [pc, #32]	; (80021b4 <HAL_MspInit+0x4c>)
 8002194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002198:	6413      	str	r3, [r2, #64]	; 0x40
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_MspInit+0x4c>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800

080021b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ca:	e7fe      	b.n	80021ca <HardFault_Handler+0x4>

080021cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d0:	e7fe      	b.n	80021d0 <MemManage_Handler+0x4>

080021d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021d6:	e7fe      	b.n	80021d6 <BusFault_Handler+0x4>

080021d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021dc:	e7fe      	b.n	80021dc <UsageFault_Handler+0x4>

080021de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800220c:	f001 f870 	bl	80032f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}

08002214 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <DMA1_Stream1_IRQHandler+0x10>)
 800221a:	f002 f8eb 	bl	80043f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000608 	.word	0x20000608

08002228 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800222c:	4802      	ldr	r0, [pc, #8]	; (8002238 <CAN1_RX0_IRQHandler+0x10>)
 800222e:	f001 fcd6 	bl	8003bde <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000298 	.word	0x20000298

0800223c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002240:	2080      	movs	r0, #128	; 0x80
 8002242:	f002 fcf1 	bl	8004c28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <SystemInit+0x28>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002256:	4a07      	ldr	r2, [pc, #28]	; (8002274 <SystemInit+0x28>)
 8002258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800225c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002260:	4b04      	ldr	r3, [pc, #16]	; (8002274 <SystemInit+0x28>)
 8002262:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002266:	609a      	str	r2, [r3, #8]
#endif
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b096      	sub	sp, #88	; 0x58
 800227c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800227e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800228c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
 80022a4:	611a      	str	r2, [r3, #16]
 80022a6:	615a      	str	r2, [r3, #20]
 80022a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	2220      	movs	r2, #32
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f005 fb81 	bl	80079b8 <memset>

  htim1.Instance = TIM1;
 80022b6:	4b3e      	ldr	r3, [pc, #248]	; (80023b0 <MX_TIM1_Init+0x138>)
 80022b8:	4a3e      	ldr	r2, [pc, #248]	; (80023b4 <MX_TIM1_Init+0x13c>)
 80022ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 80022bc:	4b3c      	ldr	r3, [pc, #240]	; (80023b0 <MX_TIM1_Init+0x138>)
 80022be:	22b3      	movs	r2, #179	; 0xb3
 80022c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c2:	4b3b      	ldr	r3, [pc, #236]	; (80023b0 <MX_TIM1_Init+0x138>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80022c8:	4b39      	ldr	r3, [pc, #228]	; (80023b0 <MX_TIM1_Init+0x138>)
 80022ca:	2263      	movs	r2, #99	; 0x63
 80022cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ce:	4b38      	ldr	r3, [pc, #224]	; (80023b0 <MX_TIM1_Init+0x138>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022d4:	4b36      	ldr	r3, [pc, #216]	; (80023b0 <MX_TIM1_Init+0x138>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022da:	4b35      	ldr	r3, [pc, #212]	; (80023b0 <MX_TIM1_Init+0x138>)
 80022dc:	2200      	movs	r2, #0
 80022de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022e0:	4833      	ldr	r0, [pc, #204]	; (80023b0 <MX_TIM1_Init+0x138>)
 80022e2:	f003 ff53 	bl	800618c <HAL_TIM_Base_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80022ec:	f7ff feb4 	bl	8002058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022fa:	4619      	mov	r1, r3
 80022fc:	482c      	ldr	r0, [pc, #176]	; (80023b0 <MX_TIM1_Init+0x138>)
 80022fe:	f004 f97b 	bl	80065f8 <HAL_TIM_ConfigClockSource>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002308:	f7ff fea6 	bl	8002058 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800230c:	4828      	ldr	r0, [pc, #160]	; (80023b0 <MX_TIM1_Init+0x138>)
 800230e:	f003 ff68 	bl	80061e2 <HAL_TIM_PWM_Init>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002318:	f7ff fe9e 	bl	8002058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800231c:	2300      	movs	r3, #0
 800231e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002320:	2300      	movs	r3, #0
 8002322:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002324:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002328:	4619      	mov	r1, r3
 800232a:	4821      	ldr	r0, [pc, #132]	; (80023b0 <MX_TIM1_Init+0x138>)
 800232c:	f004 fe62 	bl	8006ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002336:	f7ff fe8f 	bl	8002058 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800233a:	2360      	movs	r3, #96	; 0x60
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002342:	2300      	movs	r3, #0
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002346:	2300      	movs	r3, #0
 8002348:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800234e:	2300      	movs	r3, #0
 8002350:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002352:	2300      	movs	r3, #0
 8002354:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235a:	2204      	movs	r2, #4
 800235c:	4619      	mov	r1, r3
 800235e:	4814      	ldr	r0, [pc, #80]	; (80023b0 <MX_TIM1_Init+0x138>)
 8002360:	f004 f884 	bl	800646c <HAL_TIM_PWM_ConfigChannel>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800236a:	f7ff fe75 	bl	8002058 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800236e:	2300      	movs	r3, #0
 8002370:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002372:	2300      	movs	r3, #0
 8002374:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002386:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002388:	2300      	movs	r3, #0
 800238a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	4619      	mov	r1, r3
 8002390:	4807      	ldr	r0, [pc, #28]	; (80023b0 <MX_TIM1_Init+0x138>)
 8002392:	f004 feab 	bl	80070ec <HAL_TIMEx_ConfigBreakDeadTime>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800239c:	f7ff fe5c 	bl	8002058 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80023a0:	4803      	ldr	r0, [pc, #12]	; (80023b0 <MX_TIM1_Init+0x138>)
 80023a2:	f000 fa2b 	bl	80027fc <HAL_TIM_MspPostInit>

}
 80023a6:	bf00      	nop
 80023a8:	3758      	adds	r7, #88	; 0x58
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000588 	.word	0x20000588
 80023b4:	40010000 	.word	0x40010000

080023b8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	; 0x28
 80023bc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023be:	f107 0318 	add.w	r3, r7, #24
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023cc:	f107 0310 	add.w	r3, r7, #16
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80023d6:	463b      	mov	r3, r7
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 80023e2:	4b31      	ldr	r3, [pc, #196]	; (80024a8 <MX_TIM2_Init+0xf0>)
 80023e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 80023ea:	4b2f      	ldr	r3, [pc, #188]	; (80024a8 <MX_TIM2_Init+0xf0>)
 80023ec:	22b3      	movs	r2, #179	; 0xb3
 80023ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023f0:	4b2d      	ldr	r3, [pc, #180]	; (80024a8 <MX_TIM2_Init+0xf0>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536-1;
 80023f6:	4b2c      	ldr	r3, [pc, #176]	; (80024a8 <MX_TIM2_Init+0xf0>)
 80023f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023fe:	4b2a      	ldr	r3, [pc, #168]	; (80024a8 <MX_TIM2_Init+0xf0>)
 8002400:	2200      	movs	r2, #0
 8002402:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002404:	4b28      	ldr	r3, [pc, #160]	; (80024a8 <MX_TIM2_Init+0xf0>)
 8002406:	2200      	movs	r2, #0
 8002408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800240a:	4827      	ldr	r0, [pc, #156]	; (80024a8 <MX_TIM2_Init+0xf0>)
 800240c:	f003 febe 	bl	800618c <HAL_TIM_Base_Init>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002416:	f7ff fe1f 	bl	8002058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800241a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800241e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002420:	f107 0318 	add.w	r3, r7, #24
 8002424:	4619      	mov	r1, r3
 8002426:	4820      	ldr	r0, [pc, #128]	; (80024a8 <MX_TIM2_Init+0xf0>)
 8002428:	f004 f8e6 	bl	80065f8 <HAL_TIM_ConfigClockSource>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002432:	f7ff fe11 	bl	8002058 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002436:	481c      	ldr	r0, [pc, #112]	; (80024a8 <MX_TIM2_Init+0xf0>)
 8002438:	f003 ff46 	bl	80062c8 <HAL_TIM_IC_Init>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002442:	f7ff fe09 	bl	8002058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800244e:	f107 0310 	add.w	r3, r7, #16
 8002452:	4619      	mov	r1, r3
 8002454:	4814      	ldr	r0, [pc, #80]	; (80024a8 <MX_TIM2_Init+0xf0>)
 8002456:	f004 fdcd 	bl	8006ff4 <HAL_TIMEx_MasterConfigSynchronization>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002460:	f7ff fdfa 	bl	8002058 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002464:	2300      	movs	r3, #0
 8002466:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002468:	2301      	movs	r3, #1
 800246a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800246c:	2300      	movs	r3, #0
 800246e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002474:	463b      	mov	r3, r7
 8002476:	2208      	movs	r2, #8
 8002478:	4619      	mov	r1, r3
 800247a:	480b      	ldr	r0, [pc, #44]	; (80024a8 <MX_TIM2_Init+0xf0>)
 800247c:	f003 ff59 	bl	8006332 <HAL_TIM_IC_ConfigChannel>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002486:	f7ff fde7 	bl	8002058 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800248a:	463b      	mov	r3, r7
 800248c:	220c      	movs	r2, #12
 800248e:	4619      	mov	r1, r3
 8002490:	4805      	ldr	r0, [pc, #20]	; (80024a8 <MX_TIM2_Init+0xf0>)
 8002492:	f003 ff4e 	bl	8006332 <HAL_TIM_IC_ConfigChannel>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 800249c:	f7ff fddc 	bl	8002058 <Error_Handler>
  }

}
 80024a0:	bf00      	nop
 80024a2:	3728      	adds	r7, #40	; 0x28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	200005c8 	.word	0x200005c8

080024ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08e      	sub	sp, #56	; 0x38
 80024b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	609a      	str	r2, [r3, #8]
 80024be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c0:	f107 0320 	add.w	r3, r7, #32
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ca:	1d3b      	adds	r3, r7, #4
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
 80024d8:	615a      	str	r2, [r3, #20]
 80024da:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80024dc:	4b32      	ldr	r3, [pc, #200]	; (80025a8 <MX_TIM3_Init+0xfc>)
 80024de:	4a33      	ldr	r2, [pc, #204]	; (80025ac <MX_TIM3_Init+0x100>)
 80024e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 80024e2:	4b31      	ldr	r3, [pc, #196]	; (80025a8 <MX_TIM3_Init+0xfc>)
 80024e4:	2259      	movs	r2, #89	; 0x59
 80024e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e8:	4b2f      	ldr	r3, [pc, #188]	; (80025a8 <MX_TIM3_Init+0xfc>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 80024ee:	4b2e      	ldr	r3, [pc, #184]	; (80025a8 <MX_TIM3_Init+0xfc>)
 80024f0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80024f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f6:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <MX_TIM3_Init+0xfc>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024fc:	4b2a      	ldr	r3, [pc, #168]	; (80025a8 <MX_TIM3_Init+0xfc>)
 80024fe:	2200      	movs	r2, #0
 8002500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002502:	4829      	ldr	r0, [pc, #164]	; (80025a8 <MX_TIM3_Init+0xfc>)
 8002504:	f003 fe42 	bl	800618c <HAL_TIM_Base_Init>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800250e:	f7ff fda3 	bl	8002058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002516:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002518:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800251c:	4619      	mov	r1, r3
 800251e:	4822      	ldr	r0, [pc, #136]	; (80025a8 <MX_TIM3_Init+0xfc>)
 8002520:	f004 f86a 	bl	80065f8 <HAL_TIM_ConfigClockSource>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800252a:	f7ff fd95 	bl	8002058 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800252e:	481e      	ldr	r0, [pc, #120]	; (80025a8 <MX_TIM3_Init+0xfc>)
 8002530:	f003 fe57 	bl	80061e2 <HAL_TIM_PWM_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800253a:	f7ff fd8d 	bl	8002058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800253e:	2300      	movs	r3, #0
 8002540:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002546:	f107 0320 	add.w	r3, r7, #32
 800254a:	4619      	mov	r1, r3
 800254c:	4816      	ldr	r0, [pc, #88]	; (80025a8 <MX_TIM3_Init+0xfc>)
 800254e:	f004 fd51 	bl	8006ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002558:	f7ff fd7e 	bl	8002058 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800255c:	2360      	movs	r3, #96	; 0x60
 800255e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8002560:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002564:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800256e:	1d3b      	adds	r3, r7, #4
 8002570:	2200      	movs	r2, #0
 8002572:	4619      	mov	r1, r3
 8002574:	480c      	ldr	r0, [pc, #48]	; (80025a8 <MX_TIM3_Init+0xfc>)
 8002576:	f003 ff79 	bl	800646c <HAL_TIM_PWM_ConfigChannel>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002580:	f7ff fd6a 	bl	8002058 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	2204      	movs	r2, #4
 8002588:	4619      	mov	r1, r3
 800258a:	4807      	ldr	r0, [pc, #28]	; (80025a8 <MX_TIM3_Init+0xfc>)
 800258c:	f003 ff6e 	bl	800646c <HAL_TIM_PWM_ConfigChannel>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002596:	f7ff fd5f 	bl	8002058 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800259a:	4803      	ldr	r0, [pc, #12]	; (80025a8 <MX_TIM3_Init+0xfc>)
 800259c:	f000 f92e 	bl	80027fc <HAL_TIM_MspPostInit>

}
 80025a0:	bf00      	nop
 80025a2:	3738      	adds	r7, #56	; 0x38
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000548 	.word	0x20000548
 80025ac:	40000400 	.word	0x40000400

080025b0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b096      	sub	sp, #88	; 0x58
 80025b4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	60da      	str	r2, [r3, #12]
 80025dc:	611a      	str	r2, [r3, #16]
 80025de:	615a      	str	r2, [r3, #20]
 80025e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025e2:	1d3b      	adds	r3, r7, #4
 80025e4:	2220      	movs	r2, #32
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f005 f9e5 	bl	80079b8 <memset>

  htim8.Instance = TIM8;
 80025ee:	4b3d      	ldr	r3, [pc, #244]	; (80026e4 <MX_TIM8_Init+0x134>)
 80025f0:	4a3d      	ldr	r2, [pc, #244]	; (80026e8 <MX_TIM8_Init+0x138>)
 80025f2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 80025f4:	4b3b      	ldr	r3, [pc, #236]	; (80026e4 <MX_TIM8_Init+0x134>)
 80025f6:	22b3      	movs	r2, #179	; 0xb3
 80025f8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025fa:	4b3a      	ldr	r3, [pc, #232]	; (80026e4 <MX_TIM8_Init+0x134>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8002600:	4b38      	ldr	r3, [pc, #224]	; (80026e4 <MX_TIM8_Init+0x134>)
 8002602:	2263      	movs	r2, #99	; 0x63
 8002604:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002606:	4b37      	ldr	r3, [pc, #220]	; (80026e4 <MX_TIM8_Init+0x134>)
 8002608:	2200      	movs	r2, #0
 800260a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800260c:	4b35      	ldr	r3, [pc, #212]	; (80026e4 <MX_TIM8_Init+0x134>)
 800260e:	2200      	movs	r2, #0
 8002610:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002612:	4b34      	ldr	r3, [pc, #208]	; (80026e4 <MX_TIM8_Init+0x134>)
 8002614:	2200      	movs	r2, #0
 8002616:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002618:	4832      	ldr	r0, [pc, #200]	; (80026e4 <MX_TIM8_Init+0x134>)
 800261a:	f003 fdb7 	bl	800618c <HAL_TIM_Base_Init>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8002624:	f7ff fd18 	bl	8002058 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800262c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800262e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002632:	4619      	mov	r1, r3
 8002634:	482b      	ldr	r0, [pc, #172]	; (80026e4 <MX_TIM8_Init+0x134>)
 8002636:	f003 ffdf 	bl	80065f8 <HAL_TIM_ConfigClockSource>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8002640:	f7ff fd0a 	bl	8002058 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002644:	4827      	ldr	r0, [pc, #156]	; (80026e4 <MX_TIM8_Init+0x134>)
 8002646:	f003 fdcc 	bl	80061e2 <HAL_TIM_PWM_Init>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002650:	f7ff fd02 	bl	8002058 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002654:	2300      	movs	r3, #0
 8002656:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002658:	2300      	movs	r3, #0
 800265a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800265c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002660:	4619      	mov	r1, r3
 8002662:	4820      	ldr	r0, [pc, #128]	; (80026e4 <MX_TIM8_Init+0x134>)
 8002664:	f004 fcc6 	bl	8006ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800266e:	f7ff fcf3 	bl	8002058 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002672:	2360      	movs	r3, #96	; 0x60
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002676:	2300      	movs	r3, #0
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800267a:	2300      	movs	r3, #0
 800267c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800267e:	2300      	movs	r3, #0
 8002680:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800268a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800268e:	220c      	movs	r2, #12
 8002690:	4619      	mov	r1, r3
 8002692:	4814      	ldr	r0, [pc, #80]	; (80026e4 <MX_TIM8_Init+0x134>)
 8002694:	f003 feea 	bl	800646c <HAL_TIM_PWM_ConfigChannel>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 800269e:	f7ff fcdb 	bl	8002058 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026bc:	2300      	movs	r3, #0
 80026be:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80026c0:	1d3b      	adds	r3, r7, #4
 80026c2:	4619      	mov	r1, r3
 80026c4:	4807      	ldr	r0, [pc, #28]	; (80026e4 <MX_TIM8_Init+0x134>)
 80026c6:	f004 fd11 	bl	80070ec <HAL_TIMEx_ConfigBreakDeadTime>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_TIM8_Init+0x124>
  {
    Error_Handler();
 80026d0:	f7ff fcc2 	bl	8002058 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 80026d4:	4803      	ldr	r0, [pc, #12]	; (80026e4 <MX_TIM8_Init+0x134>)
 80026d6:	f000 f891 	bl	80027fc <HAL_TIM_MspPostInit>

}
 80026da:	bf00      	nop
 80026dc:	3758      	adds	r7, #88	; 0x58
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000508 	.word	0x20000508
 80026e8:	40010400 	.word	0x40010400

080026ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08c      	sub	sp, #48	; 0x30
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f4:	f107 031c 	add.w	r3, r7, #28
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	60da      	str	r2, [r3, #12]
 8002702:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a37      	ldr	r2, [pc, #220]	; (80027e8 <HAL_TIM_Base_MspInit+0xfc>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d10e      	bne.n	800272c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	61bb      	str	r3, [r7, #24]
 8002712:	4b36      	ldr	r3, [pc, #216]	; (80027ec <HAL_TIM_Base_MspInit+0x100>)
 8002714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002716:	4a35      	ldr	r2, [pc, #212]	; (80027ec <HAL_TIM_Base_MspInit+0x100>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6453      	str	r3, [r2, #68]	; 0x44
 800271e:	4b33      	ldr	r3, [pc, #204]	; (80027ec <HAL_TIM_Base_MspInit+0x100>)
 8002720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	61bb      	str	r3, [r7, #24]
 8002728:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800272a:	e059      	b.n	80027e0 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002734:	d12d      	bne.n	8002792 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	4b2c      	ldr	r3, [pc, #176]	; (80027ec <HAL_TIM_Base_MspInit+0x100>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	4a2b      	ldr	r2, [pc, #172]	; (80027ec <HAL_TIM_Base_MspInit+0x100>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	6413      	str	r3, [r2, #64]	; 0x40
 8002746:	4b29      	ldr	r3, [pc, #164]	; (80027ec <HAL_TIM_Base_MspInit+0x100>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	4b25      	ldr	r3, [pc, #148]	; (80027ec <HAL_TIM_Base_MspInit+0x100>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	4a24      	ldr	r2, [pc, #144]	; (80027ec <HAL_TIM_Base_MspInit+0x100>)
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	6313      	str	r3, [r2, #48]	; 0x30
 8002762:	4b22      	ldr	r3, [pc, #136]	; (80027ec <HAL_TIM_Base_MspInit+0x100>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin|ClimbSpeed_TIM2_CH4_Pin;
 800276e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002774:	2302      	movs	r3, #2
 8002776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277c:	2300      	movs	r3, #0
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002780:	2301      	movs	r3, #1
 8002782:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	4619      	mov	r1, r3
 800278a:	4819      	ldr	r0, [pc, #100]	; (80027f0 <HAL_TIM_Base_MspInit+0x104>)
 800278c:	f002 f86e 	bl	800486c <HAL_GPIO_Init>
}
 8002790:	e026      	b.n	80027e0 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM3)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a17      	ldr	r2, [pc, #92]	; (80027f4 <HAL_TIM_Base_MspInit+0x108>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d10e      	bne.n	80027ba <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	4b12      	ldr	r3, [pc, #72]	; (80027ec <HAL_TIM_Base_MspInit+0x100>)
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	4a11      	ldr	r2, [pc, #68]	; (80027ec <HAL_TIM_Base_MspInit+0x100>)
 80027a6:	f043 0302 	orr.w	r3, r3, #2
 80027aa:	6413      	str	r3, [r2, #64]	; 0x40
 80027ac:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <HAL_TIM_Base_MspInit+0x100>)
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]
}
 80027b8:	e012      	b.n	80027e0 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM8)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a0e      	ldr	r2, [pc, #56]	; (80027f8 <HAL_TIM_Base_MspInit+0x10c>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d10d      	bne.n	80027e0 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80027c4:	2300      	movs	r3, #0
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <HAL_TIM_Base_MspInit+0x100>)
 80027ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027cc:	4a07      	ldr	r2, [pc, #28]	; (80027ec <HAL_TIM_Base_MspInit+0x100>)
 80027ce:	f043 0302 	orr.w	r3, r3, #2
 80027d2:	6453      	str	r3, [r2, #68]	; 0x44
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_TIM_Base_MspInit+0x100>)
 80027d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	68bb      	ldr	r3, [r7, #8]
}
 80027e0:	bf00      	nop
 80027e2:	3730      	adds	r7, #48	; 0x30
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40010000 	.word	0x40010000
 80027ec:	40023800 	.word	0x40023800
 80027f0:	40020400 	.word	0x40020400
 80027f4:	40000400 	.word	0x40000400
 80027f8:	40010400 	.word	0x40010400

080027fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a37      	ldr	r2, [pc, #220]	; (80028f8 <HAL_TIM_MspPostInit+0xfc>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d11f      	bne.n	800285e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	4b36      	ldr	r3, [pc, #216]	; (80028fc <HAL_TIM_MspPostInit+0x100>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a35      	ldr	r2, [pc, #212]	; (80028fc <HAL_TIM_MspPostInit+0x100>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b33      	ldr	r3, [pc, #204]	; (80028fc <HAL_TIM_MspPostInit+0x100>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 800283a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800283e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002840:	2302      	movs	r3, #2
 8002842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002848:	2300      	movs	r3, #0
 800284a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800284c:	2301      	movs	r3, #1
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	4619      	mov	r1, r3
 8002856:	482a      	ldr	r0, [pc, #168]	; (8002900 <HAL_TIM_MspPostInit+0x104>)
 8002858:	f002 f808 	bl	800486c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800285c:	e047      	b.n	80028ee <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a28      	ldr	r2, [pc, #160]	; (8002904 <HAL_TIM_MspPostInit+0x108>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d11e      	bne.n	80028a6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	4b23      	ldr	r3, [pc, #140]	; (80028fc <HAL_TIM_MspPostInit+0x100>)
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	4a22      	ldr	r2, [pc, #136]	; (80028fc <HAL_TIM_MspPostInit+0x100>)
 8002872:	f043 0304 	orr.w	r3, r3, #4
 8002876:	6313      	str	r3, [r2, #48]	; 0x30
 8002878:	4b20      	ldr	r3, [pc, #128]	; (80028fc <HAL_TIM_MspPostInit+0x100>)
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 8002884:	23c0      	movs	r3, #192	; 0xc0
 8002886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002888:	2302      	movs	r3, #2
 800288a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	2300      	movs	r3, #0
 8002892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002894:	2302      	movs	r3, #2
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002898:	f107 0314 	add.w	r3, r7, #20
 800289c:	4619      	mov	r1, r3
 800289e:	481a      	ldr	r0, [pc, #104]	; (8002908 <HAL_TIM_MspPostInit+0x10c>)
 80028a0:	f001 ffe4 	bl	800486c <HAL_GPIO_Init>
}
 80028a4:	e023      	b.n	80028ee <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM8)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a18      	ldr	r2, [pc, #96]	; (800290c <HAL_TIM_MspPostInit+0x110>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d11e      	bne.n	80028ee <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028b0:	2300      	movs	r3, #0
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	4b11      	ldr	r3, [pc, #68]	; (80028fc <HAL_TIM_MspPostInit+0x100>)
 80028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b8:	4a10      	ldr	r2, [pc, #64]	; (80028fc <HAL_TIM_MspPostInit+0x100>)
 80028ba:	f043 0304 	orr.w	r3, r3, #4
 80028be:	6313      	str	r3, [r2, #48]	; 0x30
 80028c0:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <HAL_TIM_MspPostInit+0x100>)
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Climb_TIM8_CH4_Pin;
 80028cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d2:	2302      	movs	r3, #2
 80028d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028da:	2300      	movs	r3, #0
 80028dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80028de:	2303      	movs	r3, #3
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM8_CH4_GPIO_Port, &GPIO_InitStruct);
 80028e2:	f107 0314 	add.w	r3, r7, #20
 80028e6:	4619      	mov	r1, r3
 80028e8:	4807      	ldr	r0, [pc, #28]	; (8002908 <HAL_TIM_MspPostInit+0x10c>)
 80028ea:	f001 ffbf 	bl	800486c <HAL_GPIO_Init>
}
 80028ee:	bf00      	nop
 80028f0:	3728      	adds	r7, #40	; 0x28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40010000 	.word	0x40010000
 80028fc:	40023800 	.word	0x40023800
 8002900:	40020000 	.word	0x40020000
 8002904:	40000400 	.word	0x40000400
 8002908:	40020800 	.word	0x40020800
 800290c:	40010400 	.word	0x40010400

08002910 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002914:	4b11      	ldr	r3, [pc, #68]	; (800295c <MX_USART3_UART_Init+0x4c>)
 8002916:	4a12      	ldr	r2, [pc, #72]	; (8002960 <MX_USART3_UART_Init+0x50>)
 8002918:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800291a:	4b10      	ldr	r3, [pc, #64]	; (800295c <MX_USART3_UART_Init+0x4c>)
 800291c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002920:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002922:	4b0e      	ldr	r3, [pc, #56]	; (800295c <MX_USART3_UART_Init+0x4c>)
 8002924:	2200      	movs	r2, #0
 8002926:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002928:	4b0c      	ldr	r3, [pc, #48]	; (800295c <MX_USART3_UART_Init+0x4c>)
 800292a:	2200      	movs	r2, #0
 800292c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800292e:	4b0b      	ldr	r3, [pc, #44]	; (800295c <MX_USART3_UART_Init+0x4c>)
 8002930:	2200      	movs	r2, #0
 8002932:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002934:	4b09      	ldr	r3, [pc, #36]	; (800295c <MX_USART3_UART_Init+0x4c>)
 8002936:	220c      	movs	r2, #12
 8002938:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800293a:	4b08      	ldr	r3, [pc, #32]	; (800295c <MX_USART3_UART_Init+0x4c>)
 800293c:	2200      	movs	r2, #0
 800293e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <MX_USART3_UART_Init+0x4c>)
 8002942:	2200      	movs	r2, #0
 8002944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002946:	4805      	ldr	r0, [pc, #20]	; (800295c <MX_USART3_UART_Init+0x4c>)
 8002948:	f004 fc22 	bl	8007190 <HAL_UART_Init>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002952:	f7ff fb81 	bl	8002058 <Error_Handler>
  }

}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000668 	.word	0x20000668
 8002960:	40004800 	.word	0x40004800

08002964 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08a      	sub	sp, #40	; 0x28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 0314 	add.w	r3, r7, #20
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a30      	ldr	r2, [pc, #192]	; (8002a44 <HAL_UART_MspInit+0xe0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d15a      	bne.n	8002a3c <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <HAL_UART_MspInit+0xe4>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	4a2e      	ldr	r2, [pc, #184]	; (8002a48 <HAL_UART_MspInit+0xe4>)
 8002990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002994:	6413      	str	r3, [r2, #64]	; 0x40
 8002996:	4b2c      	ldr	r3, [pc, #176]	; (8002a48 <HAL_UART_MspInit+0xe4>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <HAL_UART_MspInit+0xe4>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	4a27      	ldr	r2, [pc, #156]	; (8002a48 <HAL_UART_MspInit+0xe4>)
 80029ac:	f043 0308 	orr.w	r3, r3, #8
 80029b0:	6313      	str	r3, [r2, #48]	; 0x30
 80029b2:	4b25      	ldr	r3, [pc, #148]	; (8002a48 <HAL_UART_MspInit+0xe4>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 80029be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c4:	2302      	movs	r3, #2
 80029c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029cc:	2303      	movs	r3, #3
 80029ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029d0:	2307      	movs	r3, #7
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	4619      	mov	r1, r3
 80029da:	481c      	ldr	r0, [pc, #112]	; (8002a4c <HAL_UART_MspInit+0xe8>)
 80029dc:	f001 ff46 	bl	800486c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80029e0:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <HAL_UART_MspInit+0xec>)
 80029e2:	4a1c      	ldr	r2, [pc, #112]	; (8002a54 <HAL_UART_MspInit+0xf0>)
 80029e4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80029e6:	4b1a      	ldr	r3, [pc, #104]	; (8002a50 <HAL_UART_MspInit+0xec>)
 80029e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029ec:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029ee:	4b18      	ldr	r3, [pc, #96]	; (8002a50 <HAL_UART_MspInit+0xec>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029f4:	4b16      	ldr	r3, [pc, #88]	; (8002a50 <HAL_UART_MspInit+0xec>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029fa:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <HAL_UART_MspInit+0xec>)
 80029fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a00:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a02:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <HAL_UART_MspInit+0xec>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <HAL_UART_MspInit+0xec>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002a0e:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <HAL_UART_MspInit+0xec>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a14:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <HAL_UART_MspInit+0xec>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a1a:	4b0d      	ldr	r3, [pc, #52]	; (8002a50 <HAL_UART_MspInit+0xec>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002a20:	480b      	ldr	r0, [pc, #44]	; (8002a50 <HAL_UART_MspInit+0xec>)
 8002a22:	f001 fc39 	bl	8004298 <HAL_DMA_Init>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002a2c:	f7ff fb14 	bl	8002058 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a07      	ldr	r2, [pc, #28]	; (8002a50 <HAL_UART_MspInit+0xec>)
 8002a34:	635a      	str	r2, [r3, #52]	; 0x34
 8002a36:	4a06      	ldr	r2, [pc, #24]	; (8002a50 <HAL_UART_MspInit+0xec>)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	3728      	adds	r7, #40	; 0x28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40004800 	.word	0x40004800
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40020c00 	.word	0x40020c00
 8002a50:	20000608 	.word	0x20000608
 8002a54:	40026028 	.word	0x40026028

08002a58 <joystickCalculatePos>:
void joystick_Init(void){
  memset(joyPosBuffer, 0, sizeof(joyPosBuffer));
}

void joystickCalculatePos(void)
{
 8002a58:	b5b0      	push	{r4, r5, r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
  // update joystick reading into buffer array
  if (joy_pos_buffer_cnt == JoyPosBufferSize)
 8002a5e:	4bc2      	ldr	r3, [pc, #776]	; (8002d68 <joystickCalculatePos+0x310>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2205      	movs	r2, #5
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d102      	bne.n	8002a6e <joystickCalculatePos+0x16>
    joy_pos_buffer_cnt = 0;
 8002a68:	4bbf      	ldr	r3, [pc, #764]	; (8002d68 <joystickCalculatePos+0x310>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]

  joyPosBuffer[0][joy_pos_buffer_cnt] = tempJoyRawDataX - JoystickCenterX;
 8002a6e:	4bbf      	ldr	r3, [pc, #764]	; (8002d6c <joystickCalculatePos+0x314>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	f643 7148 	movw	r1, #16200	; 0x3f48
 8002a76:	4bbc      	ldr	r3, [pc, #752]	; (8002d68 <joystickCalculatePos+0x310>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	1a52      	subs	r2, r2, r1
 8002a7c:	49bc      	ldr	r1, [pc, #752]	; (8002d70 <joystickCalculatePos+0x318>)
 8002a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  joyPosBuffer[1][joy_pos_buffer_cnt] = tempJoyRawDataY - JoystickCenterY;
 8002a82:	4bbc      	ldr	r3, [pc, #752]	; (8002d74 <joystickCalculatePos+0x31c>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8002a8a:	4bb7      	ldr	r3, [pc, #732]	; (8002d68 <joystickCalculatePos+0x310>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	1a52      	subs	r2, r2, r1
 8002a90:	49b7      	ldr	r1, [pc, #732]	; (8002d70 <joystickCalculatePos+0x318>)
 8002a92:	3305      	adds	r3, #5
 8002a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  // calculate joystick position average from the buffer
  int sum_x = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]
  int sum_y = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < JoyPosBufferSize; i++)
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	607b      	str	r3, [r7, #4]
 8002aa4:	e011      	b.n	8002aca <joystickCalculatePos+0x72>
  {
    sum_x += joyPosBuffer[0][i];
 8002aa6:	4ab2      	ldr	r2, [pc, #712]	; (8002d70 <joystickCalculatePos+0x318>)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]
    sum_y += joyPosBuffer[1][i];
 8002ab4:	4aae      	ldr	r2, [pc, #696]	; (8002d70 <joystickCalculatePos+0x318>)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3305      	adds	r3, #5
 8002aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < JoyPosBufferSize; i++)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	607b      	str	r3, [r7, #4]
 8002aca:	2205      	movs	r2, #5
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	dbe9      	blt.n	8002aa6 <joystickCalculatePos+0x4e>
  }

  hJoystick.x = sum_x / JoyPosBufferSize;
 8002ad2:	2205      	movs	r2, #5
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	fb93 f3f2 	sdiv	r3, r3, r2
 8002ada:	b21a      	sxth	r2, r3
 8002adc:	4ba6      	ldr	r3, [pc, #664]	; (8002d78 <joystickCalculatePos+0x320>)
 8002ade:	801a      	strh	r2, [r3, #0]
  hJoystick.y = sum_y / JoyPosBufferSize;
 8002ae0:	2205      	movs	r2, #5
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	fb93 f3f2 	sdiv	r3, r3, r2
 8002ae8:	b21a      	sxth	r2, r3
 8002aea:	4ba3      	ldr	r3, [pc, #652]	; (8002d78 <joystickCalculatePos+0x320>)
 8002aec:	805a      	strh	r2, [r3, #2]

  // calculate magnitude and angle
  hJoystick.magnitude = sqrt(pow(hJoystick.x, 2) + pow(hJoystick.y,2));
 8002aee:	4ba2      	ldr	r3, [pc, #648]	; (8002d78 <joystickCalculatePos+0x320>)
 8002af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fd fccd 	bl	8000494 <__aeabi_i2d>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	ed9f 1b96 	vldr	d1, [pc, #600]	; 8002d58 <joystickCalculatePos+0x300>
 8002b02:	ec43 2b10 	vmov	d0, r2, r3
 8002b06:	f005 f9b1 	bl	8007e6c <pow>
 8002b0a:	ec55 4b10 	vmov	r4, r5, d0
 8002b0e:	4b9a      	ldr	r3, [pc, #616]	; (8002d78 <joystickCalculatePos+0x320>)
 8002b10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fd fcbd 	bl	8000494 <__aeabi_i2d>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	ed9f 1b8e 	vldr	d1, [pc, #568]	; 8002d58 <joystickCalculatePos+0x300>
 8002b22:	ec43 2b10 	vmov	d0, r2, r3
 8002b26:	f005 f9a1 	bl	8007e6c <pow>
 8002b2a:	ec53 2b10 	vmov	r2, r3, d0
 8002b2e:	4620      	mov	r0, r4
 8002b30:	4629      	mov	r1, r5
 8002b32:	f7fd fb63 	bl	80001fc <__adddf3>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	ec43 2b17 	vmov	d7, r2, r3
 8002b3e:	eeb0 0a47 	vmov.f32	s0, s14
 8002b42:	eef0 0a67 	vmov.f32	s1, s15
 8002b46:	f005 fa3f 	bl	8007fc8 <sqrt>
 8002b4a:	ec53 2b10 	vmov	r2, r3, d0
 8002b4e:	4610      	mov	r0, r2
 8002b50:	4619      	mov	r1, r3
 8002b52:	f7fe f801 	bl	8000b58 <__aeabi_d2f>
 8002b56:	4603      	mov	r3, r0
 8002b58:	4a87      	ldr	r2, [pc, #540]	; (8002d78 <joystickCalculatePos+0x320>)
 8002b5a:	6053      	str	r3, [r2, #4]
  hJoystick.angle = atan2(hJoystick.y, hJoystick.x);
 8002b5c:	4b86      	ldr	r3, [pc, #536]	; (8002d78 <joystickCalculatePos+0x320>)
 8002b5e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fd fc96 	bl	8000494 <__aeabi_i2d>
 8002b68:	4604      	mov	r4, r0
 8002b6a:	460d      	mov	r5, r1
 8002b6c:	4b82      	ldr	r3, [pc, #520]	; (8002d78 <joystickCalculatePos+0x320>)
 8002b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fd fc8e 	bl	8000494 <__aeabi_i2d>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	ec43 2b11 	vmov	d1, r2, r3
 8002b80:	ec45 4b10 	vmov	d0, r4, r5
 8002b84:	f005 f970 	bl	8007e68 <atan2>
 8002b88:	ec53 2b10 	vmov	r2, r3, d0
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f7fd ffe2 	bl	8000b58 <__aeabi_d2f>
 8002b94:	4603      	mov	r3, r0
 8002b96:	4a78      	ldr	r2, [pc, #480]	; (8002d78 <joystickCalculatePos+0x320>)
 8002b98:	6093      	str	r3, [r2, #8]

  // limit magnitude
  if (hJoystick.magnitude > JoystickMagnitudeMax)
 8002b9a:	4b77      	ldr	r3, [pc, #476]	; (8002d78 <joystickCalculatePos+0x320>)
 8002b9c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ba0:	eddf 7a76 	vldr	s15, [pc, #472]	; 8002d7c <joystickCalculatePos+0x324>
 8002ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ba8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb0:	dd06      	ble.n	8002bc0 <joystickCalculatePos+0x168>
    hJoystick.magnitude = JoystickMagnitudeMax;
 8002bb2:	eddf 7a72 	vldr	s15, [pc, #456]	; 8002d7c <joystickCalculatePos+0x324>
 8002bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bba:	4b6f      	ldr	r3, [pc, #444]	; (8002d78 <joystickCalculatePos+0x320>)
 8002bbc:	edc3 7a01 	vstr	s15, [r3, #4]

  // filter joystick forward deadzone
  if (hJoystick.angle > JoyForwardAngle - JoyForwardAngleDeadzone &&
 8002bc0:	4b6d      	ldr	r3, [pc, #436]	; (8002d78 <joystickCalculatePos+0x320>)
 8002bc2:	ed93 7a02 	vldr	s14, [r3, #8]
 8002bc6:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8002d80 <joystickCalculatePos+0x328>
 8002bca:	eddf 7a6e 	vldr	s15, [pc, #440]	; 8002d84 <joystickCalculatePos+0x32c>
 8002bce:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002bd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bda:	dd10      	ble.n	8002bfe <joystickCalculatePos+0x1a6>
      hJoystick.angle < JoyForwardAngle + JoyForwardAngleDeadzone)
 8002bdc:	4b66      	ldr	r3, [pc, #408]	; (8002d78 <joystickCalculatePos+0x320>)
 8002bde:	ed93 7a02 	vldr	s14, [r3, #8]
 8002be2:	eddf 6a67 	vldr	s13, [pc, #412]	; 8002d80 <joystickCalculatePos+0x328>
 8002be6:	eddf 7a67 	vldr	s15, [pc, #412]	; 8002d84 <joystickCalculatePos+0x32c>
 8002bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
  if (hJoystick.angle > JoyForwardAngle - JoyForwardAngleDeadzone &&
 8002bee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf6:	d502      	bpl.n	8002bfe <joystickCalculatePos+0x1a6>
    hJoystick.angle = JoyForwardAngle;
 8002bf8:	4a63      	ldr	r2, [pc, #396]	; (8002d88 <joystickCalculatePos+0x330>)
 8002bfa:	4b5f      	ldr	r3, [pc, #380]	; (8002d78 <joystickCalculatePos+0x320>)
 8002bfc:	609a      	str	r2, [r3, #8]

  // filter joystick backward deadzone
  if (hJoystick.angle > -(JoyForwardAngle + JoyForwardAngleDeadzone) &&
 8002bfe:	4b5e      	ldr	r3, [pc, #376]	; (8002d78 <joystickCalculatePos+0x320>)
 8002c00:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c04:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8002d80 <joystickCalculatePos+0x328>
 8002c08:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8002d84 <joystickCalculatePos+0x32c>
 8002c0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c10:	eef1 7a67 	vneg.f32	s15, s15
 8002c14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1c:	dd16      	ble.n	8002c4c <joystickCalculatePos+0x1f4>
      hJoystick.angle < -(JoyForwardAngle - JoyForwardAngleDeadzone))
 8002c1e:	4b56      	ldr	r3, [pc, #344]	; (8002d78 <joystickCalculatePos+0x320>)
 8002c20:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c24:	eddf 6a56 	vldr	s13, [pc, #344]	; 8002d80 <joystickCalculatePos+0x328>
 8002c28:	eddf 7a56 	vldr	s15, [pc, #344]	; 8002d84 <joystickCalculatePos+0x32c>
 8002c2c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c30:	eef1 7a67 	vneg.f32	s15, s15
  if (hJoystick.angle > -(JoyForwardAngle + JoyForwardAngleDeadzone) &&
 8002c34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3c:	d506      	bpl.n	8002c4c <joystickCalculatePos+0x1f4>
    hJoystick.angle = -JoyForwardAngle;
 8002c3e:	eddf 7a50 	vldr	s15, [pc, #320]	; 8002d80 <joystickCalculatePos+0x328>
 8002c42:	eef1 7a67 	vneg.f32	s15, s15
 8002c46:	4b4c      	ldr	r3, [pc, #304]	; (8002d78 <joystickCalculatePos+0x320>)
 8002c48:	edc3 7a02 	vstr	s15, [r3, #8]

  // normalize joystick reading
  hJoystick.linear = hJoystick.magnitude/JoystickMagnitudeMax * sin(hJoystick.angle);
 8002c4c:	4b4a      	ldr	r3, [pc, #296]	; (8002d78 <joystickCalculatePos+0x320>)
 8002c4e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c52:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8002d7c <joystickCalculatePos+0x324>
 8002c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c5a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c5e:	ee16 0a90 	vmov	r0, s13
 8002c62:	f7fd fc29 	bl	80004b8 <__aeabi_f2d>
 8002c66:	4604      	mov	r4, r0
 8002c68:	460d      	mov	r5, r1
 8002c6a:	4b43      	ldr	r3, [pc, #268]	; (8002d78 <joystickCalculatePos+0x320>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fd fc22 	bl	80004b8 <__aeabi_f2d>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	ec43 2b10 	vmov	d0, r2, r3
 8002c7c:	f005 f8a0 	bl	8007dc0 <sin>
 8002c80:	ec53 2b10 	vmov	r2, r3, d0
 8002c84:	4620      	mov	r0, r4
 8002c86:	4629      	mov	r1, r5
 8002c88:	f7fd fc6e 	bl	8000568 <__aeabi_dmul>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4610      	mov	r0, r2
 8002c92:	4619      	mov	r1, r3
 8002c94:	f7fd ff60 	bl	8000b58 <__aeabi_d2f>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4a37      	ldr	r2, [pc, #220]	; (8002d78 <joystickCalculatePos+0x320>)
 8002c9c:	60d3      	str	r3, [r2, #12]
  hJoystick.angular = hJoystick.magnitude/JoystickMagnitudeMax * cos(hJoystick.angle);
 8002c9e:	4b36      	ldr	r3, [pc, #216]	; (8002d78 <joystickCalculatePos+0x320>)
 8002ca0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ca4:	eddf 7a35 	vldr	s15, [pc, #212]	; 8002d7c <joystickCalculatePos+0x324>
 8002ca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002cb0:	ee16 0a90 	vmov	r0, s13
 8002cb4:	f7fd fc00 	bl	80004b8 <__aeabi_f2d>
 8002cb8:	4604      	mov	r4, r0
 8002cba:	460d      	mov	r5, r1
 8002cbc:	4b2e      	ldr	r3, [pc, #184]	; (8002d78 <joystickCalculatePos+0x320>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd fbf9 	bl	80004b8 <__aeabi_f2d>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	ec43 2b10 	vmov	d0, r2, r3
 8002cce:	f005 f81b 	bl	8007d08 <cos>
 8002cd2:	ec53 2b10 	vmov	r2, r3, d0
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	4629      	mov	r1, r5
 8002cda:	f7fd fc45 	bl	8000568 <__aeabi_dmul>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	f7fd ff37 	bl	8000b58 <__aeabi_d2f>
 8002cea:	4603      	mov	r3, r0
 8002cec:	4a22      	ldr	r2, [pc, #136]	; (8002d78 <joystickCalculatePos+0x320>)
 8002cee:	6113      	str	r3, [r2, #16]

  if (fabs(hJoystick.linear) < 0.05)
 8002cf0:	4b21      	ldr	r3, [pc, #132]	; (8002d78 <joystickCalculatePos+0x320>)
 8002cf2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002cf6:	eef0 7ae7 	vabs.f32	s15, s15
 8002cfa:	ee17 0a90 	vmov	r0, s15
 8002cfe:	f7fd fbdb 	bl	80004b8 <__aeabi_f2d>
 8002d02:	a317      	add	r3, pc, #92	; (adr r3, 8002d60 <joystickCalculatePos+0x308>)
 8002d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d08:	f7fd fea0 	bl	8000a4c <__aeabi_dcmplt>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <joystickCalculatePos+0x2c2>
    hJoystick.linear = 0;
 8002d12:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <joystickCalculatePos+0x320>)
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	60da      	str	r2, [r3, #12]
  if (fabs(hJoystick.angular) < 0.05)
 8002d1a:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <joystickCalculatePos+0x320>)
 8002d1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d20:	eef0 7ae7 	vabs.f32	s15, s15
 8002d24:	ee17 0a90 	vmov	r0, s15
 8002d28:	f7fd fbc6 	bl	80004b8 <__aeabi_f2d>
 8002d2c:	a30c      	add	r3, pc, #48	; (adr r3, 8002d60 <joystickCalculatePos+0x308>)
 8002d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d32:	f7fd fe8b 	bl	8000a4c <__aeabi_dcmplt>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <joystickCalculatePos+0x2ec>
    hJoystick.angular = 0;
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <joystickCalculatePos+0x320>)
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	611a      	str	r2, [r3, #16]

  joy_pos_buffer_cnt++;
 8002d44:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <joystickCalculatePos+0x310>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <joystickCalculatePos+0x310>)
 8002d4c:	6013      	str	r3, [r2, #0]
}
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bdb0      	pop	{r4, r5, r7, pc}
 8002d56:	bf00      	nop
 8002d58:	00000000 	.word	0x00000000
 8002d5c:	40000000 	.word	0x40000000
 8002d60:	9999999a 	.word	0x9999999a
 8002d64:	3fa99999 	.word	0x3fa99999
 8002d68:	2000023c 	.word	0x2000023c
 8002d6c:	20000504 	.word	0x20000504
 8002d70:	20000214 	.word	0x20000214
 8002d74:	20000430 	.word	0x20000430
 8002d78:	200006a8 	.word	0x200006a8
 8002d7c:	00002af8 	.word	0x00002af8
 8002d80:	3fc8f5c3 	.word	0x3fc8f5c3
 8002d84:	3dcccccd 	.word	0x3dcccccd
 8002d88:	3fc8f5c3 	.word	0x3fc8f5c3

08002d8c <wheel_Control>:
  wheel->max_linear_speed = max_lin_speed;
  wheel->start_from_stationary = false;
}

void wheel_Control(WheelSpeed* wheel)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  if (wheel->stable_cnt < 100)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	2b63      	cmp	r3, #99	; 0x63
 8002d9a:	dc05      	bgt.n	8002da8 <wheel_Control+0x1c>
  {
      wheel->stable_cnt++;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	611a      	str	r2, [r3, #16]
    return;
 8002da6:	e1cd      	b.n	8003144 <wheel_Control+0x3b8>
  }

  joystickCalculatePos();
 8002da8:	f7ff fe56 	bl	8002a58 <joystickCalculatePos>
  wheelCalculateSpeed(wheel);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f9cd 	bl	800314c <wheelCalculateSpeed>

  if (wheel->pre_l == 0 && wheel->pre_r == 0)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002db8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc0:	d10a      	bne.n	8002dd8 <wheel_Control+0x4c>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002dc8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd0:	d102      	bne.n	8002dd8 <wheel_Control+0x4c>
    wheel->start_from_stationary = true;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	771a      	strb	r2, [r3, #28]

  if (hJoystick.magnitude > JoystickMagnitudeMin)
 8002dd8:	4bae      	ldr	r3, [pc, #696]	; (8003094 <wheel_Control+0x308>)
 8002dda:	ed93 7a01 	vldr	s14, [r3, #4]
 8002dde:	eddf 7aae 	vldr	s15, [pc, #696]	; 8003098 <wheel_Control+0x30c>
 8002de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002de6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dee:	f340 80b3 	ble.w	8002f58 <wheel_Control+0x1cc>
  {
    float left_speed_step = wheel->left_speed_step;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df6:	61fb      	str	r3, [r7, #28]
    float right_speed_step = wheel->right_speed_step;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfc:	61bb      	str	r3, [r7, #24]

    if (wheel->start_from_stationary)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	7f1b      	ldrb	r3, [r3, #28]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d03c      	beq.n	8002e80 <wheel_Control+0xf4>
    {
//      float accel_loop = 100.0f;
      left_speed_step = fabs( wheel->cur_l) / wheel->accel_loop;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	edd3 7a00 	vldr	s15, [r3]
 8002e0c:	eef0 6ae7 	vabs.f32	s13, s15
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	ed93 7a08 	vldr	s14, [r3, #32]
 8002e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e1a:	edc7 7a07 	vstr	s15, [r7, #28]
      right_speed_step = fabs( wheel->cur_l) / wheel->accel_loop;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	edd3 7a00 	vldr	s15, [r3]
 8002e24:	eef0 6ae7 	vabs.f32	s13, s15
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	ed93 7a08 	vldr	s14, [r3, #32]
 8002e2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e32:	edc7 7a06 	vstr	s15, [r7, #24]

      if (fabs(wheel->pre_l) > 0.5f * wheel->max_angular_speed &&
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e3c:	eeb0 7ae7 	vabs.f32	s14, s15
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e46:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002e4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e56:	dd13      	ble.n	8002e80 <wheel_Control+0xf4>
          fabs(wheel->pre_r) > 0.5f * wheel->max_angular_speed)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e5e:	eeb0 7ae7 	vabs.f32	s14, s15
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e68:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002e6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
      if (fabs(wheel->pre_l) > 0.5f * wheel->max_angular_speed &&
 8002e70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e78:	dd02      	ble.n	8002e80 <wheel_Control+0xf4>
      {
	  wheel->start_from_stationary = false;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	771a      	strb	r2, [r3, #28]
      }
    }

    if (( wheel->cur_l - wheel->pre_l) > left_speed_step)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	ed93 7a00 	vldr	s14, [r3]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e90:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9c:	d50a      	bpl.n	8002eb4 <wheel_Control+0x128>
      wheel->cur_l = wheel->pre_l + left_speed_step;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ea4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	edc3 7a00 	vstr	s15, [r3]
 8002eb2:	e01a      	b.n	8002eea <wheel_Control+0x15e>
    else if ((wheel->cur_l - wheel->pre_l) < -left_speed_step)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	ed93 7a00 	vldr	s14, [r3]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ec0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ec4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ec8:	eef1 7a67 	vneg.f32	s15, s15
 8002ecc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed4:	d509      	bpl.n	8002eea <wheel_Control+0x15e>
      wheel->cur_l = wheel->pre_l - left_speed_step;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	ed93 7a02 	vldr	s14, [r3, #8]
 8002edc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	edc3 7a00 	vstr	s15, [r3]

    if ((wheel->cur_r - wheel->pre_r) > right_speed_step)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ef6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002efa:	ed97 7a06 	vldr	s14, [r7, #24]
 8002efe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f06:	d50a      	bpl.n	8002f1e <wheel_Control+0x192>
      wheel->cur_r = wheel->pre_r + right_speed_step;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	edc3 7a01 	vstr	s15, [r3, #4]
 8002f1c:	e0c2      	b.n	80030a4 <wheel_Control+0x318>
    else if ((wheel->cur_r - wheel->pre_r) < -right_speed_step)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f2e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f32:	eef1 7a67 	vneg.f32	s15, s15
 8002f36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f3e:	f140 80b1 	bpl.w	80030a4 <wheel_Control+0x318>
      wheel->cur_r = wheel->pre_r - right_speed_step;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f48:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	edc3 7a01 	vstr	s15, [r3, #4]
 8002f56:	e0a5      	b.n	80030a4 <wheel_Control+0x318>
  }
  else
  {
//    float decel_loop = 150.0f;

    float zero_speed = wheel->max_linear_speed / wheel->decel_loop;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	edd3 6a05 	vldr	s13, [r3, #20]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f68:	edc7 7a05 	vstr	s15, [r7, #20]
    if (fabs(wheel->cur_l) < zero_speed)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	edd3 7a00 	vldr	s15, [r3]
 8002f72:	eef0 7ae7 	vabs.f32	s15, s15
 8002f76:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f82:	dd03      	ble.n	8002f8c <wheel_Control+0x200>
      wheel->cur_l = 0;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
    if (fabs(wheel->cur_r) < zero_speed)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f92:	eef0 7ae7 	vabs.f32	s15, s15
 8002f96:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa2:	dd03      	ble.n	8002fac <wheel_Control+0x220>
      wheel->cur_r = 0;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	605a      	str	r2, [r3, #4]

    float left_speed_step = fabs(wheel->cur_l) / wheel->decel_loop;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	edd3 7a00 	vldr	s15, [r3]
 8002fb2:	eef0 6ae7 	vabs.f32	s13, s15
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002fbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fc0:	edc7 7a04 	vstr	s15, [r7, #16]
    float right_speed_step = fabs(wheel->cur_r) / wheel->decel_loop;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fca:	eef0 6ae7 	vabs.f32	s13, s15
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002fd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fd8:	edc7 7a03 	vstr	s15, [r7, #12]
    
    if (wheel->cur_l > left_speed_step)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	edd3 7a00 	vldr	s15, [r3]
 8002fe2:	ed97 7a04 	vldr	s14, [r7, #16]
 8002fe6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fee:	d50a      	bpl.n	8003006 <wheel_Control+0x27a>
      wheel->cur_l = wheel->pre_r - left_speed_step;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	ed93 7a03 	vldr	s14, [r3, #12]
 8002ff6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	edc3 7a00 	vstr	s15, [r3]
 8003004:	e01a      	b.n	800303c <wheel_Control+0x2b0>
    else if (wheel->cur_l < -left_speed_step)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	ed93 7a00 	vldr	s14, [r3]
 800300c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003010:	eef1 7a67 	vneg.f32	s15, s15
 8003014:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301c:	d50a      	bpl.n	8003034 <wheel_Control+0x2a8>
      wheel->cur_l = wheel->pre_r + left_speed_step;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	ed93 7a03 	vldr	s14, [r3, #12]
 8003024:	edd7 7a04 	vldr	s15, [r7, #16]
 8003028:	ee77 7a27 	vadd.f32	s15, s14, s15
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	edc3 7a00 	vstr	s15, [r3]
 8003032:	e003      	b.n	800303c <wheel_Control+0x2b0>
    else
      wheel->cur_l = 0;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
    
    if (wheel->cur_r > right_speed_step)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003042:	ed97 7a03 	vldr	s14, [r7, #12]
 8003046:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800304a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304e:	d50a      	bpl.n	8003066 <wheel_Control+0x2da>
      wheel->cur_r = wheel->pre_r - right_speed_step;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	ed93 7a03 	vldr	s14, [r3, #12]
 8003056:	edd7 7a03 	vldr	s15, [r7, #12]
 800305a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	edc3 7a01 	vstr	s15, [r3, #4]
 8003064:	e01e      	b.n	80030a4 <wheel_Control+0x318>
    else if (wheel->cur_r < -right_speed_step)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	ed93 7a01 	vldr	s14, [r3, #4]
 800306c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003070:	eef1 7a67 	vneg.f32	s15, s15
 8003074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307c:	d50e      	bpl.n	800309c <wheel_Control+0x310>
      wheel->cur_r = wheel->pre_r + right_speed_step;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	ed93 7a03 	vldr	s14, [r3, #12]
 8003084:	edd7 7a03 	vldr	s15, [r7, #12]
 8003088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	edc3 7a01 	vstr	s15, [r3, #4]
 8003092:	e007      	b.n	80030a4 <wheel_Control+0x318>
 8003094:	200006a8 	.word	0x200006a8
 8003098:	00000bb8 	.word	0x00000bb8
    else
      wheel->cur_r = 0;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	605a      	str	r2, [r3, #4]
  }

  if (wheel->cur_l > wheel->max_linear_speed)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	ed93 7a00 	vldr	s14, [r3]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	edd3 7a05 	vldr	s15, [r3, #20]
 80030b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b8:	dd03      	ble.n	80030c2 <wheel_Control+0x336>
    wheel->cur_l = wheel->max_linear_speed;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	601a      	str	r2, [r3, #0]
  if (wheel->cur_r > wheel->max_linear_speed)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80030ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d6:	dd03      	ble.n	80030e0 <wheel_Control+0x354>
    wheel->cur_r = wheel->max_linear_speed;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	695a      	ldr	r2, [r3, #20]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	605a      	str	r2, [r3, #4]

  if (wheel->cur_l < -wheel->max_linear_speed)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	ed93 7a00 	vldr	s14, [r3]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	edd3 7a05 	vldr	s15, [r3, #20]
 80030ec:	eef1 7a67 	vneg.f32	s15, s15
 80030f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f8:	d507      	bpl.n	800310a <wheel_Control+0x37e>
    wheel->cur_l = -wheel->max_linear_speed;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	edd3 7a05 	vldr	s15, [r3, #20]
 8003100:	eef1 7a67 	vneg.f32	s15, s15
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	edc3 7a00 	vstr	s15, [r3]
  if (wheel->cur_r < -wheel->max_linear_speed)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	edd3 7a05 	vldr	s15, [r3, #20]
 8003116:	eef1 7a67 	vneg.f32	s15, s15
 800311a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800311e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003122:	d507      	bpl.n	8003134 <wheel_Control+0x3a8>
    wheel->cur_r = -wheel->max_linear_speed;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	edd3 7a05 	vldr	s15, [r3, #20]
 800312a:	eef1 7a67 	vneg.f32	s15, s15
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	edc3 7a01 	vstr	s15, [r3, #4]

  wheel->pre_l = wheel->cur_l;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	609a      	str	r2, [r3, #8]
  wheel->pre_r = wheel->cur_r;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	60da      	str	r2, [r3, #12]
  
}
 8003144:	3720      	adds	r7, #32
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop

0800314c <wheelCalculateSpeed>:



void wheelCalculateSpeed(WheelSpeed* wheel)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  float linearSpeed = wheel->max_linear_speed * hJoystick.linear;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	ed93 7a05 	vldr	s14, [r3, #20]
 800315a:	4b25      	ldr	r3, [pc, #148]	; (80031f0 <wheelCalculateSpeed+0xa4>)
 800315c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003164:	edc7 7a03 	vstr	s15, [r7, #12]
  float angularSpeed = wheel->max_angular_speed *  hJoystick.angular;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	ed93 7a06 	vldr	s14, [r3, #24]
 800316e:	4b20      	ldr	r3, [pc, #128]	; (80031f0 <wheelCalculateSpeed+0xa4>)
 8003170:	edd3 7a04 	vldr	s15, [r3, #16]
 8003174:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003178:	edc7 7a02 	vstr	s15, [r7, #8]

  wheel->cur_l = linearSpeed + angularSpeed;
 800317c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003180:	edd7 7a02 	vldr	s15, [r7, #8]
 8003184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	edc3 7a00 	vstr	s15, [r3]
  wheel->cur_r = linearSpeed - angularSpeed;
 800318e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003192:	edd7 7a02 	vldr	s15, [r7, #8]
 8003196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	edc3 7a01 	vstr	s15, [r3, #4]

  // direct step to 0 if speed is small enough
  if(fabs(wheel->cur_l) < 50)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	edd3 7a00 	vldr	s15, [r3]
 80031a6:	eef0 7ae7 	vabs.f32	s15, s15
 80031aa:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80031f4 <wheelCalculateSpeed+0xa8>
 80031ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b6:	d503      	bpl.n	80031c0 <wheelCalculateSpeed+0x74>
    wheel->cur_l = 0;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
  if(fabs(  wheel->cur_r) < 50)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80031c6:	eef0 7ae7 	vabs.f32	s15, s15
 80031ca:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80031f4 <wheelCalculateSpeed+0xa8>
 80031ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d6:	d400      	bmi.n	80031da <wheelCalculateSpeed+0x8e>
    wheel->cur_r = 0;
}
 80031d8:	e003      	b.n	80031e2 <wheelCalculateSpeed+0x96>
    wheel->cur_r = 0;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	605a      	str	r2, [r3, #4]
}
 80031e2:	bf00      	nop
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	200006a8 	.word	0x200006a8
 80031f4:	42480000 	.word	0x42480000

080031f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80031f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003230 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80031fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80031fe:	e003      	b.n	8003208 <LoopCopyDataInit>

08003200 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003202:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003204:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003206:	3104      	adds	r1, #4

08003208 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003208:	480b      	ldr	r0, [pc, #44]	; (8003238 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800320a:	4b0c      	ldr	r3, [pc, #48]	; (800323c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800320c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800320e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003210:	d3f6      	bcc.n	8003200 <CopyDataInit>
  ldr  r2, =_sbss
 8003212:	4a0b      	ldr	r2, [pc, #44]	; (8003240 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003214:	e002      	b.n	800321c <LoopFillZerobss>

08003216 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003216:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003218:	f842 3b04 	str.w	r3, [r2], #4

0800321c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800321c:	4b09      	ldr	r3, [pc, #36]	; (8003244 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800321e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003220:	d3f9      	bcc.n	8003216 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003222:	f7ff f813 	bl	800224c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003226:	f004 fba3 	bl	8007970 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800322a:	f7fe fc29 	bl	8001a80 <main>
  bx  lr    
 800322e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003230:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003234:	0800a148 	.word	0x0800a148
  ldr  r0, =_sdata
 8003238:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800323c:	200001b4 	.word	0x200001b4
  ldr  r2, =_sbss
 8003240:	200001b8 	.word	0x200001b8
  ldr  r3, = _ebss
 8003244:	200006c0 	.word	0x200006c0

08003248 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003248:	e7fe      	b.n	8003248 <ADC_IRQHandler>
	...

0800324c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003250:	4b0e      	ldr	r3, [pc, #56]	; (800328c <HAL_Init+0x40>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0d      	ldr	r2, [pc, #52]	; (800328c <HAL_Init+0x40>)
 8003256:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800325a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_Init+0x40>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0a      	ldr	r2, [pc, #40]	; (800328c <HAL_Init+0x40>)
 8003262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003266:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003268:	4b08      	ldr	r3, [pc, #32]	; (800328c <HAL_Init+0x40>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a07      	ldr	r2, [pc, #28]	; (800328c <HAL_Init+0x40>)
 800326e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003272:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003274:	2003      	movs	r0, #3
 8003276:	f000 ffb1 	bl	80041dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800327a:	2000      	movs	r0, #0
 800327c:	f000 f808 	bl	8003290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003280:	f7fe ff72 	bl	8002168 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40023c00 	.word	0x40023c00

08003290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003298:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <HAL_InitTick+0x54>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <HAL_InitTick+0x58>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	4619      	mov	r1, r3
 80032a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 ffc9 	bl	8004246 <HAL_SYSTICK_Config>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e00e      	b.n	80032dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b0f      	cmp	r3, #15
 80032c2:	d80a      	bhi.n	80032da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032c4:	2200      	movs	r2, #0
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032cc:	f000 ff91 	bl	80041f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032d0:	4a06      	ldr	r2, [pc, #24]	; (80032ec <HAL_InitTick+0x5c>)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	e000      	b.n	80032dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20000140 	.word	0x20000140
 80032e8:	20000148 	.word	0x20000148
 80032ec:	20000144 	.word	0x20000144

080032f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_IncTick+0x20>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_IncTick+0x24>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4413      	add	r3, r2
 8003300:	4a04      	ldr	r2, [pc, #16]	; (8003314 <HAL_IncTick+0x24>)
 8003302:	6013      	str	r3, [r2, #0]
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	20000148 	.word	0x20000148
 8003314:	200006bc 	.word	0x200006bc

08003318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return uwTick;
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_GetTick+0x14>)
 800331e:	681b      	ldr	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	200006bc 	.word	0x200006bc

08003330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003338:	f7ff ffee 	bl	8003318 <HAL_GetTick>
 800333c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003348:	d005      	beq.n	8003356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800334a:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <HAL_Delay+0x44>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	461a      	mov	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4413      	add	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003356:	bf00      	nop
 8003358:	f7ff ffde 	bl	8003318 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	429a      	cmp	r2, r3
 8003366:	d8f7      	bhi.n	8003358 <HAL_Delay+0x28>
  {
  }
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20000148 	.word	0x20000148

08003378 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e0ed      	b.n	8003566 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d102      	bne.n	800339c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fe f820 	bl	80013dc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0202 	bic.w	r2, r2, #2
 80033aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033ac:	f7ff ffb4 	bl	8003318 <HAL_GetTick>
 80033b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80033b2:	e012      	b.n	80033da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033b4:	f7ff ffb0 	bl	8003318 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b0a      	cmp	r3, #10
 80033c0:	d90b      	bls.n	80033da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2205      	movs	r2, #5
 80033d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e0c5      	b.n	8003566 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1e5      	bne.n	80033b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033f8:	f7ff ff8e 	bl	8003318 <HAL_GetTick>
 80033fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80033fe:	e012      	b.n	8003426 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003400:	f7ff ff8a 	bl	8003318 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b0a      	cmp	r3, #10
 800340c:	d90b      	bls.n	8003426 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2205      	movs	r2, #5
 800341e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e09f      	b.n	8003566 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0e5      	beq.n	8003400 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	7e1b      	ldrb	r3, [r3, #24]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d108      	bne.n	800344e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	e007      	b.n	800345e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800345c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	7e5b      	ldrb	r3, [r3, #25]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d108      	bne.n	8003478 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	e007      	b.n	8003488 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003486:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	7e9b      	ldrb	r3, [r3, #26]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d108      	bne.n	80034a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0220 	orr.w	r2, r2, #32
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	e007      	b.n	80034b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0220 	bic.w	r2, r2, #32
 80034b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	7edb      	ldrb	r3, [r3, #27]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d108      	bne.n	80034cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0210 	bic.w	r2, r2, #16
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	e007      	b.n	80034dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0210 	orr.w	r2, r2, #16
 80034da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	7f1b      	ldrb	r3, [r3, #28]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d108      	bne.n	80034f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0208 	orr.w	r2, r2, #8
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	e007      	b.n	8003506 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0208 	bic.w	r2, r2, #8
 8003504:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	7f5b      	ldrb	r3, [r3, #29]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d108      	bne.n	8003520 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f042 0204 	orr.w	r2, r2, #4
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	e007      	b.n	8003530 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0204 	bic.w	r2, r2, #4
 800352e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	ea42 0103 	orr.w	r1, r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	1e5a      	subs	r2, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003586:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003588:	7cfb      	ldrb	r3, [r7, #19]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d003      	beq.n	8003596 <HAL_CAN_ConfigFilter+0x26>
 800358e:	7cfb      	ldrb	r3, [r7, #19]
 8003590:	2b02      	cmp	r3, #2
 8003592:	f040 80be 	bne.w	8003712 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003596:	4b65      	ldr	r3, [pc, #404]	; (800372c <HAL_CAN_ConfigFilter+0x1bc>)
 8003598:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80035a0:	f043 0201 	orr.w	r2, r3, #1
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80035b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	021b      	lsls	r3, r3, #8
 80035c6:	431a      	orrs	r2, r3
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	f003 031f 	and.w	r3, r3, #31
 80035d6:	2201      	movs	r2, #1
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	43db      	mvns	r3, r3
 80035e8:	401a      	ands	r2, r3
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d123      	bne.n	8003640 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	43db      	mvns	r3, r3
 8003602:	401a      	ands	r2, r3
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800361a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	3248      	adds	r2, #72	; 0x48
 8003620:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003634:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003636:	6979      	ldr	r1, [r7, #20]
 8003638:	3348      	adds	r3, #72	; 0x48
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	440b      	add	r3, r1
 800363e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d122      	bne.n	800368e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	431a      	orrs	r2, r3
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003668:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	3248      	adds	r2, #72	; 0x48
 800366e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003682:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003684:	6979      	ldr	r1, [r7, #20]
 8003686:	3348      	adds	r3, #72	; 0x48
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	440b      	add	r3, r1
 800368c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d109      	bne.n	80036aa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	43db      	mvns	r3, r3
 80036a0:	401a      	ands	r2, r3
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80036a8:	e007      	b.n	80036ba <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	431a      	orrs	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	43db      	mvns	r3, r3
 80036cc:	401a      	ands	r2, r3
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80036d4:	e007      	b.n	80036e6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	431a      	orrs	r2, r3
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d107      	bne.n	80036fe <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003704:	f023 0201 	bic.w	r2, r3, #1
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	e006      	b.n	8003720 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
  }
}
 8003720:	4618      	mov	r0, r3
 8003722:	371c      	adds	r7, #28
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	40006400 	.word	0x40006400

08003730 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d12e      	bne.n	80037a2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0201 	bic.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800375c:	f7ff fddc 	bl	8003318 <HAL_GetTick>
 8003760:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003762:	e012      	b.n	800378a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003764:	f7ff fdd8 	bl	8003318 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b0a      	cmp	r3, #10
 8003770:	d90b      	bls.n	800378a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2205      	movs	r2, #5
 8003782:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e012      	b.n	80037b0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1e5      	bne.n	8003764 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800379e:	2300      	movs	r3, #0
 80037a0:	e006      	b.n	80037b0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
  }
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b089      	sub	sp, #36	; 0x24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
 80037c4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037cc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80037d6:	7ffb      	ldrb	r3, [r7, #31]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d003      	beq.n	80037e4 <HAL_CAN_AddTxMessage+0x2c>
 80037dc:	7ffb      	ldrb	r3, [r7, #31]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	f040 80b8 	bne.w	8003954 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10a      	bne.n	8003804 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d105      	bne.n	8003804 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 80a0 	beq.w	8003944 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	0e1b      	lsrs	r3, r3, #24
 8003808:	f003 0303 	and.w	r3, r3, #3
 800380c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d907      	bls.n	8003824 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e09e      	b.n	8003962 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003824:	2201      	movs	r2, #1
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	409a      	lsls	r2, r3
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10d      	bne.n	8003852 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003840:	68f9      	ldr	r1, [r7, #12]
 8003842:	6809      	ldr	r1, [r1, #0]
 8003844:	431a      	orrs	r2, r3
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	3318      	adds	r3, #24
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	440b      	add	r3, r1
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	e00f      	b.n	8003872 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800385c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003862:	68f9      	ldr	r1, [r7, #12]
 8003864:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003866:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	3318      	adds	r3, #24
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	440b      	add	r3, r1
 8003870:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6819      	ldr	r1, [r3, #0]
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	3318      	adds	r3, #24
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	440b      	add	r3, r1
 8003882:	3304      	adds	r3, #4
 8003884:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	7d1b      	ldrb	r3, [r3, #20]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d111      	bne.n	80038b2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	3318      	adds	r3, #24
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	4413      	add	r3, r2
 800389a:	3304      	adds	r3, #4
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	6811      	ldr	r1, [r2, #0]
 80038a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	3318      	adds	r3, #24
 80038aa:	011b      	lsls	r3, r3, #4
 80038ac:	440b      	add	r3, r1
 80038ae:	3304      	adds	r3, #4
 80038b0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3307      	adds	r3, #7
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	061a      	lsls	r2, r3, #24
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3306      	adds	r3, #6
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	041b      	lsls	r3, r3, #16
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3305      	adds	r3, #5
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	021b      	lsls	r3, r3, #8
 80038cc:	4313      	orrs	r3, r2
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	3204      	adds	r2, #4
 80038d2:	7812      	ldrb	r2, [r2, #0]
 80038d4:	4610      	mov	r0, r2
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	6811      	ldr	r1, [r2, #0]
 80038da:	ea43 0200 	orr.w	r2, r3, r0
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	440b      	add	r3, r1
 80038e4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80038e8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3303      	adds	r3, #3
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	061a      	lsls	r2, r3, #24
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3302      	adds	r3, #2
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	041b      	lsls	r3, r3, #16
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3301      	adds	r3, #1
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	021b      	lsls	r3, r3, #8
 8003904:	4313      	orrs	r3, r2
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	7812      	ldrb	r2, [r2, #0]
 800390a:	4610      	mov	r0, r2
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	6811      	ldr	r1, [r2, #0]
 8003910:	ea43 0200 	orr.w	r2, r3, r0
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	440b      	add	r3, r1
 800391a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800391e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	3318      	adds	r3, #24
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	4413      	add	r3, r2
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	6811      	ldr	r1, [r2, #0]
 8003932:	f043 0201 	orr.w	r2, r3, #1
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	3318      	adds	r3, #24
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	440b      	add	r3, r1
 800393e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003940:	2300      	movs	r3, #0
 8003942:	e00e      	b.n	8003962 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e006      	b.n	8003962 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
  }
}
 8003962:	4618      	mov	r0, r3
 8003964:	3724      	adds	r7, #36	; 0x24
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800396e:	b480      	push	{r7}
 8003970:	b087      	sub	sp, #28
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	607a      	str	r2, [r7, #4]
 800397a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003982:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003984:	7dfb      	ldrb	r3, [r7, #23]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d003      	beq.n	8003992 <HAL_CAN_GetRxMessage+0x24>
 800398a:	7dfb      	ldrb	r3, [r7, #23]
 800398c:	2b02      	cmp	r3, #2
 800398e:	f040 80f3 	bne.w	8003b78 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10e      	bne.n	80039b6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d116      	bne.n	80039d4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e0e7      	b.n	8003b86 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f003 0303 	and.w	r3, r3, #3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d107      	bne.n	80039d4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e0d8      	b.n	8003b86 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	331b      	adds	r3, #27
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	4413      	add	r3, r2
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0204 	and.w	r2, r3, #4
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10c      	bne.n	8003a0c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	331b      	adds	r3, #27
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	4413      	add	r3, r2
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	0d5b      	lsrs	r3, r3, #21
 8003a02:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	e00b      	b.n	8003a24 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	331b      	adds	r3, #27
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	4413      	add	r3, r2
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	08db      	lsrs	r3, r3, #3
 8003a1c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	331b      	adds	r3, #27
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	4413      	add	r3, r2
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0202 	and.w	r2, r3, #2
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	331b      	adds	r3, #27
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	4413      	add	r3, r2
 8003a46:	3304      	adds	r3, #4
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 020f 	and.w	r2, r3, #15
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	331b      	adds	r3, #27
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	4413      	add	r3, r2
 8003a5e:	3304      	adds	r3, #4
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	0a1b      	lsrs	r3, r3, #8
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	331b      	adds	r3, #27
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	4413      	add	r3, r2
 8003a76:	3304      	adds	r3, #4
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	0c1b      	lsrs	r3, r3, #16
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	0a1a      	lsrs	r2, r3, #8
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	3301      	adds	r3, #1
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	0c1a      	lsrs	r2, r3, #16
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	3302      	adds	r3, #2
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	0e1a      	lsrs	r2, r3, #24
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	3303      	adds	r3, #3
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	3304      	adds	r3, #4
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	0a1a      	lsrs	r2, r3, #8
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	3305      	adds	r3, #5
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	0c1a      	lsrs	r2, r3, #16
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	3306      	adds	r3, #6
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	0e1a      	lsrs	r2, r3, #24
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	3307      	adds	r3, #7
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d108      	bne.n	8003b64 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f042 0220 	orr.w	r2, r2, #32
 8003b60:	60da      	str	r2, [r3, #12]
 8003b62:	e007      	b.n	8003b74 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	691a      	ldr	r2, [r3, #16]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0220 	orr.w	r2, r2, #32
 8003b72:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	e006      	b.n	8003b86 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
  }
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	371c      	adds	r7, #28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b085      	sub	sp, #20
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ba2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d002      	beq.n	8003bb0 <HAL_CAN_ActivateNotification+0x1e>
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d109      	bne.n	8003bc4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6959      	ldr	r1, [r3, #20]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	e006      	b.n	8003bd2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
  }
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b08a      	sub	sp, #40	; 0x28
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003be6:	2300      	movs	r3, #0
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d07c      	beq.n	8003d1e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d023      	beq.n	8003c76 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2201      	movs	r2, #1
 8003c34:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f983 	bl	8003f4c <HAL_CAN_TxMailbox0CompleteCallback>
 8003c46:	e016      	b.n	8003c76 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d004      	beq.n	8003c5c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
 8003c5a:	e00c      	b.n	8003c76 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d004      	beq.n	8003c70 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6e:	e002      	b.n	8003c76 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f989 	bl	8003f88 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d024      	beq.n	8003cca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c88:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f963 	bl	8003f60 <HAL_CAN_TxMailbox1CompleteCallback>
 8003c9a:	e016      	b.n	8003cca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d004      	beq.n	8003cb0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
 8003cae:	e00c      	b.n	8003cca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d004      	beq.n	8003cc4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc2:	e002      	b.n	8003cca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f969 	bl	8003f9c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d024      	beq.n	8003d1e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003cdc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f943 	bl	8003f74 <HAL_CAN_TxMailbox2CompleteCallback>
 8003cee:	e016      	b.n	8003d1e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d004      	beq.n	8003d04 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
 8003d02:	e00c      	b.n	8003d1e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d004      	beq.n	8003d18 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
 8003d16:	e002      	b.n	8003d1e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f949 	bl	8003fb0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	f003 0308 	and.w	r3, r3, #8
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00c      	beq.n	8003d42 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f003 0310 	and.w	r3, r3, #16
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d007      	beq.n	8003d42 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2210      	movs	r2, #16
 8003d40:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00b      	beq.n	8003d64 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f003 0308 	and.w	r3, r3, #8
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d006      	beq.n	8003d64 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2208      	movs	r2, #8
 8003d5c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f930 	bl	8003fc4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d002      	beq.n	8003d82 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7fe f913 	bl	8001fa8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00c      	beq.n	8003da6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f003 0310 	and.w	r3, r3, #16
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d007      	beq.n	8003da6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2210      	movs	r2, #16
 8003da4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	f003 0320 	and.w	r3, r3, #32
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00b      	beq.n	8003dc8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d006      	beq.n	8003dc8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2208      	movs	r2, #8
 8003dc0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f912 	bl	8003fec <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	f003 0310 	and.w	r3, r3, #16
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d009      	beq.n	8003de6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f003 0303 	and.w	r3, r3, #3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f000 f8f9 	bl	8003fd8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00b      	beq.n	8003e08 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f003 0310 	and.w	r3, r3, #16
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d006      	beq.n	8003e08 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2210      	movs	r2, #16
 8003e00:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f8fc 	bl	8004000 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00b      	beq.n	8003e2a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	f003 0308 	and.w	r3, r3, #8
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d006      	beq.n	8003e2a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2208      	movs	r2, #8
 8003e22:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f8f5 	bl	8004014 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d07b      	beq.n	8003f2c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f003 0304 	and.w	r3, r3, #4
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d072      	beq.n	8003f24 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	f043 0302 	orr.w	r3, r3, #2
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	f043 0304 	orr.w	r3, r3, #4
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d043      	beq.n	8003f24 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d03e      	beq.n	8003f24 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003eac:	2b60      	cmp	r3, #96	; 0x60
 8003eae:	d02b      	beq.n	8003f08 <HAL_CAN_IRQHandler+0x32a>
 8003eb0:	2b60      	cmp	r3, #96	; 0x60
 8003eb2:	d82e      	bhi.n	8003f12 <HAL_CAN_IRQHandler+0x334>
 8003eb4:	2b50      	cmp	r3, #80	; 0x50
 8003eb6:	d022      	beq.n	8003efe <HAL_CAN_IRQHandler+0x320>
 8003eb8:	2b50      	cmp	r3, #80	; 0x50
 8003eba:	d82a      	bhi.n	8003f12 <HAL_CAN_IRQHandler+0x334>
 8003ebc:	2b40      	cmp	r3, #64	; 0x40
 8003ebe:	d019      	beq.n	8003ef4 <HAL_CAN_IRQHandler+0x316>
 8003ec0:	2b40      	cmp	r3, #64	; 0x40
 8003ec2:	d826      	bhi.n	8003f12 <HAL_CAN_IRQHandler+0x334>
 8003ec4:	2b30      	cmp	r3, #48	; 0x30
 8003ec6:	d010      	beq.n	8003eea <HAL_CAN_IRQHandler+0x30c>
 8003ec8:	2b30      	cmp	r3, #48	; 0x30
 8003eca:	d822      	bhi.n	8003f12 <HAL_CAN_IRQHandler+0x334>
 8003ecc:	2b10      	cmp	r3, #16
 8003ece:	d002      	beq.n	8003ed6 <HAL_CAN_IRQHandler+0x2f8>
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	d005      	beq.n	8003ee0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003ed4:	e01d      	b.n	8003f12 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	f043 0308 	orr.w	r3, r3, #8
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ede:	e019      	b.n	8003f14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	f043 0310 	orr.w	r3, r3, #16
 8003ee6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ee8:	e014      	b.n	8003f14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	f043 0320 	orr.w	r3, r3, #32
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ef2:	e00f      	b.n	8003f14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003efc:	e00a      	b.n	8003f14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f06:	e005      	b.n	8003f14 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003f10:	e000      	b.n	8003f14 <HAL_CAN_IRQHandler+0x336>
            break;
 8003f12:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699a      	ldr	r2, [r3, #24]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003f22:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2204      	movs	r2, #4
 8003f2a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d008      	beq.n	8003f44 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f872 	bl	8004028 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003f44:	bf00      	nop
 8003f46:	3728      	adds	r7, #40	; 0x28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800404c:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <__NVIC_SetPriorityGrouping+0x44>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004058:	4013      	ands	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800406c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800406e:	4a04      	ldr	r2, [pc, #16]	; (8004080 <__NVIC_SetPriorityGrouping+0x44>)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	60d3      	str	r3, [r2, #12]
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	e000ed00 	.word	0xe000ed00

08004084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004088:	4b04      	ldr	r3, [pc, #16]	; (800409c <__NVIC_GetPriorityGrouping+0x18>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	0a1b      	lsrs	r3, r3, #8
 800408e:	f003 0307 	and.w	r3, r3, #7
}
 8004092:	4618      	mov	r0, r3
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	e000ed00 	.word	0xe000ed00

080040a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	4603      	mov	r3, r0
 80040a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	db0b      	blt.n	80040ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040b2:	79fb      	ldrb	r3, [r7, #7]
 80040b4:	f003 021f 	and.w	r2, r3, #31
 80040b8:	4907      	ldr	r1, [pc, #28]	; (80040d8 <__NVIC_EnableIRQ+0x38>)
 80040ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	2001      	movs	r0, #1
 80040c2:	fa00 f202 	lsl.w	r2, r0, r2
 80040c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	e000e100 	.word	0xe000e100

080040dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	6039      	str	r1, [r7, #0]
 80040e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	db0a      	blt.n	8004106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	490c      	ldr	r1, [pc, #48]	; (8004128 <__NVIC_SetPriority+0x4c>)
 80040f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fa:	0112      	lsls	r2, r2, #4
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	440b      	add	r3, r1
 8004100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004104:	e00a      	b.n	800411c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	b2da      	uxtb	r2, r3
 800410a:	4908      	ldr	r1, [pc, #32]	; (800412c <__NVIC_SetPriority+0x50>)
 800410c:	79fb      	ldrb	r3, [r7, #7]
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	3b04      	subs	r3, #4
 8004114:	0112      	lsls	r2, r2, #4
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	440b      	add	r3, r1
 800411a:	761a      	strb	r2, [r3, #24]
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	e000e100 	.word	0xe000e100
 800412c:	e000ed00 	.word	0xe000ed00

08004130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004130:	b480      	push	{r7}
 8004132:	b089      	sub	sp, #36	; 0x24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f1c3 0307 	rsb	r3, r3, #7
 800414a:	2b04      	cmp	r3, #4
 800414c:	bf28      	it	cs
 800414e:	2304      	movcs	r3, #4
 8004150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	3304      	adds	r3, #4
 8004156:	2b06      	cmp	r3, #6
 8004158:	d902      	bls.n	8004160 <NVIC_EncodePriority+0x30>
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	3b03      	subs	r3, #3
 800415e:	e000      	b.n	8004162 <NVIC_EncodePriority+0x32>
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	43da      	mvns	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	401a      	ands	r2, r3
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004178:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	fa01 f303 	lsl.w	r3, r1, r3
 8004182:	43d9      	mvns	r1, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004188:	4313      	orrs	r3, r2
         );
}
 800418a:	4618      	mov	r0, r3
 800418c:	3724      	adds	r7, #36	; 0x24
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
	...

08004198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041a8:	d301      	bcc.n	80041ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041aa:	2301      	movs	r3, #1
 80041ac:	e00f      	b.n	80041ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041ae:	4a0a      	ldr	r2, [pc, #40]	; (80041d8 <SysTick_Config+0x40>)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041b6:	210f      	movs	r1, #15
 80041b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041bc:	f7ff ff8e 	bl	80040dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041c0:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <SysTick_Config+0x40>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041c6:	4b04      	ldr	r3, [pc, #16]	; (80041d8 <SysTick_Config+0x40>)
 80041c8:	2207      	movs	r2, #7
 80041ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	e000e010 	.word	0xe000e010

080041dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff ff29 	bl	800403c <__NVIC_SetPriorityGrouping>
}
 80041ea:	bf00      	nop
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b086      	sub	sp, #24
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	4603      	mov	r3, r0
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	607a      	str	r2, [r7, #4]
 80041fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004204:	f7ff ff3e 	bl	8004084 <__NVIC_GetPriorityGrouping>
 8004208:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68b9      	ldr	r1, [r7, #8]
 800420e:	6978      	ldr	r0, [r7, #20]
 8004210:	f7ff ff8e 	bl	8004130 <NVIC_EncodePriority>
 8004214:	4602      	mov	r2, r0
 8004216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800421a:	4611      	mov	r1, r2
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff ff5d 	bl	80040dc <__NVIC_SetPriority>
}
 8004222:	bf00      	nop
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	4603      	mov	r3, r0
 8004232:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff ff31 	bl	80040a0 <__NVIC_EnableIRQ>
}
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b082      	sub	sp, #8
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff ffa2 	bl	8004198 <SysTick_Config>
 8004254:	4603      	mov	r3, r0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b04      	cmp	r3, #4
 800426c:	d106      	bne.n	800427c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800426e:	4b09      	ldr	r3, [pc, #36]	; (8004294 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a08      	ldr	r2, [pc, #32]	; (8004294 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004274:	f043 0304 	orr.w	r3, r3, #4
 8004278:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800427a:	e005      	b.n	8004288 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a04      	ldr	r2, [pc, #16]	; (8004294 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004282:	f023 0304 	bic.w	r3, r3, #4
 8004286:	6013      	str	r3, [r2, #0]
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	e000e010 	.word	0xe000e010

08004298 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80042a4:	f7ff f838 	bl	8003318 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e099      	b.n	80043e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0201 	bic.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042d4:	e00f      	b.n	80042f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042d6:	f7ff f81f 	bl	8003318 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b05      	cmp	r3, #5
 80042e2:	d908      	bls.n	80042f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2220      	movs	r2, #32
 80042e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2203      	movs	r2, #3
 80042ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e078      	b.n	80043e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1e8      	bne.n	80042d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	4b38      	ldr	r3, [pc, #224]	; (80043f0 <HAL_DMA_Init+0x158>)
 8004310:	4013      	ands	r3, r2
 8004312:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004322:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800432e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800433a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4313      	orrs	r3, r2
 8004346:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	2b04      	cmp	r3, #4
 800434e:	d107      	bne.n	8004360 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	4313      	orrs	r3, r2
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f023 0307 	bic.w	r3, r3, #7
 8004376:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	2b04      	cmp	r3, #4
 8004388:	d117      	bne.n	80043ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4313      	orrs	r3, r2
 8004392:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00e      	beq.n	80043ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f9e9 	bl	8004774 <DMA_CheckFifoParam>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2240      	movs	r2, #64	; 0x40
 80043ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80043b6:	2301      	movs	r3, #1
 80043b8:	e016      	b.n	80043e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f9a0 	bl	8004708 <DMA_CalcBaseAndBitshift>
 80043c8:	4603      	mov	r3, r0
 80043ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d0:	223f      	movs	r2, #63	; 0x3f
 80043d2:	409a      	lsls	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3718      	adds	r7, #24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	f010803f 	.word	0xf010803f

080043f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004400:	4b92      	ldr	r3, [pc, #584]	; (800464c <HAL_DMA_IRQHandler+0x258>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a92      	ldr	r2, [pc, #584]	; (8004650 <HAL_DMA_IRQHandler+0x25c>)
 8004406:	fba2 2303 	umull	r2, r3, r2, r3
 800440a:	0a9b      	lsrs	r3, r3, #10
 800440c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004412:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441e:	2208      	movs	r2, #8
 8004420:	409a      	lsls	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4013      	ands	r3, r2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d01a      	beq.n	8004460 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d013      	beq.n	8004460 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0204 	bic.w	r2, r2, #4
 8004446:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800444c:	2208      	movs	r2, #8
 800444e:	409a      	lsls	r2, r3
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004458:	f043 0201 	orr.w	r2, r3, #1
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004464:	2201      	movs	r2, #1
 8004466:	409a      	lsls	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d012      	beq.n	8004496 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00b      	beq.n	8004496 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004482:	2201      	movs	r2, #1
 8004484:	409a      	lsls	r2, r3
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448e:	f043 0202 	orr.w	r2, r3, #2
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449a:	2204      	movs	r2, #4
 800449c:	409a      	lsls	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4013      	ands	r3, r2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d012      	beq.n	80044cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00b      	beq.n	80044cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b8:	2204      	movs	r2, #4
 80044ba:	409a      	lsls	r2, r3
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c4:	f043 0204 	orr.w	r2, r3, #4
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d0:	2210      	movs	r2, #16
 80044d2:	409a      	lsls	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d043      	beq.n	8004564 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d03c      	beq.n	8004564 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ee:	2210      	movs	r2, #16
 80044f0:	409a      	lsls	r2, r3
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d018      	beq.n	8004536 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d108      	bne.n	8004524 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d024      	beq.n	8004564 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	4798      	blx	r3
 8004522:	e01f      	b.n	8004564 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004528:	2b00      	cmp	r3, #0
 800452a:	d01b      	beq.n	8004564 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	4798      	blx	r3
 8004534:	e016      	b.n	8004564 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004540:	2b00      	cmp	r3, #0
 8004542:	d107      	bne.n	8004554 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0208 	bic.w	r2, r2, #8
 8004552:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004568:	2220      	movs	r2, #32
 800456a:	409a      	lsls	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4013      	ands	r3, r2
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 808e 	beq.w	8004692 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 8086 	beq.w	8004692 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458a:	2220      	movs	r2, #32
 800458c:	409a      	lsls	r2, r3
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b05      	cmp	r3, #5
 800459c:	d136      	bne.n	800460c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0216 	bic.w	r2, r2, #22
 80045ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695a      	ldr	r2, [r3, #20]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d103      	bne.n	80045ce <HAL_DMA_IRQHandler+0x1da>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0208 	bic.w	r2, r2, #8
 80045dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e2:	223f      	movs	r2, #63	; 0x3f
 80045e4:	409a      	lsls	r2, r3
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d07d      	beq.n	80046fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	4798      	blx	r3
        }
        return;
 800460a:	e078      	b.n	80046fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d01c      	beq.n	8004654 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d108      	bne.n	800463a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462c:	2b00      	cmp	r3, #0
 800462e:	d030      	beq.n	8004692 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	4798      	blx	r3
 8004638:	e02b      	b.n	8004692 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463e:	2b00      	cmp	r3, #0
 8004640:	d027      	beq.n	8004692 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	4798      	blx	r3
 800464a:	e022      	b.n	8004692 <HAL_DMA_IRQHandler+0x29e>
 800464c:	20000140 	.word	0x20000140
 8004650:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10f      	bne.n	8004682 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0210 	bic.w	r2, r2, #16
 8004670:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004696:	2b00      	cmp	r3, #0
 8004698:	d032      	beq.n	8004700 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d022      	beq.n	80046ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2205      	movs	r2, #5
 80046aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0201 	bic.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	3301      	adds	r3, #1
 80046c2:	60bb      	str	r3, [r7, #8]
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d307      	bcc.n	80046da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1f2      	bne.n	80046be <HAL_DMA_IRQHandler+0x2ca>
 80046d8:	e000      	b.n	80046dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80046da:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	4798      	blx	r3
 80046fc:	e000      	b.n	8004700 <HAL_DMA_IRQHandler+0x30c>
        return;
 80046fe:	bf00      	nop
    }
  }
}
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop

08004708 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	3b10      	subs	r3, #16
 8004718:	4a14      	ldr	r2, [pc, #80]	; (800476c <DMA_CalcBaseAndBitshift+0x64>)
 800471a:	fba2 2303 	umull	r2, r3, r2, r3
 800471e:	091b      	lsrs	r3, r3, #4
 8004720:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004722:	4a13      	ldr	r2, [pc, #76]	; (8004770 <DMA_CalcBaseAndBitshift+0x68>)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	461a      	mov	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2b03      	cmp	r3, #3
 8004734:	d909      	bls.n	800474a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800473e:	f023 0303 	bic.w	r3, r3, #3
 8004742:	1d1a      	adds	r2, r3, #4
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	659a      	str	r2, [r3, #88]	; 0x58
 8004748:	e007      	b.n	800475a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004752:	f023 0303 	bic.w	r3, r3, #3
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	aaaaaaab 	.word	0xaaaaaaab
 8004770:	08009ea0 	.word	0x08009ea0

08004774 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800477c:	2300      	movs	r3, #0
 800477e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004784:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d11f      	bne.n	80047ce <DMA_CheckFifoParam+0x5a>
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b03      	cmp	r3, #3
 8004792:	d856      	bhi.n	8004842 <DMA_CheckFifoParam+0xce>
 8004794:	a201      	add	r2, pc, #4	; (adr r2, 800479c <DMA_CheckFifoParam+0x28>)
 8004796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479a:	bf00      	nop
 800479c:	080047ad 	.word	0x080047ad
 80047a0:	080047bf 	.word	0x080047bf
 80047a4:	080047ad 	.word	0x080047ad
 80047a8:	08004843 	.word	0x08004843
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d046      	beq.n	8004846 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047bc:	e043      	b.n	8004846 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047c6:	d140      	bne.n	800484a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047cc:	e03d      	b.n	800484a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d6:	d121      	bne.n	800481c <DMA_CheckFifoParam+0xa8>
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	2b03      	cmp	r3, #3
 80047dc:	d837      	bhi.n	800484e <DMA_CheckFifoParam+0xda>
 80047de:	a201      	add	r2, pc, #4	; (adr r2, 80047e4 <DMA_CheckFifoParam+0x70>)
 80047e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e4:	080047f5 	.word	0x080047f5
 80047e8:	080047fb 	.word	0x080047fb
 80047ec:	080047f5 	.word	0x080047f5
 80047f0:	0800480d 	.word	0x0800480d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	73fb      	strb	r3, [r7, #15]
      break;
 80047f8:	e030      	b.n	800485c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d025      	beq.n	8004852 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800480a:	e022      	b.n	8004852 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004814:	d11f      	bne.n	8004856 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800481a:	e01c      	b.n	8004856 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2b02      	cmp	r3, #2
 8004820:	d903      	bls.n	800482a <DMA_CheckFifoParam+0xb6>
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b03      	cmp	r3, #3
 8004826:	d003      	beq.n	8004830 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004828:	e018      	b.n	800485c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	73fb      	strb	r3, [r7, #15]
      break;
 800482e:	e015      	b.n	800485c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00e      	beq.n	800485a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	73fb      	strb	r3, [r7, #15]
      break;
 8004840:	e00b      	b.n	800485a <DMA_CheckFifoParam+0xe6>
      break;
 8004842:	bf00      	nop
 8004844:	e00a      	b.n	800485c <DMA_CheckFifoParam+0xe8>
      break;
 8004846:	bf00      	nop
 8004848:	e008      	b.n	800485c <DMA_CheckFifoParam+0xe8>
      break;
 800484a:	bf00      	nop
 800484c:	e006      	b.n	800485c <DMA_CheckFifoParam+0xe8>
      break;
 800484e:	bf00      	nop
 8004850:	e004      	b.n	800485c <DMA_CheckFifoParam+0xe8>
      break;
 8004852:	bf00      	nop
 8004854:	e002      	b.n	800485c <DMA_CheckFifoParam+0xe8>
      break;   
 8004856:	bf00      	nop
 8004858:	e000      	b.n	800485c <DMA_CheckFifoParam+0xe8>
      break;
 800485a:	bf00      	nop
    }
  } 
  
  return status; 
 800485c:	7bfb      	ldrb	r3, [r7, #15]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop

0800486c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800486c:	b480      	push	{r7}
 800486e:	b089      	sub	sp, #36	; 0x24
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800487a:	2300      	movs	r3, #0
 800487c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800487e:	2300      	movs	r3, #0
 8004880:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004882:	2300      	movs	r3, #0
 8004884:	61fb      	str	r3, [r7, #28]
 8004886:	e177      	b.n	8004b78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004888:	2201      	movs	r2, #1
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	4013      	ands	r3, r2
 800489a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	f040 8166 	bne.w	8004b72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d00b      	beq.n	80048c6 <HAL_GPIO_Init+0x5a>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d007      	beq.n	80048c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048ba:	2b11      	cmp	r3, #17
 80048bc:	d003      	beq.n	80048c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b12      	cmp	r3, #18
 80048c4:	d130      	bne.n	8004928 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	2203      	movs	r2, #3
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	43db      	mvns	r3, r3
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	4013      	ands	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048fc:	2201      	movs	r2, #1
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	43db      	mvns	r3, r3
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	4013      	ands	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	091b      	lsrs	r3, r3, #4
 8004912:	f003 0201 	and.w	r2, r3, #1
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	4313      	orrs	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	2203      	movs	r2, #3
 8004934:	fa02 f303 	lsl.w	r3, r2, r3
 8004938:	43db      	mvns	r3, r3
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	4013      	ands	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	fa02 f303 	lsl.w	r3, r2, r3
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	4313      	orrs	r3, r2
 8004950:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2b02      	cmp	r3, #2
 800495e:	d003      	beq.n	8004968 <HAL_GPIO_Init+0xfc>
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2b12      	cmp	r3, #18
 8004966:	d123      	bne.n	80049b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	08da      	lsrs	r2, r3, #3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3208      	adds	r2, #8
 8004970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004974:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	220f      	movs	r2, #15
 8004980:	fa02 f303 	lsl.w	r3, r2, r3
 8004984:	43db      	mvns	r3, r3
 8004986:	69ba      	ldr	r2, [r7, #24]
 8004988:	4013      	ands	r3, r2
 800498a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	691a      	ldr	r2, [r3, #16]
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	4313      	orrs	r3, r2
 80049a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	08da      	lsrs	r2, r3, #3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	3208      	adds	r2, #8
 80049aa:	69b9      	ldr	r1, [r7, #24]
 80049ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	2203      	movs	r2, #3
 80049bc:	fa02 f303 	lsl.w	r3, r2, r3
 80049c0:	43db      	mvns	r3, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4013      	ands	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f003 0203 	and.w	r2, r3, #3
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	4313      	orrs	r3, r2
 80049dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 80c0 	beq.w	8004b72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049f2:	2300      	movs	r3, #0
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	4b66      	ldr	r3, [pc, #408]	; (8004b90 <HAL_GPIO_Init+0x324>)
 80049f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fa:	4a65      	ldr	r2, [pc, #404]	; (8004b90 <HAL_GPIO_Init+0x324>)
 80049fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a00:	6453      	str	r3, [r2, #68]	; 0x44
 8004a02:	4b63      	ldr	r3, [pc, #396]	; (8004b90 <HAL_GPIO_Init+0x324>)
 8004a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a0e:	4a61      	ldr	r2, [pc, #388]	; (8004b94 <HAL_GPIO_Init+0x328>)
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	089b      	lsrs	r3, r3, #2
 8004a14:	3302      	adds	r3, #2
 8004a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	220f      	movs	r2, #15
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	43db      	mvns	r3, r3
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a58      	ldr	r2, [pc, #352]	; (8004b98 <HAL_GPIO_Init+0x32c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d037      	beq.n	8004aaa <HAL_GPIO_Init+0x23e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a57      	ldr	r2, [pc, #348]	; (8004b9c <HAL_GPIO_Init+0x330>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d031      	beq.n	8004aa6 <HAL_GPIO_Init+0x23a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a56      	ldr	r2, [pc, #344]	; (8004ba0 <HAL_GPIO_Init+0x334>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d02b      	beq.n	8004aa2 <HAL_GPIO_Init+0x236>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a55      	ldr	r2, [pc, #340]	; (8004ba4 <HAL_GPIO_Init+0x338>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d025      	beq.n	8004a9e <HAL_GPIO_Init+0x232>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a54      	ldr	r2, [pc, #336]	; (8004ba8 <HAL_GPIO_Init+0x33c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d01f      	beq.n	8004a9a <HAL_GPIO_Init+0x22e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a53      	ldr	r2, [pc, #332]	; (8004bac <HAL_GPIO_Init+0x340>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d019      	beq.n	8004a96 <HAL_GPIO_Init+0x22a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a52      	ldr	r2, [pc, #328]	; (8004bb0 <HAL_GPIO_Init+0x344>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d013      	beq.n	8004a92 <HAL_GPIO_Init+0x226>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a51      	ldr	r2, [pc, #324]	; (8004bb4 <HAL_GPIO_Init+0x348>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00d      	beq.n	8004a8e <HAL_GPIO_Init+0x222>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a50      	ldr	r2, [pc, #320]	; (8004bb8 <HAL_GPIO_Init+0x34c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d007      	beq.n	8004a8a <HAL_GPIO_Init+0x21e>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a4f      	ldr	r2, [pc, #316]	; (8004bbc <HAL_GPIO_Init+0x350>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d101      	bne.n	8004a86 <HAL_GPIO_Init+0x21a>
 8004a82:	2309      	movs	r3, #9
 8004a84:	e012      	b.n	8004aac <HAL_GPIO_Init+0x240>
 8004a86:	230a      	movs	r3, #10
 8004a88:	e010      	b.n	8004aac <HAL_GPIO_Init+0x240>
 8004a8a:	2308      	movs	r3, #8
 8004a8c:	e00e      	b.n	8004aac <HAL_GPIO_Init+0x240>
 8004a8e:	2307      	movs	r3, #7
 8004a90:	e00c      	b.n	8004aac <HAL_GPIO_Init+0x240>
 8004a92:	2306      	movs	r3, #6
 8004a94:	e00a      	b.n	8004aac <HAL_GPIO_Init+0x240>
 8004a96:	2305      	movs	r3, #5
 8004a98:	e008      	b.n	8004aac <HAL_GPIO_Init+0x240>
 8004a9a:	2304      	movs	r3, #4
 8004a9c:	e006      	b.n	8004aac <HAL_GPIO_Init+0x240>
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e004      	b.n	8004aac <HAL_GPIO_Init+0x240>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e002      	b.n	8004aac <HAL_GPIO_Init+0x240>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <HAL_GPIO_Init+0x240>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	69fa      	ldr	r2, [r7, #28]
 8004aae:	f002 0203 	and.w	r2, r2, #3
 8004ab2:	0092      	lsls	r2, r2, #2
 8004ab4:	4093      	lsls	r3, r2
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004abc:	4935      	ldr	r1, [pc, #212]	; (8004b94 <HAL_GPIO_Init+0x328>)
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	089b      	lsrs	r3, r3, #2
 8004ac2:	3302      	adds	r3, #2
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004aca:	4b3d      	ldr	r3, [pc, #244]	; (8004bc0 <HAL_GPIO_Init+0x354>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	43db      	mvns	r3, r3
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004ae6:	69ba      	ldr	r2, [r7, #24]
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004aee:	4a34      	ldr	r2, [pc, #208]	; (8004bc0 <HAL_GPIO_Init+0x354>)
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004af4:	4b32      	ldr	r3, [pc, #200]	; (8004bc0 <HAL_GPIO_Init+0x354>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	43db      	mvns	r3, r3
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	4013      	ands	r3, r2
 8004b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b18:	4a29      	ldr	r2, [pc, #164]	; (8004bc0 <HAL_GPIO_Init+0x354>)
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b1e:	4b28      	ldr	r3, [pc, #160]	; (8004bc0 <HAL_GPIO_Init+0x354>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	43db      	mvns	r3, r3
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b42:	4a1f      	ldr	r2, [pc, #124]	; (8004bc0 <HAL_GPIO_Init+0x354>)
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b48:	4b1d      	ldr	r3, [pc, #116]	; (8004bc0 <HAL_GPIO_Init+0x354>)
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	43db      	mvns	r3, r3
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	4013      	ands	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b6c:	4a14      	ldr	r2, [pc, #80]	; (8004bc0 <HAL_GPIO_Init+0x354>)
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	3301      	adds	r3, #1
 8004b76:	61fb      	str	r3, [r7, #28]
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	2b0f      	cmp	r3, #15
 8004b7c:	f67f ae84 	bls.w	8004888 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b80:	bf00      	nop
 8004b82:	bf00      	nop
 8004b84:	3724      	adds	r7, #36	; 0x24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	40023800 	.word	0x40023800
 8004b94:	40013800 	.word	0x40013800
 8004b98:	40020000 	.word	0x40020000
 8004b9c:	40020400 	.word	0x40020400
 8004ba0:	40020800 	.word	0x40020800
 8004ba4:	40020c00 	.word	0x40020c00
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	40021400 	.word	0x40021400
 8004bb0:	40021800 	.word	0x40021800
 8004bb4:	40021c00 	.word	0x40021c00
 8004bb8:	40022000 	.word	0x40022000
 8004bbc:	40022400 	.word	0x40022400
 8004bc0:	40013c00 	.word	0x40013c00

08004bc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	887b      	ldrh	r3, [r7, #2]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d002      	beq.n	8004be2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	73fb      	strb	r3, [r7, #15]
 8004be0:	e001      	b.n	8004be6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004be2:	2300      	movs	r3, #0
 8004be4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	807b      	strh	r3, [r7, #2]
 8004c00:	4613      	mov	r3, r2
 8004c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c04:	787b      	ldrb	r3, [r7, #1]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c0a:	887a      	ldrh	r2, [r7, #2]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c10:	e003      	b.n	8004c1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c12:	887b      	ldrh	r3, [r7, #2]
 8004c14:	041a      	lsls	r2, r3, #16
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	619a      	str	r2, [r3, #24]
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
	...

08004c28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004c32:	4b08      	ldr	r3, [pc, #32]	; (8004c54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c34:	695a      	ldr	r2, [r3, #20]
 8004c36:	88fb      	ldrh	r3, [r7, #6]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d006      	beq.n	8004c4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c3e:	4a05      	ldr	r2, [pc, #20]	; (8004c54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c40:	88fb      	ldrh	r3, [r7, #6]
 8004c42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c44:	88fb      	ldrh	r3, [r7, #6]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fd f97a 	bl	8001f40 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c4c:	bf00      	nop
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40013c00 	.word	0x40013c00

08004c58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e12b      	b.n	8004ec2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d106      	bne.n	8004c84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7fc feb6 	bl	80019f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2224      	movs	r2, #36	; 0x24
 8004c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0201 	bic.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004caa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004cbc:	f000 fe1e 	bl	80058fc <HAL_RCC_GetPCLK1Freq>
 8004cc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	4a81      	ldr	r2, [pc, #516]	; (8004ecc <HAL_I2C_Init+0x274>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d807      	bhi.n	8004cdc <HAL_I2C_Init+0x84>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4a80      	ldr	r2, [pc, #512]	; (8004ed0 <HAL_I2C_Init+0x278>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	bf94      	ite	ls
 8004cd4:	2301      	movls	r3, #1
 8004cd6:	2300      	movhi	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	e006      	b.n	8004cea <HAL_I2C_Init+0x92>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4a7d      	ldr	r2, [pc, #500]	; (8004ed4 <HAL_I2C_Init+0x27c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	bf94      	ite	ls
 8004ce4:	2301      	movls	r3, #1
 8004ce6:	2300      	movhi	r3, #0
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e0e7      	b.n	8004ec2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4a78      	ldr	r2, [pc, #480]	; (8004ed8 <HAL_I2C_Init+0x280>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	0c9b      	lsrs	r3, r3, #18
 8004cfc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	4a6a      	ldr	r2, [pc, #424]	; (8004ecc <HAL_I2C_Init+0x274>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d802      	bhi.n	8004d2c <HAL_I2C_Init+0xd4>
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	e009      	b.n	8004d40 <HAL_I2C_Init+0xe8>
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d32:	fb02 f303 	mul.w	r3, r2, r3
 8004d36:	4a69      	ldr	r2, [pc, #420]	; (8004edc <HAL_I2C_Init+0x284>)
 8004d38:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3c:	099b      	lsrs	r3, r3, #6
 8004d3e:	3301      	adds	r3, #1
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6812      	ldr	r2, [r2, #0]
 8004d44:	430b      	orrs	r3, r1
 8004d46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	495c      	ldr	r1, [pc, #368]	; (8004ecc <HAL_I2C_Init+0x274>)
 8004d5c:	428b      	cmp	r3, r1
 8004d5e:	d819      	bhi.n	8004d94 <HAL_I2C_Init+0x13c>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	1e59      	subs	r1, r3, #1
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d6e:	1c59      	adds	r1, r3, #1
 8004d70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d74:	400b      	ands	r3, r1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_I2C_Init+0x138>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	1e59      	subs	r1, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d88:	3301      	adds	r3, #1
 8004d8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d8e:	e051      	b.n	8004e34 <HAL_I2C_Init+0x1dc>
 8004d90:	2304      	movs	r3, #4
 8004d92:	e04f      	b.n	8004e34 <HAL_I2C_Init+0x1dc>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d111      	bne.n	8004dc0 <HAL_I2C_Init+0x168>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	1e58      	subs	r0, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6859      	ldr	r1, [r3, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	440b      	add	r3, r1
 8004daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dae:	3301      	adds	r3, #1
 8004db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	bf0c      	ite	eq
 8004db8:	2301      	moveq	r3, #1
 8004dba:	2300      	movne	r3, #0
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	e012      	b.n	8004de6 <HAL_I2C_Init+0x18e>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	1e58      	subs	r0, r3, #1
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6859      	ldr	r1, [r3, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	440b      	add	r3, r1
 8004dce:	0099      	lsls	r1, r3, #2
 8004dd0:	440b      	add	r3, r1
 8004dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	bf0c      	ite	eq
 8004de0:	2301      	moveq	r3, #1
 8004de2:	2300      	movne	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <HAL_I2C_Init+0x196>
 8004dea:	2301      	movs	r3, #1
 8004dec:	e022      	b.n	8004e34 <HAL_I2C_Init+0x1dc>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10e      	bne.n	8004e14 <HAL_I2C_Init+0x1bc>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	1e58      	subs	r0, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6859      	ldr	r1, [r3, #4]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	440b      	add	r3, r1
 8004e04:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e08:	3301      	adds	r3, #1
 8004e0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e12:	e00f      	b.n	8004e34 <HAL_I2C_Init+0x1dc>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	1e58      	subs	r0, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6859      	ldr	r1, [r3, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	0099      	lsls	r1, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	6809      	ldr	r1, [r1, #0]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69da      	ldr	r2, [r3, #28]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	6911      	ldr	r1, [r2, #16]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	68d2      	ldr	r2, [r2, #12]
 8004e6e:	4311      	orrs	r1, r2
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6812      	ldr	r2, [r2, #0]
 8004e74:	430b      	orrs	r3, r1
 8004e76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	695a      	ldr	r2, [r3, #20]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0201 	orr.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2220      	movs	r2, #32
 8004eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	000186a0 	.word	0x000186a0
 8004ed0:	001e847f 	.word	0x001e847f
 8004ed4:	003d08ff 	.word	0x003d08ff
 8004ed8:	431bde83 	.word	0x431bde83
 8004edc:	10624dd3 	.word	0x10624dd3

08004ee0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b20      	cmp	r3, #32
 8004ef4:	d129      	bne.n	8004f4a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2224      	movs	r2, #36	; 0x24
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0201 	bic.w	r2, r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0210 	bic.w	r2, r2, #16
 8004f1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f042 0201 	orr.w	r2, r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f46:	2300      	movs	r3, #0
 8004f48:	e000      	b.n	8004f4c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004f4a:	2302      	movs	r3, #2
  }
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004f62:	2300      	movs	r3, #0
 8004f64:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b20      	cmp	r3, #32
 8004f70:	d12a      	bne.n	8004fc8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2224      	movs	r2, #36	; 0x24
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0201 	bic.w	r2, r2, #1
 8004f88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004f92:	89fb      	ldrh	r3, [r7, #14]
 8004f94:	f023 030f 	bic.w	r3, r3, #15
 8004f98:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	89fb      	ldrh	r3, [r7, #14]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	89fa      	ldrh	r2, [r7, #14]
 8004faa:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0201 	orr.w	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	e000      	b.n	8004fca <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004fc8:	2302      	movs	r3, #2
  }
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
	...

08004fd8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	603b      	str	r3, [r7, #0]
 8004fe6:	4b20      	ldr	r3, [pc, #128]	; (8005068 <HAL_PWREx_EnableOverDrive+0x90>)
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	4a1f      	ldr	r2, [pc, #124]	; (8005068 <HAL_PWREx_EnableOverDrive+0x90>)
 8004fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ff2:	4b1d      	ldr	r3, [pc, #116]	; (8005068 <HAL_PWREx_EnableOverDrive+0x90>)
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004ffe:	4b1b      	ldr	r3, [pc, #108]	; (800506c <HAL_PWREx_EnableOverDrive+0x94>)
 8005000:	2201      	movs	r2, #1
 8005002:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005004:	f7fe f988 	bl	8003318 <HAL_GetTick>
 8005008:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800500a:	e009      	b.n	8005020 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800500c:	f7fe f984 	bl	8003318 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800501a:	d901      	bls.n	8005020 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e01f      	b.n	8005060 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005020:	4b13      	ldr	r3, [pc, #76]	; (8005070 <HAL_PWREx_EnableOverDrive+0x98>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800502c:	d1ee      	bne.n	800500c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800502e:	4b11      	ldr	r3, [pc, #68]	; (8005074 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005030:	2201      	movs	r2, #1
 8005032:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005034:	f7fe f970 	bl	8003318 <HAL_GetTick>
 8005038:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800503a:	e009      	b.n	8005050 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800503c:	f7fe f96c 	bl	8003318 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800504a:	d901      	bls.n	8005050 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e007      	b.n	8005060 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005050:	4b07      	ldr	r3, [pc, #28]	; (8005070 <HAL_PWREx_EnableOverDrive+0x98>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005058:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800505c:	d1ee      	bne.n	800503c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	40023800 	.word	0x40023800
 800506c:	420e0040 	.word	0x420e0040
 8005070:	40007000 	.word	0x40007000
 8005074:	420e0044 	.word	0x420e0044

08005078 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e25b      	b.n	8005542 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d075      	beq.n	8005182 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005096:	4ba3      	ldr	r3, [pc, #652]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 030c 	and.w	r3, r3, #12
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d00c      	beq.n	80050bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050a2:	4ba0      	ldr	r3, [pc, #640]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	d112      	bne.n	80050d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ae:	4b9d      	ldr	r3, [pc, #628]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050ba:	d10b      	bne.n	80050d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050bc:	4b99      	ldr	r3, [pc, #612]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d05b      	beq.n	8005180 <HAL_RCC_OscConfig+0x108>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d157      	bne.n	8005180 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e236      	b.n	8005542 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050dc:	d106      	bne.n	80050ec <HAL_RCC_OscConfig+0x74>
 80050de:	4b91      	ldr	r3, [pc, #580]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a90      	ldr	r2, [pc, #576]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80050e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	e01d      	b.n	8005128 <HAL_RCC_OscConfig+0xb0>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050f4:	d10c      	bne.n	8005110 <HAL_RCC_OscConfig+0x98>
 80050f6:	4b8b      	ldr	r3, [pc, #556]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a8a      	ldr	r2, [pc, #552]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80050fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005100:	6013      	str	r3, [r2, #0]
 8005102:	4b88      	ldr	r3, [pc, #544]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a87      	ldr	r2, [pc, #540]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	e00b      	b.n	8005128 <HAL_RCC_OscConfig+0xb0>
 8005110:	4b84      	ldr	r3, [pc, #528]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a83      	ldr	r2, [pc, #524]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	4b81      	ldr	r3, [pc, #516]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a80      	ldr	r2, [pc, #512]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d013      	beq.n	8005158 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005130:	f7fe f8f2 	bl	8003318 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005138:	f7fe f8ee 	bl	8003318 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b64      	cmp	r3, #100	; 0x64
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e1fb      	b.n	8005542 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800514a:	4b76      	ldr	r3, [pc, #472]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0f0      	beq.n	8005138 <HAL_RCC_OscConfig+0xc0>
 8005156:	e014      	b.n	8005182 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005158:	f7fe f8de 	bl	8003318 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005160:	f7fe f8da 	bl	8003318 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b64      	cmp	r3, #100	; 0x64
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e1e7      	b.n	8005542 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005172:	4b6c      	ldr	r3, [pc, #432]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f0      	bne.n	8005160 <HAL_RCC_OscConfig+0xe8>
 800517e:	e000      	b.n	8005182 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d063      	beq.n	8005256 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800518e:	4b65      	ldr	r3, [pc, #404]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 030c 	and.w	r3, r3, #12
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00b      	beq.n	80051b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800519a:	4b62      	ldr	r3, [pc, #392]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051a2:	2b08      	cmp	r3, #8
 80051a4:	d11c      	bne.n	80051e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051a6:	4b5f      	ldr	r3, [pc, #380]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d116      	bne.n	80051e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051b2:	4b5c      	ldr	r3, [pc, #368]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d005      	beq.n	80051ca <HAL_RCC_OscConfig+0x152>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d001      	beq.n	80051ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e1bb      	b.n	8005542 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ca:	4b56      	ldr	r3, [pc, #344]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	4952      	ldr	r1, [pc, #328]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051de:	e03a      	b.n	8005256 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d020      	beq.n	800522a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051e8:	4b4f      	ldr	r3, [pc, #316]	; (8005328 <HAL_RCC_OscConfig+0x2b0>)
 80051ea:	2201      	movs	r2, #1
 80051ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ee:	f7fe f893 	bl	8003318 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051f6:	f7fe f88f 	bl	8003318 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e19c      	b.n	8005542 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005208:	4b46      	ldr	r3, [pc, #280]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0f0      	beq.n	80051f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005214:	4b43      	ldr	r3, [pc, #268]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	4940      	ldr	r1, [pc, #256]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005224:	4313      	orrs	r3, r2
 8005226:	600b      	str	r3, [r1, #0]
 8005228:	e015      	b.n	8005256 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800522a:	4b3f      	ldr	r3, [pc, #252]	; (8005328 <HAL_RCC_OscConfig+0x2b0>)
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005230:	f7fe f872 	bl	8003318 <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005238:	f7fe f86e 	bl	8003318 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e17b      	b.n	8005542 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800524a:	4b36      	ldr	r3, [pc, #216]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f0      	bne.n	8005238 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0308 	and.w	r3, r3, #8
 800525e:	2b00      	cmp	r3, #0
 8005260:	d030      	beq.n	80052c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d016      	beq.n	8005298 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800526a:	4b30      	ldr	r3, [pc, #192]	; (800532c <HAL_RCC_OscConfig+0x2b4>)
 800526c:	2201      	movs	r2, #1
 800526e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005270:	f7fe f852 	bl	8003318 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005278:	f7fe f84e 	bl	8003318 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e15b      	b.n	8005542 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800528a:	4b26      	ldr	r3, [pc, #152]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 800528c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0f0      	beq.n	8005278 <HAL_RCC_OscConfig+0x200>
 8005296:	e015      	b.n	80052c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005298:	4b24      	ldr	r3, [pc, #144]	; (800532c <HAL_RCC_OscConfig+0x2b4>)
 800529a:	2200      	movs	r2, #0
 800529c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800529e:	f7fe f83b 	bl	8003318 <HAL_GetTick>
 80052a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052a4:	e008      	b.n	80052b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052a6:	f7fe f837 	bl	8003318 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e144      	b.n	8005542 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052b8:	4b1a      	ldr	r3, [pc, #104]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80052ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1f0      	bne.n	80052a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 80a0 	beq.w	8005412 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052d2:	2300      	movs	r3, #0
 80052d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052d6:	4b13      	ldr	r3, [pc, #76]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10f      	bne.n	8005302 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052e2:	2300      	movs	r3, #0
 80052e4:	60bb      	str	r3, [r7, #8]
 80052e6:	4b0f      	ldr	r3, [pc, #60]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	4a0e      	ldr	r2, [pc, #56]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80052ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f0:	6413      	str	r3, [r2, #64]	; 0x40
 80052f2:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052fa:	60bb      	str	r3, [r7, #8]
 80052fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052fe:	2301      	movs	r3, #1
 8005300:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005302:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <HAL_RCC_OscConfig+0x2b8>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530a:	2b00      	cmp	r3, #0
 800530c:	d121      	bne.n	8005352 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800530e:	4b08      	ldr	r3, [pc, #32]	; (8005330 <HAL_RCC_OscConfig+0x2b8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a07      	ldr	r2, [pc, #28]	; (8005330 <HAL_RCC_OscConfig+0x2b8>)
 8005314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800531a:	f7fd fffd 	bl	8003318 <HAL_GetTick>
 800531e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005320:	e011      	b.n	8005346 <HAL_RCC_OscConfig+0x2ce>
 8005322:	bf00      	nop
 8005324:	40023800 	.word	0x40023800
 8005328:	42470000 	.word	0x42470000
 800532c:	42470e80 	.word	0x42470e80
 8005330:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005334:	f7fd fff0 	bl	8003318 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e0fd      	b.n	8005542 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005346:	4b81      	ldr	r3, [pc, #516]	; (800554c <HAL_RCC_OscConfig+0x4d4>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0f0      	beq.n	8005334 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d106      	bne.n	8005368 <HAL_RCC_OscConfig+0x2f0>
 800535a:	4b7d      	ldr	r3, [pc, #500]	; (8005550 <HAL_RCC_OscConfig+0x4d8>)
 800535c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535e:	4a7c      	ldr	r2, [pc, #496]	; (8005550 <HAL_RCC_OscConfig+0x4d8>)
 8005360:	f043 0301 	orr.w	r3, r3, #1
 8005364:	6713      	str	r3, [r2, #112]	; 0x70
 8005366:	e01c      	b.n	80053a2 <HAL_RCC_OscConfig+0x32a>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	2b05      	cmp	r3, #5
 800536e:	d10c      	bne.n	800538a <HAL_RCC_OscConfig+0x312>
 8005370:	4b77      	ldr	r3, [pc, #476]	; (8005550 <HAL_RCC_OscConfig+0x4d8>)
 8005372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005374:	4a76      	ldr	r2, [pc, #472]	; (8005550 <HAL_RCC_OscConfig+0x4d8>)
 8005376:	f043 0304 	orr.w	r3, r3, #4
 800537a:	6713      	str	r3, [r2, #112]	; 0x70
 800537c:	4b74      	ldr	r3, [pc, #464]	; (8005550 <HAL_RCC_OscConfig+0x4d8>)
 800537e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005380:	4a73      	ldr	r2, [pc, #460]	; (8005550 <HAL_RCC_OscConfig+0x4d8>)
 8005382:	f043 0301 	orr.w	r3, r3, #1
 8005386:	6713      	str	r3, [r2, #112]	; 0x70
 8005388:	e00b      	b.n	80053a2 <HAL_RCC_OscConfig+0x32a>
 800538a:	4b71      	ldr	r3, [pc, #452]	; (8005550 <HAL_RCC_OscConfig+0x4d8>)
 800538c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538e:	4a70      	ldr	r2, [pc, #448]	; (8005550 <HAL_RCC_OscConfig+0x4d8>)
 8005390:	f023 0301 	bic.w	r3, r3, #1
 8005394:	6713      	str	r3, [r2, #112]	; 0x70
 8005396:	4b6e      	ldr	r3, [pc, #440]	; (8005550 <HAL_RCC_OscConfig+0x4d8>)
 8005398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539a:	4a6d      	ldr	r2, [pc, #436]	; (8005550 <HAL_RCC_OscConfig+0x4d8>)
 800539c:	f023 0304 	bic.w	r3, r3, #4
 80053a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d015      	beq.n	80053d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053aa:	f7fd ffb5 	bl	8003318 <HAL_GetTick>
 80053ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b0:	e00a      	b.n	80053c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053b2:	f7fd ffb1 	bl	8003318 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e0bc      	b.n	8005542 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053c8:	4b61      	ldr	r3, [pc, #388]	; (8005550 <HAL_RCC_OscConfig+0x4d8>)
 80053ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0ee      	beq.n	80053b2 <HAL_RCC_OscConfig+0x33a>
 80053d4:	e014      	b.n	8005400 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053d6:	f7fd ff9f 	bl	8003318 <HAL_GetTick>
 80053da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053dc:	e00a      	b.n	80053f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053de:	f7fd ff9b 	bl	8003318 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e0a6      	b.n	8005542 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053f4:	4b56      	ldr	r3, [pc, #344]	; (8005550 <HAL_RCC_OscConfig+0x4d8>)
 80053f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1ee      	bne.n	80053de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005400:	7dfb      	ldrb	r3, [r7, #23]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d105      	bne.n	8005412 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005406:	4b52      	ldr	r3, [pc, #328]	; (8005550 <HAL_RCC_OscConfig+0x4d8>)
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	4a51      	ldr	r2, [pc, #324]	; (8005550 <HAL_RCC_OscConfig+0x4d8>)
 800540c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005410:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 8092 	beq.w	8005540 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800541c:	4b4c      	ldr	r3, [pc, #304]	; (8005550 <HAL_RCC_OscConfig+0x4d8>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 030c 	and.w	r3, r3, #12
 8005424:	2b08      	cmp	r3, #8
 8005426:	d05c      	beq.n	80054e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	2b02      	cmp	r3, #2
 800542e:	d141      	bne.n	80054b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005430:	4b48      	ldr	r3, [pc, #288]	; (8005554 <HAL_RCC_OscConfig+0x4dc>)
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005436:	f7fd ff6f 	bl	8003318 <HAL_GetTick>
 800543a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800543c:	e008      	b.n	8005450 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800543e:	f7fd ff6b 	bl	8003318 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d901      	bls.n	8005450 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e078      	b.n	8005542 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005450:	4b3f      	ldr	r3, [pc, #252]	; (8005550 <HAL_RCC_OscConfig+0x4d8>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1f0      	bne.n	800543e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	69da      	ldr	r2, [r3, #28]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	019b      	lsls	r3, r3, #6
 800546c:	431a      	orrs	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005472:	085b      	lsrs	r3, r3, #1
 8005474:	3b01      	subs	r3, #1
 8005476:	041b      	lsls	r3, r3, #16
 8005478:	431a      	orrs	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547e:	061b      	lsls	r3, r3, #24
 8005480:	4933      	ldr	r1, [pc, #204]	; (8005550 <HAL_RCC_OscConfig+0x4d8>)
 8005482:	4313      	orrs	r3, r2
 8005484:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005486:	4b33      	ldr	r3, [pc, #204]	; (8005554 <HAL_RCC_OscConfig+0x4dc>)
 8005488:	2201      	movs	r2, #1
 800548a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800548c:	f7fd ff44 	bl	8003318 <HAL_GetTick>
 8005490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005492:	e008      	b.n	80054a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005494:	f7fd ff40 	bl	8003318 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e04d      	b.n	8005542 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054a6:	4b2a      	ldr	r3, [pc, #168]	; (8005550 <HAL_RCC_OscConfig+0x4d8>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0f0      	beq.n	8005494 <HAL_RCC_OscConfig+0x41c>
 80054b2:	e045      	b.n	8005540 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054b4:	4b27      	ldr	r3, [pc, #156]	; (8005554 <HAL_RCC_OscConfig+0x4dc>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ba:	f7fd ff2d 	bl	8003318 <HAL_GetTick>
 80054be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054c0:	e008      	b.n	80054d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054c2:	f7fd ff29 	bl	8003318 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e036      	b.n	8005542 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054d4:	4b1e      	ldr	r3, [pc, #120]	; (8005550 <HAL_RCC_OscConfig+0x4d8>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1f0      	bne.n	80054c2 <HAL_RCC_OscConfig+0x44a>
 80054e0:	e02e      	b.n	8005540 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d101      	bne.n	80054ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e029      	b.n	8005542 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054ee:	4b18      	ldr	r3, [pc, #96]	; (8005550 <HAL_RCC_OscConfig+0x4d8>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d11c      	bne.n	800553c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800550c:	429a      	cmp	r2, r3
 800550e:	d115      	bne.n	800553c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005516:	4013      	ands	r3, r2
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800551c:	4293      	cmp	r3, r2
 800551e:	d10d      	bne.n	800553c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800552a:	429a      	cmp	r2, r3
 800552c:	d106      	bne.n	800553c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005538:	429a      	cmp	r2, r3
 800553a:	d001      	beq.n	8005540 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e000      	b.n	8005542 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	40007000 	.word	0x40007000
 8005550:	40023800 	.word	0x40023800
 8005554:	42470060 	.word	0x42470060

08005558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e0cc      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800556c:	4b68      	ldr	r3, [pc, #416]	; (8005710 <HAL_RCC_ClockConfig+0x1b8>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 030f 	and.w	r3, r3, #15
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	429a      	cmp	r2, r3
 8005578:	d90c      	bls.n	8005594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800557a:	4b65      	ldr	r3, [pc, #404]	; (8005710 <HAL_RCC_ClockConfig+0x1b8>)
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	b2d2      	uxtb	r2, r2
 8005580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005582:	4b63      	ldr	r3, [pc, #396]	; (8005710 <HAL_RCC_ClockConfig+0x1b8>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 030f 	and.w	r3, r3, #15
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	429a      	cmp	r2, r3
 800558e:	d001      	beq.n	8005594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e0b8      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d020      	beq.n	80055e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d005      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055ac:	4b59      	ldr	r3, [pc, #356]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	4a58      	ldr	r2, [pc, #352]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0308 	and.w	r3, r3, #8
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d005      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055c4:	4b53      	ldr	r3, [pc, #332]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	4a52      	ldr	r2, [pc, #328]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80055ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055d0:	4b50      	ldr	r3, [pc, #320]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	494d      	ldr	r1, [pc, #308]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d044      	beq.n	8005678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d107      	bne.n	8005606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055f6:	4b47      	ldr	r3, [pc, #284]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d119      	bne.n	8005636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e07f      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b02      	cmp	r3, #2
 800560c:	d003      	beq.n	8005616 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005612:	2b03      	cmp	r3, #3
 8005614:	d107      	bne.n	8005626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005616:	4b3f      	ldr	r3, [pc, #252]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d109      	bne.n	8005636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e06f      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005626:	4b3b      	ldr	r3, [pc, #236]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e067      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005636:	4b37      	ldr	r3, [pc, #220]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f023 0203 	bic.w	r2, r3, #3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	4934      	ldr	r1, [pc, #208]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 8005644:	4313      	orrs	r3, r2
 8005646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005648:	f7fd fe66 	bl	8003318 <HAL_GetTick>
 800564c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800564e:	e00a      	b.n	8005666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005650:	f7fd fe62 	bl	8003318 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	f241 3288 	movw	r2, #5000	; 0x1388
 800565e:	4293      	cmp	r3, r2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e04f      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005666:	4b2b      	ldr	r3, [pc, #172]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 020c 	and.w	r2, r3, #12
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	429a      	cmp	r2, r3
 8005676:	d1eb      	bne.n	8005650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005678:	4b25      	ldr	r3, [pc, #148]	; (8005710 <HAL_RCC_ClockConfig+0x1b8>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 030f 	and.w	r3, r3, #15
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	429a      	cmp	r2, r3
 8005684:	d20c      	bcs.n	80056a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005686:	4b22      	ldr	r3, [pc, #136]	; (8005710 <HAL_RCC_ClockConfig+0x1b8>)
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	b2d2      	uxtb	r2, r2
 800568c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800568e:	4b20      	ldr	r3, [pc, #128]	; (8005710 <HAL_RCC_ClockConfig+0x1b8>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 030f 	and.w	r3, r3, #15
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	429a      	cmp	r2, r3
 800569a:	d001      	beq.n	80056a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e032      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d008      	beq.n	80056be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056ac:	4b19      	ldr	r3, [pc, #100]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	4916      	ldr	r1, [pc, #88]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0308 	and.w	r3, r3, #8
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d009      	beq.n	80056de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056ca:	4b12      	ldr	r3, [pc, #72]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	490e      	ldr	r1, [pc, #56]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056de:	f000 f821 	bl	8005724 <HAL_RCC_GetSysClockFreq>
 80056e2:	4602      	mov	r2, r0
 80056e4:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	091b      	lsrs	r3, r3, #4
 80056ea:	f003 030f 	and.w	r3, r3, #15
 80056ee:	490a      	ldr	r1, [pc, #40]	; (8005718 <HAL_RCC_ClockConfig+0x1c0>)
 80056f0:	5ccb      	ldrb	r3, [r1, r3]
 80056f2:	fa22 f303 	lsr.w	r3, r2, r3
 80056f6:	4a09      	ldr	r2, [pc, #36]	; (800571c <HAL_RCC_ClockConfig+0x1c4>)
 80056f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056fa:	4b09      	ldr	r3, [pc, #36]	; (8005720 <HAL_RCC_ClockConfig+0x1c8>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fd fdc6 	bl	8003290 <HAL_InitTick>

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	40023c00 	.word	0x40023c00
 8005714:	40023800 	.word	0x40023800
 8005718:	08009e88 	.word	0x08009e88
 800571c:	20000140 	.word	0x20000140
 8005720:	20000144 	.word	0x20000144

08005724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005724:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005728:	b084      	sub	sp, #16
 800572a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	607b      	str	r3, [r7, #4]
 8005730:	2300      	movs	r3, #0
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	2300      	movs	r3, #0
 8005736:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800573c:	4b67      	ldr	r3, [pc, #412]	; (80058dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f003 030c 	and.w	r3, r3, #12
 8005744:	2b08      	cmp	r3, #8
 8005746:	d00d      	beq.n	8005764 <HAL_RCC_GetSysClockFreq+0x40>
 8005748:	2b08      	cmp	r3, #8
 800574a:	f200 80bd 	bhi.w	80058c8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <HAL_RCC_GetSysClockFreq+0x34>
 8005752:	2b04      	cmp	r3, #4
 8005754:	d003      	beq.n	800575e <HAL_RCC_GetSysClockFreq+0x3a>
 8005756:	e0b7      	b.n	80058c8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005758:	4b61      	ldr	r3, [pc, #388]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800575a:	60bb      	str	r3, [r7, #8]
       break;
 800575c:	e0b7      	b.n	80058ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800575e:	4b60      	ldr	r3, [pc, #384]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005760:	60bb      	str	r3, [r7, #8]
      break;
 8005762:	e0b4      	b.n	80058ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005764:	4b5d      	ldr	r3, [pc, #372]	; (80058dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800576c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800576e:	4b5b      	ldr	r3, [pc, #364]	; (80058dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d04d      	beq.n	8005816 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800577a:	4b58      	ldr	r3, [pc, #352]	; (80058dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	099b      	lsrs	r3, r3, #6
 8005780:	461a      	mov	r2, r3
 8005782:	f04f 0300 	mov.w	r3, #0
 8005786:	f240 10ff 	movw	r0, #511	; 0x1ff
 800578a:	f04f 0100 	mov.w	r1, #0
 800578e:	ea02 0800 	and.w	r8, r2, r0
 8005792:	ea03 0901 	and.w	r9, r3, r1
 8005796:	4640      	mov	r0, r8
 8005798:	4649      	mov	r1, r9
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	f04f 0300 	mov.w	r3, #0
 80057a2:	014b      	lsls	r3, r1, #5
 80057a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80057a8:	0142      	lsls	r2, r0, #5
 80057aa:	4610      	mov	r0, r2
 80057ac:	4619      	mov	r1, r3
 80057ae:	ebb0 0008 	subs.w	r0, r0, r8
 80057b2:	eb61 0109 	sbc.w	r1, r1, r9
 80057b6:	f04f 0200 	mov.w	r2, #0
 80057ba:	f04f 0300 	mov.w	r3, #0
 80057be:	018b      	lsls	r3, r1, #6
 80057c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80057c4:	0182      	lsls	r2, r0, #6
 80057c6:	1a12      	subs	r2, r2, r0
 80057c8:	eb63 0301 	sbc.w	r3, r3, r1
 80057cc:	f04f 0000 	mov.w	r0, #0
 80057d0:	f04f 0100 	mov.w	r1, #0
 80057d4:	00d9      	lsls	r1, r3, #3
 80057d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057da:	00d0      	lsls	r0, r2, #3
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	eb12 0208 	adds.w	r2, r2, r8
 80057e4:	eb43 0309 	adc.w	r3, r3, r9
 80057e8:	f04f 0000 	mov.w	r0, #0
 80057ec:	f04f 0100 	mov.w	r1, #0
 80057f0:	0299      	lsls	r1, r3, #10
 80057f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80057f6:	0290      	lsls	r0, r2, #10
 80057f8:	4602      	mov	r2, r0
 80057fa:	460b      	mov	r3, r1
 80057fc:	4610      	mov	r0, r2
 80057fe:	4619      	mov	r1, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	461a      	mov	r2, r3
 8005804:	f04f 0300 	mov.w	r3, #0
 8005808:	f7fb f9f6 	bl	8000bf8 <__aeabi_uldivmod>
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	4613      	mov	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	e04a      	b.n	80058ac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005816:	4b31      	ldr	r3, [pc, #196]	; (80058dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	099b      	lsrs	r3, r3, #6
 800581c:	461a      	mov	r2, r3
 800581e:	f04f 0300 	mov.w	r3, #0
 8005822:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005826:	f04f 0100 	mov.w	r1, #0
 800582a:	ea02 0400 	and.w	r4, r2, r0
 800582e:	ea03 0501 	and.w	r5, r3, r1
 8005832:	4620      	mov	r0, r4
 8005834:	4629      	mov	r1, r5
 8005836:	f04f 0200 	mov.w	r2, #0
 800583a:	f04f 0300 	mov.w	r3, #0
 800583e:	014b      	lsls	r3, r1, #5
 8005840:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005844:	0142      	lsls	r2, r0, #5
 8005846:	4610      	mov	r0, r2
 8005848:	4619      	mov	r1, r3
 800584a:	1b00      	subs	r0, r0, r4
 800584c:	eb61 0105 	sbc.w	r1, r1, r5
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	018b      	lsls	r3, r1, #6
 800585a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800585e:	0182      	lsls	r2, r0, #6
 8005860:	1a12      	subs	r2, r2, r0
 8005862:	eb63 0301 	sbc.w	r3, r3, r1
 8005866:	f04f 0000 	mov.w	r0, #0
 800586a:	f04f 0100 	mov.w	r1, #0
 800586e:	00d9      	lsls	r1, r3, #3
 8005870:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005874:	00d0      	lsls	r0, r2, #3
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	1912      	adds	r2, r2, r4
 800587c:	eb45 0303 	adc.w	r3, r5, r3
 8005880:	f04f 0000 	mov.w	r0, #0
 8005884:	f04f 0100 	mov.w	r1, #0
 8005888:	0299      	lsls	r1, r3, #10
 800588a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800588e:	0290      	lsls	r0, r2, #10
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	4610      	mov	r0, r2
 8005896:	4619      	mov	r1, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	461a      	mov	r2, r3
 800589c:	f04f 0300 	mov.w	r3, #0
 80058a0:	f7fb f9aa 	bl	8000bf8 <__aeabi_uldivmod>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	4613      	mov	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058ac:	4b0b      	ldr	r3, [pc, #44]	; (80058dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	0c1b      	lsrs	r3, r3, #16
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	3301      	adds	r3, #1
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c4:	60bb      	str	r3, [r7, #8]
      break;
 80058c6:	e002      	b.n	80058ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058c8:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80058ca:	60bb      	str	r3, [r7, #8]
      break;
 80058cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058ce:	68bb      	ldr	r3, [r7, #8]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80058da:	bf00      	nop
 80058dc:	40023800 	.word	0x40023800
 80058e0:	00f42400 	.word	0x00f42400

080058e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058e4:	b480      	push	{r7}
 80058e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058e8:	4b03      	ldr	r3, [pc, #12]	; (80058f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80058ea:	681b      	ldr	r3, [r3, #0]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	20000140 	.word	0x20000140

080058fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005900:	f7ff fff0 	bl	80058e4 <HAL_RCC_GetHCLKFreq>
 8005904:	4602      	mov	r2, r0
 8005906:	4b05      	ldr	r3, [pc, #20]	; (800591c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	0a9b      	lsrs	r3, r3, #10
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	4903      	ldr	r1, [pc, #12]	; (8005920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005912:	5ccb      	ldrb	r3, [r1, r3]
 8005914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005918:	4618      	mov	r0, r3
 800591a:	bd80      	pop	{r7, pc}
 800591c:	40023800 	.word	0x40023800
 8005920:	08009e98 	.word	0x08009e98

08005924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005928:	f7ff ffdc 	bl	80058e4 <HAL_RCC_GetHCLKFreq>
 800592c:	4602      	mov	r2, r0
 800592e:	4b05      	ldr	r3, [pc, #20]	; (8005944 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	0b5b      	lsrs	r3, r3, #13
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	4903      	ldr	r1, [pc, #12]	; (8005948 <HAL_RCC_GetPCLK2Freq+0x24>)
 800593a:	5ccb      	ldrb	r3, [r1, r3]
 800593c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005940:	4618      	mov	r0, r3
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40023800 	.word	0x40023800
 8005948:	08009e98 	.word	0x08009e98

0800594c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e056      	b.n	8005a0c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d106      	bne.n	800597e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f7fc fbad 	bl	80020d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2202      	movs	r2, #2
 8005982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005994:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	431a      	orrs	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	431a      	orrs	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	431a      	orrs	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059ba:	431a      	orrs	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	431a      	orrs	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	ea42 0103 	orr.w	r1, r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	0c1b      	lsrs	r3, r3, #16
 80059dc:	f003 0104 	and.w	r1, r3, #4
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	69da      	ldr	r2, [r3, #28]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af02      	add	r7, sp, #8
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	603b      	str	r3, [r7, #0]
 8005a20:	4613      	mov	r3, r2
 8005a22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a30:	d112      	bne.n	8005a58 <HAL_SPI_Receive+0x44>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10e      	bne.n	8005a58 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2204      	movs	r2, #4
 8005a3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005a42:	88fa      	ldrh	r2, [r7, #6]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	68b9      	ldr	r1, [r7, #8]
 8005a4e:	68f8      	ldr	r0, [r7, #12]
 8005a50:	f000 f8e9 	bl	8005c26 <HAL_SPI_TransmitReceive>
 8005a54:	4603      	mov	r3, r0
 8005a56:	e0e2      	b.n	8005c1e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <HAL_SPI_Receive+0x52>
 8005a62:	2302      	movs	r3, #2
 8005a64:	e0db      	b.n	8005c1e <HAL_SPI_Receive+0x20a>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a6e:	f7fd fc53 	bl	8003318 <HAL_GetTick>
 8005a72:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d002      	beq.n	8005a86 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005a80:	2302      	movs	r3, #2
 8005a82:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a84:	e0c2      	b.n	8005c0c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d002      	beq.n	8005a92 <HAL_SPI_Receive+0x7e>
 8005a8c:	88fb      	ldrh	r3, [r7, #6]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d102      	bne.n	8005a98 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a96:	e0b9      	b.n	8005c0c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2204      	movs	r2, #4
 8005a9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	88fa      	ldrh	r2, [r7, #6]
 8005ab0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	88fa      	ldrh	r2, [r7, #6]
 8005ab6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ade:	d107      	bne.n	8005af0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005aee:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afa:	2b40      	cmp	r3, #64	; 0x40
 8005afc:	d007      	beq.n	8005b0e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b0c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d162      	bne.n	8005bdc <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005b16:	e02e      	b.n	8005b76 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d115      	bne.n	8005b52 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f103 020c 	add.w	r2, r3, #12
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b32:	7812      	ldrb	r2, [r2, #0]
 8005b34:	b2d2      	uxtb	r2, r2
 8005b36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3c:	1c5a      	adds	r2, r3, #1
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b50:	e011      	b.n	8005b76 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b52:	f7fd fbe1 	bl	8003318 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d803      	bhi.n	8005b6a <HAL_SPI_Receive+0x156>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b68:	d102      	bne.n	8005b70 <HAL_SPI_Receive+0x15c>
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d102      	bne.n	8005b76 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005b74:	e04a      	b.n	8005c0c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1cb      	bne.n	8005b18 <HAL_SPI_Receive+0x104>
 8005b80:	e031      	b.n	8005be6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d113      	bne.n	8005bb8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9a:	b292      	uxth	r2, r2
 8005b9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba2:	1c9a      	adds	r2, r3, #2
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bb6:	e011      	b.n	8005bdc <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bb8:	f7fd fbae 	bl	8003318 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d803      	bhi.n	8005bd0 <HAL_SPI_Receive+0x1bc>
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bce:	d102      	bne.n	8005bd6 <HAL_SPI_Receive+0x1c2>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d102      	bne.n	8005bdc <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005bda:	e017      	b.n	8005c0c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1cd      	bne.n	8005b82 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	6839      	ldr	r1, [r7, #0]
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 fa27 	bl	800603e <SPI_EndRxTransaction>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d002      	beq.n	8005bfc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	75fb      	strb	r3, [r7, #23]
 8005c08:	e000      	b.n	8005c0c <HAL_SPI_Receive+0x1f8>
  }

error :
 8005c0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b08c      	sub	sp, #48	; 0x30
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	60b9      	str	r1, [r7, #8]
 8005c30:	607a      	str	r2, [r7, #4]
 8005c32:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c34:	2301      	movs	r3, #1
 8005c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d101      	bne.n	8005c4c <HAL_SPI_TransmitReceive+0x26>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	e18a      	b.n	8005f62 <HAL_SPI_TransmitReceive+0x33c>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c54:	f7fd fb60 	bl	8003318 <HAL_GetTick>
 8005c58:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005c6a:	887b      	ldrh	r3, [r7, #2]
 8005c6c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d00f      	beq.n	8005c96 <HAL_SPI_TransmitReceive+0x70>
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c7c:	d107      	bne.n	8005c8e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d103      	bne.n	8005c8e <HAL_SPI_TransmitReceive+0x68>
 8005c86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d003      	beq.n	8005c96 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005c8e:	2302      	movs	r3, #2
 8005c90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005c94:	e15b      	b.n	8005f4e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d005      	beq.n	8005ca8 <HAL_SPI_TransmitReceive+0x82>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <HAL_SPI_TransmitReceive+0x82>
 8005ca2:	887b      	ldrh	r3, [r7, #2]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d103      	bne.n	8005cb0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005cae:	e14e      	b.n	8005f4e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d003      	beq.n	8005cc4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2205      	movs	r2, #5
 8005cc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	887a      	ldrh	r2, [r7, #2]
 8005cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	887a      	ldrh	r2, [r7, #2]
 8005cda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	887a      	ldrh	r2, [r7, #2]
 8005ce6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	887a      	ldrh	r2, [r7, #2]
 8005cec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d04:	2b40      	cmp	r3, #64	; 0x40
 8005d06:	d007      	beq.n	8005d18 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d20:	d178      	bne.n	8005e14 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d002      	beq.n	8005d30 <HAL_SPI_TransmitReceive+0x10a>
 8005d2a:	8b7b      	ldrh	r3, [r7, #26]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d166      	bne.n	8005dfe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d34:	881a      	ldrh	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d40:	1c9a      	adds	r2, r3, #2
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d54:	e053      	b.n	8005dfe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d11b      	bne.n	8005d9c <HAL_SPI_TransmitReceive+0x176>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d016      	beq.n	8005d9c <HAL_SPI_TransmitReceive+0x176>
 8005d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d113      	bne.n	8005d9c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d78:	881a      	ldrh	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d84:	1c9a      	adds	r2, r3, #2
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d119      	bne.n	8005dde <HAL_SPI_TransmitReceive+0x1b8>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d014      	beq.n	8005dde <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbe:	b292      	uxth	r2, r2
 8005dc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc6:	1c9a      	adds	r2, r3, #2
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005dde:	f7fd fa9b 	bl	8003318 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d807      	bhi.n	8005dfe <HAL_SPI_TransmitReceive+0x1d8>
 8005dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005df4:	d003      	beq.n	8005dfe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005dfc:	e0a7      	b.n	8005f4e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1a6      	bne.n	8005d56 <HAL_SPI_TransmitReceive+0x130>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1a1      	bne.n	8005d56 <HAL_SPI_TransmitReceive+0x130>
 8005e12:	e07c      	b.n	8005f0e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d002      	beq.n	8005e22 <HAL_SPI_TransmitReceive+0x1fc>
 8005e1c:	8b7b      	ldrh	r3, [r7, #26]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d16b      	bne.n	8005efa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	330c      	adds	r3, #12
 8005e2c:	7812      	ldrb	r2, [r2, #0]
 8005e2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	3b01      	subs	r3, #1
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e48:	e057      	b.n	8005efa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d11c      	bne.n	8005e92 <HAL_SPI_TransmitReceive+0x26c>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d017      	beq.n	8005e92 <HAL_SPI_TransmitReceive+0x26c>
 8005e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d114      	bne.n	8005e92 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	330c      	adds	r3, #12
 8005e72:	7812      	ldrb	r2, [r2, #0]
 8005e74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	3b01      	subs	r3, #1
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d119      	bne.n	8005ed4 <HAL_SPI_TransmitReceive+0x2ae>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d014      	beq.n	8005ed4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb4:	b2d2      	uxtb	r2, r2
 8005eb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ed4:	f7fd fa20 	bl	8003318 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d803      	bhi.n	8005eec <HAL_SPI_TransmitReceive+0x2c6>
 8005ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eea:	d102      	bne.n	8005ef2 <HAL_SPI_TransmitReceive+0x2cc>
 8005eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d103      	bne.n	8005efa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ef8:	e029      	b.n	8005f4e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1a2      	bne.n	8005e4a <HAL_SPI_TransmitReceive+0x224>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d19d      	bne.n	8005e4a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 f8f8 	bl	8006108 <SPI_EndRxTxTransaction>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d006      	beq.n	8005f2c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2220      	movs	r2, #32
 8005f28:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005f2a:	e010      	b.n	8005f4e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10b      	bne.n	8005f4c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f34:	2300      	movs	r3, #0
 8005f36:	617b      	str	r3, [r7, #20]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	617b      	str	r3, [r7, #20]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	617b      	str	r3, [r7, #20]
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	e000      	b.n	8005f4e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005f4c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3730      	adds	r7, #48	; 0x30
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	603b      	str	r3, [r7, #0]
 8005f76:	4613      	mov	r3, r2
 8005f78:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f7a:	e04c      	b.n	8006016 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f82:	d048      	beq.n	8006016 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005f84:	f7fd f9c8 	bl	8003318 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d902      	bls.n	8005f9a <SPI_WaitFlagStateUntilTimeout+0x30>
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d13d      	bne.n	8006016 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fa8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fb2:	d111      	bne.n	8005fd8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fbc:	d004      	beq.n	8005fc8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fc6:	d107      	bne.n	8005fd8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe0:	d10f      	bne.n	8006002 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006000:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e00f      	b.n	8006036 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4013      	ands	r3, r2
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	429a      	cmp	r2, r3
 8006024:	bf0c      	ite	eq
 8006026:	2301      	moveq	r3, #1
 8006028:	2300      	movne	r3, #0
 800602a:	b2db      	uxtb	r3, r3
 800602c:	461a      	mov	r2, r3
 800602e:	79fb      	ldrb	r3, [r7, #7]
 8006030:	429a      	cmp	r2, r3
 8006032:	d1a3      	bne.n	8005f7c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b086      	sub	sp, #24
 8006042:	af02      	add	r7, sp, #8
 8006044:	60f8      	str	r0, [r7, #12]
 8006046:	60b9      	str	r1, [r7, #8]
 8006048:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006052:	d111      	bne.n	8006078 <SPI_EndRxTransaction+0x3a>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800605c:	d004      	beq.n	8006068 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006066:	d107      	bne.n	8006078 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006076:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006080:	d12a      	bne.n	80060d8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800608a:	d012      	beq.n	80060b2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2200      	movs	r2, #0
 8006094:	2180      	movs	r1, #128	; 0x80
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f7ff ff67 	bl	8005f6a <SPI_WaitFlagStateUntilTimeout>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d02d      	beq.n	80060fe <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a6:	f043 0220 	orr.w	r2, r3, #32
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e026      	b.n	8006100 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2200      	movs	r2, #0
 80060ba:	2101      	movs	r1, #1
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f7ff ff54 	bl	8005f6a <SPI_WaitFlagStateUntilTimeout>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d01a      	beq.n	80060fe <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060cc:	f043 0220 	orr.w	r2, r3, #32
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e013      	b.n	8006100 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	9300      	str	r3, [sp, #0]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2200      	movs	r2, #0
 80060e0:	2101      	movs	r1, #1
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f7ff ff41 	bl	8005f6a <SPI_WaitFlagStateUntilTimeout>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d007      	beq.n	80060fe <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f2:	f043 0220 	orr.w	r2, r3, #32
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e000      	b.n	8006100 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b088      	sub	sp, #32
 800610c:	af02      	add	r7, sp, #8
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006114:	4b1b      	ldr	r3, [pc, #108]	; (8006184 <SPI_EndRxTxTransaction+0x7c>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a1b      	ldr	r2, [pc, #108]	; (8006188 <SPI_EndRxTxTransaction+0x80>)
 800611a:	fba2 2303 	umull	r2, r3, r2, r3
 800611e:	0d5b      	lsrs	r3, r3, #21
 8006120:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006124:	fb02 f303 	mul.w	r3, r2, r3
 8006128:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006132:	d112      	bne.n	800615a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2200      	movs	r2, #0
 800613c:	2180      	movs	r1, #128	; 0x80
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f7ff ff13 	bl	8005f6a <SPI_WaitFlagStateUntilTimeout>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d016      	beq.n	8006178 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614e:	f043 0220 	orr.w	r2, r3, #32
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e00f      	b.n	800617a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00a      	beq.n	8006176 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	3b01      	subs	r3, #1
 8006164:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006170:	2b80      	cmp	r3, #128	; 0x80
 8006172:	d0f2      	beq.n	800615a <SPI_EndRxTxTransaction+0x52>
 8006174:	e000      	b.n	8006178 <SPI_EndRxTxTransaction+0x70>
        break;
 8006176:	bf00      	nop
  }

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20000140 	.word	0x20000140
 8006188:	165e9f81 	.word	0x165e9f81

0800618c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e01d      	b.n	80061da <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d106      	bne.n	80061b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7fc fa9a 	bl	80026ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3304      	adds	r3, #4
 80061c8:	4619      	mov	r1, r3
 80061ca:	4610      	mov	r0, r2
 80061cc:	f000 fad8 	bl	8006780 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b082      	sub	sp, #8
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e01d      	b.n	8006230 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d106      	bne.n	800620e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f815 	bl	8006238 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2202      	movs	r2, #2
 8006212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	3304      	adds	r3, #4
 800621e:	4619      	mov	r1, r3
 8006220:	4610      	mov	r0, r2
 8006222:	f000 faad 	bl	8006780 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2201      	movs	r2, #1
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	4618      	mov	r0, r3
 8006260:	f000 fea2 	bl	8006fa8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a15      	ldr	r2, [pc, #84]	; (80062c0 <HAL_TIM_PWM_Start+0x74>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d004      	beq.n	8006278 <HAL_TIM_PWM_Start+0x2c>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a14      	ldr	r2, [pc, #80]	; (80062c4 <HAL_TIM_PWM_Start+0x78>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d101      	bne.n	800627c <HAL_TIM_PWM_Start+0x30>
 8006278:	2301      	movs	r3, #1
 800627a:	e000      	b.n	800627e <HAL_TIM_PWM_Start+0x32>
 800627c:	2300      	movs	r3, #0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d007      	beq.n	8006292 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006290:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f003 0307 	and.w	r3, r3, #7
 800629c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2b06      	cmp	r3, #6
 80062a2:	d007      	beq.n	80062b4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f042 0201 	orr.w	r2, r2, #1
 80062b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	40010000 	.word	0x40010000
 80062c4:	40010400 	.word	0x40010400

080062c8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e01d      	b.n	8006316 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d106      	bne.n	80062f4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f815 	bl	800631e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	3304      	adds	r3, #4
 8006304:	4619      	mov	r1, r3
 8006306:	4610      	mov	r0, r2
 8006308:	f000 fa3a 	bl	8006780 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800631e:	b480      	push	{r7}
 8006320:	b083      	sub	sp, #12
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006326:	bf00      	nop
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b084      	sub	sp, #16
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <HAL_TIM_IC_ConfigChannel+0x1a>
 8006348:	2302      	movs	r3, #2
 800634a:	e08a      	b.n	8006462 <HAL_TIM_IC_ConfigChannel+0x130>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2202      	movs	r2, #2
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d11b      	bne.n	800639a <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	6819      	ldr	r1, [r3, #0]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	f000 fc55 	bl	8006c20 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	699a      	ldr	r2, [r3, #24]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 020c 	bic.w	r2, r2, #12
 8006384:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6999      	ldr	r1, [r3, #24]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	430a      	orrs	r2, r1
 8006396:	619a      	str	r2, [r3, #24]
 8006398:	e05a      	b.n	8006450 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b04      	cmp	r3, #4
 800639e:	d11c      	bne.n	80063da <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6818      	ldr	r0, [r3, #0]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	6819      	ldr	r1, [r3, #0]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	f000 fcd9 	bl	8006d66 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	699a      	ldr	r2, [r3, #24]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80063c2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6999      	ldr	r1, [r3, #24]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	021a      	lsls	r2, r3, #8
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	430a      	orrs	r2, r1
 80063d6:	619a      	str	r2, [r3, #24]
 80063d8:	e03a      	b.n	8006450 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b08      	cmp	r3, #8
 80063de:	d11b      	bne.n	8006418 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6818      	ldr	r0, [r3, #0]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	6819      	ldr	r1, [r3, #0]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f000 fd26 	bl	8006e40 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	69da      	ldr	r2, [r3, #28]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 020c 	bic.w	r2, r2, #12
 8006402:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	69d9      	ldr	r1, [r3, #28]
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	689a      	ldr	r2, [r3, #8]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	61da      	str	r2, [r3, #28]
 8006416:	e01b      	b.n	8006450 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6818      	ldr	r0, [r3, #0]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	6819      	ldr	r1, [r3, #0]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f000 fd46 	bl	8006eb8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	69da      	ldr	r2, [r3, #28]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800643a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	69d9      	ldr	r1, [r3, #28]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	021a      	lsls	r2, r3, #8
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
	...

0800646c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800647e:	2b01      	cmp	r3, #1
 8006480:	d101      	bne.n	8006486 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006482:	2302      	movs	r3, #2
 8006484:	e0b4      	b.n	80065f0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2202      	movs	r2, #2
 8006492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2b0c      	cmp	r3, #12
 800649a:	f200 809f 	bhi.w	80065dc <HAL_TIM_PWM_ConfigChannel+0x170>
 800649e:	a201      	add	r2, pc, #4	; (adr r2, 80064a4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80064a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a4:	080064d9 	.word	0x080064d9
 80064a8:	080065dd 	.word	0x080065dd
 80064ac:	080065dd 	.word	0x080065dd
 80064b0:	080065dd 	.word	0x080065dd
 80064b4:	08006519 	.word	0x08006519
 80064b8:	080065dd 	.word	0x080065dd
 80064bc:	080065dd 	.word	0x080065dd
 80064c0:	080065dd 	.word	0x080065dd
 80064c4:	0800655b 	.word	0x0800655b
 80064c8:	080065dd 	.word	0x080065dd
 80064cc:	080065dd 	.word	0x080065dd
 80064d0:	080065dd 	.word	0x080065dd
 80064d4:	0800659b 	.word	0x0800659b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68b9      	ldr	r1, [r7, #8]
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 f9ee 	bl	80068c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699a      	ldr	r2, [r3, #24]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f042 0208 	orr.w	r2, r2, #8
 80064f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	699a      	ldr	r2, [r3, #24]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 0204 	bic.w	r2, r2, #4
 8006502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6999      	ldr	r1, [r3, #24]
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	691a      	ldr	r2, [r3, #16]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	619a      	str	r2, [r3, #24]
      break;
 8006516:	e062      	b.n	80065de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68b9      	ldr	r1, [r7, #8]
 800651e:	4618      	mov	r0, r3
 8006520:	f000 fa3e 	bl	80069a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699a      	ldr	r2, [r3, #24]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	699a      	ldr	r2, [r3, #24]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6999      	ldr	r1, [r3, #24]
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	021a      	lsls	r2, r3, #8
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	430a      	orrs	r2, r1
 8006556:	619a      	str	r2, [r3, #24]
      break;
 8006558:	e041      	b.n	80065de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68b9      	ldr	r1, [r7, #8]
 8006560:	4618      	mov	r0, r3
 8006562:	f000 fa93 	bl	8006a8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69da      	ldr	r2, [r3, #28]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f042 0208 	orr.w	r2, r2, #8
 8006574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69da      	ldr	r2, [r3, #28]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f022 0204 	bic.w	r2, r2, #4
 8006584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	69d9      	ldr	r1, [r3, #28]
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	691a      	ldr	r2, [r3, #16]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	61da      	str	r2, [r3, #28]
      break;
 8006598:	e021      	b.n	80065de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68b9      	ldr	r1, [r7, #8]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f000 fae7 	bl	8006b74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69da      	ldr	r2, [r3, #28]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	69da      	ldr	r2, [r3, #28]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	69d9      	ldr	r1, [r3, #28]
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	021a      	lsls	r2, r3, #8
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	61da      	str	r2, [r3, #28]
      break;
 80065da:	e000      	b.n	80065de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80065dc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006608:	2b01      	cmp	r3, #1
 800660a:	d101      	bne.n	8006610 <HAL_TIM_ConfigClockSource+0x18>
 800660c:	2302      	movs	r3, #2
 800660e:	e0b3      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x180>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800662e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006636:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006648:	d03e      	beq.n	80066c8 <HAL_TIM_ConfigClockSource+0xd0>
 800664a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800664e:	f200 8087 	bhi.w	8006760 <HAL_TIM_ConfigClockSource+0x168>
 8006652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006656:	f000 8085 	beq.w	8006764 <HAL_TIM_ConfigClockSource+0x16c>
 800665a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800665e:	d87f      	bhi.n	8006760 <HAL_TIM_ConfigClockSource+0x168>
 8006660:	2b70      	cmp	r3, #112	; 0x70
 8006662:	d01a      	beq.n	800669a <HAL_TIM_ConfigClockSource+0xa2>
 8006664:	2b70      	cmp	r3, #112	; 0x70
 8006666:	d87b      	bhi.n	8006760 <HAL_TIM_ConfigClockSource+0x168>
 8006668:	2b60      	cmp	r3, #96	; 0x60
 800666a:	d050      	beq.n	800670e <HAL_TIM_ConfigClockSource+0x116>
 800666c:	2b60      	cmp	r3, #96	; 0x60
 800666e:	d877      	bhi.n	8006760 <HAL_TIM_ConfigClockSource+0x168>
 8006670:	2b50      	cmp	r3, #80	; 0x50
 8006672:	d03c      	beq.n	80066ee <HAL_TIM_ConfigClockSource+0xf6>
 8006674:	2b50      	cmp	r3, #80	; 0x50
 8006676:	d873      	bhi.n	8006760 <HAL_TIM_ConfigClockSource+0x168>
 8006678:	2b40      	cmp	r3, #64	; 0x40
 800667a:	d058      	beq.n	800672e <HAL_TIM_ConfigClockSource+0x136>
 800667c:	2b40      	cmp	r3, #64	; 0x40
 800667e:	d86f      	bhi.n	8006760 <HAL_TIM_ConfigClockSource+0x168>
 8006680:	2b30      	cmp	r3, #48	; 0x30
 8006682:	d064      	beq.n	800674e <HAL_TIM_ConfigClockSource+0x156>
 8006684:	2b30      	cmp	r3, #48	; 0x30
 8006686:	d86b      	bhi.n	8006760 <HAL_TIM_ConfigClockSource+0x168>
 8006688:	2b20      	cmp	r3, #32
 800668a:	d060      	beq.n	800674e <HAL_TIM_ConfigClockSource+0x156>
 800668c:	2b20      	cmp	r3, #32
 800668e:	d867      	bhi.n	8006760 <HAL_TIM_ConfigClockSource+0x168>
 8006690:	2b00      	cmp	r3, #0
 8006692:	d05c      	beq.n	800674e <HAL_TIM_ConfigClockSource+0x156>
 8006694:	2b10      	cmp	r3, #16
 8006696:	d05a      	beq.n	800674e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006698:	e062      	b.n	8006760 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6818      	ldr	r0, [r3, #0]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	6899      	ldr	r1, [r3, #8]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	f000 fc5d 	bl	8006f68 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	609a      	str	r2, [r3, #8]
      break;
 80066c6:	e04e      	b.n	8006766 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6818      	ldr	r0, [r3, #0]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	6899      	ldr	r1, [r3, #8]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	685a      	ldr	r2, [r3, #4]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f000 fc46 	bl	8006f68 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689a      	ldr	r2, [r3, #8]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066ea:	609a      	str	r2, [r3, #8]
      break;
 80066ec:	e03b      	b.n	8006766 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6818      	ldr	r0, [r3, #0]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	6859      	ldr	r1, [r3, #4]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	461a      	mov	r2, r3
 80066fc:	f000 fb04 	bl	8006d08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2150      	movs	r1, #80	; 0x50
 8006706:	4618      	mov	r0, r3
 8006708:	f000 fc13 	bl	8006f32 <TIM_ITRx_SetConfig>
      break;
 800670c:	e02b      	b.n	8006766 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6818      	ldr	r0, [r3, #0]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	6859      	ldr	r1, [r3, #4]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	461a      	mov	r2, r3
 800671c:	f000 fb60 	bl	8006de0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2160      	movs	r1, #96	; 0x60
 8006726:	4618      	mov	r0, r3
 8006728:	f000 fc03 	bl	8006f32 <TIM_ITRx_SetConfig>
      break;
 800672c:	e01b      	b.n	8006766 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6818      	ldr	r0, [r3, #0]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	6859      	ldr	r1, [r3, #4]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	461a      	mov	r2, r3
 800673c:	f000 fae4 	bl	8006d08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2140      	movs	r1, #64	; 0x40
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fbf3 	bl	8006f32 <TIM_ITRx_SetConfig>
      break;
 800674c:	e00b      	b.n	8006766 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4619      	mov	r1, r3
 8006758:	4610      	mov	r0, r2
 800675a:	f000 fbea 	bl	8006f32 <TIM_ITRx_SetConfig>
      break;
 800675e:	e002      	b.n	8006766 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006760:	bf00      	nop
 8006762:	e000      	b.n	8006766 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006764:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a40      	ldr	r2, [pc, #256]	; (8006894 <TIM_Base_SetConfig+0x114>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d013      	beq.n	80067c0 <TIM_Base_SetConfig+0x40>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800679e:	d00f      	beq.n	80067c0 <TIM_Base_SetConfig+0x40>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a3d      	ldr	r2, [pc, #244]	; (8006898 <TIM_Base_SetConfig+0x118>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d00b      	beq.n	80067c0 <TIM_Base_SetConfig+0x40>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a3c      	ldr	r2, [pc, #240]	; (800689c <TIM_Base_SetConfig+0x11c>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d007      	beq.n	80067c0 <TIM_Base_SetConfig+0x40>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a3b      	ldr	r2, [pc, #236]	; (80068a0 <TIM_Base_SetConfig+0x120>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d003      	beq.n	80067c0 <TIM_Base_SetConfig+0x40>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a3a      	ldr	r2, [pc, #232]	; (80068a4 <TIM_Base_SetConfig+0x124>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d108      	bne.n	80067d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a2f      	ldr	r2, [pc, #188]	; (8006894 <TIM_Base_SetConfig+0x114>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d02b      	beq.n	8006832 <TIM_Base_SetConfig+0xb2>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067e0:	d027      	beq.n	8006832 <TIM_Base_SetConfig+0xb2>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a2c      	ldr	r2, [pc, #176]	; (8006898 <TIM_Base_SetConfig+0x118>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d023      	beq.n	8006832 <TIM_Base_SetConfig+0xb2>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a2b      	ldr	r2, [pc, #172]	; (800689c <TIM_Base_SetConfig+0x11c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d01f      	beq.n	8006832 <TIM_Base_SetConfig+0xb2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a2a      	ldr	r2, [pc, #168]	; (80068a0 <TIM_Base_SetConfig+0x120>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d01b      	beq.n	8006832 <TIM_Base_SetConfig+0xb2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a29      	ldr	r2, [pc, #164]	; (80068a4 <TIM_Base_SetConfig+0x124>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d017      	beq.n	8006832 <TIM_Base_SetConfig+0xb2>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a28      	ldr	r2, [pc, #160]	; (80068a8 <TIM_Base_SetConfig+0x128>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d013      	beq.n	8006832 <TIM_Base_SetConfig+0xb2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a27      	ldr	r2, [pc, #156]	; (80068ac <TIM_Base_SetConfig+0x12c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d00f      	beq.n	8006832 <TIM_Base_SetConfig+0xb2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a26      	ldr	r2, [pc, #152]	; (80068b0 <TIM_Base_SetConfig+0x130>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d00b      	beq.n	8006832 <TIM_Base_SetConfig+0xb2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a25      	ldr	r2, [pc, #148]	; (80068b4 <TIM_Base_SetConfig+0x134>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d007      	beq.n	8006832 <TIM_Base_SetConfig+0xb2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a24      	ldr	r2, [pc, #144]	; (80068b8 <TIM_Base_SetConfig+0x138>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d003      	beq.n	8006832 <TIM_Base_SetConfig+0xb2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a23      	ldr	r2, [pc, #140]	; (80068bc <TIM_Base_SetConfig+0x13c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d108      	bne.n	8006844 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	4313      	orrs	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	4313      	orrs	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a0a      	ldr	r2, [pc, #40]	; (8006894 <TIM_Base_SetConfig+0x114>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d003      	beq.n	8006878 <TIM_Base_SetConfig+0xf8>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a0c      	ldr	r2, [pc, #48]	; (80068a4 <TIM_Base_SetConfig+0x124>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d103      	bne.n	8006880 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	691a      	ldr	r2, [r3, #16]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	615a      	str	r2, [r3, #20]
}
 8006886:	bf00      	nop
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	40010000 	.word	0x40010000
 8006898:	40000400 	.word	0x40000400
 800689c:	40000800 	.word	0x40000800
 80068a0:	40000c00 	.word	0x40000c00
 80068a4:	40010400 	.word	0x40010400
 80068a8:	40014000 	.word	0x40014000
 80068ac:	40014400 	.word	0x40014400
 80068b0:	40014800 	.word	0x40014800
 80068b4:	40001800 	.word	0x40001800
 80068b8:	40001c00 	.word	0x40001c00
 80068bc:	40002000 	.word	0x40002000

080068c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	f023 0201 	bic.w	r2, r3, #1
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f023 0303 	bic.w	r3, r3, #3
 80068f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	4313      	orrs	r3, r2
 8006900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f023 0302 	bic.w	r3, r3, #2
 8006908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	4313      	orrs	r3, r2
 8006912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a20      	ldr	r2, [pc, #128]	; (8006998 <TIM_OC1_SetConfig+0xd8>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d003      	beq.n	8006924 <TIM_OC1_SetConfig+0x64>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a1f      	ldr	r2, [pc, #124]	; (800699c <TIM_OC1_SetConfig+0xdc>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d10c      	bne.n	800693e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f023 0308 	bic.w	r3, r3, #8
 800692a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	4313      	orrs	r3, r2
 8006934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f023 0304 	bic.w	r3, r3, #4
 800693c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a15      	ldr	r2, [pc, #84]	; (8006998 <TIM_OC1_SetConfig+0xd8>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d003      	beq.n	800694e <TIM_OC1_SetConfig+0x8e>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a14      	ldr	r2, [pc, #80]	; (800699c <TIM_OC1_SetConfig+0xdc>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d111      	bne.n	8006972 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800695c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	4313      	orrs	r3, r2
 8006966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	4313      	orrs	r3, r2
 8006970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	621a      	str	r2, [r3, #32]
}
 800698c:	bf00      	nop
 800698e:	371c      	adds	r7, #28
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	40010000 	.word	0x40010000
 800699c:	40010400 	.word	0x40010400

080069a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	f023 0210 	bic.w	r2, r3, #16
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	021b      	lsls	r3, r3, #8
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f023 0320 	bic.w	r3, r3, #32
 80069ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	011b      	lsls	r3, r3, #4
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a22      	ldr	r2, [pc, #136]	; (8006a84 <TIM_OC2_SetConfig+0xe4>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d003      	beq.n	8006a08 <TIM_OC2_SetConfig+0x68>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a21      	ldr	r2, [pc, #132]	; (8006a88 <TIM_OC2_SetConfig+0xe8>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d10d      	bne.n	8006a24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	011b      	lsls	r3, r3, #4
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a17      	ldr	r2, [pc, #92]	; (8006a84 <TIM_OC2_SetConfig+0xe4>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d003      	beq.n	8006a34 <TIM_OC2_SetConfig+0x94>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a16      	ldr	r2, [pc, #88]	; (8006a88 <TIM_OC2_SetConfig+0xe8>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d113      	bne.n	8006a5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	621a      	str	r2, [r3, #32]
}
 8006a76:	bf00      	nop
 8006a78:	371c      	adds	r7, #28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	40010000 	.word	0x40010000
 8006a88:	40010400 	.word	0x40010400

08006a8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f023 0303 	bic.w	r3, r3, #3
 8006ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	021b      	lsls	r3, r3, #8
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a21      	ldr	r2, [pc, #132]	; (8006b6c <TIM_OC3_SetConfig+0xe0>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d003      	beq.n	8006af2 <TIM_OC3_SetConfig+0x66>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a20      	ldr	r2, [pc, #128]	; (8006b70 <TIM_OC3_SetConfig+0xe4>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d10d      	bne.n	8006b0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006af8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	021b      	lsls	r3, r3, #8
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a16      	ldr	r2, [pc, #88]	; (8006b6c <TIM_OC3_SetConfig+0xe0>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d003      	beq.n	8006b1e <TIM_OC3_SetConfig+0x92>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a15      	ldr	r2, [pc, #84]	; (8006b70 <TIM_OC3_SetConfig+0xe4>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d113      	bne.n	8006b46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	011b      	lsls	r3, r3, #4
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	621a      	str	r2, [r3, #32]
}
 8006b60:	bf00      	nop
 8006b62:	371c      	adds	r7, #28
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	40010000 	.word	0x40010000
 8006b70:	40010400 	.word	0x40010400

08006b74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b087      	sub	sp, #28
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	69db      	ldr	r3, [r3, #28]
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	021b      	lsls	r3, r3, #8
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	031b      	lsls	r3, r3, #12
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a12      	ldr	r2, [pc, #72]	; (8006c18 <TIM_OC4_SetConfig+0xa4>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d003      	beq.n	8006bdc <TIM_OC4_SetConfig+0x68>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a11      	ldr	r2, [pc, #68]	; (8006c1c <TIM_OC4_SetConfig+0xa8>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d109      	bne.n	8006bf0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006be2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	019b      	lsls	r3, r3, #6
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	621a      	str	r2, [r3, #32]
}
 8006c0a:	bf00      	nop
 8006c0c:	371c      	adds	r7, #28
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	40010000 	.word	0x40010000
 8006c1c:	40010400 	.word	0x40010400

08006c20 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b087      	sub	sp, #28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
 8006c2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	f023 0201 	bic.w	r2, r3, #1
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	4a28      	ldr	r2, [pc, #160]	; (8006cec <TIM_TI1_SetConfig+0xcc>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d01b      	beq.n	8006c86 <TIM_TI1_SetConfig+0x66>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c54:	d017      	beq.n	8006c86 <TIM_TI1_SetConfig+0x66>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	4a25      	ldr	r2, [pc, #148]	; (8006cf0 <TIM_TI1_SetConfig+0xd0>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d013      	beq.n	8006c86 <TIM_TI1_SetConfig+0x66>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	4a24      	ldr	r2, [pc, #144]	; (8006cf4 <TIM_TI1_SetConfig+0xd4>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d00f      	beq.n	8006c86 <TIM_TI1_SetConfig+0x66>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	4a23      	ldr	r2, [pc, #140]	; (8006cf8 <TIM_TI1_SetConfig+0xd8>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d00b      	beq.n	8006c86 <TIM_TI1_SetConfig+0x66>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4a22      	ldr	r2, [pc, #136]	; (8006cfc <TIM_TI1_SetConfig+0xdc>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d007      	beq.n	8006c86 <TIM_TI1_SetConfig+0x66>
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4a21      	ldr	r2, [pc, #132]	; (8006d00 <TIM_TI1_SetConfig+0xe0>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d003      	beq.n	8006c86 <TIM_TI1_SetConfig+0x66>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	4a20      	ldr	r2, [pc, #128]	; (8006d04 <TIM_TI1_SetConfig+0xe4>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d101      	bne.n	8006c8a <TIM_TI1_SetConfig+0x6a>
 8006c86:	2301      	movs	r3, #1
 8006c88:	e000      	b.n	8006c8c <TIM_TI1_SetConfig+0x6c>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d008      	beq.n	8006ca2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	f023 0303 	bic.w	r3, r3, #3
 8006c96:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]
 8006ca0:	e003      	b.n	8006caa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f043 0301 	orr.w	r3, r3, #1
 8006ca8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	011b      	lsls	r3, r3, #4
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	f023 030a 	bic.w	r3, r3, #10
 8006cc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	f003 030a 	and.w	r3, r3, #10
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	621a      	str	r2, [r3, #32]
}
 8006cde:	bf00      	nop
 8006ce0:	371c      	adds	r7, #28
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	40010000 	.word	0x40010000
 8006cf0:	40000400 	.word	0x40000400
 8006cf4:	40000800 	.word	0x40000800
 8006cf8:	40000c00 	.word	0x40000c00
 8006cfc:	40010400 	.word	0x40010400
 8006d00:	40014000 	.word	0x40014000
 8006d04:	40001800 	.word	0x40001800

08006d08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b087      	sub	sp, #28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a1b      	ldr	r3, [r3, #32]
 8006d18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	f023 0201 	bic.w	r2, r3, #1
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	011b      	lsls	r3, r3, #4
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f023 030a 	bic.w	r3, r3, #10
 8006d44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	621a      	str	r2, [r3, #32]
}
 8006d5a:	bf00      	nop
 8006d5c:	371c      	adds	r7, #28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b087      	sub	sp, #28
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	60f8      	str	r0, [r7, #12]
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	607a      	str	r2, [r7, #4]
 8006d72:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	f023 0210 	bic.w	r2, r3, #16
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	021b      	lsls	r3, r3, #8
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006da4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	031b      	lsls	r3, r3, #12
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	697a      	ldr	r2, [r7, #20]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006db8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	011b      	lsls	r3, r3, #4
 8006dbe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	621a      	str	r2, [r3, #32]
}
 8006dd4:	bf00      	nop
 8006dd6:	371c      	adds	r7, #28
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b087      	sub	sp, #28
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	f023 0210 	bic.w	r2, r3, #16
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	031b      	lsls	r3, r3, #12
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	011b      	lsls	r3, r3, #4
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	621a      	str	r2, [r3, #32]
}
 8006e34:	bf00      	nop
 8006e36:	371c      	adds	r7, #28
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b087      	sub	sp, #28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
 8006e4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	69db      	ldr	r3, [r3, #28]
 8006e5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a1b      	ldr	r3, [r3, #32]
 8006e64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f023 0303 	bic.w	r3, r3, #3
 8006e6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	011b      	lsls	r3, r3, #4
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006e90:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	021b      	lsls	r3, r3, #8
 8006e96:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	621a      	str	r2, [r3, #32]
}
 8006eac:	bf00      	nop
 8006eae:	371c      	adds	r7, #28
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b087      	sub	sp, #28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
 8006ec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6a1b      	ldr	r3, [r3, #32]
 8006edc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ee4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	021b      	lsls	r3, r3, #8
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ef6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	031b      	lsls	r3, r3, #12
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006f0a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	031b      	lsls	r3, r3, #12
 8006f10:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	697a      	ldr	r2, [r7, #20]
 8006f1e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	693a      	ldr	r2, [r7, #16]
 8006f24:	621a      	str	r2, [r3, #32]
}
 8006f26:	bf00      	nop
 8006f28:	371c      	adds	r7, #28
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b085      	sub	sp, #20
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	f043 0307 	orr.w	r3, r3, #7
 8006f54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	609a      	str	r2, [r3, #8]
}
 8006f5c:	bf00      	nop
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b087      	sub	sp, #28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
 8006f74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	021a      	lsls	r2, r3, #8
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	609a      	str	r2, [r3, #8]
}
 8006f9c:	bf00      	nop
 8006f9e:	371c      	adds	r7, #28
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f003 031f 	and.w	r3, r3, #31
 8006fba:	2201      	movs	r2, #1
 8006fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6a1a      	ldr	r2, [r3, #32]
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	43db      	mvns	r3, r3
 8006fca:	401a      	ands	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6a1a      	ldr	r2, [r3, #32]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	f003 031f 	and.w	r3, r3, #31
 8006fda:	6879      	ldr	r1, [r7, #4]
 8006fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe0:	431a      	orrs	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	621a      	str	r2, [r3, #32]
}
 8006fe6:	bf00      	nop
 8006fe8:	371c      	adds	r7, #28
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
	...

08006ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007004:	2b01      	cmp	r3, #1
 8007006:	d101      	bne.n	800700c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007008:	2302      	movs	r3, #2
 800700a:	e05a      	b.n	80070c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2202      	movs	r2, #2
 8007018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007032:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	4313      	orrs	r3, r2
 800703c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a21      	ldr	r2, [pc, #132]	; (80070d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d022      	beq.n	8007096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007058:	d01d      	beq.n	8007096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a1d      	ldr	r2, [pc, #116]	; (80070d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d018      	beq.n	8007096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a1b      	ldr	r2, [pc, #108]	; (80070d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d013      	beq.n	8007096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a1a      	ldr	r2, [pc, #104]	; (80070dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d00e      	beq.n	8007096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a18      	ldr	r2, [pc, #96]	; (80070e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d009      	beq.n	8007096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a17      	ldr	r2, [pc, #92]	; (80070e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d004      	beq.n	8007096 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a15      	ldr	r2, [pc, #84]	; (80070e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d10c      	bne.n	80070b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800709c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3714      	adds	r7, #20
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	40010000 	.word	0x40010000
 80070d4:	40000400 	.word	0x40000400
 80070d8:	40000800 	.word	0x40000800
 80070dc:	40000c00 	.word	0x40000c00
 80070e0:	40010400 	.word	0x40010400
 80070e4:	40014000 	.word	0x40014000
 80070e8:	40001800 	.word	0x40001800

080070ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070f6:	2300      	movs	r3, #0
 80070f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007100:	2b01      	cmp	r3, #1
 8007102:	d101      	bne.n	8007108 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007104:	2302      	movs	r3, #2
 8007106:	e03d      	b.n	8007184 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	4313      	orrs	r3, r2
 800711c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	4313      	orrs	r3, r2
 800712a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	4313      	orrs	r3, r2
 8007138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4313      	orrs	r3, r2
 8007146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	4313      	orrs	r3, r2
 8007154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	695b      	ldr	r3, [r3, #20]
 8007160:	4313      	orrs	r3, r2
 8007162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	4313      	orrs	r3, r2
 8007170:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e03f      	b.n	8007222 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d106      	bne.n	80071bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7fb fbd4 	bl	8002964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2224      	movs	r2, #36	; 0x24
 80071c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68da      	ldr	r2, [r3, #12]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f829 	bl	800722c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	691a      	ldr	r2, [r3, #16]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	695a      	ldr	r2, [r3, #20]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68da      	ldr	r2, [r3, #12]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007208:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2220      	movs	r2, #32
 8007214:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2220      	movs	r2, #32
 800721c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800722c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007230:	b0bd      	sub	sp, #244	; 0xf4
 8007232:	af00      	add	r7, sp, #0
 8007234:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007248:	68d9      	ldr	r1, [r3, #12]
 800724a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	ea40 0301 	orr.w	r3, r0, r1
 8007254:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800725a:	689a      	ldr	r2, [r3, #8]
 800725c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	431a      	orrs	r2, r3
 8007264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	431a      	orrs	r2, r3
 800726c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007270:	69db      	ldr	r3, [r3, #28]
 8007272:	4313      	orrs	r3, r2
 8007274:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8007278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007284:	f021 010c 	bic.w	r1, r1, #12
 8007288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007292:	430b      	orrs	r3, r1
 8007294:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80072a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a6:	6999      	ldr	r1, [r3, #24]
 80072a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	ea40 0301 	orr.w	r3, r0, r1
 80072b2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072be:	f040 81a5 	bne.w	800760c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	4bcd      	ldr	r3, [pc, #820]	; (8007600 <UART_SetConfig+0x3d4>)
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d006      	beq.n	80072dc <UART_SetConfig+0xb0>
 80072ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	4bcb      	ldr	r3, [pc, #812]	; (8007604 <UART_SetConfig+0x3d8>)
 80072d6:	429a      	cmp	r2, r3
 80072d8:	f040 80cb 	bne.w	8007472 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072dc:	f7fe fb22 	bl	8005924 <HAL_RCC_GetPCLK2Freq>
 80072e0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80072e8:	461c      	mov	r4, r3
 80072ea:	f04f 0500 	mov.w	r5, #0
 80072ee:	4622      	mov	r2, r4
 80072f0:	462b      	mov	r3, r5
 80072f2:	1891      	adds	r1, r2, r2
 80072f4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80072f8:	415b      	adcs	r3, r3
 80072fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80072fe:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007302:	1912      	adds	r2, r2, r4
 8007304:	eb45 0303 	adc.w	r3, r5, r3
 8007308:	f04f 0000 	mov.w	r0, #0
 800730c:	f04f 0100 	mov.w	r1, #0
 8007310:	00d9      	lsls	r1, r3, #3
 8007312:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007316:	00d0      	lsls	r0, r2, #3
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	1911      	adds	r1, r2, r4
 800731e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8007322:	416b      	adcs	r3, r5
 8007324:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	461a      	mov	r2, r3
 8007330:	f04f 0300 	mov.w	r3, #0
 8007334:	1891      	adds	r1, r2, r2
 8007336:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800733a:	415b      	adcs	r3, r3
 800733c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007340:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007344:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007348:	f7f9 fc56 	bl	8000bf8 <__aeabi_uldivmod>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4bad      	ldr	r3, [pc, #692]	; (8007608 <UART_SetConfig+0x3dc>)
 8007352:	fba3 2302 	umull	r2, r3, r3, r2
 8007356:	095b      	lsrs	r3, r3, #5
 8007358:	011e      	lsls	r6, r3, #4
 800735a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800735e:	461c      	mov	r4, r3
 8007360:	f04f 0500 	mov.w	r5, #0
 8007364:	4622      	mov	r2, r4
 8007366:	462b      	mov	r3, r5
 8007368:	1891      	adds	r1, r2, r2
 800736a:	67b9      	str	r1, [r7, #120]	; 0x78
 800736c:	415b      	adcs	r3, r3
 800736e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007370:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007374:	1912      	adds	r2, r2, r4
 8007376:	eb45 0303 	adc.w	r3, r5, r3
 800737a:	f04f 0000 	mov.w	r0, #0
 800737e:	f04f 0100 	mov.w	r1, #0
 8007382:	00d9      	lsls	r1, r3, #3
 8007384:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007388:	00d0      	lsls	r0, r2, #3
 800738a:	4602      	mov	r2, r0
 800738c:	460b      	mov	r3, r1
 800738e:	1911      	adds	r1, r2, r4
 8007390:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8007394:	416b      	adcs	r3, r5
 8007396:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800739a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	461a      	mov	r2, r3
 80073a2:	f04f 0300 	mov.w	r3, #0
 80073a6:	1891      	adds	r1, r2, r2
 80073a8:	6739      	str	r1, [r7, #112]	; 0x70
 80073aa:	415b      	adcs	r3, r3
 80073ac:	677b      	str	r3, [r7, #116]	; 0x74
 80073ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80073b2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80073b6:	f7f9 fc1f 	bl	8000bf8 <__aeabi_uldivmod>
 80073ba:	4602      	mov	r2, r0
 80073bc:	460b      	mov	r3, r1
 80073be:	4b92      	ldr	r3, [pc, #584]	; (8007608 <UART_SetConfig+0x3dc>)
 80073c0:	fba3 1302 	umull	r1, r3, r3, r2
 80073c4:	095b      	lsrs	r3, r3, #5
 80073c6:	2164      	movs	r1, #100	; 0x64
 80073c8:	fb01 f303 	mul.w	r3, r1, r3
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	00db      	lsls	r3, r3, #3
 80073d0:	3332      	adds	r3, #50	; 0x32
 80073d2:	4a8d      	ldr	r2, [pc, #564]	; (8007608 <UART_SetConfig+0x3dc>)
 80073d4:	fba2 2303 	umull	r2, r3, r2, r3
 80073d8:	095b      	lsrs	r3, r3, #5
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80073e0:	441e      	add	r6, r3
 80073e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80073e6:	4618      	mov	r0, r3
 80073e8:	f04f 0100 	mov.w	r1, #0
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	1894      	adds	r4, r2, r2
 80073f2:	66bc      	str	r4, [r7, #104]	; 0x68
 80073f4:	415b      	adcs	r3, r3
 80073f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073f8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80073fc:	1812      	adds	r2, r2, r0
 80073fe:	eb41 0303 	adc.w	r3, r1, r3
 8007402:	f04f 0400 	mov.w	r4, #0
 8007406:	f04f 0500 	mov.w	r5, #0
 800740a:	00dd      	lsls	r5, r3, #3
 800740c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007410:	00d4      	lsls	r4, r2, #3
 8007412:	4622      	mov	r2, r4
 8007414:	462b      	mov	r3, r5
 8007416:	1814      	adds	r4, r2, r0
 8007418:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800741c:	414b      	adcs	r3, r1
 800741e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	461a      	mov	r2, r3
 800742a:	f04f 0300 	mov.w	r3, #0
 800742e:	1891      	adds	r1, r2, r2
 8007430:	6639      	str	r1, [r7, #96]	; 0x60
 8007432:	415b      	adcs	r3, r3
 8007434:	667b      	str	r3, [r7, #100]	; 0x64
 8007436:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800743a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800743e:	f7f9 fbdb 	bl	8000bf8 <__aeabi_uldivmod>
 8007442:	4602      	mov	r2, r0
 8007444:	460b      	mov	r3, r1
 8007446:	4b70      	ldr	r3, [pc, #448]	; (8007608 <UART_SetConfig+0x3dc>)
 8007448:	fba3 1302 	umull	r1, r3, r3, r2
 800744c:	095b      	lsrs	r3, r3, #5
 800744e:	2164      	movs	r1, #100	; 0x64
 8007450:	fb01 f303 	mul.w	r3, r1, r3
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	00db      	lsls	r3, r3, #3
 8007458:	3332      	adds	r3, #50	; 0x32
 800745a:	4a6b      	ldr	r2, [pc, #428]	; (8007608 <UART_SetConfig+0x3dc>)
 800745c:	fba2 2303 	umull	r2, r3, r2, r3
 8007460:	095b      	lsrs	r3, r3, #5
 8007462:	f003 0207 	and.w	r2, r3, #7
 8007466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4432      	add	r2, r6
 800746e:	609a      	str	r2, [r3, #8]
 8007470:	e26d      	b.n	800794e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007472:	f7fe fa43 	bl	80058fc <HAL_RCC_GetPCLK1Freq>
 8007476:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800747a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800747e:	461c      	mov	r4, r3
 8007480:	f04f 0500 	mov.w	r5, #0
 8007484:	4622      	mov	r2, r4
 8007486:	462b      	mov	r3, r5
 8007488:	1891      	adds	r1, r2, r2
 800748a:	65b9      	str	r1, [r7, #88]	; 0x58
 800748c:	415b      	adcs	r3, r3
 800748e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007490:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007494:	1912      	adds	r2, r2, r4
 8007496:	eb45 0303 	adc.w	r3, r5, r3
 800749a:	f04f 0000 	mov.w	r0, #0
 800749e:	f04f 0100 	mov.w	r1, #0
 80074a2:	00d9      	lsls	r1, r3, #3
 80074a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80074a8:	00d0      	lsls	r0, r2, #3
 80074aa:	4602      	mov	r2, r0
 80074ac:	460b      	mov	r3, r1
 80074ae:	1911      	adds	r1, r2, r4
 80074b0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80074b4:	416b      	adcs	r3, r5
 80074b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	461a      	mov	r2, r3
 80074c2:	f04f 0300 	mov.w	r3, #0
 80074c6:	1891      	adds	r1, r2, r2
 80074c8:	6539      	str	r1, [r7, #80]	; 0x50
 80074ca:	415b      	adcs	r3, r3
 80074cc:	657b      	str	r3, [r7, #84]	; 0x54
 80074ce:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80074d2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80074d6:	f7f9 fb8f 	bl	8000bf8 <__aeabi_uldivmod>
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	4b4a      	ldr	r3, [pc, #296]	; (8007608 <UART_SetConfig+0x3dc>)
 80074e0:	fba3 2302 	umull	r2, r3, r3, r2
 80074e4:	095b      	lsrs	r3, r3, #5
 80074e6:	011e      	lsls	r6, r3, #4
 80074e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80074ec:	461c      	mov	r4, r3
 80074ee:	f04f 0500 	mov.w	r5, #0
 80074f2:	4622      	mov	r2, r4
 80074f4:	462b      	mov	r3, r5
 80074f6:	1891      	adds	r1, r2, r2
 80074f8:	64b9      	str	r1, [r7, #72]	; 0x48
 80074fa:	415b      	adcs	r3, r3
 80074fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007502:	1912      	adds	r2, r2, r4
 8007504:	eb45 0303 	adc.w	r3, r5, r3
 8007508:	f04f 0000 	mov.w	r0, #0
 800750c:	f04f 0100 	mov.w	r1, #0
 8007510:	00d9      	lsls	r1, r3, #3
 8007512:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007516:	00d0      	lsls	r0, r2, #3
 8007518:	4602      	mov	r2, r0
 800751a:	460b      	mov	r3, r1
 800751c:	1911      	adds	r1, r2, r4
 800751e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8007522:	416b      	adcs	r3, r5
 8007524:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	461a      	mov	r2, r3
 8007530:	f04f 0300 	mov.w	r3, #0
 8007534:	1891      	adds	r1, r2, r2
 8007536:	6439      	str	r1, [r7, #64]	; 0x40
 8007538:	415b      	adcs	r3, r3
 800753a:	647b      	str	r3, [r7, #68]	; 0x44
 800753c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007540:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007544:	f7f9 fb58 	bl	8000bf8 <__aeabi_uldivmod>
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	4b2e      	ldr	r3, [pc, #184]	; (8007608 <UART_SetConfig+0x3dc>)
 800754e:	fba3 1302 	umull	r1, r3, r3, r2
 8007552:	095b      	lsrs	r3, r3, #5
 8007554:	2164      	movs	r1, #100	; 0x64
 8007556:	fb01 f303 	mul.w	r3, r1, r3
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	00db      	lsls	r3, r3, #3
 800755e:	3332      	adds	r3, #50	; 0x32
 8007560:	4a29      	ldr	r2, [pc, #164]	; (8007608 <UART_SetConfig+0x3dc>)
 8007562:	fba2 2303 	umull	r2, r3, r2, r3
 8007566:	095b      	lsrs	r3, r3, #5
 8007568:	005b      	lsls	r3, r3, #1
 800756a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800756e:	441e      	add	r6, r3
 8007570:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007574:	4618      	mov	r0, r3
 8007576:	f04f 0100 	mov.w	r1, #0
 800757a:	4602      	mov	r2, r0
 800757c:	460b      	mov	r3, r1
 800757e:	1894      	adds	r4, r2, r2
 8007580:	63bc      	str	r4, [r7, #56]	; 0x38
 8007582:	415b      	adcs	r3, r3
 8007584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007586:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800758a:	1812      	adds	r2, r2, r0
 800758c:	eb41 0303 	adc.w	r3, r1, r3
 8007590:	f04f 0400 	mov.w	r4, #0
 8007594:	f04f 0500 	mov.w	r5, #0
 8007598:	00dd      	lsls	r5, r3, #3
 800759a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800759e:	00d4      	lsls	r4, r2, #3
 80075a0:	4622      	mov	r2, r4
 80075a2:	462b      	mov	r3, r5
 80075a4:	1814      	adds	r4, r2, r0
 80075a6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80075aa:	414b      	adcs	r3, r1
 80075ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	461a      	mov	r2, r3
 80075b8:	f04f 0300 	mov.w	r3, #0
 80075bc:	1891      	adds	r1, r2, r2
 80075be:	6339      	str	r1, [r7, #48]	; 0x30
 80075c0:	415b      	adcs	r3, r3
 80075c2:	637b      	str	r3, [r7, #52]	; 0x34
 80075c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80075c8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80075cc:	f7f9 fb14 	bl	8000bf8 <__aeabi_uldivmod>
 80075d0:	4602      	mov	r2, r0
 80075d2:	460b      	mov	r3, r1
 80075d4:	4b0c      	ldr	r3, [pc, #48]	; (8007608 <UART_SetConfig+0x3dc>)
 80075d6:	fba3 1302 	umull	r1, r3, r3, r2
 80075da:	095b      	lsrs	r3, r3, #5
 80075dc:	2164      	movs	r1, #100	; 0x64
 80075de:	fb01 f303 	mul.w	r3, r1, r3
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	00db      	lsls	r3, r3, #3
 80075e6:	3332      	adds	r3, #50	; 0x32
 80075e8:	4a07      	ldr	r2, [pc, #28]	; (8007608 <UART_SetConfig+0x3dc>)
 80075ea:	fba2 2303 	umull	r2, r3, r2, r3
 80075ee:	095b      	lsrs	r3, r3, #5
 80075f0:	f003 0207 	and.w	r2, r3, #7
 80075f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4432      	add	r2, r6
 80075fc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80075fe:	e1a6      	b.n	800794e <UART_SetConfig+0x722>
 8007600:	40011000 	.word	0x40011000
 8007604:	40011400 	.word	0x40011400
 8007608:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800760c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	4bd1      	ldr	r3, [pc, #836]	; (8007958 <UART_SetConfig+0x72c>)
 8007614:	429a      	cmp	r2, r3
 8007616:	d006      	beq.n	8007626 <UART_SetConfig+0x3fa>
 8007618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	4bcf      	ldr	r3, [pc, #828]	; (800795c <UART_SetConfig+0x730>)
 8007620:	429a      	cmp	r2, r3
 8007622:	f040 80ca 	bne.w	80077ba <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007626:	f7fe f97d 	bl	8005924 <HAL_RCC_GetPCLK2Freq>
 800762a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800762e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007632:	461c      	mov	r4, r3
 8007634:	f04f 0500 	mov.w	r5, #0
 8007638:	4622      	mov	r2, r4
 800763a:	462b      	mov	r3, r5
 800763c:	1891      	adds	r1, r2, r2
 800763e:	62b9      	str	r1, [r7, #40]	; 0x28
 8007640:	415b      	adcs	r3, r3
 8007642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007644:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007648:	1912      	adds	r2, r2, r4
 800764a:	eb45 0303 	adc.w	r3, r5, r3
 800764e:	f04f 0000 	mov.w	r0, #0
 8007652:	f04f 0100 	mov.w	r1, #0
 8007656:	00d9      	lsls	r1, r3, #3
 8007658:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800765c:	00d0      	lsls	r0, r2, #3
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	eb12 0a04 	adds.w	sl, r2, r4
 8007666:	eb43 0b05 	adc.w	fp, r3, r5
 800766a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	4618      	mov	r0, r3
 8007672:	f04f 0100 	mov.w	r1, #0
 8007676:	f04f 0200 	mov.w	r2, #0
 800767a:	f04f 0300 	mov.w	r3, #0
 800767e:	008b      	lsls	r3, r1, #2
 8007680:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007684:	0082      	lsls	r2, r0, #2
 8007686:	4650      	mov	r0, sl
 8007688:	4659      	mov	r1, fp
 800768a:	f7f9 fab5 	bl	8000bf8 <__aeabi_uldivmod>
 800768e:	4602      	mov	r2, r0
 8007690:	460b      	mov	r3, r1
 8007692:	4bb3      	ldr	r3, [pc, #716]	; (8007960 <UART_SetConfig+0x734>)
 8007694:	fba3 2302 	umull	r2, r3, r3, r2
 8007698:	095b      	lsrs	r3, r3, #5
 800769a:	011e      	lsls	r6, r3, #4
 800769c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076a0:	4618      	mov	r0, r3
 80076a2:	f04f 0100 	mov.w	r1, #0
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	1894      	adds	r4, r2, r2
 80076ac:	623c      	str	r4, [r7, #32]
 80076ae:	415b      	adcs	r3, r3
 80076b0:	627b      	str	r3, [r7, #36]	; 0x24
 80076b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076b6:	1812      	adds	r2, r2, r0
 80076b8:	eb41 0303 	adc.w	r3, r1, r3
 80076bc:	f04f 0400 	mov.w	r4, #0
 80076c0:	f04f 0500 	mov.w	r5, #0
 80076c4:	00dd      	lsls	r5, r3, #3
 80076c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80076ca:	00d4      	lsls	r4, r2, #3
 80076cc:	4622      	mov	r2, r4
 80076ce:	462b      	mov	r3, r5
 80076d0:	1814      	adds	r4, r2, r0
 80076d2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80076d6:	414b      	adcs	r3, r1
 80076d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80076dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f04f 0100 	mov.w	r1, #0
 80076e8:	f04f 0200 	mov.w	r2, #0
 80076ec:	f04f 0300 	mov.w	r3, #0
 80076f0:	008b      	lsls	r3, r1, #2
 80076f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80076f6:	0082      	lsls	r2, r0, #2
 80076f8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80076fc:	f7f9 fa7c 	bl	8000bf8 <__aeabi_uldivmod>
 8007700:	4602      	mov	r2, r0
 8007702:	460b      	mov	r3, r1
 8007704:	4b96      	ldr	r3, [pc, #600]	; (8007960 <UART_SetConfig+0x734>)
 8007706:	fba3 1302 	umull	r1, r3, r3, r2
 800770a:	095b      	lsrs	r3, r3, #5
 800770c:	2164      	movs	r1, #100	; 0x64
 800770e:	fb01 f303 	mul.w	r3, r1, r3
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	011b      	lsls	r3, r3, #4
 8007716:	3332      	adds	r3, #50	; 0x32
 8007718:	4a91      	ldr	r2, [pc, #580]	; (8007960 <UART_SetConfig+0x734>)
 800771a:	fba2 2303 	umull	r2, r3, r2, r3
 800771e:	095b      	lsrs	r3, r3, #5
 8007720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007724:	441e      	add	r6, r3
 8007726:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800772a:	4618      	mov	r0, r3
 800772c:	f04f 0100 	mov.w	r1, #0
 8007730:	4602      	mov	r2, r0
 8007732:	460b      	mov	r3, r1
 8007734:	1894      	adds	r4, r2, r2
 8007736:	61bc      	str	r4, [r7, #24]
 8007738:	415b      	adcs	r3, r3
 800773a:	61fb      	str	r3, [r7, #28]
 800773c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007740:	1812      	adds	r2, r2, r0
 8007742:	eb41 0303 	adc.w	r3, r1, r3
 8007746:	f04f 0400 	mov.w	r4, #0
 800774a:	f04f 0500 	mov.w	r5, #0
 800774e:	00dd      	lsls	r5, r3, #3
 8007750:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007754:	00d4      	lsls	r4, r2, #3
 8007756:	4622      	mov	r2, r4
 8007758:	462b      	mov	r3, r5
 800775a:	1814      	adds	r4, r2, r0
 800775c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8007760:	414b      	adcs	r3, r1
 8007762:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	4618      	mov	r0, r3
 800776e:	f04f 0100 	mov.w	r1, #0
 8007772:	f04f 0200 	mov.w	r2, #0
 8007776:	f04f 0300 	mov.w	r3, #0
 800777a:	008b      	lsls	r3, r1, #2
 800777c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007780:	0082      	lsls	r2, r0, #2
 8007782:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8007786:	f7f9 fa37 	bl	8000bf8 <__aeabi_uldivmod>
 800778a:	4602      	mov	r2, r0
 800778c:	460b      	mov	r3, r1
 800778e:	4b74      	ldr	r3, [pc, #464]	; (8007960 <UART_SetConfig+0x734>)
 8007790:	fba3 1302 	umull	r1, r3, r3, r2
 8007794:	095b      	lsrs	r3, r3, #5
 8007796:	2164      	movs	r1, #100	; 0x64
 8007798:	fb01 f303 	mul.w	r3, r1, r3
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	011b      	lsls	r3, r3, #4
 80077a0:	3332      	adds	r3, #50	; 0x32
 80077a2:	4a6f      	ldr	r2, [pc, #444]	; (8007960 <UART_SetConfig+0x734>)
 80077a4:	fba2 2303 	umull	r2, r3, r2, r3
 80077a8:	095b      	lsrs	r3, r3, #5
 80077aa:	f003 020f 	and.w	r2, r3, #15
 80077ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4432      	add	r2, r6
 80077b6:	609a      	str	r2, [r3, #8]
 80077b8:	e0c9      	b.n	800794e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80077ba:	f7fe f89f 	bl	80058fc <HAL_RCC_GetPCLK1Freq>
 80077be:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80077c6:	461c      	mov	r4, r3
 80077c8:	f04f 0500 	mov.w	r5, #0
 80077cc:	4622      	mov	r2, r4
 80077ce:	462b      	mov	r3, r5
 80077d0:	1891      	adds	r1, r2, r2
 80077d2:	6139      	str	r1, [r7, #16]
 80077d4:	415b      	adcs	r3, r3
 80077d6:	617b      	str	r3, [r7, #20]
 80077d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80077dc:	1912      	adds	r2, r2, r4
 80077de:	eb45 0303 	adc.w	r3, r5, r3
 80077e2:	f04f 0000 	mov.w	r0, #0
 80077e6:	f04f 0100 	mov.w	r1, #0
 80077ea:	00d9      	lsls	r1, r3, #3
 80077ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80077f0:	00d0      	lsls	r0, r2, #3
 80077f2:	4602      	mov	r2, r0
 80077f4:	460b      	mov	r3, r1
 80077f6:	eb12 0804 	adds.w	r8, r2, r4
 80077fa:	eb43 0905 	adc.w	r9, r3, r5
 80077fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	4618      	mov	r0, r3
 8007806:	f04f 0100 	mov.w	r1, #0
 800780a:	f04f 0200 	mov.w	r2, #0
 800780e:	f04f 0300 	mov.w	r3, #0
 8007812:	008b      	lsls	r3, r1, #2
 8007814:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007818:	0082      	lsls	r2, r0, #2
 800781a:	4640      	mov	r0, r8
 800781c:	4649      	mov	r1, r9
 800781e:	f7f9 f9eb 	bl	8000bf8 <__aeabi_uldivmod>
 8007822:	4602      	mov	r2, r0
 8007824:	460b      	mov	r3, r1
 8007826:	4b4e      	ldr	r3, [pc, #312]	; (8007960 <UART_SetConfig+0x734>)
 8007828:	fba3 2302 	umull	r2, r3, r3, r2
 800782c:	095b      	lsrs	r3, r3, #5
 800782e:	011e      	lsls	r6, r3, #4
 8007830:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007834:	4618      	mov	r0, r3
 8007836:	f04f 0100 	mov.w	r1, #0
 800783a:	4602      	mov	r2, r0
 800783c:	460b      	mov	r3, r1
 800783e:	1894      	adds	r4, r2, r2
 8007840:	60bc      	str	r4, [r7, #8]
 8007842:	415b      	adcs	r3, r3
 8007844:	60fb      	str	r3, [r7, #12]
 8007846:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800784a:	1812      	adds	r2, r2, r0
 800784c:	eb41 0303 	adc.w	r3, r1, r3
 8007850:	f04f 0400 	mov.w	r4, #0
 8007854:	f04f 0500 	mov.w	r5, #0
 8007858:	00dd      	lsls	r5, r3, #3
 800785a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800785e:	00d4      	lsls	r4, r2, #3
 8007860:	4622      	mov	r2, r4
 8007862:	462b      	mov	r3, r5
 8007864:	1814      	adds	r4, r2, r0
 8007866:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800786a:	414b      	adcs	r3, r1
 800786c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	4618      	mov	r0, r3
 8007878:	f04f 0100 	mov.w	r1, #0
 800787c:	f04f 0200 	mov.w	r2, #0
 8007880:	f04f 0300 	mov.w	r3, #0
 8007884:	008b      	lsls	r3, r1, #2
 8007886:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800788a:	0082      	lsls	r2, r0, #2
 800788c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007890:	f7f9 f9b2 	bl	8000bf8 <__aeabi_uldivmod>
 8007894:	4602      	mov	r2, r0
 8007896:	460b      	mov	r3, r1
 8007898:	4b31      	ldr	r3, [pc, #196]	; (8007960 <UART_SetConfig+0x734>)
 800789a:	fba3 1302 	umull	r1, r3, r3, r2
 800789e:	095b      	lsrs	r3, r3, #5
 80078a0:	2164      	movs	r1, #100	; 0x64
 80078a2:	fb01 f303 	mul.w	r3, r1, r3
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	011b      	lsls	r3, r3, #4
 80078aa:	3332      	adds	r3, #50	; 0x32
 80078ac:	4a2c      	ldr	r2, [pc, #176]	; (8007960 <UART_SetConfig+0x734>)
 80078ae:	fba2 2303 	umull	r2, r3, r2, r3
 80078b2:	095b      	lsrs	r3, r3, #5
 80078b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078b8:	441e      	add	r6, r3
 80078ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078be:	4618      	mov	r0, r3
 80078c0:	f04f 0100 	mov.w	r1, #0
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	1894      	adds	r4, r2, r2
 80078ca:	603c      	str	r4, [r7, #0]
 80078cc:	415b      	adcs	r3, r3
 80078ce:	607b      	str	r3, [r7, #4]
 80078d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078d4:	1812      	adds	r2, r2, r0
 80078d6:	eb41 0303 	adc.w	r3, r1, r3
 80078da:	f04f 0400 	mov.w	r4, #0
 80078de:	f04f 0500 	mov.w	r5, #0
 80078e2:	00dd      	lsls	r5, r3, #3
 80078e4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80078e8:	00d4      	lsls	r4, r2, #3
 80078ea:	4622      	mov	r2, r4
 80078ec:	462b      	mov	r3, r5
 80078ee:	1814      	adds	r4, r2, r0
 80078f0:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80078f4:	414b      	adcs	r3, r1
 80078f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80078fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	4618      	mov	r0, r3
 8007902:	f04f 0100 	mov.w	r1, #0
 8007906:	f04f 0200 	mov.w	r2, #0
 800790a:	f04f 0300 	mov.w	r3, #0
 800790e:	008b      	lsls	r3, r1, #2
 8007910:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007914:	0082      	lsls	r2, r0, #2
 8007916:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800791a:	f7f9 f96d 	bl	8000bf8 <__aeabi_uldivmod>
 800791e:	4602      	mov	r2, r0
 8007920:	460b      	mov	r3, r1
 8007922:	4b0f      	ldr	r3, [pc, #60]	; (8007960 <UART_SetConfig+0x734>)
 8007924:	fba3 1302 	umull	r1, r3, r3, r2
 8007928:	095b      	lsrs	r3, r3, #5
 800792a:	2164      	movs	r1, #100	; 0x64
 800792c:	fb01 f303 	mul.w	r3, r1, r3
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	011b      	lsls	r3, r3, #4
 8007934:	3332      	adds	r3, #50	; 0x32
 8007936:	4a0a      	ldr	r2, [pc, #40]	; (8007960 <UART_SetConfig+0x734>)
 8007938:	fba2 2303 	umull	r2, r3, r2, r3
 800793c:	095b      	lsrs	r3, r3, #5
 800793e:	f003 020f 	and.w	r2, r3, #15
 8007942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4432      	add	r2, r6
 800794a:	609a      	str	r2, [r3, #8]
}
 800794c:	e7ff      	b.n	800794e <UART_SetConfig+0x722>
 800794e:	bf00      	nop
 8007950:	37f4      	adds	r7, #244	; 0xf4
 8007952:	46bd      	mov	sp, r7
 8007954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007958:	40011000 	.word	0x40011000
 800795c:	40011400 	.word	0x40011400
 8007960:	51eb851f 	.word	0x51eb851f

08007964 <__errno>:
 8007964:	4b01      	ldr	r3, [pc, #4]	; (800796c <__errno+0x8>)
 8007966:	6818      	ldr	r0, [r3, #0]
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	2000014c 	.word	0x2000014c

08007970 <__libc_init_array>:
 8007970:	b570      	push	{r4, r5, r6, lr}
 8007972:	4d0d      	ldr	r5, [pc, #52]	; (80079a8 <__libc_init_array+0x38>)
 8007974:	4c0d      	ldr	r4, [pc, #52]	; (80079ac <__libc_init_array+0x3c>)
 8007976:	1b64      	subs	r4, r4, r5
 8007978:	10a4      	asrs	r4, r4, #2
 800797a:	2600      	movs	r6, #0
 800797c:	42a6      	cmp	r6, r4
 800797e:	d109      	bne.n	8007994 <__libc_init_array+0x24>
 8007980:	4d0b      	ldr	r5, [pc, #44]	; (80079b0 <__libc_init_array+0x40>)
 8007982:	4c0c      	ldr	r4, [pc, #48]	; (80079b4 <__libc_init_array+0x44>)
 8007984:	f002 fa72 	bl	8009e6c <_init>
 8007988:	1b64      	subs	r4, r4, r5
 800798a:	10a4      	asrs	r4, r4, #2
 800798c:	2600      	movs	r6, #0
 800798e:	42a6      	cmp	r6, r4
 8007990:	d105      	bne.n	800799e <__libc_init_array+0x2e>
 8007992:	bd70      	pop	{r4, r5, r6, pc}
 8007994:	f855 3b04 	ldr.w	r3, [r5], #4
 8007998:	4798      	blx	r3
 800799a:	3601      	adds	r6, #1
 800799c:	e7ee      	b.n	800797c <__libc_init_array+0xc>
 800799e:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a2:	4798      	blx	r3
 80079a4:	3601      	adds	r6, #1
 80079a6:	e7f2      	b.n	800798e <__libc_init_array+0x1e>
 80079a8:	0800a140 	.word	0x0800a140
 80079ac:	0800a140 	.word	0x0800a140
 80079b0:	0800a140 	.word	0x0800a140
 80079b4:	0800a144 	.word	0x0800a144

080079b8 <memset>:
 80079b8:	4402      	add	r2, r0
 80079ba:	4603      	mov	r3, r0
 80079bc:	4293      	cmp	r3, r2
 80079be:	d100      	bne.n	80079c2 <memset+0xa>
 80079c0:	4770      	bx	lr
 80079c2:	f803 1b01 	strb.w	r1, [r3], #1
 80079c6:	e7f9      	b.n	80079bc <memset+0x4>

080079c8 <atan>:
 80079c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079cc:	ec55 4b10 	vmov	r4, r5, d0
 80079d0:	4bc3      	ldr	r3, [pc, #780]	; (8007ce0 <atan+0x318>)
 80079d2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80079d6:	429e      	cmp	r6, r3
 80079d8:	46ab      	mov	fp, r5
 80079da:	dd18      	ble.n	8007a0e <atan+0x46>
 80079dc:	4bc1      	ldr	r3, [pc, #772]	; (8007ce4 <atan+0x31c>)
 80079de:	429e      	cmp	r6, r3
 80079e0:	dc01      	bgt.n	80079e6 <atan+0x1e>
 80079e2:	d109      	bne.n	80079f8 <atan+0x30>
 80079e4:	b144      	cbz	r4, 80079f8 <atan+0x30>
 80079e6:	4622      	mov	r2, r4
 80079e8:	462b      	mov	r3, r5
 80079ea:	4620      	mov	r0, r4
 80079ec:	4629      	mov	r1, r5
 80079ee:	f7f8 fc05 	bl	80001fc <__adddf3>
 80079f2:	4604      	mov	r4, r0
 80079f4:	460d      	mov	r5, r1
 80079f6:	e006      	b.n	8007a06 <atan+0x3e>
 80079f8:	f1bb 0f00 	cmp.w	fp, #0
 80079fc:	f300 8131 	bgt.w	8007c62 <atan+0x29a>
 8007a00:	a59b      	add	r5, pc, #620	; (adr r5, 8007c70 <atan+0x2a8>)
 8007a02:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007a06:	ec45 4b10 	vmov	d0, r4, r5
 8007a0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0e:	4bb6      	ldr	r3, [pc, #728]	; (8007ce8 <atan+0x320>)
 8007a10:	429e      	cmp	r6, r3
 8007a12:	dc14      	bgt.n	8007a3e <atan+0x76>
 8007a14:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007a18:	429e      	cmp	r6, r3
 8007a1a:	dc0d      	bgt.n	8007a38 <atan+0x70>
 8007a1c:	a396      	add	r3, pc, #600	; (adr r3, 8007c78 <atan+0x2b0>)
 8007a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a22:	ee10 0a10 	vmov	r0, s0
 8007a26:	4629      	mov	r1, r5
 8007a28:	f7f8 fbe8 	bl	80001fc <__adddf3>
 8007a2c:	4baf      	ldr	r3, [pc, #700]	; (8007cec <atan+0x324>)
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f7f9 f82a 	bl	8000a88 <__aeabi_dcmpgt>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	d1e6      	bne.n	8007a06 <atan+0x3e>
 8007a38:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007a3c:	e02b      	b.n	8007a96 <atan+0xce>
 8007a3e:	f000 f9b3 	bl	8007da8 <fabs>
 8007a42:	4bab      	ldr	r3, [pc, #684]	; (8007cf0 <atan+0x328>)
 8007a44:	429e      	cmp	r6, r3
 8007a46:	ec55 4b10 	vmov	r4, r5, d0
 8007a4a:	f300 80bf 	bgt.w	8007bcc <atan+0x204>
 8007a4e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007a52:	429e      	cmp	r6, r3
 8007a54:	f300 80a0 	bgt.w	8007b98 <atan+0x1d0>
 8007a58:	ee10 2a10 	vmov	r2, s0
 8007a5c:	ee10 0a10 	vmov	r0, s0
 8007a60:	462b      	mov	r3, r5
 8007a62:	4629      	mov	r1, r5
 8007a64:	f7f8 fbca 	bl	80001fc <__adddf3>
 8007a68:	4ba0      	ldr	r3, [pc, #640]	; (8007cec <atan+0x324>)
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f7f8 fbc4 	bl	80001f8 <__aeabi_dsub>
 8007a70:	2200      	movs	r2, #0
 8007a72:	4606      	mov	r6, r0
 8007a74:	460f      	mov	r7, r1
 8007a76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	4629      	mov	r1, r5
 8007a7e:	f7f8 fbbd 	bl	80001fc <__adddf3>
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	4630      	mov	r0, r6
 8007a88:	4639      	mov	r1, r7
 8007a8a:	f7f8 fe97 	bl	80007bc <__aeabi_ddiv>
 8007a8e:	f04f 0a00 	mov.w	sl, #0
 8007a92:	4604      	mov	r4, r0
 8007a94:	460d      	mov	r5, r1
 8007a96:	4622      	mov	r2, r4
 8007a98:	462b      	mov	r3, r5
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	4629      	mov	r1, r5
 8007a9e:	f7f8 fd63 	bl	8000568 <__aeabi_dmul>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	4680      	mov	r8, r0
 8007aa8:	4689      	mov	r9, r1
 8007aaa:	f7f8 fd5d 	bl	8000568 <__aeabi_dmul>
 8007aae:	a374      	add	r3, pc, #464	; (adr r3, 8007c80 <atan+0x2b8>)
 8007ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab4:	4606      	mov	r6, r0
 8007ab6:	460f      	mov	r7, r1
 8007ab8:	f7f8 fd56 	bl	8000568 <__aeabi_dmul>
 8007abc:	a372      	add	r3, pc, #456	; (adr r3, 8007c88 <atan+0x2c0>)
 8007abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac2:	f7f8 fb9b 	bl	80001fc <__adddf3>
 8007ac6:	4632      	mov	r2, r6
 8007ac8:	463b      	mov	r3, r7
 8007aca:	f7f8 fd4d 	bl	8000568 <__aeabi_dmul>
 8007ace:	a370      	add	r3, pc, #448	; (adr r3, 8007c90 <atan+0x2c8>)
 8007ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad4:	f7f8 fb92 	bl	80001fc <__adddf3>
 8007ad8:	4632      	mov	r2, r6
 8007ada:	463b      	mov	r3, r7
 8007adc:	f7f8 fd44 	bl	8000568 <__aeabi_dmul>
 8007ae0:	a36d      	add	r3, pc, #436	; (adr r3, 8007c98 <atan+0x2d0>)
 8007ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae6:	f7f8 fb89 	bl	80001fc <__adddf3>
 8007aea:	4632      	mov	r2, r6
 8007aec:	463b      	mov	r3, r7
 8007aee:	f7f8 fd3b 	bl	8000568 <__aeabi_dmul>
 8007af2:	a36b      	add	r3, pc, #428	; (adr r3, 8007ca0 <atan+0x2d8>)
 8007af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af8:	f7f8 fb80 	bl	80001fc <__adddf3>
 8007afc:	4632      	mov	r2, r6
 8007afe:	463b      	mov	r3, r7
 8007b00:	f7f8 fd32 	bl	8000568 <__aeabi_dmul>
 8007b04:	a368      	add	r3, pc, #416	; (adr r3, 8007ca8 <atan+0x2e0>)
 8007b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0a:	f7f8 fb77 	bl	80001fc <__adddf3>
 8007b0e:	4642      	mov	r2, r8
 8007b10:	464b      	mov	r3, r9
 8007b12:	f7f8 fd29 	bl	8000568 <__aeabi_dmul>
 8007b16:	a366      	add	r3, pc, #408	; (adr r3, 8007cb0 <atan+0x2e8>)
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	4680      	mov	r8, r0
 8007b1e:	4689      	mov	r9, r1
 8007b20:	4630      	mov	r0, r6
 8007b22:	4639      	mov	r1, r7
 8007b24:	f7f8 fd20 	bl	8000568 <__aeabi_dmul>
 8007b28:	a363      	add	r3, pc, #396	; (adr r3, 8007cb8 <atan+0x2f0>)
 8007b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2e:	f7f8 fb63 	bl	80001f8 <__aeabi_dsub>
 8007b32:	4632      	mov	r2, r6
 8007b34:	463b      	mov	r3, r7
 8007b36:	f7f8 fd17 	bl	8000568 <__aeabi_dmul>
 8007b3a:	a361      	add	r3, pc, #388	; (adr r3, 8007cc0 <atan+0x2f8>)
 8007b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b40:	f7f8 fb5a 	bl	80001f8 <__aeabi_dsub>
 8007b44:	4632      	mov	r2, r6
 8007b46:	463b      	mov	r3, r7
 8007b48:	f7f8 fd0e 	bl	8000568 <__aeabi_dmul>
 8007b4c:	a35e      	add	r3, pc, #376	; (adr r3, 8007cc8 <atan+0x300>)
 8007b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b52:	f7f8 fb51 	bl	80001f8 <__aeabi_dsub>
 8007b56:	4632      	mov	r2, r6
 8007b58:	463b      	mov	r3, r7
 8007b5a:	f7f8 fd05 	bl	8000568 <__aeabi_dmul>
 8007b5e:	a35c      	add	r3, pc, #368	; (adr r3, 8007cd0 <atan+0x308>)
 8007b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b64:	f7f8 fb48 	bl	80001f8 <__aeabi_dsub>
 8007b68:	4632      	mov	r2, r6
 8007b6a:	463b      	mov	r3, r7
 8007b6c:	f7f8 fcfc 	bl	8000568 <__aeabi_dmul>
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4640      	mov	r0, r8
 8007b76:	4649      	mov	r1, r9
 8007b78:	f7f8 fb40 	bl	80001fc <__adddf3>
 8007b7c:	4622      	mov	r2, r4
 8007b7e:	462b      	mov	r3, r5
 8007b80:	f7f8 fcf2 	bl	8000568 <__aeabi_dmul>
 8007b84:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8007b88:	4602      	mov	r2, r0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	d14b      	bne.n	8007c26 <atan+0x25e>
 8007b8e:	4620      	mov	r0, r4
 8007b90:	4629      	mov	r1, r5
 8007b92:	f7f8 fb31 	bl	80001f8 <__aeabi_dsub>
 8007b96:	e72c      	b.n	80079f2 <atan+0x2a>
 8007b98:	ee10 0a10 	vmov	r0, s0
 8007b9c:	4b53      	ldr	r3, [pc, #332]	; (8007cec <atan+0x324>)
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	f7f8 fb29 	bl	80001f8 <__aeabi_dsub>
 8007ba6:	4b51      	ldr	r3, [pc, #324]	; (8007cec <atan+0x324>)
 8007ba8:	4606      	mov	r6, r0
 8007baa:	460f      	mov	r7, r1
 8007bac:	2200      	movs	r2, #0
 8007bae:	4620      	mov	r0, r4
 8007bb0:	4629      	mov	r1, r5
 8007bb2:	f7f8 fb23 	bl	80001fc <__adddf3>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4630      	mov	r0, r6
 8007bbc:	4639      	mov	r1, r7
 8007bbe:	f7f8 fdfd 	bl	80007bc <__aeabi_ddiv>
 8007bc2:	f04f 0a01 	mov.w	sl, #1
 8007bc6:	4604      	mov	r4, r0
 8007bc8:	460d      	mov	r5, r1
 8007bca:	e764      	b.n	8007a96 <atan+0xce>
 8007bcc:	4b49      	ldr	r3, [pc, #292]	; (8007cf4 <atan+0x32c>)
 8007bce:	429e      	cmp	r6, r3
 8007bd0:	da1d      	bge.n	8007c0e <atan+0x246>
 8007bd2:	ee10 0a10 	vmov	r0, s0
 8007bd6:	4b48      	ldr	r3, [pc, #288]	; (8007cf8 <atan+0x330>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	4629      	mov	r1, r5
 8007bdc:	f7f8 fb0c 	bl	80001f8 <__aeabi_dsub>
 8007be0:	4b45      	ldr	r3, [pc, #276]	; (8007cf8 <atan+0x330>)
 8007be2:	4606      	mov	r6, r0
 8007be4:	460f      	mov	r7, r1
 8007be6:	2200      	movs	r2, #0
 8007be8:	4620      	mov	r0, r4
 8007bea:	4629      	mov	r1, r5
 8007bec:	f7f8 fcbc 	bl	8000568 <__aeabi_dmul>
 8007bf0:	4b3e      	ldr	r3, [pc, #248]	; (8007cec <atan+0x324>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f7f8 fb02 	bl	80001fc <__adddf3>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	4639      	mov	r1, r7
 8007c00:	f7f8 fddc 	bl	80007bc <__aeabi_ddiv>
 8007c04:	f04f 0a02 	mov.w	sl, #2
 8007c08:	4604      	mov	r4, r0
 8007c0a:	460d      	mov	r5, r1
 8007c0c:	e743      	b.n	8007a96 <atan+0xce>
 8007c0e:	462b      	mov	r3, r5
 8007c10:	ee10 2a10 	vmov	r2, s0
 8007c14:	4939      	ldr	r1, [pc, #228]	; (8007cfc <atan+0x334>)
 8007c16:	2000      	movs	r0, #0
 8007c18:	f7f8 fdd0 	bl	80007bc <__aeabi_ddiv>
 8007c1c:	f04f 0a03 	mov.w	sl, #3
 8007c20:	4604      	mov	r4, r0
 8007c22:	460d      	mov	r5, r1
 8007c24:	e737      	b.n	8007a96 <atan+0xce>
 8007c26:	4b36      	ldr	r3, [pc, #216]	; (8007d00 <atan+0x338>)
 8007c28:	4e36      	ldr	r6, [pc, #216]	; (8007d04 <atan+0x33c>)
 8007c2a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007c2e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8007c32:	e9da 2300 	ldrd	r2, r3, [sl]
 8007c36:	f7f8 fadf 	bl	80001f8 <__aeabi_dsub>
 8007c3a:	4622      	mov	r2, r4
 8007c3c:	462b      	mov	r3, r5
 8007c3e:	f7f8 fadb 	bl	80001f8 <__aeabi_dsub>
 8007c42:	4602      	mov	r2, r0
 8007c44:	460b      	mov	r3, r1
 8007c46:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007c4a:	f7f8 fad5 	bl	80001f8 <__aeabi_dsub>
 8007c4e:	f1bb 0f00 	cmp.w	fp, #0
 8007c52:	4604      	mov	r4, r0
 8007c54:	460d      	mov	r5, r1
 8007c56:	f6bf aed6 	bge.w	8007a06 <atan+0x3e>
 8007c5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c5e:	461d      	mov	r5, r3
 8007c60:	e6d1      	b.n	8007a06 <atan+0x3e>
 8007c62:	a51d      	add	r5, pc, #116	; (adr r5, 8007cd8 <atan+0x310>)
 8007c64:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007c68:	e6cd      	b.n	8007a06 <atan+0x3e>
 8007c6a:	bf00      	nop
 8007c6c:	f3af 8000 	nop.w
 8007c70:	54442d18 	.word	0x54442d18
 8007c74:	bff921fb 	.word	0xbff921fb
 8007c78:	8800759c 	.word	0x8800759c
 8007c7c:	7e37e43c 	.word	0x7e37e43c
 8007c80:	e322da11 	.word	0xe322da11
 8007c84:	3f90ad3a 	.word	0x3f90ad3a
 8007c88:	24760deb 	.word	0x24760deb
 8007c8c:	3fa97b4b 	.word	0x3fa97b4b
 8007c90:	a0d03d51 	.word	0xa0d03d51
 8007c94:	3fb10d66 	.word	0x3fb10d66
 8007c98:	c54c206e 	.word	0xc54c206e
 8007c9c:	3fb745cd 	.word	0x3fb745cd
 8007ca0:	920083ff 	.word	0x920083ff
 8007ca4:	3fc24924 	.word	0x3fc24924
 8007ca8:	5555550d 	.word	0x5555550d
 8007cac:	3fd55555 	.word	0x3fd55555
 8007cb0:	2c6a6c2f 	.word	0x2c6a6c2f
 8007cb4:	bfa2b444 	.word	0xbfa2b444
 8007cb8:	52defd9a 	.word	0x52defd9a
 8007cbc:	3fadde2d 	.word	0x3fadde2d
 8007cc0:	af749a6d 	.word	0xaf749a6d
 8007cc4:	3fb3b0f2 	.word	0x3fb3b0f2
 8007cc8:	fe231671 	.word	0xfe231671
 8007ccc:	3fbc71c6 	.word	0x3fbc71c6
 8007cd0:	9998ebc4 	.word	0x9998ebc4
 8007cd4:	3fc99999 	.word	0x3fc99999
 8007cd8:	54442d18 	.word	0x54442d18
 8007cdc:	3ff921fb 	.word	0x3ff921fb
 8007ce0:	440fffff 	.word	0x440fffff
 8007ce4:	7ff00000 	.word	0x7ff00000
 8007ce8:	3fdbffff 	.word	0x3fdbffff
 8007cec:	3ff00000 	.word	0x3ff00000
 8007cf0:	3ff2ffff 	.word	0x3ff2ffff
 8007cf4:	40038000 	.word	0x40038000
 8007cf8:	3ff80000 	.word	0x3ff80000
 8007cfc:	bff00000 	.word	0xbff00000
 8007d00:	08009ec8 	.word	0x08009ec8
 8007d04:	08009ea8 	.word	0x08009ea8

08007d08 <cos>:
 8007d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d0a:	ec53 2b10 	vmov	r2, r3, d0
 8007d0e:	4824      	ldr	r0, [pc, #144]	; (8007da0 <cos+0x98>)
 8007d10:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007d14:	4281      	cmp	r1, r0
 8007d16:	dc06      	bgt.n	8007d26 <cos+0x1e>
 8007d18:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8007d98 <cos+0x90>
 8007d1c:	f001 fa38 	bl	8009190 <__kernel_cos>
 8007d20:	ec51 0b10 	vmov	r0, r1, d0
 8007d24:	e007      	b.n	8007d36 <cos+0x2e>
 8007d26:	481f      	ldr	r0, [pc, #124]	; (8007da4 <cos+0x9c>)
 8007d28:	4281      	cmp	r1, r0
 8007d2a:	dd09      	ble.n	8007d40 <cos+0x38>
 8007d2c:	ee10 0a10 	vmov	r0, s0
 8007d30:	4619      	mov	r1, r3
 8007d32:	f7f8 fa61 	bl	80001f8 <__aeabi_dsub>
 8007d36:	ec41 0b10 	vmov	d0, r0, r1
 8007d3a:	b005      	add	sp, #20
 8007d3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d40:	4668      	mov	r0, sp
 8007d42:	f000 ff65 	bl	8008c10 <__ieee754_rem_pio2>
 8007d46:	f000 0003 	and.w	r0, r0, #3
 8007d4a:	2801      	cmp	r0, #1
 8007d4c:	d007      	beq.n	8007d5e <cos+0x56>
 8007d4e:	2802      	cmp	r0, #2
 8007d50:	d012      	beq.n	8007d78 <cos+0x70>
 8007d52:	b9c0      	cbnz	r0, 8007d86 <cos+0x7e>
 8007d54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d58:	ed9d 0b00 	vldr	d0, [sp]
 8007d5c:	e7de      	b.n	8007d1c <cos+0x14>
 8007d5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d62:	ed9d 0b00 	vldr	d0, [sp]
 8007d66:	f001 fe1b 	bl	80099a0 <__kernel_sin>
 8007d6a:	ec53 2b10 	vmov	r2, r3, d0
 8007d6e:	ee10 0a10 	vmov	r0, s0
 8007d72:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007d76:	e7de      	b.n	8007d36 <cos+0x2e>
 8007d78:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d7c:	ed9d 0b00 	vldr	d0, [sp]
 8007d80:	f001 fa06 	bl	8009190 <__kernel_cos>
 8007d84:	e7f1      	b.n	8007d6a <cos+0x62>
 8007d86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d8a:	ed9d 0b00 	vldr	d0, [sp]
 8007d8e:	2001      	movs	r0, #1
 8007d90:	f001 fe06 	bl	80099a0 <__kernel_sin>
 8007d94:	e7c4      	b.n	8007d20 <cos+0x18>
 8007d96:	bf00      	nop
	...
 8007da0:	3fe921fb 	.word	0x3fe921fb
 8007da4:	7fefffff 	.word	0x7fefffff

08007da8 <fabs>:
 8007da8:	ec51 0b10 	vmov	r0, r1, d0
 8007dac:	ee10 2a10 	vmov	r2, s0
 8007db0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007db4:	ec43 2b10 	vmov	d0, r2, r3
 8007db8:	4770      	bx	lr
 8007dba:	0000      	movs	r0, r0
 8007dbc:	0000      	movs	r0, r0
	...

08007dc0 <sin>:
 8007dc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007dc2:	ec53 2b10 	vmov	r2, r3, d0
 8007dc6:	4826      	ldr	r0, [pc, #152]	; (8007e60 <sin+0xa0>)
 8007dc8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007dcc:	4281      	cmp	r1, r0
 8007dce:	dc07      	bgt.n	8007de0 <sin+0x20>
 8007dd0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007e58 <sin+0x98>
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	f001 fde3 	bl	80099a0 <__kernel_sin>
 8007dda:	ec51 0b10 	vmov	r0, r1, d0
 8007dde:	e007      	b.n	8007df0 <sin+0x30>
 8007de0:	4820      	ldr	r0, [pc, #128]	; (8007e64 <sin+0xa4>)
 8007de2:	4281      	cmp	r1, r0
 8007de4:	dd09      	ble.n	8007dfa <sin+0x3a>
 8007de6:	ee10 0a10 	vmov	r0, s0
 8007dea:	4619      	mov	r1, r3
 8007dec:	f7f8 fa04 	bl	80001f8 <__aeabi_dsub>
 8007df0:	ec41 0b10 	vmov	d0, r0, r1
 8007df4:	b005      	add	sp, #20
 8007df6:	f85d fb04 	ldr.w	pc, [sp], #4
 8007dfa:	4668      	mov	r0, sp
 8007dfc:	f000 ff08 	bl	8008c10 <__ieee754_rem_pio2>
 8007e00:	f000 0003 	and.w	r0, r0, #3
 8007e04:	2801      	cmp	r0, #1
 8007e06:	d008      	beq.n	8007e1a <sin+0x5a>
 8007e08:	2802      	cmp	r0, #2
 8007e0a:	d00d      	beq.n	8007e28 <sin+0x68>
 8007e0c:	b9d0      	cbnz	r0, 8007e44 <sin+0x84>
 8007e0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e12:	ed9d 0b00 	vldr	d0, [sp]
 8007e16:	2001      	movs	r0, #1
 8007e18:	e7dd      	b.n	8007dd6 <sin+0x16>
 8007e1a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e1e:	ed9d 0b00 	vldr	d0, [sp]
 8007e22:	f001 f9b5 	bl	8009190 <__kernel_cos>
 8007e26:	e7d8      	b.n	8007dda <sin+0x1a>
 8007e28:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e2c:	ed9d 0b00 	vldr	d0, [sp]
 8007e30:	2001      	movs	r0, #1
 8007e32:	f001 fdb5 	bl	80099a0 <__kernel_sin>
 8007e36:	ec53 2b10 	vmov	r2, r3, d0
 8007e3a:	ee10 0a10 	vmov	r0, s0
 8007e3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007e42:	e7d5      	b.n	8007df0 <sin+0x30>
 8007e44:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e48:	ed9d 0b00 	vldr	d0, [sp]
 8007e4c:	f001 f9a0 	bl	8009190 <__kernel_cos>
 8007e50:	e7f1      	b.n	8007e36 <sin+0x76>
 8007e52:	bf00      	nop
 8007e54:	f3af 8000 	nop.w
	...
 8007e60:	3fe921fb 	.word	0x3fe921fb
 8007e64:	7fefffff 	.word	0x7fefffff

08007e68 <atan2>:
 8007e68:	f000 b8e2 	b.w	8008030 <__ieee754_atan2>

08007e6c <pow>:
 8007e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e70:	ec59 8b10 	vmov	r8, r9, d0
 8007e74:	ec57 6b11 	vmov	r6, r7, d1
 8007e78:	f000 f9a6 	bl	80081c8 <__ieee754_pow>
 8007e7c:	4b4e      	ldr	r3, [pc, #312]	; (8007fb8 <pow+0x14c>)
 8007e7e:	f993 3000 	ldrsb.w	r3, [r3]
 8007e82:	3301      	adds	r3, #1
 8007e84:	ec55 4b10 	vmov	r4, r5, d0
 8007e88:	d015      	beq.n	8007eb6 <pow+0x4a>
 8007e8a:	4632      	mov	r2, r6
 8007e8c:	463b      	mov	r3, r7
 8007e8e:	4630      	mov	r0, r6
 8007e90:	4639      	mov	r1, r7
 8007e92:	f7f8 fe03 	bl	8000a9c <__aeabi_dcmpun>
 8007e96:	b970      	cbnz	r0, 8007eb6 <pow+0x4a>
 8007e98:	4642      	mov	r2, r8
 8007e9a:	464b      	mov	r3, r9
 8007e9c:	4640      	mov	r0, r8
 8007e9e:	4649      	mov	r1, r9
 8007ea0:	f7f8 fdfc 	bl	8000a9c <__aeabi_dcmpun>
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	b148      	cbz	r0, 8007ebe <pow+0x52>
 8007eaa:	4630      	mov	r0, r6
 8007eac:	4639      	mov	r1, r7
 8007eae:	f7f8 fdc3 	bl	8000a38 <__aeabi_dcmpeq>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	d17d      	bne.n	8007fb2 <pow+0x146>
 8007eb6:	ec45 4b10 	vmov	d0, r4, r5
 8007eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ebe:	4640      	mov	r0, r8
 8007ec0:	4649      	mov	r1, r9
 8007ec2:	f7f8 fdb9 	bl	8000a38 <__aeabi_dcmpeq>
 8007ec6:	b1e0      	cbz	r0, 8007f02 <pow+0x96>
 8007ec8:	2200      	movs	r2, #0
 8007eca:	2300      	movs	r3, #0
 8007ecc:	4630      	mov	r0, r6
 8007ece:	4639      	mov	r1, r7
 8007ed0:	f7f8 fdb2 	bl	8000a38 <__aeabi_dcmpeq>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	d16c      	bne.n	8007fb2 <pow+0x146>
 8007ed8:	ec47 6b10 	vmov	d0, r6, r7
 8007edc:	f001 fe1e 	bl	8009b1c <finite>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	d0e8      	beq.n	8007eb6 <pow+0x4a>
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	4630      	mov	r0, r6
 8007eea:	4639      	mov	r1, r7
 8007eec:	f7f8 fdae 	bl	8000a4c <__aeabi_dcmplt>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	d0e0      	beq.n	8007eb6 <pow+0x4a>
 8007ef4:	f7ff fd36 	bl	8007964 <__errno>
 8007ef8:	2321      	movs	r3, #33	; 0x21
 8007efa:	6003      	str	r3, [r0, #0]
 8007efc:	2400      	movs	r4, #0
 8007efe:	4d2f      	ldr	r5, [pc, #188]	; (8007fbc <pow+0x150>)
 8007f00:	e7d9      	b.n	8007eb6 <pow+0x4a>
 8007f02:	ec45 4b10 	vmov	d0, r4, r5
 8007f06:	f001 fe09 	bl	8009b1c <finite>
 8007f0a:	bbb8      	cbnz	r0, 8007f7c <pow+0x110>
 8007f0c:	ec49 8b10 	vmov	d0, r8, r9
 8007f10:	f001 fe04 	bl	8009b1c <finite>
 8007f14:	b390      	cbz	r0, 8007f7c <pow+0x110>
 8007f16:	ec47 6b10 	vmov	d0, r6, r7
 8007f1a:	f001 fdff 	bl	8009b1c <finite>
 8007f1e:	b368      	cbz	r0, 8007f7c <pow+0x110>
 8007f20:	4622      	mov	r2, r4
 8007f22:	462b      	mov	r3, r5
 8007f24:	4620      	mov	r0, r4
 8007f26:	4629      	mov	r1, r5
 8007f28:	f7f8 fdb8 	bl	8000a9c <__aeabi_dcmpun>
 8007f2c:	b160      	cbz	r0, 8007f48 <pow+0xdc>
 8007f2e:	f7ff fd19 	bl	8007964 <__errno>
 8007f32:	2321      	movs	r3, #33	; 0x21
 8007f34:	6003      	str	r3, [r0, #0]
 8007f36:	2200      	movs	r2, #0
 8007f38:	2300      	movs	r3, #0
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	f7f8 fc3d 	bl	80007bc <__aeabi_ddiv>
 8007f42:	4604      	mov	r4, r0
 8007f44:	460d      	mov	r5, r1
 8007f46:	e7b6      	b.n	8007eb6 <pow+0x4a>
 8007f48:	f7ff fd0c 	bl	8007964 <__errno>
 8007f4c:	2322      	movs	r3, #34	; 0x22
 8007f4e:	6003      	str	r3, [r0, #0]
 8007f50:	2200      	movs	r2, #0
 8007f52:	2300      	movs	r3, #0
 8007f54:	4640      	mov	r0, r8
 8007f56:	4649      	mov	r1, r9
 8007f58:	f7f8 fd78 	bl	8000a4c <__aeabi_dcmplt>
 8007f5c:	2400      	movs	r4, #0
 8007f5e:	b158      	cbz	r0, 8007f78 <pow+0x10c>
 8007f60:	ec47 6b10 	vmov	d0, r6, r7
 8007f64:	f001 fe70 	bl	8009c48 <rint>
 8007f68:	4632      	mov	r2, r6
 8007f6a:	ec51 0b10 	vmov	r0, r1, d0
 8007f6e:	463b      	mov	r3, r7
 8007f70:	f7f8 fd62 	bl	8000a38 <__aeabi_dcmpeq>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d0c2      	beq.n	8007efe <pow+0x92>
 8007f78:	4d11      	ldr	r5, [pc, #68]	; (8007fc0 <pow+0x154>)
 8007f7a:	e79c      	b.n	8007eb6 <pow+0x4a>
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	2300      	movs	r3, #0
 8007f80:	4620      	mov	r0, r4
 8007f82:	4629      	mov	r1, r5
 8007f84:	f7f8 fd58 	bl	8000a38 <__aeabi_dcmpeq>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d094      	beq.n	8007eb6 <pow+0x4a>
 8007f8c:	ec49 8b10 	vmov	d0, r8, r9
 8007f90:	f001 fdc4 	bl	8009b1c <finite>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d08e      	beq.n	8007eb6 <pow+0x4a>
 8007f98:	ec47 6b10 	vmov	d0, r6, r7
 8007f9c:	f001 fdbe 	bl	8009b1c <finite>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	d088      	beq.n	8007eb6 <pow+0x4a>
 8007fa4:	f7ff fcde 	bl	8007964 <__errno>
 8007fa8:	2322      	movs	r3, #34	; 0x22
 8007faa:	6003      	str	r3, [r0, #0]
 8007fac:	2400      	movs	r4, #0
 8007fae:	2500      	movs	r5, #0
 8007fb0:	e781      	b.n	8007eb6 <pow+0x4a>
 8007fb2:	4d04      	ldr	r5, [pc, #16]	; (8007fc4 <pow+0x158>)
 8007fb4:	2400      	movs	r4, #0
 8007fb6:	e77e      	b.n	8007eb6 <pow+0x4a>
 8007fb8:	200001b0 	.word	0x200001b0
 8007fbc:	fff00000 	.word	0xfff00000
 8007fc0:	7ff00000 	.word	0x7ff00000
 8007fc4:	3ff00000 	.word	0x3ff00000

08007fc8 <sqrt>:
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	ed2d 8b02 	vpush	{d8}
 8007fce:	ec55 4b10 	vmov	r4, r5, d0
 8007fd2:	f001 f827 	bl	8009024 <__ieee754_sqrt>
 8007fd6:	4b15      	ldr	r3, [pc, #84]	; (800802c <sqrt+0x64>)
 8007fd8:	eeb0 8a40 	vmov.f32	s16, s0
 8007fdc:	eef0 8a60 	vmov.f32	s17, s1
 8007fe0:	f993 3000 	ldrsb.w	r3, [r3]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	d019      	beq.n	800801c <sqrt+0x54>
 8007fe8:	4622      	mov	r2, r4
 8007fea:	462b      	mov	r3, r5
 8007fec:	4620      	mov	r0, r4
 8007fee:	4629      	mov	r1, r5
 8007ff0:	f7f8 fd54 	bl	8000a9c <__aeabi_dcmpun>
 8007ff4:	b990      	cbnz	r0, 800801c <sqrt+0x54>
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	4629      	mov	r1, r5
 8007ffe:	f7f8 fd25 	bl	8000a4c <__aeabi_dcmplt>
 8008002:	b158      	cbz	r0, 800801c <sqrt+0x54>
 8008004:	f7ff fcae 	bl	8007964 <__errno>
 8008008:	2321      	movs	r3, #33	; 0x21
 800800a:	6003      	str	r3, [r0, #0]
 800800c:	2200      	movs	r2, #0
 800800e:	2300      	movs	r3, #0
 8008010:	4610      	mov	r0, r2
 8008012:	4619      	mov	r1, r3
 8008014:	f7f8 fbd2 	bl	80007bc <__aeabi_ddiv>
 8008018:	ec41 0b18 	vmov	d8, r0, r1
 800801c:	eeb0 0a48 	vmov.f32	s0, s16
 8008020:	eef0 0a68 	vmov.f32	s1, s17
 8008024:	ecbd 8b02 	vpop	{d8}
 8008028:	bd38      	pop	{r3, r4, r5, pc}
 800802a:	bf00      	nop
 800802c:	200001b0 	.word	0x200001b0

08008030 <__ieee754_atan2>:
 8008030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008034:	ec57 6b11 	vmov	r6, r7, d1
 8008038:	4273      	negs	r3, r6
 800803a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80081c0 <__ieee754_atan2+0x190>
 800803e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008042:	4333      	orrs	r3, r6
 8008044:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008048:	4573      	cmp	r3, lr
 800804a:	ec51 0b10 	vmov	r0, r1, d0
 800804e:	ee11 8a10 	vmov	r8, s2
 8008052:	d80a      	bhi.n	800806a <__ieee754_atan2+0x3a>
 8008054:	4244      	negs	r4, r0
 8008056:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800805a:	4304      	orrs	r4, r0
 800805c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008060:	4574      	cmp	r4, lr
 8008062:	ee10 9a10 	vmov	r9, s0
 8008066:	468c      	mov	ip, r1
 8008068:	d907      	bls.n	800807a <__ieee754_atan2+0x4a>
 800806a:	4632      	mov	r2, r6
 800806c:	463b      	mov	r3, r7
 800806e:	f7f8 f8c5 	bl	80001fc <__adddf3>
 8008072:	ec41 0b10 	vmov	d0, r0, r1
 8008076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800807a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800807e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008082:	4334      	orrs	r4, r6
 8008084:	d103      	bne.n	800808e <__ieee754_atan2+0x5e>
 8008086:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800808a:	f7ff bc9d 	b.w	80079c8 <atan>
 800808e:	17bc      	asrs	r4, r7, #30
 8008090:	f004 0402 	and.w	r4, r4, #2
 8008094:	ea53 0909 	orrs.w	r9, r3, r9
 8008098:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800809c:	d107      	bne.n	80080ae <__ieee754_atan2+0x7e>
 800809e:	2c02      	cmp	r4, #2
 80080a0:	d060      	beq.n	8008164 <__ieee754_atan2+0x134>
 80080a2:	2c03      	cmp	r4, #3
 80080a4:	d1e5      	bne.n	8008072 <__ieee754_atan2+0x42>
 80080a6:	a142      	add	r1, pc, #264	; (adr r1, 80081b0 <__ieee754_atan2+0x180>)
 80080a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080ac:	e7e1      	b.n	8008072 <__ieee754_atan2+0x42>
 80080ae:	ea52 0808 	orrs.w	r8, r2, r8
 80080b2:	d106      	bne.n	80080c2 <__ieee754_atan2+0x92>
 80080b4:	f1bc 0f00 	cmp.w	ip, #0
 80080b8:	da5f      	bge.n	800817a <__ieee754_atan2+0x14a>
 80080ba:	a13f      	add	r1, pc, #252	; (adr r1, 80081b8 <__ieee754_atan2+0x188>)
 80080bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080c0:	e7d7      	b.n	8008072 <__ieee754_atan2+0x42>
 80080c2:	4572      	cmp	r2, lr
 80080c4:	d10f      	bne.n	80080e6 <__ieee754_atan2+0xb6>
 80080c6:	4293      	cmp	r3, r2
 80080c8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80080cc:	d107      	bne.n	80080de <__ieee754_atan2+0xae>
 80080ce:	2c02      	cmp	r4, #2
 80080d0:	d84c      	bhi.n	800816c <__ieee754_atan2+0x13c>
 80080d2:	4b35      	ldr	r3, [pc, #212]	; (80081a8 <__ieee754_atan2+0x178>)
 80080d4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80080d8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80080dc:	e7c9      	b.n	8008072 <__ieee754_atan2+0x42>
 80080de:	2c02      	cmp	r4, #2
 80080e0:	d848      	bhi.n	8008174 <__ieee754_atan2+0x144>
 80080e2:	4b32      	ldr	r3, [pc, #200]	; (80081ac <__ieee754_atan2+0x17c>)
 80080e4:	e7f6      	b.n	80080d4 <__ieee754_atan2+0xa4>
 80080e6:	4573      	cmp	r3, lr
 80080e8:	d0e4      	beq.n	80080b4 <__ieee754_atan2+0x84>
 80080ea:	1a9b      	subs	r3, r3, r2
 80080ec:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80080f0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80080f4:	da1e      	bge.n	8008134 <__ieee754_atan2+0x104>
 80080f6:	2f00      	cmp	r7, #0
 80080f8:	da01      	bge.n	80080fe <__ieee754_atan2+0xce>
 80080fa:	323c      	adds	r2, #60	; 0x3c
 80080fc:	db1e      	blt.n	800813c <__ieee754_atan2+0x10c>
 80080fe:	4632      	mov	r2, r6
 8008100:	463b      	mov	r3, r7
 8008102:	f7f8 fb5b 	bl	80007bc <__aeabi_ddiv>
 8008106:	ec41 0b10 	vmov	d0, r0, r1
 800810a:	f7ff fe4d 	bl	8007da8 <fabs>
 800810e:	f7ff fc5b 	bl	80079c8 <atan>
 8008112:	ec51 0b10 	vmov	r0, r1, d0
 8008116:	2c01      	cmp	r4, #1
 8008118:	d013      	beq.n	8008142 <__ieee754_atan2+0x112>
 800811a:	2c02      	cmp	r4, #2
 800811c:	d015      	beq.n	800814a <__ieee754_atan2+0x11a>
 800811e:	2c00      	cmp	r4, #0
 8008120:	d0a7      	beq.n	8008072 <__ieee754_atan2+0x42>
 8008122:	a319      	add	r3, pc, #100	; (adr r3, 8008188 <__ieee754_atan2+0x158>)
 8008124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008128:	f7f8 f866 	bl	80001f8 <__aeabi_dsub>
 800812c:	a318      	add	r3, pc, #96	; (adr r3, 8008190 <__ieee754_atan2+0x160>)
 800812e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008132:	e014      	b.n	800815e <__ieee754_atan2+0x12e>
 8008134:	a118      	add	r1, pc, #96	; (adr r1, 8008198 <__ieee754_atan2+0x168>)
 8008136:	e9d1 0100 	ldrd	r0, r1, [r1]
 800813a:	e7ec      	b.n	8008116 <__ieee754_atan2+0xe6>
 800813c:	2000      	movs	r0, #0
 800813e:	2100      	movs	r1, #0
 8008140:	e7e9      	b.n	8008116 <__ieee754_atan2+0xe6>
 8008142:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008146:	4619      	mov	r1, r3
 8008148:	e793      	b.n	8008072 <__ieee754_atan2+0x42>
 800814a:	a30f      	add	r3, pc, #60	; (adr r3, 8008188 <__ieee754_atan2+0x158>)
 800814c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008150:	f7f8 f852 	bl	80001f8 <__aeabi_dsub>
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	a10d      	add	r1, pc, #52	; (adr r1, 8008190 <__ieee754_atan2+0x160>)
 800815a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800815e:	f7f8 f84b 	bl	80001f8 <__aeabi_dsub>
 8008162:	e786      	b.n	8008072 <__ieee754_atan2+0x42>
 8008164:	a10a      	add	r1, pc, #40	; (adr r1, 8008190 <__ieee754_atan2+0x160>)
 8008166:	e9d1 0100 	ldrd	r0, r1, [r1]
 800816a:	e782      	b.n	8008072 <__ieee754_atan2+0x42>
 800816c:	a10c      	add	r1, pc, #48	; (adr r1, 80081a0 <__ieee754_atan2+0x170>)
 800816e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008172:	e77e      	b.n	8008072 <__ieee754_atan2+0x42>
 8008174:	2000      	movs	r0, #0
 8008176:	2100      	movs	r1, #0
 8008178:	e77b      	b.n	8008072 <__ieee754_atan2+0x42>
 800817a:	a107      	add	r1, pc, #28	; (adr r1, 8008198 <__ieee754_atan2+0x168>)
 800817c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008180:	e777      	b.n	8008072 <__ieee754_atan2+0x42>
 8008182:	bf00      	nop
 8008184:	f3af 8000 	nop.w
 8008188:	33145c07 	.word	0x33145c07
 800818c:	3ca1a626 	.word	0x3ca1a626
 8008190:	54442d18 	.word	0x54442d18
 8008194:	400921fb 	.word	0x400921fb
 8008198:	54442d18 	.word	0x54442d18
 800819c:	3ff921fb 	.word	0x3ff921fb
 80081a0:	54442d18 	.word	0x54442d18
 80081a4:	3fe921fb 	.word	0x3fe921fb
 80081a8:	08009ee8 	.word	0x08009ee8
 80081ac:	08009f00 	.word	0x08009f00
 80081b0:	54442d18 	.word	0x54442d18
 80081b4:	c00921fb 	.word	0xc00921fb
 80081b8:	54442d18 	.word	0x54442d18
 80081bc:	bff921fb 	.word	0xbff921fb
 80081c0:	7ff00000 	.word	0x7ff00000
 80081c4:	00000000 	.word	0x00000000

080081c8 <__ieee754_pow>:
 80081c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081cc:	ed2d 8b06 	vpush	{d8-d10}
 80081d0:	b08d      	sub	sp, #52	; 0x34
 80081d2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80081d6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80081da:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80081de:	ea56 0100 	orrs.w	r1, r6, r0
 80081e2:	ec53 2b10 	vmov	r2, r3, d0
 80081e6:	f000 84d1 	beq.w	8008b8c <__ieee754_pow+0x9c4>
 80081ea:	497f      	ldr	r1, [pc, #508]	; (80083e8 <__ieee754_pow+0x220>)
 80081ec:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80081f0:	428c      	cmp	r4, r1
 80081f2:	ee10 8a10 	vmov	r8, s0
 80081f6:	4699      	mov	r9, r3
 80081f8:	dc09      	bgt.n	800820e <__ieee754_pow+0x46>
 80081fa:	d103      	bne.n	8008204 <__ieee754_pow+0x3c>
 80081fc:	b97a      	cbnz	r2, 800821e <__ieee754_pow+0x56>
 80081fe:	42a6      	cmp	r6, r4
 8008200:	dd02      	ble.n	8008208 <__ieee754_pow+0x40>
 8008202:	e00c      	b.n	800821e <__ieee754_pow+0x56>
 8008204:	428e      	cmp	r6, r1
 8008206:	dc02      	bgt.n	800820e <__ieee754_pow+0x46>
 8008208:	428e      	cmp	r6, r1
 800820a:	d110      	bne.n	800822e <__ieee754_pow+0x66>
 800820c:	b178      	cbz	r0, 800822e <__ieee754_pow+0x66>
 800820e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008212:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008216:	ea54 0308 	orrs.w	r3, r4, r8
 800821a:	f000 84b7 	beq.w	8008b8c <__ieee754_pow+0x9c4>
 800821e:	4873      	ldr	r0, [pc, #460]	; (80083ec <__ieee754_pow+0x224>)
 8008220:	b00d      	add	sp, #52	; 0x34
 8008222:	ecbd 8b06 	vpop	{d8-d10}
 8008226:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800822a:	f001 bd05 	b.w	8009c38 <nan>
 800822e:	f1b9 0f00 	cmp.w	r9, #0
 8008232:	da36      	bge.n	80082a2 <__ieee754_pow+0xda>
 8008234:	496e      	ldr	r1, [pc, #440]	; (80083f0 <__ieee754_pow+0x228>)
 8008236:	428e      	cmp	r6, r1
 8008238:	dc51      	bgt.n	80082de <__ieee754_pow+0x116>
 800823a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800823e:	428e      	cmp	r6, r1
 8008240:	f340 84af 	ble.w	8008ba2 <__ieee754_pow+0x9da>
 8008244:	1531      	asrs	r1, r6, #20
 8008246:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800824a:	2914      	cmp	r1, #20
 800824c:	dd0f      	ble.n	800826e <__ieee754_pow+0xa6>
 800824e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8008252:	fa20 fc01 	lsr.w	ip, r0, r1
 8008256:	fa0c f101 	lsl.w	r1, ip, r1
 800825a:	4281      	cmp	r1, r0
 800825c:	f040 84a1 	bne.w	8008ba2 <__ieee754_pow+0x9da>
 8008260:	f00c 0c01 	and.w	ip, ip, #1
 8008264:	f1cc 0102 	rsb	r1, ip, #2
 8008268:	9100      	str	r1, [sp, #0]
 800826a:	b180      	cbz	r0, 800828e <__ieee754_pow+0xc6>
 800826c:	e059      	b.n	8008322 <__ieee754_pow+0x15a>
 800826e:	2800      	cmp	r0, #0
 8008270:	d155      	bne.n	800831e <__ieee754_pow+0x156>
 8008272:	f1c1 0114 	rsb	r1, r1, #20
 8008276:	fa46 fc01 	asr.w	ip, r6, r1
 800827a:	fa0c f101 	lsl.w	r1, ip, r1
 800827e:	42b1      	cmp	r1, r6
 8008280:	f040 848c 	bne.w	8008b9c <__ieee754_pow+0x9d4>
 8008284:	f00c 0c01 	and.w	ip, ip, #1
 8008288:	f1cc 0102 	rsb	r1, ip, #2
 800828c:	9100      	str	r1, [sp, #0]
 800828e:	4959      	ldr	r1, [pc, #356]	; (80083f4 <__ieee754_pow+0x22c>)
 8008290:	428e      	cmp	r6, r1
 8008292:	d12d      	bne.n	80082f0 <__ieee754_pow+0x128>
 8008294:	2f00      	cmp	r7, #0
 8008296:	da79      	bge.n	800838c <__ieee754_pow+0x1c4>
 8008298:	4956      	ldr	r1, [pc, #344]	; (80083f4 <__ieee754_pow+0x22c>)
 800829a:	2000      	movs	r0, #0
 800829c:	f7f8 fa8e 	bl	80007bc <__aeabi_ddiv>
 80082a0:	e016      	b.n	80082d0 <__ieee754_pow+0x108>
 80082a2:	2100      	movs	r1, #0
 80082a4:	9100      	str	r1, [sp, #0]
 80082a6:	2800      	cmp	r0, #0
 80082a8:	d13b      	bne.n	8008322 <__ieee754_pow+0x15a>
 80082aa:	494f      	ldr	r1, [pc, #316]	; (80083e8 <__ieee754_pow+0x220>)
 80082ac:	428e      	cmp	r6, r1
 80082ae:	d1ee      	bne.n	800828e <__ieee754_pow+0xc6>
 80082b0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80082b4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80082b8:	ea53 0308 	orrs.w	r3, r3, r8
 80082bc:	f000 8466 	beq.w	8008b8c <__ieee754_pow+0x9c4>
 80082c0:	4b4d      	ldr	r3, [pc, #308]	; (80083f8 <__ieee754_pow+0x230>)
 80082c2:	429c      	cmp	r4, r3
 80082c4:	dd0d      	ble.n	80082e2 <__ieee754_pow+0x11a>
 80082c6:	2f00      	cmp	r7, #0
 80082c8:	f280 8464 	bge.w	8008b94 <__ieee754_pow+0x9cc>
 80082cc:	2000      	movs	r0, #0
 80082ce:	2100      	movs	r1, #0
 80082d0:	ec41 0b10 	vmov	d0, r0, r1
 80082d4:	b00d      	add	sp, #52	; 0x34
 80082d6:	ecbd 8b06 	vpop	{d8-d10}
 80082da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082de:	2102      	movs	r1, #2
 80082e0:	e7e0      	b.n	80082a4 <__ieee754_pow+0xdc>
 80082e2:	2f00      	cmp	r7, #0
 80082e4:	daf2      	bge.n	80082cc <__ieee754_pow+0x104>
 80082e6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80082ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80082ee:	e7ef      	b.n	80082d0 <__ieee754_pow+0x108>
 80082f0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80082f4:	d104      	bne.n	8008300 <__ieee754_pow+0x138>
 80082f6:	4610      	mov	r0, r2
 80082f8:	4619      	mov	r1, r3
 80082fa:	f7f8 f935 	bl	8000568 <__aeabi_dmul>
 80082fe:	e7e7      	b.n	80082d0 <__ieee754_pow+0x108>
 8008300:	493e      	ldr	r1, [pc, #248]	; (80083fc <__ieee754_pow+0x234>)
 8008302:	428f      	cmp	r7, r1
 8008304:	d10d      	bne.n	8008322 <__ieee754_pow+0x15a>
 8008306:	f1b9 0f00 	cmp.w	r9, #0
 800830a:	db0a      	blt.n	8008322 <__ieee754_pow+0x15a>
 800830c:	ec43 2b10 	vmov	d0, r2, r3
 8008310:	b00d      	add	sp, #52	; 0x34
 8008312:	ecbd 8b06 	vpop	{d8-d10}
 8008316:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831a:	f000 be83 	b.w	8009024 <__ieee754_sqrt>
 800831e:	2100      	movs	r1, #0
 8008320:	9100      	str	r1, [sp, #0]
 8008322:	ec43 2b10 	vmov	d0, r2, r3
 8008326:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800832a:	f7ff fd3d 	bl	8007da8 <fabs>
 800832e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008332:	ec51 0b10 	vmov	r0, r1, d0
 8008336:	f1b8 0f00 	cmp.w	r8, #0
 800833a:	d12a      	bne.n	8008392 <__ieee754_pow+0x1ca>
 800833c:	b12c      	cbz	r4, 800834a <__ieee754_pow+0x182>
 800833e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80083f4 <__ieee754_pow+0x22c>
 8008342:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8008346:	45e6      	cmp	lr, ip
 8008348:	d123      	bne.n	8008392 <__ieee754_pow+0x1ca>
 800834a:	2f00      	cmp	r7, #0
 800834c:	da05      	bge.n	800835a <__ieee754_pow+0x192>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	2000      	movs	r0, #0
 8008354:	4927      	ldr	r1, [pc, #156]	; (80083f4 <__ieee754_pow+0x22c>)
 8008356:	f7f8 fa31 	bl	80007bc <__aeabi_ddiv>
 800835a:	f1b9 0f00 	cmp.w	r9, #0
 800835e:	dab7      	bge.n	80082d0 <__ieee754_pow+0x108>
 8008360:	9b00      	ldr	r3, [sp, #0]
 8008362:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008366:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800836a:	4323      	orrs	r3, r4
 800836c:	d108      	bne.n	8008380 <__ieee754_pow+0x1b8>
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	4610      	mov	r0, r2
 8008374:	4619      	mov	r1, r3
 8008376:	f7f7 ff3f 	bl	80001f8 <__aeabi_dsub>
 800837a:	4602      	mov	r2, r0
 800837c:	460b      	mov	r3, r1
 800837e:	e78d      	b.n	800829c <__ieee754_pow+0xd4>
 8008380:	9b00      	ldr	r3, [sp, #0]
 8008382:	2b01      	cmp	r3, #1
 8008384:	d1a4      	bne.n	80082d0 <__ieee754_pow+0x108>
 8008386:	4602      	mov	r2, r0
 8008388:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800838c:	4610      	mov	r0, r2
 800838e:	4619      	mov	r1, r3
 8008390:	e79e      	b.n	80082d0 <__ieee754_pow+0x108>
 8008392:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8008396:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800839a:	950a      	str	r5, [sp, #40]	; 0x28
 800839c:	9d00      	ldr	r5, [sp, #0]
 800839e:	46ac      	mov	ip, r5
 80083a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80083a2:	ea5c 0505 	orrs.w	r5, ip, r5
 80083a6:	d0e4      	beq.n	8008372 <__ieee754_pow+0x1aa>
 80083a8:	4b15      	ldr	r3, [pc, #84]	; (8008400 <__ieee754_pow+0x238>)
 80083aa:	429e      	cmp	r6, r3
 80083ac:	f340 80fc 	ble.w	80085a8 <__ieee754_pow+0x3e0>
 80083b0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80083b4:	429e      	cmp	r6, r3
 80083b6:	4b10      	ldr	r3, [pc, #64]	; (80083f8 <__ieee754_pow+0x230>)
 80083b8:	dd07      	ble.n	80083ca <__ieee754_pow+0x202>
 80083ba:	429c      	cmp	r4, r3
 80083bc:	dc0a      	bgt.n	80083d4 <__ieee754_pow+0x20c>
 80083be:	2f00      	cmp	r7, #0
 80083c0:	da84      	bge.n	80082cc <__ieee754_pow+0x104>
 80083c2:	a307      	add	r3, pc, #28	; (adr r3, 80083e0 <__ieee754_pow+0x218>)
 80083c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c8:	e795      	b.n	80082f6 <__ieee754_pow+0x12e>
 80083ca:	429c      	cmp	r4, r3
 80083cc:	dbf7      	blt.n	80083be <__ieee754_pow+0x1f6>
 80083ce:	4b09      	ldr	r3, [pc, #36]	; (80083f4 <__ieee754_pow+0x22c>)
 80083d0:	429c      	cmp	r4, r3
 80083d2:	dd17      	ble.n	8008404 <__ieee754_pow+0x23c>
 80083d4:	2f00      	cmp	r7, #0
 80083d6:	dcf4      	bgt.n	80083c2 <__ieee754_pow+0x1fa>
 80083d8:	e778      	b.n	80082cc <__ieee754_pow+0x104>
 80083da:	bf00      	nop
 80083dc:	f3af 8000 	nop.w
 80083e0:	8800759c 	.word	0x8800759c
 80083e4:	7e37e43c 	.word	0x7e37e43c
 80083e8:	7ff00000 	.word	0x7ff00000
 80083ec:	08009f18 	.word	0x08009f18
 80083f0:	433fffff 	.word	0x433fffff
 80083f4:	3ff00000 	.word	0x3ff00000
 80083f8:	3fefffff 	.word	0x3fefffff
 80083fc:	3fe00000 	.word	0x3fe00000
 8008400:	41e00000 	.word	0x41e00000
 8008404:	4b64      	ldr	r3, [pc, #400]	; (8008598 <__ieee754_pow+0x3d0>)
 8008406:	2200      	movs	r2, #0
 8008408:	f7f7 fef6 	bl	80001f8 <__aeabi_dsub>
 800840c:	a356      	add	r3, pc, #344	; (adr r3, 8008568 <__ieee754_pow+0x3a0>)
 800840e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008412:	4604      	mov	r4, r0
 8008414:	460d      	mov	r5, r1
 8008416:	f7f8 f8a7 	bl	8000568 <__aeabi_dmul>
 800841a:	a355      	add	r3, pc, #340	; (adr r3, 8008570 <__ieee754_pow+0x3a8>)
 800841c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008420:	4606      	mov	r6, r0
 8008422:	460f      	mov	r7, r1
 8008424:	4620      	mov	r0, r4
 8008426:	4629      	mov	r1, r5
 8008428:	f7f8 f89e 	bl	8000568 <__aeabi_dmul>
 800842c:	4b5b      	ldr	r3, [pc, #364]	; (800859c <__ieee754_pow+0x3d4>)
 800842e:	4682      	mov	sl, r0
 8008430:	468b      	mov	fp, r1
 8008432:	2200      	movs	r2, #0
 8008434:	4620      	mov	r0, r4
 8008436:	4629      	mov	r1, r5
 8008438:	f7f8 f896 	bl	8000568 <__aeabi_dmul>
 800843c:	4602      	mov	r2, r0
 800843e:	460b      	mov	r3, r1
 8008440:	a14d      	add	r1, pc, #308	; (adr r1, 8008578 <__ieee754_pow+0x3b0>)
 8008442:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008446:	f7f7 fed7 	bl	80001f8 <__aeabi_dsub>
 800844a:	4622      	mov	r2, r4
 800844c:	462b      	mov	r3, r5
 800844e:	f7f8 f88b 	bl	8000568 <__aeabi_dmul>
 8008452:	4602      	mov	r2, r0
 8008454:	460b      	mov	r3, r1
 8008456:	2000      	movs	r0, #0
 8008458:	4951      	ldr	r1, [pc, #324]	; (80085a0 <__ieee754_pow+0x3d8>)
 800845a:	f7f7 fecd 	bl	80001f8 <__aeabi_dsub>
 800845e:	4622      	mov	r2, r4
 8008460:	4680      	mov	r8, r0
 8008462:	4689      	mov	r9, r1
 8008464:	462b      	mov	r3, r5
 8008466:	4620      	mov	r0, r4
 8008468:	4629      	mov	r1, r5
 800846a:	f7f8 f87d 	bl	8000568 <__aeabi_dmul>
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	4640      	mov	r0, r8
 8008474:	4649      	mov	r1, r9
 8008476:	f7f8 f877 	bl	8000568 <__aeabi_dmul>
 800847a:	a341      	add	r3, pc, #260	; (adr r3, 8008580 <__ieee754_pow+0x3b8>)
 800847c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008480:	f7f8 f872 	bl	8000568 <__aeabi_dmul>
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	4650      	mov	r0, sl
 800848a:	4659      	mov	r1, fp
 800848c:	f7f7 feb4 	bl	80001f8 <__aeabi_dsub>
 8008490:	4602      	mov	r2, r0
 8008492:	460b      	mov	r3, r1
 8008494:	4680      	mov	r8, r0
 8008496:	4689      	mov	r9, r1
 8008498:	4630      	mov	r0, r6
 800849a:	4639      	mov	r1, r7
 800849c:	f7f7 feae 	bl	80001fc <__adddf3>
 80084a0:	2400      	movs	r4, #0
 80084a2:	4632      	mov	r2, r6
 80084a4:	463b      	mov	r3, r7
 80084a6:	4620      	mov	r0, r4
 80084a8:	460d      	mov	r5, r1
 80084aa:	f7f7 fea5 	bl	80001f8 <__aeabi_dsub>
 80084ae:	4602      	mov	r2, r0
 80084b0:	460b      	mov	r3, r1
 80084b2:	4640      	mov	r0, r8
 80084b4:	4649      	mov	r1, r9
 80084b6:	f7f7 fe9f 	bl	80001f8 <__aeabi_dsub>
 80084ba:	9b00      	ldr	r3, [sp, #0]
 80084bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084be:	3b01      	subs	r3, #1
 80084c0:	4313      	orrs	r3, r2
 80084c2:	4682      	mov	sl, r0
 80084c4:	468b      	mov	fp, r1
 80084c6:	f040 81f1 	bne.w	80088ac <__ieee754_pow+0x6e4>
 80084ca:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8008588 <__ieee754_pow+0x3c0>
 80084ce:	eeb0 8a47 	vmov.f32	s16, s14
 80084d2:	eef0 8a67 	vmov.f32	s17, s15
 80084d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80084da:	2600      	movs	r6, #0
 80084dc:	4632      	mov	r2, r6
 80084de:	463b      	mov	r3, r7
 80084e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084e4:	f7f7 fe88 	bl	80001f8 <__aeabi_dsub>
 80084e8:	4622      	mov	r2, r4
 80084ea:	462b      	mov	r3, r5
 80084ec:	f7f8 f83c 	bl	8000568 <__aeabi_dmul>
 80084f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084f4:	4680      	mov	r8, r0
 80084f6:	4689      	mov	r9, r1
 80084f8:	4650      	mov	r0, sl
 80084fa:	4659      	mov	r1, fp
 80084fc:	f7f8 f834 	bl	8000568 <__aeabi_dmul>
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	4640      	mov	r0, r8
 8008506:	4649      	mov	r1, r9
 8008508:	f7f7 fe78 	bl	80001fc <__adddf3>
 800850c:	4632      	mov	r2, r6
 800850e:	463b      	mov	r3, r7
 8008510:	4680      	mov	r8, r0
 8008512:	4689      	mov	r9, r1
 8008514:	4620      	mov	r0, r4
 8008516:	4629      	mov	r1, r5
 8008518:	f7f8 f826 	bl	8000568 <__aeabi_dmul>
 800851c:	460b      	mov	r3, r1
 800851e:	4604      	mov	r4, r0
 8008520:	460d      	mov	r5, r1
 8008522:	4602      	mov	r2, r0
 8008524:	4649      	mov	r1, r9
 8008526:	4640      	mov	r0, r8
 8008528:	f7f7 fe68 	bl	80001fc <__adddf3>
 800852c:	4b1d      	ldr	r3, [pc, #116]	; (80085a4 <__ieee754_pow+0x3dc>)
 800852e:	4299      	cmp	r1, r3
 8008530:	ec45 4b19 	vmov	d9, r4, r5
 8008534:	4606      	mov	r6, r0
 8008536:	460f      	mov	r7, r1
 8008538:	468b      	mov	fp, r1
 800853a:	f340 82fe 	ble.w	8008b3a <__ieee754_pow+0x972>
 800853e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008542:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008546:	4303      	orrs	r3, r0
 8008548:	f000 81f0 	beq.w	800892c <__ieee754_pow+0x764>
 800854c:	a310      	add	r3, pc, #64	; (adr r3, 8008590 <__ieee754_pow+0x3c8>)
 800854e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008552:	ec51 0b18 	vmov	r0, r1, d8
 8008556:	f7f8 f807 	bl	8000568 <__aeabi_dmul>
 800855a:	a30d      	add	r3, pc, #52	; (adr r3, 8008590 <__ieee754_pow+0x3c8>)
 800855c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008560:	e6cb      	b.n	80082fa <__ieee754_pow+0x132>
 8008562:	bf00      	nop
 8008564:	f3af 8000 	nop.w
 8008568:	60000000 	.word	0x60000000
 800856c:	3ff71547 	.word	0x3ff71547
 8008570:	f85ddf44 	.word	0xf85ddf44
 8008574:	3e54ae0b 	.word	0x3e54ae0b
 8008578:	55555555 	.word	0x55555555
 800857c:	3fd55555 	.word	0x3fd55555
 8008580:	652b82fe 	.word	0x652b82fe
 8008584:	3ff71547 	.word	0x3ff71547
 8008588:	00000000 	.word	0x00000000
 800858c:	bff00000 	.word	0xbff00000
 8008590:	8800759c 	.word	0x8800759c
 8008594:	7e37e43c 	.word	0x7e37e43c
 8008598:	3ff00000 	.word	0x3ff00000
 800859c:	3fd00000 	.word	0x3fd00000
 80085a0:	3fe00000 	.word	0x3fe00000
 80085a4:	408fffff 	.word	0x408fffff
 80085a8:	4bd7      	ldr	r3, [pc, #860]	; (8008908 <__ieee754_pow+0x740>)
 80085aa:	ea03 0309 	and.w	r3, r3, r9
 80085ae:	2200      	movs	r2, #0
 80085b0:	b92b      	cbnz	r3, 80085be <__ieee754_pow+0x3f6>
 80085b2:	4bd6      	ldr	r3, [pc, #856]	; (800890c <__ieee754_pow+0x744>)
 80085b4:	f7f7 ffd8 	bl	8000568 <__aeabi_dmul>
 80085b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80085bc:	460c      	mov	r4, r1
 80085be:	1523      	asrs	r3, r4, #20
 80085c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80085c4:	4413      	add	r3, r2
 80085c6:	9309      	str	r3, [sp, #36]	; 0x24
 80085c8:	4bd1      	ldr	r3, [pc, #836]	; (8008910 <__ieee754_pow+0x748>)
 80085ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80085ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80085d2:	429c      	cmp	r4, r3
 80085d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80085d8:	dd08      	ble.n	80085ec <__ieee754_pow+0x424>
 80085da:	4bce      	ldr	r3, [pc, #824]	; (8008914 <__ieee754_pow+0x74c>)
 80085dc:	429c      	cmp	r4, r3
 80085de:	f340 8163 	ble.w	80088a8 <__ieee754_pow+0x6e0>
 80085e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e4:	3301      	adds	r3, #1
 80085e6:	9309      	str	r3, [sp, #36]	; 0x24
 80085e8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80085ec:	2400      	movs	r4, #0
 80085ee:	00e3      	lsls	r3, r4, #3
 80085f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80085f2:	4bc9      	ldr	r3, [pc, #804]	; (8008918 <__ieee754_pow+0x750>)
 80085f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085f8:	ed93 7b00 	vldr	d7, [r3]
 80085fc:	4629      	mov	r1, r5
 80085fe:	ec53 2b17 	vmov	r2, r3, d7
 8008602:	eeb0 8a47 	vmov.f32	s16, s14
 8008606:	eef0 8a67 	vmov.f32	s17, s15
 800860a:	4682      	mov	sl, r0
 800860c:	f7f7 fdf4 	bl	80001f8 <__aeabi_dsub>
 8008610:	4652      	mov	r2, sl
 8008612:	4606      	mov	r6, r0
 8008614:	460f      	mov	r7, r1
 8008616:	462b      	mov	r3, r5
 8008618:	ec51 0b18 	vmov	r0, r1, d8
 800861c:	f7f7 fdee 	bl	80001fc <__adddf3>
 8008620:	4602      	mov	r2, r0
 8008622:	460b      	mov	r3, r1
 8008624:	2000      	movs	r0, #0
 8008626:	49bd      	ldr	r1, [pc, #756]	; (800891c <__ieee754_pow+0x754>)
 8008628:	f7f8 f8c8 	bl	80007bc <__aeabi_ddiv>
 800862c:	ec41 0b19 	vmov	d9, r0, r1
 8008630:	4602      	mov	r2, r0
 8008632:	460b      	mov	r3, r1
 8008634:	4630      	mov	r0, r6
 8008636:	4639      	mov	r1, r7
 8008638:	f7f7 ff96 	bl	8000568 <__aeabi_dmul>
 800863c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008640:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008644:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008648:	2300      	movs	r3, #0
 800864a:	9304      	str	r3, [sp, #16]
 800864c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008650:	46ab      	mov	fp, r5
 8008652:	106d      	asrs	r5, r5, #1
 8008654:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008658:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800865c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008660:	2200      	movs	r2, #0
 8008662:	4640      	mov	r0, r8
 8008664:	4649      	mov	r1, r9
 8008666:	4614      	mov	r4, r2
 8008668:	461d      	mov	r5, r3
 800866a:	f7f7 ff7d 	bl	8000568 <__aeabi_dmul>
 800866e:	4602      	mov	r2, r0
 8008670:	460b      	mov	r3, r1
 8008672:	4630      	mov	r0, r6
 8008674:	4639      	mov	r1, r7
 8008676:	f7f7 fdbf 	bl	80001f8 <__aeabi_dsub>
 800867a:	ec53 2b18 	vmov	r2, r3, d8
 800867e:	4606      	mov	r6, r0
 8008680:	460f      	mov	r7, r1
 8008682:	4620      	mov	r0, r4
 8008684:	4629      	mov	r1, r5
 8008686:	f7f7 fdb7 	bl	80001f8 <__aeabi_dsub>
 800868a:	4602      	mov	r2, r0
 800868c:	460b      	mov	r3, r1
 800868e:	4650      	mov	r0, sl
 8008690:	4659      	mov	r1, fp
 8008692:	f7f7 fdb1 	bl	80001f8 <__aeabi_dsub>
 8008696:	4642      	mov	r2, r8
 8008698:	464b      	mov	r3, r9
 800869a:	f7f7 ff65 	bl	8000568 <__aeabi_dmul>
 800869e:	4602      	mov	r2, r0
 80086a0:	460b      	mov	r3, r1
 80086a2:	4630      	mov	r0, r6
 80086a4:	4639      	mov	r1, r7
 80086a6:	f7f7 fda7 	bl	80001f8 <__aeabi_dsub>
 80086aa:	ec53 2b19 	vmov	r2, r3, d9
 80086ae:	f7f7 ff5b 	bl	8000568 <__aeabi_dmul>
 80086b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086b6:	ec41 0b18 	vmov	d8, r0, r1
 80086ba:	4610      	mov	r0, r2
 80086bc:	4619      	mov	r1, r3
 80086be:	f7f7 ff53 	bl	8000568 <__aeabi_dmul>
 80086c2:	a37d      	add	r3, pc, #500	; (adr r3, 80088b8 <__ieee754_pow+0x6f0>)
 80086c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c8:	4604      	mov	r4, r0
 80086ca:	460d      	mov	r5, r1
 80086cc:	f7f7 ff4c 	bl	8000568 <__aeabi_dmul>
 80086d0:	a37b      	add	r3, pc, #492	; (adr r3, 80088c0 <__ieee754_pow+0x6f8>)
 80086d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d6:	f7f7 fd91 	bl	80001fc <__adddf3>
 80086da:	4622      	mov	r2, r4
 80086dc:	462b      	mov	r3, r5
 80086de:	f7f7 ff43 	bl	8000568 <__aeabi_dmul>
 80086e2:	a379      	add	r3, pc, #484	; (adr r3, 80088c8 <__ieee754_pow+0x700>)
 80086e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e8:	f7f7 fd88 	bl	80001fc <__adddf3>
 80086ec:	4622      	mov	r2, r4
 80086ee:	462b      	mov	r3, r5
 80086f0:	f7f7 ff3a 	bl	8000568 <__aeabi_dmul>
 80086f4:	a376      	add	r3, pc, #472	; (adr r3, 80088d0 <__ieee754_pow+0x708>)
 80086f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fa:	f7f7 fd7f 	bl	80001fc <__adddf3>
 80086fe:	4622      	mov	r2, r4
 8008700:	462b      	mov	r3, r5
 8008702:	f7f7 ff31 	bl	8000568 <__aeabi_dmul>
 8008706:	a374      	add	r3, pc, #464	; (adr r3, 80088d8 <__ieee754_pow+0x710>)
 8008708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870c:	f7f7 fd76 	bl	80001fc <__adddf3>
 8008710:	4622      	mov	r2, r4
 8008712:	462b      	mov	r3, r5
 8008714:	f7f7 ff28 	bl	8000568 <__aeabi_dmul>
 8008718:	a371      	add	r3, pc, #452	; (adr r3, 80088e0 <__ieee754_pow+0x718>)
 800871a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871e:	f7f7 fd6d 	bl	80001fc <__adddf3>
 8008722:	4622      	mov	r2, r4
 8008724:	4606      	mov	r6, r0
 8008726:	460f      	mov	r7, r1
 8008728:	462b      	mov	r3, r5
 800872a:	4620      	mov	r0, r4
 800872c:	4629      	mov	r1, r5
 800872e:	f7f7 ff1b 	bl	8000568 <__aeabi_dmul>
 8008732:	4602      	mov	r2, r0
 8008734:	460b      	mov	r3, r1
 8008736:	4630      	mov	r0, r6
 8008738:	4639      	mov	r1, r7
 800873a:	f7f7 ff15 	bl	8000568 <__aeabi_dmul>
 800873e:	4642      	mov	r2, r8
 8008740:	4604      	mov	r4, r0
 8008742:	460d      	mov	r5, r1
 8008744:	464b      	mov	r3, r9
 8008746:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800874a:	f7f7 fd57 	bl	80001fc <__adddf3>
 800874e:	ec53 2b18 	vmov	r2, r3, d8
 8008752:	f7f7 ff09 	bl	8000568 <__aeabi_dmul>
 8008756:	4622      	mov	r2, r4
 8008758:	462b      	mov	r3, r5
 800875a:	f7f7 fd4f 	bl	80001fc <__adddf3>
 800875e:	4642      	mov	r2, r8
 8008760:	4682      	mov	sl, r0
 8008762:	468b      	mov	fp, r1
 8008764:	464b      	mov	r3, r9
 8008766:	4640      	mov	r0, r8
 8008768:	4649      	mov	r1, r9
 800876a:	f7f7 fefd 	bl	8000568 <__aeabi_dmul>
 800876e:	4b6c      	ldr	r3, [pc, #432]	; (8008920 <__ieee754_pow+0x758>)
 8008770:	2200      	movs	r2, #0
 8008772:	4606      	mov	r6, r0
 8008774:	460f      	mov	r7, r1
 8008776:	f7f7 fd41 	bl	80001fc <__adddf3>
 800877a:	4652      	mov	r2, sl
 800877c:	465b      	mov	r3, fp
 800877e:	f7f7 fd3d 	bl	80001fc <__adddf3>
 8008782:	9c04      	ldr	r4, [sp, #16]
 8008784:	460d      	mov	r5, r1
 8008786:	4622      	mov	r2, r4
 8008788:	460b      	mov	r3, r1
 800878a:	4640      	mov	r0, r8
 800878c:	4649      	mov	r1, r9
 800878e:	f7f7 feeb 	bl	8000568 <__aeabi_dmul>
 8008792:	4b63      	ldr	r3, [pc, #396]	; (8008920 <__ieee754_pow+0x758>)
 8008794:	4680      	mov	r8, r0
 8008796:	4689      	mov	r9, r1
 8008798:	2200      	movs	r2, #0
 800879a:	4620      	mov	r0, r4
 800879c:	4629      	mov	r1, r5
 800879e:	f7f7 fd2b 	bl	80001f8 <__aeabi_dsub>
 80087a2:	4632      	mov	r2, r6
 80087a4:	463b      	mov	r3, r7
 80087a6:	f7f7 fd27 	bl	80001f8 <__aeabi_dsub>
 80087aa:	4602      	mov	r2, r0
 80087ac:	460b      	mov	r3, r1
 80087ae:	4650      	mov	r0, sl
 80087b0:	4659      	mov	r1, fp
 80087b2:	f7f7 fd21 	bl	80001f8 <__aeabi_dsub>
 80087b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087ba:	f7f7 fed5 	bl	8000568 <__aeabi_dmul>
 80087be:	4622      	mov	r2, r4
 80087c0:	4606      	mov	r6, r0
 80087c2:	460f      	mov	r7, r1
 80087c4:	462b      	mov	r3, r5
 80087c6:	ec51 0b18 	vmov	r0, r1, d8
 80087ca:	f7f7 fecd 	bl	8000568 <__aeabi_dmul>
 80087ce:	4602      	mov	r2, r0
 80087d0:	460b      	mov	r3, r1
 80087d2:	4630      	mov	r0, r6
 80087d4:	4639      	mov	r1, r7
 80087d6:	f7f7 fd11 	bl	80001fc <__adddf3>
 80087da:	4606      	mov	r6, r0
 80087dc:	460f      	mov	r7, r1
 80087de:	4602      	mov	r2, r0
 80087e0:	460b      	mov	r3, r1
 80087e2:	4640      	mov	r0, r8
 80087e4:	4649      	mov	r1, r9
 80087e6:	f7f7 fd09 	bl	80001fc <__adddf3>
 80087ea:	9c04      	ldr	r4, [sp, #16]
 80087ec:	a33e      	add	r3, pc, #248	; (adr r3, 80088e8 <__ieee754_pow+0x720>)
 80087ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f2:	4620      	mov	r0, r4
 80087f4:	460d      	mov	r5, r1
 80087f6:	f7f7 feb7 	bl	8000568 <__aeabi_dmul>
 80087fa:	4642      	mov	r2, r8
 80087fc:	ec41 0b18 	vmov	d8, r0, r1
 8008800:	464b      	mov	r3, r9
 8008802:	4620      	mov	r0, r4
 8008804:	4629      	mov	r1, r5
 8008806:	f7f7 fcf7 	bl	80001f8 <__aeabi_dsub>
 800880a:	4602      	mov	r2, r0
 800880c:	460b      	mov	r3, r1
 800880e:	4630      	mov	r0, r6
 8008810:	4639      	mov	r1, r7
 8008812:	f7f7 fcf1 	bl	80001f8 <__aeabi_dsub>
 8008816:	a336      	add	r3, pc, #216	; (adr r3, 80088f0 <__ieee754_pow+0x728>)
 8008818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881c:	f7f7 fea4 	bl	8000568 <__aeabi_dmul>
 8008820:	a335      	add	r3, pc, #212	; (adr r3, 80088f8 <__ieee754_pow+0x730>)
 8008822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008826:	4606      	mov	r6, r0
 8008828:	460f      	mov	r7, r1
 800882a:	4620      	mov	r0, r4
 800882c:	4629      	mov	r1, r5
 800882e:	f7f7 fe9b 	bl	8000568 <__aeabi_dmul>
 8008832:	4602      	mov	r2, r0
 8008834:	460b      	mov	r3, r1
 8008836:	4630      	mov	r0, r6
 8008838:	4639      	mov	r1, r7
 800883a:	f7f7 fcdf 	bl	80001fc <__adddf3>
 800883e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008840:	4b38      	ldr	r3, [pc, #224]	; (8008924 <__ieee754_pow+0x75c>)
 8008842:	4413      	add	r3, r2
 8008844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008848:	f7f7 fcd8 	bl	80001fc <__adddf3>
 800884c:	4682      	mov	sl, r0
 800884e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008850:	468b      	mov	fp, r1
 8008852:	f7f7 fe1f 	bl	8000494 <__aeabi_i2d>
 8008856:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008858:	4b33      	ldr	r3, [pc, #204]	; (8008928 <__ieee754_pow+0x760>)
 800885a:	4413      	add	r3, r2
 800885c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008860:	4606      	mov	r6, r0
 8008862:	460f      	mov	r7, r1
 8008864:	4652      	mov	r2, sl
 8008866:	465b      	mov	r3, fp
 8008868:	ec51 0b18 	vmov	r0, r1, d8
 800886c:	f7f7 fcc6 	bl	80001fc <__adddf3>
 8008870:	4642      	mov	r2, r8
 8008872:	464b      	mov	r3, r9
 8008874:	f7f7 fcc2 	bl	80001fc <__adddf3>
 8008878:	4632      	mov	r2, r6
 800887a:	463b      	mov	r3, r7
 800887c:	f7f7 fcbe 	bl	80001fc <__adddf3>
 8008880:	9c04      	ldr	r4, [sp, #16]
 8008882:	4632      	mov	r2, r6
 8008884:	463b      	mov	r3, r7
 8008886:	4620      	mov	r0, r4
 8008888:	460d      	mov	r5, r1
 800888a:	f7f7 fcb5 	bl	80001f8 <__aeabi_dsub>
 800888e:	4642      	mov	r2, r8
 8008890:	464b      	mov	r3, r9
 8008892:	f7f7 fcb1 	bl	80001f8 <__aeabi_dsub>
 8008896:	ec53 2b18 	vmov	r2, r3, d8
 800889a:	f7f7 fcad 	bl	80001f8 <__aeabi_dsub>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	4650      	mov	r0, sl
 80088a4:	4659      	mov	r1, fp
 80088a6:	e606      	b.n	80084b6 <__ieee754_pow+0x2ee>
 80088a8:	2401      	movs	r4, #1
 80088aa:	e6a0      	b.n	80085ee <__ieee754_pow+0x426>
 80088ac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008900 <__ieee754_pow+0x738>
 80088b0:	e60d      	b.n	80084ce <__ieee754_pow+0x306>
 80088b2:	bf00      	nop
 80088b4:	f3af 8000 	nop.w
 80088b8:	4a454eef 	.word	0x4a454eef
 80088bc:	3fca7e28 	.word	0x3fca7e28
 80088c0:	93c9db65 	.word	0x93c9db65
 80088c4:	3fcd864a 	.word	0x3fcd864a
 80088c8:	a91d4101 	.word	0xa91d4101
 80088cc:	3fd17460 	.word	0x3fd17460
 80088d0:	518f264d 	.word	0x518f264d
 80088d4:	3fd55555 	.word	0x3fd55555
 80088d8:	db6fabff 	.word	0xdb6fabff
 80088dc:	3fdb6db6 	.word	0x3fdb6db6
 80088e0:	33333303 	.word	0x33333303
 80088e4:	3fe33333 	.word	0x3fe33333
 80088e8:	e0000000 	.word	0xe0000000
 80088ec:	3feec709 	.word	0x3feec709
 80088f0:	dc3a03fd 	.word	0xdc3a03fd
 80088f4:	3feec709 	.word	0x3feec709
 80088f8:	145b01f5 	.word	0x145b01f5
 80088fc:	be3e2fe0 	.word	0xbe3e2fe0
 8008900:	00000000 	.word	0x00000000
 8008904:	3ff00000 	.word	0x3ff00000
 8008908:	7ff00000 	.word	0x7ff00000
 800890c:	43400000 	.word	0x43400000
 8008910:	0003988e 	.word	0x0003988e
 8008914:	000bb679 	.word	0x000bb679
 8008918:	08009f20 	.word	0x08009f20
 800891c:	3ff00000 	.word	0x3ff00000
 8008920:	40080000 	.word	0x40080000
 8008924:	08009f40 	.word	0x08009f40
 8008928:	08009f30 	.word	0x08009f30
 800892c:	a3b5      	add	r3, pc, #724	; (adr r3, 8008c04 <__ieee754_pow+0xa3c>)
 800892e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008932:	4640      	mov	r0, r8
 8008934:	4649      	mov	r1, r9
 8008936:	f7f7 fc61 	bl	80001fc <__adddf3>
 800893a:	4622      	mov	r2, r4
 800893c:	ec41 0b1a 	vmov	d10, r0, r1
 8008940:	462b      	mov	r3, r5
 8008942:	4630      	mov	r0, r6
 8008944:	4639      	mov	r1, r7
 8008946:	f7f7 fc57 	bl	80001f8 <__aeabi_dsub>
 800894a:	4602      	mov	r2, r0
 800894c:	460b      	mov	r3, r1
 800894e:	ec51 0b1a 	vmov	r0, r1, d10
 8008952:	f7f8 f899 	bl	8000a88 <__aeabi_dcmpgt>
 8008956:	2800      	cmp	r0, #0
 8008958:	f47f adf8 	bne.w	800854c <__ieee754_pow+0x384>
 800895c:	4aa4      	ldr	r2, [pc, #656]	; (8008bf0 <__ieee754_pow+0xa28>)
 800895e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008962:	4293      	cmp	r3, r2
 8008964:	f340 810b 	ble.w	8008b7e <__ieee754_pow+0x9b6>
 8008968:	151b      	asrs	r3, r3, #20
 800896a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800896e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008972:	fa4a f303 	asr.w	r3, sl, r3
 8008976:	445b      	add	r3, fp
 8008978:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800897c:	4e9d      	ldr	r6, [pc, #628]	; (8008bf4 <__ieee754_pow+0xa2c>)
 800897e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008982:	4116      	asrs	r6, r2
 8008984:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008988:	2000      	movs	r0, #0
 800898a:	ea23 0106 	bic.w	r1, r3, r6
 800898e:	f1c2 0214 	rsb	r2, r2, #20
 8008992:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008996:	fa4a fa02 	asr.w	sl, sl, r2
 800899a:	f1bb 0f00 	cmp.w	fp, #0
 800899e:	4602      	mov	r2, r0
 80089a0:	460b      	mov	r3, r1
 80089a2:	4620      	mov	r0, r4
 80089a4:	4629      	mov	r1, r5
 80089a6:	bfb8      	it	lt
 80089a8:	f1ca 0a00 	rsblt	sl, sl, #0
 80089ac:	f7f7 fc24 	bl	80001f8 <__aeabi_dsub>
 80089b0:	ec41 0b19 	vmov	d9, r0, r1
 80089b4:	4642      	mov	r2, r8
 80089b6:	464b      	mov	r3, r9
 80089b8:	ec51 0b19 	vmov	r0, r1, d9
 80089bc:	f7f7 fc1e 	bl	80001fc <__adddf3>
 80089c0:	2400      	movs	r4, #0
 80089c2:	a379      	add	r3, pc, #484	; (adr r3, 8008ba8 <__ieee754_pow+0x9e0>)
 80089c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c8:	4620      	mov	r0, r4
 80089ca:	460d      	mov	r5, r1
 80089cc:	f7f7 fdcc 	bl	8000568 <__aeabi_dmul>
 80089d0:	ec53 2b19 	vmov	r2, r3, d9
 80089d4:	4606      	mov	r6, r0
 80089d6:	460f      	mov	r7, r1
 80089d8:	4620      	mov	r0, r4
 80089da:	4629      	mov	r1, r5
 80089dc:	f7f7 fc0c 	bl	80001f8 <__aeabi_dsub>
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	4640      	mov	r0, r8
 80089e6:	4649      	mov	r1, r9
 80089e8:	f7f7 fc06 	bl	80001f8 <__aeabi_dsub>
 80089ec:	a370      	add	r3, pc, #448	; (adr r3, 8008bb0 <__ieee754_pow+0x9e8>)
 80089ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f2:	f7f7 fdb9 	bl	8000568 <__aeabi_dmul>
 80089f6:	a370      	add	r3, pc, #448	; (adr r3, 8008bb8 <__ieee754_pow+0x9f0>)
 80089f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fc:	4680      	mov	r8, r0
 80089fe:	4689      	mov	r9, r1
 8008a00:	4620      	mov	r0, r4
 8008a02:	4629      	mov	r1, r5
 8008a04:	f7f7 fdb0 	bl	8000568 <__aeabi_dmul>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	4640      	mov	r0, r8
 8008a0e:	4649      	mov	r1, r9
 8008a10:	f7f7 fbf4 	bl	80001fc <__adddf3>
 8008a14:	4604      	mov	r4, r0
 8008a16:	460d      	mov	r5, r1
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	4639      	mov	r1, r7
 8008a20:	f7f7 fbec 	bl	80001fc <__adddf3>
 8008a24:	4632      	mov	r2, r6
 8008a26:	463b      	mov	r3, r7
 8008a28:	4680      	mov	r8, r0
 8008a2a:	4689      	mov	r9, r1
 8008a2c:	f7f7 fbe4 	bl	80001f8 <__aeabi_dsub>
 8008a30:	4602      	mov	r2, r0
 8008a32:	460b      	mov	r3, r1
 8008a34:	4620      	mov	r0, r4
 8008a36:	4629      	mov	r1, r5
 8008a38:	f7f7 fbde 	bl	80001f8 <__aeabi_dsub>
 8008a3c:	4642      	mov	r2, r8
 8008a3e:	4606      	mov	r6, r0
 8008a40:	460f      	mov	r7, r1
 8008a42:	464b      	mov	r3, r9
 8008a44:	4640      	mov	r0, r8
 8008a46:	4649      	mov	r1, r9
 8008a48:	f7f7 fd8e 	bl	8000568 <__aeabi_dmul>
 8008a4c:	a35c      	add	r3, pc, #368	; (adr r3, 8008bc0 <__ieee754_pow+0x9f8>)
 8008a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a52:	4604      	mov	r4, r0
 8008a54:	460d      	mov	r5, r1
 8008a56:	f7f7 fd87 	bl	8000568 <__aeabi_dmul>
 8008a5a:	a35b      	add	r3, pc, #364	; (adr r3, 8008bc8 <__ieee754_pow+0xa00>)
 8008a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a60:	f7f7 fbca 	bl	80001f8 <__aeabi_dsub>
 8008a64:	4622      	mov	r2, r4
 8008a66:	462b      	mov	r3, r5
 8008a68:	f7f7 fd7e 	bl	8000568 <__aeabi_dmul>
 8008a6c:	a358      	add	r3, pc, #352	; (adr r3, 8008bd0 <__ieee754_pow+0xa08>)
 8008a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a72:	f7f7 fbc3 	bl	80001fc <__adddf3>
 8008a76:	4622      	mov	r2, r4
 8008a78:	462b      	mov	r3, r5
 8008a7a:	f7f7 fd75 	bl	8000568 <__aeabi_dmul>
 8008a7e:	a356      	add	r3, pc, #344	; (adr r3, 8008bd8 <__ieee754_pow+0xa10>)
 8008a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a84:	f7f7 fbb8 	bl	80001f8 <__aeabi_dsub>
 8008a88:	4622      	mov	r2, r4
 8008a8a:	462b      	mov	r3, r5
 8008a8c:	f7f7 fd6c 	bl	8000568 <__aeabi_dmul>
 8008a90:	a353      	add	r3, pc, #332	; (adr r3, 8008be0 <__ieee754_pow+0xa18>)
 8008a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a96:	f7f7 fbb1 	bl	80001fc <__adddf3>
 8008a9a:	4622      	mov	r2, r4
 8008a9c:	462b      	mov	r3, r5
 8008a9e:	f7f7 fd63 	bl	8000568 <__aeabi_dmul>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	4640      	mov	r0, r8
 8008aa8:	4649      	mov	r1, r9
 8008aaa:	f7f7 fba5 	bl	80001f8 <__aeabi_dsub>
 8008aae:	4604      	mov	r4, r0
 8008ab0:	460d      	mov	r5, r1
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4640      	mov	r0, r8
 8008ab8:	4649      	mov	r1, r9
 8008aba:	f7f7 fd55 	bl	8000568 <__aeabi_dmul>
 8008abe:	2200      	movs	r2, #0
 8008ac0:	ec41 0b19 	vmov	d9, r0, r1
 8008ac4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008ac8:	4620      	mov	r0, r4
 8008aca:	4629      	mov	r1, r5
 8008acc:	f7f7 fb94 	bl	80001f8 <__aeabi_dsub>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	ec51 0b19 	vmov	r0, r1, d9
 8008ad8:	f7f7 fe70 	bl	80007bc <__aeabi_ddiv>
 8008adc:	4632      	mov	r2, r6
 8008ade:	4604      	mov	r4, r0
 8008ae0:	460d      	mov	r5, r1
 8008ae2:	463b      	mov	r3, r7
 8008ae4:	4640      	mov	r0, r8
 8008ae6:	4649      	mov	r1, r9
 8008ae8:	f7f7 fd3e 	bl	8000568 <__aeabi_dmul>
 8008aec:	4632      	mov	r2, r6
 8008aee:	463b      	mov	r3, r7
 8008af0:	f7f7 fb84 	bl	80001fc <__adddf3>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	4620      	mov	r0, r4
 8008afa:	4629      	mov	r1, r5
 8008afc:	f7f7 fb7c 	bl	80001f8 <__aeabi_dsub>
 8008b00:	4642      	mov	r2, r8
 8008b02:	464b      	mov	r3, r9
 8008b04:	f7f7 fb78 	bl	80001f8 <__aeabi_dsub>
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	493a      	ldr	r1, [pc, #232]	; (8008bf8 <__ieee754_pow+0xa30>)
 8008b0e:	2000      	movs	r0, #0
 8008b10:	f7f7 fb72 	bl	80001f8 <__aeabi_dsub>
 8008b14:	e9cd 0100 	strd	r0, r1, [sp]
 8008b18:	9b01      	ldr	r3, [sp, #4]
 8008b1a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008b1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b22:	da2f      	bge.n	8008b84 <__ieee754_pow+0x9bc>
 8008b24:	4650      	mov	r0, sl
 8008b26:	ed9d 0b00 	vldr	d0, [sp]
 8008b2a:	f001 f919 	bl	8009d60 <scalbn>
 8008b2e:	ec51 0b10 	vmov	r0, r1, d0
 8008b32:	ec53 2b18 	vmov	r2, r3, d8
 8008b36:	f7ff bbe0 	b.w	80082fa <__ieee754_pow+0x132>
 8008b3a:	4b30      	ldr	r3, [pc, #192]	; (8008bfc <__ieee754_pow+0xa34>)
 8008b3c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008b40:	429e      	cmp	r6, r3
 8008b42:	f77f af0b 	ble.w	800895c <__ieee754_pow+0x794>
 8008b46:	4b2e      	ldr	r3, [pc, #184]	; (8008c00 <__ieee754_pow+0xa38>)
 8008b48:	440b      	add	r3, r1
 8008b4a:	4303      	orrs	r3, r0
 8008b4c:	d00b      	beq.n	8008b66 <__ieee754_pow+0x99e>
 8008b4e:	a326      	add	r3, pc, #152	; (adr r3, 8008be8 <__ieee754_pow+0xa20>)
 8008b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b54:	ec51 0b18 	vmov	r0, r1, d8
 8008b58:	f7f7 fd06 	bl	8000568 <__aeabi_dmul>
 8008b5c:	a322      	add	r3, pc, #136	; (adr r3, 8008be8 <__ieee754_pow+0xa20>)
 8008b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b62:	f7ff bbca 	b.w	80082fa <__ieee754_pow+0x132>
 8008b66:	4622      	mov	r2, r4
 8008b68:	462b      	mov	r3, r5
 8008b6a:	f7f7 fb45 	bl	80001f8 <__aeabi_dsub>
 8008b6e:	4642      	mov	r2, r8
 8008b70:	464b      	mov	r3, r9
 8008b72:	f7f7 ff7f 	bl	8000a74 <__aeabi_dcmpge>
 8008b76:	2800      	cmp	r0, #0
 8008b78:	f43f aef0 	beq.w	800895c <__ieee754_pow+0x794>
 8008b7c:	e7e7      	b.n	8008b4e <__ieee754_pow+0x986>
 8008b7e:	f04f 0a00 	mov.w	sl, #0
 8008b82:	e717      	b.n	80089b4 <__ieee754_pow+0x7ec>
 8008b84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b88:	4619      	mov	r1, r3
 8008b8a:	e7d2      	b.n	8008b32 <__ieee754_pow+0x96a>
 8008b8c:	491a      	ldr	r1, [pc, #104]	; (8008bf8 <__ieee754_pow+0xa30>)
 8008b8e:	2000      	movs	r0, #0
 8008b90:	f7ff bb9e 	b.w	80082d0 <__ieee754_pow+0x108>
 8008b94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b98:	f7ff bb9a 	b.w	80082d0 <__ieee754_pow+0x108>
 8008b9c:	9000      	str	r0, [sp, #0]
 8008b9e:	f7ff bb76 	b.w	800828e <__ieee754_pow+0xc6>
 8008ba2:	2100      	movs	r1, #0
 8008ba4:	f7ff bb60 	b.w	8008268 <__ieee754_pow+0xa0>
 8008ba8:	00000000 	.word	0x00000000
 8008bac:	3fe62e43 	.word	0x3fe62e43
 8008bb0:	fefa39ef 	.word	0xfefa39ef
 8008bb4:	3fe62e42 	.word	0x3fe62e42
 8008bb8:	0ca86c39 	.word	0x0ca86c39
 8008bbc:	be205c61 	.word	0xbe205c61
 8008bc0:	72bea4d0 	.word	0x72bea4d0
 8008bc4:	3e663769 	.word	0x3e663769
 8008bc8:	c5d26bf1 	.word	0xc5d26bf1
 8008bcc:	3ebbbd41 	.word	0x3ebbbd41
 8008bd0:	af25de2c 	.word	0xaf25de2c
 8008bd4:	3f11566a 	.word	0x3f11566a
 8008bd8:	16bebd93 	.word	0x16bebd93
 8008bdc:	3f66c16c 	.word	0x3f66c16c
 8008be0:	5555553e 	.word	0x5555553e
 8008be4:	3fc55555 	.word	0x3fc55555
 8008be8:	c2f8f359 	.word	0xc2f8f359
 8008bec:	01a56e1f 	.word	0x01a56e1f
 8008bf0:	3fe00000 	.word	0x3fe00000
 8008bf4:	000fffff 	.word	0x000fffff
 8008bf8:	3ff00000 	.word	0x3ff00000
 8008bfc:	4090cbff 	.word	0x4090cbff
 8008c00:	3f6f3400 	.word	0x3f6f3400
 8008c04:	652b82fe 	.word	0x652b82fe
 8008c08:	3c971547 	.word	0x3c971547
 8008c0c:	00000000 	.word	0x00000000

08008c10 <__ieee754_rem_pio2>:
 8008c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c14:	ed2d 8b02 	vpush	{d8}
 8008c18:	ec55 4b10 	vmov	r4, r5, d0
 8008c1c:	4bca      	ldr	r3, [pc, #808]	; (8008f48 <__ieee754_rem_pio2+0x338>)
 8008c1e:	b08b      	sub	sp, #44	; 0x2c
 8008c20:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008c24:	4598      	cmp	r8, r3
 8008c26:	4682      	mov	sl, r0
 8008c28:	9502      	str	r5, [sp, #8]
 8008c2a:	dc08      	bgt.n	8008c3e <__ieee754_rem_pio2+0x2e>
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	2300      	movs	r3, #0
 8008c30:	ed80 0b00 	vstr	d0, [r0]
 8008c34:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008c38:	f04f 0b00 	mov.w	fp, #0
 8008c3c:	e028      	b.n	8008c90 <__ieee754_rem_pio2+0x80>
 8008c3e:	4bc3      	ldr	r3, [pc, #780]	; (8008f4c <__ieee754_rem_pio2+0x33c>)
 8008c40:	4598      	cmp	r8, r3
 8008c42:	dc78      	bgt.n	8008d36 <__ieee754_rem_pio2+0x126>
 8008c44:	9b02      	ldr	r3, [sp, #8]
 8008c46:	4ec2      	ldr	r6, [pc, #776]	; (8008f50 <__ieee754_rem_pio2+0x340>)
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	ee10 0a10 	vmov	r0, s0
 8008c4e:	a3b0      	add	r3, pc, #704	; (adr r3, 8008f10 <__ieee754_rem_pio2+0x300>)
 8008c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c54:	4629      	mov	r1, r5
 8008c56:	dd39      	ble.n	8008ccc <__ieee754_rem_pio2+0xbc>
 8008c58:	f7f7 face 	bl	80001f8 <__aeabi_dsub>
 8008c5c:	45b0      	cmp	r8, r6
 8008c5e:	4604      	mov	r4, r0
 8008c60:	460d      	mov	r5, r1
 8008c62:	d01b      	beq.n	8008c9c <__ieee754_rem_pio2+0x8c>
 8008c64:	a3ac      	add	r3, pc, #688	; (adr r3, 8008f18 <__ieee754_rem_pio2+0x308>)
 8008c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6a:	f7f7 fac5 	bl	80001f8 <__aeabi_dsub>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	460b      	mov	r3, r1
 8008c72:	e9ca 2300 	strd	r2, r3, [sl]
 8008c76:	4620      	mov	r0, r4
 8008c78:	4629      	mov	r1, r5
 8008c7a:	f7f7 fabd 	bl	80001f8 <__aeabi_dsub>
 8008c7e:	a3a6      	add	r3, pc, #664	; (adr r3, 8008f18 <__ieee754_rem_pio2+0x308>)
 8008c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c84:	f7f7 fab8 	bl	80001f8 <__aeabi_dsub>
 8008c88:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008c8c:	f04f 0b01 	mov.w	fp, #1
 8008c90:	4658      	mov	r0, fp
 8008c92:	b00b      	add	sp, #44	; 0x2c
 8008c94:	ecbd 8b02 	vpop	{d8}
 8008c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c9c:	a3a0      	add	r3, pc, #640	; (adr r3, 8008f20 <__ieee754_rem_pio2+0x310>)
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	f7f7 faa9 	bl	80001f8 <__aeabi_dsub>
 8008ca6:	a3a0      	add	r3, pc, #640	; (adr r3, 8008f28 <__ieee754_rem_pio2+0x318>)
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	4604      	mov	r4, r0
 8008cae:	460d      	mov	r5, r1
 8008cb0:	f7f7 faa2 	bl	80001f8 <__aeabi_dsub>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	e9ca 2300 	strd	r2, r3, [sl]
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	4629      	mov	r1, r5
 8008cc0:	f7f7 fa9a 	bl	80001f8 <__aeabi_dsub>
 8008cc4:	a398      	add	r3, pc, #608	; (adr r3, 8008f28 <__ieee754_rem_pio2+0x318>)
 8008cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cca:	e7db      	b.n	8008c84 <__ieee754_rem_pio2+0x74>
 8008ccc:	f7f7 fa96 	bl	80001fc <__adddf3>
 8008cd0:	45b0      	cmp	r8, r6
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	460d      	mov	r5, r1
 8008cd6:	d016      	beq.n	8008d06 <__ieee754_rem_pio2+0xf6>
 8008cd8:	a38f      	add	r3, pc, #572	; (adr r3, 8008f18 <__ieee754_rem_pio2+0x308>)
 8008cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cde:	f7f7 fa8d 	bl	80001fc <__adddf3>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	e9ca 2300 	strd	r2, r3, [sl]
 8008cea:	4620      	mov	r0, r4
 8008cec:	4629      	mov	r1, r5
 8008cee:	f7f7 fa83 	bl	80001f8 <__aeabi_dsub>
 8008cf2:	a389      	add	r3, pc, #548	; (adr r3, 8008f18 <__ieee754_rem_pio2+0x308>)
 8008cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf8:	f7f7 fa80 	bl	80001fc <__adddf3>
 8008cfc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8008d00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008d04:	e7c4      	b.n	8008c90 <__ieee754_rem_pio2+0x80>
 8008d06:	a386      	add	r3, pc, #536	; (adr r3, 8008f20 <__ieee754_rem_pio2+0x310>)
 8008d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0c:	f7f7 fa76 	bl	80001fc <__adddf3>
 8008d10:	a385      	add	r3, pc, #532	; (adr r3, 8008f28 <__ieee754_rem_pio2+0x318>)
 8008d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d16:	4604      	mov	r4, r0
 8008d18:	460d      	mov	r5, r1
 8008d1a:	f7f7 fa6f 	bl	80001fc <__adddf3>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	e9ca 2300 	strd	r2, r3, [sl]
 8008d26:	4620      	mov	r0, r4
 8008d28:	4629      	mov	r1, r5
 8008d2a:	f7f7 fa65 	bl	80001f8 <__aeabi_dsub>
 8008d2e:	a37e      	add	r3, pc, #504	; (adr r3, 8008f28 <__ieee754_rem_pio2+0x318>)
 8008d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d34:	e7e0      	b.n	8008cf8 <__ieee754_rem_pio2+0xe8>
 8008d36:	4b87      	ldr	r3, [pc, #540]	; (8008f54 <__ieee754_rem_pio2+0x344>)
 8008d38:	4598      	cmp	r8, r3
 8008d3a:	f300 80d9 	bgt.w	8008ef0 <__ieee754_rem_pio2+0x2e0>
 8008d3e:	f7ff f833 	bl	8007da8 <fabs>
 8008d42:	ec55 4b10 	vmov	r4, r5, d0
 8008d46:	ee10 0a10 	vmov	r0, s0
 8008d4a:	a379      	add	r3, pc, #484	; (adr r3, 8008f30 <__ieee754_rem_pio2+0x320>)
 8008d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d50:	4629      	mov	r1, r5
 8008d52:	f7f7 fc09 	bl	8000568 <__aeabi_dmul>
 8008d56:	4b80      	ldr	r3, [pc, #512]	; (8008f58 <__ieee754_rem_pio2+0x348>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f7f7 fa4f 	bl	80001fc <__adddf3>
 8008d5e:	f7f7 feb3 	bl	8000ac8 <__aeabi_d2iz>
 8008d62:	4683      	mov	fp, r0
 8008d64:	f7f7 fb96 	bl	8000494 <__aeabi_i2d>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	ec43 2b18 	vmov	d8, r2, r3
 8008d70:	a367      	add	r3, pc, #412	; (adr r3, 8008f10 <__ieee754_rem_pio2+0x300>)
 8008d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d76:	f7f7 fbf7 	bl	8000568 <__aeabi_dmul>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	4620      	mov	r0, r4
 8008d80:	4629      	mov	r1, r5
 8008d82:	f7f7 fa39 	bl	80001f8 <__aeabi_dsub>
 8008d86:	a364      	add	r3, pc, #400	; (adr r3, 8008f18 <__ieee754_rem_pio2+0x308>)
 8008d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8c:	4606      	mov	r6, r0
 8008d8e:	460f      	mov	r7, r1
 8008d90:	ec51 0b18 	vmov	r0, r1, d8
 8008d94:	f7f7 fbe8 	bl	8000568 <__aeabi_dmul>
 8008d98:	f1bb 0f1f 	cmp.w	fp, #31
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	460d      	mov	r5, r1
 8008da0:	dc0d      	bgt.n	8008dbe <__ieee754_rem_pio2+0x1ae>
 8008da2:	4b6e      	ldr	r3, [pc, #440]	; (8008f5c <__ieee754_rem_pio2+0x34c>)
 8008da4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8008da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dac:	4543      	cmp	r3, r8
 8008dae:	d006      	beq.n	8008dbe <__ieee754_rem_pio2+0x1ae>
 8008db0:	4622      	mov	r2, r4
 8008db2:	462b      	mov	r3, r5
 8008db4:	4630      	mov	r0, r6
 8008db6:	4639      	mov	r1, r7
 8008db8:	f7f7 fa1e 	bl	80001f8 <__aeabi_dsub>
 8008dbc:	e00f      	b.n	8008dde <__ieee754_rem_pio2+0x1ce>
 8008dbe:	462b      	mov	r3, r5
 8008dc0:	4622      	mov	r2, r4
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	4639      	mov	r1, r7
 8008dc6:	f7f7 fa17 	bl	80001f8 <__aeabi_dsub>
 8008dca:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008dce:	9303      	str	r3, [sp, #12]
 8008dd0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008dd4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008dd8:	f1b8 0f10 	cmp.w	r8, #16
 8008ddc:	dc02      	bgt.n	8008de4 <__ieee754_rem_pio2+0x1d4>
 8008dde:	e9ca 0100 	strd	r0, r1, [sl]
 8008de2:	e039      	b.n	8008e58 <__ieee754_rem_pio2+0x248>
 8008de4:	a34e      	add	r3, pc, #312	; (adr r3, 8008f20 <__ieee754_rem_pio2+0x310>)
 8008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dea:	ec51 0b18 	vmov	r0, r1, d8
 8008dee:	f7f7 fbbb 	bl	8000568 <__aeabi_dmul>
 8008df2:	4604      	mov	r4, r0
 8008df4:	460d      	mov	r5, r1
 8008df6:	4602      	mov	r2, r0
 8008df8:	460b      	mov	r3, r1
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	4639      	mov	r1, r7
 8008dfe:	f7f7 f9fb 	bl	80001f8 <__aeabi_dsub>
 8008e02:	4602      	mov	r2, r0
 8008e04:	460b      	mov	r3, r1
 8008e06:	4680      	mov	r8, r0
 8008e08:	4689      	mov	r9, r1
 8008e0a:	4630      	mov	r0, r6
 8008e0c:	4639      	mov	r1, r7
 8008e0e:	f7f7 f9f3 	bl	80001f8 <__aeabi_dsub>
 8008e12:	4622      	mov	r2, r4
 8008e14:	462b      	mov	r3, r5
 8008e16:	f7f7 f9ef 	bl	80001f8 <__aeabi_dsub>
 8008e1a:	a343      	add	r3, pc, #268	; (adr r3, 8008f28 <__ieee754_rem_pio2+0x318>)
 8008e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e20:	4604      	mov	r4, r0
 8008e22:	460d      	mov	r5, r1
 8008e24:	ec51 0b18 	vmov	r0, r1, d8
 8008e28:	f7f7 fb9e 	bl	8000568 <__aeabi_dmul>
 8008e2c:	4622      	mov	r2, r4
 8008e2e:	462b      	mov	r3, r5
 8008e30:	f7f7 f9e2 	bl	80001f8 <__aeabi_dsub>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4604      	mov	r4, r0
 8008e3a:	460d      	mov	r5, r1
 8008e3c:	4640      	mov	r0, r8
 8008e3e:	4649      	mov	r1, r9
 8008e40:	f7f7 f9da 	bl	80001f8 <__aeabi_dsub>
 8008e44:	9a03      	ldr	r2, [sp, #12]
 8008e46:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008e4a:	1ad3      	subs	r3, r2, r3
 8008e4c:	2b31      	cmp	r3, #49	; 0x31
 8008e4e:	dc24      	bgt.n	8008e9a <__ieee754_rem_pio2+0x28a>
 8008e50:	e9ca 0100 	strd	r0, r1, [sl]
 8008e54:	4646      	mov	r6, r8
 8008e56:	464f      	mov	r7, r9
 8008e58:	e9da 8900 	ldrd	r8, r9, [sl]
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	4642      	mov	r2, r8
 8008e60:	464b      	mov	r3, r9
 8008e62:	4639      	mov	r1, r7
 8008e64:	f7f7 f9c8 	bl	80001f8 <__aeabi_dsub>
 8008e68:	462b      	mov	r3, r5
 8008e6a:	4622      	mov	r2, r4
 8008e6c:	f7f7 f9c4 	bl	80001f8 <__aeabi_dsub>
 8008e70:	9b02      	ldr	r3, [sp, #8]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008e78:	f6bf af0a 	bge.w	8008c90 <__ieee754_rem_pio2+0x80>
 8008e7c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008e80:	f8ca 3004 	str.w	r3, [sl, #4]
 8008e84:	f8ca 8000 	str.w	r8, [sl]
 8008e88:	f8ca 0008 	str.w	r0, [sl, #8]
 8008e8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e90:	f8ca 300c 	str.w	r3, [sl, #12]
 8008e94:	f1cb 0b00 	rsb	fp, fp, #0
 8008e98:	e6fa      	b.n	8008c90 <__ieee754_rem_pio2+0x80>
 8008e9a:	a327      	add	r3, pc, #156	; (adr r3, 8008f38 <__ieee754_rem_pio2+0x328>)
 8008e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea0:	ec51 0b18 	vmov	r0, r1, d8
 8008ea4:	f7f7 fb60 	bl	8000568 <__aeabi_dmul>
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	460d      	mov	r5, r1
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4640      	mov	r0, r8
 8008eb2:	4649      	mov	r1, r9
 8008eb4:	f7f7 f9a0 	bl	80001f8 <__aeabi_dsub>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	460b      	mov	r3, r1
 8008ebc:	4606      	mov	r6, r0
 8008ebe:	460f      	mov	r7, r1
 8008ec0:	4640      	mov	r0, r8
 8008ec2:	4649      	mov	r1, r9
 8008ec4:	f7f7 f998 	bl	80001f8 <__aeabi_dsub>
 8008ec8:	4622      	mov	r2, r4
 8008eca:	462b      	mov	r3, r5
 8008ecc:	f7f7 f994 	bl	80001f8 <__aeabi_dsub>
 8008ed0:	a31b      	add	r3, pc, #108	; (adr r3, 8008f40 <__ieee754_rem_pio2+0x330>)
 8008ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	460d      	mov	r5, r1
 8008eda:	ec51 0b18 	vmov	r0, r1, d8
 8008ede:	f7f7 fb43 	bl	8000568 <__aeabi_dmul>
 8008ee2:	4622      	mov	r2, r4
 8008ee4:	462b      	mov	r3, r5
 8008ee6:	f7f7 f987 	bl	80001f8 <__aeabi_dsub>
 8008eea:	4604      	mov	r4, r0
 8008eec:	460d      	mov	r5, r1
 8008eee:	e75f      	b.n	8008db0 <__ieee754_rem_pio2+0x1a0>
 8008ef0:	4b1b      	ldr	r3, [pc, #108]	; (8008f60 <__ieee754_rem_pio2+0x350>)
 8008ef2:	4598      	cmp	r8, r3
 8008ef4:	dd36      	ble.n	8008f64 <__ieee754_rem_pio2+0x354>
 8008ef6:	ee10 2a10 	vmov	r2, s0
 8008efa:	462b      	mov	r3, r5
 8008efc:	4620      	mov	r0, r4
 8008efe:	4629      	mov	r1, r5
 8008f00:	f7f7 f97a 	bl	80001f8 <__aeabi_dsub>
 8008f04:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008f08:	e9ca 0100 	strd	r0, r1, [sl]
 8008f0c:	e694      	b.n	8008c38 <__ieee754_rem_pio2+0x28>
 8008f0e:	bf00      	nop
 8008f10:	54400000 	.word	0x54400000
 8008f14:	3ff921fb 	.word	0x3ff921fb
 8008f18:	1a626331 	.word	0x1a626331
 8008f1c:	3dd0b461 	.word	0x3dd0b461
 8008f20:	1a600000 	.word	0x1a600000
 8008f24:	3dd0b461 	.word	0x3dd0b461
 8008f28:	2e037073 	.word	0x2e037073
 8008f2c:	3ba3198a 	.word	0x3ba3198a
 8008f30:	6dc9c883 	.word	0x6dc9c883
 8008f34:	3fe45f30 	.word	0x3fe45f30
 8008f38:	2e000000 	.word	0x2e000000
 8008f3c:	3ba3198a 	.word	0x3ba3198a
 8008f40:	252049c1 	.word	0x252049c1
 8008f44:	397b839a 	.word	0x397b839a
 8008f48:	3fe921fb 	.word	0x3fe921fb
 8008f4c:	4002d97b 	.word	0x4002d97b
 8008f50:	3ff921fb 	.word	0x3ff921fb
 8008f54:	413921fb 	.word	0x413921fb
 8008f58:	3fe00000 	.word	0x3fe00000
 8008f5c:	08009f50 	.word	0x08009f50
 8008f60:	7fefffff 	.word	0x7fefffff
 8008f64:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008f68:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8008f6c:	ee10 0a10 	vmov	r0, s0
 8008f70:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008f74:	ee10 6a10 	vmov	r6, s0
 8008f78:	460f      	mov	r7, r1
 8008f7a:	f7f7 fda5 	bl	8000ac8 <__aeabi_d2iz>
 8008f7e:	f7f7 fa89 	bl	8000494 <__aeabi_i2d>
 8008f82:	4602      	mov	r2, r0
 8008f84:	460b      	mov	r3, r1
 8008f86:	4630      	mov	r0, r6
 8008f88:	4639      	mov	r1, r7
 8008f8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f8e:	f7f7 f933 	bl	80001f8 <__aeabi_dsub>
 8008f92:	4b22      	ldr	r3, [pc, #136]	; (800901c <__ieee754_rem_pio2+0x40c>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	f7f7 fae7 	bl	8000568 <__aeabi_dmul>
 8008f9a:	460f      	mov	r7, r1
 8008f9c:	4606      	mov	r6, r0
 8008f9e:	f7f7 fd93 	bl	8000ac8 <__aeabi_d2iz>
 8008fa2:	f7f7 fa77 	bl	8000494 <__aeabi_i2d>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	460b      	mov	r3, r1
 8008faa:	4630      	mov	r0, r6
 8008fac:	4639      	mov	r1, r7
 8008fae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008fb2:	f7f7 f921 	bl	80001f8 <__aeabi_dsub>
 8008fb6:	4b19      	ldr	r3, [pc, #100]	; (800901c <__ieee754_rem_pio2+0x40c>)
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f7f7 fad5 	bl	8000568 <__aeabi_dmul>
 8008fbe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008fc2:	ad04      	add	r5, sp, #16
 8008fc4:	f04f 0803 	mov.w	r8, #3
 8008fc8:	46a9      	mov	r9, r5
 8008fca:	2600      	movs	r6, #0
 8008fcc:	2700      	movs	r7, #0
 8008fce:	4632      	mov	r2, r6
 8008fd0:	463b      	mov	r3, r7
 8008fd2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8008fd6:	46c3      	mov	fp, r8
 8008fd8:	3d08      	subs	r5, #8
 8008fda:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008fde:	f7f7 fd2b 	bl	8000a38 <__aeabi_dcmpeq>
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	d1f3      	bne.n	8008fce <__ieee754_rem_pio2+0x3be>
 8008fe6:	4b0e      	ldr	r3, [pc, #56]	; (8009020 <__ieee754_rem_pio2+0x410>)
 8008fe8:	9301      	str	r3, [sp, #4]
 8008fea:	2302      	movs	r3, #2
 8008fec:	9300      	str	r3, [sp, #0]
 8008fee:	4622      	mov	r2, r4
 8008ff0:	465b      	mov	r3, fp
 8008ff2:	4651      	mov	r1, sl
 8008ff4:	4648      	mov	r0, r9
 8008ff6:	f000 f993 	bl	8009320 <__kernel_rem_pio2>
 8008ffa:	9b02      	ldr	r3, [sp, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	4683      	mov	fp, r0
 8009000:	f6bf ae46 	bge.w	8008c90 <__ieee754_rem_pio2+0x80>
 8009004:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009008:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800900c:	f8ca 3004 	str.w	r3, [sl, #4]
 8009010:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009014:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009018:	e73a      	b.n	8008e90 <__ieee754_rem_pio2+0x280>
 800901a:	bf00      	nop
 800901c:	41700000 	.word	0x41700000
 8009020:	08009fd0 	.word	0x08009fd0

08009024 <__ieee754_sqrt>:
 8009024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009028:	ec55 4b10 	vmov	r4, r5, d0
 800902c:	4e56      	ldr	r6, [pc, #344]	; (8009188 <__ieee754_sqrt+0x164>)
 800902e:	43ae      	bics	r6, r5
 8009030:	ee10 0a10 	vmov	r0, s0
 8009034:	ee10 3a10 	vmov	r3, s0
 8009038:	4629      	mov	r1, r5
 800903a:	462a      	mov	r2, r5
 800903c:	d110      	bne.n	8009060 <__ieee754_sqrt+0x3c>
 800903e:	ee10 2a10 	vmov	r2, s0
 8009042:	462b      	mov	r3, r5
 8009044:	f7f7 fa90 	bl	8000568 <__aeabi_dmul>
 8009048:	4602      	mov	r2, r0
 800904a:	460b      	mov	r3, r1
 800904c:	4620      	mov	r0, r4
 800904e:	4629      	mov	r1, r5
 8009050:	f7f7 f8d4 	bl	80001fc <__adddf3>
 8009054:	4604      	mov	r4, r0
 8009056:	460d      	mov	r5, r1
 8009058:	ec45 4b10 	vmov	d0, r4, r5
 800905c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009060:	2d00      	cmp	r5, #0
 8009062:	dc10      	bgt.n	8009086 <__ieee754_sqrt+0x62>
 8009064:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009068:	4330      	orrs	r0, r6
 800906a:	d0f5      	beq.n	8009058 <__ieee754_sqrt+0x34>
 800906c:	b15d      	cbz	r5, 8009086 <__ieee754_sqrt+0x62>
 800906e:	ee10 2a10 	vmov	r2, s0
 8009072:	462b      	mov	r3, r5
 8009074:	ee10 0a10 	vmov	r0, s0
 8009078:	f7f7 f8be 	bl	80001f8 <__aeabi_dsub>
 800907c:	4602      	mov	r2, r0
 800907e:	460b      	mov	r3, r1
 8009080:	f7f7 fb9c 	bl	80007bc <__aeabi_ddiv>
 8009084:	e7e6      	b.n	8009054 <__ieee754_sqrt+0x30>
 8009086:	1509      	asrs	r1, r1, #20
 8009088:	d076      	beq.n	8009178 <__ieee754_sqrt+0x154>
 800908a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800908e:	07ce      	lsls	r6, r1, #31
 8009090:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009094:	bf5e      	ittt	pl
 8009096:	0fda      	lsrpl	r2, r3, #31
 8009098:	005b      	lslpl	r3, r3, #1
 800909a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800909e:	0fda      	lsrs	r2, r3, #31
 80090a0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80090a4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80090a8:	2000      	movs	r0, #0
 80090aa:	106d      	asrs	r5, r5, #1
 80090ac:	005b      	lsls	r3, r3, #1
 80090ae:	f04f 0e16 	mov.w	lr, #22
 80090b2:	4684      	mov	ip, r0
 80090b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090b8:	eb0c 0401 	add.w	r4, ip, r1
 80090bc:	4294      	cmp	r4, r2
 80090be:	bfde      	ittt	le
 80090c0:	1b12      	suble	r2, r2, r4
 80090c2:	eb04 0c01 	addle.w	ip, r4, r1
 80090c6:	1840      	addle	r0, r0, r1
 80090c8:	0052      	lsls	r2, r2, #1
 80090ca:	f1be 0e01 	subs.w	lr, lr, #1
 80090ce:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80090d2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80090d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80090da:	d1ed      	bne.n	80090b8 <__ieee754_sqrt+0x94>
 80090dc:	4671      	mov	r1, lr
 80090de:	2720      	movs	r7, #32
 80090e0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80090e4:	4562      	cmp	r2, ip
 80090e6:	eb04 060e 	add.w	r6, r4, lr
 80090ea:	dc02      	bgt.n	80090f2 <__ieee754_sqrt+0xce>
 80090ec:	d113      	bne.n	8009116 <__ieee754_sqrt+0xf2>
 80090ee:	429e      	cmp	r6, r3
 80090f0:	d811      	bhi.n	8009116 <__ieee754_sqrt+0xf2>
 80090f2:	2e00      	cmp	r6, #0
 80090f4:	eb06 0e04 	add.w	lr, r6, r4
 80090f8:	da43      	bge.n	8009182 <__ieee754_sqrt+0x15e>
 80090fa:	f1be 0f00 	cmp.w	lr, #0
 80090fe:	db40      	blt.n	8009182 <__ieee754_sqrt+0x15e>
 8009100:	f10c 0801 	add.w	r8, ip, #1
 8009104:	eba2 020c 	sub.w	r2, r2, ip
 8009108:	429e      	cmp	r6, r3
 800910a:	bf88      	it	hi
 800910c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8009110:	1b9b      	subs	r3, r3, r6
 8009112:	4421      	add	r1, r4
 8009114:	46c4      	mov	ip, r8
 8009116:	0052      	lsls	r2, r2, #1
 8009118:	3f01      	subs	r7, #1
 800911a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800911e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009122:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009126:	d1dd      	bne.n	80090e4 <__ieee754_sqrt+0xc0>
 8009128:	4313      	orrs	r3, r2
 800912a:	d006      	beq.n	800913a <__ieee754_sqrt+0x116>
 800912c:	1c4c      	adds	r4, r1, #1
 800912e:	bf13      	iteet	ne
 8009130:	3101      	addne	r1, #1
 8009132:	3001      	addeq	r0, #1
 8009134:	4639      	moveq	r1, r7
 8009136:	f021 0101 	bicne.w	r1, r1, #1
 800913a:	1043      	asrs	r3, r0, #1
 800913c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009140:	0849      	lsrs	r1, r1, #1
 8009142:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009146:	07c2      	lsls	r2, r0, #31
 8009148:	bf48      	it	mi
 800914a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800914e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8009152:	460c      	mov	r4, r1
 8009154:	463d      	mov	r5, r7
 8009156:	e77f      	b.n	8009058 <__ieee754_sqrt+0x34>
 8009158:	0ada      	lsrs	r2, r3, #11
 800915a:	3815      	subs	r0, #21
 800915c:	055b      	lsls	r3, r3, #21
 800915e:	2a00      	cmp	r2, #0
 8009160:	d0fa      	beq.n	8009158 <__ieee754_sqrt+0x134>
 8009162:	02d7      	lsls	r7, r2, #11
 8009164:	d50a      	bpl.n	800917c <__ieee754_sqrt+0x158>
 8009166:	f1c1 0420 	rsb	r4, r1, #32
 800916a:	fa23 f404 	lsr.w	r4, r3, r4
 800916e:	1e4d      	subs	r5, r1, #1
 8009170:	408b      	lsls	r3, r1
 8009172:	4322      	orrs	r2, r4
 8009174:	1b41      	subs	r1, r0, r5
 8009176:	e788      	b.n	800908a <__ieee754_sqrt+0x66>
 8009178:	4608      	mov	r0, r1
 800917a:	e7f0      	b.n	800915e <__ieee754_sqrt+0x13a>
 800917c:	0052      	lsls	r2, r2, #1
 800917e:	3101      	adds	r1, #1
 8009180:	e7ef      	b.n	8009162 <__ieee754_sqrt+0x13e>
 8009182:	46e0      	mov	r8, ip
 8009184:	e7be      	b.n	8009104 <__ieee754_sqrt+0xe0>
 8009186:	bf00      	nop
 8009188:	7ff00000 	.word	0x7ff00000
 800918c:	00000000 	.word	0x00000000

08009190 <__kernel_cos>:
 8009190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009194:	ec57 6b10 	vmov	r6, r7, d0
 8009198:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800919c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80091a0:	ed8d 1b00 	vstr	d1, [sp]
 80091a4:	da07      	bge.n	80091b6 <__kernel_cos+0x26>
 80091a6:	ee10 0a10 	vmov	r0, s0
 80091aa:	4639      	mov	r1, r7
 80091ac:	f7f7 fc8c 	bl	8000ac8 <__aeabi_d2iz>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	f000 8088 	beq.w	80092c6 <__kernel_cos+0x136>
 80091b6:	4632      	mov	r2, r6
 80091b8:	463b      	mov	r3, r7
 80091ba:	4630      	mov	r0, r6
 80091bc:	4639      	mov	r1, r7
 80091be:	f7f7 f9d3 	bl	8000568 <__aeabi_dmul>
 80091c2:	4b51      	ldr	r3, [pc, #324]	; (8009308 <__kernel_cos+0x178>)
 80091c4:	2200      	movs	r2, #0
 80091c6:	4604      	mov	r4, r0
 80091c8:	460d      	mov	r5, r1
 80091ca:	f7f7 f9cd 	bl	8000568 <__aeabi_dmul>
 80091ce:	a340      	add	r3, pc, #256	; (adr r3, 80092d0 <__kernel_cos+0x140>)
 80091d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d4:	4682      	mov	sl, r0
 80091d6:	468b      	mov	fp, r1
 80091d8:	4620      	mov	r0, r4
 80091da:	4629      	mov	r1, r5
 80091dc:	f7f7 f9c4 	bl	8000568 <__aeabi_dmul>
 80091e0:	a33d      	add	r3, pc, #244	; (adr r3, 80092d8 <__kernel_cos+0x148>)
 80091e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e6:	f7f7 f809 	bl	80001fc <__adddf3>
 80091ea:	4622      	mov	r2, r4
 80091ec:	462b      	mov	r3, r5
 80091ee:	f7f7 f9bb 	bl	8000568 <__aeabi_dmul>
 80091f2:	a33b      	add	r3, pc, #236	; (adr r3, 80092e0 <__kernel_cos+0x150>)
 80091f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f8:	f7f6 fffe 	bl	80001f8 <__aeabi_dsub>
 80091fc:	4622      	mov	r2, r4
 80091fe:	462b      	mov	r3, r5
 8009200:	f7f7 f9b2 	bl	8000568 <__aeabi_dmul>
 8009204:	a338      	add	r3, pc, #224	; (adr r3, 80092e8 <__kernel_cos+0x158>)
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	f7f6 fff7 	bl	80001fc <__adddf3>
 800920e:	4622      	mov	r2, r4
 8009210:	462b      	mov	r3, r5
 8009212:	f7f7 f9a9 	bl	8000568 <__aeabi_dmul>
 8009216:	a336      	add	r3, pc, #216	; (adr r3, 80092f0 <__kernel_cos+0x160>)
 8009218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921c:	f7f6 ffec 	bl	80001f8 <__aeabi_dsub>
 8009220:	4622      	mov	r2, r4
 8009222:	462b      	mov	r3, r5
 8009224:	f7f7 f9a0 	bl	8000568 <__aeabi_dmul>
 8009228:	a333      	add	r3, pc, #204	; (adr r3, 80092f8 <__kernel_cos+0x168>)
 800922a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922e:	f7f6 ffe5 	bl	80001fc <__adddf3>
 8009232:	4622      	mov	r2, r4
 8009234:	462b      	mov	r3, r5
 8009236:	f7f7 f997 	bl	8000568 <__aeabi_dmul>
 800923a:	4622      	mov	r2, r4
 800923c:	462b      	mov	r3, r5
 800923e:	f7f7 f993 	bl	8000568 <__aeabi_dmul>
 8009242:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009246:	4604      	mov	r4, r0
 8009248:	460d      	mov	r5, r1
 800924a:	4630      	mov	r0, r6
 800924c:	4639      	mov	r1, r7
 800924e:	f7f7 f98b 	bl	8000568 <__aeabi_dmul>
 8009252:	460b      	mov	r3, r1
 8009254:	4602      	mov	r2, r0
 8009256:	4629      	mov	r1, r5
 8009258:	4620      	mov	r0, r4
 800925a:	f7f6 ffcd 	bl	80001f8 <__aeabi_dsub>
 800925e:	4b2b      	ldr	r3, [pc, #172]	; (800930c <__kernel_cos+0x17c>)
 8009260:	4598      	cmp	r8, r3
 8009262:	4606      	mov	r6, r0
 8009264:	460f      	mov	r7, r1
 8009266:	dc10      	bgt.n	800928a <__kernel_cos+0xfa>
 8009268:	4602      	mov	r2, r0
 800926a:	460b      	mov	r3, r1
 800926c:	4650      	mov	r0, sl
 800926e:	4659      	mov	r1, fp
 8009270:	f7f6 ffc2 	bl	80001f8 <__aeabi_dsub>
 8009274:	460b      	mov	r3, r1
 8009276:	4926      	ldr	r1, [pc, #152]	; (8009310 <__kernel_cos+0x180>)
 8009278:	4602      	mov	r2, r0
 800927a:	2000      	movs	r0, #0
 800927c:	f7f6 ffbc 	bl	80001f8 <__aeabi_dsub>
 8009280:	ec41 0b10 	vmov	d0, r0, r1
 8009284:	b003      	add	sp, #12
 8009286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800928a:	4b22      	ldr	r3, [pc, #136]	; (8009314 <__kernel_cos+0x184>)
 800928c:	4920      	ldr	r1, [pc, #128]	; (8009310 <__kernel_cos+0x180>)
 800928e:	4598      	cmp	r8, r3
 8009290:	bfcc      	ite	gt
 8009292:	4d21      	ldrgt	r5, [pc, #132]	; (8009318 <__kernel_cos+0x188>)
 8009294:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009298:	2400      	movs	r4, #0
 800929a:	4622      	mov	r2, r4
 800929c:	462b      	mov	r3, r5
 800929e:	2000      	movs	r0, #0
 80092a0:	f7f6 ffaa 	bl	80001f8 <__aeabi_dsub>
 80092a4:	4622      	mov	r2, r4
 80092a6:	4680      	mov	r8, r0
 80092a8:	4689      	mov	r9, r1
 80092aa:	462b      	mov	r3, r5
 80092ac:	4650      	mov	r0, sl
 80092ae:	4659      	mov	r1, fp
 80092b0:	f7f6 ffa2 	bl	80001f8 <__aeabi_dsub>
 80092b4:	4632      	mov	r2, r6
 80092b6:	463b      	mov	r3, r7
 80092b8:	f7f6 ff9e 	bl	80001f8 <__aeabi_dsub>
 80092bc:	4602      	mov	r2, r0
 80092be:	460b      	mov	r3, r1
 80092c0:	4640      	mov	r0, r8
 80092c2:	4649      	mov	r1, r9
 80092c4:	e7da      	b.n	800927c <__kernel_cos+0xec>
 80092c6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009300 <__kernel_cos+0x170>
 80092ca:	e7db      	b.n	8009284 <__kernel_cos+0xf4>
 80092cc:	f3af 8000 	nop.w
 80092d0:	be8838d4 	.word	0xbe8838d4
 80092d4:	bda8fae9 	.word	0xbda8fae9
 80092d8:	bdb4b1c4 	.word	0xbdb4b1c4
 80092dc:	3e21ee9e 	.word	0x3e21ee9e
 80092e0:	809c52ad 	.word	0x809c52ad
 80092e4:	3e927e4f 	.word	0x3e927e4f
 80092e8:	19cb1590 	.word	0x19cb1590
 80092ec:	3efa01a0 	.word	0x3efa01a0
 80092f0:	16c15177 	.word	0x16c15177
 80092f4:	3f56c16c 	.word	0x3f56c16c
 80092f8:	5555554c 	.word	0x5555554c
 80092fc:	3fa55555 	.word	0x3fa55555
 8009300:	00000000 	.word	0x00000000
 8009304:	3ff00000 	.word	0x3ff00000
 8009308:	3fe00000 	.word	0x3fe00000
 800930c:	3fd33332 	.word	0x3fd33332
 8009310:	3ff00000 	.word	0x3ff00000
 8009314:	3fe90000 	.word	0x3fe90000
 8009318:	3fd20000 	.word	0x3fd20000
 800931c:	00000000 	.word	0x00000000

08009320 <__kernel_rem_pio2>:
 8009320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009324:	ed2d 8b02 	vpush	{d8}
 8009328:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800932c:	f112 0f14 	cmn.w	r2, #20
 8009330:	9308      	str	r3, [sp, #32]
 8009332:	9101      	str	r1, [sp, #4]
 8009334:	4bc6      	ldr	r3, [pc, #792]	; (8009650 <__kernel_rem_pio2+0x330>)
 8009336:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8009338:	9009      	str	r0, [sp, #36]	; 0x24
 800933a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800933e:	9304      	str	r3, [sp, #16]
 8009340:	9b08      	ldr	r3, [sp, #32]
 8009342:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009346:	bfa8      	it	ge
 8009348:	1ed4      	subge	r4, r2, #3
 800934a:	9306      	str	r3, [sp, #24]
 800934c:	bfb2      	itee	lt
 800934e:	2400      	movlt	r4, #0
 8009350:	2318      	movge	r3, #24
 8009352:	fb94 f4f3 	sdivge	r4, r4, r3
 8009356:	f06f 0317 	mvn.w	r3, #23
 800935a:	fb04 3303 	mla	r3, r4, r3, r3
 800935e:	eb03 0a02 	add.w	sl, r3, r2
 8009362:	9b04      	ldr	r3, [sp, #16]
 8009364:	9a06      	ldr	r2, [sp, #24]
 8009366:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009640 <__kernel_rem_pio2+0x320>
 800936a:	eb03 0802 	add.w	r8, r3, r2
 800936e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009370:	1aa7      	subs	r7, r4, r2
 8009372:	ae20      	add	r6, sp, #128	; 0x80
 8009374:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009378:	2500      	movs	r5, #0
 800937a:	4545      	cmp	r5, r8
 800937c:	dd18      	ble.n	80093b0 <__kernel_rem_pio2+0x90>
 800937e:	9b08      	ldr	r3, [sp, #32]
 8009380:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009384:	aa20      	add	r2, sp, #128	; 0x80
 8009386:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8009640 <__kernel_rem_pio2+0x320>
 800938a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800938e:	f1c3 0301 	rsb	r3, r3, #1
 8009392:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8009396:	9307      	str	r3, [sp, #28]
 8009398:	9b07      	ldr	r3, [sp, #28]
 800939a:	9a04      	ldr	r2, [sp, #16]
 800939c:	4443      	add	r3, r8
 800939e:	429a      	cmp	r2, r3
 80093a0:	db2f      	blt.n	8009402 <__kernel_rem_pio2+0xe2>
 80093a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80093a6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80093aa:	462f      	mov	r7, r5
 80093ac:	2600      	movs	r6, #0
 80093ae:	e01b      	b.n	80093e8 <__kernel_rem_pio2+0xc8>
 80093b0:	42ef      	cmn	r7, r5
 80093b2:	d407      	bmi.n	80093c4 <__kernel_rem_pio2+0xa4>
 80093b4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80093b8:	f7f7 f86c 	bl	8000494 <__aeabi_i2d>
 80093bc:	e8e6 0102 	strd	r0, r1, [r6], #8
 80093c0:	3501      	adds	r5, #1
 80093c2:	e7da      	b.n	800937a <__kernel_rem_pio2+0x5a>
 80093c4:	ec51 0b18 	vmov	r0, r1, d8
 80093c8:	e7f8      	b.n	80093bc <__kernel_rem_pio2+0x9c>
 80093ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093ce:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80093d2:	f7f7 f8c9 	bl	8000568 <__aeabi_dmul>
 80093d6:	4602      	mov	r2, r0
 80093d8:	460b      	mov	r3, r1
 80093da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093de:	f7f6 ff0d 	bl	80001fc <__adddf3>
 80093e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093e6:	3601      	adds	r6, #1
 80093e8:	9b06      	ldr	r3, [sp, #24]
 80093ea:	429e      	cmp	r6, r3
 80093ec:	f1a7 0708 	sub.w	r7, r7, #8
 80093f0:	ddeb      	ble.n	80093ca <__kernel_rem_pio2+0xaa>
 80093f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093f6:	3508      	adds	r5, #8
 80093f8:	ecab 7b02 	vstmia	fp!, {d7}
 80093fc:	f108 0801 	add.w	r8, r8, #1
 8009400:	e7ca      	b.n	8009398 <__kernel_rem_pio2+0x78>
 8009402:	9b04      	ldr	r3, [sp, #16]
 8009404:	aa0c      	add	r2, sp, #48	; 0x30
 8009406:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800940a:	930b      	str	r3, [sp, #44]	; 0x2c
 800940c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800940e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009412:	9c04      	ldr	r4, [sp, #16]
 8009414:	930a      	str	r3, [sp, #40]	; 0x28
 8009416:	ab98      	add	r3, sp, #608	; 0x260
 8009418:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800941c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009420:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8009424:	f8cd b008 	str.w	fp, [sp, #8]
 8009428:	4625      	mov	r5, r4
 800942a:	2d00      	cmp	r5, #0
 800942c:	dc78      	bgt.n	8009520 <__kernel_rem_pio2+0x200>
 800942e:	ec47 6b10 	vmov	d0, r6, r7
 8009432:	4650      	mov	r0, sl
 8009434:	f000 fc94 	bl	8009d60 <scalbn>
 8009438:	ec57 6b10 	vmov	r6, r7, d0
 800943c:	2200      	movs	r2, #0
 800943e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009442:	ee10 0a10 	vmov	r0, s0
 8009446:	4639      	mov	r1, r7
 8009448:	f7f7 f88e 	bl	8000568 <__aeabi_dmul>
 800944c:	ec41 0b10 	vmov	d0, r0, r1
 8009450:	f000 fb72 	bl	8009b38 <floor>
 8009454:	4b7f      	ldr	r3, [pc, #508]	; (8009654 <__kernel_rem_pio2+0x334>)
 8009456:	ec51 0b10 	vmov	r0, r1, d0
 800945a:	2200      	movs	r2, #0
 800945c:	f7f7 f884 	bl	8000568 <__aeabi_dmul>
 8009460:	4602      	mov	r2, r0
 8009462:	460b      	mov	r3, r1
 8009464:	4630      	mov	r0, r6
 8009466:	4639      	mov	r1, r7
 8009468:	f7f6 fec6 	bl	80001f8 <__aeabi_dsub>
 800946c:	460f      	mov	r7, r1
 800946e:	4606      	mov	r6, r0
 8009470:	f7f7 fb2a 	bl	8000ac8 <__aeabi_d2iz>
 8009474:	9007      	str	r0, [sp, #28]
 8009476:	f7f7 f80d 	bl	8000494 <__aeabi_i2d>
 800947a:	4602      	mov	r2, r0
 800947c:	460b      	mov	r3, r1
 800947e:	4630      	mov	r0, r6
 8009480:	4639      	mov	r1, r7
 8009482:	f7f6 feb9 	bl	80001f8 <__aeabi_dsub>
 8009486:	f1ba 0f00 	cmp.w	sl, #0
 800948a:	4606      	mov	r6, r0
 800948c:	460f      	mov	r7, r1
 800948e:	dd70      	ble.n	8009572 <__kernel_rem_pio2+0x252>
 8009490:	1e62      	subs	r2, r4, #1
 8009492:	ab0c      	add	r3, sp, #48	; 0x30
 8009494:	9d07      	ldr	r5, [sp, #28]
 8009496:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800949a:	f1ca 0118 	rsb	r1, sl, #24
 800949e:	fa40 f301 	asr.w	r3, r0, r1
 80094a2:	441d      	add	r5, r3
 80094a4:	408b      	lsls	r3, r1
 80094a6:	1ac0      	subs	r0, r0, r3
 80094a8:	ab0c      	add	r3, sp, #48	; 0x30
 80094aa:	9507      	str	r5, [sp, #28]
 80094ac:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80094b0:	f1ca 0317 	rsb	r3, sl, #23
 80094b4:	fa40 f303 	asr.w	r3, r0, r3
 80094b8:	9302      	str	r3, [sp, #8]
 80094ba:	9b02      	ldr	r3, [sp, #8]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	dd66      	ble.n	800958e <__kernel_rem_pio2+0x26e>
 80094c0:	9b07      	ldr	r3, [sp, #28]
 80094c2:	2200      	movs	r2, #0
 80094c4:	3301      	adds	r3, #1
 80094c6:	9307      	str	r3, [sp, #28]
 80094c8:	4615      	mov	r5, r2
 80094ca:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80094ce:	4294      	cmp	r4, r2
 80094d0:	f300 8099 	bgt.w	8009606 <__kernel_rem_pio2+0x2e6>
 80094d4:	f1ba 0f00 	cmp.w	sl, #0
 80094d8:	dd07      	ble.n	80094ea <__kernel_rem_pio2+0x1ca>
 80094da:	f1ba 0f01 	cmp.w	sl, #1
 80094de:	f000 80a5 	beq.w	800962c <__kernel_rem_pio2+0x30c>
 80094e2:	f1ba 0f02 	cmp.w	sl, #2
 80094e6:	f000 80c1 	beq.w	800966c <__kernel_rem_pio2+0x34c>
 80094ea:	9b02      	ldr	r3, [sp, #8]
 80094ec:	2b02      	cmp	r3, #2
 80094ee:	d14e      	bne.n	800958e <__kernel_rem_pio2+0x26e>
 80094f0:	4632      	mov	r2, r6
 80094f2:	463b      	mov	r3, r7
 80094f4:	4958      	ldr	r1, [pc, #352]	; (8009658 <__kernel_rem_pio2+0x338>)
 80094f6:	2000      	movs	r0, #0
 80094f8:	f7f6 fe7e 	bl	80001f8 <__aeabi_dsub>
 80094fc:	4606      	mov	r6, r0
 80094fe:	460f      	mov	r7, r1
 8009500:	2d00      	cmp	r5, #0
 8009502:	d044      	beq.n	800958e <__kernel_rem_pio2+0x26e>
 8009504:	4650      	mov	r0, sl
 8009506:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009648 <__kernel_rem_pio2+0x328>
 800950a:	f000 fc29 	bl	8009d60 <scalbn>
 800950e:	4630      	mov	r0, r6
 8009510:	4639      	mov	r1, r7
 8009512:	ec53 2b10 	vmov	r2, r3, d0
 8009516:	f7f6 fe6f 	bl	80001f8 <__aeabi_dsub>
 800951a:	4606      	mov	r6, r0
 800951c:	460f      	mov	r7, r1
 800951e:	e036      	b.n	800958e <__kernel_rem_pio2+0x26e>
 8009520:	4b4e      	ldr	r3, [pc, #312]	; (800965c <__kernel_rem_pio2+0x33c>)
 8009522:	2200      	movs	r2, #0
 8009524:	4630      	mov	r0, r6
 8009526:	4639      	mov	r1, r7
 8009528:	f7f7 f81e 	bl	8000568 <__aeabi_dmul>
 800952c:	f7f7 facc 	bl	8000ac8 <__aeabi_d2iz>
 8009530:	f7f6 ffb0 	bl	8000494 <__aeabi_i2d>
 8009534:	4b4a      	ldr	r3, [pc, #296]	; (8009660 <__kernel_rem_pio2+0x340>)
 8009536:	2200      	movs	r2, #0
 8009538:	4680      	mov	r8, r0
 800953a:	4689      	mov	r9, r1
 800953c:	f7f7 f814 	bl	8000568 <__aeabi_dmul>
 8009540:	4602      	mov	r2, r0
 8009542:	460b      	mov	r3, r1
 8009544:	4630      	mov	r0, r6
 8009546:	4639      	mov	r1, r7
 8009548:	f7f6 fe56 	bl	80001f8 <__aeabi_dsub>
 800954c:	f7f7 fabc 	bl	8000ac8 <__aeabi_d2iz>
 8009550:	9b02      	ldr	r3, [sp, #8]
 8009552:	f843 0b04 	str.w	r0, [r3], #4
 8009556:	3d01      	subs	r5, #1
 8009558:	9302      	str	r3, [sp, #8]
 800955a:	ab70      	add	r3, sp, #448	; 0x1c0
 800955c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009564:	4640      	mov	r0, r8
 8009566:	4649      	mov	r1, r9
 8009568:	f7f6 fe48 	bl	80001fc <__adddf3>
 800956c:	4606      	mov	r6, r0
 800956e:	460f      	mov	r7, r1
 8009570:	e75b      	b.n	800942a <__kernel_rem_pio2+0x10a>
 8009572:	d105      	bne.n	8009580 <__kernel_rem_pio2+0x260>
 8009574:	1e63      	subs	r3, r4, #1
 8009576:	aa0c      	add	r2, sp, #48	; 0x30
 8009578:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800957c:	15c3      	asrs	r3, r0, #23
 800957e:	e79b      	b.n	80094b8 <__kernel_rem_pio2+0x198>
 8009580:	4b38      	ldr	r3, [pc, #224]	; (8009664 <__kernel_rem_pio2+0x344>)
 8009582:	2200      	movs	r2, #0
 8009584:	f7f7 fa76 	bl	8000a74 <__aeabi_dcmpge>
 8009588:	2800      	cmp	r0, #0
 800958a:	d139      	bne.n	8009600 <__kernel_rem_pio2+0x2e0>
 800958c:	9002      	str	r0, [sp, #8]
 800958e:	2200      	movs	r2, #0
 8009590:	2300      	movs	r3, #0
 8009592:	4630      	mov	r0, r6
 8009594:	4639      	mov	r1, r7
 8009596:	f7f7 fa4f 	bl	8000a38 <__aeabi_dcmpeq>
 800959a:	2800      	cmp	r0, #0
 800959c:	f000 80b4 	beq.w	8009708 <__kernel_rem_pio2+0x3e8>
 80095a0:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 80095a4:	465b      	mov	r3, fp
 80095a6:	2200      	movs	r2, #0
 80095a8:	9904      	ldr	r1, [sp, #16]
 80095aa:	428b      	cmp	r3, r1
 80095ac:	da65      	bge.n	800967a <__kernel_rem_pio2+0x35a>
 80095ae:	2a00      	cmp	r2, #0
 80095b0:	d07b      	beq.n	80096aa <__kernel_rem_pio2+0x38a>
 80095b2:	ab0c      	add	r3, sp, #48	; 0x30
 80095b4:	f1aa 0a18 	sub.w	sl, sl, #24
 80095b8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f000 80a0 	beq.w	8009702 <__kernel_rem_pio2+0x3e2>
 80095c2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8009648 <__kernel_rem_pio2+0x328>
 80095c6:	4650      	mov	r0, sl
 80095c8:	f000 fbca 	bl	8009d60 <scalbn>
 80095cc:	4f23      	ldr	r7, [pc, #140]	; (800965c <__kernel_rem_pio2+0x33c>)
 80095ce:	ec55 4b10 	vmov	r4, r5, d0
 80095d2:	46d8      	mov	r8, fp
 80095d4:	2600      	movs	r6, #0
 80095d6:	f1b8 0f00 	cmp.w	r8, #0
 80095da:	f280 80cf 	bge.w	800977c <__kernel_rem_pio2+0x45c>
 80095de:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8009640 <__kernel_rem_pio2+0x320>
 80095e2:	465f      	mov	r7, fp
 80095e4:	f04f 0800 	mov.w	r8, #0
 80095e8:	2f00      	cmp	r7, #0
 80095ea:	f2c0 80fd 	blt.w	80097e8 <__kernel_rem_pio2+0x4c8>
 80095ee:	ab70      	add	r3, sp, #448	; 0x1c0
 80095f0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8009668 <__kernel_rem_pio2+0x348>
 80095f4:	ec55 4b18 	vmov	r4, r5, d8
 80095f8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80095fc:	2600      	movs	r6, #0
 80095fe:	e0e5      	b.n	80097cc <__kernel_rem_pio2+0x4ac>
 8009600:	2302      	movs	r3, #2
 8009602:	9302      	str	r3, [sp, #8]
 8009604:	e75c      	b.n	80094c0 <__kernel_rem_pio2+0x1a0>
 8009606:	f8db 3000 	ldr.w	r3, [fp]
 800960a:	b955      	cbnz	r5, 8009622 <__kernel_rem_pio2+0x302>
 800960c:	b123      	cbz	r3, 8009618 <__kernel_rem_pio2+0x2f8>
 800960e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009612:	f8cb 3000 	str.w	r3, [fp]
 8009616:	2301      	movs	r3, #1
 8009618:	3201      	adds	r2, #1
 800961a:	f10b 0b04 	add.w	fp, fp, #4
 800961e:	461d      	mov	r5, r3
 8009620:	e755      	b.n	80094ce <__kernel_rem_pio2+0x1ae>
 8009622:	1acb      	subs	r3, r1, r3
 8009624:	f8cb 3000 	str.w	r3, [fp]
 8009628:	462b      	mov	r3, r5
 800962a:	e7f5      	b.n	8009618 <__kernel_rem_pio2+0x2f8>
 800962c:	1e62      	subs	r2, r4, #1
 800962e:	ab0c      	add	r3, sp, #48	; 0x30
 8009630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009634:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009638:	a90c      	add	r1, sp, #48	; 0x30
 800963a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800963e:	e754      	b.n	80094ea <__kernel_rem_pio2+0x1ca>
	...
 800964c:	3ff00000 	.word	0x3ff00000
 8009650:	0800a118 	.word	0x0800a118
 8009654:	40200000 	.word	0x40200000
 8009658:	3ff00000 	.word	0x3ff00000
 800965c:	3e700000 	.word	0x3e700000
 8009660:	41700000 	.word	0x41700000
 8009664:	3fe00000 	.word	0x3fe00000
 8009668:	0800a0d8 	.word	0x0800a0d8
 800966c:	1e62      	subs	r2, r4, #1
 800966e:	ab0c      	add	r3, sp, #48	; 0x30
 8009670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009674:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009678:	e7de      	b.n	8009638 <__kernel_rem_pio2+0x318>
 800967a:	a90c      	add	r1, sp, #48	; 0x30
 800967c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009680:	3b01      	subs	r3, #1
 8009682:	430a      	orrs	r2, r1
 8009684:	e790      	b.n	80095a8 <__kernel_rem_pio2+0x288>
 8009686:	3301      	adds	r3, #1
 8009688:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800968c:	2900      	cmp	r1, #0
 800968e:	d0fa      	beq.n	8009686 <__kernel_rem_pio2+0x366>
 8009690:	9a08      	ldr	r2, [sp, #32]
 8009692:	18e3      	adds	r3, r4, r3
 8009694:	18a6      	adds	r6, r4, r2
 8009696:	aa20      	add	r2, sp, #128	; 0x80
 8009698:	1c65      	adds	r5, r4, #1
 800969a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800969e:	9302      	str	r3, [sp, #8]
 80096a0:	9b02      	ldr	r3, [sp, #8]
 80096a2:	42ab      	cmp	r3, r5
 80096a4:	da04      	bge.n	80096b0 <__kernel_rem_pio2+0x390>
 80096a6:	461c      	mov	r4, r3
 80096a8:	e6b5      	b.n	8009416 <__kernel_rem_pio2+0xf6>
 80096aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096ac:	2301      	movs	r3, #1
 80096ae:	e7eb      	b.n	8009688 <__kernel_rem_pio2+0x368>
 80096b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80096b6:	f7f6 feed 	bl	8000494 <__aeabi_i2d>
 80096ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 80096be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096c0:	46b3      	mov	fp, r6
 80096c2:	461c      	mov	r4, r3
 80096c4:	2700      	movs	r7, #0
 80096c6:	f04f 0800 	mov.w	r8, #0
 80096ca:	f04f 0900 	mov.w	r9, #0
 80096ce:	9b06      	ldr	r3, [sp, #24]
 80096d0:	429f      	cmp	r7, r3
 80096d2:	dd06      	ble.n	80096e2 <__kernel_rem_pio2+0x3c2>
 80096d4:	ab70      	add	r3, sp, #448	; 0x1c0
 80096d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80096da:	e9c3 8900 	strd	r8, r9, [r3]
 80096de:	3501      	adds	r5, #1
 80096e0:	e7de      	b.n	80096a0 <__kernel_rem_pio2+0x380>
 80096e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80096e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80096ea:	f7f6 ff3d 	bl	8000568 <__aeabi_dmul>
 80096ee:	4602      	mov	r2, r0
 80096f0:	460b      	mov	r3, r1
 80096f2:	4640      	mov	r0, r8
 80096f4:	4649      	mov	r1, r9
 80096f6:	f7f6 fd81 	bl	80001fc <__adddf3>
 80096fa:	3701      	adds	r7, #1
 80096fc:	4680      	mov	r8, r0
 80096fe:	4689      	mov	r9, r1
 8009700:	e7e5      	b.n	80096ce <__kernel_rem_pio2+0x3ae>
 8009702:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009706:	e754      	b.n	80095b2 <__kernel_rem_pio2+0x292>
 8009708:	ec47 6b10 	vmov	d0, r6, r7
 800970c:	f1ca 0000 	rsb	r0, sl, #0
 8009710:	f000 fb26 	bl	8009d60 <scalbn>
 8009714:	ec57 6b10 	vmov	r6, r7, d0
 8009718:	4b9f      	ldr	r3, [pc, #636]	; (8009998 <__kernel_rem_pio2+0x678>)
 800971a:	ee10 0a10 	vmov	r0, s0
 800971e:	2200      	movs	r2, #0
 8009720:	4639      	mov	r1, r7
 8009722:	f7f7 f9a7 	bl	8000a74 <__aeabi_dcmpge>
 8009726:	b300      	cbz	r0, 800976a <__kernel_rem_pio2+0x44a>
 8009728:	4b9c      	ldr	r3, [pc, #624]	; (800999c <__kernel_rem_pio2+0x67c>)
 800972a:	2200      	movs	r2, #0
 800972c:	4630      	mov	r0, r6
 800972e:	4639      	mov	r1, r7
 8009730:	f7f6 ff1a 	bl	8000568 <__aeabi_dmul>
 8009734:	f7f7 f9c8 	bl	8000ac8 <__aeabi_d2iz>
 8009738:	4605      	mov	r5, r0
 800973a:	f7f6 feab 	bl	8000494 <__aeabi_i2d>
 800973e:	4b96      	ldr	r3, [pc, #600]	; (8009998 <__kernel_rem_pio2+0x678>)
 8009740:	2200      	movs	r2, #0
 8009742:	f7f6 ff11 	bl	8000568 <__aeabi_dmul>
 8009746:	460b      	mov	r3, r1
 8009748:	4602      	mov	r2, r0
 800974a:	4639      	mov	r1, r7
 800974c:	4630      	mov	r0, r6
 800974e:	f7f6 fd53 	bl	80001f8 <__aeabi_dsub>
 8009752:	f7f7 f9b9 	bl	8000ac8 <__aeabi_d2iz>
 8009756:	f104 0b01 	add.w	fp, r4, #1
 800975a:	ab0c      	add	r3, sp, #48	; 0x30
 800975c:	f10a 0a18 	add.w	sl, sl, #24
 8009760:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009764:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8009768:	e72b      	b.n	80095c2 <__kernel_rem_pio2+0x2a2>
 800976a:	4630      	mov	r0, r6
 800976c:	4639      	mov	r1, r7
 800976e:	f7f7 f9ab 	bl	8000ac8 <__aeabi_d2iz>
 8009772:	ab0c      	add	r3, sp, #48	; 0x30
 8009774:	46a3      	mov	fp, r4
 8009776:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800977a:	e722      	b.n	80095c2 <__kernel_rem_pio2+0x2a2>
 800977c:	ab70      	add	r3, sp, #448	; 0x1c0
 800977e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8009782:	ab0c      	add	r3, sp, #48	; 0x30
 8009784:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009788:	f7f6 fe84 	bl	8000494 <__aeabi_i2d>
 800978c:	4622      	mov	r2, r4
 800978e:	462b      	mov	r3, r5
 8009790:	f7f6 feea 	bl	8000568 <__aeabi_dmul>
 8009794:	4632      	mov	r2, r6
 8009796:	e9c9 0100 	strd	r0, r1, [r9]
 800979a:	463b      	mov	r3, r7
 800979c:	4620      	mov	r0, r4
 800979e:	4629      	mov	r1, r5
 80097a0:	f7f6 fee2 	bl	8000568 <__aeabi_dmul>
 80097a4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80097a8:	4604      	mov	r4, r0
 80097aa:	460d      	mov	r5, r1
 80097ac:	e713      	b.n	80095d6 <__kernel_rem_pio2+0x2b6>
 80097ae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80097b2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80097b6:	f7f6 fed7 	bl	8000568 <__aeabi_dmul>
 80097ba:	4602      	mov	r2, r0
 80097bc:	460b      	mov	r3, r1
 80097be:	4620      	mov	r0, r4
 80097c0:	4629      	mov	r1, r5
 80097c2:	f7f6 fd1b 	bl	80001fc <__adddf3>
 80097c6:	3601      	adds	r6, #1
 80097c8:	4604      	mov	r4, r0
 80097ca:	460d      	mov	r5, r1
 80097cc:	9b04      	ldr	r3, [sp, #16]
 80097ce:	429e      	cmp	r6, r3
 80097d0:	dc01      	bgt.n	80097d6 <__kernel_rem_pio2+0x4b6>
 80097d2:	45b0      	cmp	r8, r6
 80097d4:	daeb      	bge.n	80097ae <__kernel_rem_pio2+0x48e>
 80097d6:	ab48      	add	r3, sp, #288	; 0x120
 80097d8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80097dc:	e9c3 4500 	strd	r4, r5, [r3]
 80097e0:	3f01      	subs	r7, #1
 80097e2:	f108 0801 	add.w	r8, r8, #1
 80097e6:	e6ff      	b.n	80095e8 <__kernel_rem_pio2+0x2c8>
 80097e8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	dc0b      	bgt.n	8009806 <__kernel_rem_pio2+0x4e6>
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	dc6e      	bgt.n	80098d0 <__kernel_rem_pio2+0x5b0>
 80097f2:	d045      	beq.n	8009880 <__kernel_rem_pio2+0x560>
 80097f4:	9b07      	ldr	r3, [sp, #28]
 80097f6:	f003 0007 	and.w	r0, r3, #7
 80097fa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80097fe:	ecbd 8b02 	vpop	{d8}
 8009802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009806:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009808:	2b03      	cmp	r3, #3
 800980a:	d1f3      	bne.n	80097f4 <__kernel_rem_pio2+0x4d4>
 800980c:	ab48      	add	r3, sp, #288	; 0x120
 800980e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8009812:	46d0      	mov	r8, sl
 8009814:	46d9      	mov	r9, fp
 8009816:	f1b9 0f00 	cmp.w	r9, #0
 800981a:	f1a8 0808 	sub.w	r8, r8, #8
 800981e:	dc64      	bgt.n	80098ea <__kernel_rem_pio2+0x5ca>
 8009820:	465c      	mov	r4, fp
 8009822:	2c01      	cmp	r4, #1
 8009824:	f1aa 0a08 	sub.w	sl, sl, #8
 8009828:	dc7e      	bgt.n	8009928 <__kernel_rem_pio2+0x608>
 800982a:	2000      	movs	r0, #0
 800982c:	2100      	movs	r1, #0
 800982e:	f1bb 0f01 	cmp.w	fp, #1
 8009832:	f300 8097 	bgt.w	8009964 <__kernel_rem_pio2+0x644>
 8009836:	9b02      	ldr	r3, [sp, #8]
 8009838:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800983c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8009840:	2b00      	cmp	r3, #0
 8009842:	f040 8099 	bne.w	8009978 <__kernel_rem_pio2+0x658>
 8009846:	9b01      	ldr	r3, [sp, #4]
 8009848:	e9c3 5600 	strd	r5, r6, [r3]
 800984c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009850:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009854:	e7ce      	b.n	80097f4 <__kernel_rem_pio2+0x4d4>
 8009856:	ab48      	add	r3, sp, #288	; 0x120
 8009858:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800985c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009860:	f7f6 fccc 	bl	80001fc <__adddf3>
 8009864:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009868:	f1bb 0f00 	cmp.w	fp, #0
 800986c:	daf3      	bge.n	8009856 <__kernel_rem_pio2+0x536>
 800986e:	9b02      	ldr	r3, [sp, #8]
 8009870:	b113      	cbz	r3, 8009878 <__kernel_rem_pio2+0x558>
 8009872:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009876:	4619      	mov	r1, r3
 8009878:	9b01      	ldr	r3, [sp, #4]
 800987a:	e9c3 0100 	strd	r0, r1, [r3]
 800987e:	e7b9      	b.n	80097f4 <__kernel_rem_pio2+0x4d4>
 8009880:	2000      	movs	r0, #0
 8009882:	2100      	movs	r1, #0
 8009884:	e7f0      	b.n	8009868 <__kernel_rem_pio2+0x548>
 8009886:	ab48      	add	r3, sp, #288	; 0x120
 8009888:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800988c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009890:	f7f6 fcb4 	bl	80001fc <__adddf3>
 8009894:	3c01      	subs	r4, #1
 8009896:	2c00      	cmp	r4, #0
 8009898:	daf5      	bge.n	8009886 <__kernel_rem_pio2+0x566>
 800989a:	9b02      	ldr	r3, [sp, #8]
 800989c:	b1e3      	cbz	r3, 80098d8 <__kernel_rem_pio2+0x5b8>
 800989e:	4602      	mov	r2, r0
 80098a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098a4:	9c01      	ldr	r4, [sp, #4]
 80098a6:	e9c4 2300 	strd	r2, r3, [r4]
 80098aa:	4602      	mov	r2, r0
 80098ac:	460b      	mov	r3, r1
 80098ae:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80098b2:	f7f6 fca1 	bl	80001f8 <__aeabi_dsub>
 80098b6:	ad4a      	add	r5, sp, #296	; 0x128
 80098b8:	2401      	movs	r4, #1
 80098ba:	45a3      	cmp	fp, r4
 80098bc:	da0f      	bge.n	80098de <__kernel_rem_pio2+0x5be>
 80098be:	9b02      	ldr	r3, [sp, #8]
 80098c0:	b113      	cbz	r3, 80098c8 <__kernel_rem_pio2+0x5a8>
 80098c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098c6:	4619      	mov	r1, r3
 80098c8:	9b01      	ldr	r3, [sp, #4]
 80098ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80098ce:	e791      	b.n	80097f4 <__kernel_rem_pio2+0x4d4>
 80098d0:	465c      	mov	r4, fp
 80098d2:	2000      	movs	r0, #0
 80098d4:	2100      	movs	r1, #0
 80098d6:	e7de      	b.n	8009896 <__kernel_rem_pio2+0x576>
 80098d8:	4602      	mov	r2, r0
 80098da:	460b      	mov	r3, r1
 80098dc:	e7e2      	b.n	80098a4 <__kernel_rem_pio2+0x584>
 80098de:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80098e2:	f7f6 fc8b 	bl	80001fc <__adddf3>
 80098e6:	3401      	adds	r4, #1
 80098e8:	e7e7      	b.n	80098ba <__kernel_rem_pio2+0x59a>
 80098ea:	e9d8 4500 	ldrd	r4, r5, [r8]
 80098ee:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80098f2:	4620      	mov	r0, r4
 80098f4:	4632      	mov	r2, r6
 80098f6:	463b      	mov	r3, r7
 80098f8:	4629      	mov	r1, r5
 80098fa:	f7f6 fc7f 	bl	80001fc <__adddf3>
 80098fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	4620      	mov	r0, r4
 8009908:	4629      	mov	r1, r5
 800990a:	f7f6 fc75 	bl	80001f8 <__aeabi_dsub>
 800990e:	4632      	mov	r2, r6
 8009910:	463b      	mov	r3, r7
 8009912:	f7f6 fc73 	bl	80001fc <__adddf3>
 8009916:	ed9d 7b04 	vldr	d7, [sp, #16]
 800991a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800991e:	ed88 7b00 	vstr	d7, [r8]
 8009922:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009926:	e776      	b.n	8009816 <__kernel_rem_pio2+0x4f6>
 8009928:	e9da 8900 	ldrd	r8, r9, [sl]
 800992c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009930:	4640      	mov	r0, r8
 8009932:	4632      	mov	r2, r6
 8009934:	463b      	mov	r3, r7
 8009936:	4649      	mov	r1, r9
 8009938:	f7f6 fc60 	bl	80001fc <__adddf3>
 800993c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009940:	4602      	mov	r2, r0
 8009942:	460b      	mov	r3, r1
 8009944:	4640      	mov	r0, r8
 8009946:	4649      	mov	r1, r9
 8009948:	f7f6 fc56 	bl	80001f8 <__aeabi_dsub>
 800994c:	4632      	mov	r2, r6
 800994e:	463b      	mov	r3, r7
 8009950:	f7f6 fc54 	bl	80001fc <__adddf3>
 8009954:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009958:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800995c:	ed8a 7b00 	vstr	d7, [sl]
 8009960:	3c01      	subs	r4, #1
 8009962:	e75e      	b.n	8009822 <__kernel_rem_pio2+0x502>
 8009964:	ab48      	add	r3, sp, #288	; 0x120
 8009966:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800996a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996e:	f7f6 fc45 	bl	80001fc <__adddf3>
 8009972:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009976:	e75a      	b.n	800982e <__kernel_rem_pio2+0x50e>
 8009978:	9b01      	ldr	r3, [sp, #4]
 800997a:	9a01      	ldr	r2, [sp, #4]
 800997c:	601d      	str	r5, [r3, #0]
 800997e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009982:	605c      	str	r4, [r3, #4]
 8009984:	609f      	str	r7, [r3, #8]
 8009986:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800998a:	60d3      	str	r3, [r2, #12]
 800998c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009990:	6110      	str	r0, [r2, #16]
 8009992:	6153      	str	r3, [r2, #20]
 8009994:	e72e      	b.n	80097f4 <__kernel_rem_pio2+0x4d4>
 8009996:	bf00      	nop
 8009998:	41700000 	.word	0x41700000
 800999c:	3e700000 	.word	0x3e700000

080099a0 <__kernel_sin>:
 80099a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a4:	ed2d 8b04 	vpush	{d8-d9}
 80099a8:	eeb0 8a41 	vmov.f32	s16, s2
 80099ac:	eef0 8a61 	vmov.f32	s17, s3
 80099b0:	ec55 4b10 	vmov	r4, r5, d0
 80099b4:	b083      	sub	sp, #12
 80099b6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80099ba:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80099be:	9001      	str	r0, [sp, #4]
 80099c0:	da06      	bge.n	80099d0 <__kernel_sin+0x30>
 80099c2:	ee10 0a10 	vmov	r0, s0
 80099c6:	4629      	mov	r1, r5
 80099c8:	f7f7 f87e 	bl	8000ac8 <__aeabi_d2iz>
 80099cc:	2800      	cmp	r0, #0
 80099ce:	d051      	beq.n	8009a74 <__kernel_sin+0xd4>
 80099d0:	4622      	mov	r2, r4
 80099d2:	462b      	mov	r3, r5
 80099d4:	4620      	mov	r0, r4
 80099d6:	4629      	mov	r1, r5
 80099d8:	f7f6 fdc6 	bl	8000568 <__aeabi_dmul>
 80099dc:	4682      	mov	sl, r0
 80099de:	468b      	mov	fp, r1
 80099e0:	4602      	mov	r2, r0
 80099e2:	460b      	mov	r3, r1
 80099e4:	4620      	mov	r0, r4
 80099e6:	4629      	mov	r1, r5
 80099e8:	f7f6 fdbe 	bl	8000568 <__aeabi_dmul>
 80099ec:	a341      	add	r3, pc, #260	; (adr r3, 8009af4 <__kernel_sin+0x154>)
 80099ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f2:	4680      	mov	r8, r0
 80099f4:	4689      	mov	r9, r1
 80099f6:	4650      	mov	r0, sl
 80099f8:	4659      	mov	r1, fp
 80099fa:	f7f6 fdb5 	bl	8000568 <__aeabi_dmul>
 80099fe:	a33f      	add	r3, pc, #252	; (adr r3, 8009afc <__kernel_sin+0x15c>)
 8009a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a04:	f7f6 fbf8 	bl	80001f8 <__aeabi_dsub>
 8009a08:	4652      	mov	r2, sl
 8009a0a:	465b      	mov	r3, fp
 8009a0c:	f7f6 fdac 	bl	8000568 <__aeabi_dmul>
 8009a10:	a33c      	add	r3, pc, #240	; (adr r3, 8009b04 <__kernel_sin+0x164>)
 8009a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a16:	f7f6 fbf1 	bl	80001fc <__adddf3>
 8009a1a:	4652      	mov	r2, sl
 8009a1c:	465b      	mov	r3, fp
 8009a1e:	f7f6 fda3 	bl	8000568 <__aeabi_dmul>
 8009a22:	a33a      	add	r3, pc, #232	; (adr r3, 8009b0c <__kernel_sin+0x16c>)
 8009a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a28:	f7f6 fbe6 	bl	80001f8 <__aeabi_dsub>
 8009a2c:	4652      	mov	r2, sl
 8009a2e:	465b      	mov	r3, fp
 8009a30:	f7f6 fd9a 	bl	8000568 <__aeabi_dmul>
 8009a34:	a337      	add	r3, pc, #220	; (adr r3, 8009b14 <__kernel_sin+0x174>)
 8009a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3a:	f7f6 fbdf 	bl	80001fc <__adddf3>
 8009a3e:	9b01      	ldr	r3, [sp, #4]
 8009a40:	4606      	mov	r6, r0
 8009a42:	460f      	mov	r7, r1
 8009a44:	b9eb      	cbnz	r3, 8009a82 <__kernel_sin+0xe2>
 8009a46:	4602      	mov	r2, r0
 8009a48:	460b      	mov	r3, r1
 8009a4a:	4650      	mov	r0, sl
 8009a4c:	4659      	mov	r1, fp
 8009a4e:	f7f6 fd8b 	bl	8000568 <__aeabi_dmul>
 8009a52:	a325      	add	r3, pc, #148	; (adr r3, 8009ae8 <__kernel_sin+0x148>)
 8009a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a58:	f7f6 fbce 	bl	80001f8 <__aeabi_dsub>
 8009a5c:	4642      	mov	r2, r8
 8009a5e:	464b      	mov	r3, r9
 8009a60:	f7f6 fd82 	bl	8000568 <__aeabi_dmul>
 8009a64:	4602      	mov	r2, r0
 8009a66:	460b      	mov	r3, r1
 8009a68:	4620      	mov	r0, r4
 8009a6a:	4629      	mov	r1, r5
 8009a6c:	f7f6 fbc6 	bl	80001fc <__adddf3>
 8009a70:	4604      	mov	r4, r0
 8009a72:	460d      	mov	r5, r1
 8009a74:	ec45 4b10 	vmov	d0, r4, r5
 8009a78:	b003      	add	sp, #12
 8009a7a:	ecbd 8b04 	vpop	{d8-d9}
 8009a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a82:	4b1b      	ldr	r3, [pc, #108]	; (8009af0 <__kernel_sin+0x150>)
 8009a84:	ec51 0b18 	vmov	r0, r1, d8
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f7f6 fd6d 	bl	8000568 <__aeabi_dmul>
 8009a8e:	4632      	mov	r2, r6
 8009a90:	ec41 0b19 	vmov	d9, r0, r1
 8009a94:	463b      	mov	r3, r7
 8009a96:	4640      	mov	r0, r8
 8009a98:	4649      	mov	r1, r9
 8009a9a:	f7f6 fd65 	bl	8000568 <__aeabi_dmul>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	ec51 0b19 	vmov	r0, r1, d9
 8009aa6:	f7f6 fba7 	bl	80001f8 <__aeabi_dsub>
 8009aaa:	4652      	mov	r2, sl
 8009aac:	465b      	mov	r3, fp
 8009aae:	f7f6 fd5b 	bl	8000568 <__aeabi_dmul>
 8009ab2:	ec53 2b18 	vmov	r2, r3, d8
 8009ab6:	f7f6 fb9f 	bl	80001f8 <__aeabi_dsub>
 8009aba:	a30b      	add	r3, pc, #44	; (adr r3, 8009ae8 <__kernel_sin+0x148>)
 8009abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac0:	4606      	mov	r6, r0
 8009ac2:	460f      	mov	r7, r1
 8009ac4:	4640      	mov	r0, r8
 8009ac6:	4649      	mov	r1, r9
 8009ac8:	f7f6 fd4e 	bl	8000568 <__aeabi_dmul>
 8009acc:	4602      	mov	r2, r0
 8009ace:	460b      	mov	r3, r1
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	4639      	mov	r1, r7
 8009ad4:	f7f6 fb92 	bl	80001fc <__adddf3>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	460b      	mov	r3, r1
 8009adc:	4620      	mov	r0, r4
 8009ade:	4629      	mov	r1, r5
 8009ae0:	f7f6 fb8a 	bl	80001f8 <__aeabi_dsub>
 8009ae4:	e7c4      	b.n	8009a70 <__kernel_sin+0xd0>
 8009ae6:	bf00      	nop
 8009ae8:	55555549 	.word	0x55555549
 8009aec:	3fc55555 	.word	0x3fc55555
 8009af0:	3fe00000 	.word	0x3fe00000
 8009af4:	5acfd57c 	.word	0x5acfd57c
 8009af8:	3de5d93a 	.word	0x3de5d93a
 8009afc:	8a2b9ceb 	.word	0x8a2b9ceb
 8009b00:	3e5ae5e6 	.word	0x3e5ae5e6
 8009b04:	57b1fe7d 	.word	0x57b1fe7d
 8009b08:	3ec71de3 	.word	0x3ec71de3
 8009b0c:	19c161d5 	.word	0x19c161d5
 8009b10:	3f2a01a0 	.word	0x3f2a01a0
 8009b14:	1110f8a6 	.word	0x1110f8a6
 8009b18:	3f811111 	.word	0x3f811111

08009b1c <finite>:
 8009b1c:	b082      	sub	sp, #8
 8009b1e:	ed8d 0b00 	vstr	d0, [sp]
 8009b22:	9801      	ldr	r0, [sp, #4]
 8009b24:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009b28:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009b2c:	0fc0      	lsrs	r0, r0, #31
 8009b2e:	b002      	add	sp, #8
 8009b30:	4770      	bx	lr
 8009b32:	0000      	movs	r0, r0
 8009b34:	0000      	movs	r0, r0
	...

08009b38 <floor>:
 8009b38:	ec51 0b10 	vmov	r0, r1, d0
 8009b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b40:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009b44:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009b48:	2e13      	cmp	r6, #19
 8009b4a:	ee10 5a10 	vmov	r5, s0
 8009b4e:	ee10 8a10 	vmov	r8, s0
 8009b52:	460c      	mov	r4, r1
 8009b54:	dc32      	bgt.n	8009bbc <floor+0x84>
 8009b56:	2e00      	cmp	r6, #0
 8009b58:	da14      	bge.n	8009b84 <floor+0x4c>
 8009b5a:	a333      	add	r3, pc, #204	; (adr r3, 8009c28 <floor+0xf0>)
 8009b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b60:	f7f6 fb4c 	bl	80001fc <__adddf3>
 8009b64:	2200      	movs	r2, #0
 8009b66:	2300      	movs	r3, #0
 8009b68:	f7f6 ff8e 	bl	8000a88 <__aeabi_dcmpgt>
 8009b6c:	b138      	cbz	r0, 8009b7e <floor+0x46>
 8009b6e:	2c00      	cmp	r4, #0
 8009b70:	da57      	bge.n	8009c22 <floor+0xea>
 8009b72:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009b76:	431d      	orrs	r5, r3
 8009b78:	d001      	beq.n	8009b7e <floor+0x46>
 8009b7a:	4c2d      	ldr	r4, [pc, #180]	; (8009c30 <floor+0xf8>)
 8009b7c:	2500      	movs	r5, #0
 8009b7e:	4621      	mov	r1, r4
 8009b80:	4628      	mov	r0, r5
 8009b82:	e025      	b.n	8009bd0 <floor+0x98>
 8009b84:	4f2b      	ldr	r7, [pc, #172]	; (8009c34 <floor+0xfc>)
 8009b86:	4137      	asrs	r7, r6
 8009b88:	ea01 0307 	and.w	r3, r1, r7
 8009b8c:	4303      	orrs	r3, r0
 8009b8e:	d01f      	beq.n	8009bd0 <floor+0x98>
 8009b90:	a325      	add	r3, pc, #148	; (adr r3, 8009c28 <floor+0xf0>)
 8009b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b96:	f7f6 fb31 	bl	80001fc <__adddf3>
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	f7f6 ff73 	bl	8000a88 <__aeabi_dcmpgt>
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	d0eb      	beq.n	8009b7e <floor+0x46>
 8009ba6:	2c00      	cmp	r4, #0
 8009ba8:	bfbe      	ittt	lt
 8009baa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009bae:	fa43 f606 	asrlt.w	r6, r3, r6
 8009bb2:	19a4      	addlt	r4, r4, r6
 8009bb4:	ea24 0407 	bic.w	r4, r4, r7
 8009bb8:	2500      	movs	r5, #0
 8009bba:	e7e0      	b.n	8009b7e <floor+0x46>
 8009bbc:	2e33      	cmp	r6, #51	; 0x33
 8009bbe:	dd0b      	ble.n	8009bd8 <floor+0xa0>
 8009bc0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009bc4:	d104      	bne.n	8009bd0 <floor+0x98>
 8009bc6:	ee10 2a10 	vmov	r2, s0
 8009bca:	460b      	mov	r3, r1
 8009bcc:	f7f6 fb16 	bl	80001fc <__adddf3>
 8009bd0:	ec41 0b10 	vmov	d0, r0, r1
 8009bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bd8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009bdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009be0:	fa23 f707 	lsr.w	r7, r3, r7
 8009be4:	4207      	tst	r7, r0
 8009be6:	d0f3      	beq.n	8009bd0 <floor+0x98>
 8009be8:	a30f      	add	r3, pc, #60	; (adr r3, 8009c28 <floor+0xf0>)
 8009bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bee:	f7f6 fb05 	bl	80001fc <__adddf3>
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	f7f6 ff47 	bl	8000a88 <__aeabi_dcmpgt>
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	d0bf      	beq.n	8009b7e <floor+0x46>
 8009bfe:	2c00      	cmp	r4, #0
 8009c00:	da02      	bge.n	8009c08 <floor+0xd0>
 8009c02:	2e14      	cmp	r6, #20
 8009c04:	d103      	bne.n	8009c0e <floor+0xd6>
 8009c06:	3401      	adds	r4, #1
 8009c08:	ea25 0507 	bic.w	r5, r5, r7
 8009c0c:	e7b7      	b.n	8009b7e <floor+0x46>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009c14:	fa03 f606 	lsl.w	r6, r3, r6
 8009c18:	4435      	add	r5, r6
 8009c1a:	4545      	cmp	r5, r8
 8009c1c:	bf38      	it	cc
 8009c1e:	18e4      	addcc	r4, r4, r3
 8009c20:	e7f2      	b.n	8009c08 <floor+0xd0>
 8009c22:	2500      	movs	r5, #0
 8009c24:	462c      	mov	r4, r5
 8009c26:	e7aa      	b.n	8009b7e <floor+0x46>
 8009c28:	8800759c 	.word	0x8800759c
 8009c2c:	7e37e43c 	.word	0x7e37e43c
 8009c30:	bff00000 	.word	0xbff00000
 8009c34:	000fffff 	.word	0x000fffff

08009c38 <nan>:
 8009c38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009c40 <nan+0x8>
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop
 8009c40:	00000000 	.word	0x00000000
 8009c44:	7ff80000 	.word	0x7ff80000

08009c48 <rint>:
 8009c48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c4a:	ec51 0b10 	vmov	r0, r1, d0
 8009c4e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009c52:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009c56:	2e13      	cmp	r6, #19
 8009c58:	ee10 4a10 	vmov	r4, s0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009c62:	dc58      	bgt.n	8009d16 <rint+0xce>
 8009c64:	2e00      	cmp	r6, #0
 8009c66:	da2b      	bge.n	8009cc0 <rint+0x78>
 8009c68:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009c6c:	4302      	orrs	r2, r0
 8009c6e:	d023      	beq.n	8009cb8 <rint+0x70>
 8009c70:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009c74:	4302      	orrs	r2, r0
 8009c76:	4254      	negs	r4, r2
 8009c78:	4314      	orrs	r4, r2
 8009c7a:	0c4b      	lsrs	r3, r1, #17
 8009c7c:	0b24      	lsrs	r4, r4, #12
 8009c7e:	045b      	lsls	r3, r3, #17
 8009c80:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8009c84:	ea44 0103 	orr.w	r1, r4, r3
 8009c88:	4b32      	ldr	r3, [pc, #200]	; (8009d54 <rint+0x10c>)
 8009c8a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009c8e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009c92:	4602      	mov	r2, r0
 8009c94:	460b      	mov	r3, r1
 8009c96:	4630      	mov	r0, r6
 8009c98:	4639      	mov	r1, r7
 8009c9a:	f7f6 faaf 	bl	80001fc <__adddf3>
 8009c9e:	e9cd 0100 	strd	r0, r1, [sp]
 8009ca2:	463b      	mov	r3, r7
 8009ca4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ca8:	4632      	mov	r2, r6
 8009caa:	f7f6 faa5 	bl	80001f8 <__aeabi_dsub>
 8009cae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009cb2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8009cb6:	4639      	mov	r1, r7
 8009cb8:	ec41 0b10 	vmov	d0, r0, r1
 8009cbc:	b003      	add	sp, #12
 8009cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cc0:	4a25      	ldr	r2, [pc, #148]	; (8009d58 <rint+0x110>)
 8009cc2:	4132      	asrs	r2, r6
 8009cc4:	ea01 0702 	and.w	r7, r1, r2
 8009cc8:	4307      	orrs	r7, r0
 8009cca:	d0f5      	beq.n	8009cb8 <rint+0x70>
 8009ccc:	0851      	lsrs	r1, r2, #1
 8009cce:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8009cd2:	4314      	orrs	r4, r2
 8009cd4:	d00c      	beq.n	8009cf0 <rint+0xa8>
 8009cd6:	ea23 0201 	bic.w	r2, r3, r1
 8009cda:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009cde:	2e13      	cmp	r6, #19
 8009ce0:	fa43 f606 	asr.w	r6, r3, r6
 8009ce4:	bf0c      	ite	eq
 8009ce6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009cea:	2400      	movne	r4, #0
 8009cec:	ea42 0306 	orr.w	r3, r2, r6
 8009cf0:	4918      	ldr	r1, [pc, #96]	; (8009d54 <rint+0x10c>)
 8009cf2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8009cf6:	4622      	mov	r2, r4
 8009cf8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	4629      	mov	r1, r5
 8009d00:	f7f6 fa7c 	bl	80001fc <__adddf3>
 8009d04:	e9cd 0100 	strd	r0, r1, [sp]
 8009d08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d0c:	4622      	mov	r2, r4
 8009d0e:	462b      	mov	r3, r5
 8009d10:	f7f6 fa72 	bl	80001f8 <__aeabi_dsub>
 8009d14:	e7d0      	b.n	8009cb8 <rint+0x70>
 8009d16:	2e33      	cmp	r6, #51	; 0x33
 8009d18:	dd07      	ble.n	8009d2a <rint+0xe2>
 8009d1a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009d1e:	d1cb      	bne.n	8009cb8 <rint+0x70>
 8009d20:	ee10 2a10 	vmov	r2, s0
 8009d24:	f7f6 fa6a 	bl	80001fc <__adddf3>
 8009d28:	e7c6      	b.n	8009cb8 <rint+0x70>
 8009d2a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8009d2e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8009d32:	40d6      	lsrs	r6, r2
 8009d34:	4230      	tst	r0, r6
 8009d36:	d0bf      	beq.n	8009cb8 <rint+0x70>
 8009d38:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8009d3c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8009d40:	bf1f      	itttt	ne
 8009d42:	ea24 0101 	bicne.w	r1, r4, r1
 8009d46:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8009d4a:	fa44 f202 	asrne.w	r2, r4, r2
 8009d4e:	ea41 0402 	orrne.w	r4, r1, r2
 8009d52:	e7cd      	b.n	8009cf0 <rint+0xa8>
 8009d54:	0800a128 	.word	0x0800a128
 8009d58:	000fffff 	.word	0x000fffff
 8009d5c:	00000000 	.word	0x00000000

08009d60 <scalbn>:
 8009d60:	b570      	push	{r4, r5, r6, lr}
 8009d62:	ec55 4b10 	vmov	r4, r5, d0
 8009d66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009d6a:	4606      	mov	r6, r0
 8009d6c:	462b      	mov	r3, r5
 8009d6e:	b99a      	cbnz	r2, 8009d98 <scalbn+0x38>
 8009d70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009d74:	4323      	orrs	r3, r4
 8009d76:	d036      	beq.n	8009de6 <scalbn+0x86>
 8009d78:	4b39      	ldr	r3, [pc, #228]	; (8009e60 <scalbn+0x100>)
 8009d7a:	4629      	mov	r1, r5
 8009d7c:	ee10 0a10 	vmov	r0, s0
 8009d80:	2200      	movs	r2, #0
 8009d82:	f7f6 fbf1 	bl	8000568 <__aeabi_dmul>
 8009d86:	4b37      	ldr	r3, [pc, #220]	; (8009e64 <scalbn+0x104>)
 8009d88:	429e      	cmp	r6, r3
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	460d      	mov	r5, r1
 8009d8e:	da10      	bge.n	8009db2 <scalbn+0x52>
 8009d90:	a32b      	add	r3, pc, #172	; (adr r3, 8009e40 <scalbn+0xe0>)
 8009d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d96:	e03a      	b.n	8009e0e <scalbn+0xae>
 8009d98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009d9c:	428a      	cmp	r2, r1
 8009d9e:	d10c      	bne.n	8009dba <scalbn+0x5a>
 8009da0:	ee10 2a10 	vmov	r2, s0
 8009da4:	4620      	mov	r0, r4
 8009da6:	4629      	mov	r1, r5
 8009da8:	f7f6 fa28 	bl	80001fc <__adddf3>
 8009dac:	4604      	mov	r4, r0
 8009dae:	460d      	mov	r5, r1
 8009db0:	e019      	b.n	8009de6 <scalbn+0x86>
 8009db2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009db6:	460b      	mov	r3, r1
 8009db8:	3a36      	subs	r2, #54	; 0x36
 8009dba:	4432      	add	r2, r6
 8009dbc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009dc0:	428a      	cmp	r2, r1
 8009dc2:	dd08      	ble.n	8009dd6 <scalbn+0x76>
 8009dc4:	2d00      	cmp	r5, #0
 8009dc6:	a120      	add	r1, pc, #128	; (adr r1, 8009e48 <scalbn+0xe8>)
 8009dc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dcc:	da1c      	bge.n	8009e08 <scalbn+0xa8>
 8009dce:	a120      	add	r1, pc, #128	; (adr r1, 8009e50 <scalbn+0xf0>)
 8009dd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dd4:	e018      	b.n	8009e08 <scalbn+0xa8>
 8009dd6:	2a00      	cmp	r2, #0
 8009dd8:	dd08      	ble.n	8009dec <scalbn+0x8c>
 8009dda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009dde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009de2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009de6:	ec45 4b10 	vmov	d0, r4, r5
 8009dea:	bd70      	pop	{r4, r5, r6, pc}
 8009dec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009df0:	da19      	bge.n	8009e26 <scalbn+0xc6>
 8009df2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009df6:	429e      	cmp	r6, r3
 8009df8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009dfc:	dd0a      	ble.n	8009e14 <scalbn+0xb4>
 8009dfe:	a112      	add	r1, pc, #72	; (adr r1, 8009e48 <scalbn+0xe8>)
 8009e00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d1e2      	bne.n	8009dce <scalbn+0x6e>
 8009e08:	a30f      	add	r3, pc, #60	; (adr r3, 8009e48 <scalbn+0xe8>)
 8009e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0e:	f7f6 fbab 	bl	8000568 <__aeabi_dmul>
 8009e12:	e7cb      	b.n	8009dac <scalbn+0x4c>
 8009e14:	a10a      	add	r1, pc, #40	; (adr r1, 8009e40 <scalbn+0xe0>)
 8009e16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d0b8      	beq.n	8009d90 <scalbn+0x30>
 8009e1e:	a10e      	add	r1, pc, #56	; (adr r1, 8009e58 <scalbn+0xf8>)
 8009e20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e24:	e7b4      	b.n	8009d90 <scalbn+0x30>
 8009e26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009e2a:	3236      	adds	r2, #54	; 0x36
 8009e2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009e30:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009e34:	4620      	mov	r0, r4
 8009e36:	4b0c      	ldr	r3, [pc, #48]	; (8009e68 <scalbn+0x108>)
 8009e38:	2200      	movs	r2, #0
 8009e3a:	e7e8      	b.n	8009e0e <scalbn+0xae>
 8009e3c:	f3af 8000 	nop.w
 8009e40:	c2f8f359 	.word	0xc2f8f359
 8009e44:	01a56e1f 	.word	0x01a56e1f
 8009e48:	8800759c 	.word	0x8800759c
 8009e4c:	7e37e43c 	.word	0x7e37e43c
 8009e50:	8800759c 	.word	0x8800759c
 8009e54:	fe37e43c 	.word	0xfe37e43c
 8009e58:	c2f8f359 	.word	0xc2f8f359
 8009e5c:	81a56e1f 	.word	0x81a56e1f
 8009e60:	43500000 	.word	0x43500000
 8009e64:	ffff3cb0 	.word	0xffff3cb0
 8009e68:	3c900000 	.word	0x3c900000

08009e6c <_init>:
 8009e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6e:	bf00      	nop
 8009e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e72:	bc08      	pop	{r3}
 8009e74:	469e      	mov	lr, r3
 8009e76:	4770      	bx	lr

08009e78 <_fini>:
 8009e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7a:	bf00      	nop
 8009e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e7e:	bc08      	pop	{r3}
 8009e80:	469e      	mov	lr, r3
 8009e82:	4770      	bx	lr
