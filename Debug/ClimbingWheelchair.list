
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007388  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007538  08007538  00017538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007570  08007570  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  08007570  08007570  00017570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007578  08007578  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007578  08007578  00017578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800757c  0800757c  0001757c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  08007580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b0  20000138  080076b4  00020138  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  080076b4  000205e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac76  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bee  00000000  00000000  0003adda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  0003e9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001308  00000000  00000000  0003fe90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000266ac  00000000  00000000  00041198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a79  00000000  00000000  00067844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1cfc  00000000  00000000  000812bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00162fb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000575c  00000000  00000000  0016300c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000138 	.word	0x20000138
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007520 	.word	0x08007520

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000013c 	.word	0x2000013c
 80001ec:	08007520 	.word	0x08007520

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2uiz>:
 8000aec:	004a      	lsls	r2, r1, #1
 8000aee:	d211      	bcs.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d211      	bcs.n	8000b1a <__aeabi_d2uiz+0x2e>
 8000af6:	d50d      	bpl.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d40e      	bmi.n	8000b20 <__aeabi_d2uiz+0x34>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_d2uiz+0x3a>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b40:	f000 b96e 	b.w	8000e20 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9d08      	ldr	r5, [sp, #32]
 8000b62:	4604      	mov	r4, r0
 8000b64:	468c      	mov	ip, r1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8083 	bne.w	8000c72 <__udivmoddi4+0x116>
 8000b6c:	428a      	cmp	r2, r1
 8000b6e:	4617      	mov	r7, r2
 8000b70:	d947      	bls.n	8000c02 <__udivmoddi4+0xa6>
 8000b72:	fab2 f282 	clz	r2, r2
 8000b76:	b142      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b78:	f1c2 0020 	rsb	r0, r2, #32
 8000b7c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b80:	4091      	lsls	r1, r2
 8000b82:	4097      	lsls	r7, r2
 8000b84:	ea40 0c01 	orr.w	ip, r0, r1
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fbbc f6f8 	udiv	r6, ip, r8
 8000b94:	fa1f fe87 	uxth.w	lr, r7
 8000b98:	fb08 c116 	mls	r1, r8, r6, ip
 8000b9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x60>
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bae:	f080 8119 	bcs.w	8000de4 <__udivmoddi4+0x288>
 8000bb2:	4299      	cmp	r1, r3
 8000bb4:	f240 8116 	bls.w	8000de4 <__udivmoddi4+0x288>
 8000bb8:	3e02      	subs	r6, #2
 8000bba:	443b      	add	r3, r7
 8000bbc:	1a5b      	subs	r3, r3, r1
 8000bbe:	b2a4      	uxth	r4, r4
 8000bc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000bc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bcc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bd0:	45a6      	cmp	lr, r4
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x8c>
 8000bd4:	193c      	adds	r4, r7, r4
 8000bd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bda:	f080 8105 	bcs.w	8000de8 <__udivmoddi4+0x28c>
 8000bde:	45a6      	cmp	lr, r4
 8000be0:	f240 8102 	bls.w	8000de8 <__udivmoddi4+0x28c>
 8000be4:	3802      	subs	r0, #2
 8000be6:	443c      	add	r4, r7
 8000be8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bec:	eba4 040e 	sub.w	r4, r4, lr
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	b11d      	cbz	r5, 8000bfc <__udivmoddi4+0xa0>
 8000bf4:	40d4      	lsrs	r4, r2
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bfc:	4631      	mov	r1, r6
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	b902      	cbnz	r2, 8000c06 <__udivmoddi4+0xaa>
 8000c04:	deff      	udf	#255	; 0xff
 8000c06:	fab2 f282 	clz	r2, r2
 8000c0a:	2a00      	cmp	r2, #0
 8000c0c:	d150      	bne.n	8000cb0 <__udivmoddi4+0x154>
 8000c0e:	1bcb      	subs	r3, r1, r7
 8000c10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c14:	fa1f f887 	uxth.w	r8, r7
 8000c18:	2601      	movs	r6, #1
 8000c1a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c1e:	0c21      	lsrs	r1, r4, #16
 8000c20:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c28:	fb08 f30c 	mul.w	r3, r8, ip
 8000c2c:	428b      	cmp	r3, r1
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0xe4>
 8000c30:	1879      	adds	r1, r7, r1
 8000c32:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0xe2>
 8000c38:	428b      	cmp	r3, r1
 8000c3a:	f200 80e9 	bhi.w	8000e10 <__udivmoddi4+0x2b4>
 8000c3e:	4684      	mov	ip, r0
 8000c40:	1ac9      	subs	r1, r1, r3
 8000c42:	b2a3      	uxth	r3, r4
 8000c44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c48:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c4c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c50:	fb08 f800 	mul.w	r8, r8, r0
 8000c54:	45a0      	cmp	r8, r4
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x10c>
 8000c58:	193c      	adds	r4, r7, r4
 8000c5a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x10a>
 8000c60:	45a0      	cmp	r8, r4
 8000c62:	f200 80d9 	bhi.w	8000e18 <__udivmoddi4+0x2bc>
 8000c66:	4618      	mov	r0, r3
 8000c68:	eba4 0408 	sub.w	r4, r4, r8
 8000c6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c70:	e7bf      	b.n	8000bf2 <__udivmoddi4+0x96>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0x12e>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	f000 80b1 	beq.w	8000dde <__udivmoddi4+0x282>
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c82:	4630      	mov	r0, r6
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	fab3 f683 	clz	r6, r3
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d14a      	bne.n	8000d28 <__udivmoddi4+0x1cc>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0x140>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 80b8 	bhi.w	8000e0c <__udivmoddi4+0x2b0>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb61 0103 	sbc.w	r1, r1, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	468c      	mov	ip, r1
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d0a8      	beq.n	8000bfc <__udivmoddi4+0xa0>
 8000caa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cae:	e7a5      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000cb0:	f1c2 0320 	rsb	r3, r2, #32
 8000cb4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cb8:	4097      	lsls	r7, r2
 8000cba:	fa01 f002 	lsl.w	r0, r1, r2
 8000cbe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc2:	40d9      	lsrs	r1, r3
 8000cc4:	4330      	orrs	r0, r6
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ccc:	fa1f f887 	uxth.w	r8, r7
 8000cd0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd8:	fb06 f108 	mul.w	r1, r6, r8
 8000cdc:	4299      	cmp	r1, r3
 8000cde:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce2:	d909      	bls.n	8000cf8 <__udivmoddi4+0x19c>
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000cea:	f080 808d 	bcs.w	8000e08 <__udivmoddi4+0x2ac>
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	f240 808a 	bls.w	8000e08 <__udivmoddi4+0x2ac>
 8000cf4:	3e02      	subs	r6, #2
 8000cf6:	443b      	add	r3, r7
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	b281      	uxth	r1, r0
 8000cfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d08:	fb00 f308 	mul.w	r3, r0, r8
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x1c4>
 8000d10:	1879      	adds	r1, r7, r1
 8000d12:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d16:	d273      	bcs.n	8000e00 <__udivmoddi4+0x2a4>
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	d971      	bls.n	8000e00 <__udivmoddi4+0x2a4>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	4439      	add	r1, r7
 8000d20:	1acb      	subs	r3, r1, r3
 8000d22:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d26:	e778      	b.n	8000c1a <__udivmoddi4+0xbe>
 8000d28:	f1c6 0c20 	rsb	ip, r6, #32
 8000d2c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d30:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d34:	431c      	orrs	r4, r3
 8000d36:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d3e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d42:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d46:	431f      	orrs	r7, r3
 8000d48:	0c3b      	lsrs	r3, r7, #16
 8000d4a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d4e:	fa1f f884 	uxth.w	r8, r4
 8000d52:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d56:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d5a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d5e:	458a      	cmp	sl, r1
 8000d60:	fa02 f206 	lsl.w	r2, r2, r6
 8000d64:	fa00 f306 	lsl.w	r3, r0, r6
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x220>
 8000d6a:	1861      	adds	r1, r4, r1
 8000d6c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d70:	d248      	bcs.n	8000e04 <__udivmoddi4+0x2a8>
 8000d72:	458a      	cmp	sl, r1
 8000d74:	d946      	bls.n	8000e04 <__udivmoddi4+0x2a8>
 8000d76:	f1a9 0902 	sub.w	r9, r9, #2
 8000d7a:	4421      	add	r1, r4
 8000d7c:	eba1 010a 	sub.w	r1, r1, sl
 8000d80:	b2bf      	uxth	r7, r7
 8000d82:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d86:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d8a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d8e:	fb00 f808 	mul.w	r8, r0, r8
 8000d92:	45b8      	cmp	r8, r7
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x24a>
 8000d96:	19e7      	adds	r7, r4, r7
 8000d98:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d9c:	d22e      	bcs.n	8000dfc <__udivmoddi4+0x2a0>
 8000d9e:	45b8      	cmp	r8, r7
 8000da0:	d92c      	bls.n	8000dfc <__udivmoddi4+0x2a0>
 8000da2:	3802      	subs	r0, #2
 8000da4:	4427      	add	r7, r4
 8000da6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000daa:	eba7 0708 	sub.w	r7, r7, r8
 8000dae:	fba0 8902 	umull	r8, r9, r0, r2
 8000db2:	454f      	cmp	r7, r9
 8000db4:	46c6      	mov	lr, r8
 8000db6:	4649      	mov	r1, r9
 8000db8:	d31a      	bcc.n	8000df0 <__udivmoddi4+0x294>
 8000dba:	d017      	beq.n	8000dec <__udivmoddi4+0x290>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x27a>
 8000dbe:	ebb3 020e 	subs.w	r2, r3, lr
 8000dc2:	eb67 0701 	sbc.w	r7, r7, r1
 8000dc6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000dca:	40f2      	lsrs	r2, r6
 8000dcc:	ea4c 0202 	orr.w	r2, ip, r2
 8000dd0:	40f7      	lsrs	r7, r6
 8000dd2:	e9c5 2700 	strd	r2, r7, [r5]
 8000dd6:	2600      	movs	r6, #0
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	462e      	mov	r6, r5
 8000de0:	4628      	mov	r0, r5
 8000de2:	e70b      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000de4:	4606      	mov	r6, r0
 8000de6:	e6e9      	b.n	8000bbc <__udivmoddi4+0x60>
 8000de8:	4618      	mov	r0, r3
 8000dea:	e6fd      	b.n	8000be8 <__udivmoddi4+0x8c>
 8000dec:	4543      	cmp	r3, r8
 8000dee:	d2e5      	bcs.n	8000dbc <__udivmoddi4+0x260>
 8000df0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000df4:	eb69 0104 	sbc.w	r1, r9, r4
 8000df8:	3801      	subs	r0, #1
 8000dfa:	e7df      	b.n	8000dbc <__udivmoddi4+0x260>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	e7d2      	b.n	8000da6 <__udivmoddi4+0x24a>
 8000e00:	4660      	mov	r0, ip
 8000e02:	e78d      	b.n	8000d20 <__udivmoddi4+0x1c4>
 8000e04:	4681      	mov	r9, r0
 8000e06:	e7b9      	b.n	8000d7c <__udivmoddi4+0x220>
 8000e08:	4666      	mov	r6, ip
 8000e0a:	e775      	b.n	8000cf8 <__udivmoddi4+0x19c>
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e74a      	b.n	8000ca6 <__udivmoddi4+0x14a>
 8000e10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e14:	4439      	add	r1, r7
 8000e16:	e713      	b.n	8000c40 <__udivmoddi4+0xe4>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	443c      	add	r4, r7
 8000e1c:	e724      	b.n	8000c68 <__udivmoddi4+0x10c>
 8000e1e:	bf00      	nop

08000e20 <__aeabi_idiv0>:
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop

08000e24 <pid_create>:
	Author e-mail: ruben at geekfactory dot mx
 */
#include "PID.h"

PID_t pid_create(PID_t pid, float* in, float* out, float* set, float kp, float ki, float kd)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	61f8      	str	r0, [r7, #28]
 8000e2c:	61b9      	str	r1, [r7, #24]
 8000e2e:	617a      	str	r2, [r7, #20]
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	ed87 0a03 	vstr	s0, [r7, #12]
 8000e36:	edc7 0a02 	vstr	s1, [r7, #8]
 8000e3a:	ed87 1a01 	vstr	s2, [r7, #4]
	pid->input = in;
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	601a      	str	r2, [r3, #0]
	pid->output = out;
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	605a      	str	r2, [r3, #4]
	pid->setpoint = set;
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	609a      	str	r2, [r3, #8]
	pid->automode = false;
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	pid_limits(pid, 0, 255);
 8000e58:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000ea0 <pid_create+0x7c>
 8000e5c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000ea4 <pid_create+0x80>
 8000e60:	69f8      	ldr	r0, [r7, #28]
 8000e62:	f000 f96b 	bl	800113c <pid_limits>

	// Set default sample time to 100 ms
	pid->sampletime = 100 * (FREQUENCY / 1000);
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	2264      	movs	r2, #100	; 0x64
 8000e6a:	62da      	str	r2, [r3, #44]	; 0x2c

	pid_direction(pid, E_PID_DIRECT);
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	69f8      	ldr	r0, [r7, #28]
 8000e70:	f000 fa06 	bl	8001280 <pid_direction>
	PID_tune(pid, kp, ki, kd);
 8000e74:	ed97 1a01 	vldr	s2, [r7, #4]
 8000e78:	edd7 0a02 	vldr	s1, [r7, #8]
 8000e7c:	ed97 0a03 	vldr	s0, [r7, #12]
 8000e80:	69f8      	ldr	r0, [r7, #28]
 8000e82:	f000 f8b9 	bl	8000ff8 <PID_tune>

	pid->lasttime = HAL_GetTick() - pid->sampletime;
 8000e86:	f001 ffd5 	bl	8002e34 <HAL_GetTick>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e90:	1ad2      	subs	r2, r2, r3
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	629a      	str	r2, [r3, #40]	; 0x28

	return pid;
 8000e96:	69fb      	ldr	r3, [r7, #28]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	437f0000 	.word	0x437f0000
 8000ea4:	00000000 	.word	0x00000000

08000ea8 <pid_need_compute>:

bool pid_need_compute(PID_t pid)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	// Check if the PID period has elapsed
	return(HAL_GetTick() - pid->lasttime >= pid->sampletime) ? true : false;
 8000eb0:	f001 ffc0 	bl	8002e34 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eba:	1ad2      	subs	r2, r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	bf2c      	ite	cs
 8000ec4:	2301      	movcs	r3, #1
 8000ec6:	2300      	movcc	r3, #0
 8000ec8:	b2db      	uxtb	r3, r3
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <pid_compute>:
void pid_compute(PID_t pid)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
	// Check if control is enabled
	if (!pid->automode)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f000 8084 	beq.w	8000fee <pid_compute+0x11c>
		return ;
	
	float in = *(pid->input);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	613b      	str	r3, [r7, #16]
	// Compute error
	float error = (*(pid->setpoint)) - in;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	ed93 7a00 	vldr	s14, [r3]
 8000ef6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000efe:	edc7 7a03 	vstr	s15, [r7, #12]
	// Compute integral
	pid->iterm += (pid->Ki * error);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	edd3 6a04 	vldr	s13, [r3, #16]
 8000f0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	edc3 7a08 	vstr	s15, [r3, #32]
	if (pid->iterm > pid->omax)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f34:	dd04      	ble.n	8000f40 <pid_compute+0x6e>
		pid->iterm = pid->omax;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	69da      	ldr	r2, [r3, #28]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	621a      	str	r2, [r3, #32]
 8000f3e:	e00e      	b.n	8000f5e <pid_compute+0x8c>
	else if (pid->iterm < pid->omin)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f54:	d503      	bpl.n	8000f5e <pid_compute+0x8c>
		pid->iterm = pid->omin;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	699a      	ldr	r2, [r3, #24]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	621a      	str	r2, [r3, #32]
	// Compute differential on input
	float dinput = in - pid->lastin;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000f64:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f6c:	edc7 7a02 	vstr	s15, [r7, #8]
	// Compute PID output
	float out = pid->Kp * error + pid->iterm - pid->Kd * dinput;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f76:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	edd3 7a08 	vldr	s15, [r3, #32]
 8000f84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	edd3 6a05 	vldr	s13, [r3, #20]
 8000f8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f9a:	edc7 7a05 	vstr	s15, [r7, #20]
	// Apply limit to output value
	if (out > pid->omax)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	edd3 7a07 	vldr	s15, [r3, #28]
 8000fa4:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb0:	dd03      	ble.n	8000fba <pid_compute+0xe8>
		out = pid->omax;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	e00c      	b.n	8000fd4 <pid_compute+0x102>
	else if (out < pid->omin)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fc0:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fcc:	d502      	bpl.n	8000fd4 <pid_compute+0x102>
		out = pid->omin;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	617b      	str	r3, [r7, #20]
	// Output to pointed variable
	(*pid->output) = out;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	601a      	str	r2, [r3, #0]
	// Keep track of some variables for next execution
	pid->lastin = in;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
	pid->lasttime = HAL_GetTick();
 8000fe2:	f001 ff27 	bl	8002e34 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
 8000fec:	e000      	b.n	8000ff0 <pid_compute+0x11e>
		return ;
 8000fee:	bf00      	nop
}
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <PID_tune>:

void PID_tune(PID_t pid, float kp, float ki, float kd)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b087      	sub	sp, #28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	ed87 0a02 	vstr	s0, [r7, #8]
 8001004:	edc7 0a01 	vstr	s1, [r7, #4]
 8001008:	ed87 1a00 	vstr	s2, [r7]
	// Check for validity
	if (kp < 0 || ki < 0 || kd < 0)
 800100c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001010:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001018:	d452      	bmi.n	80010c0 <PID_tune+0xc8>
 800101a:	edd7 7a01 	vldr	s15, [r7, #4]
 800101e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001026:	d44b      	bmi.n	80010c0 <PID_tune+0xc8>
 8001028:	edd7 7a00 	vldr	s15, [r7]
 800102c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001034:	d444      	bmi.n	80010c0 <PID_tune+0xc8>
		return;
	
	//Compute sample time in seconds
	float ssec = ((float) pid->sampletime) / ((float) FREQUENCY);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103a:	ee07 3a90 	vmov	s15, r3
 800103e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001042:	eddf 6a22 	vldr	s13, [pc, #136]	; 80010cc <PID_tune+0xd4>
 8001046:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800104a:	edc7 7a05 	vstr	s15, [r7, #20]

	pid->Kp = kp;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	60da      	str	r2, [r3, #12]
	pid->Ki = ki * ssec;
 8001054:	ed97 7a01 	vldr	s14, [r7, #4]
 8001058:	edd7 7a05 	vldr	s15, [r7, #20]
 800105c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->Kd = kd / ssec;
 8001066:	edd7 6a00 	vldr	s13, [r7]
 800106a:	ed97 7a05 	vldr	s14, [r7, #20]
 800106e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	edc3 7a05 	vstr	s15, [r3, #20]

	if (pid->direction == E_PID_REVERSE) {
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800107e:	2b01      	cmp	r3, #1
 8001080:	d11f      	bne.n	80010c2 <PID_tune+0xca>
		pid->Kp = 0 - pid->Kp;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	edd3 7a03 	vldr	s15, [r3, #12]
 8001088:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80010d0 <PID_tune+0xd8>
 800108c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = 0 - pid->Ki;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	edd3 7a04 	vldr	s15, [r3, #16]
 800109c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80010d0 <PID_tune+0xd8>
 80010a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = 0 - pid->Kd;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	edd3 7a05 	vldr	s15, [r3, #20]
 80010b0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80010d0 <PID_tune+0xd8>
 80010b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edc3 7a05 	vstr	s15, [r3, #20]
 80010be:	e000      	b.n	80010c2 <PID_tune+0xca>
		return;
 80010c0:	bf00      	nop
	}
}
 80010c2:	371c      	adds	r7, #28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	447a0000 	.word	0x447a0000
 80010d0:	00000000 	.word	0x00000000

080010d4 <pid_sample>:

void pid_sample(PID_t pid, uint32_t time)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
	if (time > 0) {
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d025      	beq.n	8001130 <pid_sample+0x5c>
		float ratio = (float) (time * (FREQUENCY / 1000)) / (float) pid->sampletime;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f2:	ee07 3a90 	vmov	s15, r3
 80010f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010fe:	edc7 7a03 	vstr	s15, [r7, #12]
		pid->Ki *= ratio;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	ed93 7a04 	vldr	s14, [r3, #16]
 8001108:	edd7 7a03 	vldr	s15, [r7, #12]
 800110c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd /= ratio;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	edd3 6a05 	vldr	s13, [r3, #20]
 800111c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	edc3 7a05 	vstr	s15, [r3, #20]
		pid->sampletime = time * (FREQUENCY / 1000);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <pid_limits>:

void pid_limits(PID_t pid, float min, float max)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	ed87 0a02 	vstr	s0, [r7, #8]
 8001148:	edc7 0a01 	vstr	s1, [r7, #4]
	if (min >= max) return;
 800114c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001150:	edd7 7a01 	vldr	s15, [r7, #4]
 8001154:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115c:	da4d      	bge.n	80011fa <pid_limits+0xbe>
	pid->omin = min;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	68ba      	ldr	r2, [r7, #8]
 8001162:	619a      	str	r2, [r3, #24]
	pid->omax = max;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	61da      	str	r2, [r3, #28]
	//Adjust output to new limits
	if (pid->automode) {
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001170:	2b00      	cmp	r3, #0
 8001172:	d043      	beq.n	80011fc <pid_limits+0xc0>
		if (*(pid->output) > pid->omax)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	ed93 7a00 	vldr	s14, [r3]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001182:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118a:	dd05      	ble.n	8001198 <pid_limits+0x5c>
			*(pid->output) = pid->omax;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	68fa      	ldr	r2, [r7, #12]
 8001192:	69d2      	ldr	r2, [r2, #28]
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	e010      	b.n	80011ba <pid_limits+0x7e>
		else if (*(pid->output) < pid->omin)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	ed93 7a00 	vldr	s14, [r3]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80011a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ae:	d504      	bpl.n	80011ba <pid_limits+0x7e>
			*(pid->output) = pid->omin;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	6992      	ldr	r2, [r2, #24]
 80011b8:	601a      	str	r2, [r3, #0]

		if (pid->iterm > pid->omax)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	ed93 7a08 	vldr	s14, [r3, #32]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	edd3 7a07 	vldr	s15, [r3, #28]
 80011c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ce:	dd04      	ble.n	80011da <pid_limits+0x9e>
			pid->iterm = pid->omax;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	69da      	ldr	r2, [r3, #28]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	621a      	str	r2, [r3, #32]
 80011d8:	e010      	b.n	80011fc <pid_limits+0xc0>
		else if (pid->iterm < pid->omin)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	ed93 7a08 	vldr	s14, [r3, #32]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	edd3 7a06 	vldr	s15, [r3, #24]
 80011e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ee:	d505      	bpl.n	80011fc <pid_limits+0xc0>
			pid->iterm = pid->omin;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	699a      	ldr	r2, [r3, #24]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	621a      	str	r2, [r3, #32]
 80011f8:	e000      	b.n	80011fc <pid_limits+0xc0>
	if (min >= max) return;
 80011fa:	bf00      	nop
	}
}
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <pid_auto>:

void pid_auto(PID_t pid)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
	// If going from manual to auto
	if (!pid->automode) {
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001214:	2b00      	cmp	r3, #0
 8001216:	d12c      	bne.n	8001272 <pid_auto+0x6c>
		pid->iterm = *(pid->output);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	621a      	str	r2, [r3, #32]
		pid->lastin = *(pid->input);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	625a      	str	r2, [r3, #36]	; 0x24
		if (pid->iterm > pid->omax)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	edd3 7a07 	vldr	s15, [r3, #28]
 8001238:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800123c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001240:	dd04      	ble.n	800124c <pid_auto+0x46>
			pid->iterm = pid->omax;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69da      	ldr	r2, [r3, #28]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	621a      	str	r2, [r3, #32]
 800124a:	e00e      	b.n	800126a <pid_auto+0x64>
		else if (pid->iterm < pid->omin)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	edd3 7a06 	vldr	s15, [r3, #24]
 8001258:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800125c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001260:	d503      	bpl.n	800126a <pid_auto+0x64>
			pid->iterm = pid->omin;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	699a      	ldr	r2, [r3, #24]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	621a      	str	r2, [r3, #32]
		pid->automode = true;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2201      	movs	r2, #1
 800126e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <pid_direction>:
{
	pid->automode = false;
}

void pid_direction(PID_t pid, enum pid_control_directions dir)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	70fb      	strb	r3, [r7, #3]
	if (pid->automode && pid->direction != dir) {
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001292:	2b00      	cmp	r3, #0
 8001294:	d023      	beq.n	80012de <pid_direction+0x5e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800129c:	78fa      	ldrb	r2, [r7, #3]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d01d      	beq.n	80012de <pid_direction+0x5e>
		pid->Kp = (0 - pid->Kp);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80012a8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80012f4 <pid_direction+0x74>
 80012ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = (0 - pid->Ki);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80012bc:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80012f4 <pid_direction+0x74>
 80012c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = (0 - pid->Kd);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	edd3 7a05 	vldr	s15, [r3, #20]
 80012d0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80012f4 <pid_direction+0x74>
 80012d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	pid->direction = dir;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	78fa      	ldrb	r2, [r7, #3]
 80012e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	00000000 	.word	0x00000000

080012f8 <ADC_Read>:
//		      HAL_Delay(5000);
}


void ADC_Read(int16_t *data)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 8001300:	2200      	movs	r2, #0
 8001302:	2110      	movs	r1, #16
 8001304:	4808      	ldr	r0, [pc, #32]	; (8001328 <ADC_Read+0x30>)
 8001306:	f003 fa03 	bl	8004710 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 800130a:	2302      	movs	r3, #2
 800130c:	2208      	movs	r2, #8
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	4806      	ldr	r0, [pc, #24]	; (800132c <ADC_Read+0x34>)
 8001312:	f004 f90d 	bl	8005530 <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 8001316:	2201      	movs	r2, #1
 8001318:	2110      	movs	r1, #16
 800131a:	4803      	ldr	r0, [pc, #12]	; (8001328 <ADC_Read+0x30>)
 800131c:	f003 f9f8 	bl	8004710 <HAL_GPIO_WritePin>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40020000 	.word	0x40020000
 800132c:	20000194 	.word	0x20000194

08001330 <bd25l_Init>:
	.DIR_pin	= ClimbM_IO_FR2_Pin,
	.pole		= 4,
	.ID		= 2,
};

void bd25l_Init(Motor_TypeDef* motor){
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	enableMotor(motor, 0);
 8001338:	2100      	movs	r1, #0
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 f808 	bl	8001350 <enableMotor>
	brakeMotor(motor, 0);
 8001340:	2100      	movs	r1, #0
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 f828 	bl	8001398 <brakeMotor>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <enableMotor>:
	brakeMotor(motor, 1);
	enableMotor(motor, 0);

}

void enableMotor(Motor_TypeDef* motor, uint8_t state){
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->EN_port, motor->EN_pin, state);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001364:	78fa      	ldrb	r2, [r7, #3]
 8001366:	4619      	mov	r1, r3
 8001368:	f003 f9d2 	bl	8004710 <HAL_GPIO_WritePin>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <emBrakeMotor>:

void emBrakeMotor(uint8_t state){
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Brake_Wheel_GPIO_Port, Brake_Wheel_Pin, state);
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	461a      	mov	r2, r3
 8001382:	2108      	movs	r1, #8
 8001384:	4803      	ldr	r0, [pc, #12]	; (8001394 <emBrakeMotor+0x20>)
 8001386:	f003 f9c3 	bl	8004710 <HAL_GPIO_WritePin>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40020c00 	.word	0x40020c00

08001398 <brakeMotor>:

void brakeMotor(Motor_TypeDef* motor, uint8_t state){
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->BRK_port, motor->BRK_pin, state);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69d8      	ldr	r0, [r3, #28]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	8c1b      	ldrh	r3, [r3, #32]
 80013ac:	78fa      	ldrb	r2, [r7, #3]
 80013ae:	4619      	mov	r1, r3
 80013b0:	f003 f9ae 	bl	8004710 <HAL_GPIO_WritePin>
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <setMotorDir>:

void setMotorDir(Motor_TypeDef* motor, uint8_t dir){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin, dir);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80013d0:	78fa      	ldrb	r2, [r7, #3]
 80013d2:	4619      	mov	r1, r3
 80013d4:	f003 f99c 	bl	8004710 <HAL_GPIO_WritePin>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <setMotorSpeed>:

void setMotorSpeed(Motor_TypeDef* motor, float speed){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	ed87 0a00 	vstr	s0, [r7]

	float frequency = 0;
 80013ec:	f04f 0300 	mov.w	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
	uint16_t period;
	uint32_t duty_cycle; //50%

	if (speed > 100) speed = 100.0;
 80013f2:	edd7 7a00 	vldr	s15, [r7]
 80013f6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001528 <setMotorSpeed+0x148>
 80013fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001402:	dd01      	ble.n	8001408 <setMotorSpeed+0x28>
 8001404:	4b49      	ldr	r3, [pc, #292]	; (800152c <setMotorSpeed+0x14c>)
 8001406:	603b      	str	r3, [r7, #0]
	//Frequency equation derived from data sheet
	frequency = (uint16_t)((speed - 0.2597)/0.02494);
 8001408:	6838      	ldr	r0, [r7, #0]
 800140a:	f7ff f855 	bl	80004b8 <__aeabi_f2d>
 800140e:	a340      	add	r3, pc, #256	; (adr r3, 8001510 <setMotorSpeed+0x130>)
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	f7fe fef0 	bl	80001f8 <__aeabi_dsub>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	a33d      	add	r3, pc, #244	; (adr r3, 8001518 <setMotorSpeed+0x138>)
 8001422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001426:	f7ff f9c9 	bl	80007bc <__aeabi_ddiv>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	f7ff fb5b 	bl	8000aec <__aeabi_d2uiz>
 8001436:	4603      	mov	r3, r0
 8001438:	b29b      	uxth	r3, r3
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001442:	edc7 7a05 	vstr	s15, [r7, #20]
	period = (int)(1e6/frequency)+1;
 8001446:	6978      	ldr	r0, [r7, #20]
 8001448:	f7ff f836 	bl	80004b8 <__aeabi_f2d>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	a133      	add	r1, pc, #204	; (adr r1, 8001520 <setMotorSpeed+0x140>)
 8001452:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001456:	f7ff f9b1 	bl	80007bc <__aeabi_ddiv>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f7ff fb1b 	bl	8000a9c <__aeabi_d2iz>
 8001466:	4603      	mov	r3, r0
 8001468:	b29b      	uxth	r3, r3
 800146a:	3301      	adds	r3, #1
 800146c:	827b      	strh	r3, [r7, #18]
	duty_cycle = period / 2;
 800146e:	8a7b      	ldrh	r3, [r7, #18]
 8001470:	085b      	lsrs	r3, r3, #1
 8001472:	b29b      	uxth	r3, r3
 8001474:	60fb      	str	r3, [r7, #12]
//	      motor->outputPWM->Instance->CCR4 = duty_cycle;
//
//	    HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
//	}

	if (speed<4){
 8001476:	edd7 7a00 	vldr	s15, [r7]
 800147a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800147e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001486:	d503      	bpl.n	8001490 <setMotorSpeed+0xb0>
		brakeMotor(motor, 1);
 8001488:	2101      	movs	r1, #1
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ff84 	bl	8001398 <brakeMotor>
	}



	motor->outputPWM->Instance->ARR = period;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	8a7a      	ldrh	r2, [r7, #18]
 8001498:	62da      	str	r2, [r3, #44]	; 0x2c
	if(motor->PWM_channel == TIM_CHANNEL_1)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	8b1b      	ldrh	r3, [r3, #24]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d105      	bne.n	80014ae <setMotorSpeed+0xce>
	  motor->outputPWM->Instance->CCR1 = duty_cycle;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	635a      	str	r2, [r3, #52]	; 0x34
 80014ac:	e01c      	b.n	80014e8 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_2)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	8b1b      	ldrh	r3, [r3, #24]
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	d105      	bne.n	80014c2 <setMotorSpeed+0xe2>
		  motor->outputPWM->Instance->CCR2 = duty_cycle;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	639a      	str	r2, [r3, #56]	; 0x38
 80014c0:	e012      	b.n	80014e8 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_3)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	8b1b      	ldrh	r3, [r3, #24]
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d105      	bne.n	80014d6 <setMotorSpeed+0xf6>
		  motor->outputPWM->Instance->CCR3 = duty_cycle;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80014d4:	e008      	b.n	80014e8 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_4)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	8b1b      	ldrh	r3, [r3, #24]
 80014da:	2b0c      	cmp	r3, #12
 80014dc:	d104      	bne.n	80014e8 <setMotorSpeed+0x108>
	  motor->outputPWM->Instance->CCR4 = duty_cycle;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68fa      	ldr	r2, [r7, #12]
 80014e6:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	695a      	ldr	r2, [r3, #20]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	8b1b      	ldrh	r3, [r3, #24]
 80014f0:	4619      	mov	r1, r3
 80014f2:	4610      	mov	r0, r2
 80014f4:	f004 fc5c 	bl	8005db0 <HAL_TIM_PWM_Start>



	motor->outputPWM->Instance->CNT = 0;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	f3af 8000 	nop.w
 8001510:	bfb15b57 	.word	0xbfb15b57
 8001514:	3fd09eec 	.word	0x3fd09eec
 8001518:	1172ef0b 	.word	0x1172ef0b
 800151c:	3f9989df 	.word	0x3f9989df
 8001520:	00000000 	.word	0x00000000
 8001524:	412e8480 	.word	0x412e8480
 8001528:	42c80000 	.word	0x42c80000
 800152c:	42c80000 	.word	0x42c80000

08001530 <runMotor>:
		return -1;
	}
	else return 1;
}

void runMotor(Motor_TypeDef* motor, float speed){
 8001530:	b5b0      	push	{r4, r5, r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	ed87 0a00 	vstr	s0, [r7]
  //	    - positive speed Lift DOWN
  //	    - negative speed lift UP
    if (motor->ID == 1){
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001542:	2b01      	cmp	r3, #1
 8001544:	d129      	bne.n	800159a <runMotor+0x6a>
	if (fabs(speed)/speed  >= 0)
 8001546:	edd7 7a00 	vldr	s15, [r7]
 800154a:	eef0 7ae7 	vabs.f32	s15, s15
 800154e:	ee17 0a90 	vmov	r0, s15
 8001552:	f7fe ffb1 	bl	80004b8 <__aeabi_f2d>
 8001556:	4604      	mov	r4, r0
 8001558:	460d      	mov	r5, r1
 800155a:	6838      	ldr	r0, [r7, #0]
 800155c:	f7fe ffac 	bl	80004b8 <__aeabi_f2d>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4620      	mov	r0, r4
 8001566:	4629      	mov	r1, r5
 8001568:	f7ff f928 	bl	80007bc <__aeabi_ddiv>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	f7ff fa7a 	bl	8000a74 <__aeabi_dcmpge>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d004      	beq.n	8001590 <runMotor+0x60>
	      setMotorDir(motor, 0);
 8001586:	2100      	movs	r1, #0
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff17 	bl	80013bc <setMotorDir>
 800158e:	e032      	b.n	80015f6 <runMotor+0xc6>
	else
	  setMotorDir(motor, 1);
 8001590:	2101      	movs	r1, #1
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ff12 	bl	80013bc <setMotorDir>
 8001598:	e02d      	b.n	80015f6 <runMotor+0xc6>
    }
    else if (motor->ID == 2){
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d128      	bne.n	80015f6 <runMotor+0xc6>
	if (fabs(speed)/speed  >= 0)
 80015a4:	edd7 7a00 	vldr	s15, [r7]
 80015a8:	eef0 7ae7 	vabs.f32	s15, s15
 80015ac:	ee17 0a90 	vmov	r0, s15
 80015b0:	f7fe ff82 	bl	80004b8 <__aeabi_f2d>
 80015b4:	4604      	mov	r4, r0
 80015b6:	460d      	mov	r5, r1
 80015b8:	6838      	ldr	r0, [r7, #0]
 80015ba:	f7fe ff7d 	bl	80004b8 <__aeabi_f2d>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4620      	mov	r0, r4
 80015c4:	4629      	mov	r1, r5
 80015c6:	f7ff f8f9 	bl	80007bc <__aeabi_ddiv>
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	f7ff fa4b 	bl	8000a74 <__aeabi_dcmpge>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d004      	beq.n	80015ee <runMotor+0xbe>
	  setMotorDir(motor, 1);
 80015e4:	2101      	movs	r1, #1
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff fee8 	bl	80013bc <setMotorDir>
 80015ec:	e003      	b.n	80015f6 <runMotor+0xc6>
	else
	  setMotorDir(motor, 0);
 80015ee:	2100      	movs	r1, #0
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff fee3 	bl	80013bc <setMotorDir>
    }

    HAL_Delay(50);
 80015f6:	2032      	movs	r0, #50	; 0x32
 80015f8:	f001 fc28 	bl	8002e4c <HAL_Delay>
    brakeMotor(motor, 0);
 80015fc:	2100      	movs	r1, #0
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff feca 	bl	8001398 <brakeMotor>
    setMotorSpeed(motor, fabs(speed));
 8001604:	edd7 7a00 	vldr	s15, [r7]
 8001608:	eef0 7ae7 	vabs.f32	s15, s15
 800160c:	eeb0 0a67 	vmov.f32	s0, s15
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff fee5 	bl	80013e0 <setMotorSpeed>

}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bdb0      	pop	{r4, r5, r7, pc}

0800161e <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	889b      	ldrh	r3, [r3, #4]
 8001630:	4619      	mov	r1, r3
 8001632:	4610      	mov	r0, r2
 8001634:	f003 f854 	bl	80046e0 <HAL_GPIO_ReadPin>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	799a      	ldrb	r2, [r3, #6]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	79db      	ldrb	r3, [r3, #7]
 8001648:	429a      	cmp	r2, r3
 800164a:	d004      	beq.n	8001656 <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 800164c:	f001 fbf2 	bl	8002e34 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 8001656:	f001 fbed 	bl	8002e34 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d209      	bcs.n	800167c <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	799a      	ldrb	r2, [r3, #6]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	7a1b      	ldrb	r3, [r3, #8]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d101      	bne.n	800167c <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 8001678:	2301      	movs	r3, #1
 800167a:	e004      	b.n	8001686 <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	799a      	ldrb	r2, [r3, #6]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001696:	4b30      	ldr	r3, [pc, #192]	; (8001758 <MX_CAN1_Init+0xc8>)
 8001698:	4a30      	ldr	r2, [pc, #192]	; (800175c <MX_CAN1_Init+0xcc>)
 800169a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 800169c:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <MX_CAN1_Init+0xc8>)
 800169e:	2209      	movs	r2, #9
 80016a0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80016a2:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <MX_CAN1_Init+0xc8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016a8:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <MX_CAN1_Init+0xc8>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80016ae:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <MX_CAN1_Init+0xc8>)
 80016b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016b4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80016b6:	4b28      	ldr	r3, [pc, #160]	; (8001758 <MX_CAN1_Init+0xc8>)
 80016b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016bc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80016be:	4b26      	ldr	r3, [pc, #152]	; (8001758 <MX_CAN1_Init+0xc8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80016c4:	4b24      	ldr	r3, [pc, #144]	; (8001758 <MX_CAN1_Init+0xc8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80016ca:	4b23      	ldr	r3, [pc, #140]	; (8001758 <MX_CAN1_Init+0xc8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80016d0:	4b21      	ldr	r3, [pc, #132]	; (8001758 <MX_CAN1_Init+0xc8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <MX_CAN1_Init+0xc8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80016dc:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <MX_CAN1_Init+0xc8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80016e2:	481d      	ldr	r0, [pc, #116]	; (8001758 <MX_CAN1_Init+0xc8>)
 80016e4:	f001 fbd6 	bl	8002e94 <HAL_CAN_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80016ee:	f000 fde7 	bl	80022c0 <Error_Handler>
  }

  /* USER CODE BEGIN CAN1_Init 2 */
  	CAN_FilterTypeDef canfil_1;
  	canfil_1.FilterBank = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
  	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
  	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 80016fa:	2301      	movs	r3, #1
 80016fc:	61fb      	str	r3, [r7, #28]
  	canfil_1.FilterIdHigh = 0x0000;
 80016fe:	2300      	movs	r3, #0
 8001700:	603b      	str	r3, [r7, #0]
  	canfil_1.FilterIdLow = 0x0000;
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
  	canfil_1.FilterMaskIdHigh = 0x0000;
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
  	canfil_1.FilterMaskIdLow = 0x0000;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
  	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
  	canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 8001712:	2301      	movs	r3, #1
 8001714:	623b      	str	r3, [r7, #32]
  	canfil_1.SlaveStartFilterBank = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	; 0x24

  	if (HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK)
 800171a:	463b      	mov	r3, r7
 800171c:	4619      	mov	r1, r3
 800171e:	480e      	ldr	r0, [pc, #56]	; (8001758 <MX_CAN1_Init+0xc8>)
 8001720:	f001 fcb4 	bl	800308c <HAL_CAN_ConfigFilter>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_CAN1_Init+0x9e>
  		Error_Handler();
 800172a:	f000 fdc9 	bl	80022c0 <Error_Handler>

  	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING))
 800172e:	2102      	movs	r1, #2
 8001730:	4809      	ldr	r0, [pc, #36]	; (8001758 <MX_CAN1_Init+0xc8>)
 8001732:	f001 ffbc 	bl	80036ae <HAL_CAN_ActivateNotification>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d002      	beq.n	8001742 <MX_CAN1_Init+0xb2>
  		return Error_Handler();
 800173c:	f000 fdc0 	bl	80022c0 <Error_Handler>
 8001740:	e007      	b.n	8001752 <MX_CAN1_Init+0xc2>

  	if (HAL_CAN_Start(&hcan1))
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_CAN1_Init+0xc8>)
 8001744:	f001 fd82 	bl	800324c <HAL_CAN_Start>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_CAN1_Init+0xc2>
  		return Error_Handler();
 800174e:	f000 fdb7 	bl	80022c0 <Error_Handler>


    /* USER CODE END CAN1_Init 2 */

}
 8001752:	3728      	adds	r7, #40	; 0x28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	200001ec 	.word	0x200001ec
 800175c:	40006400 	.word	0x40006400

08001760 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1d      	ldr	r2, [pc, #116]	; (80017f4 <HAL_CAN_MspInit+0x94>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d133      	bne.n	80017ea <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <HAL_CAN_MspInit+0x98>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a1b      	ldr	r2, [pc, #108]	; (80017f8 <HAL_CAN_MspInit+0x98>)
 800178c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b19      	ldr	r3, [pc, #100]	; (80017f8 <HAL_CAN_MspInit+0x98>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_CAN_MspInit+0x98>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <HAL_CAN_MspInit+0x98>)
 80017a8:	f043 0308 	orr.w	r3, r3, #8
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_CAN_MspInit+0x98>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017ba:	2303      	movs	r3, #3
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c6:	2303      	movs	r3, #3
 80017c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80017ca:	2309      	movs	r3, #9
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	4809      	ldr	r0, [pc, #36]	; (80017fc <HAL_CAN_MspInit+0x9c>)
 80017d6:	f002 fdd7 	bl	8004388 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	2014      	movs	r0, #20
 80017e0:	f002 fa95 	bl	8003d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80017e4:	2014      	movs	r0, #20
 80017e6:	f002 faae 	bl	8003d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80017ea:	bf00      	nop
 80017ec:	3728      	adds	r7, #40	; 0x28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40006400 	.word	0x40006400
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020c00 	.word	0x40020c00

08001800 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	4b0c      	ldr	r3, [pc, #48]	; (800183c <MX_DMA_Init+0x3c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a0b      	ldr	r2, [pc, #44]	; (800183c <MX_DMA_Init+0x3c>)
 8001810:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <MX_DMA_Init+0x3c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	200c      	movs	r0, #12
 8001828:	f002 fa71 	bl	8003d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800182c:	200c      	movs	r0, #12
 800182e:	f002 fa8a 	bl	8003d46 <HAL_NVIC_EnableIRQ>

}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800

08001840 <ENCODER_Init>:
CAN_HandleTypeDef hcan2;
//uint8_t incoming[8];
//CAN_RxHeaderTypeDef RxHeader;

void ENCODER_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  //Assign each encoder to one of the two CAN buses
	encoderLeft.hcan = &hcan1;
 8001844:	4b07      	ldr	r3, [pc, #28]	; (8001864 <ENCODER_Init+0x24>)
 8001846:	4a08      	ldr	r2, [pc, #32]	; (8001868 <ENCODER_Init+0x28>)
 8001848:	601a      	str	r2, [r3, #0]
	encoderRight.hcan = &hcan1;
 800184a:	4b08      	ldr	r3, [pc, #32]	; (800186c <ENCODER_Init+0x2c>)
 800184c:	4a06      	ldr	r2, [pc, #24]	; (8001868 <ENCODER_Init+0x28>)
 800184e:	601a      	str	r2, [r3, #0]
	
	//Set Tx header for each encoder handle
	ENCODER_Set_TxHeader(&encoderLeft, ENC_ADDR_LEFT);
 8001850:	2101      	movs	r1, #1
 8001852:	4804      	ldr	r0, [pc, #16]	; (8001864 <ENCODER_Init+0x24>)
 8001854:	f000 f83f 	bl	80018d6 <ENCODER_Set_TxHeader>
	ENCODER_Set_TxHeader(&encoderRight, ENC_ADDR_RIGHT);
 8001858:	2102      	movs	r1, #2
 800185a:	4804      	ldr	r0, [pc, #16]	; (800186c <ENCODER_Init+0x2c>)
 800185c:	f000 f83b 	bl	80018d6 <ENCODER_Set_TxHeader>

}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000214 	.word	0x20000214
 8001868:	200001ec 	.word	0x200001ec
 800186c:	20000290 	.word	0x20000290

08001870 <ENCODER_Sort_Incoming>:

void ENCODER_Sort_Incoming(uint8_t* incoming_array, EncoderHandle* Encoder_ptr){
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
	Encoder_ptr->rawRead[0] = incoming_array[0];
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	781a      	ldrb	r2, [r3, #0]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Encoder_ptr->rawRead[1] = incoming_array[1];
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	785a      	ldrb	r2, [r3, #1]
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Encoder_ptr->rawRead[2] = incoming_array[2];
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	789a      	ldrb	r2, [r3, #2]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Encoder_ptr->rawRead[3] = incoming_array[3];
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	78da      	ldrb	r2, [r3, #3]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	Encoder_ptr->rawRead[4] = incoming_array[4];
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	791a      	ldrb	r2, [r3, #4]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Encoder_ptr->rawRead[5] = incoming_array[5];
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	795a      	ldrb	r2, [r3, #5]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Encoder_ptr->rawRead[6] = incoming_array[6];
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	799a      	ldrb	r2, [r3, #6]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Encoder_ptr->rawRead[7] = incoming_array[7];
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	79da      	ldrb	r2, [r3, #7]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <ENCODER_Set_TxHeader>:

void ENCODER_Set_TxHeader(EncoderHandle* Encoder_ptr, uint32_t Encoder_Address){
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	6039      	str	r1, [r7, #0]
	Encoder_ptr->canTxHeader.DLC = 4;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2204      	movs	r2, #4
 80018e4:	631a      	str	r2, [r3, #48]	; 0x30
	Encoder_ptr->canTxHeader.IDE = CAN_ID_STD;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder_ptr->canTxHeader.RTR = CAN_RTR_DATA;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	62da      	str	r2, [r3, #44]	; 0x2c
	Encoder_ptr->canTxHeader.StdId = Encoder_Address;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	621a      	str	r2, [r3, #32]
	Encoder_ptr->canTxHeader.TransmitGlobalTime = DISABLE;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Encoder_ptr->canTxHeader.ExtId = 0;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <ENCODER_Read>:

void ENCODER_Read(EncoderHandle* Encoder_ptr){
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
	Encoder_ptr->sendData[0] = Encoder_ptr->canTxHeader.DLC;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	b2da      	uxtb	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Encoder_ptr->sendData[1] = Encoder_ptr->canTxHeader.StdId;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Encoder_ptr->sendData[2] = 0x01;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Encoder_ptr->sendData[3] = 0x00;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	
	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f103 0120 	add.w	r1, r3, #32
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3338      	adds	r3, #56	; 0x38
 8001956:	f001 fcbd 	bl	80032d4 <HAL_CAN_AddTxMessage>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <ENCODER_Get_Angle>:
	Encoder_ptr->sendData[3] = 0x01;

	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
}

void ENCODER_Get_Angle(EncoderHandle* Encoder_ptr){
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
	ENCODER_Read(Encoder_ptr);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffd1 	bl	8001912 <ENCODER_Read>
	Encoder_ptr->angle32Bit.b8[0] = Encoder_ptr->rawRead[3];
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Encoder_ptr->angle32Bit.b8[1] = Encoder_ptr->rawRead[4];
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Encoder_ptr->angle32Bit.b8[2] = Encoder_ptr->rawRead[5];
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Encoder_ptr->angle32Bit.b8[3] = Encoder_ptr->rawRead[6];
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	//Get the outer gear encoder position
	//Gear ration from inner to outer gear is 1:2. Therefore, (2*4096=)8192 is used
	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)) ; //Get single turn encoder reading
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 80019a6:	461a      	mov	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019ae:	021b      	lsls	r3, r3, #8
 80019b0:	441a      	add	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019b8:	041b      	lsls	r3, r3, #16
 80019ba:	4413      	add	r3, r2
 80019bc:	461a      	mov	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	645a      	str	r2, [r3, #68]	; 0x44
//	Encoder_ptr->encoder_pos = 8192 - (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)) % 8192; //Get single turn encoder reading

	//Convert from encoder position to angle in degree
//	Encoder_ptr->angleDeg = (Encoder_ptr->encoder_pos * 360 /8192) ; //Get encoder angle

}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <MX_GPIO_Init>:
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
     PB5   ------> CAN2_RX
*/
void MX_GPIO_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08c      	sub	sp, #48	; 0x30
 80019d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
 80019e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
 80019e6:	4b8a      	ldr	r3, [pc, #552]	; (8001c10 <MX_GPIO_Init+0x244>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a89      	ldr	r2, [pc, #548]	; (8001c10 <MX_GPIO_Init+0x244>)
 80019ec:	f043 0310 	orr.w	r3, r3, #16
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b87      	ldr	r3, [pc, #540]	; (8001c10 <MX_GPIO_Init+0x244>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	61bb      	str	r3, [r7, #24]
 80019fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	4b83      	ldr	r3, [pc, #524]	; (8001c10 <MX_GPIO_Init+0x244>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a82      	ldr	r2, [pc, #520]	; (8001c10 <MX_GPIO_Init+0x244>)
 8001a08:	f043 0304 	orr.w	r3, r3, #4
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b80      	ldr	r3, [pc, #512]	; (8001c10 <MX_GPIO_Init+0x244>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	4b7c      	ldr	r3, [pc, #496]	; (8001c10 <MX_GPIO_Init+0x244>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a7b      	ldr	r2, [pc, #492]	; (8001c10 <MX_GPIO_Init+0x244>)
 8001a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b79      	ldr	r3, [pc, #484]	; (8001c10 <MX_GPIO_Init+0x244>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b75      	ldr	r3, [pc, #468]	; (8001c10 <MX_GPIO_Init+0x244>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a74      	ldr	r2, [pc, #464]	; (8001c10 <MX_GPIO_Init+0x244>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b72      	ldr	r3, [pc, #456]	; (8001c10 <MX_GPIO_Init+0x244>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	4b6e      	ldr	r3, [pc, #440]	; (8001c10 <MX_GPIO_Init+0x244>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a6d      	ldr	r2, [pc, #436]	; (8001c10 <MX_GPIO_Init+0x244>)
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b6b      	ldr	r3, [pc, #428]	; (8001c10 <MX_GPIO_Init+0x244>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	4b67      	ldr	r3, [pc, #412]	; (8001c10 <MX_GPIO_Init+0x244>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a66      	ldr	r2, [pc, #408]	; (8001c10 <MX_GPIO_Init+0x244>)
 8001a78:	f043 0308 	orr.w	r3, r3, #8
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b64      	ldr	r3, [pc, #400]	; (8001c10 <MX_GPIO_Init+0x244>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	213f      	movs	r1, #63	; 0x3f
 8001a8e:	4861      	ldr	r0, [pc, #388]	; (8001c14 <MX_GPIO_Init+0x248>)
 8001a90:	f002 fe3e 	bl	8004710 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2110      	movs	r1, #16
 8001a98:	485f      	ldr	r0, [pc, #380]	; (8001c18 <MX_GPIO_Init+0x24c>)
 8001a9a:	f002 fe39 	bl	8004710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	219b      	movs	r1, #155	; 0x9b
 8001aa2:	485e      	ldr	r0, [pc, #376]	; (8001c1c <MX_GPIO_Init+0x250>)
 8001aa4:	f002 fe34 	bl	8004710 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8001aae:	485c      	ldr	r0, [pc, #368]	; (8001c20 <MX_GPIO_Init+0x254>)
 8001ab0:	f002 fe2e 	bl	8004710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f64e 4108 	movw	r1, #60424	; 0xec08
 8001aba:	485a      	ldr	r0, [pc, #360]	; (8001c24 <MX_GPIO_Init+0x258>)
 8001abc:	f002 fe28 	bl	8004710 <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8001ac0:	2307      	movs	r3, #7
 8001ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001acc:	f107 031c 	add.w	r3, r7, #28
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4853      	ldr	r0, [pc, #332]	; (8001c20 <MX_GPIO_Init+0x254>)
 8001ad4:	f002 fc58 	bl	8004388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 8001ad8:	f248 1378 	movw	r3, #33144	; 0x8178
 8001adc:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ae6:	f107 031c 	add.w	r3, r7, #28
 8001aea:	4619      	mov	r1, r3
 8001aec:	484c      	ldr	r0, [pc, #304]	; (8001c20 <MX_GPIO_Init+0x254>)
 8001aee:	f002 fc4b 	bl	8004388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001af2:	233f      	movs	r3, #63	; 0x3f
 8001af4:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af6:	2301      	movs	r3, #1
 8001af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001afa:	2301      	movs	r3, #1
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b02:	f107 031c 	add.w	r3, r7, #28
 8001b06:	4619      	mov	r1, r3
 8001b08:	4842      	ldr	r0, [pc, #264]	; (8001c14 <MX_GPIO_Init+0x248>)
 8001b0a:	f002 fc3d 	bl	8004388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8001b0e:	2310      	movs	r3, #16
 8001b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b16:	2301      	movs	r3, #1
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	f107 031c 	add.w	r3, r7, #28
 8001b22:	4619      	mov	r1, r3
 8001b24:	483c      	ldr	r0, [pc, #240]	; (8001c18 <MX_GPIO_Init+0x24c>)
 8001b26:	f002 fc2f 	bl	8004388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b2e:	4b3e      	ldr	r3, [pc, #248]	; (8001c28 <MX_GPIO_Init+0x25c>)
 8001b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001b36:	f107 031c 	add.w	r3, r7, #28
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4836      	ldr	r0, [pc, #216]	; (8001c18 <MX_GPIO_Init+0x24c>)
 8001b3e:	f002 fc23 	bl	8004388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001b42:	239b      	movs	r3, #155	; 0x9b
 8001b44:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b46:	2301      	movs	r3, #1
 8001b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b52:	f107 031c 	add.w	r3, r7, #28
 8001b56:	4619      	mov	r1, r3
 8001b58:	4830      	ldr	r0, [pc, #192]	; (8001c1c <MX_GPIO_Init+0x250>)
 8001b5a:	f002 fc15 	bl	8004388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 8001b5e:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8001b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b64:	2301      	movs	r3, #1
 8001b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b70:	f107 031c 	add.w	r3, r7, #28
 8001b74:	4619      	mov	r1, r3
 8001b76:	482a      	ldr	r0, [pc, #168]	; (8001c20 <MX_GPIO_Init+0x254>)
 8001b78:	f002 fc06 	bl	8004388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin|CUI_SPI2_MOSI_Pin;
 8001b7c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b8e:	2305      	movs	r3, #5
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b92:	f107 031c 	add.w	r3, r7, #28
 8001b96:	4619      	mov	r1, r3
 8001b98:	4820      	ldr	r0, [pc, #128]	; (8001c1c <MX_GPIO_Init+0x250>)
 8001b9a:	f002 fbf5 	bl	8004388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001b9e:	f64e 4308 	movw	r3, #60424	; 0xec08
 8001ba2:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bac:	2300      	movs	r3, #0
 8001bae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	481b      	ldr	r0, [pc, #108]	; (8001c24 <MX_GPIO_Init+0x258>)
 8001bb8:	f002 fbe6 	bl	8004388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 8001bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4814      	ldr	r0, [pc, #80]	; (8001c24 <MX_GPIO_Init+0x258>)
 8001bd2:	f002 fbd9 	bl	8004388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001bd6:	2320      	movs	r3, #32
 8001bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be2:	2303      	movs	r3, #3
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001be6:	2309      	movs	r3, #9
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bea:	f107 031c 	add.w	r3, r7, #28
 8001bee:	4619      	mov	r1, r3
 8001bf0:	480a      	ldr	r0, [pc, #40]	; (8001c1c <MX_GPIO_Init+0x250>)
 8001bf2:	f002 fbc9 	bl	8004388 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	2017      	movs	r0, #23
 8001bfc:	f002 f887 	bl	8003d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c00:	2017      	movs	r0, #23
 8001c02:	f002 f8a0 	bl	8003d46 <HAL_NVIC_EnableIRQ>

}
 8001c06:	bf00      	nop
 8001c08:	3730      	adds	r7, #48	; 0x30
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020800 	.word	0x40020800
 8001c18:	40020000 	.word	0x40020000
 8001c1c:	40020400 	.word	0x40020400
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40020c00 	.word	0x40020c00
 8001c28:	10210000 	.word	0x10210000

08001c2c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001c30:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <MX_I2C1_Init+0x74>)
 8001c32:	4a1c      	ldr	r2, [pc, #112]	; (8001ca4 <MX_I2C1_Init+0x78>)
 8001c34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001c36:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <MX_I2C1_Init+0x74>)
 8001c38:	4a1b      	ldr	r2, [pc, #108]	; (8001ca8 <MX_I2C1_Init+0x7c>)
 8001c3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c3c:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <MX_I2C1_Init+0x74>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c42:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <MX_I2C1_Init+0x74>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <MX_I2C1_Init+0x74>)
 8001c4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <MX_I2C1_Init+0x74>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c56:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <MX_I2C1_Init+0x74>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <MX_I2C1_Init+0x74>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c62:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <MX_I2C1_Init+0x74>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c68:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <MX_I2C1_Init+0x74>)
 8001c6a:	f002 fd83 	bl	8004774 <HAL_I2C_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c74:	f000 fb24 	bl	80022c0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4809      	ldr	r0, [pc, #36]	; (8001ca0 <MX_I2C1_Init+0x74>)
 8001c7c:	f002 febe 	bl	80049fc <HAL_I2CEx_ConfigAnalogFilter>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001c86:	f000 fb1b 	bl	80022c0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <MX_I2C1_Init+0x74>)
 8001c8e:	f002 fef1 	bl	8004a74 <HAL_I2CEx_ConfigDigitalFilter>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001c98:	f000 fb12 	bl	80022c0 <Error_Handler>
  }

}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200002e4 	.word	0x200002e4
 8001ca4:	40005400 	.word	0x40005400
 8001ca8:	00061a80 	.word	0x00061a80

08001cac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a19      	ldr	r2, [pc, #100]	; (8001d30 <HAL_I2C_MspInit+0x84>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d12c      	bne.n	8001d28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <HAL_I2C_MspInit+0x88>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a17      	ldr	r2, [pc, #92]	; (8001d34 <HAL_I2C_MspInit+0x88>)
 8001cd8:	f043 0302 	orr.w	r3, r3, #2
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <HAL_I2C_MspInit+0x88>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8001cea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cf0:	2312      	movs	r3, #18
 8001cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cfc:	2304      	movs	r3, #4
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4619      	mov	r1, r3
 8001d06:	480c      	ldr	r0, [pc, #48]	; (8001d38 <HAL_I2C_MspInit+0x8c>)
 8001d08:	f002 fb3e 	bl	8004388 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <HAL_I2C_MspInit+0x88>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	4a07      	ldr	r2, [pc, #28]	; (8001d34 <HAL_I2C_MspInit+0x88>)
 8001d16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <HAL_I2C_MspInit+0x88>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d28:	bf00      	nop
 8001d2a:	3728      	adds	r7, #40	; 0x28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40005400 	.word	0x40005400
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40020400 	.word	0x40020400

08001d3c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001d42:	f001 f811 	bl	8002d68 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001d46:	f000 f9e9 	bl	800211c <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 8001d4a:	f003 fb59 	bl	8005400 <HAL_RCC_GetHCLKFreq>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4ab7      	ldr	r2, [pc, #732]	; (8002030 <main+0x2f4>)
 8001d52:	fba2 2303 	umull	r2, r3, r2, r3
 8001d56:	099b      	lsrs	r3, r3, #6
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f002 f802 	bl	8003d62 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001d5e:	2004      	movs	r0, #4
 8001d60:	f002 f80c 	bl	8003d7c <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001d64:	2200      	movs	r2, #0
 8001d66:	2100      	movs	r1, #0
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d6c:	f001 ffcf 	bl	8003d0e <HAL_NVIC_SetPriority>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001d70:	f7ff fe2c 	bl	80019cc <MX_GPIO_Init>
	MX_DMA_Init();
 8001d74:	f7ff fd44 	bl	8001800 <MX_DMA_Init>
	MX_I2C1_Init();
 8001d78:	f7ff ff58 	bl	8001c2c <MX_I2C1_Init>
	MX_TIM1_Init();
 8001d7c:	f000 fbb0 	bl	80024e0 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001d80:	f000 fc4e 	bl	8002620 <MX_TIM2_Init>
	MX_USART3_UART_Init();
 8001d84:	f000 fef8 	bl	8002b78 <MX_USART3_UART_Init>
	MX_TIM3_Init();
 8001d88:	f000 fcc4 	bl	8002714 <MX_TIM3_Init>
	MX_TIM8_Init();
 8001d8c:	f000 fd44 	bl	8002818 <MX_TIM8_Init>
	MX_CAN1_Init();
 8001d90:	f7ff fc7e 	bl	8001690 <MX_CAN1_Init>
	MX_SPI1_Init();
 8001d94:	f000 fa9c 	bl	80022d0 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	//Initialize hardware communication
//	joystick_Init();
//	ADC_Init();
//	ADC_DataRequest();
	ENCODER_Init();
 8001d98:	f7ff fd52 	bl	8001840 <ENCODER_Init>
//	  DWT_Init();
//	while(MPU6050_Init(&hi2c1)==1);
	HAL_Delay(100);
 8001d9c:	2064      	movs	r0, #100	; 0x64
 8001d9e:	f001 f855 	bl	8002e4c <HAL_Delay>

	//Start base wheel pwm pin
	wheelSpeedControl_Init(&baseWheelSpeed, base_linSpeedLevel[base_speedLevel], base_angSpeedLevel[base_speedLevel]);
 8001da2:	4ba4      	ldr	r3, [pc, #656]	; (8002034 <main+0x2f8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4aa4      	ldr	r2, [pc, #656]	; (8002038 <main+0x2fc>)
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	edd3 7a00 	vldr	s15, [r3]
 8001db0:	4ba0      	ldr	r3, [pc, #640]	; (8002034 <main+0x2f8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4aa1      	ldr	r2, [pc, #644]	; (800203c <main+0x300>)
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	ed93 7a00 	vldr	s14, [r3]
 8001dbe:	eef0 0a47 	vmov.f32	s1, s14
 8001dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc6:	489e      	ldr	r0, [pc, #632]	; (8002040 <main+0x304>)
 8001dc8:	f000 ff7a 	bl	8002cc0 <wheelSpeedControl_Init>
	HAL_TIM_Base_Start(&MOTOR_TIM);
 8001dcc:	489d      	ldr	r0, [pc, #628]	; (8002044 <main+0x308>)
 8001dce:	f003 ff96 	bl	8005cfe <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_1);
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	489b      	ldr	r0, [pc, #620]	; (8002044 <main+0x308>)
 8001dd6:	f003 ffeb 	bl	8005db0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_2);
 8001dda:	2104      	movs	r1, #4
 8001ddc:	4899      	ldr	r0, [pc, #612]	; (8002044 <main+0x308>)
 8001dde:	f003 ffe7 	bl	8005db0 <HAL_TIM_PWM_Start>
	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = 1500;
 8001de2:	4b98      	ldr	r3, [pc, #608]	; (8002044 <main+0x308>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001dea:	635a      	str	r2, [r3, #52]	; 0x34
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = 1500;
 8001dec:	4b95      	ldr	r3, [pc, #596]	; (8002044 <main+0x308>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001df4:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(100);
 8001df6:	2064      	movs	r0, #100	; 0x64
 8001df8:	f001 f828 	bl	8002e4c <HAL_Delay>

//	//Initialize rear and back motor
	bd25l_Init(&rearMotor);
 8001dfc:	4892      	ldr	r0, [pc, #584]	; (8002048 <main+0x30c>)
 8001dfe:	f7ff fa97 	bl	8001330 <bd25l_Init>
	bd25l_Init(&backMotor);
 8001e02:	4892      	ldr	r0, [pc, #584]	; (800204c <main+0x310>)
 8001e04:	f7ff fa94 	bl	8001330 <bd25l_Init>
	runMotor(&rearMotor, 0);
 8001e08:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8002050 <main+0x314>
 8001e0c:	488e      	ldr	r0, [pc, #568]	; (8002048 <main+0x30c>)
 8001e0e:	f7ff fb8f 	bl	8001530 <runMotor>
	runMotor(&backMotor, 0);
 8001e12:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 8002050 <main+0x314>
 8001e16:	488d      	ldr	r0, [pc, #564]	; (800204c <main+0x310>)
 8001e18:	f7ff fb8a 	bl	8001530 <runMotor>
	emBrakeMotor(1);
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	f7ff faa9 	bl	8001374 <emBrakeMotor>
//	hubMotor_Init();
//	wheelSpeedControl_Init(&climbWheelSpeed, climb_linSpeedLevel[climb_speedLevel], climb_angSpeedLevel[climb_speedLevel]);

	//Initialize balance controller
	// Prepare PID controller for operation
	balance_pid = pid_create(&balance_ctrl, &balance_input, &balance_output, &balance_setpoint, balance_kp, balance_ki, balance_kd);
 8001e22:	4b8c      	ldr	r3, [pc, #560]	; (8002054 <main+0x318>)
 8001e24:	edd3 7a00 	vldr	s15, [r3]
 8001e28:	4b8b      	ldr	r3, [pc, #556]	; (8002058 <main+0x31c>)
 8001e2a:	ed93 7a00 	vldr	s14, [r3]
 8001e2e:	4b8b      	ldr	r3, [pc, #556]	; (800205c <main+0x320>)
 8001e30:	edd3 6a00 	vldr	s13, [r3]
 8001e34:	eeb0 1a66 	vmov.f32	s2, s13
 8001e38:	eef0 0a47 	vmov.f32	s1, s14
 8001e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e40:	4b87      	ldr	r3, [pc, #540]	; (8002060 <main+0x324>)
 8001e42:	4a88      	ldr	r2, [pc, #544]	; (8002064 <main+0x328>)
 8001e44:	4988      	ldr	r1, [pc, #544]	; (8002068 <main+0x32c>)
 8001e46:	4889      	ldr	r0, [pc, #548]	; (800206c <main+0x330>)
 8001e48:	f7fe ffec 	bl	8000e24 <pid_create>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	4a88      	ldr	r2, [pc, #544]	; (8002070 <main+0x334>)
 8001e50:	6013      	str	r3, [r2, #0]
	// Set controler output limits from 0 to 200
	pid_limits(balance_pid, -30, 30);
 8001e52:	4b87      	ldr	r3, [pc, #540]	; (8002070 <main+0x334>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8001e5a:	eebb 0a0e 	vmov.f32	s0, #190	; 0xc1f00000 -30.0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff f96c 	bl	800113c <pid_limits>
	//Sample time is 1ms
	pid_sample(balance_pid, 1);
 8001e64:	4b82      	ldr	r3, [pc, #520]	; (8002070 <main+0x334>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2101      	movs	r1, #1
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff f932 	bl	80010d4 <pid_sample>
	// Allow PID to compute and change output
	pid_auto(balance_pid);
 8001e70:	4b7f      	ldr	r3, [pc, #508]	; (8002070 <main+0x334>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff f9c6 	bl	8001206 <pid_auto>

	//Initialize climbing up controller
	// Prepare PID controller for operation
	climbUp_pid = pid_create(&climbUp_ctrl, &climbUp_input, &climbUp_output, &climbUp_setpoint, climbUp_kp, climbUp_ki, climbUp_kd);
 8001e7a:	4b7e      	ldr	r3, [pc, #504]	; (8002074 <main+0x338>)
 8001e7c:	edd3 7a00 	vldr	s15, [r3]
 8001e80:	4b7d      	ldr	r3, [pc, #500]	; (8002078 <main+0x33c>)
 8001e82:	ed93 7a00 	vldr	s14, [r3]
 8001e86:	4b7d      	ldr	r3, [pc, #500]	; (800207c <main+0x340>)
 8001e88:	edd3 6a00 	vldr	s13, [r3]
 8001e8c:	eeb0 1a66 	vmov.f32	s2, s13
 8001e90:	eef0 0a47 	vmov.f32	s1, s14
 8001e94:	eeb0 0a67 	vmov.f32	s0, s15
 8001e98:	4b79      	ldr	r3, [pc, #484]	; (8002080 <main+0x344>)
 8001e9a:	4a7a      	ldr	r2, [pc, #488]	; (8002084 <main+0x348>)
 8001e9c:	497a      	ldr	r1, [pc, #488]	; (8002088 <main+0x34c>)
 8001e9e:	487b      	ldr	r0, [pc, #492]	; (800208c <main+0x350>)
 8001ea0:	f7fe ffc0 	bl	8000e24 <pid_create>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	4a7a      	ldr	r2, [pc, #488]	; (8002090 <main+0x354>)
 8001ea8:	6013      	str	r3, [r2, #0]
	// Set controler output limits from 0 to 200
	pid_limits(climbUp_pid, -30, 30);
 8001eaa:	4b79      	ldr	r3, [pc, #484]	; (8002090 <main+0x354>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8001eb2:	eebb 0a0e 	vmov.f32	s0, #190	; 0xc1f00000 -30.0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff f940 	bl	800113c <pid_limits>
	//Sample time is 1ms
	pid_sample(climbUp_pid, 1);
 8001ebc:	4b74      	ldr	r3, [pc, #464]	; (8002090 <main+0x354>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff f906 	bl	80010d4 <pid_sample>
	// Allow PID to compute and change output
	pid_auto(climbUp_pid);
 8001ec8:	4b71      	ldr	r3, [pc, #452]	; (8002090 <main+0x354>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff f99a 	bl	8001206 <pid_auto>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint32_t prev_time = HAL_GetTick();
 8001ed2:	f000 ffaf 	bl	8002e34 <HAL_GetTick>
 8001ed6:	60f8      	str	r0, [r7, #12]


	HAL_Delay(500);
 8001ed8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001edc:	f000 ffb6 	bl	8002e4c <HAL_Delay>
	ENCODER_Get_Angle(&encoderLeft);
 8001ee0:	486c      	ldr	r0, [pc, #432]	; (8002094 <main+0x358>)
 8001ee2:	f7ff fd3e 	bl	8001962 <ENCODER_Get_Angle>
	ENCODER_Get_Angle(&encoderRight);
 8001ee6:	486c      	ldr	r0, [pc, #432]	; (8002098 <main+0x35c>)
 8001ee8:	f7ff fd3b 	bl	8001962 <ENCODER_Get_Angle>
	HAL_Delay(500);
 8001eec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ef0:	f000 ffac 	bl	8002e4c <HAL_Delay>
	//debug variable
	uint32_t debug_prev_time = HAL_GetTick();
 8001ef4:	f000 ff9e 	bl	8002e34 <HAL_GetTick>
 8001ef8:	60b8      	str	r0, [r7, #8]
	uint8_t led_status = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	71fb      	strb	r3, [r7, #7]
	//  float speed = 0;
	while (1)
	{
		//Code to debug with blinking LED
		if (HAL_GetTick() - debug_prev_time >= 1000){
 8001efe:	f000 ff99 	bl	8002e34 <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f0c:	d317      	bcc.n	8001f3e <main+0x202>
			if (led_status == 0){
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d107      	bne.n	8001f24 <main+0x1e8>
				//	      count++;
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001f14:	2201      	movs	r2, #1
 8001f16:	2108      	movs	r1, #8
 8001f18:	4860      	ldr	r0, [pc, #384]	; (800209c <main+0x360>)
 8001f1a:	f002 fbf9 	bl	8004710 <HAL_GPIO_WritePin>
				led_status = 1;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	71fb      	strb	r3, [r7, #7]
 8001f22:	e009      	b.n	8001f38 <main+0x1fc>
			}
			else if (led_status == 1){
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d106      	bne.n	8001f38 <main+0x1fc>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2108      	movs	r1, #8
 8001f2e:	485b      	ldr	r0, [pc, #364]	; (800209c <main+0x360>)
 8001f30:	f002 fbee 	bl	8004710 <HAL_GPIO_WritePin>
				led_status = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	71fb      	strb	r3, [r7, #7]
			}
			debug_prev_time = HAL_GetTick();
 8001f38:	f000 ff7c 	bl	8002e34 <HAL_GetTick>
 8001f3c:	60b8      	str	r0, [r7, #8]

		//      runMotor(&backMotor, speed++, 1);
//		ENCODER_Get_Angle(&encoderLeft);
//		ENCODER_Get_Angle(&encoderRight);
		//Loop should execute once every 1 tick
		if(HAL_GetTick() - prev_time >= 1)
 8001f3e:	f000 ff79 	bl	8002e34 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d0d9      	beq.n	8001efe <main+0x1c2>
		{
			//	ADC_DataRequest();
					ENCODER_Get_Angle(&encoderLeft);
 8001f4a:	4852      	ldr	r0, [pc, #328]	; (8002094 <main+0x358>)
 8001f4c:	f7ff fd09 	bl	8001962 <ENCODER_Get_Angle>
					ENCODER_Get_Angle(&encoderRight);
 8001f50:	4851      	ldr	r0, [pc, #324]	; (8002098 <main+0x35c>)
 8001f52:	f7ff fd06 	bl	8001962 <ENCODER_Get_Angle>

			//Get kamlan filtered angle from MPU6050
			//	MPU6050_Read_All(&hi2c1, &MPU6050);
			GPIO_Digital_Filtered_Input(&button1, 30);
 8001f56:	211e      	movs	r1, #30
 8001f58:	4851      	ldr	r0, [pc, #324]	; (80020a0 <main+0x364>)
 8001f5a:	f7ff fb60 	bl	800161e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button2, 30);
 8001f5e:	211e      	movs	r1, #30
 8001f60:	4850      	ldr	r0, [pc, #320]	; (80020a4 <main+0x368>)
 8001f62:	f7ff fb5c 	bl	800161e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button3, 30);
 8001f66:	211e      	movs	r1, #30
 8001f68:	484f      	ldr	r0, [pc, #316]	; (80020a8 <main+0x36c>)
 8001f6a:	f7ff fb58 	bl	800161e <GPIO_Digital_Filtered_Input>

			GPIO_Digital_Filtered_Input(&rearLS1, 5);
 8001f6e:	2105      	movs	r1, #5
 8001f70:	484e      	ldr	r0, [pc, #312]	; (80020ac <main+0x370>)
 8001f72:	f7ff fb54 	bl	800161e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&rearLS2, 5);
 8001f76:	2105      	movs	r1, #5
 8001f78:	484d      	ldr	r0, [pc, #308]	; (80020b0 <main+0x374>)
 8001f7a:	f7ff fb50 	bl	800161e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS1, 5);
 8001f7e:	2105      	movs	r1, #5
 8001f80:	484c      	ldr	r0, [pc, #304]	; (80020b4 <main+0x378>)
 8001f82:	f7ff fb4c 	bl	800161e <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS2, 5);
 8001f86:	2105      	movs	r1, #5
 8001f88:	484b      	ldr	r0, [pc, #300]	; (80020b8 <main+0x37c>)
 8001f8a:	f7ff fb48 	bl	800161e <GPIO_Digital_Filtered_Input>
			//---------------------------------------------------------------------------------------------------
			//Testing Climbing Balance Control
			//---------------------------------------------------------------------------------------------------


			if(button2.state == GPIO_PIN_SET){
 8001f8e:	4b45      	ldr	r3, [pc, #276]	; (80020a4 <main+0x368>)
 8001f90:	7a1b      	ldrb	r3, [r3, #8]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d10e      	bne.n	8001fb4 <main+0x278>
				if (state == TEST) state = NORMAL;
 8001f96:	4b49      	ldr	r3, [pc, #292]	; (80020bc <main+0x380>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d103      	bne.n	8001fa6 <main+0x26a>
 8001f9e:	4b47      	ldr	r3, [pc, #284]	; (80020bc <main+0x380>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
 8001fa4:	e006      	b.n	8001fb4 <main+0x278>
				else if (state == NORMAL) state = TEST;
 8001fa6:	4b45      	ldr	r3, [pc, #276]	; (80020bc <main+0x380>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d102      	bne.n	8001fb4 <main+0x278>
 8001fae:	4b43      	ldr	r3, [pc, #268]	; (80020bc <main+0x380>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
			}

			if (state == TEST){
 8001fb4:	4b41      	ldr	r3, [pc, #260]	; (80020bc <main+0x380>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d128      	bne.n	800200e <main+0x2d2>
				if (pid_need_compute(climbUp_pid) && fabs(MAX_FRONT_CLIMBING_ENC - encoderRight.encoder_pos) > 30){
 8001fbc:	4b34      	ldr	r3, [pc, #208]	; (8002090 <main+0x354>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe ff71 	bl	8000ea8 <pid_need_compute>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d01c      	beq.n	8002006 <main+0x2ca>
 8001fcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fd0:	4b31      	ldr	r3, [pc, #196]	; (8002098 <main+0x35c>)
 8001fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b1e      	cmp	r3, #30
 8001fd8:	d915      	bls.n	8002006 <main+0x2ca>
					// Read process feedback
					climbUp_input = (float)(encoderRight.encoder_pos  - MAX_FRONT_CLIMBING_ENC);
 8001fda:	4b2f      	ldr	r3, [pc, #188]	; (8002098 <main+0x35c>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fe2:	1a9b      	subs	r3, r3, r2
 8001fe4:	ee07 3a90 	vmov	s15, r3
 8001fe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fec:	4b26      	ldr	r3, [pc, #152]	; (8002088 <main+0x34c>)
 8001fee:	edc3 7a00 	vstr	s15, [r3]
					// Compute new PID output value
					pid_compute(climbUp_pid);
 8001ff2:	4b27      	ldr	r3, [pc, #156]	; (8002090 <main+0x354>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe ff6b 	bl	8000ed2 <pid_compute>
					//Change actuator value
					speed[FRONT_INDEX] = climbUp_output;
 8001ffc:	4b21      	ldr	r3, [pc, #132]	; (8002084 <main+0x348>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a2f      	ldr	r2, [pc, #188]	; (80020c0 <main+0x384>)
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	e003      	b.n	800200e <main+0x2d2>
				}
				else speed[FRONT_INDEX] = 0;
 8002006:	4b2e      	ldr	r3, [pc, #184]	; (80020c0 <main+0x384>)
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	601a      	str	r2, [r3, #0]

			}

			if (state == NORMAL){
 800200e:	4b2b      	ldr	r3, [pc, #172]	; (80020bc <main+0x380>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d16c      	bne.n	80020f0 <main+0x3b4>
				if (button1.state == GPIO_PIN_SET && button3.state == GPIO_PIN_RESET)
 8002016:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <main+0x364>)
 8002018:	7a1b      	ldrb	r3, [r3, #8]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d154      	bne.n	80020c8 <main+0x38c>
 800201e:	4b22      	ldr	r3, [pc, #136]	; (80020a8 <main+0x36c>)
 8002020:	7a1b      	ldrb	r3, [r3, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d150      	bne.n	80020c8 <main+0x38c>
					speed[FRONT_INDEX] = 30;
 8002026:	4b26      	ldr	r3, [pc, #152]	; (80020c0 <main+0x384>)
 8002028:	4a26      	ldr	r2, [pc, #152]	; (80020c4 <main+0x388>)
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	e060      	b.n	80020f0 <main+0x3b4>
 800202e:	bf00      	nop
 8002030:	10624dd3 	.word	0x10624dd3
 8002034:	20000098 	.word	0x20000098
 8002038:	08007538 	.word	0x08007538
 800203c:	08007544 	.word	0x08007544
 8002040:	20000068 	.word	0x20000068
 8002044:	20000484 	.word	0x20000484
 8002048:	20000000 	.word	0x20000000
 800204c:	20000034 	.word	0x20000034
 8002050:	00000000 	.word	0x00000000
 8002054:	2000010c 	.word	0x2000010c
 8002058:	20000110 	.word	0x20000110
 800205c:	20000114 	.word	0x20000114
 8002060:	20000168 	.word	0x20000168
 8002064:	20000164 	.word	0x20000164
 8002068:	20000160 	.word	0x20000160
 800206c:	200003f4 	.word	0x200003f4
 8002070:	200003a8 	.word	0x200003a8
 8002074:	20000118 	.word	0x20000118
 8002078:	2000011c 	.word	0x2000011c
 800207c:	20000120 	.word	0x20000120
 8002080:	20000174 	.word	0x20000174
 8002084:	20000170 	.word	0x20000170
 8002088:	2000016c 	.word	0x2000016c
 800208c:	200003c0 	.word	0x200003c0
 8002090:	200003bc 	.word	0x200003bc
 8002094:	20000214 	.word	0x20000214
 8002098:	20000290 	.word	0x20000290
 800209c:	40020400 	.word	0x40020400
 80020a0:	200000dc 	.word	0x200000dc
 80020a4:	200000ec 	.word	0x200000ec
 80020a8:	200000fc 	.word	0x200000fc
 80020ac:	2000009c 	.word	0x2000009c
 80020b0:	200000ac 	.word	0x200000ac
 80020b4:	200000bc 	.word	0x200000bc
 80020b8:	200000cc 	.word	0x200000cc
 80020bc:	20000124 	.word	0x20000124
 80020c0:	20000158 	.word	0x20000158
 80020c4:	41f00000 	.word	0x41f00000
				else if(button1.state == GPIO_PIN_SET && button3.state == GPIO_PIN_SET)
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <main+0x3cc>)
 80020ca:	7a1b      	ldrb	r3, [r3, #8]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d107      	bne.n	80020e0 <main+0x3a4>
 80020d0:	4b0e      	ldr	r3, [pc, #56]	; (800210c <main+0x3d0>)
 80020d2:	7a1b      	ldrb	r3, [r3, #8]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d103      	bne.n	80020e0 <main+0x3a4>
					speed[FRONT_INDEX] = -30;
 80020d8:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <main+0x3d4>)
 80020da:	4a0e      	ldr	r2, [pc, #56]	; (8002114 <main+0x3d8>)
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	e007      	b.n	80020f0 <main+0x3b4>
				else if (button1.state == GPIO_PIN_RESET)
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <main+0x3cc>)
 80020e2:	7a1b      	ldrb	r3, [r3, #8]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d103      	bne.n	80020f0 <main+0x3b4>
					speed[FRONT_INDEX] = 0;
 80020e8:	4b09      	ldr	r3, [pc, #36]	; (8002110 <main+0x3d4>)
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
			}
			runMotor(&rearMotor, speed[FRONT_INDEX]);
 80020f0:	4b07      	ldr	r3, [pc, #28]	; (8002110 <main+0x3d4>)
 80020f2:	edd3 7a00 	vldr	s15, [r3]
 80020f6:	eeb0 0a67 	vmov.f32	s0, s15
 80020fa:	4807      	ldr	r0, [pc, #28]	; (8002118 <main+0x3dc>)
 80020fc:	f7ff fa18 	bl	8001530 <runMotor>
			//
			//	//Climbing phase start



			prev_time = HAL_GetTick();
 8002100:	f000 fe98 	bl	8002e34 <HAL_GetTick>
 8002104:	60f8      	str	r0, [r7, #12]
		if (HAL_GetTick() - debug_prev_time >= 1000){
 8002106:	e6fa      	b.n	8001efe <main+0x1c2>
 8002108:	200000dc 	.word	0x200000dc
 800210c:	200000fc 	.word	0x200000fc
 8002110:	20000158 	.word	0x20000158
 8002114:	c1f00000 	.word	0xc1f00000
 8002118:	20000000 	.word	0x20000000

0800211c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b094      	sub	sp, #80	; 0x50
 8002120:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002122:	f107 0320 	add.w	r3, r7, #32
 8002126:	2230      	movs	r2, #48	; 0x30
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f005 f9f0 	bl	8007510 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002130:	f107 030c 	add.w	r3, r7, #12
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002140:	2300      	movs	r3, #0
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <SystemClock_Config+0xd8>)
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	4a2a      	ldr	r2, [pc, #168]	; (80021f4 <SystemClock_Config+0xd8>)
 800214a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214e:	6413      	str	r3, [r2, #64]	; 0x40
 8002150:	4b28      	ldr	r3, [pc, #160]	; (80021f4 <SystemClock_Config+0xd8>)
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800215c:	2300      	movs	r3, #0
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	4b25      	ldr	r3, [pc, #148]	; (80021f8 <SystemClock_Config+0xdc>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a24      	ldr	r2, [pc, #144]	; (80021f8 <SystemClock_Config+0xdc>)
 8002166:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	4b22      	ldr	r3, [pc, #136]	; (80021f8 <SystemClock_Config+0xdc>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002178:	2301      	movs	r3, #1
 800217a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800217c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002182:	2302      	movs	r3, #2
 8002184:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002186:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800218a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800218c:	2308      	movs	r3, #8
 800218e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8002190:	23b4      	movs	r3, #180	; 0xb4
 8002192:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002194:	2302      	movs	r3, #2
 8002196:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002198:	2304      	movs	r3, #4
 800219a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800219c:	f107 0320 	add.w	r3, r7, #32
 80021a0:	4618      	mov	r0, r3
 80021a2:	f002 fcf7 	bl	8004b94 <HAL_RCC_OscConfig>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80021ac:	f000 f888 	bl	80022c0 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80021b0:	f002 fca0 	bl	8004af4 <HAL_PWREx_EnableOverDrive>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <SystemClock_Config+0xa2>
	{
		Error_Handler();
 80021ba:	f000 f881 	bl	80022c0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021be:	230f      	movs	r3, #15
 80021c0:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021c2:	2302      	movs	r3, #2
 80021c4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021ce:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021d6:	f107 030c 	add.w	r3, r7, #12
 80021da:	2105      	movs	r1, #5
 80021dc:	4618      	mov	r0, r3
 80021de:	f002 ff49 	bl	8005074 <HAL_RCC_ClockConfig>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <SystemClock_Config+0xd0>
	{
		Error_Handler();
 80021e8:	f000 f86a 	bl	80022c0 <Error_Handler>
	}
}
 80021ec:	bf00      	nop
 80021ee:	3750      	adds	r7, #80	; 0x50
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40007000 	.word	0x40007000

080021fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	2b80      	cmp	r3, #128	; 0x80
 800220a:	d11c      	bne.n	8002246 <HAL_GPIO_EXTI_Callback+0x4a>
	case AD_BUSY_Pin:{
		if (HAL_GetTick()-prev_adc_time > 1){
 800220c:	f000 fe12 	bl	8002e34 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <HAL_GPIO_EXTI_Callback+0x58>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b01      	cmp	r3, #1
 800221a:	d916      	bls.n	800224a <HAL_GPIO_EXTI_Callback+0x4e>
			ADC_Read(&adc_rawData[0]);
 800221c:	480e      	ldr	r0, [pc, #56]	; (8002258 <HAL_GPIO_EXTI_Callback+0x5c>)
 800221e:	f7ff f86b 	bl	80012f8 <ADC_Read>
			tempJoyRawDataX = adc_rawData[0];
 8002222:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002224:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002228:	461a      	mov	r2, r3
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <HAL_GPIO_EXTI_Callback+0x60>)
 800222c:	601a      	str	r2, [r3, #0]
			tempJoyRawDataY = adc_rawData[1];
 800222e:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002230:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002234:	461a      	mov	r2, r3
 8002236:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <HAL_GPIO_EXTI_Callback+0x64>)
 8002238:	601a      	str	r2, [r3, #0]
			prev_adc_time = HAL_GetTick();
 800223a:	f000 fdfb 	bl	8002e34 <HAL_GetTick>
 800223e:	4603      	mov	r3, r0
 8002240:	4a04      	ldr	r2, [pc, #16]	; (8002254 <HAL_GPIO_EXTI_Callback+0x58>)
 8002242:	6013      	str	r3, [r2, #0]
		}
	}

	break;
 8002244:	e001      	b.n	800224a <HAL_GPIO_EXTI_Callback+0x4e>
	default:
		break;
 8002246:	bf00      	nop
 8002248:	e000      	b.n	800224c <HAL_GPIO_EXTI_Callback+0x50>
	break;
 800224a:	bf00      	nop
	}
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20000154 	.word	0x20000154
 8002258:	200003ac 	.word	0x200003ac
 800225c:	20000440 	.word	0x20000440
 8002260:	20000338 	.word	0x20000338

08002264 <HAL_CAN_RxFifo0MsgPendingCallback>:
	}

}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	//Left Encoder Callback
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	if (hcan == &hcan1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a10      	ldr	r2, [pc, #64]	; (80022b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d118      	bne.n	80022a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 8002274:	f107 0308 	add.w	r3, r7, #8
 8002278:	4a0e      	ldr	r2, [pc, #56]	; (80022b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800227a:	2100      	movs	r1, #0
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f001 f904 	bl	800348a <HAL_CAN_GetRxMessage>
		if(incoming[1] == ENC_ADDR_LEFT){
 8002282:	7a7b      	ldrb	r3, [r7, #9]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d105      	bne.n	8002294 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
			ENCODER_Sort_Incoming(incoming, &encoderLeft);
 8002288:	f107 0308 	add.w	r3, r7, #8
 800228c:	490a      	ldr	r1, [pc, #40]	; (80022b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff faee 	bl	8001870 <ENCODER_Sort_Incoming>
//			ENCODER_Get_Angle(&encoderLeft);
		}
		if(incoming[1] == ENC_ADDR_RIGHT){
 8002294:	7a7b      	ldrb	r3, [r7, #9]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d105      	bne.n	80022a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
			ENCODER_Sort_Incoming(incoming, &encoderRight);
 800229a:	f107 0308 	add.w	r3, r7, #8
 800229e:	4907      	ldr	r1, [pc, #28]	; (80022bc <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fae5 	bl	8001870 <ENCODER_Sort_Incoming>
//			ENCODER_Get_Angle(&encoderRight);
		}

	}

}
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200001ec 	.word	0x200001ec
 80022b4:	20000178 	.word	0x20000178
 80022b8:	20000214 	.word	0x20000214
 80022bc:	20000290 	.word	0x20000290

080022c0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80022d4:	4b18      	ldr	r3, [pc, #96]	; (8002338 <MX_SPI1_Init+0x68>)
 80022d6:	4a19      	ldr	r2, [pc, #100]	; (800233c <MX_SPI1_Init+0x6c>)
 80022d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80022da:	4b17      	ldr	r3, [pc, #92]	; (8002338 <MX_SPI1_Init+0x68>)
 80022dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <MX_SPI1_Init+0x68>)
 80022e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022e8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80022ea:	4b13      	ldr	r3, [pc, #76]	; (8002338 <MX_SPI1_Init+0x68>)
 80022ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <MX_SPI1_Init+0x68>)
 80022f4:	2202      	movs	r2, #2
 80022f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022f8:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <MX_SPI1_Init+0x68>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80022fe:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <MX_SPI1_Init+0x68>)
 8002300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002304:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002306:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <MX_SPI1_Init+0x68>)
 8002308:	2228      	movs	r2, #40	; 0x28
 800230a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800230c:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <MX_SPI1_Init+0x68>)
 800230e:	2200      	movs	r2, #0
 8002310:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002312:	4b09      	ldr	r3, [pc, #36]	; (8002338 <MX_SPI1_Init+0x68>)
 8002314:	2200      	movs	r2, #0
 8002316:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002318:	4b07      	ldr	r3, [pc, #28]	; (8002338 <MX_SPI1_Init+0x68>)
 800231a:	2200      	movs	r2, #0
 800231c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <MX_SPI1_Init+0x68>)
 8002320:	220a      	movs	r2, #10
 8002322:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002324:	4804      	ldr	r0, [pc, #16]	; (8002338 <MX_SPI1_Init+0x68>)
 8002326:	f003 f89f 	bl	8005468 <HAL_SPI_Init>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8002330:	f7ff ffc6 	bl	80022c0 <Error_Handler>
  }

}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000194 	.word	0x20000194
 800233c:	40013000 	.word	0x40013000

08002340 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a19      	ldr	r2, [pc, #100]	; (80023c4 <HAL_SPI_MspInit+0x84>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d12b      	bne.n	80023ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <HAL_SPI_MspInit+0x88>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	4a17      	ldr	r2, [pc, #92]	; (80023c8 <HAL_SPI_MspInit+0x88>)
 800236c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002370:	6453      	str	r3, [r2, #68]	; 0x44
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <HAL_SPI_MspInit+0x88>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <HAL_SPI_MspInit+0x88>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a10      	ldr	r2, [pc, #64]	; (80023c8 <HAL_SPI_MspInit+0x88>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <HAL_SPI_MspInit+0x88>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 800239a:	2360      	movs	r3, #96	; 0x60
 800239c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239e:	2302      	movs	r3, #2
 80023a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a6:	2303      	movs	r3, #3
 80023a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023aa:	2305      	movs	r3, #5
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ae:	f107 0314 	add.w	r3, r7, #20
 80023b2:	4619      	mov	r1, r3
 80023b4:	4805      	ldr	r0, [pc, #20]	; (80023cc <HAL_SPI_MspInit+0x8c>)
 80023b6:	f001 ffe7 	bl	8004388 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80023ba:	bf00      	nop
 80023bc:	3728      	adds	r7, #40	; 0x28
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40013000 	.word	0x40013000
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40020000 	.word	0x40020000

080023d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	607b      	str	r3, [r7, #4]
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <HAL_MspInit+0x4c>)
 80023dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023de:	4a0f      	ldr	r2, [pc, #60]	; (800241c <HAL_MspInit+0x4c>)
 80023e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e4:	6453      	str	r3, [r2, #68]	; 0x44
 80023e6:	4b0d      	ldr	r3, [pc, #52]	; (800241c <HAL_MspInit+0x4c>)
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ee:	607b      	str	r3, [r7, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	603b      	str	r3, [r7, #0]
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_MspInit+0x4c>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	4a08      	ldr	r2, [pc, #32]	; (800241c <HAL_MspInit+0x4c>)
 80023fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002400:	6413      	str	r3, [r2, #64]	; 0x40
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_MspInit+0x4c>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240a:	603b      	str	r3, [r7, #0]
 800240c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800

08002420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002432:	e7fe      	b.n	8002432 <HardFault_Handler+0x4>

08002434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002438:	e7fe      	b.n	8002438 <MemManage_Handler+0x4>

0800243a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800243e:	e7fe      	b.n	800243e <BusFault_Handler+0x4>

08002440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002444:	e7fe      	b.n	8002444 <UsageFault_Handler+0x4>

08002446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002474:	f000 fcca 	bl	8002e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}

0800247c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <DMA1_Stream1_IRQHandler+0x10>)
 8002482:	f001 fd45 	bl	8003f10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000544 	.word	0x20000544

08002490 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <CAN1_RX0_IRQHandler+0x10>)
 8002496:	f001 f930 	bl	80036fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200001ec 	.word	0x200001ec

080024a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80024a8:	2080      	movs	r0, #128	; 0x80
 80024aa:	f002 f94b 	bl	8004744 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024b8:	4b08      	ldr	r3, [pc, #32]	; (80024dc <SystemInit+0x28>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024be:	4a07      	ldr	r2, [pc, #28]	; (80024dc <SystemInit+0x28>)
 80024c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024c8:	4b04      	ldr	r3, [pc, #16]	; (80024dc <SystemInit+0x28>)
 80024ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024ce:	609a      	str	r2, [r3, #8]
#endif
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b096      	sub	sp, #88	; 0x58
 80024e4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	605a      	str	r2, [r3, #4]
 80024f0:	609a      	str	r2, [r3, #8]
 80024f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	60da      	str	r2, [r3, #12]
 800250c:	611a      	str	r2, [r3, #16]
 800250e:	615a      	str	r2, [r3, #20]
 8002510:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002512:	1d3b      	adds	r3, r7, #4
 8002514:	2220      	movs	r2, #32
 8002516:	2100      	movs	r1, #0
 8002518:	4618      	mov	r0, r3
 800251a:	f004 fff9 	bl	8007510 <memset>

  htim1.Instance = TIM1;
 800251e:	4b3e      	ldr	r3, [pc, #248]	; (8002618 <MX_TIM1_Init+0x138>)
 8002520:	4a3e      	ldr	r2, [pc, #248]	; (800261c <MX_TIM1_Init+0x13c>)
 8002522:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8002524:	4b3c      	ldr	r3, [pc, #240]	; (8002618 <MX_TIM1_Init+0x138>)
 8002526:	22b3      	movs	r2, #179	; 0xb3
 8002528:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800252a:	4b3b      	ldr	r3, [pc, #236]	; (8002618 <MX_TIM1_Init+0x138>)
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8002530:	4b39      	ldr	r3, [pc, #228]	; (8002618 <MX_TIM1_Init+0x138>)
 8002532:	2263      	movs	r2, #99	; 0x63
 8002534:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002536:	4b38      	ldr	r3, [pc, #224]	; (8002618 <MX_TIM1_Init+0x138>)
 8002538:	2200      	movs	r2, #0
 800253a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800253c:	4b36      	ldr	r3, [pc, #216]	; (8002618 <MX_TIM1_Init+0x138>)
 800253e:	2200      	movs	r2, #0
 8002540:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002542:	4b35      	ldr	r3, [pc, #212]	; (8002618 <MX_TIM1_Init+0x138>)
 8002544:	2200      	movs	r2, #0
 8002546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002548:	4833      	ldr	r0, [pc, #204]	; (8002618 <MX_TIM1_Init+0x138>)
 800254a:	f003 fbad 	bl	8005ca8 <HAL_TIM_Base_Init>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002554:	f7ff feb4 	bl	80022c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800255c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800255e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002562:	4619      	mov	r1, r3
 8002564:	482c      	ldr	r0, [pc, #176]	; (8002618 <MX_TIM1_Init+0x138>)
 8002566:	f003 fdf9 	bl	800615c <HAL_TIM_ConfigClockSource>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002570:	f7ff fea6 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002574:	4828      	ldr	r0, [pc, #160]	; (8002618 <MX_TIM1_Init+0x138>)
 8002576:	f003 fbe6 	bl	8005d46 <HAL_TIM_PWM_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002580:	f7ff fe9e 	bl	80022c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002584:	2300      	movs	r3, #0
 8002586:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002588:	2300      	movs	r3, #0
 800258a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800258c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002590:	4619      	mov	r1, r3
 8002592:	4821      	ldr	r0, [pc, #132]	; (8002618 <MX_TIM1_Init+0x138>)
 8002594:	f004 fae0 	bl	8006b58 <HAL_TIMEx_MasterConfigSynchronization>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800259e:	f7ff fe8f 	bl	80022c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025a2:	2360      	movs	r3, #96	; 0x60
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025aa:	2300      	movs	r3, #0
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025ae:	2300      	movs	r3, #0
 80025b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025b6:	2300      	movs	r3, #0
 80025b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025ba:	2300      	movs	r3, #0
 80025bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c2:	2204      	movs	r2, #4
 80025c4:	4619      	mov	r1, r3
 80025c6:	4814      	ldr	r0, [pc, #80]	; (8002618 <MX_TIM1_Init+0x138>)
 80025c8:	f003 fd02 	bl	8005fd0 <HAL_TIM_PWM_ConfigChannel>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80025d2:	f7ff fe75 	bl	80022c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025d6:	2300      	movs	r3, #0
 80025d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025da:	2300      	movs	r3, #0
 80025dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	4619      	mov	r1, r3
 80025f8:	4807      	ldr	r0, [pc, #28]	; (8002618 <MX_TIM1_Init+0x138>)
 80025fa:	f004 fb29 	bl	8006c50 <HAL_TIMEx_ConfigBreakDeadTime>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002604:	f7ff fe5c 	bl	80022c0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8002608:	4803      	ldr	r0, [pc, #12]	; (8002618 <MX_TIM1_Init+0x138>)
 800260a:	f000 fa2b 	bl	8002a64 <HAL_TIM_MspPostInit>

}
 800260e:	bf00      	nop
 8002610:	3758      	adds	r7, #88	; 0x58
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	200004c4 	.word	0x200004c4
 800261c:	40010000 	.word	0x40010000

08002620 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	; 0x28
 8002624:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002626:	f107 0318 	add.w	r3, r7, #24
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	605a      	str	r2, [r3, #4]
 8002630:	609a      	str	r2, [r3, #8]
 8002632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002634:	f107 0310 	add.w	r3, r7, #16
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800263e:	463b      	mov	r3, r7
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800264a:	4b31      	ldr	r3, [pc, #196]	; (8002710 <MX_TIM2_Init+0xf0>)
 800264c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002650:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8002652:	4b2f      	ldr	r3, [pc, #188]	; (8002710 <MX_TIM2_Init+0xf0>)
 8002654:	22b3      	movs	r2, #179	; 0xb3
 8002656:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002658:	4b2d      	ldr	r3, [pc, #180]	; (8002710 <MX_TIM2_Init+0xf0>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536-1;
 800265e:	4b2c      	ldr	r3, [pc, #176]	; (8002710 <MX_TIM2_Init+0xf0>)
 8002660:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002664:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002666:	4b2a      	ldr	r3, [pc, #168]	; (8002710 <MX_TIM2_Init+0xf0>)
 8002668:	2200      	movs	r2, #0
 800266a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800266c:	4b28      	ldr	r3, [pc, #160]	; (8002710 <MX_TIM2_Init+0xf0>)
 800266e:	2200      	movs	r2, #0
 8002670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002672:	4827      	ldr	r0, [pc, #156]	; (8002710 <MX_TIM2_Init+0xf0>)
 8002674:	f003 fb18 	bl	8005ca8 <HAL_TIM_Base_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800267e:	f7ff fe1f 	bl	80022c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002686:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002688:	f107 0318 	add.w	r3, r7, #24
 800268c:	4619      	mov	r1, r3
 800268e:	4820      	ldr	r0, [pc, #128]	; (8002710 <MX_TIM2_Init+0xf0>)
 8002690:	f003 fd64 	bl	800615c <HAL_TIM_ConfigClockSource>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800269a:	f7ff fe11 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800269e:	481c      	ldr	r0, [pc, #112]	; (8002710 <MX_TIM2_Init+0xf0>)
 80026a0:	f003 fbc4 	bl	8005e2c <HAL_TIM_IC_Init>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80026aa:	f7ff fe09 	bl	80022c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026b6:	f107 0310 	add.w	r3, r7, #16
 80026ba:	4619      	mov	r1, r3
 80026bc:	4814      	ldr	r0, [pc, #80]	; (8002710 <MX_TIM2_Init+0xf0>)
 80026be:	f004 fa4b 	bl	8006b58 <HAL_TIMEx_MasterConfigSynchronization>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80026c8:	f7ff fdfa 	bl	80022c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80026cc:	2300      	movs	r3, #0
 80026ce:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80026d0:	2301      	movs	r3, #1
 80026d2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80026dc:	463b      	mov	r3, r7
 80026de:	2208      	movs	r2, #8
 80026e0:	4619      	mov	r1, r3
 80026e2:	480b      	ldr	r0, [pc, #44]	; (8002710 <MX_TIM2_Init+0xf0>)
 80026e4:	f003 fbd7 	bl	8005e96 <HAL_TIM_IC_ConfigChannel>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80026ee:	f7ff fde7 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80026f2:	463b      	mov	r3, r7
 80026f4:	220c      	movs	r2, #12
 80026f6:	4619      	mov	r1, r3
 80026f8:	4805      	ldr	r0, [pc, #20]	; (8002710 <MX_TIM2_Init+0xf0>)
 80026fa:	f003 fbcc 	bl	8005e96 <HAL_TIM_IC_ConfigChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8002704:	f7ff fddc 	bl	80022c0 <Error_Handler>
  }

}
 8002708:	bf00      	nop
 800270a:	3728      	adds	r7, #40	; 0x28
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000504 	.word	0x20000504

08002714 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08e      	sub	sp, #56	; 0x38
 8002718:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800271a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	609a      	str	r2, [r3, #8]
 8002726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002728:	f107 0320 	add.w	r3, r7, #32
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	611a      	str	r2, [r3, #16]
 8002740:	615a      	str	r2, [r3, #20]
 8002742:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8002744:	4b32      	ldr	r3, [pc, #200]	; (8002810 <MX_TIM3_Init+0xfc>)
 8002746:	4a33      	ldr	r2, [pc, #204]	; (8002814 <MX_TIM3_Init+0x100>)
 8002748:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 800274a:	4b31      	ldr	r3, [pc, #196]	; (8002810 <MX_TIM3_Init+0xfc>)
 800274c:	2259      	movs	r2, #89	; 0x59
 800274e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002750:	4b2f      	ldr	r3, [pc, #188]	; (8002810 <MX_TIM3_Init+0xfc>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8002756:	4b2e      	ldr	r3, [pc, #184]	; (8002810 <MX_TIM3_Init+0xfc>)
 8002758:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800275c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800275e:	4b2c      	ldr	r3, [pc, #176]	; (8002810 <MX_TIM3_Init+0xfc>)
 8002760:	2200      	movs	r2, #0
 8002762:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002764:	4b2a      	ldr	r3, [pc, #168]	; (8002810 <MX_TIM3_Init+0xfc>)
 8002766:	2200      	movs	r2, #0
 8002768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800276a:	4829      	ldr	r0, [pc, #164]	; (8002810 <MX_TIM3_Init+0xfc>)
 800276c:	f003 fa9c 	bl	8005ca8 <HAL_TIM_Base_Init>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002776:	f7ff fda3 	bl	80022c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800277a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002780:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002784:	4619      	mov	r1, r3
 8002786:	4822      	ldr	r0, [pc, #136]	; (8002810 <MX_TIM3_Init+0xfc>)
 8002788:	f003 fce8 	bl	800615c <HAL_TIM_ConfigClockSource>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002792:	f7ff fd95 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002796:	481e      	ldr	r0, [pc, #120]	; (8002810 <MX_TIM3_Init+0xfc>)
 8002798:	f003 fad5 	bl	8005d46 <HAL_TIM_PWM_Init>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80027a2:	f7ff fd8d 	bl	80022c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027a6:	2300      	movs	r3, #0
 80027a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027ae:	f107 0320 	add.w	r3, r7, #32
 80027b2:	4619      	mov	r1, r3
 80027b4:	4816      	ldr	r0, [pc, #88]	; (8002810 <MX_TIM3_Init+0xfc>)
 80027b6:	f004 f9cf 	bl	8006b58 <HAL_TIMEx_MasterConfigSynchronization>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80027c0:	f7ff fd7e 	bl	80022c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027c4:	2360      	movs	r3, #96	; 0x60
 80027c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 80027c8:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80027cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027d6:	1d3b      	adds	r3, r7, #4
 80027d8:	2200      	movs	r2, #0
 80027da:	4619      	mov	r1, r3
 80027dc:	480c      	ldr	r0, [pc, #48]	; (8002810 <MX_TIM3_Init+0xfc>)
 80027de:	f003 fbf7 	bl	8005fd0 <HAL_TIM_PWM_ConfigChannel>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80027e8:	f7ff fd6a 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027ec:	1d3b      	adds	r3, r7, #4
 80027ee:	2204      	movs	r2, #4
 80027f0:	4619      	mov	r1, r3
 80027f2:	4807      	ldr	r0, [pc, #28]	; (8002810 <MX_TIM3_Init+0xfc>)
 80027f4:	f003 fbec 	bl	8005fd0 <HAL_TIM_PWM_ConfigChannel>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80027fe:	f7ff fd5f 	bl	80022c0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8002802:	4803      	ldr	r0, [pc, #12]	; (8002810 <MX_TIM3_Init+0xfc>)
 8002804:	f000 f92e 	bl	8002a64 <HAL_TIM_MspPostInit>

}
 8002808:	bf00      	nop
 800280a:	3738      	adds	r7, #56	; 0x38
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20000484 	.word	0x20000484
 8002814:	40000400 	.word	0x40000400

08002818 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b096      	sub	sp, #88	; 0x58
 800281c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800281e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	605a      	str	r2, [r3, #4]
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800282c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	605a      	str	r2, [r3, #4]
 8002840:	609a      	str	r2, [r3, #8]
 8002842:	60da      	str	r2, [r3, #12]
 8002844:	611a      	str	r2, [r3, #16]
 8002846:	615a      	str	r2, [r3, #20]
 8002848:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800284a:	1d3b      	adds	r3, r7, #4
 800284c:	2220      	movs	r2, #32
 800284e:	2100      	movs	r1, #0
 8002850:	4618      	mov	r0, r3
 8002852:	f004 fe5d 	bl	8007510 <memset>

  htim8.Instance = TIM8;
 8002856:	4b3d      	ldr	r3, [pc, #244]	; (800294c <MX_TIM8_Init+0x134>)
 8002858:	4a3d      	ldr	r2, [pc, #244]	; (8002950 <MX_TIM8_Init+0x138>)
 800285a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 800285c:	4b3b      	ldr	r3, [pc, #236]	; (800294c <MX_TIM8_Init+0x134>)
 800285e:	22b3      	movs	r2, #179	; 0xb3
 8002860:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002862:	4b3a      	ldr	r3, [pc, #232]	; (800294c <MX_TIM8_Init+0x134>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8002868:	4b38      	ldr	r3, [pc, #224]	; (800294c <MX_TIM8_Init+0x134>)
 800286a:	2263      	movs	r2, #99	; 0x63
 800286c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800286e:	4b37      	ldr	r3, [pc, #220]	; (800294c <MX_TIM8_Init+0x134>)
 8002870:	2200      	movs	r2, #0
 8002872:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002874:	4b35      	ldr	r3, [pc, #212]	; (800294c <MX_TIM8_Init+0x134>)
 8002876:	2200      	movs	r2, #0
 8002878:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800287a:	4b34      	ldr	r3, [pc, #208]	; (800294c <MX_TIM8_Init+0x134>)
 800287c:	2200      	movs	r2, #0
 800287e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002880:	4832      	ldr	r0, [pc, #200]	; (800294c <MX_TIM8_Init+0x134>)
 8002882:	f003 fa11 	bl	8005ca8 <HAL_TIM_Base_Init>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800288c:	f7ff fd18 	bl	80022c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002894:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002896:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800289a:	4619      	mov	r1, r3
 800289c:	482b      	ldr	r0, [pc, #172]	; (800294c <MX_TIM8_Init+0x134>)
 800289e:	f003 fc5d 	bl	800615c <HAL_TIM_ConfigClockSource>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80028a8:	f7ff fd0a 	bl	80022c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80028ac:	4827      	ldr	r0, [pc, #156]	; (800294c <MX_TIM8_Init+0x134>)
 80028ae:	f003 fa4a 	bl	8005d46 <HAL_TIM_PWM_Init>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80028b8:	f7ff fd02 	bl	80022c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028bc:	2300      	movs	r3, #0
 80028be:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028c0:	2300      	movs	r3, #0
 80028c2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80028c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028c8:	4619      	mov	r1, r3
 80028ca:	4820      	ldr	r0, [pc, #128]	; (800294c <MX_TIM8_Init+0x134>)
 80028cc:	f004 f944 	bl	8006b58 <HAL_TIMEx_MasterConfigSynchronization>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80028d6:	f7ff fcf3 	bl	80022c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028da:	2360      	movs	r3, #96	; 0x60
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028e2:	2300      	movs	r3, #0
 80028e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028ea:	2300      	movs	r3, #0
 80028ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028ee:	2300      	movs	r3, #0
 80028f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f6:	220c      	movs	r2, #12
 80028f8:	4619      	mov	r1, r3
 80028fa:	4814      	ldr	r0, [pc, #80]	; (800294c <MX_TIM8_Init+0x134>)
 80028fc:	f003 fb68 	bl	8005fd0 <HAL_TIM_PWM_ConfigChannel>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 8002906:	f7ff fcdb 	bl	80022c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800290a:	2300      	movs	r3, #0
 800290c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800290e:	2300      	movs	r3, #0
 8002910:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800291a:	2300      	movs	r3, #0
 800291c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800291e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002922:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002924:	2300      	movs	r3, #0
 8002926:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002928:	1d3b      	adds	r3, r7, #4
 800292a:	4619      	mov	r1, r3
 800292c:	4807      	ldr	r0, [pc, #28]	; (800294c <MX_TIM8_Init+0x134>)
 800292e:	f004 f98f 	bl	8006c50 <HAL_TIMEx_ConfigBreakDeadTime>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <MX_TIM8_Init+0x124>
  {
    Error_Handler();
 8002938:	f7ff fcc2 	bl	80022c0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 800293c:	4803      	ldr	r0, [pc, #12]	; (800294c <MX_TIM8_Init+0x134>)
 800293e:	f000 f891 	bl	8002a64 <HAL_TIM_MspPostInit>

}
 8002942:	bf00      	nop
 8002944:	3758      	adds	r7, #88	; 0x58
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000444 	.word	0x20000444
 8002950:	40010400 	.word	0x40010400

08002954 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08c      	sub	sp, #48	; 0x30
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 031c 	add.w	r3, r7, #28
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a37      	ldr	r2, [pc, #220]	; (8002a50 <HAL_TIM_Base_MspInit+0xfc>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d10e      	bne.n	8002994 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	61bb      	str	r3, [r7, #24]
 800297a:	4b36      	ldr	r3, [pc, #216]	; (8002a54 <HAL_TIM_Base_MspInit+0x100>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	4a35      	ldr	r2, [pc, #212]	; (8002a54 <HAL_TIM_Base_MspInit+0x100>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6453      	str	r3, [r2, #68]	; 0x44
 8002986:	4b33      	ldr	r3, [pc, #204]	; (8002a54 <HAL_TIM_Base_MspInit+0x100>)
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	61bb      	str	r3, [r7, #24]
 8002990:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002992:	e059      	b.n	8002a48 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM2)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299c:	d12d      	bne.n	80029fa <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	4b2c      	ldr	r3, [pc, #176]	; (8002a54 <HAL_TIM_Base_MspInit+0x100>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	4a2b      	ldr	r2, [pc, #172]	; (8002a54 <HAL_TIM_Base_MspInit+0x100>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6413      	str	r3, [r2, #64]	; 0x40
 80029ae:	4b29      	ldr	r3, [pc, #164]	; (8002a54 <HAL_TIM_Base_MspInit+0x100>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	4b25      	ldr	r3, [pc, #148]	; (8002a54 <HAL_TIM_Base_MspInit+0x100>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	4a24      	ldr	r2, [pc, #144]	; (8002a54 <HAL_TIM_Base_MspInit+0x100>)
 80029c4:	f043 0302 	orr.w	r3, r3, #2
 80029c8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ca:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <HAL_TIM_Base_MspInit+0x100>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	613b      	str	r3, [r7, #16]
 80029d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin|ClimbSpeed_TIM2_CH4_Pin;
 80029d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029dc:	2302      	movs	r3, #2
 80029de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e4:	2300      	movs	r3, #0
 80029e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029e8:	2301      	movs	r3, #1
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ec:	f107 031c 	add.w	r3, r7, #28
 80029f0:	4619      	mov	r1, r3
 80029f2:	4819      	ldr	r0, [pc, #100]	; (8002a58 <HAL_TIM_Base_MspInit+0x104>)
 80029f4:	f001 fcc8 	bl	8004388 <HAL_GPIO_Init>
}
 80029f8:	e026      	b.n	8002a48 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM3)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a17      	ldr	r2, [pc, #92]	; (8002a5c <HAL_TIM_Base_MspInit+0x108>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d10e      	bne.n	8002a22 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <HAL_TIM_Base_MspInit+0x100>)
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	4a11      	ldr	r2, [pc, #68]	; (8002a54 <HAL_TIM_Base_MspInit+0x100>)
 8002a0e:	f043 0302 	orr.w	r3, r3, #2
 8002a12:	6413      	str	r3, [r2, #64]	; 0x40
 8002a14:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <HAL_TIM_Base_MspInit+0x100>)
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
}
 8002a20:	e012      	b.n	8002a48 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM8)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a0e      	ldr	r2, [pc, #56]	; (8002a60 <HAL_TIM_Base_MspInit+0x10c>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d10d      	bne.n	8002a48 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <HAL_TIM_Base_MspInit+0x100>)
 8002a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a34:	4a07      	ldr	r2, [pc, #28]	; (8002a54 <HAL_TIM_Base_MspInit+0x100>)
 8002a36:	f043 0302 	orr.w	r3, r3, #2
 8002a3a:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <HAL_TIM_Base_MspInit+0x100>)
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	68bb      	ldr	r3, [r7, #8]
}
 8002a48:	bf00      	nop
 8002a4a:	3730      	adds	r7, #48	; 0x30
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40010000 	.word	0x40010000
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40020400 	.word	0x40020400
 8002a5c:	40000400 	.word	0x40000400
 8002a60:	40010400 	.word	0x40010400

08002a64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08a      	sub	sp, #40	; 0x28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a37      	ldr	r2, [pc, #220]	; (8002b60 <HAL_TIM_MspPostInit+0xfc>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d11f      	bne.n	8002ac6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	4b36      	ldr	r3, [pc, #216]	; (8002b64 <HAL_TIM_MspPostInit+0x100>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	4a35      	ldr	r2, [pc, #212]	; (8002b64 <HAL_TIM_MspPostInit+0x100>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6313      	str	r3, [r2, #48]	; 0x30
 8002a96:	4b33      	ldr	r3, [pc, #204]	; (8002b64 <HAL_TIM_MspPostInit+0x100>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 8002aa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	4619      	mov	r1, r3
 8002abe:	482a      	ldr	r0, [pc, #168]	; (8002b68 <HAL_TIM_MspPostInit+0x104>)
 8002ac0:	f001 fc62 	bl	8004388 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002ac4:	e047      	b.n	8002b56 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a28      	ldr	r2, [pc, #160]	; (8002b6c <HAL_TIM_MspPostInit+0x108>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d11e      	bne.n	8002b0e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <HAL_TIM_MspPostInit+0x100>)
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	4a22      	ldr	r2, [pc, #136]	; (8002b64 <HAL_TIM_MspPostInit+0x100>)
 8002ada:	f043 0304 	orr.w	r3, r3, #4
 8002ade:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae0:	4b20      	ldr	r3, [pc, #128]	; (8002b64 <HAL_TIM_MspPostInit+0x100>)
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 8002aec:	23c0      	movs	r3, #192	; 0xc0
 8002aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af0:	2302      	movs	r3, #2
 8002af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af8:	2300      	movs	r3, #0
 8002afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002afc:	2302      	movs	r3, #2
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b00:	f107 0314 	add.w	r3, r7, #20
 8002b04:	4619      	mov	r1, r3
 8002b06:	481a      	ldr	r0, [pc, #104]	; (8002b70 <HAL_TIM_MspPostInit+0x10c>)
 8002b08:	f001 fc3e 	bl	8004388 <HAL_GPIO_Init>
}
 8002b0c:	e023      	b.n	8002b56 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM8)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a18      	ldr	r2, [pc, #96]	; (8002b74 <HAL_TIM_MspPostInit+0x110>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d11e      	bne.n	8002b56 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <HAL_TIM_MspPostInit+0x100>)
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b20:	4a10      	ldr	r2, [pc, #64]	; (8002b64 <HAL_TIM_MspPostInit+0x100>)
 8002b22:	f043 0304 	orr.w	r3, r3, #4
 8002b26:	6313      	str	r3, [r2, #48]	; 0x30
 8002b28:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <HAL_TIM_MspPostInit+0x100>)
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Climb_TIM8_CH4_Pin;
 8002b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b42:	2300      	movs	r3, #0
 8002b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002b46:	2303      	movs	r3, #3
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM8_CH4_GPIO_Port, &GPIO_InitStruct);
 8002b4a:	f107 0314 	add.w	r3, r7, #20
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4807      	ldr	r0, [pc, #28]	; (8002b70 <HAL_TIM_MspPostInit+0x10c>)
 8002b52:	f001 fc19 	bl	8004388 <HAL_GPIO_Init>
}
 8002b56:	bf00      	nop
 8002b58:	3728      	adds	r7, #40	; 0x28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40010000 	.word	0x40010000
 8002b64:	40023800 	.word	0x40023800
 8002b68:	40020000 	.word	0x40020000
 8002b6c:	40000400 	.word	0x40000400
 8002b70:	40020800 	.word	0x40020800
 8002b74:	40010400 	.word	0x40010400

08002b78 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002b7c:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <MX_USART3_UART_Init+0x4c>)
 8002b7e:	4a12      	ldr	r2, [pc, #72]	; (8002bc8 <MX_USART3_UART_Init+0x50>)
 8002b80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <MX_USART3_UART_Init+0x4c>)
 8002b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b8a:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <MX_USART3_UART_Init+0x4c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <MX_USART3_UART_Init+0x4c>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b96:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <MX_USART3_UART_Init+0x4c>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b9c:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <MX_USART3_UART_Init+0x4c>)
 8002b9e:	220c      	movs	r2, #12
 8002ba0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <MX_USART3_UART_Init+0x4c>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <MX_USART3_UART_Init+0x4c>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bae:	4805      	ldr	r0, [pc, #20]	; (8002bc4 <MX_USART3_UART_Init+0x4c>)
 8002bb0:	f004 f8a0 	bl	8006cf4 <HAL_UART_Init>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002bba:	f7ff fb81 	bl	80022c0 <Error_Handler>
  }

}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	200005a4 	.word	0x200005a4
 8002bc8:	40004800 	.word	0x40004800

08002bcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08a      	sub	sp, #40	; 0x28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd4:	f107 0314 	add.w	r3, r7, #20
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]
 8002be2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a30      	ldr	r2, [pc, #192]	; (8002cac <HAL_UART_MspInit+0xe0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d15a      	bne.n	8002ca4 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	4b2f      	ldr	r3, [pc, #188]	; (8002cb0 <HAL_UART_MspInit+0xe4>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	4a2e      	ldr	r2, [pc, #184]	; (8002cb0 <HAL_UART_MspInit+0xe4>)
 8002bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bfe:	4b2c      	ldr	r3, [pc, #176]	; (8002cb0 <HAL_UART_MspInit+0xe4>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	4b28      	ldr	r3, [pc, #160]	; (8002cb0 <HAL_UART_MspInit+0xe4>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	4a27      	ldr	r2, [pc, #156]	; (8002cb0 <HAL_UART_MspInit+0xe4>)
 8002c14:	f043 0308 	orr.w	r3, r3, #8
 8002c18:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1a:	4b25      	ldr	r3, [pc, #148]	; (8002cb0 <HAL_UART_MspInit+0xe4>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 8002c26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c34:	2303      	movs	r3, #3
 8002c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c38:	2307      	movs	r3, #7
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	4619      	mov	r1, r3
 8002c42:	481c      	ldr	r0, [pc, #112]	; (8002cb4 <HAL_UART_MspInit+0xe8>)
 8002c44:	f001 fba0 	bl	8004388 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002c48:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <HAL_UART_MspInit+0xec>)
 8002c4a:	4a1c      	ldr	r2, [pc, #112]	; (8002cbc <HAL_UART_MspInit+0xf0>)
 8002c4c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	; (8002cb8 <HAL_UART_MspInit+0xec>)
 8002c50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c54:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c56:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <HAL_UART_MspInit+0xec>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c5c:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <HAL_UART_MspInit+0xec>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c62:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <HAL_UART_MspInit+0xec>)
 8002c64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c68:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c6a:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <HAL_UART_MspInit+0xec>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c70:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <HAL_UART_MspInit+0xec>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002c76:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <HAL_UART_MspInit+0xec>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <HAL_UART_MspInit+0xec>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <HAL_UART_MspInit+0xec>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002c88:	480b      	ldr	r0, [pc, #44]	; (8002cb8 <HAL_UART_MspInit+0xec>)
 8002c8a:	f001 f893 	bl	8003db4 <HAL_DMA_Init>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002c94:	f7ff fb14 	bl	80022c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a07      	ldr	r2, [pc, #28]	; (8002cb8 <HAL_UART_MspInit+0xec>)
 8002c9c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c9e:	4a06      	ldr	r2, [pc, #24]	; (8002cb8 <HAL_UART_MspInit+0xec>)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	3728      	adds	r7, #40	; 0x28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40004800 	.word	0x40004800
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40020c00 	.word	0x40020c00
 8002cb8:	20000544 	.word	0x20000544
 8002cbc:	40026028 	.word	0x40026028

08002cc0 <wheelSpeedControl_Init>:

  joy_pos_buffer_cnt++;
}

void wheelSpeedControl_Init(WheelSpeed* wheel, float max_lin_speed, float max_ang_speed)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	ed87 0a02 	vstr	s0, [r7, #8]
 8002ccc:	edc7 0a01 	vstr	s1, [r7, #4]
  wheel->stable_cnt = 0;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	611a      	str	r2, [r3, #16]
  wheel->cur_r = 0.0f;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	605a      	str	r2, [r3, #4]
  wheel->cur_l = 0.0f;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
  wheel->pre_l= 0.0f;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
  wheel->pre_r = 0.0f;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	60da      	str	r2, [r3, #12]
  wheel->max_angular_speed = max_ang_speed;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	619a      	str	r2, [r3, #24]
  wheel->max_linear_speed = max_lin_speed;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	615a      	str	r2, [r3, #20]
  wheel->start_from_stationary = false;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	771a      	strb	r2, [r3, #28]
}
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002d14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d4c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002d18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002d1a:	e003      	b.n	8002d24 <LoopCopyDataInit>

08002d1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002d1c:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002d1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d22:	3104      	adds	r1, #4

08002d24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d24:	480b      	ldr	r0, [pc, #44]	; (8002d54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d26:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002d28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d2c:	d3f6      	bcc.n	8002d1c <CopyDataInit>
  ldr  r2, =_sbss
 8002d2e:	4a0b      	ldr	r2, [pc, #44]	; (8002d5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002d30:	e002      	b.n	8002d38 <LoopFillZerobss>

08002d32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d34:	f842 3b04 	str.w	r3, [r2], #4

08002d38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002d38:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002d3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d3c:	d3f9      	bcc.n	8002d32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d3e:	f7ff fbb9 	bl	80024b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d42:	f004 fbc1 	bl	80074c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d46:	f7fe fff9 	bl	8001d3c <main>
  bx  lr    
 8002d4a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002d4c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002d50:	08007580 	.word	0x08007580
  ldr  r0, =_sdata
 8002d54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d58:	20000134 	.word	0x20000134
  ldr  r2, =_sbss
 8002d5c:	20000138 	.word	0x20000138
  ldr  r3, = _ebss
 8002d60:	200005e8 	.word	0x200005e8

08002d64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d64:	e7fe      	b.n	8002d64 <ADC_IRQHandler>
	...

08002d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d6c:	4b0e      	ldr	r3, [pc, #56]	; (8002da8 <HAL_Init+0x40>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a0d      	ldr	r2, [pc, #52]	; (8002da8 <HAL_Init+0x40>)
 8002d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <HAL_Init+0x40>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a0a      	ldr	r2, [pc, #40]	; (8002da8 <HAL_Init+0x40>)
 8002d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <HAL_Init+0x40>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a07      	ldr	r2, [pc, #28]	; (8002da8 <HAL_Init+0x40>)
 8002d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d90:	2003      	movs	r0, #3
 8002d92:	f000 ffb1 	bl	8003cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d96:	2000      	movs	r0, #0
 8002d98:	f000 f808 	bl	8002dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d9c:	f7ff fb18 	bl	80023d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40023c00 	.word	0x40023c00

08002dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002db4:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <HAL_InitTick+0x54>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <HAL_InitTick+0x58>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 ffc9 	bl	8003d62 <HAL_SYSTICK_Config>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e00e      	b.n	8002df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b0f      	cmp	r3, #15
 8002dde:	d80a      	bhi.n	8002df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002de0:	2200      	movs	r2, #0
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002de8:	f000 ff91 	bl	8003d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dec:	4a06      	ldr	r2, [pc, #24]	; (8002e08 <HAL_InitTick+0x5c>)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	e000      	b.n	8002df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	20000128 	.word	0x20000128
 8002e04:	20000130 	.word	0x20000130
 8002e08:	2000012c 	.word	0x2000012c

08002e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_IncTick+0x20>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <HAL_IncTick+0x24>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	4a04      	ldr	r2, [pc, #16]	; (8002e30 <HAL_IncTick+0x24>)
 8002e1e:	6013      	str	r3, [r2, #0]
}
 8002e20:	bf00      	nop
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	20000130 	.word	0x20000130
 8002e30:	200005e4 	.word	0x200005e4

08002e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return uwTick;
 8002e38:	4b03      	ldr	r3, [pc, #12]	; (8002e48 <HAL_GetTick+0x14>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	200005e4 	.word	0x200005e4

08002e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e54:	f7ff ffee 	bl	8002e34 <HAL_GetTick>
 8002e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e64:	d005      	beq.n	8002e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e66:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <HAL_Delay+0x44>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4413      	add	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e72:	bf00      	nop
 8002e74:	f7ff ffde 	bl	8002e34 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d8f7      	bhi.n	8002e74 <HAL_Delay+0x28>
  {
  }
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20000130 	.word	0x20000130

08002e94 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e0ed      	b.n	8003082 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d102      	bne.n	8002eb8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fe fc54 	bl	8001760 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0202 	bic.w	r2, r2, #2
 8002ec6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ec8:	f7ff ffb4 	bl	8002e34 <HAL_GetTick>
 8002ecc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ece:	e012      	b.n	8002ef6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ed0:	f7ff ffb0 	bl	8002e34 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b0a      	cmp	r3, #10
 8002edc:	d90b      	bls.n	8002ef6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2205      	movs	r2, #5
 8002eee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e0c5      	b.n	8003082 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1e5      	bne.n	8002ed0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f14:	f7ff ff8e 	bl	8002e34 <HAL_GetTick>
 8002f18:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f1a:	e012      	b.n	8002f42 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f1c:	f7ff ff8a 	bl	8002e34 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b0a      	cmp	r3, #10
 8002f28:	d90b      	bls.n	8002f42 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2205      	movs	r2, #5
 8002f3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e09f      	b.n	8003082 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0e5      	beq.n	8002f1c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	7e1b      	ldrb	r3, [r3, #24]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d108      	bne.n	8002f6a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	e007      	b.n	8002f7a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	7e5b      	ldrb	r3, [r3, #25]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d108      	bne.n	8002f94 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	e007      	b.n	8002fa4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fa2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	7e9b      	ldrb	r3, [r3, #26]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d108      	bne.n	8002fbe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0220 	orr.w	r2, r2, #32
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	e007      	b.n	8002fce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0220 	bic.w	r2, r2, #32
 8002fcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	7edb      	ldrb	r3, [r3, #27]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d108      	bne.n	8002fe8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0210 	bic.w	r2, r2, #16
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	e007      	b.n	8002ff8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0210 	orr.w	r2, r2, #16
 8002ff6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	7f1b      	ldrb	r3, [r3, #28]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d108      	bne.n	8003012 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f042 0208 	orr.w	r2, r2, #8
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	e007      	b.n	8003022 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0208 	bic.w	r2, r2, #8
 8003020:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	7f5b      	ldrb	r3, [r3, #29]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d108      	bne.n	800303c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0204 	orr.w	r2, r2, #4
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	e007      	b.n	800304c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0204 	bic.w	r2, r2, #4
 800304a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	ea42 0103 	orr.w	r1, r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	1e5a      	subs	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800308c:	b480      	push	{r7}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030a2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80030a4:	7cfb      	ldrb	r3, [r7, #19]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d003      	beq.n	80030b2 <HAL_CAN_ConfigFilter+0x26>
 80030aa:	7cfb      	ldrb	r3, [r7, #19]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	f040 80be 	bne.w	800322e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80030b2:	4b65      	ldr	r3, [pc, #404]	; (8003248 <HAL_CAN_ConfigFilter+0x1bc>)
 80030b4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80030bc:	f043 0201 	orr.w	r2, r3, #1
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80030cc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	431a      	orrs	r2, r3
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f003 031f 	and.w	r3, r3, #31
 80030f2:	2201      	movs	r2, #1
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	43db      	mvns	r3, r3
 8003104:	401a      	ands	r2, r3
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d123      	bne.n	800315c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	43db      	mvns	r3, r3
 800311e:	401a      	ands	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003136:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	3248      	adds	r2, #72	; 0x48
 800313c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003150:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003152:	6979      	ldr	r1, [r7, #20]
 8003154:	3348      	adds	r3, #72	; 0x48
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	440b      	add	r3, r1
 800315a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d122      	bne.n	80031aa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	431a      	orrs	r2, r3
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003184:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	3248      	adds	r2, #72	; 0x48
 800318a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800319e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031a0:	6979      	ldr	r1, [r7, #20]
 80031a2:	3348      	adds	r3, #72	; 0x48
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	440b      	add	r3, r1
 80031a8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d109      	bne.n	80031c6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	43db      	mvns	r3, r3
 80031bc:	401a      	ands	r2, r3
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80031c4:	e007      	b.n	80031d6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	43db      	mvns	r3, r3
 80031e8:	401a      	ands	r2, r3
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80031f0:	e007      	b.n	8003202 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d107      	bne.n	800321a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	431a      	orrs	r2, r3
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003220:	f023 0201 	bic.w	r2, r3, #1
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	e006      	b.n	800323c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
  }
}
 800323c:	4618      	mov	r0, r3
 800323e:	371c      	adds	r7, #28
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	40006400 	.word	0x40006400

0800324c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3020 	ldrb.w	r3, [r3, #32]
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	d12e      	bne.n	80032be <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0201 	bic.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003278:	f7ff fddc 	bl	8002e34 <HAL_GetTick>
 800327c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800327e:	e012      	b.n	80032a6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003280:	f7ff fdd8 	bl	8002e34 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b0a      	cmp	r3, #10
 800328c:	d90b      	bls.n	80032a6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2205      	movs	r2, #5
 800329e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e012      	b.n	80032cc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1e5      	bne.n	8003280 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e006      	b.n	80032cc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
  }
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b089      	sub	sp, #36	; 0x24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
 80032e0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032e8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80032f2:	7ffb      	ldrb	r3, [r7, #31]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d003      	beq.n	8003300 <HAL_CAN_AddTxMessage+0x2c>
 80032f8:	7ffb      	ldrb	r3, [r7, #31]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	f040 80b8 	bne.w	8003470 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10a      	bne.n	8003320 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003310:	2b00      	cmp	r3, #0
 8003312:	d105      	bne.n	8003320 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 80a0 	beq.w	8003460 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	0e1b      	lsrs	r3, r3, #24
 8003324:	f003 0303 	and.w	r3, r3, #3
 8003328:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b02      	cmp	r3, #2
 800332e:	d907      	bls.n	8003340 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e09e      	b.n	800347e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003340:	2201      	movs	r2, #1
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	409a      	lsls	r2, r3
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10d      	bne.n	800336e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800335c:	68f9      	ldr	r1, [r7, #12]
 800335e:	6809      	ldr	r1, [r1, #0]
 8003360:	431a      	orrs	r2, r3
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	3318      	adds	r3, #24
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	440b      	add	r3, r1
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	e00f      	b.n	800338e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003378:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800337e:	68f9      	ldr	r1, [r7, #12]
 8003380:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003382:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	3318      	adds	r3, #24
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	440b      	add	r3, r1
 800338c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6819      	ldr	r1, [r3, #0]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	3318      	adds	r3, #24
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	440b      	add	r3, r1
 800339e:	3304      	adds	r3, #4
 80033a0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	7d1b      	ldrb	r3, [r3, #20]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d111      	bne.n	80033ce <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	3318      	adds	r3, #24
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	4413      	add	r3, r2
 80033b6:	3304      	adds	r3, #4
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	6811      	ldr	r1, [r2, #0]
 80033be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	3318      	adds	r3, #24
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	440b      	add	r3, r1
 80033ca:	3304      	adds	r3, #4
 80033cc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3307      	adds	r3, #7
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	061a      	lsls	r2, r3, #24
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3306      	adds	r3, #6
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	041b      	lsls	r3, r3, #16
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3305      	adds	r3, #5
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	021b      	lsls	r3, r3, #8
 80033e8:	4313      	orrs	r3, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	3204      	adds	r2, #4
 80033ee:	7812      	ldrb	r2, [r2, #0]
 80033f0:	4610      	mov	r0, r2
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	6811      	ldr	r1, [r2, #0]
 80033f6:	ea43 0200 	orr.w	r2, r3, r0
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	440b      	add	r3, r1
 8003400:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003404:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3303      	adds	r3, #3
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	061a      	lsls	r2, r3, #24
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3302      	adds	r3, #2
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	041b      	lsls	r3, r3, #16
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3301      	adds	r3, #1
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	021b      	lsls	r3, r3, #8
 8003420:	4313      	orrs	r3, r2
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	7812      	ldrb	r2, [r2, #0]
 8003426:	4610      	mov	r0, r2
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	6811      	ldr	r1, [r2, #0]
 800342c:	ea43 0200 	orr.w	r2, r3, r0
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	440b      	add	r3, r1
 8003436:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800343a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	3318      	adds	r3, #24
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	4413      	add	r3, r2
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	6811      	ldr	r1, [r2, #0]
 800344e:	f043 0201 	orr.w	r2, r3, #1
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	3318      	adds	r3, #24
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	440b      	add	r3, r1
 800345a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	e00e      	b.n	800347e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e006      	b.n	800347e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
  }
}
 800347e:	4618      	mov	r0, r3
 8003480:	3724      	adds	r7, #36	; 0x24
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800348a:	b480      	push	{r7}
 800348c:	b087      	sub	sp, #28
 800348e:	af00      	add	r7, sp, #0
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	607a      	str	r2, [r7, #4]
 8003496:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800349e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80034a0:	7dfb      	ldrb	r3, [r7, #23]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d003      	beq.n	80034ae <HAL_CAN_GetRxMessage+0x24>
 80034a6:	7dfb      	ldrb	r3, [r7, #23]
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	f040 80f3 	bne.w	8003694 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10e      	bne.n	80034d2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d116      	bne.n	80034f0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e0e7      	b.n	80036a2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d107      	bne.n	80034f0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0d8      	b.n	80036a2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	331b      	adds	r3, #27
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	4413      	add	r3, r2
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0204 	and.w	r2, r3, #4
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10c      	bne.n	8003528 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	331b      	adds	r3, #27
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	4413      	add	r3, r2
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	0d5b      	lsrs	r3, r3, #21
 800351e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	e00b      	b.n	8003540 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	331b      	adds	r3, #27
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	4413      	add	r3, r2
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	08db      	lsrs	r3, r3, #3
 8003538:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	331b      	adds	r3, #27
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	4413      	add	r3, r2
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0202 	and.w	r2, r3, #2
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	331b      	adds	r3, #27
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	4413      	add	r3, r2
 8003562:	3304      	adds	r3, #4
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 020f 	and.w	r2, r3, #15
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	331b      	adds	r3, #27
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	4413      	add	r3, r2
 800357a:	3304      	adds	r3, #4
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	0a1b      	lsrs	r3, r3, #8
 8003580:	b2da      	uxtb	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	331b      	adds	r3, #27
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	4413      	add	r3, r2
 8003592:	3304      	adds	r3, #4
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	0c1b      	lsrs	r3, r3, #16
 8003598:	b29a      	uxth	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	4413      	add	r3, r2
 80035be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	0a1a      	lsrs	r2, r3, #8
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	3301      	adds	r3, #1
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	0c1a      	lsrs	r2, r3, #16
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	3302      	adds	r3, #2
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	0e1a      	lsrs	r2, r3, #24
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	3303      	adds	r3, #3
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	4413      	add	r3, r2
 800360c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	3304      	adds	r3, #4
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	4413      	add	r3, r2
 8003624:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	0a1a      	lsrs	r2, r3, #8
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	3305      	adds	r3, #5
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	4413      	add	r3, r2
 800363e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	0c1a      	lsrs	r2, r3, #16
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	3306      	adds	r3, #6
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	4413      	add	r3, r2
 8003658:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	0e1a      	lsrs	r2, r3, #24
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	3307      	adds	r3, #7
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d108      	bne.n	8003680 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f042 0220 	orr.w	r2, r2, #32
 800367c:	60da      	str	r2, [r3, #12]
 800367e:	e007      	b.n	8003690 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0220 	orr.w	r2, r2, #32
 800368e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	e006      	b.n	80036a2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003698:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
  }
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	371c      	adds	r7, #28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b085      	sub	sp, #20
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036be:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d002      	beq.n	80036cc <HAL_CAN_ActivateNotification+0x1e>
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d109      	bne.n	80036e0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6959      	ldr	r1, [r3, #20]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	e006      	b.n	80036ee <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
  }
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b08a      	sub	sp, #40	; 0x28
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003702:	2300      	movs	r3, #0
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d07c      	beq.n	800383a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d023      	beq.n	8003792 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2201      	movs	r2, #1
 8003750:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f983 	bl	8003a68 <HAL_CAN_TxMailbox0CompleteCallback>
 8003762:	e016      	b.n	8003792 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b00      	cmp	r3, #0
 800376c:	d004      	beq.n	8003778 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
 8003776:	e00c      	b.n	8003792 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d004      	beq.n	800378c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
 800378a:	e002      	b.n	8003792 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f989 	bl	8003aa4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003798:	2b00      	cmp	r3, #0
 800379a:	d024      	beq.n	80037e6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f963 	bl	8003a7c <HAL_CAN_TxMailbox1CompleteCallback>
 80037b6:	e016      	b.n	80037e6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d004      	beq.n	80037cc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ca:	e00c      	b.n	80037e6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d004      	beq.n	80037e0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
 80037de:	e002      	b.n	80037e6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f969 	bl	8003ab8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d024      	beq.n	800383a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d003      	beq.n	800380c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f943 	bl	8003a90 <HAL_CAN_TxMailbox2CompleteCallback>
 800380a:	e016      	b.n	800383a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d004      	beq.n	8003820 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
 800381e:	e00c      	b.n	800383a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d004      	beq.n	8003834 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003830:	627b      	str	r3, [r7, #36]	; 0x24
 8003832:	e002      	b.n	800383a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f949 	bl	8003acc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00c      	beq.n	800385e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f003 0310 	and.w	r3, r3, #16
 800384a:	2b00      	cmp	r3, #0
 800384c:	d007      	beq.n	800385e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003854:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2210      	movs	r2, #16
 800385c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00b      	beq.n	8003880 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d006      	beq.n	8003880 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2208      	movs	r2, #8
 8003878:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f930 	bl	8003ae0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f003 0303 	and.w	r3, r3, #3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d002      	beq.n	800389e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7fe fce3 	bl	8002264 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00c      	beq.n	80038c2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d007      	beq.n	80038c2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2210      	movs	r2, #16
 80038c0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00b      	beq.n	80038e4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d006      	beq.n	80038e4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2208      	movs	r2, #8
 80038dc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f912 	bl	8003b08 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d009      	beq.n	8003902 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f8f9 	bl	8003af4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00b      	beq.n	8003924 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	2b00      	cmp	r3, #0
 8003914:	d006      	beq.n	8003924 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2210      	movs	r2, #16
 800391c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 f8fc 	bl	8003b1c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d006      	beq.n	8003946 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2208      	movs	r2, #8
 800393e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f8f5 	bl	8003b30 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d07b      	beq.n	8003a48 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b00      	cmp	r3, #0
 8003958:	d072      	beq.n	8003a40 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	f043 0302 	orr.w	r3, r3, #2
 8003990:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	f043 0304 	orr.w	r3, r3, #4
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d043      	beq.n	8003a40 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d03e      	beq.n	8003a40 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039c8:	2b60      	cmp	r3, #96	; 0x60
 80039ca:	d02b      	beq.n	8003a24 <HAL_CAN_IRQHandler+0x32a>
 80039cc:	2b60      	cmp	r3, #96	; 0x60
 80039ce:	d82e      	bhi.n	8003a2e <HAL_CAN_IRQHandler+0x334>
 80039d0:	2b50      	cmp	r3, #80	; 0x50
 80039d2:	d022      	beq.n	8003a1a <HAL_CAN_IRQHandler+0x320>
 80039d4:	2b50      	cmp	r3, #80	; 0x50
 80039d6:	d82a      	bhi.n	8003a2e <HAL_CAN_IRQHandler+0x334>
 80039d8:	2b40      	cmp	r3, #64	; 0x40
 80039da:	d019      	beq.n	8003a10 <HAL_CAN_IRQHandler+0x316>
 80039dc:	2b40      	cmp	r3, #64	; 0x40
 80039de:	d826      	bhi.n	8003a2e <HAL_CAN_IRQHandler+0x334>
 80039e0:	2b30      	cmp	r3, #48	; 0x30
 80039e2:	d010      	beq.n	8003a06 <HAL_CAN_IRQHandler+0x30c>
 80039e4:	2b30      	cmp	r3, #48	; 0x30
 80039e6:	d822      	bhi.n	8003a2e <HAL_CAN_IRQHandler+0x334>
 80039e8:	2b10      	cmp	r3, #16
 80039ea:	d002      	beq.n	80039f2 <HAL_CAN_IRQHandler+0x2f8>
 80039ec:	2b20      	cmp	r3, #32
 80039ee:	d005      	beq.n	80039fc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80039f0:	e01d      	b.n	8003a2e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	f043 0308 	orr.w	r3, r3, #8
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039fa:	e019      	b.n	8003a30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	f043 0310 	orr.w	r3, r3, #16
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a04:	e014      	b.n	8003a30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	f043 0320 	orr.w	r3, r3, #32
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a0e:	e00f      	b.n	8003a30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a18:	e00a      	b.n	8003a30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a22:	e005      	b.n	8003a30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003a2c:	e000      	b.n	8003a30 <HAL_CAN_IRQHandler+0x336>
            break;
 8003a2e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699a      	ldr	r2, [r3, #24]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003a3e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2204      	movs	r2, #4
 8003a46:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d008      	beq.n	8003a60 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f872 	bl	8003b44 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003a60:	bf00      	nop
 8003a62:	3728      	adds	r7, #40	; 0x28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b68:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <__NVIC_SetPriorityGrouping+0x44>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b74:	4013      	ands	r3, r2
 8003b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b8a:	4a04      	ldr	r2, [pc, #16]	; (8003b9c <__NVIC_SetPriorityGrouping+0x44>)
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	60d3      	str	r3, [r2, #12]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	e000ed00 	.word	0xe000ed00

08003ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ba4:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	0a1b      	lsrs	r3, r3, #8
 8003baa:	f003 0307 	and.w	r3, r3, #7
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	e000ed00 	.word	0xe000ed00

08003bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	db0b      	blt.n	8003be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	f003 021f 	and.w	r2, r3, #31
 8003bd4:	4907      	ldr	r1, [pc, #28]	; (8003bf4 <__NVIC_EnableIRQ+0x38>)
 8003bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	2001      	movs	r0, #1
 8003bde:	fa00 f202 	lsl.w	r2, r0, r2
 8003be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	e000e100 	.word	0xe000e100

08003bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	6039      	str	r1, [r7, #0]
 8003c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	db0a      	blt.n	8003c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	490c      	ldr	r1, [pc, #48]	; (8003c44 <__NVIC_SetPriority+0x4c>)
 8003c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c16:	0112      	lsls	r2, r2, #4
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c20:	e00a      	b.n	8003c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	4908      	ldr	r1, [pc, #32]	; (8003c48 <__NVIC_SetPriority+0x50>)
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	3b04      	subs	r3, #4
 8003c30:	0112      	lsls	r2, r2, #4
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	440b      	add	r3, r1
 8003c36:	761a      	strb	r2, [r3, #24]
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	e000e100 	.word	0xe000e100
 8003c48:	e000ed00 	.word	0xe000ed00

08003c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b089      	sub	sp, #36	; 0x24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f1c3 0307 	rsb	r3, r3, #7
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	bf28      	it	cs
 8003c6a:	2304      	movcs	r3, #4
 8003c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	3304      	adds	r3, #4
 8003c72:	2b06      	cmp	r3, #6
 8003c74:	d902      	bls.n	8003c7c <NVIC_EncodePriority+0x30>
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	3b03      	subs	r3, #3
 8003c7a:	e000      	b.n	8003c7e <NVIC_EncodePriority+0x32>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43da      	mvns	r2, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	401a      	ands	r2, r3
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9e:	43d9      	mvns	r1, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca4:	4313      	orrs	r3, r2
         );
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3724      	adds	r7, #36	; 0x24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
	...

08003cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cc4:	d301      	bcc.n	8003cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e00f      	b.n	8003cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cca:	4a0a      	ldr	r2, [pc, #40]	; (8003cf4 <SysTick_Config+0x40>)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cd2:	210f      	movs	r1, #15
 8003cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cd8:	f7ff ff8e 	bl	8003bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cdc:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <SysTick_Config+0x40>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ce2:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <SysTick_Config+0x40>)
 8003ce4:	2207      	movs	r2, #7
 8003ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	e000e010 	.word	0xe000e010

08003cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff ff29 	bl	8003b58 <__NVIC_SetPriorityGrouping>
}
 8003d06:	bf00      	nop
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b086      	sub	sp, #24
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	4603      	mov	r3, r0
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
 8003d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d20:	f7ff ff3e 	bl	8003ba0 <__NVIC_GetPriorityGrouping>
 8003d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	6978      	ldr	r0, [r7, #20]
 8003d2c:	f7ff ff8e 	bl	8003c4c <NVIC_EncodePriority>
 8003d30:	4602      	mov	r2, r0
 8003d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d36:	4611      	mov	r1, r2
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff ff5d 	bl	8003bf8 <__NVIC_SetPriority>
}
 8003d3e:	bf00      	nop
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff ff31 	bl	8003bbc <__NVIC_EnableIRQ>
}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff ffa2 	bl	8003cb4 <SysTick_Config>
 8003d70:	4603      	mov	r3, r0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
	...

08003d7c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d106      	bne.n	8003d98 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003d8a:	4b09      	ldr	r3, [pc, #36]	; (8003db0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a08      	ldr	r2, [pc, #32]	; (8003db0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003d90:	f043 0304 	orr.w	r3, r3, #4
 8003d94:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8003d96:	e005      	b.n	8003da4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a04      	ldr	r2, [pc, #16]	; (8003db0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003d9e:	f023 0304 	bic.w	r3, r3, #4
 8003da2:	6013      	str	r3, [r2, #0]
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	e000e010 	.word	0xe000e010

08003db4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003dc0:	f7ff f838 	bl	8002e34 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e099      	b.n	8003f04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0201 	bic.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003df0:	e00f      	b.n	8003e12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003df2:	f7ff f81f 	bl	8002e34 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b05      	cmp	r3, #5
 8003dfe:	d908      	bls.n	8003e12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2220      	movs	r2, #32
 8003e04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2203      	movs	r2, #3
 8003e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e078      	b.n	8003f04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e8      	bne.n	8003df2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	4b38      	ldr	r3, [pc, #224]	; (8003f0c <HAL_DMA_Init+0x158>)
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d107      	bne.n	8003e7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	4313      	orrs	r3, r2
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f023 0307 	bic.w	r3, r3, #7
 8003e92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d117      	bne.n	8003ed6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00e      	beq.n	8003ed6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f9e9 	bl	8004290 <DMA_CheckFifoParam>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d008      	beq.n	8003ed6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2240      	movs	r2, #64	; 0x40
 8003ec8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e016      	b.n	8003f04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f9a0 	bl	8004224 <DMA_CalcBaseAndBitshift>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	223f      	movs	r2, #63	; 0x3f
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	f010803f 	.word	0xf010803f

08003f10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f1c:	4b92      	ldr	r3, [pc, #584]	; (8004168 <HAL_DMA_IRQHandler+0x258>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a92      	ldr	r2, [pc, #584]	; (800416c <HAL_DMA_IRQHandler+0x25c>)
 8003f22:	fba2 2303 	umull	r2, r3, r2, r3
 8003f26:	0a9b      	lsrs	r3, r3, #10
 8003f28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3a:	2208      	movs	r2, #8
 8003f3c:	409a      	lsls	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4013      	ands	r3, r2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d01a      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d013      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 0204 	bic.w	r2, r2, #4
 8003f62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f68:	2208      	movs	r2, #8
 8003f6a:	409a      	lsls	r2, r3
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f74:	f043 0201 	orr.w	r2, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f80:	2201      	movs	r2, #1
 8003f82:	409a      	lsls	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4013      	ands	r3, r2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d012      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00b      	beq.n	8003fb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	409a      	lsls	r2, r3
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003faa:	f043 0202 	orr.w	r2, r3, #2
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb6:	2204      	movs	r2, #4
 8003fb8:	409a      	lsls	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d012      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00b      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd4:	2204      	movs	r2, #4
 8003fd6:	409a      	lsls	r2, r3
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe0:	f043 0204 	orr.w	r2, r3, #4
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fec:	2210      	movs	r2, #16
 8003fee:	409a      	lsls	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d043      	beq.n	8004080 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d03c      	beq.n	8004080 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400a:	2210      	movs	r2, #16
 800400c:	409a      	lsls	r2, r3
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d018      	beq.n	8004052 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d108      	bne.n	8004040 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	d024      	beq.n	8004080 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	4798      	blx	r3
 800403e:	e01f      	b.n	8004080 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004044:	2b00      	cmp	r3, #0
 8004046:	d01b      	beq.n	8004080 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	4798      	blx	r3
 8004050:	e016      	b.n	8004080 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d107      	bne.n	8004070 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0208 	bic.w	r2, r2, #8
 800406e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004084:	2220      	movs	r2, #32
 8004086:	409a      	lsls	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4013      	ands	r3, r2
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 808e 	beq.w	80041ae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0310 	and.w	r3, r3, #16
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 8086 	beq.w	80041ae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a6:	2220      	movs	r2, #32
 80040a8:	409a      	lsls	r2, r3
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b05      	cmp	r3, #5
 80040b8:	d136      	bne.n	8004128 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0216 	bic.w	r2, r2, #22
 80040c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695a      	ldr	r2, [r3, #20]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d103      	bne.n	80040ea <HAL_DMA_IRQHandler+0x1da>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d007      	beq.n	80040fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0208 	bic.w	r2, r2, #8
 80040f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fe:	223f      	movs	r2, #63	; 0x3f
 8004100:	409a      	lsls	r2, r3
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800411a:	2b00      	cmp	r3, #0
 800411c:	d07d      	beq.n	800421a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	4798      	blx	r3
        }
        return;
 8004126:	e078      	b.n	800421a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01c      	beq.n	8004170 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d108      	bne.n	8004156 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004148:	2b00      	cmp	r3, #0
 800414a:	d030      	beq.n	80041ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	4798      	blx	r3
 8004154:	e02b      	b.n	80041ae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415a:	2b00      	cmp	r3, #0
 800415c:	d027      	beq.n	80041ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	4798      	blx	r3
 8004166:	e022      	b.n	80041ae <HAL_DMA_IRQHandler+0x29e>
 8004168:	20000128 	.word	0x20000128
 800416c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10f      	bne.n	800419e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0210 	bic.w	r2, r2, #16
 800418c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d032      	beq.n	800421c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d022      	beq.n	8004208 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2205      	movs	r2, #5
 80041c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	3301      	adds	r3, #1
 80041de:	60bb      	str	r3, [r7, #8]
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d307      	bcc.n	80041f6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f2      	bne.n	80041da <HAL_DMA_IRQHandler+0x2ca>
 80041f4:	e000      	b.n	80041f8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80041f6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	4798      	blx	r3
 8004218:	e000      	b.n	800421c <HAL_DMA_IRQHandler+0x30c>
        return;
 800421a:	bf00      	nop
    }
  }
}
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop

08004224 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	3b10      	subs	r3, #16
 8004234:	4a14      	ldr	r2, [pc, #80]	; (8004288 <DMA_CalcBaseAndBitshift+0x64>)
 8004236:	fba2 2303 	umull	r2, r3, r2, r3
 800423a:	091b      	lsrs	r3, r3, #4
 800423c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800423e:	4a13      	ldr	r2, [pc, #76]	; (800428c <DMA_CalcBaseAndBitshift+0x68>)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4413      	add	r3, r2
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	461a      	mov	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b03      	cmp	r3, #3
 8004250:	d909      	bls.n	8004266 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800425a:	f023 0303 	bic.w	r3, r3, #3
 800425e:	1d1a      	adds	r2, r3, #4
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	659a      	str	r2, [r3, #88]	; 0x58
 8004264:	e007      	b.n	8004276 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800426e:	f023 0303 	bic.w	r3, r3, #3
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	aaaaaaab 	.word	0xaaaaaaab
 800428c:	08007568 	.word	0x08007568

08004290 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004298:	2300      	movs	r3, #0
 800429a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d11f      	bne.n	80042ea <DMA_CheckFifoParam+0x5a>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d856      	bhi.n	800435e <DMA_CheckFifoParam+0xce>
 80042b0:	a201      	add	r2, pc, #4	; (adr r2, 80042b8 <DMA_CheckFifoParam+0x28>)
 80042b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b6:	bf00      	nop
 80042b8:	080042c9 	.word	0x080042c9
 80042bc:	080042db 	.word	0x080042db
 80042c0:	080042c9 	.word	0x080042c9
 80042c4:	0800435f 	.word	0x0800435f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d046      	beq.n	8004362 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042d8:	e043      	b.n	8004362 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042e2:	d140      	bne.n	8004366 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042e8:	e03d      	b.n	8004366 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f2:	d121      	bne.n	8004338 <DMA_CheckFifoParam+0xa8>
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	2b03      	cmp	r3, #3
 80042f8:	d837      	bhi.n	800436a <DMA_CheckFifoParam+0xda>
 80042fa:	a201      	add	r2, pc, #4	; (adr r2, 8004300 <DMA_CheckFifoParam+0x70>)
 80042fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004300:	08004311 	.word	0x08004311
 8004304:	08004317 	.word	0x08004317
 8004308:	08004311 	.word	0x08004311
 800430c:	08004329 	.word	0x08004329
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	73fb      	strb	r3, [r7, #15]
      break;
 8004314:	e030      	b.n	8004378 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d025      	beq.n	800436e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004326:	e022      	b.n	800436e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004330:	d11f      	bne.n	8004372 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004336:	e01c      	b.n	8004372 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b02      	cmp	r3, #2
 800433c:	d903      	bls.n	8004346 <DMA_CheckFifoParam+0xb6>
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b03      	cmp	r3, #3
 8004342:	d003      	beq.n	800434c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004344:	e018      	b.n	8004378 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	73fb      	strb	r3, [r7, #15]
      break;
 800434a:	e015      	b.n	8004378 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00e      	beq.n	8004376 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	73fb      	strb	r3, [r7, #15]
      break;
 800435c:	e00b      	b.n	8004376 <DMA_CheckFifoParam+0xe6>
      break;
 800435e:	bf00      	nop
 8004360:	e00a      	b.n	8004378 <DMA_CheckFifoParam+0xe8>
      break;
 8004362:	bf00      	nop
 8004364:	e008      	b.n	8004378 <DMA_CheckFifoParam+0xe8>
      break;
 8004366:	bf00      	nop
 8004368:	e006      	b.n	8004378 <DMA_CheckFifoParam+0xe8>
      break;
 800436a:	bf00      	nop
 800436c:	e004      	b.n	8004378 <DMA_CheckFifoParam+0xe8>
      break;
 800436e:	bf00      	nop
 8004370:	e002      	b.n	8004378 <DMA_CheckFifoParam+0xe8>
      break;   
 8004372:	bf00      	nop
 8004374:	e000      	b.n	8004378 <DMA_CheckFifoParam+0xe8>
      break;
 8004376:	bf00      	nop
    }
  } 
  
  return status; 
 8004378:	7bfb      	ldrb	r3, [r7, #15]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop

08004388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004388:	b480      	push	{r7}
 800438a:	b089      	sub	sp, #36	; 0x24
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004396:	2300      	movs	r3, #0
 8004398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800439a:	2300      	movs	r3, #0
 800439c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800439e:	2300      	movs	r3, #0
 80043a0:	61fb      	str	r3, [r7, #28]
 80043a2:	e177      	b.n	8004694 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043a4:	2201      	movs	r2, #1
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	4013      	ands	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	429a      	cmp	r2, r3
 80043be:	f040 8166 	bne.w	800468e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d00b      	beq.n	80043e2 <HAL_GPIO_Init+0x5a>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d007      	beq.n	80043e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043d6:	2b11      	cmp	r3, #17
 80043d8:	d003      	beq.n	80043e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b12      	cmp	r3, #18
 80043e0:	d130      	bne.n	8004444 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	2203      	movs	r2, #3
 80043ee:	fa02 f303 	lsl.w	r3, r2, r3
 80043f2:	43db      	mvns	r3, r3
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	4013      	ands	r3, r2
 80043f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	4313      	orrs	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004418:	2201      	movs	r2, #1
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	43db      	mvns	r3, r3
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4013      	ands	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	091b      	lsrs	r3, r3, #4
 800442e:	f003 0201 	and.w	r2, r3, #1
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	4313      	orrs	r3, r2
 800443c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	2203      	movs	r2, #3
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	43db      	mvns	r3, r3
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	4013      	ands	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4313      	orrs	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b02      	cmp	r3, #2
 800447a:	d003      	beq.n	8004484 <HAL_GPIO_Init+0xfc>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b12      	cmp	r3, #18
 8004482:	d123      	bne.n	80044cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	08da      	lsrs	r2, r3, #3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3208      	adds	r2, #8
 800448c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004490:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	220f      	movs	r2, #15
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	43db      	mvns	r3, r3
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	4013      	ands	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	691a      	ldr	r2, [r3, #16]
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	08da      	lsrs	r2, r3, #3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3208      	adds	r2, #8
 80044c6:	69b9      	ldr	r1, [r7, #24]
 80044c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	2203      	movs	r2, #3
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	43db      	mvns	r3, r3
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4013      	ands	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f003 0203 	and.w	r2, r3, #3
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	fa02 f303 	lsl.w	r3, r2, r3
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 80c0 	beq.w	800468e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800450e:	2300      	movs	r3, #0
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	4b66      	ldr	r3, [pc, #408]	; (80046ac <HAL_GPIO_Init+0x324>)
 8004514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004516:	4a65      	ldr	r2, [pc, #404]	; (80046ac <HAL_GPIO_Init+0x324>)
 8004518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800451c:	6453      	str	r3, [r2, #68]	; 0x44
 800451e:	4b63      	ldr	r3, [pc, #396]	; (80046ac <HAL_GPIO_Init+0x324>)
 8004520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800452a:	4a61      	ldr	r2, [pc, #388]	; (80046b0 <HAL_GPIO_Init+0x328>)
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	089b      	lsrs	r3, r3, #2
 8004530:	3302      	adds	r3, #2
 8004532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	220f      	movs	r2, #15
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	43db      	mvns	r3, r3
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	4013      	ands	r3, r2
 800454c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a58      	ldr	r2, [pc, #352]	; (80046b4 <HAL_GPIO_Init+0x32c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d037      	beq.n	80045c6 <HAL_GPIO_Init+0x23e>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a57      	ldr	r2, [pc, #348]	; (80046b8 <HAL_GPIO_Init+0x330>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d031      	beq.n	80045c2 <HAL_GPIO_Init+0x23a>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a56      	ldr	r2, [pc, #344]	; (80046bc <HAL_GPIO_Init+0x334>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d02b      	beq.n	80045be <HAL_GPIO_Init+0x236>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a55      	ldr	r2, [pc, #340]	; (80046c0 <HAL_GPIO_Init+0x338>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d025      	beq.n	80045ba <HAL_GPIO_Init+0x232>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a54      	ldr	r2, [pc, #336]	; (80046c4 <HAL_GPIO_Init+0x33c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d01f      	beq.n	80045b6 <HAL_GPIO_Init+0x22e>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a53      	ldr	r2, [pc, #332]	; (80046c8 <HAL_GPIO_Init+0x340>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d019      	beq.n	80045b2 <HAL_GPIO_Init+0x22a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a52      	ldr	r2, [pc, #328]	; (80046cc <HAL_GPIO_Init+0x344>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d013      	beq.n	80045ae <HAL_GPIO_Init+0x226>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a51      	ldr	r2, [pc, #324]	; (80046d0 <HAL_GPIO_Init+0x348>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d00d      	beq.n	80045aa <HAL_GPIO_Init+0x222>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a50      	ldr	r2, [pc, #320]	; (80046d4 <HAL_GPIO_Init+0x34c>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d007      	beq.n	80045a6 <HAL_GPIO_Init+0x21e>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a4f      	ldr	r2, [pc, #316]	; (80046d8 <HAL_GPIO_Init+0x350>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d101      	bne.n	80045a2 <HAL_GPIO_Init+0x21a>
 800459e:	2309      	movs	r3, #9
 80045a0:	e012      	b.n	80045c8 <HAL_GPIO_Init+0x240>
 80045a2:	230a      	movs	r3, #10
 80045a4:	e010      	b.n	80045c8 <HAL_GPIO_Init+0x240>
 80045a6:	2308      	movs	r3, #8
 80045a8:	e00e      	b.n	80045c8 <HAL_GPIO_Init+0x240>
 80045aa:	2307      	movs	r3, #7
 80045ac:	e00c      	b.n	80045c8 <HAL_GPIO_Init+0x240>
 80045ae:	2306      	movs	r3, #6
 80045b0:	e00a      	b.n	80045c8 <HAL_GPIO_Init+0x240>
 80045b2:	2305      	movs	r3, #5
 80045b4:	e008      	b.n	80045c8 <HAL_GPIO_Init+0x240>
 80045b6:	2304      	movs	r3, #4
 80045b8:	e006      	b.n	80045c8 <HAL_GPIO_Init+0x240>
 80045ba:	2303      	movs	r3, #3
 80045bc:	e004      	b.n	80045c8 <HAL_GPIO_Init+0x240>
 80045be:	2302      	movs	r3, #2
 80045c0:	e002      	b.n	80045c8 <HAL_GPIO_Init+0x240>
 80045c2:	2301      	movs	r3, #1
 80045c4:	e000      	b.n	80045c8 <HAL_GPIO_Init+0x240>
 80045c6:	2300      	movs	r3, #0
 80045c8:	69fa      	ldr	r2, [r7, #28]
 80045ca:	f002 0203 	and.w	r2, r2, #3
 80045ce:	0092      	lsls	r2, r2, #2
 80045d0:	4093      	lsls	r3, r2
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045d8:	4935      	ldr	r1, [pc, #212]	; (80046b0 <HAL_GPIO_Init+0x328>)
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	089b      	lsrs	r3, r3, #2
 80045de:	3302      	adds	r3, #2
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045e6:	4b3d      	ldr	r3, [pc, #244]	; (80046dc <HAL_GPIO_Init+0x354>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	43db      	mvns	r3, r3
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	4013      	ands	r3, r2
 80045f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800460a:	4a34      	ldr	r2, [pc, #208]	; (80046dc <HAL_GPIO_Init+0x354>)
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004610:	4b32      	ldr	r3, [pc, #200]	; (80046dc <HAL_GPIO_Init+0x354>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	43db      	mvns	r3, r3
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	4013      	ands	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004634:	4a29      	ldr	r2, [pc, #164]	; (80046dc <HAL_GPIO_Init+0x354>)
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800463a:	4b28      	ldr	r3, [pc, #160]	; (80046dc <HAL_GPIO_Init+0x354>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	43db      	mvns	r3, r3
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	4013      	ands	r3, r2
 8004648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800465e:	4a1f      	ldr	r2, [pc, #124]	; (80046dc <HAL_GPIO_Init+0x354>)
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004664:	4b1d      	ldr	r3, [pc, #116]	; (80046dc <HAL_GPIO_Init+0x354>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	43db      	mvns	r3, r3
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	4013      	ands	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004688:	4a14      	ldr	r2, [pc, #80]	; (80046dc <HAL_GPIO_Init+0x354>)
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	3301      	adds	r3, #1
 8004692:	61fb      	str	r3, [r7, #28]
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	2b0f      	cmp	r3, #15
 8004698:	f67f ae84 	bls.w	80043a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800469c:	bf00      	nop
 800469e:	bf00      	nop
 80046a0:	3724      	adds	r7, #36	; 0x24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	40023800 	.word	0x40023800
 80046b0:	40013800 	.word	0x40013800
 80046b4:	40020000 	.word	0x40020000
 80046b8:	40020400 	.word	0x40020400
 80046bc:	40020800 	.word	0x40020800
 80046c0:	40020c00 	.word	0x40020c00
 80046c4:	40021000 	.word	0x40021000
 80046c8:	40021400 	.word	0x40021400
 80046cc:	40021800 	.word	0x40021800
 80046d0:	40021c00 	.word	0x40021c00
 80046d4:	40022000 	.word	0x40022000
 80046d8:	40022400 	.word	0x40022400
 80046dc:	40013c00 	.word	0x40013c00

080046e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	460b      	mov	r3, r1
 80046ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	887b      	ldrh	r3, [r7, #2]
 80046f2:	4013      	ands	r3, r2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046f8:	2301      	movs	r3, #1
 80046fa:	73fb      	strb	r3, [r7, #15]
 80046fc:	e001      	b.n	8004702 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046fe:	2300      	movs	r3, #0
 8004700:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004702:	7bfb      	ldrb	r3, [r7, #15]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	460b      	mov	r3, r1
 800471a:	807b      	strh	r3, [r7, #2]
 800471c:	4613      	mov	r3, r2
 800471e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004720:	787b      	ldrb	r3, [r7, #1]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004726:	887a      	ldrh	r2, [r7, #2]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800472c:	e003      	b.n	8004736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800472e:	887b      	ldrh	r3, [r7, #2]
 8004730:	041a      	lsls	r2, r3, #16
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	619a      	str	r2, [r3, #24]
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
	...

08004744 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800474e:	4b08      	ldr	r3, [pc, #32]	; (8004770 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004750:	695a      	ldr	r2, [r3, #20]
 8004752:	88fb      	ldrh	r3, [r7, #6]
 8004754:	4013      	ands	r3, r2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d006      	beq.n	8004768 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800475a:	4a05      	ldr	r2, [pc, #20]	; (8004770 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800475c:	88fb      	ldrh	r3, [r7, #6]
 800475e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004760:	88fb      	ldrh	r3, [r7, #6]
 8004762:	4618      	mov	r0, r3
 8004764:	f7fd fd4a 	bl	80021fc <HAL_GPIO_EXTI_Callback>
  }
}
 8004768:	bf00      	nop
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40013c00 	.word	0x40013c00

08004774 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e12b      	b.n	80049de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d106      	bne.n	80047a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f7fd fa86 	bl	8001cac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2224      	movs	r2, #36	; 0x24
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0201 	bic.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047d8:	f000 fe1e 	bl	8005418 <HAL_RCC_GetPCLK1Freq>
 80047dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	4a81      	ldr	r2, [pc, #516]	; (80049e8 <HAL_I2C_Init+0x274>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d807      	bhi.n	80047f8 <HAL_I2C_Init+0x84>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4a80      	ldr	r2, [pc, #512]	; (80049ec <HAL_I2C_Init+0x278>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	bf94      	ite	ls
 80047f0:	2301      	movls	r3, #1
 80047f2:	2300      	movhi	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	e006      	b.n	8004806 <HAL_I2C_Init+0x92>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4a7d      	ldr	r2, [pc, #500]	; (80049f0 <HAL_I2C_Init+0x27c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	bf94      	ite	ls
 8004800:	2301      	movls	r3, #1
 8004802:	2300      	movhi	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e0e7      	b.n	80049de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4a78      	ldr	r2, [pc, #480]	; (80049f4 <HAL_I2C_Init+0x280>)
 8004812:	fba2 2303 	umull	r2, r3, r2, r3
 8004816:	0c9b      	lsrs	r3, r3, #18
 8004818:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	430a      	orrs	r2, r1
 800482c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	4a6a      	ldr	r2, [pc, #424]	; (80049e8 <HAL_I2C_Init+0x274>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d802      	bhi.n	8004848 <HAL_I2C_Init+0xd4>
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	3301      	adds	r3, #1
 8004846:	e009      	b.n	800485c <HAL_I2C_Init+0xe8>
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800484e:	fb02 f303 	mul.w	r3, r2, r3
 8004852:	4a69      	ldr	r2, [pc, #420]	; (80049f8 <HAL_I2C_Init+0x284>)
 8004854:	fba2 2303 	umull	r2, r3, r2, r3
 8004858:	099b      	lsrs	r3, r3, #6
 800485a:	3301      	adds	r3, #1
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6812      	ldr	r2, [r2, #0]
 8004860:	430b      	orrs	r3, r1
 8004862:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800486e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	495c      	ldr	r1, [pc, #368]	; (80049e8 <HAL_I2C_Init+0x274>)
 8004878:	428b      	cmp	r3, r1
 800487a:	d819      	bhi.n	80048b0 <HAL_I2C_Init+0x13c>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	1e59      	subs	r1, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	fbb1 f3f3 	udiv	r3, r1, r3
 800488a:	1c59      	adds	r1, r3, #1
 800488c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004890:	400b      	ands	r3, r1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <HAL_I2C_Init+0x138>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	1e59      	subs	r1, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80048a4:	3301      	adds	r3, #1
 80048a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048aa:	e051      	b.n	8004950 <HAL_I2C_Init+0x1dc>
 80048ac:	2304      	movs	r3, #4
 80048ae:	e04f      	b.n	8004950 <HAL_I2C_Init+0x1dc>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d111      	bne.n	80048dc <HAL_I2C_Init+0x168>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	1e58      	subs	r0, r3, #1
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6859      	ldr	r1, [r3, #4]
 80048c0:	460b      	mov	r3, r1
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	440b      	add	r3, r1
 80048c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ca:	3301      	adds	r3, #1
 80048cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	bf0c      	ite	eq
 80048d4:	2301      	moveq	r3, #1
 80048d6:	2300      	movne	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	e012      	b.n	8004902 <HAL_I2C_Init+0x18e>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	1e58      	subs	r0, r3, #1
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6859      	ldr	r1, [r3, #4]
 80048e4:	460b      	mov	r3, r1
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	440b      	add	r3, r1
 80048ea:	0099      	lsls	r1, r3, #2
 80048ec:	440b      	add	r3, r1
 80048ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80048f2:	3301      	adds	r3, #1
 80048f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	bf0c      	ite	eq
 80048fc:	2301      	moveq	r3, #1
 80048fe:	2300      	movne	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <HAL_I2C_Init+0x196>
 8004906:	2301      	movs	r3, #1
 8004908:	e022      	b.n	8004950 <HAL_I2C_Init+0x1dc>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10e      	bne.n	8004930 <HAL_I2C_Init+0x1bc>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	1e58      	subs	r0, r3, #1
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6859      	ldr	r1, [r3, #4]
 800491a:	460b      	mov	r3, r1
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	440b      	add	r3, r1
 8004920:	fbb0 f3f3 	udiv	r3, r0, r3
 8004924:	3301      	adds	r3, #1
 8004926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800492a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800492e:	e00f      	b.n	8004950 <HAL_I2C_Init+0x1dc>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	1e58      	subs	r0, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6859      	ldr	r1, [r3, #4]
 8004938:	460b      	mov	r3, r1
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	440b      	add	r3, r1
 800493e:	0099      	lsls	r1, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	fbb0 f3f3 	udiv	r3, r0, r3
 8004946:	3301      	adds	r3, #1
 8004948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800494c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004950:	6879      	ldr	r1, [r7, #4]
 8004952:	6809      	ldr	r1, [r1, #0]
 8004954:	4313      	orrs	r3, r2
 8004956:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	69da      	ldr	r2, [r3, #28]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800497e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6911      	ldr	r1, [r2, #16]
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	68d2      	ldr	r2, [r2, #12]
 800498a:	4311      	orrs	r1, r2
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6812      	ldr	r2, [r2, #0]
 8004990:	430b      	orrs	r3, r1
 8004992:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	695a      	ldr	r2, [r3, #20]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0201 	orr.w	r2, r2, #1
 80049be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	000186a0 	.word	0x000186a0
 80049ec:	001e847f 	.word	0x001e847f
 80049f0:	003d08ff 	.word	0x003d08ff
 80049f4:	431bde83 	.word	0x431bde83
 80049f8:	10624dd3 	.word	0x10624dd3

080049fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b20      	cmp	r3, #32
 8004a10:	d129      	bne.n	8004a66 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2224      	movs	r2, #36	; 0x24
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0201 	bic.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0210 	bic.w	r2, r2, #16
 8004a38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f042 0201 	orr.w	r2, r2, #1
 8004a58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	e000      	b.n	8004a68 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004a66:	2302      	movs	r3, #2
  }
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	d12a      	bne.n	8004ae4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2224      	movs	r2, #36	; 0x24
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0201 	bic.w	r2, r2, #1
 8004aa4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004aae:	89fb      	ldrh	r3, [r7, #14]
 8004ab0:	f023 030f 	bic.w	r3, r3, #15
 8004ab4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	89fb      	ldrh	r3, [r7, #14]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	89fa      	ldrh	r2, [r7, #14]
 8004ac6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0201 	orr.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	e000      	b.n	8004ae6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004ae4:	2302      	movs	r3, #2
  }
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
	...

08004af4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004afe:	2300      	movs	r3, #0
 8004b00:	603b      	str	r3, [r7, #0]
 8004b02:	4b20      	ldr	r3, [pc, #128]	; (8004b84 <HAL_PWREx_EnableOverDrive+0x90>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	4a1f      	ldr	r2, [pc, #124]	; (8004b84 <HAL_PWREx_EnableOverDrive+0x90>)
 8004b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b0e:	4b1d      	ldr	r3, [pc, #116]	; (8004b84 <HAL_PWREx_EnableOverDrive+0x90>)
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b16:	603b      	str	r3, [r7, #0]
 8004b18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004b1a:	4b1b      	ldr	r3, [pc, #108]	; (8004b88 <HAL_PWREx_EnableOverDrive+0x94>)
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b20:	f7fe f988 	bl	8002e34 <HAL_GetTick>
 8004b24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b26:	e009      	b.n	8004b3c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b28:	f7fe f984 	bl	8002e34 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b36:	d901      	bls.n	8004b3c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e01f      	b.n	8004b7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b3c:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <HAL_PWREx_EnableOverDrive+0x98>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b48:	d1ee      	bne.n	8004b28 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004b4a:	4b11      	ldr	r3, [pc, #68]	; (8004b90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b50:	f7fe f970 	bl	8002e34 <HAL_GetTick>
 8004b54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004b56:	e009      	b.n	8004b6c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b58:	f7fe f96c 	bl	8002e34 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b66:	d901      	bls.n	8004b6c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e007      	b.n	8004b7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004b6c:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <HAL_PWREx_EnableOverDrive+0x98>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b78:	d1ee      	bne.n	8004b58 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	40023800 	.word	0x40023800
 8004b88:	420e0040 	.word	0x420e0040
 8004b8c:	40007000 	.word	0x40007000
 8004b90:	420e0044 	.word	0x420e0044

08004b94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e25b      	b.n	800505e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d075      	beq.n	8004c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bb2:	4ba3      	ldr	r3, [pc, #652]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 030c 	and.w	r3, r3, #12
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d00c      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bbe:	4ba0      	ldr	r3, [pc, #640]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d112      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bca:	4b9d      	ldr	r3, [pc, #628]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bd6:	d10b      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd8:	4b99      	ldr	r3, [pc, #612]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d05b      	beq.n	8004c9c <HAL_RCC_OscConfig+0x108>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d157      	bne.n	8004c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e236      	b.n	800505e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf8:	d106      	bne.n	8004c08 <HAL_RCC_OscConfig+0x74>
 8004bfa:	4b91      	ldr	r3, [pc, #580]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a90      	ldr	r2, [pc, #576]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	e01d      	b.n	8004c44 <HAL_RCC_OscConfig+0xb0>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c10:	d10c      	bne.n	8004c2c <HAL_RCC_OscConfig+0x98>
 8004c12:	4b8b      	ldr	r3, [pc, #556]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a8a      	ldr	r2, [pc, #552]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	4b88      	ldr	r3, [pc, #544]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a87      	ldr	r2, [pc, #540]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	e00b      	b.n	8004c44 <HAL_RCC_OscConfig+0xb0>
 8004c2c:	4b84      	ldr	r3, [pc, #528]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a83      	ldr	r2, [pc, #524]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	4b81      	ldr	r3, [pc, #516]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a80      	ldr	r2, [pc, #512]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d013      	beq.n	8004c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4c:	f7fe f8f2 	bl	8002e34 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c54:	f7fe f8ee 	bl	8002e34 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b64      	cmp	r3, #100	; 0x64
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e1fb      	b.n	800505e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c66:	4b76      	ldr	r3, [pc, #472]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0f0      	beq.n	8004c54 <HAL_RCC_OscConfig+0xc0>
 8004c72:	e014      	b.n	8004c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c74:	f7fe f8de 	bl	8002e34 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c7c:	f7fe f8da 	bl	8002e34 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b64      	cmp	r3, #100	; 0x64
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e1e7      	b.n	800505e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c8e:	4b6c      	ldr	r3, [pc, #432]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0xe8>
 8004c9a:	e000      	b.n	8004c9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d063      	beq.n	8004d72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004caa:	4b65      	ldr	r3, [pc, #404]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00b      	beq.n	8004cce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cb6:	4b62      	ldr	r3, [pc, #392]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d11c      	bne.n	8004cfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cc2:	4b5f      	ldr	r3, [pc, #380]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d116      	bne.n	8004cfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cce:	4b5c      	ldr	r3, [pc, #368]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d005      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x152>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d001      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e1bb      	b.n	800505e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ce6:	4b56      	ldr	r3, [pc, #344]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	4952      	ldr	r1, [pc, #328]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cfa:	e03a      	b.n	8004d72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d020      	beq.n	8004d46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d04:	4b4f      	ldr	r3, [pc, #316]	; (8004e44 <HAL_RCC_OscConfig+0x2b0>)
 8004d06:	2201      	movs	r2, #1
 8004d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0a:	f7fe f893 	bl	8002e34 <HAL_GetTick>
 8004d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d10:	e008      	b.n	8004d24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d12:	f7fe f88f 	bl	8002e34 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e19c      	b.n	800505e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d24:	4b46      	ldr	r3, [pc, #280]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0f0      	beq.n	8004d12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d30:	4b43      	ldr	r3, [pc, #268]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	4940      	ldr	r1, [pc, #256]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	600b      	str	r3, [r1, #0]
 8004d44:	e015      	b.n	8004d72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d46:	4b3f      	ldr	r3, [pc, #252]	; (8004e44 <HAL_RCC_OscConfig+0x2b0>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4c:	f7fe f872 	bl	8002e34 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d54:	f7fe f86e 	bl	8002e34 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e17b      	b.n	800505e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d66:	4b36      	ldr	r3, [pc, #216]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d030      	beq.n	8004de0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d016      	beq.n	8004db4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d86:	4b30      	ldr	r3, [pc, #192]	; (8004e48 <HAL_RCC_OscConfig+0x2b4>)
 8004d88:	2201      	movs	r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8c:	f7fe f852 	bl	8002e34 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d92:	e008      	b.n	8004da6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d94:	f7fe f84e 	bl	8002e34 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e15b      	b.n	800505e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004da6:	4b26      	ldr	r3, [pc, #152]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f0      	beq.n	8004d94 <HAL_RCC_OscConfig+0x200>
 8004db2:	e015      	b.n	8004de0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004db4:	4b24      	ldr	r3, [pc, #144]	; (8004e48 <HAL_RCC_OscConfig+0x2b4>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dba:	f7fe f83b 	bl	8002e34 <HAL_GetTick>
 8004dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dc2:	f7fe f837 	bl	8002e34 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e144      	b.n	800505e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd4:	4b1a      	ldr	r3, [pc, #104]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1f0      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 80a0 	beq.w	8004f2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dee:	2300      	movs	r3, #0
 8004df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004df2:	4b13      	ldr	r3, [pc, #76]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10f      	bne.n	8004e1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60bb      	str	r3, [r7, #8]
 8004e02:	4b0f      	ldr	r3, [pc, #60]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	4a0e      	ldr	r2, [pc, #56]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e0e:	4b0c      	ldr	r3, [pc, #48]	; (8004e40 <HAL_RCC_OscConfig+0x2ac>)
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e16:	60bb      	str	r3, [r7, #8]
 8004e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e1e:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <HAL_RCC_OscConfig+0x2b8>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d121      	bne.n	8004e6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e2a:	4b08      	ldr	r3, [pc, #32]	; (8004e4c <HAL_RCC_OscConfig+0x2b8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a07      	ldr	r2, [pc, #28]	; (8004e4c <HAL_RCC_OscConfig+0x2b8>)
 8004e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e36:	f7fd fffd 	bl	8002e34 <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3c:	e011      	b.n	8004e62 <HAL_RCC_OscConfig+0x2ce>
 8004e3e:	bf00      	nop
 8004e40:	40023800 	.word	0x40023800
 8004e44:	42470000 	.word	0x42470000
 8004e48:	42470e80 	.word	0x42470e80
 8004e4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e50:	f7fd fff0 	bl	8002e34 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e0fd      	b.n	800505e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e62:	4b81      	ldr	r3, [pc, #516]	; (8005068 <HAL_RCC_OscConfig+0x4d4>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0f0      	beq.n	8004e50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d106      	bne.n	8004e84 <HAL_RCC_OscConfig+0x2f0>
 8004e76:	4b7d      	ldr	r3, [pc, #500]	; (800506c <HAL_RCC_OscConfig+0x4d8>)
 8004e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7a:	4a7c      	ldr	r2, [pc, #496]	; (800506c <HAL_RCC_OscConfig+0x4d8>)
 8004e7c:	f043 0301 	orr.w	r3, r3, #1
 8004e80:	6713      	str	r3, [r2, #112]	; 0x70
 8004e82:	e01c      	b.n	8004ebe <HAL_RCC_OscConfig+0x32a>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	2b05      	cmp	r3, #5
 8004e8a:	d10c      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x312>
 8004e8c:	4b77      	ldr	r3, [pc, #476]	; (800506c <HAL_RCC_OscConfig+0x4d8>)
 8004e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e90:	4a76      	ldr	r2, [pc, #472]	; (800506c <HAL_RCC_OscConfig+0x4d8>)
 8004e92:	f043 0304 	orr.w	r3, r3, #4
 8004e96:	6713      	str	r3, [r2, #112]	; 0x70
 8004e98:	4b74      	ldr	r3, [pc, #464]	; (800506c <HAL_RCC_OscConfig+0x4d8>)
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9c:	4a73      	ldr	r2, [pc, #460]	; (800506c <HAL_RCC_OscConfig+0x4d8>)
 8004e9e:	f043 0301 	orr.w	r3, r3, #1
 8004ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea4:	e00b      	b.n	8004ebe <HAL_RCC_OscConfig+0x32a>
 8004ea6:	4b71      	ldr	r3, [pc, #452]	; (800506c <HAL_RCC_OscConfig+0x4d8>)
 8004ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eaa:	4a70      	ldr	r2, [pc, #448]	; (800506c <HAL_RCC_OscConfig+0x4d8>)
 8004eac:	f023 0301 	bic.w	r3, r3, #1
 8004eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8004eb2:	4b6e      	ldr	r3, [pc, #440]	; (800506c <HAL_RCC_OscConfig+0x4d8>)
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb6:	4a6d      	ldr	r2, [pc, #436]	; (800506c <HAL_RCC_OscConfig+0x4d8>)
 8004eb8:	f023 0304 	bic.w	r3, r3, #4
 8004ebc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d015      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec6:	f7fd ffb5 	bl	8002e34 <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ecc:	e00a      	b.n	8004ee4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ece:	f7fd ffb1 	bl	8002e34 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e0bc      	b.n	800505e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee4:	4b61      	ldr	r3, [pc, #388]	; (800506c <HAL_RCC_OscConfig+0x4d8>)
 8004ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0ee      	beq.n	8004ece <HAL_RCC_OscConfig+0x33a>
 8004ef0:	e014      	b.n	8004f1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ef2:	f7fd ff9f 	bl	8002e34 <HAL_GetTick>
 8004ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ef8:	e00a      	b.n	8004f10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004efa:	f7fd ff9b 	bl	8002e34 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e0a6      	b.n	800505e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f10:	4b56      	ldr	r3, [pc, #344]	; (800506c <HAL_RCC_OscConfig+0x4d8>)
 8004f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1ee      	bne.n	8004efa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d105      	bne.n	8004f2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f22:	4b52      	ldr	r3, [pc, #328]	; (800506c <HAL_RCC_OscConfig+0x4d8>)
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	4a51      	ldr	r2, [pc, #324]	; (800506c <HAL_RCC_OscConfig+0x4d8>)
 8004f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 8092 	beq.w	800505c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f38:	4b4c      	ldr	r3, [pc, #304]	; (800506c <HAL_RCC_OscConfig+0x4d8>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f003 030c 	and.w	r3, r3, #12
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d05c      	beq.n	8004ffe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d141      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f4c:	4b48      	ldr	r3, [pc, #288]	; (8005070 <HAL_RCC_OscConfig+0x4dc>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f52:	f7fd ff6f 	bl	8002e34 <HAL_GetTick>
 8004f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f5a:	f7fd ff6b 	bl	8002e34 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e078      	b.n	800505e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f6c:	4b3f      	ldr	r3, [pc, #252]	; (800506c <HAL_RCC_OscConfig+0x4d8>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1f0      	bne.n	8004f5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	69da      	ldr	r2, [r3, #28]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	431a      	orrs	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	019b      	lsls	r3, r3, #6
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8e:	085b      	lsrs	r3, r3, #1
 8004f90:	3b01      	subs	r3, #1
 8004f92:	041b      	lsls	r3, r3, #16
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9a:	061b      	lsls	r3, r3, #24
 8004f9c:	4933      	ldr	r1, [pc, #204]	; (800506c <HAL_RCC_OscConfig+0x4d8>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fa2:	4b33      	ldr	r3, [pc, #204]	; (8005070 <HAL_RCC_OscConfig+0x4dc>)
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa8:	f7fd ff44 	bl	8002e34 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fb0:	f7fd ff40 	bl	8002e34 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e04d      	b.n	800505e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fc2:	4b2a      	ldr	r3, [pc, #168]	; (800506c <HAL_RCC_OscConfig+0x4d8>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0f0      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x41c>
 8004fce:	e045      	b.n	800505c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd0:	4b27      	ldr	r3, [pc, #156]	; (8005070 <HAL_RCC_OscConfig+0x4dc>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd6:	f7fd ff2d 	bl	8002e34 <HAL_GetTick>
 8004fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fde:	f7fd ff29 	bl	8002e34 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e036      	b.n	800505e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ff0:	4b1e      	ldr	r3, [pc, #120]	; (800506c <HAL_RCC_OscConfig+0x4d8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1f0      	bne.n	8004fde <HAL_RCC_OscConfig+0x44a>
 8004ffc:	e02e      	b.n	800505c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d101      	bne.n	800500a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e029      	b.n	800505e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800500a:	4b18      	ldr	r3, [pc, #96]	; (800506c <HAL_RCC_OscConfig+0x4d8>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	429a      	cmp	r2, r3
 800501c:	d11c      	bne.n	8005058 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005028:	429a      	cmp	r2, r3
 800502a:	d115      	bne.n	8005058 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005032:	4013      	ands	r3, r2
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005038:	4293      	cmp	r3, r2
 800503a:	d10d      	bne.n	8005058 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005046:	429a      	cmp	r2, r3
 8005048:	d106      	bne.n	8005058 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005054:	429a      	cmp	r2, r3
 8005056:	d001      	beq.n	800505c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e000      	b.n	800505e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	40007000 	.word	0x40007000
 800506c:	40023800 	.word	0x40023800
 8005070:	42470060 	.word	0x42470060

08005074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e0cc      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005088:	4b68      	ldr	r3, [pc, #416]	; (800522c <HAL_RCC_ClockConfig+0x1b8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 030f 	and.w	r3, r3, #15
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d90c      	bls.n	80050b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005096:	4b65      	ldr	r3, [pc, #404]	; (800522c <HAL_RCC_ClockConfig+0x1b8>)
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800509e:	4b63      	ldr	r3, [pc, #396]	; (800522c <HAL_RCC_ClockConfig+0x1b8>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 030f 	and.w	r3, r3, #15
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d001      	beq.n	80050b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e0b8      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d020      	beq.n	80050fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d005      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050c8:	4b59      	ldr	r3, [pc, #356]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	4a58      	ldr	r2, [pc, #352]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80050ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0308 	and.w	r3, r3, #8
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050e0:	4b53      	ldr	r3, [pc, #332]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	4a52      	ldr	r2, [pc, #328]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80050e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050ec:	4b50      	ldr	r3, [pc, #320]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	494d      	ldr	r1, [pc, #308]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d044      	beq.n	8005194 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d107      	bne.n	8005122 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005112:	4b47      	ldr	r3, [pc, #284]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d119      	bne.n	8005152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e07f      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d003      	beq.n	8005132 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800512e:	2b03      	cmp	r3, #3
 8005130:	d107      	bne.n	8005142 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005132:	4b3f      	ldr	r3, [pc, #252]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d109      	bne.n	8005152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e06f      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005142:	4b3b      	ldr	r3, [pc, #236]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e067      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005152:	4b37      	ldr	r3, [pc, #220]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f023 0203 	bic.w	r2, r3, #3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	4934      	ldr	r1, [pc, #208]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005160:	4313      	orrs	r3, r2
 8005162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005164:	f7fd fe66 	bl	8002e34 <HAL_GetTick>
 8005168:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800516a:	e00a      	b.n	8005182 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800516c:	f7fd fe62 	bl	8002e34 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	f241 3288 	movw	r2, #5000	; 0x1388
 800517a:	4293      	cmp	r3, r2
 800517c:	d901      	bls.n	8005182 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e04f      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005182:	4b2b      	ldr	r3, [pc, #172]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f003 020c 	and.w	r2, r3, #12
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	429a      	cmp	r2, r3
 8005192:	d1eb      	bne.n	800516c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005194:	4b25      	ldr	r3, [pc, #148]	; (800522c <HAL_RCC_ClockConfig+0x1b8>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 030f 	and.w	r3, r3, #15
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d20c      	bcs.n	80051bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a2:	4b22      	ldr	r3, [pc, #136]	; (800522c <HAL_RCC_ClockConfig+0x1b8>)
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051aa:	4b20      	ldr	r3, [pc, #128]	; (800522c <HAL_RCC_ClockConfig+0x1b8>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d001      	beq.n	80051bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e032      	b.n	8005222 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051c8:	4b19      	ldr	r3, [pc, #100]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	4916      	ldr	r1, [pc, #88]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d009      	beq.n	80051fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051e6:	4b12      	ldr	r3, [pc, #72]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	490e      	ldr	r1, [pc, #56]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051fa:	f000 f821 	bl	8005240 <HAL_RCC_GetSysClockFreq>
 80051fe:	4602      	mov	r2, r0
 8005200:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	091b      	lsrs	r3, r3, #4
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	490a      	ldr	r1, [pc, #40]	; (8005234 <HAL_RCC_ClockConfig+0x1c0>)
 800520c:	5ccb      	ldrb	r3, [r1, r3]
 800520e:	fa22 f303 	lsr.w	r3, r2, r3
 8005212:	4a09      	ldr	r2, [pc, #36]	; (8005238 <HAL_RCC_ClockConfig+0x1c4>)
 8005214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005216:	4b09      	ldr	r3, [pc, #36]	; (800523c <HAL_RCC_ClockConfig+0x1c8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f7fd fdc6 	bl	8002dac <HAL_InitTick>

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	40023c00 	.word	0x40023c00
 8005230:	40023800 	.word	0x40023800
 8005234:	08007550 	.word	0x08007550
 8005238:	20000128 	.word	0x20000128
 800523c:	2000012c 	.word	0x2000012c

08005240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005240:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	607b      	str	r3, [r7, #4]
 800524c:	2300      	movs	r3, #0
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	2300      	movs	r3, #0
 8005252:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005258:	4b67      	ldr	r3, [pc, #412]	; (80053f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 030c 	and.w	r3, r3, #12
 8005260:	2b08      	cmp	r3, #8
 8005262:	d00d      	beq.n	8005280 <HAL_RCC_GetSysClockFreq+0x40>
 8005264:	2b08      	cmp	r3, #8
 8005266:	f200 80bd 	bhi.w	80053e4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <HAL_RCC_GetSysClockFreq+0x34>
 800526e:	2b04      	cmp	r3, #4
 8005270:	d003      	beq.n	800527a <HAL_RCC_GetSysClockFreq+0x3a>
 8005272:	e0b7      	b.n	80053e4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005274:	4b61      	ldr	r3, [pc, #388]	; (80053fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005276:	60bb      	str	r3, [r7, #8]
       break;
 8005278:	e0b7      	b.n	80053ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800527a:	4b60      	ldr	r3, [pc, #384]	; (80053fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 800527c:	60bb      	str	r3, [r7, #8]
      break;
 800527e:	e0b4      	b.n	80053ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005280:	4b5d      	ldr	r3, [pc, #372]	; (80053f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005288:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800528a:	4b5b      	ldr	r3, [pc, #364]	; (80053f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d04d      	beq.n	8005332 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005296:	4b58      	ldr	r3, [pc, #352]	; (80053f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	099b      	lsrs	r3, r3, #6
 800529c:	461a      	mov	r2, r3
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80052a6:	f04f 0100 	mov.w	r1, #0
 80052aa:	ea02 0800 	and.w	r8, r2, r0
 80052ae:	ea03 0901 	and.w	r9, r3, r1
 80052b2:	4640      	mov	r0, r8
 80052b4:	4649      	mov	r1, r9
 80052b6:	f04f 0200 	mov.w	r2, #0
 80052ba:	f04f 0300 	mov.w	r3, #0
 80052be:	014b      	lsls	r3, r1, #5
 80052c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052c4:	0142      	lsls	r2, r0, #5
 80052c6:	4610      	mov	r0, r2
 80052c8:	4619      	mov	r1, r3
 80052ca:	ebb0 0008 	subs.w	r0, r0, r8
 80052ce:	eb61 0109 	sbc.w	r1, r1, r9
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	f04f 0300 	mov.w	r3, #0
 80052da:	018b      	lsls	r3, r1, #6
 80052dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052e0:	0182      	lsls	r2, r0, #6
 80052e2:	1a12      	subs	r2, r2, r0
 80052e4:	eb63 0301 	sbc.w	r3, r3, r1
 80052e8:	f04f 0000 	mov.w	r0, #0
 80052ec:	f04f 0100 	mov.w	r1, #0
 80052f0:	00d9      	lsls	r1, r3, #3
 80052f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052f6:	00d0      	lsls	r0, r2, #3
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	eb12 0208 	adds.w	r2, r2, r8
 8005300:	eb43 0309 	adc.w	r3, r3, r9
 8005304:	f04f 0000 	mov.w	r0, #0
 8005308:	f04f 0100 	mov.w	r1, #0
 800530c:	0299      	lsls	r1, r3, #10
 800530e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005312:	0290      	lsls	r0, r2, #10
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	4610      	mov	r0, r2
 800531a:	4619      	mov	r1, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	461a      	mov	r2, r3
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	f7fb fc02 	bl	8000b2c <__aeabi_uldivmod>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	4613      	mov	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	e04a      	b.n	80053c8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005332:	4b31      	ldr	r3, [pc, #196]	; (80053f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	099b      	lsrs	r3, r3, #6
 8005338:	461a      	mov	r2, r3
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005342:	f04f 0100 	mov.w	r1, #0
 8005346:	ea02 0400 	and.w	r4, r2, r0
 800534a:	ea03 0501 	and.w	r5, r3, r1
 800534e:	4620      	mov	r0, r4
 8005350:	4629      	mov	r1, r5
 8005352:	f04f 0200 	mov.w	r2, #0
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	014b      	lsls	r3, r1, #5
 800535c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005360:	0142      	lsls	r2, r0, #5
 8005362:	4610      	mov	r0, r2
 8005364:	4619      	mov	r1, r3
 8005366:	1b00      	subs	r0, r0, r4
 8005368:	eb61 0105 	sbc.w	r1, r1, r5
 800536c:	f04f 0200 	mov.w	r2, #0
 8005370:	f04f 0300 	mov.w	r3, #0
 8005374:	018b      	lsls	r3, r1, #6
 8005376:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800537a:	0182      	lsls	r2, r0, #6
 800537c:	1a12      	subs	r2, r2, r0
 800537e:	eb63 0301 	sbc.w	r3, r3, r1
 8005382:	f04f 0000 	mov.w	r0, #0
 8005386:	f04f 0100 	mov.w	r1, #0
 800538a:	00d9      	lsls	r1, r3, #3
 800538c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005390:	00d0      	lsls	r0, r2, #3
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	1912      	adds	r2, r2, r4
 8005398:	eb45 0303 	adc.w	r3, r5, r3
 800539c:	f04f 0000 	mov.w	r0, #0
 80053a0:	f04f 0100 	mov.w	r1, #0
 80053a4:	0299      	lsls	r1, r3, #10
 80053a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80053aa:	0290      	lsls	r0, r2, #10
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4610      	mov	r0, r2
 80053b2:	4619      	mov	r1, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	461a      	mov	r2, r3
 80053b8:	f04f 0300 	mov.w	r3, #0
 80053bc:	f7fb fbb6 	bl	8000b2c <__aeabi_uldivmod>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4613      	mov	r3, r2
 80053c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053c8:	4b0b      	ldr	r3, [pc, #44]	; (80053f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	0c1b      	lsrs	r3, r3, #16
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	3301      	adds	r3, #1
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e0:	60bb      	str	r3, [r7, #8]
      break;
 80053e2:	e002      	b.n	80053ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053e4:	4b05      	ldr	r3, [pc, #20]	; (80053fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80053e6:	60bb      	str	r3, [r7, #8]
      break;
 80053e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053ea:	68bb      	ldr	r3, [r7, #8]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3710      	adds	r7, #16
 80053f0:	46bd      	mov	sp, r7
 80053f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80053f6:	bf00      	nop
 80053f8:	40023800 	.word	0x40023800
 80053fc:	00f42400 	.word	0x00f42400

08005400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005404:	4b03      	ldr	r3, [pc, #12]	; (8005414 <HAL_RCC_GetHCLKFreq+0x14>)
 8005406:	681b      	ldr	r3, [r3, #0]
}
 8005408:	4618      	mov	r0, r3
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	20000128 	.word	0x20000128

08005418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800541c:	f7ff fff0 	bl	8005400 <HAL_RCC_GetHCLKFreq>
 8005420:	4602      	mov	r2, r0
 8005422:	4b05      	ldr	r3, [pc, #20]	; (8005438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	0a9b      	lsrs	r3, r3, #10
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	4903      	ldr	r1, [pc, #12]	; (800543c <HAL_RCC_GetPCLK1Freq+0x24>)
 800542e:	5ccb      	ldrb	r3, [r1, r3]
 8005430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005434:	4618      	mov	r0, r3
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40023800 	.word	0x40023800
 800543c:	08007560 	.word	0x08007560

08005440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005444:	f7ff ffdc 	bl	8005400 <HAL_RCC_GetHCLKFreq>
 8005448:	4602      	mov	r2, r0
 800544a:	4b05      	ldr	r3, [pc, #20]	; (8005460 <HAL_RCC_GetPCLK2Freq+0x20>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	0b5b      	lsrs	r3, r3, #13
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	4903      	ldr	r1, [pc, #12]	; (8005464 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005456:	5ccb      	ldrb	r3, [r1, r3]
 8005458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800545c:	4618      	mov	r0, r3
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40023800 	.word	0x40023800
 8005464:	08007560 	.word	0x08007560

08005468 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e056      	b.n	8005528 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d106      	bne.n	800549a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7fc ff53 	bl	8002340 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2202      	movs	r2, #2
 800549e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	431a      	orrs	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	ea42 0103 	orr.w	r1, r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	0c1b      	lsrs	r3, r3, #16
 80054f8:	f003 0104 	and.w	r1, r3, #4
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69da      	ldr	r2, [r3, #28]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005516:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b088      	sub	sp, #32
 8005534:	af02      	add	r7, sp, #8
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	603b      	str	r3, [r7, #0]
 800553c:	4613      	mov	r3, r2
 800553e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005540:	2300      	movs	r3, #0
 8005542:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800554c:	d112      	bne.n	8005574 <HAL_SPI_Receive+0x44>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10e      	bne.n	8005574 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2204      	movs	r2, #4
 800555a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800555e:	88fa      	ldrh	r2, [r7, #6]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	4613      	mov	r3, r2
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	68b9      	ldr	r1, [r7, #8]
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f000 f8e9 	bl	8005742 <HAL_SPI_TransmitReceive>
 8005570:	4603      	mov	r3, r0
 8005572:	e0e2      	b.n	800573a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800557a:	2b01      	cmp	r3, #1
 800557c:	d101      	bne.n	8005582 <HAL_SPI_Receive+0x52>
 800557e:	2302      	movs	r3, #2
 8005580:	e0db      	b.n	800573a <HAL_SPI_Receive+0x20a>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800558a:	f7fd fc53 	bl	8002e34 <HAL_GetTick>
 800558e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b01      	cmp	r3, #1
 800559a:	d002      	beq.n	80055a2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800559c:	2302      	movs	r3, #2
 800559e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055a0:	e0c2      	b.n	8005728 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <HAL_SPI_Receive+0x7e>
 80055a8:	88fb      	ldrh	r3, [r7, #6]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d102      	bne.n	80055b4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055b2:	e0b9      	b.n	8005728 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2204      	movs	r2, #4
 80055b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	88fa      	ldrh	r2, [r7, #6]
 80055cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	88fa      	ldrh	r2, [r7, #6]
 80055d2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055fa:	d107      	bne.n	800560c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800560a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005616:	2b40      	cmp	r3, #64	; 0x40
 8005618:	d007      	beq.n	800562a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005628:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d162      	bne.n	80056f8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005632:	e02e      	b.n	8005692 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b01      	cmp	r3, #1
 8005640:	d115      	bne.n	800566e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f103 020c 	add.w	r2, r3, #12
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564e:	7812      	ldrb	r2, [r2, #0]
 8005650:	b2d2      	uxtb	r2, r2
 8005652:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005662:	b29b      	uxth	r3, r3
 8005664:	3b01      	subs	r3, #1
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800566c:	e011      	b.n	8005692 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800566e:	f7fd fbe1 	bl	8002e34 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	429a      	cmp	r2, r3
 800567c:	d803      	bhi.n	8005686 <HAL_SPI_Receive+0x156>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005684:	d102      	bne.n	800568c <HAL_SPI_Receive+0x15c>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d102      	bne.n	8005692 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005690:	e04a      	b.n	8005728 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005696:	b29b      	uxth	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1cb      	bne.n	8005634 <HAL_SPI_Receive+0x104>
 800569c:	e031      	b.n	8005702 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d113      	bne.n	80056d4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68da      	ldr	r2, [r3, #12]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b6:	b292      	uxth	r2, r2
 80056b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056be:	1c9a      	adds	r2, r3, #2
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	3b01      	subs	r3, #1
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056d2:	e011      	b.n	80056f8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056d4:	f7fd fbae 	bl	8002e34 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d803      	bhi.n	80056ec <HAL_SPI_Receive+0x1bc>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056ea:	d102      	bne.n	80056f2 <HAL_SPI_Receive+0x1c2>
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d102      	bne.n	80056f8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80056f6:	e017      	b.n	8005728 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1cd      	bne.n	800569e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	6839      	ldr	r1, [r7, #0]
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 fa27 	bl	8005b5a <SPI_EndRxTransaction>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2220      	movs	r2, #32
 8005716:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	75fb      	strb	r3, [r7, #23]
 8005724:	e000      	b.n	8005728 <HAL_SPI_Receive+0x1f8>
  }

error :
 8005726:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005738:	7dfb      	ldrb	r3, [r7, #23]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b08c      	sub	sp, #48	; 0x30
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	607a      	str	r2, [r7, #4]
 800574e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005750:	2301      	movs	r3, #1
 8005752:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005760:	2b01      	cmp	r3, #1
 8005762:	d101      	bne.n	8005768 <HAL_SPI_TransmitReceive+0x26>
 8005764:	2302      	movs	r3, #2
 8005766:	e18a      	b.n	8005a7e <HAL_SPI_TransmitReceive+0x33c>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005770:	f7fd fb60 	bl	8002e34 <HAL_GetTick>
 8005774:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800577c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005786:	887b      	ldrh	r3, [r7, #2]
 8005788:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800578a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800578e:	2b01      	cmp	r3, #1
 8005790:	d00f      	beq.n	80057b2 <HAL_SPI_TransmitReceive+0x70>
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005798:	d107      	bne.n	80057aa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d103      	bne.n	80057aa <HAL_SPI_TransmitReceive+0x68>
 80057a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057a6:	2b04      	cmp	r3, #4
 80057a8:	d003      	beq.n	80057b2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80057aa:	2302      	movs	r3, #2
 80057ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80057b0:	e15b      	b.n	8005a6a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d005      	beq.n	80057c4 <HAL_SPI_TransmitReceive+0x82>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <HAL_SPI_TransmitReceive+0x82>
 80057be:	887b      	ldrh	r3, [r7, #2]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d103      	bne.n	80057cc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80057ca:	e14e      	b.n	8005a6a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d003      	beq.n	80057e0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2205      	movs	r2, #5
 80057dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	887a      	ldrh	r2, [r7, #2]
 80057f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	887a      	ldrh	r2, [r7, #2]
 80057f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	887a      	ldrh	r2, [r7, #2]
 8005802:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	887a      	ldrh	r2, [r7, #2]
 8005808:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005820:	2b40      	cmp	r3, #64	; 0x40
 8005822:	d007      	beq.n	8005834 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005832:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800583c:	d178      	bne.n	8005930 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d002      	beq.n	800584c <HAL_SPI_TransmitReceive+0x10a>
 8005846:	8b7b      	ldrh	r3, [r7, #26]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d166      	bne.n	800591a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005850:	881a      	ldrh	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585c:	1c9a      	adds	r2, r3, #2
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005866:	b29b      	uxth	r3, r3
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005870:	e053      	b.n	800591a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b02      	cmp	r3, #2
 800587e:	d11b      	bne.n	80058b8 <HAL_SPI_TransmitReceive+0x176>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005884:	b29b      	uxth	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d016      	beq.n	80058b8 <HAL_SPI_TransmitReceive+0x176>
 800588a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588c:	2b01      	cmp	r3, #1
 800588e:	d113      	bne.n	80058b8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005894:	881a      	ldrh	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a0:	1c9a      	adds	r2, r3, #2
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d119      	bne.n	80058fa <HAL_SPI_TransmitReceive+0x1b8>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d014      	beq.n	80058fa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058da:	b292      	uxth	r2, r2
 80058dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e2:	1c9a      	adds	r2, r3, #2
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	3b01      	subs	r3, #1
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058f6:	2301      	movs	r3, #1
 80058f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058fa:	f7fd fa9b 	bl	8002e34 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005906:	429a      	cmp	r2, r3
 8005908:	d807      	bhi.n	800591a <HAL_SPI_TransmitReceive+0x1d8>
 800590a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005910:	d003      	beq.n	800591a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005918:	e0a7      	b.n	8005a6a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800591e:	b29b      	uxth	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1a6      	bne.n	8005872 <HAL_SPI_TransmitReceive+0x130>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1a1      	bne.n	8005872 <HAL_SPI_TransmitReceive+0x130>
 800592e:	e07c      	b.n	8005a2a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <HAL_SPI_TransmitReceive+0x1fc>
 8005938:	8b7b      	ldrh	r3, [r7, #26]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d16b      	bne.n	8005a16 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	330c      	adds	r3, #12
 8005948:	7812      	ldrb	r2, [r2, #0]
 800594a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800595a:	b29b      	uxth	r3, r3
 800595c:	3b01      	subs	r3, #1
 800595e:	b29a      	uxth	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005964:	e057      	b.n	8005a16 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b02      	cmp	r3, #2
 8005972:	d11c      	bne.n	80059ae <HAL_SPI_TransmitReceive+0x26c>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005978:	b29b      	uxth	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d017      	beq.n	80059ae <HAL_SPI_TransmitReceive+0x26c>
 800597e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005980:	2b01      	cmp	r3, #1
 8005982:	d114      	bne.n	80059ae <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	330c      	adds	r3, #12
 800598e:	7812      	ldrb	r2, [r2, #0]
 8005990:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	3b01      	subs	r3, #1
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d119      	bne.n	80059f0 <HAL_SPI_TransmitReceive+0x2ae>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d014      	beq.n	80059f0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d8:	1c5a      	adds	r2, r3, #1
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059ec:	2301      	movs	r3, #1
 80059ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80059f0:	f7fd fa20 	bl	8002e34 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d803      	bhi.n	8005a08 <HAL_SPI_TransmitReceive+0x2c6>
 8005a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a06:	d102      	bne.n	8005a0e <HAL_SPI_TransmitReceive+0x2cc>
 8005a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d103      	bne.n	8005a16 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005a14:	e029      	b.n	8005a6a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1a2      	bne.n	8005966 <HAL_SPI_TransmitReceive+0x224>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d19d      	bne.n	8005966 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 f8f8 	bl	8005c24 <SPI_EndRxTxTransaction>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d006      	beq.n	8005a48 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2220      	movs	r2, #32
 8005a44:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005a46:	e010      	b.n	8005a6a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10b      	bne.n	8005a68 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a50:	2300      	movs	r3, #0
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	e000      	b.n	8005a6a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005a68:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3730      	adds	r7, #48	; 0x30
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b084      	sub	sp, #16
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	60f8      	str	r0, [r7, #12]
 8005a8e:	60b9      	str	r1, [r7, #8]
 8005a90:	603b      	str	r3, [r7, #0]
 8005a92:	4613      	mov	r3, r2
 8005a94:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a96:	e04c      	b.n	8005b32 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a9e:	d048      	beq.n	8005b32 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005aa0:	f7fd f9c8 	bl	8002e34 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d902      	bls.n	8005ab6 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d13d      	bne.n	8005b32 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ac4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ace:	d111      	bne.n	8005af4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ad8:	d004      	beq.n	8005ae4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae2:	d107      	bne.n	8005af4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005af2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005afc:	d10f      	bne.n	8005b1e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e00f      	b.n	8005b52 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	bf0c      	ite	eq
 8005b42:	2301      	moveq	r3, #1
 8005b44:	2300      	movne	r3, #0
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	461a      	mov	r2, r3
 8005b4a:	79fb      	ldrb	r3, [r7, #7]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d1a3      	bne.n	8005a98 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b5a:	b580      	push	{r7, lr}
 8005b5c:	b086      	sub	sp, #24
 8005b5e:	af02      	add	r7, sp, #8
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b6e:	d111      	bne.n	8005b94 <SPI_EndRxTransaction+0x3a>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b78:	d004      	beq.n	8005b84 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b82:	d107      	bne.n	8005b94 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b92:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b9c:	d12a      	bne.n	8005bf4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ba6:	d012      	beq.n	8005bce <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	2180      	movs	r1, #128	; 0x80
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f7ff ff67 	bl	8005a86 <SPI_WaitFlagStateUntilTimeout>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d02d      	beq.n	8005c1a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc2:	f043 0220 	orr.w	r2, r3, #32
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e026      	b.n	8005c1c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f7ff ff54 	bl	8005a86 <SPI_WaitFlagStateUntilTimeout>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d01a      	beq.n	8005c1a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be8:	f043 0220 	orr.w	r2, r3, #32
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e013      	b.n	8005c1c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f7ff ff41 	bl	8005a86 <SPI_WaitFlagStateUntilTimeout>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d007      	beq.n	8005c1a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0e:	f043 0220 	orr.w	r2, r3, #32
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e000      	b.n	8005c1c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c30:	4b1b      	ldr	r3, [pc, #108]	; (8005ca0 <SPI_EndRxTxTransaction+0x7c>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a1b      	ldr	r2, [pc, #108]	; (8005ca4 <SPI_EndRxTxTransaction+0x80>)
 8005c36:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3a:	0d5b      	lsrs	r3, r3, #21
 8005c3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c40:	fb02 f303 	mul.w	r3, r2, r3
 8005c44:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c4e:	d112      	bne.n	8005c76 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2200      	movs	r2, #0
 8005c58:	2180      	movs	r1, #128	; 0x80
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f7ff ff13 	bl	8005a86 <SPI_WaitFlagStateUntilTimeout>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d016      	beq.n	8005c94 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c6a:	f043 0220 	orr.w	r2, r3, #32
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e00f      	b.n	8005c96 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00a      	beq.n	8005c92 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8c:	2b80      	cmp	r3, #128	; 0x80
 8005c8e:	d0f2      	beq.n	8005c76 <SPI_EndRxTxTransaction+0x52>
 8005c90:	e000      	b.n	8005c94 <SPI_EndRxTxTransaction+0x70>
        break;
 8005c92:	bf00      	nop
  }

  return HAL_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3718      	adds	r7, #24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	20000128 	.word	0x20000128
 8005ca4:	165e9f81 	.word	0x165e9f81

08005ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e01d      	b.n	8005cf6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d106      	bne.n	8005cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7fc fe40 	bl	8002954 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4610      	mov	r0, r2
 8005ce8:	f000 fafc 	bl	80062e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b085      	sub	sp, #20
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2202      	movs	r2, #2
 8005d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2b06      	cmp	r3, #6
 8005d1e:	d007      	beq.n	8005d30 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0201 	orr.w	r2, r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b082      	sub	sp, #8
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e01d      	b.n	8005d94 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d106      	bne.n	8005d72 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f815 	bl	8005d9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2202      	movs	r2, #2
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	3304      	adds	r3, #4
 8005d82:	4619      	mov	r1, r3
 8005d84:	4610      	mov	r0, r2
 8005d86:	f000 faad 	bl	80062e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	6839      	ldr	r1, [r7, #0]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 fea2 	bl	8006b0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a15      	ldr	r2, [pc, #84]	; (8005e24 <HAL_TIM_PWM_Start+0x74>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d004      	beq.n	8005ddc <HAL_TIM_PWM_Start+0x2c>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a14      	ldr	r2, [pc, #80]	; (8005e28 <HAL_TIM_PWM_Start+0x78>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d101      	bne.n	8005de0 <HAL_TIM_PWM_Start+0x30>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e000      	b.n	8005de2 <HAL_TIM_PWM_Start+0x32>
 8005de0:	2300      	movs	r3, #0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d007      	beq.n	8005df6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005df4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2b06      	cmp	r3, #6
 8005e06:	d007      	beq.n	8005e18 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0201 	orr.w	r2, r2, #1
 8005e16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	40010000 	.word	0x40010000
 8005e28:	40010400 	.word	0x40010400

08005e2c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e01d      	b.n	8005e7a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d106      	bne.n	8005e58 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f815 	bl	8005e82 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3304      	adds	r3, #4
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	f000 fa3a 	bl	80062e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b083      	sub	sp, #12
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005e8a:	bf00      	nop
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	60f8      	str	r0, [r7, #12]
 8005e9e:	60b9      	str	r1, [r7, #8]
 8005ea0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d101      	bne.n	8005eb0 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005eac:	2302      	movs	r3, #2
 8005eae:	e08a      	b.n	8005fc6 <HAL_TIM_IC_ConfigChannel+0x130>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d11b      	bne.n	8005efe <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6818      	ldr	r0, [r3, #0]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	6819      	ldr	r1, [r3, #0]
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f000 fc55 	bl	8006784 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	699a      	ldr	r2, [r3, #24]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 020c 	bic.w	r2, r2, #12
 8005ee8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6999      	ldr	r1, [r3, #24]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	619a      	str	r2, [r3, #24]
 8005efc:	e05a      	b.n	8005fb4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2b04      	cmp	r3, #4
 8005f02:	d11c      	bne.n	8005f3e <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6818      	ldr	r0, [r3, #0]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	6819      	ldr	r1, [r3, #0]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f000 fcd9 	bl	80068ca <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699a      	ldr	r2, [r3, #24]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005f26:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6999      	ldr	r1, [r3, #24]
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	021a      	lsls	r2, r3, #8
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	619a      	str	r2, [r3, #24]
 8005f3c:	e03a      	b.n	8005fb4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b08      	cmp	r3, #8
 8005f42:	d11b      	bne.n	8005f7c <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6818      	ldr	r0, [r3, #0]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	6819      	ldr	r1, [r3, #0]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f000 fd26 	bl	80069a4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	69da      	ldr	r2, [r3, #28]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 020c 	bic.w	r2, r2, #12
 8005f66:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	69d9      	ldr	r1, [r3, #28]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	61da      	str	r2, [r3, #28]
 8005f7a:	e01b      	b.n	8005fb4 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6818      	ldr	r0, [r3, #0]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	6819      	ldr	r1, [r3, #0]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f000 fd46 	bl	8006a1c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	69da      	ldr	r2, [r3, #28]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005f9e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	69d9      	ldr	r1, [r3, #28]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	021a      	lsls	r2, r3, #8
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d101      	bne.n	8005fea <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	e0b4      	b.n	8006154 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b0c      	cmp	r3, #12
 8005ffe:	f200 809f 	bhi.w	8006140 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006002:	a201      	add	r2, pc, #4	; (adr r2, 8006008 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006008:	0800603d 	.word	0x0800603d
 800600c:	08006141 	.word	0x08006141
 8006010:	08006141 	.word	0x08006141
 8006014:	08006141 	.word	0x08006141
 8006018:	0800607d 	.word	0x0800607d
 800601c:	08006141 	.word	0x08006141
 8006020:	08006141 	.word	0x08006141
 8006024:	08006141 	.word	0x08006141
 8006028:	080060bf 	.word	0x080060bf
 800602c:	08006141 	.word	0x08006141
 8006030:	08006141 	.word	0x08006141
 8006034:	08006141 	.word	0x08006141
 8006038:	080060ff 	.word	0x080060ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68b9      	ldr	r1, [r7, #8]
 8006042:	4618      	mov	r0, r3
 8006044:	f000 f9ee 	bl	8006424 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	699a      	ldr	r2, [r3, #24]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f042 0208 	orr.w	r2, r2, #8
 8006056:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	699a      	ldr	r2, [r3, #24]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0204 	bic.w	r2, r2, #4
 8006066:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6999      	ldr	r1, [r3, #24]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	691a      	ldr	r2, [r3, #16]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	619a      	str	r2, [r3, #24]
      break;
 800607a:	e062      	b.n	8006142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68b9      	ldr	r1, [r7, #8]
 8006082:	4618      	mov	r0, r3
 8006084:	f000 fa3e 	bl	8006504 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	699a      	ldr	r2, [r3, #24]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006096:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699a      	ldr	r2, [r3, #24]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6999      	ldr	r1, [r3, #24]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	021a      	lsls	r2, r3, #8
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	430a      	orrs	r2, r1
 80060ba:	619a      	str	r2, [r3, #24]
      break;
 80060bc:	e041      	b.n	8006142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68b9      	ldr	r1, [r7, #8]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 fa93 	bl	80065f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	69da      	ldr	r2, [r3, #28]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f042 0208 	orr.w	r2, r2, #8
 80060d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69da      	ldr	r2, [r3, #28]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0204 	bic.w	r2, r2, #4
 80060e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	69d9      	ldr	r1, [r3, #28]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	691a      	ldr	r2, [r3, #16]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	61da      	str	r2, [r3, #28]
      break;
 80060fc:	e021      	b.n	8006142 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68b9      	ldr	r1, [r7, #8]
 8006104:	4618      	mov	r0, r3
 8006106:	f000 fae7 	bl	80066d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	69da      	ldr	r2, [r3, #28]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006118:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69da      	ldr	r2, [r3, #28]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006128:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69d9      	ldr	r1, [r3, #28]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	021a      	lsls	r2, r3, #8
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	61da      	str	r2, [r3, #28]
      break;
 800613e:	e000      	b.n	8006142 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006140:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800616c:	2b01      	cmp	r3, #1
 800616e:	d101      	bne.n	8006174 <HAL_TIM_ConfigClockSource+0x18>
 8006170:	2302      	movs	r3, #2
 8006172:	e0b3      	b.n	80062dc <HAL_TIM_ConfigClockSource+0x180>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2202      	movs	r2, #2
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006192:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800619a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061ac:	d03e      	beq.n	800622c <HAL_TIM_ConfigClockSource+0xd0>
 80061ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061b2:	f200 8087 	bhi.w	80062c4 <HAL_TIM_ConfigClockSource+0x168>
 80061b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ba:	f000 8085 	beq.w	80062c8 <HAL_TIM_ConfigClockSource+0x16c>
 80061be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c2:	d87f      	bhi.n	80062c4 <HAL_TIM_ConfigClockSource+0x168>
 80061c4:	2b70      	cmp	r3, #112	; 0x70
 80061c6:	d01a      	beq.n	80061fe <HAL_TIM_ConfigClockSource+0xa2>
 80061c8:	2b70      	cmp	r3, #112	; 0x70
 80061ca:	d87b      	bhi.n	80062c4 <HAL_TIM_ConfigClockSource+0x168>
 80061cc:	2b60      	cmp	r3, #96	; 0x60
 80061ce:	d050      	beq.n	8006272 <HAL_TIM_ConfigClockSource+0x116>
 80061d0:	2b60      	cmp	r3, #96	; 0x60
 80061d2:	d877      	bhi.n	80062c4 <HAL_TIM_ConfigClockSource+0x168>
 80061d4:	2b50      	cmp	r3, #80	; 0x50
 80061d6:	d03c      	beq.n	8006252 <HAL_TIM_ConfigClockSource+0xf6>
 80061d8:	2b50      	cmp	r3, #80	; 0x50
 80061da:	d873      	bhi.n	80062c4 <HAL_TIM_ConfigClockSource+0x168>
 80061dc:	2b40      	cmp	r3, #64	; 0x40
 80061de:	d058      	beq.n	8006292 <HAL_TIM_ConfigClockSource+0x136>
 80061e0:	2b40      	cmp	r3, #64	; 0x40
 80061e2:	d86f      	bhi.n	80062c4 <HAL_TIM_ConfigClockSource+0x168>
 80061e4:	2b30      	cmp	r3, #48	; 0x30
 80061e6:	d064      	beq.n	80062b2 <HAL_TIM_ConfigClockSource+0x156>
 80061e8:	2b30      	cmp	r3, #48	; 0x30
 80061ea:	d86b      	bhi.n	80062c4 <HAL_TIM_ConfigClockSource+0x168>
 80061ec:	2b20      	cmp	r3, #32
 80061ee:	d060      	beq.n	80062b2 <HAL_TIM_ConfigClockSource+0x156>
 80061f0:	2b20      	cmp	r3, #32
 80061f2:	d867      	bhi.n	80062c4 <HAL_TIM_ConfigClockSource+0x168>
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d05c      	beq.n	80062b2 <HAL_TIM_ConfigClockSource+0x156>
 80061f8:	2b10      	cmp	r3, #16
 80061fa:	d05a      	beq.n	80062b2 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80061fc:	e062      	b.n	80062c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6818      	ldr	r0, [r3, #0]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	6899      	ldr	r1, [r3, #8]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f000 fc5d 	bl	8006acc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006220:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	609a      	str	r2, [r3, #8]
      break;
 800622a:	e04e      	b.n	80062ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6818      	ldr	r0, [r3, #0]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	6899      	ldr	r1, [r3, #8]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	f000 fc46 	bl	8006acc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689a      	ldr	r2, [r3, #8]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800624e:	609a      	str	r2, [r3, #8]
      break;
 8006250:	e03b      	b.n	80062ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6818      	ldr	r0, [r3, #0]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	6859      	ldr	r1, [r3, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	461a      	mov	r2, r3
 8006260:	f000 fb04 	bl	800686c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2150      	movs	r1, #80	; 0x50
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fc13 	bl	8006a96 <TIM_ITRx_SetConfig>
      break;
 8006270:	e02b      	b.n	80062ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6818      	ldr	r0, [r3, #0]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	6859      	ldr	r1, [r3, #4]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	461a      	mov	r2, r3
 8006280:	f000 fb60 	bl	8006944 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2160      	movs	r1, #96	; 0x60
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fc03 	bl	8006a96 <TIM_ITRx_SetConfig>
      break;
 8006290:	e01b      	b.n	80062ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	6859      	ldr	r1, [r3, #4]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	461a      	mov	r2, r3
 80062a0:	f000 fae4 	bl	800686c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2140      	movs	r1, #64	; 0x40
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 fbf3 	bl	8006a96 <TIM_ITRx_SetConfig>
      break;
 80062b0:	e00b      	b.n	80062ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4619      	mov	r1, r3
 80062bc:	4610      	mov	r0, r2
 80062be:	f000 fbea 	bl	8006a96 <TIM_ITRx_SetConfig>
      break;
 80062c2:	e002      	b.n	80062ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80062c4:	bf00      	nop
 80062c6:	e000      	b.n	80062ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80062c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a40      	ldr	r2, [pc, #256]	; (80063f8 <TIM_Base_SetConfig+0x114>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d013      	beq.n	8006324 <TIM_Base_SetConfig+0x40>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006302:	d00f      	beq.n	8006324 <TIM_Base_SetConfig+0x40>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a3d      	ldr	r2, [pc, #244]	; (80063fc <TIM_Base_SetConfig+0x118>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d00b      	beq.n	8006324 <TIM_Base_SetConfig+0x40>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a3c      	ldr	r2, [pc, #240]	; (8006400 <TIM_Base_SetConfig+0x11c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d007      	beq.n	8006324 <TIM_Base_SetConfig+0x40>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a3b      	ldr	r2, [pc, #236]	; (8006404 <TIM_Base_SetConfig+0x120>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d003      	beq.n	8006324 <TIM_Base_SetConfig+0x40>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a3a      	ldr	r2, [pc, #232]	; (8006408 <TIM_Base_SetConfig+0x124>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d108      	bne.n	8006336 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	4313      	orrs	r3, r2
 8006334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a2f      	ldr	r2, [pc, #188]	; (80063f8 <TIM_Base_SetConfig+0x114>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d02b      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006344:	d027      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a2c      	ldr	r2, [pc, #176]	; (80063fc <TIM_Base_SetConfig+0x118>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d023      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a2b      	ldr	r2, [pc, #172]	; (8006400 <TIM_Base_SetConfig+0x11c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d01f      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a2a      	ldr	r2, [pc, #168]	; (8006404 <TIM_Base_SetConfig+0x120>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d01b      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a29      	ldr	r2, [pc, #164]	; (8006408 <TIM_Base_SetConfig+0x124>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d017      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a28      	ldr	r2, [pc, #160]	; (800640c <TIM_Base_SetConfig+0x128>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d013      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a27      	ldr	r2, [pc, #156]	; (8006410 <TIM_Base_SetConfig+0x12c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d00f      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a26      	ldr	r2, [pc, #152]	; (8006414 <TIM_Base_SetConfig+0x130>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d00b      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a25      	ldr	r2, [pc, #148]	; (8006418 <TIM_Base_SetConfig+0x134>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d007      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a24      	ldr	r2, [pc, #144]	; (800641c <TIM_Base_SetConfig+0x138>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d003      	beq.n	8006396 <TIM_Base_SetConfig+0xb2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a23      	ldr	r2, [pc, #140]	; (8006420 <TIM_Base_SetConfig+0x13c>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d108      	bne.n	80063a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800639c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a0a      	ldr	r2, [pc, #40]	; (80063f8 <TIM_Base_SetConfig+0x114>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d003      	beq.n	80063dc <TIM_Base_SetConfig+0xf8>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a0c      	ldr	r2, [pc, #48]	; (8006408 <TIM_Base_SetConfig+0x124>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d103      	bne.n	80063e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	691a      	ldr	r2, [r3, #16]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	615a      	str	r2, [r3, #20]
}
 80063ea:	bf00      	nop
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	40010000 	.word	0x40010000
 80063fc:	40000400 	.word	0x40000400
 8006400:	40000800 	.word	0x40000800
 8006404:	40000c00 	.word	0x40000c00
 8006408:	40010400 	.word	0x40010400
 800640c:	40014000 	.word	0x40014000
 8006410:	40014400 	.word	0x40014400
 8006414:	40014800 	.word	0x40014800
 8006418:	40001800 	.word	0x40001800
 800641c:	40001c00 	.word	0x40001c00
 8006420:	40002000 	.word	0x40002000

08006424 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	f023 0201 	bic.w	r2, r3, #1
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 0303 	bic.w	r3, r3, #3
 800645a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f023 0302 	bic.w	r3, r3, #2
 800646c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	4313      	orrs	r3, r2
 8006476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a20      	ldr	r2, [pc, #128]	; (80064fc <TIM_OC1_SetConfig+0xd8>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d003      	beq.n	8006488 <TIM_OC1_SetConfig+0x64>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a1f      	ldr	r2, [pc, #124]	; (8006500 <TIM_OC1_SetConfig+0xdc>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d10c      	bne.n	80064a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f023 0308 	bic.w	r3, r3, #8
 800648e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	4313      	orrs	r3, r2
 8006498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f023 0304 	bic.w	r3, r3, #4
 80064a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a15      	ldr	r2, [pc, #84]	; (80064fc <TIM_OC1_SetConfig+0xd8>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d003      	beq.n	80064b2 <TIM_OC1_SetConfig+0x8e>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a14      	ldr	r2, [pc, #80]	; (8006500 <TIM_OC1_SetConfig+0xdc>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d111      	bne.n	80064d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	621a      	str	r2, [r3, #32]
}
 80064f0:	bf00      	nop
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	40010000 	.word	0x40010000
 8006500:	40010400 	.word	0x40010400

08006504 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006504:	b480      	push	{r7}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	f023 0210 	bic.w	r2, r3, #16
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800653a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	021b      	lsls	r3, r3, #8
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	4313      	orrs	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f023 0320 	bic.w	r3, r3, #32
 800654e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	011b      	lsls	r3, r3, #4
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	4313      	orrs	r3, r2
 800655a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a22      	ldr	r2, [pc, #136]	; (80065e8 <TIM_OC2_SetConfig+0xe4>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d003      	beq.n	800656c <TIM_OC2_SetConfig+0x68>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a21      	ldr	r2, [pc, #132]	; (80065ec <TIM_OC2_SetConfig+0xe8>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d10d      	bne.n	8006588 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	011b      	lsls	r3, r3, #4
 800657a:	697a      	ldr	r2, [r7, #20]
 800657c:	4313      	orrs	r3, r2
 800657e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006586:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a17      	ldr	r2, [pc, #92]	; (80065e8 <TIM_OC2_SetConfig+0xe4>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d003      	beq.n	8006598 <TIM_OC2_SetConfig+0x94>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a16      	ldr	r2, [pc, #88]	; (80065ec <TIM_OC2_SetConfig+0xe8>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d113      	bne.n	80065c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800659e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	4313      	orrs	r3, r2
 80065be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	621a      	str	r2, [r3, #32]
}
 80065da:	bf00      	nop
 80065dc:	371c      	adds	r7, #28
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	40010000 	.word	0x40010000
 80065ec:	40010400 	.word	0x40010400

080065f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f023 0303 	bic.w	r3, r3, #3
 8006626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	4313      	orrs	r3, r2
 8006630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	021b      	lsls	r3, r3, #8
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	4313      	orrs	r3, r2
 8006644:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a21      	ldr	r2, [pc, #132]	; (80066d0 <TIM_OC3_SetConfig+0xe0>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d003      	beq.n	8006656 <TIM_OC3_SetConfig+0x66>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a20      	ldr	r2, [pc, #128]	; (80066d4 <TIM_OC3_SetConfig+0xe4>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d10d      	bne.n	8006672 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800665c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	021b      	lsls	r3, r3, #8
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	4313      	orrs	r3, r2
 8006668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a16      	ldr	r2, [pc, #88]	; (80066d0 <TIM_OC3_SetConfig+0xe0>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d003      	beq.n	8006682 <TIM_OC3_SetConfig+0x92>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a15      	ldr	r2, [pc, #84]	; (80066d4 <TIM_OC3_SetConfig+0xe4>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d113      	bne.n	80066aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006688:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006690:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	011b      	lsls	r3, r3, #4
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	4313      	orrs	r3, r2
 800669c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	011b      	lsls	r3, r3, #4
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	621a      	str	r2, [r3, #32]
}
 80066c4:	bf00      	nop
 80066c6:	371c      	adds	r7, #28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	40010000 	.word	0x40010000
 80066d4:	40010400 	.word	0x40010400

080066d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800670e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	021b      	lsls	r3, r3, #8
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	4313      	orrs	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006722:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	031b      	lsls	r3, r3, #12
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	4313      	orrs	r3, r2
 800672e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a12      	ldr	r2, [pc, #72]	; (800677c <TIM_OC4_SetConfig+0xa4>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d003      	beq.n	8006740 <TIM_OC4_SetConfig+0x68>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a11      	ldr	r2, [pc, #68]	; (8006780 <TIM_OC4_SetConfig+0xa8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d109      	bne.n	8006754 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006746:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	019b      	lsls	r3, r3, #6
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	4313      	orrs	r3, r2
 8006752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	621a      	str	r2, [r3, #32]
}
 800676e:	bf00      	nop
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	40010000 	.word	0x40010000
 8006780:	40010400 	.word	0x40010400

08006784 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
 8006790:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	f023 0201 	bic.w	r2, r3, #1
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4a28      	ldr	r2, [pc, #160]	; (8006850 <TIM_TI1_SetConfig+0xcc>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d01b      	beq.n	80067ea <TIM_TI1_SetConfig+0x66>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b8:	d017      	beq.n	80067ea <TIM_TI1_SetConfig+0x66>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	4a25      	ldr	r2, [pc, #148]	; (8006854 <TIM_TI1_SetConfig+0xd0>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d013      	beq.n	80067ea <TIM_TI1_SetConfig+0x66>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	4a24      	ldr	r2, [pc, #144]	; (8006858 <TIM_TI1_SetConfig+0xd4>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d00f      	beq.n	80067ea <TIM_TI1_SetConfig+0x66>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	4a23      	ldr	r2, [pc, #140]	; (800685c <TIM_TI1_SetConfig+0xd8>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d00b      	beq.n	80067ea <TIM_TI1_SetConfig+0x66>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	4a22      	ldr	r2, [pc, #136]	; (8006860 <TIM_TI1_SetConfig+0xdc>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d007      	beq.n	80067ea <TIM_TI1_SetConfig+0x66>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4a21      	ldr	r2, [pc, #132]	; (8006864 <TIM_TI1_SetConfig+0xe0>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d003      	beq.n	80067ea <TIM_TI1_SetConfig+0x66>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	4a20      	ldr	r2, [pc, #128]	; (8006868 <TIM_TI1_SetConfig+0xe4>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d101      	bne.n	80067ee <TIM_TI1_SetConfig+0x6a>
 80067ea:	2301      	movs	r3, #1
 80067ec:	e000      	b.n	80067f0 <TIM_TI1_SetConfig+0x6c>
 80067ee:	2300      	movs	r3, #0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d008      	beq.n	8006806 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f023 0303 	bic.w	r3, r3, #3
 80067fa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4313      	orrs	r3, r2
 8006802:	617b      	str	r3, [r7, #20]
 8006804:	e003      	b.n	800680e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f043 0301 	orr.w	r3, r3, #1
 800680c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006814:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	011b      	lsls	r3, r3, #4
 800681a:	b2db      	uxtb	r3, r3
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	4313      	orrs	r3, r2
 8006820:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f023 030a 	bic.w	r3, r3, #10
 8006828:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f003 030a 	and.w	r3, r3, #10
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	4313      	orrs	r3, r2
 8006834:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	621a      	str	r2, [r3, #32]
}
 8006842:	bf00      	nop
 8006844:	371c      	adds	r7, #28
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	40010000 	.word	0x40010000
 8006854:	40000400 	.word	0x40000400
 8006858:	40000800 	.word	0x40000800
 800685c:	40000c00 	.word	0x40000c00
 8006860:	40010400 	.word	0x40010400
 8006864:	40014000 	.word	0x40014000
 8006868:	40001800 	.word	0x40001800

0800686c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	f023 0201 	bic.w	r2, r3, #1
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	011b      	lsls	r3, r3, #4
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	4313      	orrs	r3, r2
 80068a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f023 030a 	bic.w	r3, r3, #10
 80068a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	621a      	str	r2, [r3, #32]
}
 80068be:	bf00      	nop
 80068c0:	371c      	adds	r7, #28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b087      	sub	sp, #28
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	60f8      	str	r0, [r7, #12]
 80068d2:	60b9      	str	r1, [r7, #8]
 80068d4:	607a      	str	r2, [r7, #4]
 80068d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	f023 0210 	bic.w	r2, r3, #16
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	021b      	lsls	r3, r3, #8
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	4313      	orrs	r3, r2
 8006900:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006908:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	031b      	lsls	r3, r3, #12
 800690e:	b29b      	uxth	r3, r3
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	4313      	orrs	r3, r2
 8006914:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800691c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	011b      	lsls	r3, r3, #4
 8006922:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	4313      	orrs	r3, r2
 800692a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	621a      	str	r2, [r3, #32]
}
 8006938:	bf00      	nop
 800693a:	371c      	adds	r7, #28
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006944:	b480      	push	{r7}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	f023 0210 	bic.w	r2, r3, #16
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800696e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	031b      	lsls	r3, r3, #12
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	4313      	orrs	r3, r2
 8006978:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006980:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	011b      	lsls	r3, r3, #4
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	4313      	orrs	r3, r2
 800698a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	621a      	str	r2, [r3, #32]
}
 8006998:	bf00      	nop
 800699a:	371c      	adds	r7, #28
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f023 0303 	bic.w	r3, r3, #3
 80069d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	011b      	lsls	r3, r3, #4
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80069f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	021b      	lsls	r3, r3, #8
 80069fa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	621a      	str	r2, [r3, #32]
}
 8006a10:	bf00      	nop
 8006a12:	371c      	adds	r7, #28
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
 8006a28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	021b      	lsls	r3, r3, #8
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a5a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	031b      	lsls	r3, r3, #12
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006a6e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	031b      	lsls	r3, r3, #12
 8006a74:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	621a      	str	r2, [r3, #32]
}
 8006a8a:	bf00      	nop
 8006a8c:	371c      	adds	r7, #28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b085      	sub	sp, #20
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f043 0307 	orr.w	r3, r3, #7
 8006ab8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	609a      	str	r2, [r3, #8]
}
 8006ac0:	bf00      	nop
 8006ac2:	3714      	adds	r7, #20
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b087      	sub	sp, #28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
 8006ad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ae6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	021a      	lsls	r2, r3, #8
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	431a      	orrs	r2, r3
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	609a      	str	r2, [r3, #8]
}
 8006b00:	bf00      	nop
 8006b02:	371c      	adds	r7, #28
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	f003 031f 	and.w	r3, r3, #31
 8006b1e:	2201      	movs	r2, #1
 8006b20:	fa02 f303 	lsl.w	r3, r2, r3
 8006b24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6a1a      	ldr	r2, [r3, #32]
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	43db      	mvns	r3, r3
 8006b2e:	401a      	ands	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6a1a      	ldr	r2, [r3, #32]
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f003 031f 	and.w	r3, r3, #31
 8006b3e:	6879      	ldr	r1, [r7, #4]
 8006b40:	fa01 f303 	lsl.w	r3, r1, r3
 8006b44:	431a      	orrs	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	621a      	str	r2, [r3, #32]
}
 8006b4a:	bf00      	nop
 8006b4c:	371c      	adds	r7, #28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
	...

08006b58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d101      	bne.n	8006b70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	e05a      	b.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a21      	ldr	r2, [pc, #132]	; (8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d022      	beq.n	8006bfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bbc:	d01d      	beq.n	8006bfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a1d      	ldr	r2, [pc, #116]	; (8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d018      	beq.n	8006bfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a1b      	ldr	r2, [pc, #108]	; (8006c3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d013      	beq.n	8006bfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a1a      	ldr	r2, [pc, #104]	; (8006c40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d00e      	beq.n	8006bfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a18      	ldr	r2, [pc, #96]	; (8006c44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d009      	beq.n	8006bfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a17      	ldr	r2, [pc, #92]	; (8006c48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d004      	beq.n	8006bfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a15      	ldr	r2, [pc, #84]	; (8006c4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d10c      	bne.n	8006c14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	40010000 	.word	0x40010000
 8006c38:	40000400 	.word	0x40000400
 8006c3c:	40000800 	.word	0x40000800
 8006c40:	40000c00 	.word	0x40000c00
 8006c44:	40010400 	.word	0x40010400
 8006c48:	40014000 	.word	0x40014000
 8006c4c:	40001800 	.word	0x40001800

08006c50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d101      	bne.n	8006c6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c68:	2302      	movs	r3, #2
 8006c6a:	e03d      	b.n	8006ce8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e03f      	b.n	8006d86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d106      	bne.n	8006d20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7fb ff56 	bl	8002bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2224      	movs	r2, #36	; 0x24
 8006d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68da      	ldr	r2, [r3, #12]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f829 	bl	8006d90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	691a      	ldr	r2, [r3, #16]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	695a      	ldr	r2, [r3, #20]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68da      	ldr	r2, [r3, #12]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2220      	movs	r2, #32
 8006d78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
	...

08006d90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d94:	b0bd      	sub	sp, #244	; 0xf4
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dac:	68d9      	ldr	r1, [r3, #12]
 8006dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	ea40 0301 	orr.w	r3, r0, r1
 8006db8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	431a      	orrs	r2, r3
 8006dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8006ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006de8:	f021 010c 	bic.w	r1, r1, #12
 8006dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006df6:	430b      	orrs	r3, r1
 8006df8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e0a:	6999      	ldr	r1, [r3, #24]
 8006e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	ea40 0301 	orr.w	r3, r0, r1
 8006e16:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e22:	f040 81a5 	bne.w	8007170 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	4bcd      	ldr	r3, [pc, #820]	; (8007164 <UART_SetConfig+0x3d4>)
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d006      	beq.n	8006e40 <UART_SetConfig+0xb0>
 8006e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	4bcb      	ldr	r3, [pc, #812]	; (8007168 <UART_SetConfig+0x3d8>)
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	f040 80cb 	bne.w	8006fd6 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e40:	f7fe fafe 	bl	8005440 <HAL_RCC_GetPCLK2Freq>
 8006e44:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e48:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e4c:	461c      	mov	r4, r3
 8006e4e:	f04f 0500 	mov.w	r5, #0
 8006e52:	4622      	mov	r2, r4
 8006e54:	462b      	mov	r3, r5
 8006e56:	1891      	adds	r1, r2, r2
 8006e58:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8006e5c:	415b      	adcs	r3, r3
 8006e5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006e62:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006e66:	1912      	adds	r2, r2, r4
 8006e68:	eb45 0303 	adc.w	r3, r5, r3
 8006e6c:	f04f 0000 	mov.w	r0, #0
 8006e70:	f04f 0100 	mov.w	r1, #0
 8006e74:	00d9      	lsls	r1, r3, #3
 8006e76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e7a:	00d0      	lsls	r0, r2, #3
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	1911      	adds	r1, r2, r4
 8006e82:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8006e86:	416b      	adcs	r3, r5
 8006e88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	461a      	mov	r2, r3
 8006e94:	f04f 0300 	mov.w	r3, #0
 8006e98:	1891      	adds	r1, r2, r2
 8006e9a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8006e9e:	415b      	adcs	r3, r3
 8006ea0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ea4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006ea8:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006eac:	f7f9 fe3e 	bl	8000b2c <__aeabi_uldivmod>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4bad      	ldr	r3, [pc, #692]	; (800716c <UART_SetConfig+0x3dc>)
 8006eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8006eba:	095b      	lsrs	r3, r3, #5
 8006ebc:	011e      	lsls	r6, r3, #4
 8006ebe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ec2:	461c      	mov	r4, r3
 8006ec4:	f04f 0500 	mov.w	r5, #0
 8006ec8:	4622      	mov	r2, r4
 8006eca:	462b      	mov	r3, r5
 8006ecc:	1891      	adds	r1, r2, r2
 8006ece:	67b9      	str	r1, [r7, #120]	; 0x78
 8006ed0:	415b      	adcs	r3, r3
 8006ed2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ed4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8006ed8:	1912      	adds	r2, r2, r4
 8006eda:	eb45 0303 	adc.w	r3, r5, r3
 8006ede:	f04f 0000 	mov.w	r0, #0
 8006ee2:	f04f 0100 	mov.w	r1, #0
 8006ee6:	00d9      	lsls	r1, r3, #3
 8006ee8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006eec:	00d0      	lsls	r0, r2, #3
 8006eee:	4602      	mov	r2, r0
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	1911      	adds	r1, r2, r4
 8006ef4:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006ef8:	416b      	adcs	r3, r5
 8006efa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	461a      	mov	r2, r3
 8006f06:	f04f 0300 	mov.w	r3, #0
 8006f0a:	1891      	adds	r1, r2, r2
 8006f0c:	6739      	str	r1, [r7, #112]	; 0x70
 8006f0e:	415b      	adcs	r3, r3
 8006f10:	677b      	str	r3, [r7, #116]	; 0x74
 8006f12:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8006f16:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8006f1a:	f7f9 fe07 	bl	8000b2c <__aeabi_uldivmod>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	4b92      	ldr	r3, [pc, #584]	; (800716c <UART_SetConfig+0x3dc>)
 8006f24:	fba3 1302 	umull	r1, r3, r3, r2
 8006f28:	095b      	lsrs	r3, r3, #5
 8006f2a:	2164      	movs	r1, #100	; 0x64
 8006f2c:	fb01 f303 	mul.w	r3, r1, r3
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	00db      	lsls	r3, r3, #3
 8006f34:	3332      	adds	r3, #50	; 0x32
 8006f36:	4a8d      	ldr	r2, [pc, #564]	; (800716c <UART_SetConfig+0x3dc>)
 8006f38:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3c:	095b      	lsrs	r3, r3, #5
 8006f3e:	005b      	lsls	r3, r3, #1
 8006f40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f44:	441e      	add	r6, r3
 8006f46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f04f 0100 	mov.w	r1, #0
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	1894      	adds	r4, r2, r2
 8006f56:	66bc      	str	r4, [r7, #104]	; 0x68
 8006f58:	415b      	adcs	r3, r3
 8006f5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f5c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006f60:	1812      	adds	r2, r2, r0
 8006f62:	eb41 0303 	adc.w	r3, r1, r3
 8006f66:	f04f 0400 	mov.w	r4, #0
 8006f6a:	f04f 0500 	mov.w	r5, #0
 8006f6e:	00dd      	lsls	r5, r3, #3
 8006f70:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f74:	00d4      	lsls	r4, r2, #3
 8006f76:	4622      	mov	r2, r4
 8006f78:	462b      	mov	r3, r5
 8006f7a:	1814      	adds	r4, r2, r0
 8006f7c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8006f80:	414b      	adcs	r3, r1
 8006f82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	f04f 0300 	mov.w	r3, #0
 8006f92:	1891      	adds	r1, r2, r2
 8006f94:	6639      	str	r1, [r7, #96]	; 0x60
 8006f96:	415b      	adcs	r3, r3
 8006f98:	667b      	str	r3, [r7, #100]	; 0x64
 8006f9a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8006f9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006fa2:	f7f9 fdc3 	bl	8000b2c <__aeabi_uldivmod>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4b70      	ldr	r3, [pc, #448]	; (800716c <UART_SetConfig+0x3dc>)
 8006fac:	fba3 1302 	umull	r1, r3, r3, r2
 8006fb0:	095b      	lsrs	r3, r3, #5
 8006fb2:	2164      	movs	r1, #100	; 0x64
 8006fb4:	fb01 f303 	mul.w	r3, r1, r3
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	00db      	lsls	r3, r3, #3
 8006fbc:	3332      	adds	r3, #50	; 0x32
 8006fbe:	4a6b      	ldr	r2, [pc, #428]	; (800716c <UART_SetConfig+0x3dc>)
 8006fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc4:	095b      	lsrs	r3, r3, #5
 8006fc6:	f003 0207 	and.w	r2, r3, #7
 8006fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4432      	add	r2, r6
 8006fd2:	609a      	str	r2, [r3, #8]
 8006fd4:	e26d      	b.n	80074b2 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006fd6:	f7fe fa1f 	bl	8005418 <HAL_RCC_GetPCLK1Freq>
 8006fda:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006fde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fe2:	461c      	mov	r4, r3
 8006fe4:	f04f 0500 	mov.w	r5, #0
 8006fe8:	4622      	mov	r2, r4
 8006fea:	462b      	mov	r3, r5
 8006fec:	1891      	adds	r1, r2, r2
 8006fee:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ff0:	415b      	adcs	r3, r3
 8006ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ff4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006ff8:	1912      	adds	r2, r2, r4
 8006ffa:	eb45 0303 	adc.w	r3, r5, r3
 8006ffe:	f04f 0000 	mov.w	r0, #0
 8007002:	f04f 0100 	mov.w	r1, #0
 8007006:	00d9      	lsls	r1, r3, #3
 8007008:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800700c:	00d0      	lsls	r0, r2, #3
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	1911      	adds	r1, r2, r4
 8007014:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8007018:	416b      	adcs	r3, r5
 800701a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800701e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	461a      	mov	r2, r3
 8007026:	f04f 0300 	mov.w	r3, #0
 800702a:	1891      	adds	r1, r2, r2
 800702c:	6539      	str	r1, [r7, #80]	; 0x50
 800702e:	415b      	adcs	r3, r3
 8007030:	657b      	str	r3, [r7, #84]	; 0x54
 8007032:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007036:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800703a:	f7f9 fd77 	bl	8000b2c <__aeabi_uldivmod>
 800703e:	4602      	mov	r2, r0
 8007040:	460b      	mov	r3, r1
 8007042:	4b4a      	ldr	r3, [pc, #296]	; (800716c <UART_SetConfig+0x3dc>)
 8007044:	fba3 2302 	umull	r2, r3, r3, r2
 8007048:	095b      	lsrs	r3, r3, #5
 800704a:	011e      	lsls	r6, r3, #4
 800704c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007050:	461c      	mov	r4, r3
 8007052:	f04f 0500 	mov.w	r5, #0
 8007056:	4622      	mov	r2, r4
 8007058:	462b      	mov	r3, r5
 800705a:	1891      	adds	r1, r2, r2
 800705c:	64b9      	str	r1, [r7, #72]	; 0x48
 800705e:	415b      	adcs	r3, r3
 8007060:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007062:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007066:	1912      	adds	r2, r2, r4
 8007068:	eb45 0303 	adc.w	r3, r5, r3
 800706c:	f04f 0000 	mov.w	r0, #0
 8007070:	f04f 0100 	mov.w	r1, #0
 8007074:	00d9      	lsls	r1, r3, #3
 8007076:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800707a:	00d0      	lsls	r0, r2, #3
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	1911      	adds	r1, r2, r4
 8007082:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8007086:	416b      	adcs	r3, r5
 8007088:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800708c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	461a      	mov	r2, r3
 8007094:	f04f 0300 	mov.w	r3, #0
 8007098:	1891      	adds	r1, r2, r2
 800709a:	6439      	str	r1, [r7, #64]	; 0x40
 800709c:	415b      	adcs	r3, r3
 800709e:	647b      	str	r3, [r7, #68]	; 0x44
 80070a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80070a4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80070a8:	f7f9 fd40 	bl	8000b2c <__aeabi_uldivmod>
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	4b2e      	ldr	r3, [pc, #184]	; (800716c <UART_SetConfig+0x3dc>)
 80070b2:	fba3 1302 	umull	r1, r3, r3, r2
 80070b6:	095b      	lsrs	r3, r3, #5
 80070b8:	2164      	movs	r1, #100	; 0x64
 80070ba:	fb01 f303 	mul.w	r3, r1, r3
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	00db      	lsls	r3, r3, #3
 80070c2:	3332      	adds	r3, #50	; 0x32
 80070c4:	4a29      	ldr	r2, [pc, #164]	; (800716c <UART_SetConfig+0x3dc>)
 80070c6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ca:	095b      	lsrs	r3, r3, #5
 80070cc:	005b      	lsls	r3, r3, #1
 80070ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070d2:	441e      	add	r6, r3
 80070d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80070d8:	4618      	mov	r0, r3
 80070da:	f04f 0100 	mov.w	r1, #0
 80070de:	4602      	mov	r2, r0
 80070e0:	460b      	mov	r3, r1
 80070e2:	1894      	adds	r4, r2, r2
 80070e4:	63bc      	str	r4, [r7, #56]	; 0x38
 80070e6:	415b      	adcs	r3, r3
 80070e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070ea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80070ee:	1812      	adds	r2, r2, r0
 80070f0:	eb41 0303 	adc.w	r3, r1, r3
 80070f4:	f04f 0400 	mov.w	r4, #0
 80070f8:	f04f 0500 	mov.w	r5, #0
 80070fc:	00dd      	lsls	r5, r3, #3
 80070fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007102:	00d4      	lsls	r4, r2, #3
 8007104:	4622      	mov	r2, r4
 8007106:	462b      	mov	r3, r5
 8007108:	1814      	adds	r4, r2, r0
 800710a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800710e:	414b      	adcs	r3, r1
 8007110:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	461a      	mov	r2, r3
 800711c:	f04f 0300 	mov.w	r3, #0
 8007120:	1891      	adds	r1, r2, r2
 8007122:	6339      	str	r1, [r7, #48]	; 0x30
 8007124:	415b      	adcs	r3, r3
 8007126:	637b      	str	r3, [r7, #52]	; 0x34
 8007128:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800712c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007130:	f7f9 fcfc 	bl	8000b2c <__aeabi_uldivmod>
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	4b0c      	ldr	r3, [pc, #48]	; (800716c <UART_SetConfig+0x3dc>)
 800713a:	fba3 1302 	umull	r1, r3, r3, r2
 800713e:	095b      	lsrs	r3, r3, #5
 8007140:	2164      	movs	r1, #100	; 0x64
 8007142:	fb01 f303 	mul.w	r3, r1, r3
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	00db      	lsls	r3, r3, #3
 800714a:	3332      	adds	r3, #50	; 0x32
 800714c:	4a07      	ldr	r2, [pc, #28]	; (800716c <UART_SetConfig+0x3dc>)
 800714e:	fba2 2303 	umull	r2, r3, r2, r3
 8007152:	095b      	lsrs	r3, r3, #5
 8007154:	f003 0207 	and.w	r2, r3, #7
 8007158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4432      	add	r2, r6
 8007160:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007162:	e1a6      	b.n	80074b2 <UART_SetConfig+0x722>
 8007164:	40011000 	.word	0x40011000
 8007168:	40011400 	.word	0x40011400
 800716c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	4bd1      	ldr	r3, [pc, #836]	; (80074bc <UART_SetConfig+0x72c>)
 8007178:	429a      	cmp	r2, r3
 800717a:	d006      	beq.n	800718a <UART_SetConfig+0x3fa>
 800717c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	4bcf      	ldr	r3, [pc, #828]	; (80074c0 <UART_SetConfig+0x730>)
 8007184:	429a      	cmp	r2, r3
 8007186:	f040 80ca 	bne.w	800731e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800718a:	f7fe f959 	bl	8005440 <HAL_RCC_GetPCLK2Freq>
 800718e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007192:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007196:	461c      	mov	r4, r3
 8007198:	f04f 0500 	mov.w	r5, #0
 800719c:	4622      	mov	r2, r4
 800719e:	462b      	mov	r3, r5
 80071a0:	1891      	adds	r1, r2, r2
 80071a2:	62b9      	str	r1, [r7, #40]	; 0x28
 80071a4:	415b      	adcs	r3, r3
 80071a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80071ac:	1912      	adds	r2, r2, r4
 80071ae:	eb45 0303 	adc.w	r3, r5, r3
 80071b2:	f04f 0000 	mov.w	r0, #0
 80071b6:	f04f 0100 	mov.w	r1, #0
 80071ba:	00d9      	lsls	r1, r3, #3
 80071bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071c0:	00d0      	lsls	r0, r2, #3
 80071c2:	4602      	mov	r2, r0
 80071c4:	460b      	mov	r3, r1
 80071c6:	eb12 0a04 	adds.w	sl, r2, r4
 80071ca:	eb43 0b05 	adc.w	fp, r3, r5
 80071ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f04f 0100 	mov.w	r1, #0
 80071da:	f04f 0200 	mov.w	r2, #0
 80071de:	f04f 0300 	mov.w	r3, #0
 80071e2:	008b      	lsls	r3, r1, #2
 80071e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80071e8:	0082      	lsls	r2, r0, #2
 80071ea:	4650      	mov	r0, sl
 80071ec:	4659      	mov	r1, fp
 80071ee:	f7f9 fc9d 	bl	8000b2c <__aeabi_uldivmod>
 80071f2:	4602      	mov	r2, r0
 80071f4:	460b      	mov	r3, r1
 80071f6:	4bb3      	ldr	r3, [pc, #716]	; (80074c4 <UART_SetConfig+0x734>)
 80071f8:	fba3 2302 	umull	r2, r3, r3, r2
 80071fc:	095b      	lsrs	r3, r3, #5
 80071fe:	011e      	lsls	r6, r3, #4
 8007200:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007204:	4618      	mov	r0, r3
 8007206:	f04f 0100 	mov.w	r1, #0
 800720a:	4602      	mov	r2, r0
 800720c:	460b      	mov	r3, r1
 800720e:	1894      	adds	r4, r2, r2
 8007210:	623c      	str	r4, [r7, #32]
 8007212:	415b      	adcs	r3, r3
 8007214:	627b      	str	r3, [r7, #36]	; 0x24
 8007216:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800721a:	1812      	adds	r2, r2, r0
 800721c:	eb41 0303 	adc.w	r3, r1, r3
 8007220:	f04f 0400 	mov.w	r4, #0
 8007224:	f04f 0500 	mov.w	r5, #0
 8007228:	00dd      	lsls	r5, r3, #3
 800722a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800722e:	00d4      	lsls	r4, r2, #3
 8007230:	4622      	mov	r2, r4
 8007232:	462b      	mov	r3, r5
 8007234:	1814      	adds	r4, r2, r0
 8007236:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800723a:	414b      	adcs	r3, r1
 800723c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	4618      	mov	r0, r3
 8007248:	f04f 0100 	mov.w	r1, #0
 800724c:	f04f 0200 	mov.w	r2, #0
 8007250:	f04f 0300 	mov.w	r3, #0
 8007254:	008b      	lsls	r3, r1, #2
 8007256:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800725a:	0082      	lsls	r2, r0, #2
 800725c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007260:	f7f9 fc64 	bl	8000b2c <__aeabi_uldivmod>
 8007264:	4602      	mov	r2, r0
 8007266:	460b      	mov	r3, r1
 8007268:	4b96      	ldr	r3, [pc, #600]	; (80074c4 <UART_SetConfig+0x734>)
 800726a:	fba3 1302 	umull	r1, r3, r3, r2
 800726e:	095b      	lsrs	r3, r3, #5
 8007270:	2164      	movs	r1, #100	; 0x64
 8007272:	fb01 f303 	mul.w	r3, r1, r3
 8007276:	1ad3      	subs	r3, r2, r3
 8007278:	011b      	lsls	r3, r3, #4
 800727a:	3332      	adds	r3, #50	; 0x32
 800727c:	4a91      	ldr	r2, [pc, #580]	; (80074c4 <UART_SetConfig+0x734>)
 800727e:	fba2 2303 	umull	r2, r3, r2, r3
 8007282:	095b      	lsrs	r3, r3, #5
 8007284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007288:	441e      	add	r6, r3
 800728a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800728e:	4618      	mov	r0, r3
 8007290:	f04f 0100 	mov.w	r1, #0
 8007294:	4602      	mov	r2, r0
 8007296:	460b      	mov	r3, r1
 8007298:	1894      	adds	r4, r2, r2
 800729a:	61bc      	str	r4, [r7, #24]
 800729c:	415b      	adcs	r3, r3
 800729e:	61fb      	str	r3, [r7, #28]
 80072a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072a4:	1812      	adds	r2, r2, r0
 80072a6:	eb41 0303 	adc.w	r3, r1, r3
 80072aa:	f04f 0400 	mov.w	r4, #0
 80072ae:	f04f 0500 	mov.w	r5, #0
 80072b2:	00dd      	lsls	r5, r3, #3
 80072b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80072b8:	00d4      	lsls	r4, r2, #3
 80072ba:	4622      	mov	r2, r4
 80072bc:	462b      	mov	r3, r5
 80072be:	1814      	adds	r4, r2, r0
 80072c0:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80072c4:	414b      	adcs	r3, r1
 80072c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80072ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f04f 0100 	mov.w	r1, #0
 80072d6:	f04f 0200 	mov.w	r2, #0
 80072da:	f04f 0300 	mov.w	r3, #0
 80072de:	008b      	lsls	r3, r1, #2
 80072e0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80072e4:	0082      	lsls	r2, r0, #2
 80072e6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80072ea:	f7f9 fc1f 	bl	8000b2c <__aeabi_uldivmod>
 80072ee:	4602      	mov	r2, r0
 80072f0:	460b      	mov	r3, r1
 80072f2:	4b74      	ldr	r3, [pc, #464]	; (80074c4 <UART_SetConfig+0x734>)
 80072f4:	fba3 1302 	umull	r1, r3, r3, r2
 80072f8:	095b      	lsrs	r3, r3, #5
 80072fa:	2164      	movs	r1, #100	; 0x64
 80072fc:	fb01 f303 	mul.w	r3, r1, r3
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	3332      	adds	r3, #50	; 0x32
 8007306:	4a6f      	ldr	r2, [pc, #444]	; (80074c4 <UART_SetConfig+0x734>)
 8007308:	fba2 2303 	umull	r2, r3, r2, r3
 800730c:	095b      	lsrs	r3, r3, #5
 800730e:	f003 020f 	and.w	r2, r3, #15
 8007312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4432      	add	r2, r6
 800731a:	609a      	str	r2, [r3, #8]
 800731c:	e0c9      	b.n	80074b2 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800731e:	f7fe f87b 	bl	8005418 <HAL_RCC_GetPCLK1Freq>
 8007322:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007326:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800732a:	461c      	mov	r4, r3
 800732c:	f04f 0500 	mov.w	r5, #0
 8007330:	4622      	mov	r2, r4
 8007332:	462b      	mov	r3, r5
 8007334:	1891      	adds	r1, r2, r2
 8007336:	6139      	str	r1, [r7, #16]
 8007338:	415b      	adcs	r3, r3
 800733a:	617b      	str	r3, [r7, #20]
 800733c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007340:	1912      	adds	r2, r2, r4
 8007342:	eb45 0303 	adc.w	r3, r5, r3
 8007346:	f04f 0000 	mov.w	r0, #0
 800734a:	f04f 0100 	mov.w	r1, #0
 800734e:	00d9      	lsls	r1, r3, #3
 8007350:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007354:	00d0      	lsls	r0, r2, #3
 8007356:	4602      	mov	r2, r0
 8007358:	460b      	mov	r3, r1
 800735a:	eb12 0804 	adds.w	r8, r2, r4
 800735e:	eb43 0905 	adc.w	r9, r3, r5
 8007362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	4618      	mov	r0, r3
 800736a:	f04f 0100 	mov.w	r1, #0
 800736e:	f04f 0200 	mov.w	r2, #0
 8007372:	f04f 0300 	mov.w	r3, #0
 8007376:	008b      	lsls	r3, r1, #2
 8007378:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800737c:	0082      	lsls	r2, r0, #2
 800737e:	4640      	mov	r0, r8
 8007380:	4649      	mov	r1, r9
 8007382:	f7f9 fbd3 	bl	8000b2c <__aeabi_uldivmod>
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	4b4e      	ldr	r3, [pc, #312]	; (80074c4 <UART_SetConfig+0x734>)
 800738c:	fba3 2302 	umull	r2, r3, r3, r2
 8007390:	095b      	lsrs	r3, r3, #5
 8007392:	011e      	lsls	r6, r3, #4
 8007394:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007398:	4618      	mov	r0, r3
 800739a:	f04f 0100 	mov.w	r1, #0
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	1894      	adds	r4, r2, r2
 80073a4:	60bc      	str	r4, [r7, #8]
 80073a6:	415b      	adcs	r3, r3
 80073a8:	60fb      	str	r3, [r7, #12]
 80073aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073ae:	1812      	adds	r2, r2, r0
 80073b0:	eb41 0303 	adc.w	r3, r1, r3
 80073b4:	f04f 0400 	mov.w	r4, #0
 80073b8:	f04f 0500 	mov.w	r5, #0
 80073bc:	00dd      	lsls	r5, r3, #3
 80073be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80073c2:	00d4      	lsls	r4, r2, #3
 80073c4:	4622      	mov	r2, r4
 80073c6:	462b      	mov	r3, r5
 80073c8:	1814      	adds	r4, r2, r0
 80073ca:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80073ce:	414b      	adcs	r3, r1
 80073d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80073d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	4618      	mov	r0, r3
 80073dc:	f04f 0100 	mov.w	r1, #0
 80073e0:	f04f 0200 	mov.w	r2, #0
 80073e4:	f04f 0300 	mov.w	r3, #0
 80073e8:	008b      	lsls	r3, r1, #2
 80073ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80073ee:	0082      	lsls	r2, r0, #2
 80073f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80073f4:	f7f9 fb9a 	bl	8000b2c <__aeabi_uldivmod>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	4b31      	ldr	r3, [pc, #196]	; (80074c4 <UART_SetConfig+0x734>)
 80073fe:	fba3 1302 	umull	r1, r3, r3, r2
 8007402:	095b      	lsrs	r3, r3, #5
 8007404:	2164      	movs	r1, #100	; 0x64
 8007406:	fb01 f303 	mul.w	r3, r1, r3
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	011b      	lsls	r3, r3, #4
 800740e:	3332      	adds	r3, #50	; 0x32
 8007410:	4a2c      	ldr	r2, [pc, #176]	; (80074c4 <UART_SetConfig+0x734>)
 8007412:	fba2 2303 	umull	r2, r3, r2, r3
 8007416:	095b      	lsrs	r3, r3, #5
 8007418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800741c:	441e      	add	r6, r3
 800741e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007422:	4618      	mov	r0, r3
 8007424:	f04f 0100 	mov.w	r1, #0
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	1894      	adds	r4, r2, r2
 800742e:	603c      	str	r4, [r7, #0]
 8007430:	415b      	adcs	r3, r3
 8007432:	607b      	str	r3, [r7, #4]
 8007434:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007438:	1812      	adds	r2, r2, r0
 800743a:	eb41 0303 	adc.w	r3, r1, r3
 800743e:	f04f 0400 	mov.w	r4, #0
 8007442:	f04f 0500 	mov.w	r5, #0
 8007446:	00dd      	lsls	r5, r3, #3
 8007448:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800744c:	00d4      	lsls	r4, r2, #3
 800744e:	4622      	mov	r2, r4
 8007450:	462b      	mov	r3, r5
 8007452:	1814      	adds	r4, r2, r0
 8007454:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8007458:	414b      	adcs	r3, r1
 800745a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800745e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	4618      	mov	r0, r3
 8007466:	f04f 0100 	mov.w	r1, #0
 800746a:	f04f 0200 	mov.w	r2, #0
 800746e:	f04f 0300 	mov.w	r3, #0
 8007472:	008b      	lsls	r3, r1, #2
 8007474:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007478:	0082      	lsls	r2, r0, #2
 800747a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800747e:	f7f9 fb55 	bl	8000b2c <__aeabi_uldivmod>
 8007482:	4602      	mov	r2, r0
 8007484:	460b      	mov	r3, r1
 8007486:	4b0f      	ldr	r3, [pc, #60]	; (80074c4 <UART_SetConfig+0x734>)
 8007488:	fba3 1302 	umull	r1, r3, r3, r2
 800748c:	095b      	lsrs	r3, r3, #5
 800748e:	2164      	movs	r1, #100	; 0x64
 8007490:	fb01 f303 	mul.w	r3, r1, r3
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	011b      	lsls	r3, r3, #4
 8007498:	3332      	adds	r3, #50	; 0x32
 800749a:	4a0a      	ldr	r2, [pc, #40]	; (80074c4 <UART_SetConfig+0x734>)
 800749c:	fba2 2303 	umull	r2, r3, r2, r3
 80074a0:	095b      	lsrs	r3, r3, #5
 80074a2:	f003 020f 	and.w	r2, r3, #15
 80074a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4432      	add	r2, r6
 80074ae:	609a      	str	r2, [r3, #8]
}
 80074b0:	e7ff      	b.n	80074b2 <UART_SetConfig+0x722>
 80074b2:	bf00      	nop
 80074b4:	37f4      	adds	r7, #244	; 0xf4
 80074b6:	46bd      	mov	sp, r7
 80074b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074bc:	40011000 	.word	0x40011000
 80074c0:	40011400 	.word	0x40011400
 80074c4:	51eb851f 	.word	0x51eb851f

080074c8 <__libc_init_array>:
 80074c8:	b570      	push	{r4, r5, r6, lr}
 80074ca:	4d0d      	ldr	r5, [pc, #52]	; (8007500 <__libc_init_array+0x38>)
 80074cc:	4c0d      	ldr	r4, [pc, #52]	; (8007504 <__libc_init_array+0x3c>)
 80074ce:	1b64      	subs	r4, r4, r5
 80074d0:	10a4      	asrs	r4, r4, #2
 80074d2:	2600      	movs	r6, #0
 80074d4:	42a6      	cmp	r6, r4
 80074d6:	d109      	bne.n	80074ec <__libc_init_array+0x24>
 80074d8:	4d0b      	ldr	r5, [pc, #44]	; (8007508 <__libc_init_array+0x40>)
 80074da:	4c0c      	ldr	r4, [pc, #48]	; (800750c <__libc_init_array+0x44>)
 80074dc:	f000 f820 	bl	8007520 <_init>
 80074e0:	1b64      	subs	r4, r4, r5
 80074e2:	10a4      	asrs	r4, r4, #2
 80074e4:	2600      	movs	r6, #0
 80074e6:	42a6      	cmp	r6, r4
 80074e8:	d105      	bne.n	80074f6 <__libc_init_array+0x2e>
 80074ea:	bd70      	pop	{r4, r5, r6, pc}
 80074ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80074f0:	4798      	blx	r3
 80074f2:	3601      	adds	r6, #1
 80074f4:	e7ee      	b.n	80074d4 <__libc_init_array+0xc>
 80074f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80074fa:	4798      	blx	r3
 80074fc:	3601      	adds	r6, #1
 80074fe:	e7f2      	b.n	80074e6 <__libc_init_array+0x1e>
 8007500:	08007578 	.word	0x08007578
 8007504:	08007578 	.word	0x08007578
 8007508:	08007578 	.word	0x08007578
 800750c:	0800757c 	.word	0x0800757c

08007510 <memset>:
 8007510:	4402      	add	r2, r0
 8007512:	4603      	mov	r3, r0
 8007514:	4293      	cmp	r3, r2
 8007516:	d100      	bne.n	800751a <memset+0xa>
 8007518:	4770      	bx	lr
 800751a:	f803 1b01 	strb.w	r1, [r3], #1
 800751e:	e7f9      	b.n	8007514 <memset+0x4>

08007520 <_init>:
 8007520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007522:	bf00      	nop
 8007524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007526:	bc08      	pop	{r3}
 8007528:	469e      	mov	lr, r3
 800752a:	4770      	bx	lr

0800752c <_fini>:
 800752c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800752e:	bf00      	nop
 8007530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007532:	bc08      	pop	{r3}
 8007534:	469e      	mov	lr, r3
 8007536:	4770      	bx	lr
