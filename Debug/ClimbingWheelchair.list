
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dedc  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800e090  0800e090  0001e090  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5b0  0800e5b0  0002026c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e5b0  0800e5b0  0001e5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e5b8  0800e5b8  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5b8  0800e5b8  0001e5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e5bc  0800e5bc  0001e5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  0800e5c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  20000270  0800e82c  00020270  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007f4  0800e82c  000207f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d593  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000409a  00000000  00000000  0003d82f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001558  00000000  00000000  000418d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001378  00000000  00000000  00042e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b17  00000000  00000000  000441a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ed1c  00000000  00000000  0006bcb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e23b6  00000000  00000000  0008a9d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016cd89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d3c  00000000  00000000  0016cddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000270 	.word	0x20000270
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e074 	.word	0x0800e074

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000274 	.word	0x20000274
 80001ec:	0800e074 	.word	0x0800e074

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <pid_create>:
	Author e-mail: ruben at geekfactory dot mx
 */
#include "PID.h"

PID_t pid_create(PID_t pid, float* in, float* out, float* set, float kp, float ki, float kd)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	61f8      	str	r0, [r7, #28]
 8000ef8:	61b9      	str	r1, [r7, #24]
 8000efa:	617a      	str	r2, [r7, #20]
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f02:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f06:	ed87 1a01 	vstr	s2, [r7, #4]
	pid->input = in;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	601a      	str	r2, [r3, #0]
	pid->output = out;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	605a      	str	r2, [r3, #4]
	pid->setpoint = set;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	609a      	str	r2, [r3, #8]
	pid->automode = false;
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	pid_limits(pid, 0, 255);
 8000f24:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000f6c <pid_create+0x7c>
 8000f28:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000f70 <pid_create+0x80>
 8000f2c:	69f8      	ldr	r0, [r7, #28]
 8000f2e:	f000 f96b 	bl	8001208 <pid_limits>

	// Set default sample time to 100 ms
	pid->sampletime = 100 * (FREQUENCY / 1000);
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	2264      	movs	r2, #100	; 0x64
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c

	pid_direction(pid, E_PID_DIRECT);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	69f8      	ldr	r0, [r7, #28]
 8000f3c:	f000 fa06 	bl	800134c <pid_direction>
	PID_tune(pid, kp, ki, kd);
 8000f40:	ed97 1a01 	vldr	s2, [r7, #4]
 8000f44:	edd7 0a02 	vldr	s1, [r7, #8]
 8000f48:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f4c:	69f8      	ldr	r0, [r7, #28]
 8000f4e:	f000 f8b9 	bl	80010c4 <PID_tune>

	pid->lasttime = HAL_GetTick() - pid->sampletime;
 8000f52:	f003 fa51 	bl	80043f8 <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5c:	1ad2      	subs	r2, r2, r3
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28

	return pid;
 8000f62:	69fb      	ldr	r3, [r7, #28]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	437f0000 	.word	0x437f0000
 8000f70:	00000000 	.word	0x00000000

08000f74 <pid_need_compute>:

bool pid_need_compute(PID_t pid)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	// Check if the PID period has elapsed
	return(HAL_GetTick() - pid->lasttime >= pid->sampletime) ? true : false;
 8000f7c:	f003 fa3c 	bl	80043f8 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f86:	1ad2      	subs	r2, r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	bf2c      	ite	cs
 8000f90:	2301      	movcs	r3, #1
 8000f92:	2300      	movcc	r3, #0
 8000f94:	b2db      	uxtb	r3, r3
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <pid_compute>:
void pid_compute(PID_t pid)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
	// Check if control is enabled
	if (!pid->automode)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 8084 	beq.w	80010ba <pid_compute+0x11c>
		return ;
	
	float in = *(pid->input);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	613b      	str	r3, [r7, #16]
	// Compute error
	float error = (*(pid->setpoint)) - in;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	ed93 7a00 	vldr	s14, [r3]
 8000fc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fca:	edc7 7a03 	vstr	s15, [r7, #12]
	// Compute integral
	pid->iterm += (pid->Ki * error);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	ed93 7a08 	vldr	s14, [r3, #32]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	edd3 6a04 	vldr	s13, [r3, #16]
 8000fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	edc3 7a08 	vstr	s15, [r3, #32]
	if (pid->iterm > pid->omax)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	ed93 7a08 	vldr	s14, [r3, #32]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001000:	dd04      	ble.n	800100c <pid_compute+0x6e>
		pid->iterm = pid->omax;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69da      	ldr	r2, [r3, #28]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	621a      	str	r2, [r3, #32]
 800100a:	e00e      	b.n	800102a <pid_compute+0x8c>
	else if (pid->iterm < pid->omin)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	edd3 7a06 	vldr	s15, [r3, #24]
 8001018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	d503      	bpl.n	800102a <pid_compute+0x8c>
		pid->iterm = pid->omin;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	699a      	ldr	r2, [r3, #24]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	621a      	str	r2, [r3, #32]
	// Compute differential on input
	float dinput = in - pid->lastin;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001030:	ed97 7a04 	vldr	s14, [r7, #16]
 8001034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001038:	edc7 7a02 	vstr	s15, [r7, #8]
	// Compute PID output
	float out = pid->Kp * error + pid->iterm - pid->Kd * dinput;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001042:	edd7 7a03 	vldr	s15, [r7, #12]
 8001046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001050:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	edd3 6a05 	vldr	s13, [r3, #20]
 800105a:	edd7 7a02 	vldr	s15, [r7, #8]
 800105e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001066:	edc7 7a05 	vstr	s15, [r7, #20]
	// Apply limit to output value
	if (out > pid->omax)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001070:	ed97 7a05 	vldr	s14, [r7, #20]
 8001074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107c:	dd03      	ble.n	8001086 <pid_compute+0xe8>
		out = pid->omax;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e00c      	b.n	80010a0 <pid_compute+0x102>
	else if (out < pid->omin)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	edd3 7a06 	vldr	s15, [r3, #24]
 800108c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	d502      	bpl.n	80010a0 <pid_compute+0x102>
		out = pid->omin;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	617b      	str	r3, [r7, #20]
	// Output to pointed variable
	(*pid->output) = out;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	601a      	str	r2, [r3, #0]
	// Keep track of some variables for next execution
	pid->lastin = in;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
	pid->lasttime = HAL_GetTick();
 80010ae:	f003 f9a3 	bl	80043f8 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
 80010b8:	e000      	b.n	80010bc <pid_compute+0x11e>
		return ;
 80010ba:	bf00      	nop
}
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <PID_tune>:

void PID_tune(PID_t pid, float kp, float ki, float kd)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80010d0:	edc7 0a01 	vstr	s1, [r7, #4]
 80010d4:	ed87 1a00 	vstr	s2, [r7]
	// Check for validity
	if (kp < 0 || ki < 0 || kd < 0)
 80010d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80010dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	d452      	bmi.n	800118c <PID_tune+0xc8>
 80010e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f2:	d44b      	bmi.n	800118c <PID_tune+0xc8>
 80010f4:	edd7 7a00 	vldr	s15, [r7]
 80010f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001100:	d444      	bmi.n	800118c <PID_tune+0xc8>
		return;
	
	//Compute sample time in seconds
	float ssec = ((float) pid->sampletime) / ((float) FREQUENCY);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800110e:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001198 <PID_tune+0xd4>
 8001112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001116:	edc7 7a05 	vstr	s15, [r7, #20]

	pid->Kp = kp;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	60da      	str	r2, [r3, #12]
	pid->Ki = ki * ssec;
 8001120:	ed97 7a01 	vldr	s14, [r7, #4]
 8001124:	edd7 7a05 	vldr	s15, [r7, #20]
 8001128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->Kd = kd / ssec;
 8001132:	edd7 6a00 	vldr	s13, [r7]
 8001136:	ed97 7a05 	vldr	s14, [r7, #20]
 800113a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	edc3 7a05 	vstr	s15, [r3, #20]

	if (pid->direction == E_PID_REVERSE) {
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800114a:	2b01      	cmp	r3, #1
 800114c:	d11f      	bne.n	800118e <PID_tune+0xca>
		pid->Kp = 0 - pid->Kp;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	edd3 7a03 	vldr	s15, [r3, #12]
 8001154:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800119c <PID_tune+0xd8>
 8001158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = 0 - pid->Ki;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	edd3 7a04 	vldr	s15, [r3, #16]
 8001168:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800119c <PID_tune+0xd8>
 800116c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = 0 - pid->Kd;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	edd3 7a05 	vldr	s15, [r3, #20]
 800117c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800119c <PID_tune+0xd8>
 8001180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	edc3 7a05 	vstr	s15, [r3, #20]
 800118a:	e000      	b.n	800118e <PID_tune+0xca>
		return;
 800118c:	bf00      	nop
	}
}
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	447a0000 	.word	0x447a0000
 800119c:	00000000 	.word	0x00000000

080011a0 <pid_sample>:

void pid_sample(PID_t pid, uint32_t time)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	if (time > 0) {
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d025      	beq.n	80011fc <pid_sample+0x5c>
		float ratio = (float) (time * (FREQUENCY / 1000)) / (float) pid->sampletime;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	ee07 3a90 	vmov	s15, r3
 80011c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ca:	edc7 7a03 	vstr	s15, [r7, #12]
		pid->Ki *= ratio;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80011d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd /= ratio;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	edd3 6a05 	vldr	s13, [r3, #20]
 80011e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80011ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edc3 7a05 	vstr	s15, [r3, #20]
		pid->sampletime = time * (FREQUENCY / 1000);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <pid_limits>:

void pid_limits(PID_t pid, float min, float max)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	ed87 0a02 	vstr	s0, [r7, #8]
 8001214:	edc7 0a01 	vstr	s1, [r7, #4]
	if (min >= max) return;
 8001218:	ed97 7a02 	vldr	s14, [r7, #8]
 800121c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001228:	da4d      	bge.n	80012c6 <pid_limits+0xbe>
	pid->omin = min;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	619a      	str	r2, [r3, #24]
	pid->omax = max;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	61da      	str	r2, [r3, #28]
	//Adjust output to new limits
	if (pid->automode) {
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800123c:	2b00      	cmp	r3, #0
 800123e:	d043      	beq.n	80012c8 <pid_limits+0xc0>
		if (*(pid->output) > pid->omax)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	ed93 7a00 	vldr	s14, [r3]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	edd3 7a07 	vldr	s15, [r3, #28]
 800124e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	dd05      	ble.n	8001264 <pid_limits+0x5c>
			*(pid->output) = pid->omax;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	69d2      	ldr	r2, [r2, #28]
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e010      	b.n	8001286 <pid_limits+0x7e>
		else if (*(pid->output) < pid->omin)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	ed93 7a00 	vldr	s14, [r3]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	d504      	bpl.n	8001286 <pid_limits+0x7e>
			*(pid->output) = pid->omin;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	6992      	ldr	r2, [r2, #24]
 8001284:	601a      	str	r2, [r3, #0]

		if (pid->iterm > pid->omax)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	ed93 7a08 	vldr	s14, [r3, #32]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	dd04      	ble.n	80012a6 <pid_limits+0x9e>
			pid->iterm = pid->omax;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	69da      	ldr	r2, [r3, #28]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	621a      	str	r2, [r3, #32]
 80012a4:	e010      	b.n	80012c8 <pid_limits+0xc0>
		else if (pid->iterm < pid->omin)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	ed93 7a08 	vldr	s14, [r3, #32]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80012b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	d505      	bpl.n	80012c8 <pid_limits+0xc0>
			pid->iterm = pid->omin;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	699a      	ldr	r2, [r3, #24]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	621a      	str	r2, [r3, #32]
 80012c4:	e000      	b.n	80012c8 <pid_limits+0xc0>
	if (min >= max) return;
 80012c6:	bf00      	nop
	}
}
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <pid_auto>:

void pid_auto(PID_t pid)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
	// If going from manual to auto
	if (!pid->automode) {
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d12c      	bne.n	800133e <pid_auto+0x6c>
		pid->iterm = *(pid->output);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	621a      	str	r2, [r3, #32]
		pid->lastin = *(pid->input);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
		if (pid->iterm > pid->omax)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	ed93 7a08 	vldr	s14, [r3, #32]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edd3 7a07 	vldr	s15, [r3, #28]
 8001304:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800130c:	dd04      	ble.n	8001318 <pid_auto+0x46>
			pid->iterm = pid->omax;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69da      	ldr	r2, [r3, #28]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	621a      	str	r2, [r3, #32]
 8001316:	e00e      	b.n	8001336 <pid_auto+0x64>
		else if (pid->iterm < pid->omin)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	ed93 7a08 	vldr	s14, [r3, #32]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	edd3 7a06 	vldr	s15, [r3, #24]
 8001324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132c:	d503      	bpl.n	8001336 <pid_auto+0x64>
			pid->iterm = pid->omin;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	699a      	ldr	r2, [r3, #24]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	621a      	str	r2, [r3, #32]
		pid->automode = true;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <pid_direction>:
{
	pid->automode = false;
}

void pid_direction(PID_t pid, enum pid_control_directions dir)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
	if (pid->automode && pid->direction != dir) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800135e:	2b00      	cmp	r3, #0
 8001360:	d023      	beq.n	80013aa <pid_direction+0x5e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001368:	78fa      	ldrb	r2, [r7, #3]
 800136a:	429a      	cmp	r2, r3
 800136c:	d01d      	beq.n	80013aa <pid_direction+0x5e>
		pid->Kp = (0 - pid->Kp);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	edd3 7a03 	vldr	s15, [r3, #12]
 8001374:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80013c0 <pid_direction+0x74>
 8001378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = (0 - pid->Ki);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	edd3 7a04 	vldr	s15, [r3, #16]
 8001388:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80013c0 <pid_direction+0x74>
 800138c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = (0 - pid->Kd);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	edd3 7a05 	vldr	s15, [r3, #20]
 800139c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013c0 <pid_direction+0x74>
 80013a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	pid->direction = dir;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	78fa      	ldrb	r2, [r7, #3]
 80013ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	00000000 	.word	0x00000000

080013c4 <hubMotor_Init>:
#include "X2_6010S.h"
extern uint8_t receive_buf[15];



void hubMotor_Init(){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HubM_IO_SON_GPIO_Port, HubM_IO_SON_Pin, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ce:	4808      	ldr	r0, [pc, #32]	; (80013f0 <hubMotor_Init+0x2c>)
 80013d0:	f005 fa3a 	bl	8006848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_NOT_GPIO_Port, HubM_IO_NOT_Pin, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <hubMotor_Init+0x2c>)
 80013dc:	f005 fa34 	bl	8006848 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_POT_GPIO_Port, HubM_IO_POT_Pin, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e6:	4802      	ldr	r0, [pc, #8]	; (80013f0 <hubMotor_Init+0x2c>)
 80013e8:	f005 fa2e 	bl	8006848 <HAL_GPIO_WritePin>
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	00000000 	.word	0x00000000

080013f8 <send_HubMotor>:

void send_HubMotor(float m1_ang_speed, float m2_ang_speed){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08c      	sub	sp, #48	; 0x30
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001402:	edc7 0a00 	vstr	s1, [r7]
	int16_t motor1_speed, motor2_speed;
	//convert velocity into pulse/second
	motor1_speed = -(int16_t)(m1_ang_speed * 4096.0 / (2 * M_PI));
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff f856 	bl	80004b8 <__aeabi_f2d>
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	4b63      	ldr	r3, [pc, #396]	; (80015a0 <send_HubMotor+0x1a8>)
 8001412:	f7ff f8a9 	bl	8000568 <__aeabi_dmul>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	a35e      	add	r3, pc, #376	; (adr r3, 8001598 <send_HubMotor+0x1a0>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7ff f9ca 	bl	80007bc <__aeabi_ddiv>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f7ff fb4a 	bl	8000ac8 <__aeabi_d2iz>
 8001434:	4603      	mov	r3, r0
 8001436:	b21b      	sxth	r3, r3
 8001438:	b29b      	uxth	r3, r3
 800143a:	425b      	negs	r3, r3
 800143c:	b29b      	uxth	r3, r3
 800143e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	motor2_speed = (int16_t)(m2_ang_speed * 4096.0/ (2 * M_PI));
 8001440:	6838      	ldr	r0, [r7, #0]
 8001442:	f7ff f839 	bl	80004b8 <__aeabi_f2d>
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	4b55      	ldr	r3, [pc, #340]	; (80015a0 <send_HubMotor+0x1a8>)
 800144c:	f7ff f88c 	bl	8000568 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	a34f      	add	r3, pc, #316	; (adr r3, 8001598 <send_HubMotor+0x1a0>)
 800145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145e:	f7ff f9ad 	bl	80007bc <__aeabi_ddiv>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4610      	mov	r0, r2
 8001468:	4619      	mov	r1, r3
 800146a:	f7ff fb2d 	bl	8000ac8 <__aeabi_d2iz>
 800146e:	4603      	mov	r3, r0
 8001470:	85bb      	strh	r3, [r7, #44]	; 0x2c
//	motor1_speed = -(int16_t)(m1_speed);
//	motor2_speed = (int16_t)(m2_speed);

	uint8_t send_buf[15];
	send_buf[0] = 0xAA;
 8001472:	23aa      	movs	r3, #170	; 0xaa
 8001474:	733b      	strb	r3, [r7, #12]
	send_buf[1] = 0xA4;
 8001476:	23a4      	movs	r3, #164	; 0xa4
 8001478:	737b      	strb	r3, [r7, #13]
	send_buf[2] = 0x0E;
 800147a:	230e      	movs	r3, #14
 800147c:	73bb      	strb	r3, [r7, #14]
	send_buf[3] = 0x00;
 800147e:	2300      	movs	r3, #0
 8001480:	73fb      	strb	r3, [r7, #15]
	send_buf[4] = MOTOR_ENABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	743b      	strb	r3, [r7, #16]
	send_buf[5] = MOTOR_ENCODER_FEEDBACK;
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	747b      	strb	r3, [r7, #17]

	//Set acceleration to constant by default
	//time taken from 0 to 1000rpm
	uint16_t acceleration = 200;
 800148a:	23c8      	movs	r3, #200	; 0xc8
 800148c:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t msb_acce = (uint8_t)((acceleration & 0xFF00) >> 8);
 800148e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	b29b      	uxth	r3, r3
 8001494:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t lsb_acce = (uint8_t)(acceleration & 0x00FF);
 8001498:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800149a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	send_buf[6] = lsb_acce;
 800149e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014a2:	74bb      	strb	r3, [r7, #18]
	send_buf[7] = msb_acce;
 80014a4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80014a8:	74fb      	strb	r3, [r7, #19]

	//Set maximum torque
	//Value: 0 - 450 (300 by default)
	uint16_t max_torque = 300;
 80014aa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80014ae:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t msb_max_torque = (uint8_t)((max_torque & 0xFF00) >> 8);
 80014b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014b2:	0a1b      	lsrs	r3, r3, #8
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t lsb_max_torque = (uint8_t)(max_torque & 0x00FF);
 80014ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	send_buf[8] = lsb_max_torque;
 80014c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014c4:	753b      	strb	r3, [r7, #20]
	send_buf[9] = msb_max_torque;
 80014c6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014ca:	757b      	strb	r3, [r7, #21]

	//Set motor1 speed
	uint8_t msb_motor1_speed = (uint8_t)((motor1_speed & 0xFF00) >> 8);
 80014cc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80014d0:	121b      	asrs	r3, r3, #8
 80014d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t lsb_motor1_speed = (uint8_t)(motor1_speed & 0x00FF);
 80014d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	send_buf[10] = lsb_motor1_speed;
 80014dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80014e0:	75bb      	strb	r3, [r7, #22]
	send_buf[11] = msb_motor1_speed;
 80014e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014e6:	75fb      	strb	r3, [r7, #23]

	//Set motor2 speed
	uint8_t msb_motor2_speed = (uint8_t)((motor2_speed & 0xFF00) >> 8);
 80014e8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80014ec:	121b      	asrs	r3, r3, #8
 80014ee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t lsb_motor2_speed = (uint8_t)(motor2_speed & 0x00FF);
 80014f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014f4:	f887 3020 	strb.w	r3, [r7, #32]
	send_buf[12] = lsb_motor2_speed;
 80014f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014fc:	763b      	strb	r3, [r7, #24]
	send_buf[13] = msb_motor2_speed;
 80014fe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001502:	767b      	strb	r3, [r7, #25]

	//checksum byte
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 8001504:	7b3b      	ldrb	r3, [r7, #12]
 8001506:	b29a      	uxth	r2, r3
 8001508:	7b7b      	ldrb	r3, [r7, #13]
 800150a:	b29b      	uxth	r3, r3
 800150c:	4413      	add	r3, r2
 800150e:	b29a      	uxth	r2, r3
 8001510:	7bbb      	ldrb	r3, [r7, #14]
 8001512:	b29b      	uxth	r3, r3
 8001514:	4413      	add	r3, r2
 8001516:	b29a      	uxth	r2, r3
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	b29b      	uxth	r3, r3
 800151c:	4413      	add	r3, r2
 800151e:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[4] + (uint16_t)send_buf[5] + (uint16_t)send_buf[6]
 8001520:	7c3b      	ldrb	r3, [r7, #16]
 8001522:	b29b      	uxth	r3, r3
 8001524:	4413      	add	r3, r2
 8001526:	b29a      	uxth	r2, r3
 8001528:	7c7b      	ldrb	r3, [r7, #17]
 800152a:	b29b      	uxth	r3, r3
 800152c:	4413      	add	r3, r2
 800152e:	b29a      	uxth	r2, r3
 8001530:	7cbb      	ldrb	r3, [r7, #18]
 8001532:	b29b      	uxth	r3, r3
 8001534:	4413      	add	r3, r2
 8001536:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[7] + (uint16_t)send_buf[8] + (uint16_t)send_buf[9]
 8001538:	7cfb      	ldrb	r3, [r7, #19]
 800153a:	b29b      	uxth	r3, r3
 800153c:	4413      	add	r3, r2
 800153e:	b29a      	uxth	r2, r3
 8001540:	7d3b      	ldrb	r3, [r7, #20]
 8001542:	b29b      	uxth	r3, r3
 8001544:	4413      	add	r3, r2
 8001546:	b29a      	uxth	r2, r3
 8001548:	7d7b      	ldrb	r3, [r7, #21]
 800154a:	b29b      	uxth	r3, r3
 800154c:	4413      	add	r3, r2
 800154e:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[10] + (uint16_t)send_buf[11] + (uint16_t)send_buf[12]
 8001550:	7dbb      	ldrb	r3, [r7, #22]
 8001552:	b29b      	uxth	r3, r3
 8001554:	4413      	add	r3, r2
 8001556:	b29a      	uxth	r2, r3
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b29a      	uxth	r2, r3
 8001560:	7e3b      	ldrb	r3, [r7, #24]
 8001562:	b29b      	uxth	r3, r3
 8001564:	4413      	add	r3, r2
 8001566:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[13];
 8001568:	7e7b      	ldrb	r3, [r7, #25]
 800156a:	b29b      	uxth	r3, r3
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 800156c:	4413      	add	r3, r2
 800156e:	83fb      	strh	r3, [r7, #30]

	send_buf[14] = (uint8_t)(sum & 0x00FF);
 8001570:	8bfb      	ldrh	r3, [r7, #30]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	76bb      	strb	r3, [r7, #26]

	HAL_UART_Transmit(&huart3, send_buf, 15, 50);
 8001576:	f107 010c 	add.w	r1, r7, #12
 800157a:	2332      	movs	r3, #50	; 0x32
 800157c:	220f      	movs	r2, #15
 800157e:	4809      	ldr	r0, [pc, #36]	; (80015a4 <send_HubMotor+0x1ac>)
 8001580:	f00a f8a6 	bl	800b6d0 <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart3, receive_buf, 15);
 8001584:	220f      	movs	r2, #15
 8001586:	4908      	ldr	r1, [pc, #32]	; (80015a8 <send_HubMotor+0x1b0>)
 8001588:	4806      	ldr	r0, [pc, #24]	; (80015a4 <send_HubMotor+0x1ac>)
 800158a:	f00a f93b 	bl	800b804 <HAL_UART_Receive_DMA>
}
 800158e:	bf00      	nop
 8001590:	3730      	adds	r7, #48	; 0x30
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	54442d18 	.word	0x54442d18
 800159c:	401921fb 	.word	0x401921fb
 80015a0:	40b00000 	.word	0x40b00000
 80015a4:	200007b0 	.word	0x200007b0
 80015a8:	20000634 	.word	0x20000634

080015ac <ADC_Read>:
//		      HAL_Delay(5000);
}


void ADC_Read(int16_t *data)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 80015b4:	2200      	movs	r2, #0
 80015b6:	2110      	movs	r1, #16
 80015b8:	4808      	ldr	r0, [pc, #32]	; (80015dc <ADC_Read+0x30>)
 80015ba:	f005 f945 	bl	8006848 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 80015be:	2302      	movs	r3, #2
 80015c0:	2208      	movs	r2, #8
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	4806      	ldr	r0, [pc, #24]	; (80015e0 <ADC_Read+0x34>)
 80015c6:	f007 fa07 	bl	80089d8 <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 80015ca:	2201      	movs	r2, #1
 80015cc:	2110      	movs	r1, #16
 80015ce:	4803      	ldr	r0, [pc, #12]	; (80015dc <ADC_Read+0x30>)
 80015d0:	f005 f93a 	bl	8006848 <HAL_GPIO_WritePin>
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40020000 	.word	0x40020000
 80015e0:	20000328 	.word	0x20000328

080015e4 <bd25l_Init>:
	.DIR_pin	= ClimbM_IO_FR2_Pin,
	.pole		= 4,
	.ID		= 2,
};

void bd25l_Init(Motor_TypeDef* motor){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	enableMotor(motor, 0);
 80015ec:	2100      	movs	r1, #0
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f808 	bl	8001604 <enableMotor>
	brakeMotor(motor, 0);
 80015f4:	2100      	movs	r1, #0
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 f828 	bl	800164c <brakeMotor>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <enableMotor>:
	brakeMotor(motor, 1);
	enableMotor(motor, 0);

}

void enableMotor(Motor_TypeDef* motor, uint8_t state){
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->EN_port, motor->EN_pin, state);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001618:	78fa      	ldrb	r2, [r7, #3]
 800161a:	4619      	mov	r1, r3
 800161c:	f005 f914 	bl	8006848 <HAL_GPIO_WritePin>
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <emBrakeMotor>:

void emBrakeMotor(uint8_t state){
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Brake_Wheel_GPIO_Port, Brake_Wheel_Pin, state);
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	461a      	mov	r2, r3
 8001636:	2108      	movs	r1, #8
 8001638:	4803      	ldr	r0, [pc, #12]	; (8001648 <emBrakeMotor+0x20>)
 800163a:	f005 f905 	bl	8006848 <HAL_GPIO_WritePin>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40020c00 	.word	0x40020c00

0800164c <brakeMotor>:

void brakeMotor(Motor_TypeDef* motor, uint8_t state){
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->BRK_port, motor->BRK_pin, state);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69d8      	ldr	r0, [r3, #28]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	8c1b      	ldrh	r3, [r3, #32]
 8001660:	78fa      	ldrb	r2, [r7, #3]
 8001662:	4619      	mov	r1, r3
 8001664:	f005 f8f0 	bl	8006848 <HAL_GPIO_WritePin>
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <setMotorDir>:

void setMotorDir(Motor_TypeDef* motor, uint8_t dir){
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin, dir);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001684:	78fa      	ldrb	r2, [r7, #3]
 8001686:	4619      	mov	r1, r3
 8001688:	f005 f8de 	bl	8006848 <HAL_GPIO_WritePin>
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	0000      	movs	r0, r0
	...

08001698 <setMotorSpeed>:

void setMotorSpeed(Motor_TypeDef* motor, float speed){
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	ed87 0a00 	vstr	s0, [r7]

	float frequency = 0;
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
	uint16_t period;
	uint32_t duty_cycle; //50%

	if (speed > 100) speed = 100.0;
 80016aa:	edd7 7a00 	vldr	s15, [r7]
 80016ae:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80017e0 <setMotorSpeed+0x148>
 80016b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ba:	dd01      	ble.n	80016c0 <setMotorSpeed+0x28>
 80016bc:	4b49      	ldr	r3, [pc, #292]	; (80017e4 <setMotorSpeed+0x14c>)
 80016be:	603b      	str	r3, [r7, #0]
	//Frequency equation derived from data sheet
	frequency = (uint16_t)((speed - 0.2597)/0.02494);
 80016c0:	6838      	ldr	r0, [r7, #0]
 80016c2:	f7fe fef9 	bl	80004b8 <__aeabi_f2d>
 80016c6:	a340      	add	r3, pc, #256	; (adr r3, 80017c8 <setMotorSpeed+0x130>)
 80016c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016cc:	f7fe fd94 	bl	80001f8 <__aeabi_dsub>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	a33d      	add	r3, pc, #244	; (adr r3, 80017d0 <setMotorSpeed+0x138>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	f7ff f86d 	bl	80007bc <__aeabi_ddiv>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	f7ff fa15 	bl	8000b18 <__aeabi_d2uiz>
 80016ee:	4603      	mov	r3, r0
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	ee07 3a90 	vmov	s15, r3
 80016f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016fa:	edc7 7a05 	vstr	s15, [r7, #20]
	period = (int)(1e6/frequency)+1;
 80016fe:	6978      	ldr	r0, [r7, #20]
 8001700:	f7fe feda 	bl	80004b8 <__aeabi_f2d>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	a133      	add	r1, pc, #204	; (adr r1, 80017d8 <setMotorSpeed+0x140>)
 800170a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800170e:	f7ff f855 	bl	80007bc <__aeabi_ddiv>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	f7ff f9d5 	bl	8000ac8 <__aeabi_d2iz>
 800171e:	4603      	mov	r3, r0
 8001720:	b29b      	uxth	r3, r3
 8001722:	3301      	adds	r3, #1
 8001724:	827b      	strh	r3, [r7, #18]
	duty_cycle = period / 2;
 8001726:	8a7b      	ldrh	r3, [r7, #18]
 8001728:	085b      	lsrs	r3, r3, #1
 800172a:	b29b      	uxth	r3, r3
 800172c:	60fb      	str	r3, [r7, #12]
//	      motor->outputPWM->Instance->CCR4 = duty_cycle;
//
//	    HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
//	}

	if (speed<4){
 800172e:	edd7 7a00 	vldr	s15, [r7]
 8001732:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001736:	eef4 7ac7 	vcmpe.f32	s15, s14
 800173a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173e:	d503      	bpl.n	8001748 <setMotorSpeed+0xb0>
		brakeMotor(motor, 1);
 8001740:	2101      	movs	r1, #1
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ff82 	bl	800164c <brakeMotor>
	}



	motor->outputPWM->Instance->ARR = period;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	8a7a      	ldrh	r2, [r7, #18]
 8001750:	62da      	str	r2, [r3, #44]	; 0x2c
	if(motor->PWM_channel == TIM_CHANNEL_1)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	8b1b      	ldrh	r3, [r3, #24]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d105      	bne.n	8001766 <setMotorSpeed+0xce>
	  motor->outputPWM->Instance->CCR1 = duty_cycle;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	635a      	str	r2, [r3, #52]	; 0x34
 8001764:	e01c      	b.n	80017a0 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_2)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	8b1b      	ldrh	r3, [r3, #24]
 800176a:	2b04      	cmp	r3, #4
 800176c:	d105      	bne.n	800177a <setMotorSpeed+0xe2>
		  motor->outputPWM->Instance->CCR2 = duty_cycle;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	639a      	str	r2, [r3, #56]	; 0x38
 8001778:	e012      	b.n	80017a0 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_3)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	8b1b      	ldrh	r3, [r3, #24]
 800177e:	2b08      	cmp	r3, #8
 8001780:	d105      	bne.n	800178e <setMotorSpeed+0xf6>
		  motor->outputPWM->Instance->CCR3 = duty_cycle;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	63da      	str	r2, [r3, #60]	; 0x3c
 800178c:	e008      	b.n	80017a0 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_4)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	8b1b      	ldrh	r3, [r3, #24]
 8001792:	2b0c      	cmp	r3, #12
 8001794:	d104      	bne.n	80017a0 <setMotorSpeed+0x108>
	  motor->outputPWM->Instance->CCR4 = duty_cycle;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	695a      	ldr	r2, [r3, #20]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	8b1b      	ldrh	r3, [r3, #24]
 80017a8:	4619      	mov	r1, r3
 80017aa:	4610      	mov	r0, r2
 80017ac:	f007 ff0a 	bl	80095c4 <HAL_TIM_PWM_Start>



	motor->outputPWM->Instance->CNT = 0;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2200      	movs	r2, #0
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	f3af 8000 	nop.w
 80017c8:	bfb15b57 	.word	0xbfb15b57
 80017cc:	3fd09eec 	.word	0x3fd09eec
 80017d0:	1172ef0b 	.word	0x1172ef0b
 80017d4:	3f9989df 	.word	0x3f9989df
 80017d8:	00000000 	.word	0x00000000
 80017dc:	412e8480 	.word	0x412e8480
 80017e0:	42c80000 	.word	0x42c80000
 80017e4:	42c80000 	.word	0x42c80000

080017e8 <runMotor>:
		return -1;
	}
	else return 1;
}

void runMotor(Motor_TypeDef* motor, float speed){
 80017e8:	b5b0      	push	{r4, r5, r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	ed87 0a00 	vstr	s0, [r7]
  //	    - positive speed Lift DOWN
  //	    - negative speed lift UP
    if (motor->ID == 1){
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d129      	bne.n	8001852 <runMotor+0x6a>
	if (fabs(speed)/speed  >= 0)
 80017fe:	edd7 7a00 	vldr	s15, [r7]
 8001802:	eef0 7ae7 	vabs.f32	s15, s15
 8001806:	ee17 0a90 	vmov	r0, s15
 800180a:	f7fe fe55 	bl	80004b8 <__aeabi_f2d>
 800180e:	4604      	mov	r4, r0
 8001810:	460d      	mov	r5, r1
 8001812:	6838      	ldr	r0, [r7, #0]
 8001814:	f7fe fe50 	bl	80004b8 <__aeabi_f2d>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4620      	mov	r0, r4
 800181e:	4629      	mov	r1, r5
 8001820:	f7fe ffcc 	bl	80007bc <__aeabi_ddiv>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	f7ff f91e 	bl	8000a74 <__aeabi_dcmpge>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d004      	beq.n	8001848 <runMotor+0x60>
	      setMotorDir(motor, 0);
 800183e:	2100      	movs	r1, #0
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff15 	bl	8001670 <setMotorDir>
 8001846:	e032      	b.n	80018ae <runMotor+0xc6>
	else
	  setMotorDir(motor, 1);
 8001848:	2101      	movs	r1, #1
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff ff10 	bl	8001670 <setMotorDir>
 8001850:	e02d      	b.n	80018ae <runMotor+0xc6>
    }
    else if (motor->ID == 2){
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001858:	2b02      	cmp	r3, #2
 800185a:	d128      	bne.n	80018ae <runMotor+0xc6>
	if (fabs(speed)/speed  >= 0)
 800185c:	edd7 7a00 	vldr	s15, [r7]
 8001860:	eef0 7ae7 	vabs.f32	s15, s15
 8001864:	ee17 0a90 	vmov	r0, s15
 8001868:	f7fe fe26 	bl	80004b8 <__aeabi_f2d>
 800186c:	4604      	mov	r4, r0
 800186e:	460d      	mov	r5, r1
 8001870:	6838      	ldr	r0, [r7, #0]
 8001872:	f7fe fe21 	bl	80004b8 <__aeabi_f2d>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4620      	mov	r0, r4
 800187c:	4629      	mov	r1, r5
 800187e:	f7fe ff9d 	bl	80007bc <__aeabi_ddiv>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	f7ff f8ef 	bl	8000a74 <__aeabi_dcmpge>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d004      	beq.n	80018a6 <runMotor+0xbe>
	  setMotorDir(motor, 1);
 800189c:	2101      	movs	r1, #1
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff fee6 	bl	8001670 <setMotorDir>
 80018a4:	e003      	b.n	80018ae <runMotor+0xc6>
	else
	  setMotorDir(motor, 0);
 80018a6:	2100      	movs	r1, #0
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff fee1 	bl	8001670 <setMotorDir>
    }

    HAL_Delay(50);
 80018ae:	2032      	movs	r0, #50	; 0x32
 80018b0:	f002 fdae 	bl	8004410 <HAL_Delay>
    brakeMotor(motor, 0);
 80018b4:	2100      	movs	r1, #0
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff fec8 	bl	800164c <brakeMotor>
    setMotorSpeed(motor, fabs(speed));
 80018bc:	edd7 7a00 	vldr	s15, [r7]
 80018c0:	eef0 7ae7 	vabs.f32	s15, s15
 80018c4:	eeb0 0a67 	vmov.f32	s0, s15
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff fee5 	bl	8001698 <setMotorSpeed>

}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bdb0      	pop	{r4, r5, r7, pc}

080018d6 <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	889b      	ldrh	r3, [r3, #4]
 80018e8:	4619      	mov	r1, r3
 80018ea:	4610      	mov	r0, r2
 80018ec:	f004 ff86 	bl	80067fc <HAL_GPIO_ReadPin>
 80018f0:	4603      	mov	r3, r0
 80018f2:	461a      	mov	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	799a      	ldrb	r2, [r3, #6]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	79db      	ldrb	r3, [r3, #7]
 8001900:	429a      	cmp	r2, r3
 8001902:	d004      	beq.n	800190e <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 8001904:	f002 fd78 	bl	80043f8 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 800190e:	f002 fd73 	bl	80043f8 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d209      	bcs.n	8001934 <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	799a      	ldrb	r2, [r3, #6]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7a1b      	ldrb	r3, [r3, #8]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 8001930:	2301      	movs	r3, #1
 8001932:	e004      	b.n	800193e <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	799a      	ldrb	r2, [r3, #6]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800194e:	4b30      	ldr	r3, [pc, #192]	; (8001a10 <MX_CAN1_Init+0xc8>)
 8001950:	4a30      	ldr	r2, [pc, #192]	; (8001a14 <MX_CAN1_Init+0xcc>)
 8001952:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8001954:	4b2e      	ldr	r3, [pc, #184]	; (8001a10 <MX_CAN1_Init+0xc8>)
 8001956:	2209      	movs	r2, #9
 8001958:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800195a:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <MX_CAN1_Init+0xc8>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001960:	4b2b      	ldr	r3, [pc, #172]	; (8001a10 <MX_CAN1_Init+0xc8>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001966:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <MX_CAN1_Init+0xc8>)
 8001968:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800196c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800196e:	4b28      	ldr	r3, [pc, #160]	; (8001a10 <MX_CAN1_Init+0xc8>)
 8001970:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001974:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001976:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <MX_CAN1_Init+0xc8>)
 8001978:	2200      	movs	r2, #0
 800197a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800197c:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <MX_CAN1_Init+0xc8>)
 800197e:	2200      	movs	r2, #0
 8001980:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001982:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <MX_CAN1_Init+0xc8>)
 8001984:	2200      	movs	r2, #0
 8001986:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001988:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <MX_CAN1_Init+0xc8>)
 800198a:	2200      	movs	r2, #0
 800198c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <MX_CAN1_Init+0xc8>)
 8001990:	2200      	movs	r2, #0
 8001992:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001994:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <MX_CAN1_Init+0xc8>)
 8001996:	2200      	movs	r2, #0
 8001998:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800199a:	481d      	ldr	r0, [pc, #116]	; (8001a10 <MX_CAN1_Init+0xc8>)
 800199c:	f002 fd5c 	bl	8004458 <HAL_CAN_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80019a6:	f001 fbc7 	bl	8003138 <Error_Handler>
  }

  /* USER CODE BEGIN CAN1_Init 2 */
  	CAN_FilterTypeDef canfil_1;
  	canfil_1.FilterBank = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
  	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
  	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 80019b2:	2301      	movs	r3, #1
 80019b4:	61fb      	str	r3, [r7, #28]
  	canfil_1.FilterIdHigh = 0x0000;
 80019b6:	2300      	movs	r3, #0
 80019b8:	603b      	str	r3, [r7, #0]
  	canfil_1.FilterIdLow = 0x0000;
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
  	canfil_1.FilterMaskIdHigh = 0x0000;
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
  	canfil_1.FilterMaskIdLow = 0x0000;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
  	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
  	canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 80019ca:	2301      	movs	r3, #1
 80019cc:	623b      	str	r3, [r7, #32]
  	canfil_1.SlaveStartFilterBank = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24

  	if (HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK)
 80019d2:	463b      	mov	r3, r7
 80019d4:	4619      	mov	r1, r3
 80019d6:	480e      	ldr	r0, [pc, #56]	; (8001a10 <MX_CAN1_Init+0xc8>)
 80019d8:	f002 ff5a 	bl	8004890 <HAL_CAN_ConfigFilter>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_CAN1_Init+0x9e>
  		Error_Handler();
 80019e2:	f001 fba9 	bl	8003138 <Error_Handler>

  	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING))
 80019e6:	2102      	movs	r1, #2
 80019e8:	4809      	ldr	r0, [pc, #36]	; (8001a10 <MX_CAN1_Init+0xc8>)
 80019ea:	f003 fb25 	bl	8005038 <HAL_CAN_ActivateNotification>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <MX_CAN1_Init+0xb2>
  		return Error_Handler();
 80019f4:	f001 fba0 	bl	8003138 <Error_Handler>
 80019f8:	e007      	b.n	8001a0a <MX_CAN1_Init+0xc2>

  	if (HAL_CAN_Start(&hcan1))
 80019fa:	4805      	ldr	r0, [pc, #20]	; (8001a10 <MX_CAN1_Init+0xc8>)
 80019fc:	f003 f896 	bl	8004b2c <HAL_CAN_Start>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_CAN1_Init+0xc2>
  		return Error_Handler();
 8001a06:	f001 fb97 	bl	8003138 <Error_Handler>


    /* USER CODE END CAN1_Init 2 */

}
 8001a0a:	3728      	adds	r7, #40	; 0x28
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000380 	.word	0x20000380
 8001a14:	40006400 	.word	0x40006400

08001a18 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	; 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a1d      	ldr	r2, [pc, #116]	; (8001aac <HAL_CAN_MspInit+0x94>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d133      	bne.n	8001aa2 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <HAL_CAN_MspInit+0x98>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	4a1b      	ldr	r2, [pc, #108]	; (8001ab0 <HAL_CAN_MspInit+0x98>)
 8001a44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a48:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <HAL_CAN_MspInit+0x98>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_CAN_MspInit+0x98>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a14      	ldr	r2, [pc, #80]	; (8001ab0 <HAL_CAN_MspInit+0x98>)
 8001a60:	f043 0308 	orr.w	r3, r3, #8
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_CAN_MspInit+0x98>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a72:	2303      	movs	r3, #3
 8001a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a82:	2309      	movs	r3, #9
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4809      	ldr	r0, [pc, #36]	; (8001ab4 <HAL_CAN_MspInit+0x9c>)
 8001a8e:	f004 fb89 	bl	80061a4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2100      	movs	r1, #0
 8001a96:	2014      	movs	r0, #20
 8001a98:	f003 fe20 	bl	80056dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001a9c:	2014      	movs	r0, #20
 8001a9e:	f003 fe49 	bl	8005734 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	3728      	adds	r7, #40	; 0x28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40006400 	.word	0x40006400
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020c00 	.word	0x40020c00

08001ab8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <MX_DMA_Init+0x3c>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <MX_DMA_Init+0x3c>)
 8001ac8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <MX_DMA_Init+0x3c>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2100      	movs	r1, #0
 8001ade:	200c      	movs	r0, #12
 8001ae0:	f003 fdfc 	bl	80056dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001ae4:	200c      	movs	r0, #12
 8001ae6:	f003 fe25 	bl	8005734 <HAL_NVIC_EnableIRQ>

}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800

08001af8 <ENCODER_Init>:
CAN_HandleTypeDef hcan2;
//uint8_t incoming[8];
//CAN_RxHeaderTypeDef RxHeader;

void ENCODER_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  //Assign each encoder to one of the two CAN buses
	encoderBack.hcan = &hcan1;
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <ENCODER_Init+0x24>)
 8001afe:	4a08      	ldr	r2, [pc, #32]	; (8001b20 <ENCODER_Init+0x28>)
 8001b00:	601a      	str	r2, [r3, #0]
	encoderFront.hcan = &hcan1;
 8001b02:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <ENCODER_Init+0x2c>)
 8001b04:	4a06      	ldr	r2, [pc, #24]	; (8001b20 <ENCODER_Init+0x28>)
 8001b06:	601a      	str	r2, [r3, #0]
	
	//Set Tx header for each encoder handle
	ENCODER_Set_TxHeader(&encoderBack, ENC_ADDR_LEFT);
 8001b08:	2101      	movs	r1, #1
 8001b0a:	4804      	ldr	r0, [pc, #16]	; (8001b1c <ENCODER_Init+0x24>)
 8001b0c:	f000 f83f 	bl	8001b8e <ENCODER_Set_TxHeader>
	ENCODER_Set_TxHeader(&encoderFront, ENC_ADDR_RIGHT);
 8001b10:	2102      	movs	r1, #2
 8001b12:	4804      	ldr	r0, [pc, #16]	; (8001b24 <ENCODER_Init+0x2c>)
 8001b14:	f000 f83b 	bl	8001b8e <ENCODER_Set_TxHeader>

}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000424 	.word	0x20000424
 8001b20:	20000380 	.word	0x20000380
 8001b24:	200003d0 	.word	0x200003d0

08001b28 <ENCODER_Sort_Incoming>:

void ENCODER_Sort_Incoming(uint8_t* incoming_array, EncoderHandle* Encoder_ptr){
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
	Encoder_ptr->rawRead[0] = incoming_array[0];
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	781a      	ldrb	r2, [r3, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Encoder_ptr->rawRead[1] = incoming_array[1];
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	785a      	ldrb	r2, [r3, #1]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Encoder_ptr->rawRead[2] = incoming_array[2];
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	789a      	ldrb	r2, [r3, #2]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Encoder_ptr->rawRead[3] = incoming_array[3];
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	78da      	ldrb	r2, [r3, #3]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	Encoder_ptr->rawRead[4] = incoming_array[4];
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	791a      	ldrb	r2, [r3, #4]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Encoder_ptr->rawRead[5] = incoming_array[5];
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	795a      	ldrb	r2, [r3, #5]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Encoder_ptr->rawRead[6] = incoming_array[6];
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	799a      	ldrb	r2, [r3, #6]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Encoder_ptr->rawRead[7] = incoming_array[7];
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	79da      	ldrb	r2, [r3, #7]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <ENCODER_Set_TxHeader>:

void ENCODER_Set_TxHeader(EncoderHandle* Encoder_ptr, uint32_t Encoder_Address){
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	6039      	str	r1, [r7, #0]
	Encoder_ptr->canTxHeader.DLC = 4;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2204      	movs	r2, #4
 8001b9c:	631a      	str	r2, [r3, #48]	; 0x30
	Encoder_ptr->canTxHeader.IDE = CAN_ID_STD;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder_ptr->canTxHeader.RTR = CAN_RTR_DATA;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	62da      	str	r2, [r3, #44]	; 0x2c
	Encoder_ptr->canTxHeader.StdId = Encoder_Address;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	621a      	str	r2, [r3, #32]
	Encoder_ptr->canTxHeader.TransmitGlobalTime = DISABLE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Encoder_ptr->canTxHeader.ExtId = 0;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <ENCODER_Read>:

void ENCODER_Read(EncoderHandle* Encoder_ptr){
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
	Encoder_ptr->sendData[0] = Encoder_ptr->canTxHeader.DLC;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	Encoder_ptr->sendData[1] = Encoder_ptr->canTxHeader.StdId;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Encoder_ptr->sendData[2] = 0x01;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	Encoder_ptr->sendData[3] = 0x00;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	
	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f103 0120 	add.w	r1, r3, #32
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3338      	adds	r3, #56	; 0x38
 8001c0e:	f002 ffd1 	bl	8004bb4 <HAL_CAN_AddTxMessage>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <ENCODER_Get_Angle>:
	Encoder_ptr->sendData[3] = 0x01;

	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
}

void ENCODER_Get_Angle(EncoderHandle* Encoder_ptr){
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
	ENCODER_Read(Encoder_ptr);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff ffd1 	bl	8001bca <ENCODER_Read>
	Encoder_ptr->angle32Bit.b8[0] = Encoder_ptr->rawRead[3];
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Encoder_ptr->angle32Bit.b8[1] = Encoder_ptr->rawRead[4];
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Encoder_ptr->angle32Bit.b8[2] = Encoder_ptr->rawRead[5];
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Encoder_ptr->angle32Bit.b8[3] = Encoder_ptr->rawRead[6];
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	//Get the outer gear encoder position
	//Gear ration from inner to outer gear is 1:2. Therefore, (2*4096=)8192 is used
//	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)) ; //Get single turn encoder reading
	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)); //Get single turn encoder reading
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8001c5e:	461a      	mov	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	441a      	add	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c70:	041b      	lsls	r3, r3, #16
 8001c72:	4413      	add	r3, r2
 8001c74:	461a      	mov	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	645a      	str	r2, [r3, #68]	; 0x44

	//Convert from encoder position to angle in degree
//	Encoder_ptr->angleDeg = (Encoder_ptr->encoder_pos * 360 /8192) ; //Get encoder angle

}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <MX_GPIO_Init>:
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
     PB5   ------> CAN2_RX
*/
void MX_GPIO_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08c      	sub	sp, #48	; 0x30
 8001c88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8a:	f107 031c 	add.w	r3, r7, #28
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]
 8001c98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
 8001c9e:	4b8a      	ldr	r3, [pc, #552]	; (8001ec8 <MX_GPIO_Init+0x244>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a89      	ldr	r2, [pc, #548]	; (8001ec8 <MX_GPIO_Init+0x244>)
 8001ca4:	f043 0310 	orr.w	r3, r3, #16
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b87      	ldr	r3, [pc, #540]	; (8001ec8 <MX_GPIO_Init+0x244>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0310 	and.w	r3, r3, #16
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	4b83      	ldr	r3, [pc, #524]	; (8001ec8 <MX_GPIO_Init+0x244>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a82      	ldr	r2, [pc, #520]	; (8001ec8 <MX_GPIO_Init+0x244>)
 8001cc0:	f043 0304 	orr.w	r3, r3, #4
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b80      	ldr	r3, [pc, #512]	; (8001ec8 <MX_GPIO_Init+0x244>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	4b7c      	ldr	r3, [pc, #496]	; (8001ec8 <MX_GPIO_Init+0x244>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a7b      	ldr	r2, [pc, #492]	; (8001ec8 <MX_GPIO_Init+0x244>)
 8001cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b79      	ldr	r3, [pc, #484]	; (8001ec8 <MX_GPIO_Init+0x244>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	4b75      	ldr	r3, [pc, #468]	; (8001ec8 <MX_GPIO_Init+0x244>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a74      	ldr	r2, [pc, #464]	; (8001ec8 <MX_GPIO_Init+0x244>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b72      	ldr	r3, [pc, #456]	; (8001ec8 <MX_GPIO_Init+0x244>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	4b6e      	ldr	r3, [pc, #440]	; (8001ec8 <MX_GPIO_Init+0x244>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a6d      	ldr	r2, [pc, #436]	; (8001ec8 <MX_GPIO_Init+0x244>)
 8001d14:	f043 0302 	orr.w	r3, r3, #2
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b6b      	ldr	r3, [pc, #428]	; (8001ec8 <MX_GPIO_Init+0x244>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
 8001d2a:	4b67      	ldr	r3, [pc, #412]	; (8001ec8 <MX_GPIO_Init+0x244>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a66      	ldr	r2, [pc, #408]	; (8001ec8 <MX_GPIO_Init+0x244>)
 8001d30:	f043 0308 	orr.w	r3, r3, #8
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b64      	ldr	r3, [pc, #400]	; (8001ec8 <MX_GPIO_Init+0x244>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001d42:	2200      	movs	r2, #0
 8001d44:	213f      	movs	r1, #63	; 0x3f
 8001d46:	4861      	ldr	r0, [pc, #388]	; (8001ecc <MX_GPIO_Init+0x248>)
 8001d48:	f004 fd7e 	bl	8006848 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2110      	movs	r1, #16
 8001d50:	485f      	ldr	r0, [pc, #380]	; (8001ed0 <MX_GPIO_Init+0x24c>)
 8001d52:	f004 fd79 	bl	8006848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001d56:	2200      	movs	r2, #0
 8001d58:	219b      	movs	r1, #155	; 0x9b
 8001d5a:	485e      	ldr	r0, [pc, #376]	; (8001ed4 <MX_GPIO_Init+0x250>)
 8001d5c:	f004 fd74 	bl	8006848 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8001d60:	2200      	movs	r2, #0
 8001d62:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8001d66:	485c      	ldr	r0, [pc, #368]	; (8001ed8 <MX_GPIO_Init+0x254>)
 8001d68:	f004 fd6e 	bl	8006848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f64e 4108 	movw	r1, #60424	; 0xec08
 8001d72:	485a      	ldr	r0, [pc, #360]	; (8001edc <MX_GPIO_Init+0x258>)
 8001d74:	f004 fd68 	bl	8006848 <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8001d78:	2307      	movs	r3, #7
 8001d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d80:	2302      	movs	r3, #2
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d84:	f107 031c 	add.w	r3, r7, #28
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4853      	ldr	r0, [pc, #332]	; (8001ed8 <MX_GPIO_Init+0x254>)
 8001d8c:	f004 fa0a 	bl	80061a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 8001d90:	f248 1378 	movw	r3, #33144	; 0x8178
 8001d94:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d9e:	f107 031c 	add.w	r3, r7, #28
 8001da2:	4619      	mov	r1, r3
 8001da4:	484c      	ldr	r0, [pc, #304]	; (8001ed8 <MX_GPIO_Init+0x254>)
 8001da6:	f004 f9fd 	bl	80061a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001daa:	233f      	movs	r3, #63	; 0x3f
 8001dac:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dae:	2301      	movs	r3, #1
 8001db0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001db2:	2301      	movs	r3, #1
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db6:	2300      	movs	r3, #0
 8001db8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dba:	f107 031c 	add.w	r3, r7, #28
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4842      	ldr	r0, [pc, #264]	; (8001ecc <MX_GPIO_Init+0x248>)
 8001dc2:	f004 f9ef 	bl	80061a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8001dc6:	2310      	movs	r3, #16
 8001dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001dd6:	f107 031c 	add.w	r3, r7, #28
 8001dda:	4619      	mov	r1, r3
 8001ddc:	483c      	ldr	r0, [pc, #240]	; (8001ed0 <MX_GPIO_Init+0x24c>)
 8001dde:	f004 f9e1 	bl	80061a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001de6:	4b3e      	ldr	r3, [pc, #248]	; (8001ee0 <MX_GPIO_Init+0x25c>)
 8001de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001dee:	f107 031c 	add.w	r3, r7, #28
 8001df2:	4619      	mov	r1, r3
 8001df4:	4836      	ldr	r0, [pc, #216]	; (8001ed0 <MX_GPIO_Init+0x24c>)
 8001df6:	f004 f9d5 	bl	80061a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001dfa:	239b      	movs	r3, #155	; 0x9b
 8001dfc:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e02:	2301      	movs	r3, #1
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0a:	f107 031c 	add.w	r3, r7, #28
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4830      	ldr	r0, [pc, #192]	; (8001ed4 <MX_GPIO_Init+0x250>)
 8001e12:	f004 f9c7 	bl	80061a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 8001e16:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8001e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e20:	2301      	movs	r3, #1
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2300      	movs	r3, #0
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e28:	f107 031c 	add.w	r3, r7, #28
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	482a      	ldr	r0, [pc, #168]	; (8001ed8 <MX_GPIO_Init+0x254>)
 8001e30:	f004 f9b8 	bl	80061a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin|CUI_SPI2_MOSI_Pin;
 8001e34:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e42:	2303      	movs	r3, #3
 8001e44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e46:	2305      	movs	r3, #5
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4a:	f107 031c 	add.w	r3, r7, #28
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4820      	ldr	r0, [pc, #128]	; (8001ed4 <MX_GPIO_Init+0x250>)
 8001e52:	f004 f9a7 	bl	80061a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001e56:	f64e 4308 	movw	r3, #60424	; 0xec08
 8001e5a:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e60:	2301      	movs	r3, #1
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	481b      	ldr	r0, [pc, #108]	; (8001edc <MX_GPIO_Init+0x258>)
 8001e70:	f004 f998 	bl	80061a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 8001e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 8001e82:	f107 031c 	add.w	r3, r7, #28
 8001e86:	4619      	mov	r1, r3
 8001e88:	4814      	ldr	r0, [pc, #80]	; (8001edc <MX_GPIO_Init+0x258>)
 8001e8a:	f004 f98b 	bl	80061a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e8e:	2320      	movs	r3, #32
 8001e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001e9e:	2309      	movs	r3, #9
 8001ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea2:	f107 031c 	add.w	r3, r7, #28
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	480a      	ldr	r0, [pc, #40]	; (8001ed4 <MX_GPIO_Init+0x250>)
 8001eaa:	f004 f97b 	bl	80061a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	2017      	movs	r0, #23
 8001eb4:	f003 fc12 	bl	80056dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001eb8:	2017      	movs	r0, #23
 8001eba:	f003 fc3b 	bl	8005734 <HAL_NVIC_EnableIRQ>

}
 8001ebe:	bf00      	nop
 8001ec0:	3730      	adds	r7, #48	; 0x30
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	40020400 	.word	0x40020400
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40020c00 	.word	0x40020c00
 8001ee0:	10210000 	.word	0x10210000

08001ee4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <MX_I2C1_Init+0x74>)
 8001eea:	4a1c      	ldr	r2, [pc, #112]	; (8001f5c <MX_I2C1_Init+0x78>)
 8001eec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001eee:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <MX_I2C1_Init+0x74>)
 8001ef0:	4a1b      	ldr	r2, [pc, #108]	; (8001f60 <MX_I2C1_Init+0x7c>)
 8001ef2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ef4:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <MX_I2C1_Init+0x74>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001efa:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <MX_I2C1_Init+0x74>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f00:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <MX_I2C1_Init+0x74>)
 8001f02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f08:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <MX_I2C1_Init+0x74>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <MX_I2C1_Init+0x74>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f14:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <MX_I2C1_Init+0x74>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <MX_I2C1_Init+0x74>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f20:	480d      	ldr	r0, [pc, #52]	; (8001f58 <MX_I2C1_Init+0x74>)
 8001f22:	f004 fcdb 	bl	80068dc <HAL_I2C_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f2c:	f001 f904 	bl	8003138 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f30:	2100      	movs	r1, #0
 8001f32:	4809      	ldr	r0, [pc, #36]	; (8001f58 <MX_I2C1_Init+0x74>)
 8001f34:	f005 fd32 	bl	800799c <HAL_I2CEx_ConfigAnalogFilter>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001f3e:	f001 f8fb 	bl	8003138 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f42:	2100      	movs	r1, #0
 8001f44:	4804      	ldr	r0, [pc, #16]	; (8001f58 <MX_I2C1_Init+0x74>)
 8001f46:	f005 fd89 	bl	8007a5c <HAL_I2CEx_ConfigDigitalFilter>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001f50:	f001 f8f2 	bl	8003138 <Error_Handler>
  }

}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000478 	.word	0x20000478
 8001f5c:	40005400 	.word	0x40005400
 8001f60:	00061a80 	.word	0x00061a80

08001f64 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08a      	sub	sp, #40	; 0x28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	f107 0314 	add.w	r3, r7, #20
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a19      	ldr	r2, [pc, #100]	; (8001fe8 <HAL_I2C_MspInit+0x84>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d12c      	bne.n	8001fe0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	4b18      	ldr	r3, [pc, #96]	; (8001fec <HAL_I2C_MspInit+0x88>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	4a17      	ldr	r2, [pc, #92]	; (8001fec <HAL_I2C_MspInit+0x88>)
 8001f90:	f043 0302 	orr.w	r3, r3, #2
 8001f94:	6313      	str	r3, [r2, #48]	; 0x30
 8001f96:	4b15      	ldr	r3, [pc, #84]	; (8001fec <HAL_I2C_MspInit+0x88>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8001fa2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fa8:	2312      	movs	r3, #18
 8001faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fac:	2301      	movs	r3, #1
 8001fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fb4:	2304      	movs	r3, #4
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	480c      	ldr	r0, [pc, #48]	; (8001ff0 <HAL_I2C_MspInit+0x8c>)
 8001fc0:	f004 f8f0 	bl	80061a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_I2C_MspInit+0x88>)
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	4a07      	ldr	r2, [pc, #28]	; (8001fec <HAL_I2C_MspInit+0x88>)
 8001fce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_I2C_MspInit+0x88>)
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	3728      	adds	r7, #40	; 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40005400 	.word	0x40005400
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	00000000 	.word	0x00000000

08001ff8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001ff8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8002000:	f002 f994 	bl	800432c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002004:	f000 fd54 	bl	8002ab0 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 8002008:	f006 fb7e 	bl	8008708 <HAL_RCC_GetHCLKFreq>
 800200c:	4603      	mov	r3, r0
 800200e:	4abe      	ldr	r2, [pc, #760]	; (8002308 <main+0x310>)
 8002010:	fba2 2303 	umull	r2, r3, r2, r3
 8002014:	099b      	lsrs	r3, r3, #6
 8002016:	4618      	mov	r0, r3
 8002018:	f003 fba4 	bl	8005764 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800201c:	2004      	movs	r0, #4
 800201e:	f003 fbad 	bl	800577c <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002022:	2200      	movs	r2, #0
 8002024:	2100      	movs	r1, #0
 8002026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800202a:	f003 fb57 	bl	80056dc <HAL_NVIC_SetPriority>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800202e:	f7ff fe29 	bl	8001c84 <MX_GPIO_Init>
	MX_DMA_Init();
 8002032:	f7ff fd41 	bl	8001ab8 <MX_DMA_Init>
	MX_I2C1_Init();
 8002036:	f7ff ff55 	bl	8001ee4 <MX_I2C1_Init>
	MX_TIM1_Init();
 800203a:	f001 fd33 	bl	8003aa4 <MX_TIM1_Init>
	MX_TIM2_Init();
 800203e:	f001 fdd1 	bl	8003be4 <MX_TIM2_Init>
	MX_USART3_UART_Init();
 8002042:	f002 f87b 	bl	800413c <MX_USART3_UART_Init>
	MX_TIM3_Init();
 8002046:	f001 fe47 	bl	8003cd8 <MX_TIM3_Init>
	MX_TIM8_Init();
 800204a:	f001 fec7 	bl	8003ddc <MX_TIM8_Init>
	MX_CAN1_Init();
 800204e:	f7ff fc7b 	bl	8001948 <MX_CAN1_Init>
	MX_SPI1_Init();
 8002052:	f001 fc1f 	bl	8003894 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	//Initialize hardware communication
//	joystick_Init();
//	ADC_Init();
//	ADC_DataRequest();
	ENCODER_Init();
 8002056:	f7ff fd4f 	bl	8001af8 <ENCODER_Init>
//	  DWT_Init();

	uint32_t state_count = HAL_GetTick();
 800205a:	f002 f9cd 	bl	80043f8 <HAL_GetTick>
 800205e:	6178      	str	r0, [r7, #20]
	while (MPU6050_Init(&hi2c1) == 1) {
 8002060:	e00a      	b.n	8002078 <main+0x80>
		if (HAL_GetTick() - state_count > 5000)
 8002062:	f002 f9c9 	bl	80043f8 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002070:	4293      	cmp	r3, r2
 8002072:	d901      	bls.n	8002078 <main+0x80>
			Error_Handler();
 8002074:	f001 f860 	bl	8003138 <Error_Handler>
	while (MPU6050_Init(&hi2c1) == 1) {
 8002078:	48a4      	ldr	r0, [pc, #656]	; (800230c <main+0x314>)
 800207a:	f001 f86f 	bl	800315c <MPU6050_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b01      	cmp	r3, #1
 8002082:	d0ee      	beq.n	8002062 <main+0x6a>
	}

	//Start base wheel PWM pin
	wheelSpeedControl_Init(&baseWheelSpeed, base_linSpeedLevel[base_speedLevel],
 8002084:	4ba2      	ldr	r3, [pc, #648]	; (8002310 <main+0x318>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4aa2      	ldr	r2, [pc, #648]	; (8002314 <main+0x31c>)
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	edd3 7a00 	vldr	s15, [r3]
 8002092:	4b9f      	ldr	r3, [pc, #636]	; (8002310 <main+0x318>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4aa0      	ldr	r2, [pc, #640]	; (8002318 <main+0x320>)
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	ed93 7a00 	vldr	s14, [r3]
 80020a0:	eef0 0a47 	vmov.f32	s1, s14
 80020a4:	eeb0 0a67 	vmov.f32	s0, s15
 80020a8:	489c      	ldr	r0, [pc, #624]	; (800231c <main+0x324>)
 80020aa:	f002 f8eb 	bl	8004284 <wheelSpeedControl_Init>
			base_angSpeedLevel[base_speedLevel]);
	HAL_TIM_Base_Start(&MOTOR_TIM);
 80020ae:	489c      	ldr	r0, [pc, #624]	; (8002320 <main+0x328>)
 80020b0:	f007 f928 	bl	8009304 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_1);
 80020b4:	2100      	movs	r1, #0
 80020b6:	489a      	ldr	r0, [pc, #616]	; (8002320 <main+0x328>)
 80020b8:	f007 fa84 	bl	80095c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_2);
 80020bc:	2104      	movs	r1, #4
 80020be:	4898      	ldr	r0, [pc, #608]	; (8002320 <main+0x328>)
 80020c0:	f007 fa80 	bl	80095c4 <HAL_TIM_PWM_Start>
	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = 1500;
 80020c4:	4b96      	ldr	r3, [pc, #600]	; (8002320 <main+0x328>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80020cc:	635a      	str	r2, [r3, #52]	; 0x34
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = 1500;
 80020ce:	4b94      	ldr	r3, [pc, #592]	; (8002320 <main+0x328>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80020d6:	639a      	str	r2, [r3, #56]	; 0x38

//	//Initialize rear and back motor
	bd25l_Init(&rearMotor);
 80020d8:	4892      	ldr	r0, [pc, #584]	; (8002324 <main+0x32c>)
 80020da:	f7ff fa83 	bl	80015e4 <bd25l_Init>
	bd25l_Init(&backMotor);
 80020de:	4892      	ldr	r0, [pc, #584]	; (8002328 <main+0x330>)
 80020e0:	f7ff fa80 	bl	80015e4 <bd25l_Init>
	runMotor(&rearMotor, 0);
 80020e4:	ed9f 0a91 	vldr	s0, [pc, #580]	; 800232c <main+0x334>
 80020e8:	488e      	ldr	r0, [pc, #568]	; (8002324 <main+0x32c>)
 80020ea:	f7ff fb7d 	bl	80017e8 <runMotor>
	runMotor(&backMotor, 0);
 80020ee:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 800232c <main+0x334>
 80020f2:	488d      	ldr	r0, [pc, #564]	; (8002328 <main+0x330>)
 80020f4:	f7ff fb78 	bl	80017e8 <runMotor>
	emBrakeMotor(0);
 80020f8:	2000      	movs	r0, #0
 80020fa:	f7ff fa95 	bl	8001628 <emBrakeMotor>
//
	//Initialize hub motor provided joystick control
	hubMotor_Init();
 80020fe:	f7ff f961 	bl	80013c4 <hubMotor_Init>
	send_HubMotor(0, 0);
 8002102:	eddf 0a8a 	vldr	s1, [pc, #552]	; 800232c <main+0x334>
 8002106:	ed9f 0a89 	vldr	s0, [pc, #548]	; 800232c <main+0x334>
 800210a:	f7ff f975 	bl	80013f8 <send_HubMotor>
	wheelSpeedControl_Init(&climbWheelSpeed,
 800210e:	4b88      	ldr	r3, [pc, #544]	; (8002330 <main+0x338>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a88      	ldr	r2, [pc, #544]	; (8002334 <main+0x33c>)
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	4b84      	ldr	r3, [pc, #528]	; (8002330 <main+0x338>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a85      	ldr	r2, [pc, #532]	; (8002338 <main+0x340>)
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	ed93 7a00 	vldr	s14, [r3]
 800212a:	eef0 0a47 	vmov.f32	s1, s14
 800212e:	eeb0 0a67 	vmov.f32	s0, s15
 8002132:	4882      	ldr	r0, [pc, #520]	; (800233c <main+0x344>)
 8002134:	f002 f8a6 	bl	8004284 <wheelSpeedControl_Init>
			climb_linSpeedLevel[climb_speedLevel],
			climb_angSpeedLevel[climb_speedLevel]);

	//Initialize front and back balance controller
	frontBalance_pid = pid_create(&frontBalance_ctrl, &frontBalance_input,
 8002138:	4b81      	ldr	r3, [pc, #516]	; (8002340 <main+0x348>)
 800213a:	edd3 7a00 	vldr	s15, [r3]
 800213e:	4b81      	ldr	r3, [pc, #516]	; (8002344 <main+0x34c>)
 8002140:	ed93 7a00 	vldr	s14, [r3]
 8002144:	4b80      	ldr	r3, [pc, #512]	; (8002348 <main+0x350>)
 8002146:	edd3 6a00 	vldr	s13, [r3]
 800214a:	eeb0 1a66 	vmov.f32	s2, s13
 800214e:	eef0 0a47 	vmov.f32	s1, s14
 8002152:	eeb0 0a67 	vmov.f32	s0, s15
 8002156:	4b7d      	ldr	r3, [pc, #500]	; (800234c <main+0x354>)
 8002158:	4a7d      	ldr	r2, [pc, #500]	; (8002350 <main+0x358>)
 800215a:	497e      	ldr	r1, [pc, #504]	; (8002354 <main+0x35c>)
 800215c:	487e      	ldr	r0, [pc, #504]	; (8002358 <main+0x360>)
 800215e:	f7fe fec7 	bl	8000ef0 <pid_create>
 8002162:	4603      	mov	r3, r0
 8002164:	4a7d      	ldr	r2, [pc, #500]	; (800235c <main+0x364>)
 8002166:	6013      	str	r3, [r2, #0]
			&frontBalance_output, &frontBalance_setpoint, frontBalance_kp,
			frontBalance_ki, frontBalance_kd);
	pid_limits(frontBalance_pid, -50, 50);
 8002168:	4b7c      	ldr	r3, [pc, #496]	; (800235c <main+0x364>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8002360 <main+0x368>
 8002170:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8002364 <main+0x36c>
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff f847 	bl	8001208 <pid_limits>
	pid_sample(frontBalance_pid, 1);
 800217a:	4b78      	ldr	r3, [pc, #480]	; (800235c <main+0x364>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2101      	movs	r1, #1
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff f80d 	bl	80011a0 <pid_sample>
	pid_auto(frontBalance_pid);
 8002186:	4b75      	ldr	r3, [pc, #468]	; (800235c <main+0x364>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff f8a1 	bl	80012d2 <pid_auto>

	backBalance_pid = pid_create(&backBalance_ctrl, &backBalance_input,
 8002190:	4b75      	ldr	r3, [pc, #468]	; (8002368 <main+0x370>)
 8002192:	edd3 7a00 	vldr	s15, [r3]
 8002196:	4b75      	ldr	r3, [pc, #468]	; (800236c <main+0x374>)
 8002198:	ed93 7a00 	vldr	s14, [r3]
 800219c:	4b74      	ldr	r3, [pc, #464]	; (8002370 <main+0x378>)
 800219e:	edd3 6a00 	vldr	s13, [r3]
 80021a2:	eeb0 1a66 	vmov.f32	s2, s13
 80021a6:	eef0 0a47 	vmov.f32	s1, s14
 80021aa:	eeb0 0a67 	vmov.f32	s0, s15
 80021ae:	4b71      	ldr	r3, [pc, #452]	; (8002374 <main+0x37c>)
 80021b0:	4a71      	ldr	r2, [pc, #452]	; (8002378 <main+0x380>)
 80021b2:	4972      	ldr	r1, [pc, #456]	; (800237c <main+0x384>)
 80021b4:	4872      	ldr	r0, [pc, #456]	; (8002380 <main+0x388>)
 80021b6:	f7fe fe9b 	bl	8000ef0 <pid_create>
 80021ba:	4603      	mov	r3, r0
 80021bc:	4a71      	ldr	r2, [pc, #452]	; (8002384 <main+0x38c>)
 80021be:	6013      	str	r3, [r2, #0]
			&backBalance_output, &backBalance_setpoint, backBalance_kp,
			backBalance_ki, backBalance_kd);
	pid_limits(backBalance_pid, -20, 20);
 80021c0:	4b70      	ldr	r3, [pc, #448]	; (8002384 <main+0x38c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 80021c8:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff f81b 	bl	8001208 <pid_limits>
	pid_sample(backBalance_pid, 1);
 80021d2:	4b6c      	ldr	r3, [pc, #432]	; (8002384 <main+0x38c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2101      	movs	r1, #1
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe ffe1 	bl	80011a0 <pid_sample>
	pid_auto(backBalance_pid);
 80021de:	4b69      	ldr	r3, [pc, #420]	; (8002384 <main+0x38c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff f875 	bl	80012d2 <pid_auto>

	//Initialize front and back climbing position controller
	frontClimb_pid = pid_create(&frontClimb_ctrl, &frontClimb_input,
 80021e8:	4b67      	ldr	r3, [pc, #412]	; (8002388 <main+0x390>)
 80021ea:	edd3 7a00 	vldr	s15, [r3]
 80021ee:	4b67      	ldr	r3, [pc, #412]	; (800238c <main+0x394>)
 80021f0:	ed93 7a00 	vldr	s14, [r3]
 80021f4:	4b66      	ldr	r3, [pc, #408]	; (8002390 <main+0x398>)
 80021f6:	edd3 6a00 	vldr	s13, [r3]
 80021fa:	eeb0 1a66 	vmov.f32	s2, s13
 80021fe:	eef0 0a47 	vmov.f32	s1, s14
 8002202:	eeb0 0a67 	vmov.f32	s0, s15
 8002206:	4b63      	ldr	r3, [pc, #396]	; (8002394 <main+0x39c>)
 8002208:	4a63      	ldr	r2, [pc, #396]	; (8002398 <main+0x3a0>)
 800220a:	4964      	ldr	r1, [pc, #400]	; (800239c <main+0x3a4>)
 800220c:	4864      	ldr	r0, [pc, #400]	; (80023a0 <main+0x3a8>)
 800220e:	f7fe fe6f 	bl	8000ef0 <pid_create>
 8002212:	4603      	mov	r3, r0
 8002214:	4a63      	ldr	r2, [pc, #396]	; (80023a4 <main+0x3ac>)
 8002216:	6013      	str	r3, [r2, #0]
			&frontClimb_output, &frontClimb_setpoint, frontClimb_kp,
			frontClimb_ki, frontClimb_kd);
	pid_limits(frontClimb_pid, -50, 50);
 8002218:	4b62      	ldr	r3, [pc, #392]	; (80023a4 <main+0x3ac>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	eddf 0a50 	vldr	s1, [pc, #320]	; 8002360 <main+0x368>
 8002220:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8002364 <main+0x36c>
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe ffef 	bl	8001208 <pid_limits>
	pid_sample(frontClimb_pid, 1);
 800222a:	4b5e      	ldr	r3, [pc, #376]	; (80023a4 <main+0x3ac>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2101      	movs	r1, #1
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe ffb5 	bl	80011a0 <pid_sample>
	pid_auto(frontClimb_pid);
 8002236:	4b5b      	ldr	r3, [pc, #364]	; (80023a4 <main+0x3ac>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff f849 	bl	80012d2 <pid_auto>

	backClimb_pid = pid_create(&backClimb_ctrl, &backClimb_input,
 8002240:	4b59      	ldr	r3, [pc, #356]	; (80023a8 <main+0x3b0>)
 8002242:	edd3 7a00 	vldr	s15, [r3]
 8002246:	4b59      	ldr	r3, [pc, #356]	; (80023ac <main+0x3b4>)
 8002248:	ed93 7a00 	vldr	s14, [r3]
 800224c:	4b58      	ldr	r3, [pc, #352]	; (80023b0 <main+0x3b8>)
 800224e:	edd3 6a00 	vldr	s13, [r3]
 8002252:	eeb0 1a66 	vmov.f32	s2, s13
 8002256:	eef0 0a47 	vmov.f32	s1, s14
 800225a:	eeb0 0a67 	vmov.f32	s0, s15
 800225e:	4b55      	ldr	r3, [pc, #340]	; (80023b4 <main+0x3bc>)
 8002260:	4a55      	ldr	r2, [pc, #340]	; (80023b8 <main+0x3c0>)
 8002262:	4956      	ldr	r1, [pc, #344]	; (80023bc <main+0x3c4>)
 8002264:	4856      	ldr	r0, [pc, #344]	; (80023c0 <main+0x3c8>)
 8002266:	f7fe fe43 	bl	8000ef0 <pid_create>
 800226a:	4603      	mov	r3, r0
 800226c:	4a55      	ldr	r2, [pc, #340]	; (80023c4 <main+0x3cc>)
 800226e:	6013      	str	r3, [r2, #0]
			&backClimb_output, &backClimb_setpoint, backClimb_kp, backClimb_ki,
			backClimb_kd);
	pid_limits(backClimb_pid, -50, 50);
 8002270:	4b54      	ldr	r3, [pc, #336]	; (80023c4 <main+0x3cc>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8002360 <main+0x368>
 8002278:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8002364 <main+0x36c>
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe ffc3 	bl	8001208 <pid_limits>
	pid_sample(backClimb_pid, 1);
 8002282:	4b50      	ldr	r3, [pc, #320]	; (80023c4 <main+0x3cc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2101      	movs	r1, #1
 8002288:	4618      	mov	r0, r3
 800228a:	f7fe ff89 	bl	80011a0 <pid_sample>
	pid_auto(backClimb_pid);
 800228e:	4b4d      	ldr	r3, [pc, #308]	; (80023c4 <main+0x3cc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff f81d 	bl	80012d2 <pid_auto>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint32_t prev_time = HAL_GetTick();
 8002298:	f002 f8ae 	bl	80043f8 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]
	ENCODER_Get_Angle(&encoderBack);
 800229e:	484a      	ldr	r0, [pc, #296]	; (80023c8 <main+0x3d0>)
 80022a0:	f7ff fcbb 	bl	8001c1a <ENCODER_Get_Angle>
	ENCODER_Get_Angle(&encoderFront);
 80022a4:	4849      	ldr	r0, [pc, #292]	; (80023cc <main+0x3d4>)
 80022a6:	f7ff fcb8 	bl	8001c1a <ENCODER_Get_Angle>
	while (state_count++ < 1000)
 80022aa:	e003      	b.n	80022b4 <main+0x2bc>
		MPU6050_Read_All(&hi2c1, &MPU6050);
 80022ac:	4948      	ldr	r1, [pc, #288]	; (80023d0 <main+0x3d8>)
 80022ae:	4817      	ldr	r0, [pc, #92]	; (800230c <main+0x314>)
 80022b0:	f000 ffae 	bl	8003210 <MPU6050_Read_All>
	while (state_count++ < 1000)
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	617a      	str	r2, [r7, #20]
 80022ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022be:	d3f5      	bcc.n	80022ac <main+0x2b4>
	initial_angle = MPU6050.KalmanAngleX;
 80022c0:	4b43      	ldr	r3, [pc, #268]	; (80023d0 <main+0x3d8>)
 80022c2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80022c6:	4943      	ldr	r1, [pc, #268]	; (80023d4 <main+0x3dc>)
 80022c8:	e9c1 2300 	strd	r2, r3, [r1]
	state_count = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
	emBrakeMotor(1);
 80022d0:	2001      	movs	r0, #1
 80022d2:	f7ff f9a9 	bl	8001628 <emBrakeMotor>
	//Reset encoder position
//	ENCODER_Set_ZeroPosition(&encoderBack);
//	ENCODER_Set_ZeroPosition(&encoderFront);
	//debug variable
	uint32_t debug_prev_time = HAL_GetTick();
 80022d6:	f002 f88f 	bl	80043f8 <HAL_GetTick>
 80022da:	60f8      	str	r0, [r7, #12]
	uint8_t led_status = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	72fb      	strb	r3, [r7, #11]
	//  float speed = 0;
	while (1) {
		//Code to debug with blinking LED
		if (HAL_GetTick() - debug_prev_time >= 1000) {
 80022e0:	f002 f88a 	bl	80043f8 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022ee:	f0c0 8082 	bcc.w	80023f6 <main+0x3fe>
			if (led_status == 0) {
 80022f2:	7afb      	ldrb	r3, [r7, #11]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d171      	bne.n	80023dc <main+0x3e4>
				//	      count++;
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80022f8:	2201      	movs	r2, #1
 80022fa:	2108      	movs	r1, #8
 80022fc:	4836      	ldr	r0, [pc, #216]	; (80023d8 <main+0x3e0>)
 80022fe:	f004 faa3 	bl	8006848 <HAL_GPIO_WritePin>
				led_status = 1;
 8002302:	2301      	movs	r3, #1
 8002304:	72fb      	strb	r3, [r7, #11]
 8002306:	e073      	b.n	80023f0 <main+0x3f8>
 8002308:	10624dd3 	.word	0x10624dd3
 800230c:	20000478 	.word	0x20000478
 8002310:	20000108 	.word	0x20000108
 8002314:	0800e30c 	.word	0x0800e30c
 8002318:	0800e318 	.word	0x0800e318
 800231c:	200000d8 	.word	0x200000d8
 8002320:	20000690 	.word	0x20000690
 8002324:	20000000 	.word	0x20000000
 8002328:	20000034 	.word	0x20000034
 800232c:	00000000 	.word	0x00000000
 8002330:	20000304 	.word	0x20000304
 8002334:	0800e324 	.word	0x0800e324
 8002338:	0800e330 	.word	0x0800e330
 800233c:	20000138 	.word	0x20000138
 8002340:	200002ac 	.word	0x200002ac
 8002344:	200002b0 	.word	0x200002b0
 8002348:	200002b4 	.word	0x200002b4
 800234c:	200002a8 	.word	0x200002a8
 8002350:	200002a4 	.word	0x200002a4
 8002354:	200002a0 	.word	0x200002a0
 8002358:	200004d4 	.word	0x200004d4
 800235c:	200005f0 	.word	0x200005f0
 8002360:	42480000 	.word	0x42480000
 8002364:	c2480000 	.word	0xc2480000
 8002368:	20000118 	.word	0x20000118
 800236c:	200002c4 	.word	0x200002c4
 8002370:	200002c8 	.word	0x200002c8
 8002374:	200002c0 	.word	0x200002c0
 8002378:	200002bc 	.word	0x200002bc
 800237c:	200002b8 	.word	0x200002b8
 8002380:	20000510 	.word	0x20000510
 8002384:	200005a8 	.word	0x200005a8
 8002388:	2000011c 	.word	0x2000011c
 800238c:	20000120 	.word	0x20000120
 8002390:	20000124 	.word	0x20000124
 8002394:	200002e4 	.word	0x200002e4
 8002398:	200002e0 	.word	0x200002e0
 800239c:	200002dc 	.word	0x200002dc
 80023a0:	200005f8 	.word	0x200005f8
 80023a4:	200005f4 	.word	0x200005f4
 80023a8:	20000128 	.word	0x20000128
 80023ac:	2000012c 	.word	0x2000012c
 80023b0:	20000130 	.word	0x20000130
 80023b4:	200002f0 	.word	0x200002f0
 80023b8:	200002ec 	.word	0x200002ec
 80023bc:	200002e8 	.word	0x200002e8
 80023c0:	200005ac 	.word	0x200005ac
 80023c4:	20000648 	.word	0x20000648
 80023c8:	20000424 	.word	0x20000424
 80023cc:	200003d0 	.word	0x200003d0
 80023d0:	20000548 	.word	0x20000548
 80023d4:	20000298 	.word	0x20000298
 80023d8:	40020400 	.word	0x40020400
			} else if (led_status == 1) {
 80023dc:	7afb      	ldrb	r3, [r7, #11]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d106      	bne.n	80023f0 <main+0x3f8>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80023e2:	2200      	movs	r2, #0
 80023e4:	2108      	movs	r1, #8
 80023e6:	486e      	ldr	r0, [pc, #440]	; (80025a0 <main+0x5a8>)
 80023e8:	f004 fa2e 	bl	8006848 <HAL_GPIO_WritePin>
				led_status = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	72fb      	strb	r3, [r7, #11]
			}
			debug_prev_time = HAL_GetTick();
 80023f0:	f002 f802 	bl	80043f8 <HAL_GetTick>
 80023f4:	60f8      	str	r0, [r7, #12]

		//      runMotor(&backMotor, speed++, 1);xia
//		ENCODER_Get_Angle(&encoderBack);
//		ENCODER_Get_Angle(&encoderFront);
		//Loop should execute once every 1 tick
		if (HAL_GetTick() - prev_time >= 1) {
 80023f6:	f001 ffff 	bl	80043f8 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4293      	cmp	r3, r2
 8002400:	f43f af6e 	beq.w	80022e0 <main+0x2e8>
			//	ADC_DataRequest();
			ENCODER_Read(&encoderBack);
 8002404:	4867      	ldr	r0, [pc, #412]	; (80025a4 <main+0x5ac>)
 8002406:	f7ff fbe0 	bl	8001bca <ENCODER_Read>
			ENCODER_Read(&encoderFront);
 800240a:	4867      	ldr	r0, [pc, #412]	; (80025a8 <main+0x5b0>)
 800240c:	f7ff fbdd 	bl	8001bca <ENCODER_Read>

			//Get kamlan filtered angle from MPU6050
			MPU6050_Read_All(&hi2c1, &MPU6050);
 8002410:	4966      	ldr	r1, [pc, #408]	; (80025ac <main+0x5b4>)
 8002412:	4867      	ldr	r0, [pc, #412]	; (80025b0 <main+0x5b8>)
 8002414:	f000 fefc 	bl	8003210 <MPU6050_Read_All>
			GPIO_Digital_Filtered_Input(&button1, 30);
 8002418:	211e      	movs	r1, #30
 800241a:	4866      	ldr	r0, [pc, #408]	; (80025b4 <main+0x5bc>)
 800241c:	f7ff fa5b 	bl	80018d6 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button2, 30);
 8002420:	211e      	movs	r1, #30
 8002422:	4865      	ldr	r0, [pc, #404]	; (80025b8 <main+0x5c0>)
 8002424:	f7ff fa57 	bl	80018d6 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button3, 30);
 8002428:	211e      	movs	r1, #30
 800242a:	4864      	ldr	r0, [pc, #400]	; (80025bc <main+0x5c4>)
 800242c:	f7ff fa53 	bl	80018d6 <GPIO_Digital_Filtered_Input>

			GPIO_Digital_Filtered_Input(&rearLS1, 5);
 8002430:	2105      	movs	r1, #5
 8002432:	4863      	ldr	r0, [pc, #396]	; (80025c0 <main+0x5c8>)
 8002434:	f7ff fa4f 	bl	80018d6 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&rearLS2, 5);
 8002438:	2105      	movs	r1, #5
 800243a:	4862      	ldr	r0, [pc, #392]	; (80025c4 <main+0x5cc>)
 800243c:	f7ff fa4b 	bl	80018d6 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS1, 5);
 8002440:	2105      	movs	r1, #5
 8002442:	4861      	ldr	r0, [pc, #388]	; (80025c8 <main+0x5d0>)
 8002444:	f7ff fa47 	bl	80018d6 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS2, 5);
 8002448:	2105      	movs	r1, #5
 800244a:	4860      	ldr	r0, [pc, #384]	; (80025cc <main+0x5d4>)
 800244c:	f7ff fa43 	bl	80018d6 <GPIO_Digital_Filtered_Input>
			//1. Climbing wheel extension
			//2. Wheelchair lifting/dropping
			//3. Climbing wheel retraction
			//---------------------------------------------------------------------------------------------------
			//Climbing wheel start landing when button3 is pressed
			if (button3.state == 1 && front_touchdown == false
 8002450:	4b5a      	ldr	r3, [pc, #360]	; (80025bc <main+0x5c4>)
 8002452:	7a1b      	ldrb	r3, [r3, #8]
 8002454:	2b01      	cmp	r3, #1
 8002456:	f040 80cd 	bne.w	80025f4 <main+0x5fc>
 800245a:	4b5d      	ldr	r3, [pc, #372]	; (80025d0 <main+0x5d8>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	f040 80c8 	bne.w	80025f4 <main+0x5fc>
					&& back_touchdown == false && lifting_mode == 0) {
 8002464:	4b5b      	ldr	r3, [pc, #364]	; (80025d4 <main+0x5dc>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	f040 80c3 	bne.w	80025f4 <main+0x5fc>
 800246e:	4b5a      	ldr	r3, [pc, #360]	; (80025d8 <main+0x5e0>)
 8002470:	f993 3000 	ldrsb.w	r3, [r3]
 8002474:	2b00      	cmp	r3, #0
 8002476:	f040 80bd 	bne.w	80025f4 <main+0x5fc>
				emBrakeMotor(1);
 800247a:	2001      	movs	r0, #1
 800247c:	f7ff f8d4 	bl	8001628 <emBrakeMotor>
				while (front_touchdown == false || back_touchdown == false) {
 8002480:	e07e      	b.n	8002580 <main+0x588>
					if (GPIO_Digital_Filtered_Input(&rearLS1, 5)
 8002482:	2105      	movs	r1, #5
 8002484:	484e      	ldr	r0, [pc, #312]	; (80025c0 <main+0x5c8>)
 8002486:	f7ff fa26 	bl	80018d6 <GPIO_Digital_Filtered_Input>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d106      	bne.n	800249e <main+0x4a6>
							|| GPIO_Digital_Filtered_Input(&rearLS2, 5))
 8002490:	2105      	movs	r1, #5
 8002492:	484c      	ldr	r0, [pc, #304]	; (80025c4 <main+0x5cc>)
 8002494:	f7ff fa1f 	bl	80018d6 <GPIO_Digital_Filtered_Input>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <main+0x4ac>
						front_touchdown = 1;
 800249e:	4b4c      	ldr	r3, [pc, #304]	; (80025d0 <main+0x5d8>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	701a      	strb	r2, [r3, #0]
					if (GPIO_Digital_Filtered_Input(&backLS1, 5)
 80024a4:	2105      	movs	r1, #5
 80024a6:	4848      	ldr	r0, [pc, #288]	; (80025c8 <main+0x5d0>)
 80024a8:	f7ff fa15 	bl	80018d6 <GPIO_Digital_Filtered_Input>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d106      	bne.n	80024c0 <main+0x4c8>
							|| GPIO_Digital_Filtered_Input(&backLS2, 5))
 80024b2:	2105      	movs	r1, #5
 80024b4:	4845      	ldr	r0, [pc, #276]	; (80025cc <main+0x5d4>)
 80024b6:	f7ff fa0e 	bl	80018d6 <GPIO_Digital_Filtered_Input>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <main+0x4ce>
						back_touchdown = 1;
 80024c0:	4b44      	ldr	r3, [pc, #272]	; (80025d4 <main+0x5dc>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	701a      	strb	r2, [r3, #0]

					//if front touch before back, climbing up process
					if (back_touchdown == 0 && front_touchdown == 1)
 80024c6:	4b43      	ldr	r3, [pc, #268]	; (80025d4 <main+0x5dc>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d107      	bne.n	80024de <main+0x4e6>
 80024ce:	4b40      	ldr	r3, [pc, #256]	; (80025d0 <main+0x5d8>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d103      	bne.n	80024de <main+0x4e6>
						lifting_mode = 1;
 80024d6:	4b40      	ldr	r3, [pc, #256]	; (80025d8 <main+0x5e0>)
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
 80024dc:	e00a      	b.n	80024f4 <main+0x4fc>
					//if back touch before front, climbing down process
					else if (back_touchdown == 1 && front_touchdown == 0)
 80024de:	4b3d      	ldr	r3, [pc, #244]	; (80025d4 <main+0x5dc>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d106      	bne.n	80024f4 <main+0x4fc>
 80024e6:	4b3a      	ldr	r3, [pc, #232]	; (80025d0 <main+0x5d8>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d102      	bne.n	80024f4 <main+0x4fc>
						lifting_mode = 2;
 80024ee:	4b3a      	ldr	r3, [pc, #232]	; (80025d8 <main+0x5e0>)
 80024f0:	2202      	movs	r2, #2
 80024f2:	701a      	strb	r2, [r3, #0]

					initial_angle = exp_angle_filter * MPU6050.KalmanAngleX
 80024f4:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <main+0x5b4>)
 80024f6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80024fa:	4b38      	ldr	r3, [pc, #224]	; (80025dc <main+0x5e4>)
 80024fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002500:	f7fe f832 	bl	8000568 <__aeabi_dmul>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4614      	mov	r4, r2
 800250a:	461d      	mov	r5, r3
							+ (1 - exp_angle_filter) * initial_angle;
 800250c:	4b33      	ldr	r3, [pc, #204]	; (80025dc <main+0x5e4>)
 800250e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002512:	f04f 0000 	mov.w	r0, #0
 8002516:	4932      	ldr	r1, [pc, #200]	; (80025e0 <main+0x5e8>)
 8002518:	f7fd fe6e 	bl	80001f8 <__aeabi_dsub>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4610      	mov	r0, r2
 8002522:	4619      	mov	r1, r3
 8002524:	4b2f      	ldr	r3, [pc, #188]	; (80025e4 <main+0x5ec>)
 8002526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252a:	f7fe f81d 	bl	8000568 <__aeabi_dmul>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4620      	mov	r0, r4
 8002534:	4629      	mov	r1, r5
 8002536:	f7fd fe61 	bl	80001fc <__adddf3>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
					initial_angle = exp_angle_filter * MPU6050.KalmanAngleX
 800253e:	4929      	ldr	r1, [pc, #164]	; (80025e4 <main+0x5ec>)
 8002540:	e9c1 2300 	strd	r2, r3, [r1]

					if (back_touchdown == false)
 8002544:	4b23      	ldr	r3, [pc, #140]	; (80025d4 <main+0x5dc>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d105      	bne.n	8002558 <main+0x560>
						runMotor(&backMotor, 5);
 800254c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002550:	4825      	ldr	r0, [pc, #148]	; (80025e8 <main+0x5f0>)
 8002552:	f7ff f949 	bl	80017e8 <runMotor>
 8002556:	e004      	b.n	8002562 <main+0x56a>
					else
						runMotor(&backMotor, 0);
 8002558:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80025ec <main+0x5f4>
 800255c:	4822      	ldr	r0, [pc, #136]	; (80025e8 <main+0x5f0>)
 800255e:	f7ff f943 	bl	80017e8 <runMotor>

					if (front_touchdown == false)
 8002562:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <main+0x5d8>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d105      	bne.n	8002576 <main+0x57e>
						runMotor(&rearMotor, 5);
 800256a:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800256e:	4820      	ldr	r0, [pc, #128]	; (80025f0 <main+0x5f8>)
 8002570:	f7ff f93a 	bl	80017e8 <runMotor>
 8002574:	e004      	b.n	8002580 <main+0x588>
					else
						runMotor(&rearMotor, 0);
 8002576:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80025ec <main+0x5f4>
 800257a:	481d      	ldr	r0, [pc, #116]	; (80025f0 <main+0x5f8>)
 800257c:	f7ff f934 	bl	80017e8 <runMotor>
				while (front_touchdown == false || back_touchdown == false) {
 8002580:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <main+0x5d8>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	f43f af7c 	beq.w	8002482 <main+0x48a>
 800258a:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <main+0x5dc>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f43f af77 	beq.w	8002482 <main+0x48a>
				}

				HAL_Delay(500);
 8002594:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002598:	f001 ff3a 	bl	8004410 <HAL_Delay>
				continue; //to refresh the loop and get the latest encoder reading
 800259c:	e25e      	b.n	8002a5c <main+0xa64>
 800259e:	bf00      	nop
 80025a0:	40020400 	.word	0x40020400
 80025a4:	20000424 	.word	0x20000424
 80025a8:	200003d0 	.word	0x200003d0
 80025ac:	20000548 	.word	0x20000548
 80025b0:	20000478 	.word	0x20000478
 80025b4:	200000a8 	.word	0x200000a8
 80025b8:	200000b8 	.word	0x200000b8
 80025bc:	200000c8 	.word	0x200000c8
 80025c0:	20000068 	.word	0x20000068
 80025c4:	20000078 	.word	0x20000078
 80025c8:	20000088 	.word	0x20000088
 80025cc:	20000098 	.word	0x20000098
 80025d0:	20000291 	.word	0x20000291
 80025d4:	20000292 	.word	0x20000292
 80025d8:	20000290 	.word	0x20000290
 80025dc:	20000110 	.word	0x20000110
 80025e0:	3ff00000 	.word	0x3ff00000
 80025e4:	20000298 	.word	0x20000298
 80025e8:	20000034 	.word	0x20000034
 80025ec:	00000000 	.word	0x00000000
 80025f0:	20000000 	.word	0x20000000
//						* (4096 * BACK_GEAR_RATIO);

			}

			//Normal wheelchair mode, basic joystick control mode
			if (lifting_mode == 0) {
 80025f4:	4b72      	ldr	r3, [pc, #456]	; (80027c0 <main+0x7c8>)
 80025f6:	f993 3000 	ldrsb.w	r3, [r3]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d111      	bne.n	8002622 <main+0x62a>
//				wheel_Control(&baseWheelSpeed);
//				baseMotorCommand();
				goto_pos(0, frontClimb_pid);
 80025fe:	4b71      	ldr	r3, [pc, #452]	; (80027c4 <main+0x7cc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4619      	mov	r1, r3
 8002604:	2000      	movs	r0, #0
 8002606:	f000 fca3 	bl	8002f50 <goto_pos>
				goto_pos(0, backClimb_pid);
 800260a:	4b6f      	ldr	r3, [pc, #444]	; (80027c8 <main+0x7d0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4619      	mov	r1, r3
 8002610:	2000      	movs	r0, #0
 8002612:	f000 fc9d 	bl	8002f50 <goto_pos>
				front_touchdown = false;
 8002616:	4b6d      	ldr	r3, [pc, #436]	; (80027cc <main+0x7d4>)
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
				back_touchdown = false;
 800261c:	4b6c      	ldr	r3, [pc, #432]	; (80027d0 <main+0x7d8>)
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]

			}

//			//Climbing up process
			if (lifting_mode == 1) {
 8002622:	4b67      	ldr	r3, [pc, #412]	; (80027c0 <main+0x7c8>)
 8002624:	f993 3000 	ldrsb.w	r3, [r3]
 8002628:	2b01      	cmp	r3, #1
 800262a:	f040 81f0 	bne.w	8002a0e <main+0xa16>
				//If curb_height is positive, should be climbing up process and vice versa
								curb_height = CLIMBING_LEG_LENGTH
										* cos(TO_RAD(encoderFront.angleDeg)) + BASE_HEIGHT
 800262e:	4b69      	ldr	r3, [pc, #420]	; (80027d4 <main+0x7dc>)
 8002630:	4618      	mov	r0, r3
 8002632:	f7fd ff41 	bl	80004b8 <__aeabi_f2d>
 8002636:	4604      	mov	r4, r0
 8002638:	460d      	mov	r5, r1
 800263a:	4b67      	ldr	r3, [pc, #412]	; (80027d8 <main+0x7e0>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	4618      	mov	r0, r3
 8002640:	f7fd ff3a 	bl	80004b8 <__aeabi_f2d>
 8002644:	a358      	add	r3, pc, #352	; (adr r3, 80027a8 <main+0x7b0>)
 8002646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264a:	f7fd ff8d 	bl	8000568 <__aeabi_dmul>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	4b60      	ldr	r3, [pc, #384]	; (80027dc <main+0x7e4>)
 800265c:	f7fe f8ae 	bl	80007bc <__aeabi_ddiv>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	ec43 2b17 	vmov	d7, r2, r3
 8002668:	eeb0 0a47 	vmov.f32	s0, s14
 800266c:	eef0 0a67 	vmov.f32	s1, s15
 8002670:	f00a f81e 	bl	800c6b0 <cos>
 8002674:	ec53 2b10 	vmov	r2, r3, d0
 8002678:	4620      	mov	r0, r4
 800267a:	4629      	mov	r1, r5
 800267c:	f7fd ff74 	bl	8000568 <__aeabi_dmul>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4614      	mov	r4, r2
 8002686:	461d      	mov	r5, r3
 8002688:	4b55      	ldr	r3, [pc, #340]	; (80027e0 <main+0x7e8>)
 800268a:	4618      	mov	r0, r3
 800268c:	f7fd ff14 	bl	80004b8 <__aeabi_f2d>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4620      	mov	r0, r4
 8002696:	4629      	mov	r1, r5
 8002698:	f7fd fdb0 	bl	80001fc <__adddf3>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4610      	mov	r0, r2
 80026a2:	4619      	mov	r1, r3
										- FRONT_CLIMB_WHEEL_DIAMETER / 2.0;
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	4b4e      	ldr	r3, [pc, #312]	; (80027e4 <main+0x7ec>)
 80026aa:	f7fd fda5 	bl	80001f8 <__aeabi_dsub>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	4610      	mov	r0, r2
 80026b4:	4619      	mov	r1, r3
 80026b6:	f7fe fa4f 	bl	8000b58 <__aeabi_d2f>
 80026ba:	4603      	mov	r3, r0
								curb_height = CLIMBING_LEG_LENGTH
 80026bc:	4a4a      	ldr	r2, [pc, #296]	; (80027e8 <main+0x7f0>)
 80026be:	6013      	str	r3, [r2, #0]
//								curb_height -= 0.01; //Small error correction

				//First determine whether is the height climb-able
				back_lifting_height = BACK_BASE_HEIGHT + curb_height
 80026c0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80027ec <main+0x7f4>
 80026c4:	4b48      	ldr	r3, [pc, #288]	; (80027e8 <main+0x7f0>)
 80026c6:	edd3 7a00 	vldr	s15, [r3]
 80026ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ce:	ee17 0a90 	vmov	r0, s15
 80026d2:	f7fd fef1 	bl	80004b8 <__aeabi_f2d>
						- HUB_DIAMETER / 2;
 80026d6:	a336      	add	r3, pc, #216	; (adr r3, 80027b0 <main+0x7b8>)
 80026d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026dc:	f7fd fd8c 	bl	80001f8 <__aeabi_dsub>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	f7fe fa36 	bl	8000b58 <__aeabi_d2f>
 80026ec:	4603      	mov	r3, r0
				back_lifting_height = BACK_BASE_HEIGHT + curb_height
 80026ee:	4a40      	ldr	r2, [pc, #256]	; (80027f0 <main+0x7f8>)
 80026f0:	6013      	str	r3, [r2, #0]
				back_lifting_angle = TO_DEG(
 80026f2:	4b3f      	ldr	r3, [pc, #252]	; (80027f0 <main+0x7f8>)
 80026f4:	edd3 7a00 	vldr	s15, [r3]
 80026f8:	eef1 7a67 	vneg.f32	s15, s15
 80026fc:	ee17 3a90 	vmov	r3, s15
 8002700:	4618      	mov	r0, r3
 8002702:	f7fd fed9 	bl	80004b8 <__aeabi_f2d>
 8002706:	a32c      	add	r3, pc, #176	; (adr r3, 80027b8 <main+0x7c0>)
 8002708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270c:	f7fe f856 	bl	80007bc <__aeabi_ddiv>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	ec43 2b17 	vmov	d7, r2, r3
 8002718:	eeb0 0a47 	vmov.f32	s0, s14
 800271c:	eef0 0a67 	vmov.f32	s1, s15
 8002720:	f00a f876 	bl	800c810 <acos>
 8002724:	ec53 2b10 	vmov	r2, r3, d0
 8002728:	4610      	mov	r0, r2
 800272a:	4619      	mov	r1, r3
 800272c:	f7fe fa14 	bl	8000b58 <__aeabi_d2f>
 8002730:	ee07 0a10 	vmov	s14, r0
 8002734:	eddf 7a2f 	vldr	s15, [pc, #188]	; 80027f4 <main+0x7fc>
 8002738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800273c:	ee17 0a90 	vmov	r0, s15
 8002740:	f7fd feba 	bl	80004b8 <__aeabi_f2d>
 8002744:	a318      	add	r3, pc, #96	; (adr r3, 80027a8 <main+0x7b0>)
 8002746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274a:	f7fe f837 	bl	80007bc <__aeabi_ddiv>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4610      	mov	r0, r2
 8002754:	4619      	mov	r1, r3
 8002756:	f7fe f9ff 	bl	8000b58 <__aeabi_d2f>
 800275a:	4603      	mov	r3, r0
 800275c:	4a26      	ldr	r2, [pc, #152]	; (80027f8 <main+0x800>)
 800275e:	6013      	str	r3, [r2, #0]
						(float )acos(-back_lifting_height / 0.34));
				back_encoder_input = back_lifting_angle / 360
 8002760:	4b25      	ldr	r3, [pc, #148]	; (80027f8 <main+0x800>)
 8002762:	ed93 7a00 	vldr	s14, [r3]
 8002766:	eddf 6a25 	vldr	s13, [pc, #148]	; 80027fc <main+0x804>
 800276a:	eec7 7a26 	vdiv.f32	s15, s14, s13
						* (4096 * BACK_GEAR_RATIO);
 800276e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002800 <main+0x808>
 8002772:	ee67 7a87 	vmul.f32	s15, s15, s14
				back_encoder_input = back_lifting_angle / 360
 8002776:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800277a:	ee17 2a90 	vmov	r2, s15
 800277e:	4b21      	ldr	r3, [pc, #132]	; (8002804 <main+0x80c>)
 8002780:	601a      	str	r2, [r3, #0]
				if (isnan(back_lifting_angle)
 8002782:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <main+0x800>)
 8002784:	edd3 7a00 	vldr	s15, [r3]
 8002788:	eef4 7a67 	vcmp.f32	s15, s15
 800278c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002790:	d606      	bvs.n	80027a0 <main+0x7a8>
						|| back_encoder_input >= MAX_BACK_ALLOWABLE_ENC) {
 8002792:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <main+0x80c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	461a      	mov	r2, r3
 8002798:	f640 5348 	movw	r3, #3400	; 0xd48
 800279c:	429a      	cmp	r2, r3
 800279e:	d333      	bcc.n	8002808 <main+0x810>
					lifting_mode = 0;
 80027a0:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <main+0x7c8>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	701a      	strb	r2, [r3, #0]
					continue;
 80027a6:	e159      	b.n	8002a5c <main+0xa64>
 80027a8:	54442d18 	.word	0x54442d18
 80027ac:	400921fb 	.word	0x400921fb
 80027b0:	916872b0 	.word	0x916872b0
 80027b4:	3faf7ced 	.word	0x3faf7ced
 80027b8:	5c28f5c3 	.word	0x5c28f5c3
 80027bc:	3fd5c28f 	.word	0x3fd5c28f
 80027c0:	20000290 	.word	0x20000290
 80027c4:	200005f4 	.word	0x200005f4
 80027c8:	20000648 	.word	0x20000648
 80027cc:	20000291 	.word	0x20000291
 80027d0:	20000292 	.word	0x20000292
 80027d4:	3eb2b021 	.word	0x3eb2b021
 80027d8:	200003d0 	.word	0x200003d0
 80027dc:	40668000 	.word	0x40668000
 80027e0:	3e19999a 	.word	0x3e19999a
 80027e4:	3fb00000 	.word	0x3fb00000
 80027e8:	200002f4 	.word	0x200002f4
 80027ec:	3e19999a 	.word	0x3e19999a
 80027f0:	200002f8 	.word	0x200002f8
 80027f4:	43340000 	.word	0x43340000
 80027f8:	200002fc 	.word	0x200002fc
 80027fc:	43b40000 	.word	0x43b40000
 8002800:	46000000 	.word	0x46000000
 8002804:	20000300 	.word	0x20000300
				}

				//1. lift the front climbing wheel up until it reach it maximum pos
				//The process is controlled by PID on the front climbing wheel
				//the maximum pos is when the climbing wheel is below the wheelchair base
				goto_pos(MAX_FRONT_CLIMBING_ENC, frontClimb_pid);
 8002808:	f640 0398 	movw	r3, #2200	; 0x898
 800280c:	461a      	mov	r2, r3
 800280e:	4b98      	ldr	r3, [pc, #608]	; (8002a70 <main+0xa78>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4619      	mov	r1, r3
 8002814:	4610      	mov	r0, r2
 8002816:	f000 fb9b 	bl	8002f50 <goto_pos>
//					pid_compute(backBalance_pid);
//					//Change actuator value
//					speed[BACK_INDEX] = backBalance_output;
//				}
//				else speed[BACK_INDEX] = 0;
				goto_pos(back_encoder_input, backClimb_pid);
 800281a:	4b96      	ldr	r3, [pc, #600]	; (8002a74 <main+0xa7c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a96      	ldr	r2, [pc, #600]	; (8002a78 <main+0xa80>)
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f000 fb93 	bl	8002f50 <goto_pos>


				if (fabs(speed[FRONT_INDEX]) < 4)
 800282a:	4b94      	ldr	r3, [pc, #592]	; (8002a7c <main+0xa84>)
 800282c:	edd3 7a00 	vldr	s15, [r3]
 8002830:	eef0 7ae7 	vabs.f32	s15, s15
 8002834:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002838:	eef4 7ac7 	vcmpe.f32	s15, s14
 800283c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002840:	d503      	bpl.n	800284a <main+0x852>
					speed[FRONT_INDEX] = 0;
 8002842:	4b8e      	ldr	r3, [pc, #568]	; (8002a7c <main+0xa84>)
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
				if (fabs(speed[BACK_INDEX]) < 4)
 800284a:	4b8c      	ldr	r3, [pc, #560]	; (8002a7c <main+0xa84>)
 800284c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002850:	eef0 7ae7 	vabs.f32	s15, s15
 8002854:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002858:	eef4 7ac7 	vcmpe.f32	s15, s14
 800285c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002860:	d503      	bpl.n	800286a <main+0x872>
					speed[BACK_INDEX] = 0;
 8002862:	4b86      	ldr	r3, [pc, #536]	; (8002a7c <main+0xa84>)
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	605a      	str	r2, [r3, #4]

				runMotor(&rearMotor, speed[FRONT_INDEX]);
 800286a:	4b84      	ldr	r3, [pc, #528]	; (8002a7c <main+0xa84>)
 800286c:	edd3 7a00 	vldr	s15, [r3]
 8002870:	eeb0 0a67 	vmov.f32	s0, s15
 8002874:	4882      	ldr	r0, [pc, #520]	; (8002a80 <main+0xa88>)
 8002876:	f7fe ffb7 	bl	80017e8 <runMotor>
				runMotor(&backMotor, speed[BACK_INDEX]);
 800287a:	4b80      	ldr	r3, [pc, #512]	; (8002a7c <main+0xa84>)
 800287c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002880:	eeb0 0a67 	vmov.f32	s0, s15
 8002884:	487f      	ldr	r0, [pc, #508]	; (8002a84 <main+0xa8c>)
 8002886:	f7fe ffaf 	bl	80017e8 <runMotor>

				//3. During lifting, due to fixed point at the back climbing wheel.
				//The wheelchair would be pulled back if the back wheel not traveling while the its lifting
				//Therefore, lifting of back wheel and hub motor need to work at the same time to make sure the wheelchair is not moving back.
				//Pull back of wheelchair would cause the front climbing wheel to slip from the curb
				if (speed[BACK_INDEX] != 0
 800288a:	4b7c      	ldr	r3, [pc, #496]	; (8002a7c <main+0xa84>)
 800288c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002890:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002898:	f000 80b3 	beq.w	8002a02 <main+0xa0a>
						&& GPIO_Digital_Filtered_Input(&backLS1, 5)
 800289c:	2105      	movs	r1, #5
 800289e:	487a      	ldr	r0, [pc, #488]	; (8002a88 <main+0xa90>)
 80028a0:	f7ff f819 	bl	80018d6 <GPIO_Digital_Filtered_Input>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 80ab 	beq.w	8002a02 <main+0xa0a>
						&& GPIO_Digital_Filtered_Input(&backLS2, 5)) {
 80028ac:	2105      	movs	r1, #5
 80028ae:	4877      	ldr	r0, [pc, #476]	; (8002a8c <main+0xa94>)
 80028b0:	f7ff f811 	bl	80018d6 <GPIO_Digital_Filtered_Input>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 80a3 	beq.w	8002a02 <main+0xa0a>
					double dt = (HAL_GetTick() - prev_angle_tick)
 80028bc:	f001 fd9c 	bl	80043f8 <HAL_GetTick>
 80028c0:	ee07 0a90 	vmov	s15, r0
 80028c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028c8:	4b71      	ldr	r3, [pc, #452]	; (8002a90 <main+0xa98>)
 80028ca:	edd3 7a00 	vldr	s15, [r3]
 80028ce:	ee77 7a67 	vsub.f32	s15, s14, s15
							/ (float) FREQUENCY;
 80028d2:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8002a94 <main+0xa9c>
 80028d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
					double dt = (HAL_GetTick() - prev_angle_tick)
 80028da:	ee16 0a90 	vmov	r0, s13
 80028de:	f7fd fdeb 	bl	80004b8 <__aeabi_f2d>
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	e9c7 2300 	strd	r2, r3, [r7]
					climbForward_speed = CLIMBING_LEG_LENGTH * (sin(TO_RAD(prev_angle))- sin(TO_RAD(encoderBack.angleDeg))) / dt; //unit: m/s,
 80028ea:	4b6b      	ldr	r3, [pc, #428]	; (8002a98 <main+0xaa0>)
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fd fde3 	bl	80004b8 <__aeabi_f2d>
 80028f2:	4604      	mov	r4, r0
 80028f4:	460d      	mov	r5, r1
 80028f6:	4b69      	ldr	r3, [pc, #420]	; (8002a9c <main+0xaa4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fd fddc 	bl	80004b8 <__aeabi_f2d>
 8002900:	a357      	add	r3, pc, #348	; (adr r3, 8002a60 <main+0xa68>)
 8002902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002906:	f7fd fe2f 	bl	8000568 <__aeabi_dmul>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4610      	mov	r0, r2
 8002910:	4619      	mov	r1, r3
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	4b62      	ldr	r3, [pc, #392]	; (8002aa0 <main+0xaa8>)
 8002918:	f7fd ff50 	bl	80007bc <__aeabi_ddiv>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	ec43 2b17 	vmov	d7, r2, r3
 8002924:	eeb0 0a47 	vmov.f32	s0, s14
 8002928:	eef0 0a67 	vmov.f32	s1, s15
 800292c:	f009 ff1c 	bl	800c768 <sin>
 8002930:	ec59 8b10 	vmov	r8, r9, d0
 8002934:	4b5b      	ldr	r3, [pc, #364]	; (8002aa4 <main+0xaac>)
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	4618      	mov	r0, r3
 800293a:	f7fd fdbd 	bl	80004b8 <__aeabi_f2d>
 800293e:	a348      	add	r3, pc, #288	; (adr r3, 8002a60 <main+0xa68>)
 8002940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002944:	f7fd fe10 	bl	8000568 <__aeabi_dmul>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4610      	mov	r0, r2
 800294e:	4619      	mov	r1, r3
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	4b52      	ldr	r3, [pc, #328]	; (8002aa0 <main+0xaa8>)
 8002956:	f7fd ff31 	bl	80007bc <__aeabi_ddiv>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	ec43 2b17 	vmov	d7, r2, r3
 8002962:	eeb0 0a47 	vmov.f32	s0, s14
 8002966:	eef0 0a67 	vmov.f32	s1, s15
 800296a:	f009 fefd 	bl	800c768 <sin>
 800296e:	ec53 2b10 	vmov	r2, r3, d0
 8002972:	4640      	mov	r0, r8
 8002974:	4649      	mov	r1, r9
 8002976:	f7fd fc3f 	bl	80001f8 <__aeabi_dsub>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4620      	mov	r0, r4
 8002980:	4629      	mov	r1, r5
 8002982:	f7fd fdf1 	bl	8000568 <__aeabi_dmul>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4610      	mov	r0, r2
 800298c:	4619      	mov	r1, r3
 800298e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002992:	f7fd ff13 	bl	80007bc <__aeabi_ddiv>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4610      	mov	r0, r2
 800299c:	4619      	mov	r1, r3
 800299e:	f7fe f8db 	bl	8000b58 <__aeabi_d2f>
 80029a2:	4603      	mov	r3, r0
 80029a4:	4a40      	ldr	r2, [pc, #256]	; (8002aa8 <main+0xab0>)
 80029a6:	6013      	str	r3, [r2, #0]
					climbForward_speed = climbForward_speed/ (HUB_DIAMETER / 2);
 80029a8:	4b3f      	ldr	r3, [pc, #252]	; (8002aa8 <main+0xab0>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fd fd83 	bl	80004b8 <__aeabi_f2d>
 80029b2:	a32d      	add	r3, pc, #180	; (adr r3, 8002a68 <main+0xa70>)
 80029b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b8:	f7fd ff00 	bl	80007bc <__aeabi_ddiv>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	f7fe f8c8 	bl	8000b58 <__aeabi_d2f>
 80029c8:	4603      	mov	r3, r0
 80029ca:	4a37      	ldr	r2, [pc, #220]	; (8002aa8 <main+0xab0>)
 80029cc:	6013      	str	r3, [r2, #0]
					//Convert hub speed into pulse/second
					send_HubMotor(climbForward_speed, climbForward_speed);
 80029ce:	4b36      	ldr	r3, [pc, #216]	; (8002aa8 <main+0xab0>)
 80029d0:	edd3 7a00 	vldr	s15, [r3]
 80029d4:	4b34      	ldr	r3, [pc, #208]	; (8002aa8 <main+0xab0>)
 80029d6:	ed93 7a00 	vldr	s14, [r3]
 80029da:	eef0 0a47 	vmov.f32	s1, s14
 80029de:	eeb0 0a67 	vmov.f32	s0, s15
 80029e2:	f7fe fd09 	bl	80013f8 <send_HubMotor>
					prev_angle = encoderBack.angleDeg;
 80029e6:	4b2f      	ldr	r3, [pc, #188]	; (8002aa4 <main+0xaac>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	4a2c      	ldr	r2, [pc, #176]	; (8002a9c <main+0xaa4>)
 80029ec:	6013      	str	r3, [r2, #0]
					prev_angle_tick = HAL_GetTick();
 80029ee:	f001 fd03 	bl	80043f8 <HAL_GetTick>
 80029f2:	ee07 0a90 	vmov	s15, r0
 80029f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029fa:	4b25      	ldr	r3, [pc, #148]	; (8002a90 <main+0xa98>)
 80029fc:	edc3 7a00 	vstr	s15, [r3]
						&& GPIO_Digital_Filtered_Input(&backLS2, 5)) {
 8002a00:	e005      	b.n	8002a0e <main+0xa16>
				} else
					send_HubMotor(0, 0);
 8002a02:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8002aac <main+0xab4>
 8002a06:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8002aac <main+0xab4>
 8002a0a:	f7fe fcf5 	bl	80013f8 <send_HubMotor>
			//	}

//			if ((speed[FRONT_INDEX] <= 5 || speed[FRONT_INDEX] >= -5) && (speed[BACK_INDEX] <= 5 ||speed[BACK_INDEX] >= -5 )
//

			runMotor(&rearMotor, speed[FRONT_INDEX]);
 8002a0e:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <main+0xa84>)
 8002a10:	edd3 7a00 	vldr	s15, [r3]
 8002a14:	eeb0 0a67 	vmov.f32	s0, s15
 8002a18:	4819      	ldr	r0, [pc, #100]	; (8002a80 <main+0xa88>)
 8002a1a:	f7fe fee5 	bl	80017e8 <runMotor>
			runMotor(&backMotor, speed[BACK_INDEX]);
 8002a1e:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <main+0xa84>)
 8002a20:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a24:	eeb0 0a67 	vmov.f32	s0, s15
 8002a28:	4816      	ldr	r0, [pc, #88]	; (8002a84 <main+0xa8c>)
 8002a2a:	f7fe fedd 	bl	80017e8 <runMotor>

			if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002a2e:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <main+0xa84>)
 8002a30:	edd3 7a00 	vldr	s15, [r3]
 8002a34:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3c:	d10b      	bne.n	8002a56 <main+0xa5e>
 8002a3e:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <main+0xa84>)
 8002a40:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a44:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a4c:	d103      	bne.n	8002a56 <main+0xa5e>
				emBrakeMotor(0);
 8002a4e:	2000      	movs	r0, #0
 8002a50:	f7fe fdea 	bl	8001628 <emBrakeMotor>
 8002a54:	e002      	b.n	8002a5c <main+0xa64>
			//	    back_touchdown = 1;
			//	}
			//
			//	//Climbing phase start

			prev_time = HAL_GetTick();
 8002a56:	f001 fccf 	bl	80043f8 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]
		if (HAL_GetTick() - debug_prev_time >= 1000) {
 8002a5c:	e440      	b.n	80022e0 <main+0x2e8>
 8002a5e:	bf00      	nop
 8002a60:	54442d18 	.word	0x54442d18
 8002a64:	400921fb 	.word	0x400921fb
 8002a68:	916872b0 	.word	0x916872b0
 8002a6c:	3faf7ced 	.word	0x3faf7ced
 8002a70:	200005f4 	.word	0x200005f4
 8002a74:	20000300 	.word	0x20000300
 8002a78:	20000648 	.word	0x20000648
 8002a7c:	200002cc 	.word	0x200002cc
 8002a80:	20000000 	.word	0x20000000
 8002a84:	20000034 	.word	0x20000034
 8002a88:	20000088 	.word	0x20000088
 8002a8c:	20000098 	.word	0x20000098
 8002a90:	200002d4 	.word	0x200002d4
 8002a94:	447a0000 	.word	0x447a0000
 8002a98:	3eb2b021 	.word	0x3eb2b021
 8002a9c:	200002d8 	.word	0x200002d8
 8002aa0:	40668000 	.word	0x40668000
 8002aa4:	20000424 	.word	0x20000424
 8002aa8:	20000308 	.word	0x20000308
 8002aac:	00000000 	.word	0x00000000

08002ab0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b094      	sub	sp, #80	; 0x50
 8002ab4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002ab6:	f107 0320 	add.w	r3, r7, #32
 8002aba:	2230      	movs	r2, #48	; 0x30
 8002abc:	2100      	movs	r1, #0
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f009 fc4e 	bl	800c360 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002ac4:	f107 030c 	add.w	r3, r7, #12
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60bb      	str	r3, [r7, #8]
 8002ad8:	4b2b      	ldr	r3, [pc, #172]	; (8002b88 <SystemClock_Config+0xd8>)
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	4a2a      	ldr	r2, [pc, #168]	; (8002b88 <SystemClock_Config+0xd8>)
 8002ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae4:	4b28      	ldr	r3, [pc, #160]	; (8002b88 <SystemClock_Config+0xd8>)
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002af0:	2300      	movs	r3, #0
 8002af2:	607b      	str	r3, [r7, #4]
 8002af4:	4b25      	ldr	r3, [pc, #148]	; (8002b8c <SystemClock_Config+0xdc>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a24      	ldr	r2, [pc, #144]	; (8002b8c <SystemClock_Config+0xdc>)
 8002afa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	4b22      	ldr	r3, [pc, #136]	; (8002b8c <SystemClock_Config+0xdc>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b08:	607b      	str	r3, [r7, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b16:	2302      	movs	r3, #2
 8002b18:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002b20:	2308      	movs	r3, #8
 8002b22:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8002b24:	23b4      	movs	r3, #180	; 0xb4
 8002b26:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002b2c:	2304      	movs	r3, #4
 8002b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002b30:	f107 0320 	add.w	r3, r7, #32
 8002b34:	4618      	mov	r0, r3
 8002b36:	f005 f841 	bl	8007bbc <HAL_RCC_OscConfig>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <SystemClock_Config+0x94>
		Error_Handler();
 8002b40:	f000 fafa 	bl	8003138 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8002b44:	f004 ffea 	bl	8007b1c <HAL_PWREx_EnableOverDrive>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <SystemClock_Config+0xa2>
		Error_Handler();
 8002b4e:	f000 faf3 	bl	8003138 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002b52:	230f      	movs	r3, #15
 8002b54:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b56:	2302      	movs	r3, #2
 8002b58:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b62:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b68:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002b6a:	f107 030c 	add.w	r3, r7, #12
 8002b6e:	2105      	movs	r1, #5
 8002b70:	4618      	mov	r0, r3
 8002b72:	f005 fb43 	bl	80081fc <HAL_RCC_ClockConfig>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <SystemClock_Config+0xd0>
		Error_Handler();
 8002b7c:	f000 fadc 	bl	8003138 <Error_Handler>
	}
}
 8002b80:	bf00      	nop
 8002b82:	3750      	adds	r7, #80	; 0x50
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	40007000 	.word	0x40007000

08002b90 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	2b80      	cmp	r3, #128	; 0x80
 8002b9e:	d11c      	bne.n	8002bda <HAL_GPIO_EXTI_Callback+0x4a>
	case AD_BUSY_Pin: {
		if (HAL_GetTick() - prev_adc_time > 1) {
 8002ba0:	f001 fc2a 	bl	80043f8 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <HAL_GPIO_EXTI_Callback+0x58>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d916      	bls.n	8002bde <HAL_GPIO_EXTI_Callback+0x4e>
			ADC_Read(&adc_rawData[0]);
 8002bb0:	480e      	ldr	r0, [pc, #56]	; (8002bec <HAL_GPIO_EXTI_Callback+0x5c>)
 8002bb2:	f7fe fcfb 	bl	80015ac <ADC_Read>
			tempJoyRawDataX = adc_rawData[0];
 8002bb6:	4b0d      	ldr	r3, [pc, #52]	; (8002bec <HAL_GPIO_EXTI_Callback+0x5c>)
 8002bb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <HAL_GPIO_EXTI_Callback+0x60>)
 8002bc0:	601a      	str	r2, [r3, #0]
			tempJoyRawDataY = adc_rawData[1];
 8002bc2:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <HAL_GPIO_EXTI_Callback+0x5c>)
 8002bc4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <HAL_GPIO_EXTI_Callback+0x64>)
 8002bcc:	601a      	str	r2, [r3, #0]
			prev_adc_time = HAL_GetTick();
 8002bce:	f001 fc13 	bl	80043f8 <HAL_GetTick>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	4a04      	ldr	r2, [pc, #16]	; (8002be8 <HAL_GPIO_EXTI_Callback+0x58>)
 8002bd6:	6013      	str	r3, [r2, #0]
		}
	}
		break;
 8002bd8:	e001      	b.n	8002bde <HAL_GPIO_EXTI_Callback+0x4e>
	default:
		break;
 8002bda:	bf00      	nop
 8002bdc:	e000      	b.n	8002be0 <HAL_GPIO_EXTI_Callback+0x50>
		break;
 8002bde:	bf00      	nop
	}
}
 8002be0:	bf00      	nop
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	2000028c 	.word	0x2000028c
 8002bec:	200005e0 	.word	0x200005e0
 8002bf0:	20000644 	.word	0x20000644
 8002bf4:	200004d0 	.word	0x200004d0

08002bf8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
	//Hub Encoder callback
	if (huart->Instance == USART3) {
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a47      	ldr	r2, [pc, #284]	; (8002d24 <HAL_UART_RxCpltCallback+0x12c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	f040 8085 	bne.w	8002d16 <HAL_UART_RxCpltCallback+0x11e>
		//Checksum, make sure that response is correct
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 8002c0c:	4b46      	ldr	r3, [pc, #280]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	4b45      	ldr	r3, [pc, #276]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002c14:	785b      	ldrb	r3, [r3, #1]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[2] + (uint16_t) receive_buf[3]
 8002c1c:	4b42      	ldr	r3, [pc, #264]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002c1e:	789b      	ldrb	r3, [r3, #2]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	4b40      	ldr	r3, [pc, #256]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002c28:	78db      	ldrb	r3, [r3, #3]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[4] + (uint16_t) receive_buf[5]
 8002c30:	4b3d      	ldr	r3, [pc, #244]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002c32:	791b      	ldrb	r3, [r3, #4]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002c3c:	795b      	ldrb	r3, [r3, #5]
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[6] + (uint16_t) receive_buf[7]
 8002c44:	4b38      	ldr	r3, [pc, #224]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002c46:	799b      	ldrb	r3, [r3, #6]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	4b36      	ldr	r3, [pc, #216]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002c50:	79db      	ldrb	r3, [r3, #7]
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[8] + (uint16_t) receive_buf[9]
 8002c58:	4b33      	ldr	r3, [pc, #204]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002c5a:	7a1b      	ldrb	r3, [r3, #8]
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	4b31      	ldr	r3, [pc, #196]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002c64:	7a5b      	ldrb	r3, [r3, #9]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[10] + (uint16_t) receive_buf[11]
 8002c6c:	4b2e      	ldr	r3, [pc, #184]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002c6e:	7a9b      	ldrb	r3, [r3, #10]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	4413      	add	r3, r2
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	4b2c      	ldr	r3, [pc, #176]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002c78:	7adb      	ldrb	r3, [r3, #11]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[12] + (uint16_t) receive_buf[13];
 8002c80:	4b29      	ldr	r3, [pc, #164]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002c82:	7b1b      	ldrb	r3, [r3, #12]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	4b27      	ldr	r3, [pc, #156]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002c8c:	7b5b      	ldrb	r3, [r3, #13]
 8002c8e:	b29b      	uxth	r3, r3
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 8002c90:	4413      	add	r3, r2
 8002c92:	81fb      	strh	r3, [r7, #14]
		if ((uint8_t) sum == receive_buf[14]) {
 8002c94:	89fb      	ldrh	r3, [r7, #14]
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002c9a:	7b9b      	ldrb	r3, [r3, #14]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d13a      	bne.n	8002d16 <HAL_UART_RxCpltCallback+0x11e>
			//Encoder Feedback
			if (receive_buf[0] == 0xAA && receive_buf[1] == 0xA4
 8002ca0:	4b21      	ldr	r3, [pc, #132]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2baa      	cmp	r3, #170	; 0xaa
 8002ca6:	d136      	bne.n	8002d16 <HAL_UART_RxCpltCallback+0x11e>
 8002ca8:	4b1f      	ldr	r3, [pc, #124]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002caa:	785b      	ldrb	r3, [r3, #1]
 8002cac:	2ba4      	cmp	r3, #164	; 0xa4
 8002cae:	d132      	bne.n	8002d16 <HAL_UART_RxCpltCallback+0x11e>
					&& receive_buf[3] == 0x00) {
 8002cb0:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002cb2:	78db      	ldrb	r3, [r3, #3]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d12e      	bne.n	8002d16 <HAL_UART_RxCpltCallback+0x11e>
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002cba:	7a5b      	ldrb	r3, [r3, #9]
 8002cbc:	061a      	lsls	r2, r3, #24
						+ (receive_buf[8] << 16) + (receive_buf[7] << 8)
 8002cbe:	4b1a      	ldr	r3, [pc, #104]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002cc0:	7a1b      	ldrb	r3, [r3, #8]
 8002cc2:	041b      	lsls	r3, r3, #16
 8002cc4:	441a      	add	r2, r3
 8002cc6:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002cc8:	79db      	ldrb	r3, [r3, #7]
 8002cca:	021b      	lsls	r3, r3, #8
 8002ccc:	4413      	add	r3, r2
						+ (receive_buf[6]);
 8002cce:	4a16      	ldr	r2, [pc, #88]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002cd0:	7992      	ldrb	r2, [r2, #6]
 8002cd2:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 8002cd4:	4a15      	ldr	r2, [pc, #84]	; (8002d2c <HAL_UART_RxCpltCallback+0x134>)
 8002cd6:	6013      	str	r3, [r2, #0]
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 8002cd8:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002cda:	7b5b      	ldrb	r3, [r3, #13]
 8002cdc:	061a      	lsls	r2, r3, #24
						+ (receive_buf[12] << 16) + (receive_buf[11] << 8)
 8002cde:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002ce0:	7b1b      	ldrb	r3, [r3, #12]
 8002ce2:	041b      	lsls	r3, r3, #16
 8002ce4:	441a      	add	r2, r3
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002ce8:	7adb      	ldrb	r3, [r3, #11]
 8002cea:	021b      	lsls	r3, r3, #8
 8002cec:	4413      	add	r3, r2
						+ (receive_buf[10]);
 8002cee:	4a0e      	ldr	r2, [pc, #56]	; (8002d28 <HAL_UART_RxCpltCallback+0x130>)
 8002cf0:	7a92      	ldrb	r2, [r2, #10]
 8002cf2:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 8002cf4:	4a0d      	ldr	r2, [pc, #52]	; (8002d2c <HAL_UART_RxCpltCallback+0x134>)
 8002cf6:	6053      	str	r3, [r2, #4]
				if (first_encoder_callback) {
 8002cf8:	4b0d      	ldr	r3, [pc, #52]	; (8002d30 <HAL_UART_RxCpltCallback+0x138>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00a      	beq.n	8002d16 <HAL_UART_RxCpltCallback+0x11e>
					prev_hub_encoder_feedback.encoder_1 =
							hub_encoder_feedback.encoder_1;
 8002d00:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <HAL_UART_RxCpltCallback+0x134>)
 8002d02:	681b      	ldr	r3, [r3, #0]
					prev_hub_encoder_feedback.encoder_1 =
 8002d04:	4a0b      	ldr	r2, [pc, #44]	; (8002d34 <HAL_UART_RxCpltCallback+0x13c>)
 8002d06:	6013      	str	r3, [r2, #0]
					prev_hub_encoder_feedback.encoder_2 =
							hub_encoder_feedback.encoder_2;
 8002d08:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <HAL_UART_RxCpltCallback+0x134>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
					prev_hub_encoder_feedback.encoder_2 =
 8002d0c:	4a09      	ldr	r2, [pc, #36]	; (8002d34 <HAL_UART_RxCpltCallback+0x13c>)
 8002d0e:	6053      	str	r3, [r2, #4]
					first_encoder_callback = false;
 8002d10:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <HAL_UART_RxCpltCallback+0x138>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

}
 8002d16:	bf00      	nop
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40004800 	.word	0x40004800
 8002d28:	20000634 	.word	0x20000634
 8002d2c:	20000508 	.word	0x20000508
 8002d30:	20000134 	.word	0x20000134
 8002d34:	2000062c 	.word	0x2000062c

08002d38 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
	//Left Encoder Callback
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	if (hcan == &hcan1) {
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a7b      	ldr	r2, [pc, #492]	; (8002f30 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	f040 80e6 	bne.w	8002f16 <HAL_CAN_RxFifo0MsgPendingCallback+0x1de>
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 8002d4a:	f107 0308 	add.w	r3, r7, #8
 8002d4e:	4a79      	ldr	r2, [pc, #484]	; (8002f34 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8002d50:	2100      	movs	r1, #0
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f002 f852 	bl	8004dfc <HAL_CAN_GetRxMessage>
		if (incoming[1] == ENC_ADDR_LEFT) {
 8002d58:	7a7b      	ldrb	r3, [r7, #9]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d144      	bne.n	8002de8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
			ENCODER_Sort_Incoming(incoming, &encoderBack);
 8002d5e:	f107 0308 	add.w	r3, r7, #8
 8002d62:	4975      	ldr	r1, [pc, #468]	; (8002f38 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fe fedf 	bl	8001b28 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderBack);
 8002d6a:	4873      	ldr	r0, [pc, #460]	; (8002f38 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002d6c:	f7fe ff55 	bl	8001c1a <ENCODER_Get_Angle>
			//Process the angle and GR
			//4096 is encoder single turn value
			//Need to check the encoder value in the correct direction
			encoderBack.encoder_pos = (uint32_t) (4096 * BACK_GEAR_RATIO)
					- encoderBack.encoder_pos
 8002d70:	4b71      	ldr	r3, [pc, #452]	; (8002f38 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							% (uint32_t) (4096 * BACK_GEAR_RATIO);
 8002d74:	f3c3 030c 	ubfx	r3, r3, #0, #13
					- encoderBack.encoder_pos
 8002d78:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
			encoderBack.encoder_pos = (uint32_t) (4096 * BACK_GEAR_RATIO)
 8002d7c:	4a6e      	ldr	r2, [pc, #440]	; (8002f38 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002d7e:	6453      	str	r3, [r2, #68]	; 0x44
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 8002d80:	4b6d      	ldr	r3, [pc, #436]	; (8002f38 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d84:	ee07 3a90 	vmov	s15, r3
 8002d88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					/ (4096 * BACK_GEAR_RATIO) * 360 + 36.587;
 8002d8c:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8002f3c <HAL_CAN_RxFifo0MsgPendingCallback+0x204>
 8002d90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d94:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002f40 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
 8002d98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d9c:	ee17 0a90 	vmov	r0, s15
 8002da0:	f7fd fb8a 	bl	80004b8 <__aeabi_f2d>
 8002da4:	a35e      	add	r3, pc, #376	; (adr r3, 8002f20 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8002da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002daa:	f7fd fa27 	bl	80001fc <__adddf3>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4610      	mov	r0, r2
 8002db4:	4619      	mov	r1, r3
 8002db6:	f7fd fecf 	bl	8000b58 <__aeabi_d2f>
 8002dba:	4603      	mov	r3, r0
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 8002dbc:	4a5e      	ldr	r2, [pc, #376]	; (8002f38 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002dbe:	6413      	str	r3, [r2, #64]	; 0x40
			if (encoderBack.angleDeg > 360)
 8002dc0:	4b5d      	ldr	r3, [pc, #372]	; (8002f38 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002dc2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002dc6:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002f40 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
 8002dca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd2:	dd09      	ble.n	8002de8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
				encoderBack.angleDeg -= 360;
 8002dd4:	4b58      	ldr	r3, [pc, #352]	; (8002f38 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002dd6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002dda:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8002f40 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>
 8002dde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002de2:	4b55      	ldr	r3, [pc, #340]	; (8002f38 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8002de4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		}
		if (incoming[1] == ENC_ADDR_RIGHT) {
 8002de8:	7a7b      	ldrb	r3, [r7, #9]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	f040 8093 	bne.w	8002f16 <HAL_CAN_RxFifo0MsgPendingCallback+0x1de>
			ENCODER_Sort_Incoming(incoming, &encoderFront);
 8002df0:	f107 0308 	add.w	r3, r7, #8
 8002df4:	4953      	ldr	r1, [pc, #332]	; (8002f44 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe fe96 	bl	8001b28 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderFront);
 8002dfc:	4851      	ldr	r0, [pc, #324]	; (8002f44 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002dfe:	f7fe ff0c 	bl	8001c1a <ENCODER_Get_Angle>
			if (4096 * 24 - encoderFront.encoder_pos < 30000) {
 8002e02:	4b50      	ldr	r3, [pc, #320]	; (8002f44 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e06:	f5c3 33c0 	rsb	r3, r3, #98304	; 0x18000
 8002e0a:	f247 522f 	movw	r2, #29999	; 0x752f
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d839      	bhi.n	8002e86 <HAL_CAN_RxFifo0MsgPendingCallback+0x14e>
				encoderFront.encoder_pos =
						(4096 * 24 - encoderFront.encoder_pos)
 8002e12:	4b4c      	ldr	r3, [pc, #304]	; (8002f44 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	f5c3 32c0 	rsb	r2, r3, #98304	; 0x18000
								% (uint32_t) (4096 * FRONT_GEAR_RATIO);
 8002e1a:	4b4b      	ldr	r3, [pc, #300]	; (8002f48 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8002e1c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e20:	0b5b      	lsrs	r3, r3, #13
 8002e22:	f242 3133 	movw	r1, #9011	; 0x2333
 8002e26:	fb01 f303 	mul.w	r3, r1, r3
 8002e2a:	1ad3      	subs	r3, r2, r3
				encoderFront.encoder_pos =
 8002e2c:	4a45      	ldr	r2, [pc, #276]	; (8002f44 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002e2e:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002e30:	4b44      	ldr	r3, [pc, #272]	; (8002f44 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e34:	ee07 3a90 	vmov	s15, r3
 8002e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e3c:	ee17 0a90 	vmov	r0, s15
 8002e40:	f7fd fb3a 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587;
 8002e44:	a338      	add	r3, pc, #224	; (adr r3, 8002f28 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8002e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4a:	f7fd fcb7 	bl	80007bc <__aeabi_ddiv>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	4610      	mov	r0, r2
 8002e54:	4619      	mov	r1, r3
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	4b3c      	ldr	r3, [pc, #240]	; (8002f4c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8002e5c:	f7fd fb84 	bl	8000568 <__aeabi_dmul>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4610      	mov	r0, r2
 8002e66:	4619      	mov	r1, r3
 8002e68:	a32d      	add	r3, pc, #180	; (adr r3, 8002f20 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8002e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6e:	f7fd f9c5 	bl	80001fc <__adddf3>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4610      	mov	r0, r2
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f7fd fe6d 	bl	8000b58 <__aeabi_d2f>
 8002e7e:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002e80:	4a30      	ldr	r2, [pc, #192]	; (8002f44 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002e82:	6413      	str	r3, [r2, #64]	; 0x40
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587 - 360;
			}
		}
	}
}
 8002e84:	e047      	b.n	8002f16 <HAL_CAN_RxFifo0MsgPendingCallback+0x1de>
						- encoderFront.encoder_pos;
 8002e86:	4b2f      	ldr	r3, [pc, #188]	; (8002f44 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fd faf2 	bl	8000474 <__aeabi_ui2d>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	a124      	add	r1, pc, #144	; (adr r1, 8002f28 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8002e96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e9a:	f7fd f9ad 	bl	80001f8 <__aeabi_dsub>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f7fd fe37 	bl	8000b18 <__aeabi_d2uiz>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4a25      	ldr	r2, [pc, #148]	; (8002f44 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002eae:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002eb0:	4b24      	ldr	r3, [pc, #144]	; (8002f44 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb4:	ee07 3a90 	vmov	s15, r3
 8002eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ebc:	ee17 0a90 	vmov	r0, s15
 8002ec0:	f7fd fafa 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587 - 360;
 8002ec4:	a318      	add	r3, pc, #96	; (adr r3, 8002f28 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8002ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eca:	f7fd fc77 	bl	80007bc <__aeabi_ddiv>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	4b1c      	ldr	r3, [pc, #112]	; (8002f4c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8002edc:	f7fd fb44 	bl	8000568 <__aeabi_dmul>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	a30d      	add	r3, pc, #52	; (adr r3, 8002f20 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8002eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eee:	f7fd f985 	bl	80001fc <__adddf3>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	4619      	mov	r1, r3
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8002f00:	f7fd f97a 	bl	80001f8 <__aeabi_dsub>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4610      	mov	r0, r2
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	f7fd fe24 	bl	8000b58 <__aeabi_d2f>
 8002f10:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002f12:	4a0c      	ldr	r2, [pc, #48]	; (8002f44 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8002f14:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	d0e56042 	.word	0xd0e56042
 8002f24:	40424b22 	.word	0x40424b22
 8002f28:	9999999a 	.word	0x9999999a
 8002f2c:	40c19999 	.word	0x40c19999
 8002f30:	20000380 	.word	0x20000380
 8002f34:	2000030c 	.word	0x2000030c
 8002f38:	20000424 	.word	0x20000424
 8002f3c:	46000000 	.word	0x46000000
 8002f40:	43b40000 	.word	0x43b40000
 8002f44:	200003d0 	.word	0x200003d0
 8002f48:	e8bb8111 	.word	0xe8bb8111
 8002f4c:	40768000 	.word	0x40768000

08002f50 <goto_pos>:
	lifting_mode = 0;
	retraction_mode = 0;
	forward_distance = BASE_LENGTH;
}

void goto_pos(int enc, PID_t pid_t) {
 8002f50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f54:	b084      	sub	sp, #16
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	6039      	str	r1, [r7, #0]
//	&& encoderFront.encoder_pos >= MIN_FRONT_ALLOWABLE_ENC 	&& cur_enc_pos <= MAX_FRONT_ALLOWABLE_ENC
	int cur_enc_pos;

	if (pid_t == frontClimb_pid) {
 8002f5c:	4b6a      	ldr	r3, [pc, #424]	; (8003108 <goto_pos+0x1b8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d168      	bne.n	8003038 <goto_pos+0xe8>
		cur_enc_pos = (int) encoderFront.encoder_pos;
 8002f66:	4b69      	ldr	r3, [pc, #420]	; (800310c <goto_pos+0x1bc>)
 8002f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6a:	60fb      	str	r3, [r7, #12]
		if (pid_need_compute(frontClimb_pid) && fabs(enc - cur_enc_pos) > 10) {
 8002f6c:	4b66      	ldr	r3, [pc, #408]	; (8003108 <goto_pos+0x1b8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fd ffff 	bl	8000f74 <pid_need_compute>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d058      	beq.n	800302e <goto_pos+0xde>
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd fa86 	bl	8000494 <__aeabi_i2d>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4690      	mov	r8, r2
 8002f8e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	4b5e      	ldr	r3, [pc, #376]	; (8003110 <goto_pos+0x1c0>)
 8002f98:	4640      	mov	r0, r8
 8002f9a:	4649      	mov	r1, r9
 8002f9c:	f7fd fd74 	bl	8000a88 <__aeabi_dcmpgt>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d043      	beq.n	800302e <goto_pos+0xde>
			// Read process feedback
			if (cur_enc_pos > MAX_FRONT_ALLOWABLE_ENC)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d90f      	bls.n	8002fd0 <goto_pos+0x80>
				cur_enc_pos -= 4096 * FRONT_GEAR_RATIO;
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f7fd fa6f 	bl	8000494 <__aeabi_i2d>
 8002fb6:	a352      	add	r3, pc, #328	; (adr r3, 8003100 <goto_pos+0x1b0>)
 8002fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fbc:	f7fd f91c 	bl	80001f8 <__aeabi_dsub>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	f7fd fd7e 	bl	8000ac8 <__aeabi_d2iz>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	60fb      	str	r3, [r7, #12]
			if (enc >= MAX_FRONT_ALLOWABLE_ENC)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d30f      	bcc.n	8002ffa <goto_pos+0xaa>
				enc -= 4096 * FRONT_GEAR_RATIO;
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fd fa5a 	bl	8000494 <__aeabi_i2d>
 8002fe0:	a347      	add	r3, pc, #284	; (adr r3, 8003100 <goto_pos+0x1b0>)
 8002fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe6:	f7fd f907 	bl	80001f8 <__aeabi_dsub>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4610      	mov	r0, r2
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	f7fd fd69 	bl	8000ac8 <__aeabi_d2iz>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	607b      	str	r3, [r7, #4]
			frontClimb_setpoint = enc;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	ee07 3a90 	vmov	s15, r3
 8003000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003004:	4b43      	ldr	r3, [pc, #268]	; (8003114 <goto_pos+0x1c4>)
 8003006:	edc3 7a00 	vstr	s15, [r3]
			frontClimb_input = cur_enc_pos;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	ee07 3a90 	vmov	s15, r3
 8003010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003014:	4b40      	ldr	r3, [pc, #256]	; (8003118 <goto_pos+0x1c8>)
 8003016:	edc3 7a00 	vstr	s15, [r3]
			// Compute new PID output value
			pid_compute(frontClimb_pid);
 800301a:	4b3b      	ldr	r3, [pc, #236]	; (8003108 <goto_pos+0x1b8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7fd ffbd 	bl	8000f9e <pid_compute>
			//Change actuator value
			speed[FRONT_INDEX] = frontClimb_output;
 8003024:	4b3d      	ldr	r3, [pc, #244]	; (800311c <goto_pos+0x1cc>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a3d      	ldr	r2, [pc, #244]	; (8003120 <goto_pos+0x1d0>)
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	e060      	b.n	80030f0 <goto_pos+0x1a0>

		} else {
			speed[FRONT_INDEX] = 0;
 800302e:	4b3c      	ldr	r3, [pc, #240]	; (8003120 <goto_pos+0x1d0>)
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
			speed[BACK_INDEX] = backClimb_output;
		} else {
			speed[BACK_INDEX] = 0;
		}
	}
}
 8003036:	e05b      	b.n	80030f0 <goto_pos+0x1a0>
	} else if (pid_t == backClimb_pid) {
 8003038:	4b3a      	ldr	r3, [pc, #232]	; (8003124 <goto_pos+0x1d4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d156      	bne.n	80030f0 <goto_pos+0x1a0>
		cur_enc_pos = (int) encoderBack.encoder_pos;
 8003042:	4b39      	ldr	r3, [pc, #228]	; (8003128 <goto_pos+0x1d8>)
 8003044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003046:	60fb      	str	r3, [r7, #12]
		if (pid_need_compute(backClimb_pid) && fabs(enc - cur_enc_pos) > 10
 8003048:	4b36      	ldr	r3, [pc, #216]	; (8003124 <goto_pos+0x1d4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd ff91 	bl	8000f74 <pid_need_compute>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d046      	beq.n	80030e6 <goto_pos+0x196>
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd fa18 	bl	8000494 <__aeabi_i2d>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4614      	mov	r4, r2
 800306a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	4b27      	ldr	r3, [pc, #156]	; (8003110 <goto_pos+0x1c0>)
 8003074:	4620      	mov	r0, r4
 8003076:	4629      	mov	r1, r5
 8003078:	f7fd fd06 	bl	8000a88 <__aeabi_dcmpgt>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d031      	beq.n	80030e6 <goto_pos+0x196>
				&& encoderBack.encoder_pos <= MAX_BACK_ALLOWABLE_ENC) {
 8003082:	4b29      	ldr	r3, [pc, #164]	; (8003128 <goto_pos+0x1d8>)
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	f640 5248 	movw	r2, #3400	; 0xd48
 800308a:	4293      	cmp	r3, r2
 800308c:	d82b      	bhi.n	80030e6 <goto_pos+0x196>
			if (cur_enc_pos > MAX_BACK_ALLOWABLE_ENC)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f640 5248 	movw	r2, #3400	; 0xd48
 8003094:	4293      	cmp	r3, r2
 8003096:	d903      	bls.n	80030a0 <goto_pos+0x150>
				cur_enc_pos -= 4096 * BACK_GEAR_RATIO;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800309e:	60fb      	str	r3, [r7, #12]
			if (enc >= MAX_BACK_ALLOWABLE_ENC)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f640 5248 	movw	r2, #3400	; 0xd48
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d303      	bcc.n	80030b2 <goto_pos+0x162>
				enc -= 4096 * BACK_GEAR_RATIO;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80030b0:	607b      	str	r3, [r7, #4]
			backClimb_setpoint = enc;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	ee07 3a90 	vmov	s15, r3
 80030b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030bc:	4b1b      	ldr	r3, [pc, #108]	; (800312c <goto_pos+0x1dc>)
 80030be:	edc3 7a00 	vstr	s15, [r3]
			backClimb_input = cur_enc_pos;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	ee07 3a90 	vmov	s15, r3
 80030c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030cc:	4b18      	ldr	r3, [pc, #96]	; (8003130 <goto_pos+0x1e0>)
 80030ce:	edc3 7a00 	vstr	s15, [r3]
			pid_compute(backClimb_pid);
 80030d2:	4b14      	ldr	r3, [pc, #80]	; (8003124 <goto_pos+0x1d4>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fd ff61 	bl	8000f9e <pid_compute>
			speed[BACK_INDEX] = backClimb_output;
 80030dc:	4b15      	ldr	r3, [pc, #84]	; (8003134 <goto_pos+0x1e4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a0f      	ldr	r2, [pc, #60]	; (8003120 <goto_pos+0x1d0>)
 80030e2:	6053      	str	r3, [r2, #4]
 80030e4:	e004      	b.n	80030f0 <goto_pos+0x1a0>
			speed[BACK_INDEX] = 0;
 80030e6:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <goto_pos+0x1d0>)
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	605a      	str	r2, [r3, #4]
}
 80030ee:	e7ff      	b.n	80030f0 <goto_pos+0x1a0>
 80030f0:	bf00      	nop
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80030fa:	bf00      	nop
 80030fc:	f3af 8000 	nop.w
 8003100:	9999999a 	.word	0x9999999a
 8003104:	40c19999 	.word	0x40c19999
 8003108:	200005f4 	.word	0x200005f4
 800310c:	200003d0 	.word	0x200003d0
 8003110:	40240000 	.word	0x40240000
 8003114:	200002e4 	.word	0x200002e4
 8003118:	200002dc 	.word	0x200002dc
 800311c:	200002e0 	.word	0x200002e0
 8003120:	200002cc 	.word	0x200002cc
 8003124:	20000648 	.word	0x20000648
 8003128:	20000424 	.word	0x20000424
 800312c:	200002f0 	.word	0x200002f0
 8003130:	200002e8 	.word	0x200002e8
 8003134:	200002ec 	.word	0x200002ec

08003138 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <assert_failed>:
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line) {
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af04      	add	r7, sp, #16
 8003162:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8003164:	2364      	movs	r3, #100	; 0x64
 8003166:	9302      	str	r3, [sp, #8]
 8003168:	2301      	movs	r3, #1
 800316a:	9301      	str	r3, [sp, #4]
 800316c:	f107 030f 	add.w	r3, r7, #15
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	2301      	movs	r3, #1
 8003174:	2275      	movs	r2, #117	; 0x75
 8003176:	21d0      	movs	r1, #208	; 0xd0
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f003 fe81 	bl	8006e80 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	2b68      	cmp	r3, #104	; 0x68
 8003182:	d13d      	bne.n	8003200 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8003184:	2300      	movs	r3, #0
 8003186:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8003188:	2364      	movs	r3, #100	; 0x64
 800318a:	9302      	str	r3, [sp, #8]
 800318c:	2301      	movs	r3, #1
 800318e:	9301      	str	r3, [sp, #4]
 8003190:	f107 030e 	add.w	r3, r7, #14
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	2301      	movs	r3, #1
 8003198:	226b      	movs	r2, #107	; 0x6b
 800319a:	21d0      	movs	r1, #208	; 0xd0
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f003 fd69 	bl	8006c74 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80031a2:	2307      	movs	r3, #7
 80031a4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80031a6:	2364      	movs	r3, #100	; 0x64
 80031a8:	9302      	str	r3, [sp, #8]
 80031aa:	2301      	movs	r3, #1
 80031ac:	9301      	str	r3, [sp, #4]
 80031ae:	f107 030e 	add.w	r3, r7, #14
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	2301      	movs	r3, #1
 80031b6:	2219      	movs	r2, #25
 80031b8:	21d0      	movs	r1, #208	; 0xd0
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f003 fd5a 	bl	8006c74 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 80031c0:	2300      	movs	r3, #0
 80031c2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80031c4:	2364      	movs	r3, #100	; 0x64
 80031c6:	9302      	str	r3, [sp, #8]
 80031c8:	2301      	movs	r3, #1
 80031ca:	9301      	str	r3, [sp, #4]
 80031cc:	f107 030e 	add.w	r3, r7, #14
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	2301      	movs	r3, #1
 80031d4:	221c      	movs	r2, #28
 80031d6:	21d0      	movs	r1, #208	; 0xd0
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f003 fd4b 	bl	8006c74 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80031de:	2300      	movs	r3, #0
 80031e0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80031e2:	2364      	movs	r3, #100	; 0x64
 80031e4:	9302      	str	r3, [sp, #8]
 80031e6:	2301      	movs	r3, #1
 80031e8:	9301      	str	r3, [sp, #4]
 80031ea:	f107 030e 	add.w	r3, r7, #14
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	2301      	movs	r3, #1
 80031f2:	221b      	movs	r2, #27
 80031f4:	21d0      	movs	r1, #208	; 0xd0
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f003 fd3c 	bl	8006c74 <HAL_I2C_Mem_Write>
        return 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	e000      	b.n	8003202 <MPU6050_Init+0xa6>
    }
    return 1;
 8003200:	2301      	movs	r3, #1
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	0000      	movs	r0, r0
 800320c:	0000      	movs	r0, r0
	...

08003210 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8003210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003214:	b094      	sub	sp, #80	; 0x50
 8003216:	af04      	add	r7, sp, #16
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800321c:	2364      	movs	r3, #100	; 0x64
 800321e:	9302      	str	r3, [sp, #8]
 8003220:	230e      	movs	r3, #14
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	f107 0308 	add.w	r3, r7, #8
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	2301      	movs	r3, #1
 800322c:	223b      	movs	r2, #59	; 0x3b
 800322e:	21d0      	movs	r1, #208	; 0xd0
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f003 fe25 	bl	8006e80 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8003236:	7a3b      	ldrb	r3, [r7, #8]
 8003238:	021b      	lsls	r3, r3, #8
 800323a:	b21a      	sxth	r2, r3
 800323c:	7a7b      	ldrb	r3, [r7, #9]
 800323e:	b21b      	sxth	r3, r3
 8003240:	4313      	orrs	r3, r2
 8003242:	b21a      	sxth	r2, r3
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8003248:	7abb      	ldrb	r3, [r7, #10]
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	b21a      	sxth	r2, r3
 800324e:	7afb      	ldrb	r3, [r7, #11]
 8003250:	b21b      	sxth	r3, r3
 8003252:	4313      	orrs	r3, r2
 8003254:	b21a      	sxth	r2, r3
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800325a:	7b3b      	ldrb	r3, [r7, #12]
 800325c:	021b      	lsls	r3, r3, #8
 800325e:	b21a      	sxth	r2, r3
 8003260:	7b7b      	ldrb	r3, [r7, #13]
 8003262:	b21b      	sxth	r3, r3
 8003264:	4313      	orrs	r3, r2
 8003266:	b21a      	sxth	r2, r3
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 800326c:	7bbb      	ldrb	r3, [r7, #14]
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	b21a      	sxth	r2, r3
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	b21b      	sxth	r3, r3
 8003276:	4313      	orrs	r3, r2
 8003278:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 800327a:	7c3b      	ldrb	r3, [r7, #16]
 800327c:	021b      	lsls	r3, r3, #8
 800327e:	b21a      	sxth	r2, r3
 8003280:	7c7b      	ldrb	r3, [r7, #17]
 8003282:	b21b      	sxth	r3, r3
 8003284:	4313      	orrs	r3, r2
 8003286:	b21a      	sxth	r2, r3
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 800328c:	7cbb      	ldrb	r3, [r7, #18]
 800328e:	021b      	lsls	r3, r3, #8
 8003290:	b21a      	sxth	r2, r3
 8003292:	7cfb      	ldrb	r3, [r7, #19]
 8003294:	b21b      	sxth	r3, r3
 8003296:	4313      	orrs	r3, r2
 8003298:	b21a      	sxth	r2, r3
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 800329e:	7d3b      	ldrb	r3, [r7, #20]
 80032a0:	021b      	lsls	r3, r3, #8
 80032a2:	b21a      	sxth	r2, r3
 80032a4:	7d7b      	ldrb	r3, [r7, #21]
 80032a6:	b21b      	sxth	r3, r3
 80032a8:	4313      	orrs	r3, r2
 80032aa:	b21a      	sxth	r2, r3
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fd f8ec 	bl	8000494 <__aeabi_i2d>
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	4bbd      	ldr	r3, [pc, #756]	; (80035b8 <MPU6050_Read_All+0x3a8>)
 80032c2:	f7fd fa7b 	bl	80007bc <__aeabi_ddiv>
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	6839      	ldr	r1, [r7, #0]
 80032cc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fd f8dc 	bl	8000494 <__aeabi_i2d>
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	4bb5      	ldr	r3, [pc, #724]	; (80035b8 <MPU6050_Read_All+0x3a8>)
 80032e2:	f7fd fa6b 	bl	80007bc <__aeabi_ddiv>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	6839      	ldr	r1, [r7, #0]
 80032ec:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fd f8cc 	bl	8000494 <__aeabi_i2d>
 80032fc:	a3a8      	add	r3, pc, #672	; (adr r3, 80035a0 <MPU6050_Read_All+0x390>)
 80032fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003302:	f7fd fa5b 	bl	80007bc <__aeabi_ddiv>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	6839      	ldr	r1, [r7, #0]
 800330c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8003310:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003314:	ee07 3a90 	vmov	s15, r3
 8003318:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800331c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 80035bc <MPU6050_Read_All+0x3ac>
 8003320:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003324:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80035c0 <MPU6050_Read_All+0x3b0>
 8003328:	ee77 7a87 	vadd.f32	s15, s15, s14
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003338:	4618      	mov	r0, r3
 800333a:	f7fd f8ab 	bl	8000494 <__aeabi_i2d>
 800333e:	a39a      	add	r3, pc, #616	; (adr r3, 80035a8 <MPU6050_Read_All+0x398>)
 8003340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003344:	f7fd fa3a 	bl	80007bc <__aeabi_ddiv>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	6839      	ldr	r1, [r7, #0]
 800334e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003358:	4618      	mov	r0, r3
 800335a:	f7fd f89b 	bl	8000494 <__aeabi_i2d>
 800335e:	a392      	add	r3, pc, #584	; (adr r3, 80035a8 <MPU6050_Read_All+0x398>)
 8003360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003364:	f7fd fa2a 	bl	80007bc <__aeabi_ddiv>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	6839      	ldr	r1, [r7, #0]
 800336e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd f88b 	bl	8000494 <__aeabi_i2d>
 800337e:	a38a      	add	r3, pc, #552	; (adr r3, 80035a8 <MPU6050_Read_All+0x398>)
 8003380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003384:	f7fd fa1a 	bl	80007bc <__aeabi_ddiv>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	6839      	ldr	r1, [r7, #0]
 800338e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8003392:	f001 f831 	bl	80043f8 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	4b8a      	ldr	r3, [pc, #552]	; (80035c4 <MPU6050_Read_All+0x3b4>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fd f868 	bl	8000474 <__aeabi_ui2d>
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	4b87      	ldr	r3, [pc, #540]	; (80035c8 <MPU6050_Read_All+0x3b8>)
 80033aa:	f7fd fa07 	bl	80007bc <__aeabi_ddiv>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80033b6:	f001 f81f 	bl	80043f8 <HAL_GetTick>
 80033ba:	4603      	mov	r3, r0
 80033bc:	4a81      	ldr	r2, [pc, #516]	; (80035c4 <MPU6050_Read_All+0x3b4>)
 80033be:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033c6:	461a      	mov	r2, r3
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033ce:	fb03 f202 	mul.w	r2, r3, r2
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80033d8:	4619      	mov	r1, r3
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80033e0:	fb03 f301 	mul.w	r3, r3, r1
 80033e4:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd f854 	bl	8000494 <__aeabi_i2d>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	ec43 2b10 	vmov	d0, r2, r3
 80033f4:	f009 fa48 	bl	800c888 <sqrt>
 80033f8:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003408:	f7fd fb16 	bl	8000a38 <__aeabi_dcmpeq>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d11f      	bne.n	8003452 <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003418:	4618      	mov	r0, r3
 800341a:	f7fd f83b 	bl	8000494 <__aeabi_i2d>
 800341e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003422:	f7fd f9cb 	bl	80007bc <__aeabi_ddiv>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	ec43 2b17 	vmov	d7, r2, r3
 800342e:	eeb0 0a47 	vmov.f32	s0, s14
 8003432:	eef0 0a67 	vmov.f32	s1, s15
 8003436:	f008 ff9b 	bl	800c370 <atan>
 800343a:	ec51 0b10 	vmov	r0, r1, d0
 800343e:	a35c      	add	r3, pc, #368	; (adr r3, 80035b0 <MPU6050_Read_All+0x3a0>)
 8003440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003444:	f7fd f890 	bl	8000568 <__aeabi_dmul>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8003450:	e005      	b.n	800345e <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003464:	425b      	negs	r3, r3
 8003466:	4618      	mov	r0, r3
 8003468:	f7fd f814 	bl	8000494 <__aeabi_i2d>
 800346c:	4682      	mov	sl, r0
 800346e:	468b      	mov	fp, r1
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fd f80c 	bl	8000494 <__aeabi_i2d>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	ec43 2b11 	vmov	d1, r2, r3
 8003484:	ec4b ab10 	vmov	d0, sl, fp
 8003488:	f009 f9fc 	bl	800c884 <atan2>
 800348c:	ec51 0b10 	vmov	r0, r1, d0
 8003490:	a347      	add	r3, pc, #284	; (adr r3, 80035b0 <MPU6050_Read_All+0x3a0>)
 8003492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003496:	f7fd f867 	bl	8000568 <__aeabi_dmul>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	4b49      	ldr	r3, [pc, #292]	; (80035cc <MPU6050_Read_All+0x3bc>)
 80034a8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034ac:	f7fd face 	bl	8000a4c <__aeabi_dcmplt>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00a      	beq.n	80034cc <MPU6050_Read_All+0x2bc>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	4b43      	ldr	r3, [pc, #268]	; (80035d0 <MPU6050_Read_All+0x3c0>)
 80034c2:	f7fd fae1 	bl	8000a88 <__aeabi_dcmpgt>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d114      	bne.n	80034f6 <MPU6050_Read_All+0x2e6>
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	4b3f      	ldr	r3, [pc, #252]	; (80035d0 <MPU6050_Read_All+0x3c0>)
 80034d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034d6:	f7fd fad7 	bl	8000a88 <__aeabi_dcmpgt>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d015      	beq.n	800350c <MPU6050_Read_All+0x2fc>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	4b38      	ldr	r3, [pc, #224]	; (80035cc <MPU6050_Read_All+0x3bc>)
 80034ec:	f7fd faae 	bl	8000a4c <__aeabi_dcmplt>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 80034f6:	4937      	ldr	r1, [pc, #220]	; (80035d4 <MPU6050_Read_All+0x3c4>)
 80034f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034fc:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8003500:	6839      	ldr	r1, [r7, #0]
 8003502:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003506:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800350a:	e014      	b.n	8003536 <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8003512:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8003516:	eeb0 1a47 	vmov.f32	s2, s14
 800351a:	eef0 1a67 	vmov.f32	s3, s15
 800351e:	ed97 0b06 	vldr	d0, [r7, #24]
 8003522:	482c      	ldr	r0, [pc, #176]	; (80035d4 <MPU6050_Read_All+0x3c4>)
 8003524:	f000 f85a 	bl	80035dc <Kalman_getAngle>
 8003528:	eeb0 7a40 	vmov.f32	s14, s0
 800352c:	eef0 7a60 	vmov.f32	s15, s1
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800353c:	4690      	mov	r8, r2
 800353e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	4b22      	ldr	r3, [pc, #136]	; (80035d0 <MPU6050_Read_All+0x3c0>)
 8003548:	4640      	mov	r0, r8
 800354a:	4649      	mov	r1, r9
 800354c:	f7fd fa9c 	bl	8000a88 <__aeabi_dcmpgt>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d008      	beq.n	8003568 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800355c:	4614      	mov	r4, r2
 800355e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800356e:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8003572:	eeb0 1a47 	vmov.f32	s2, s14
 8003576:	eef0 1a67 	vmov.f32	s3, s15
 800357a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800357e:	4816      	ldr	r0, [pc, #88]	; (80035d8 <MPU6050_Read_All+0x3c8>)
 8003580:	f000 f82c 	bl	80035dc <Kalman_getAngle>
 8003584:	eeb0 7a40 	vmov.f32	s14, s0
 8003588:	eef0 7a60 	vmov.f32	s15, s1
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 8003592:	bf00      	nop
 8003594:	3740      	adds	r7, #64	; 0x40
 8003596:	46bd      	mov	sp, r7
 8003598:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800359c:	f3af 8000 	nop.w
 80035a0:	00000000 	.word	0x00000000
 80035a4:	40cc2900 	.word	0x40cc2900
 80035a8:	00000000 	.word	0x00000000
 80035ac:	40606000 	.word	0x40606000
 80035b0:	1a63c1f8 	.word	0x1a63c1f8
 80035b4:	404ca5dc 	.word	0x404ca5dc
 80035b8:	40d00000 	.word	0x40d00000
 80035bc:	43aa0000 	.word	0x43aa0000
 80035c0:	42121eb8 	.word	0x42121eb8
 80035c4:	2000064c 	.word	0x2000064c
 80035c8:	408f4000 	.word	0x408f4000
 80035cc:	c0568000 	.word	0xc0568000
 80035d0:	40568000 	.word	0x40568000
 80035d4:	200001b0 	.word	0x200001b0
 80035d8:	20000168 	.word	0x20000168

080035dc <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 80035dc:	b5b0      	push	{r4, r5, r7, lr}
 80035de:	b096      	sub	sp, #88	; 0x58
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	61f8      	str	r0, [r7, #28]
 80035e4:	ed87 0b04 	vstr	d0, [r7, #16]
 80035e8:	ed87 1b02 	vstr	d1, [r7, #8]
 80035ec:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80035f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035fa:	f7fc fdfd 	bl	80001f8 <__aeabi_dsub>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800360c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003610:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003614:	f7fc ffa8 	bl	8000568 <__aeabi_dmul>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4620      	mov	r0, r4
 800361e:	4629      	mov	r1, r5
 8003620:	f7fc fdec 	bl	80001fc <__adddf3>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	69f9      	ldr	r1, [r7, #28]
 800362a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800363a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800363e:	f7fc ff93 	bl	8000568 <__aeabi_dmul>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	4610      	mov	r0, r2
 8003648:	4619      	mov	r1, r3
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003650:	f7fc fdd2 	bl	80001f8 <__aeabi_dsub>
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	4610      	mov	r0, r2
 800365a:	4619      	mov	r1, r3
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003662:	f7fc fdc9 	bl	80001f8 <__aeabi_dsub>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4610      	mov	r0, r2
 800366c:	4619      	mov	r1, r3
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003674:	f7fc fdc2 	bl	80001fc <__adddf3>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4610      	mov	r0, r2
 800367e:	4619      	mov	r1, r3
 8003680:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003684:	f7fc ff70 	bl	8000568 <__aeabi_dmul>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4620      	mov	r0, r4
 800368e:	4629      	mov	r1, r5
 8003690:	f7fc fdb4 	bl	80001fc <__adddf3>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	69f9      	ldr	r1, [r7, #28]
 800369a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80036aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036ae:	f7fc ff5b 	bl	8000568 <__aeabi_dmul>
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
 80036b6:	4620      	mov	r0, r4
 80036b8:	4629      	mov	r1, r5
 80036ba:	f7fc fd9d 	bl	80001f8 <__aeabi_dsub>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	69f9      	ldr	r1, [r7, #28]
 80036c4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80036d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036d8:	f7fc ff46 	bl	8000568 <__aeabi_dmul>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4620      	mov	r0, r4
 80036e2:	4629      	mov	r1, r5
 80036e4:	f7fc fd88 	bl	80001f8 <__aeabi_dsub>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	69f9      	ldr	r1, [r7, #28]
 80036ee:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80036fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003702:	f7fc ff31 	bl	8000568 <__aeabi_dmul>
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	4620      	mov	r0, r4
 800370c:	4629      	mov	r1, r5
 800370e:	f7fc fd75 	bl	80001fc <__adddf3>
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	69f9      	ldr	r1, [r7, #28]
 8003718:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003728:	f7fc fd68 	bl	80001fc <__adddf3>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800373a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800373e:	f7fd f83d 	bl	80007bc <__aeabi_ddiv>
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003750:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003754:	f7fd f832 	bl	80007bc <__aeabi_ddiv>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003766:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800376a:	f7fc fd45 	bl	80001f8 <__aeabi_dsub>
 800376e:	4602      	mov	r2, r0
 8003770:	460b      	mov	r3, r1
 8003772:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800377c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003780:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003784:	f7fc fef0 	bl	8000568 <__aeabi_dmul>
 8003788:	4602      	mov	r2, r0
 800378a:	460b      	mov	r3, r1
 800378c:	4620      	mov	r0, r4
 800378e:	4629      	mov	r1, r5
 8003790:	f7fc fd34 	bl	80001fc <__adddf3>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	69f9      	ldr	r1, [r7, #28]
 800379a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80037a4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80037a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037ac:	f7fc fedc 	bl	8000568 <__aeabi_dmul>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4620      	mov	r0, r4
 80037b6:	4629      	mov	r1, r5
 80037b8:	f7fc fd20 	bl	80001fc <__adddf3>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	69f9      	ldr	r1, [r7, #28]
 80037c2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80037cc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80037d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80037e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80037e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037e8:	f7fc febe 	bl	8000568 <__aeabi_dmul>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4620      	mov	r0, r4
 80037f2:	4629      	mov	r1, r5
 80037f4:	f7fc fd00 	bl	80001f8 <__aeabi_dsub>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	69f9      	ldr	r1, [r7, #28]
 80037fe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003808:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800380c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003810:	f7fc feaa 	bl	8000568 <__aeabi_dmul>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	4620      	mov	r0, r4
 800381a:	4629      	mov	r1, r5
 800381c:	f7fc fcec 	bl	80001f8 <__aeabi_dsub>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	69f9      	ldr	r1, [r7, #28]
 8003826:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003830:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003834:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003838:	f7fc fe96 	bl	8000568 <__aeabi_dmul>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4620      	mov	r0, r4
 8003842:	4629      	mov	r1, r5
 8003844:	f7fc fcd8 	bl	80001f8 <__aeabi_dsub>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	69f9      	ldr	r1, [r7, #28]
 800384e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003858:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800385c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003860:	f7fc fe82 	bl	8000568 <__aeabi_dmul>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4620      	mov	r0, r4
 800386a:	4629      	mov	r1, r5
 800386c:	f7fc fcc4 	bl	80001f8 <__aeabi_dsub>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	69f9      	ldr	r1, [r7, #28]
 8003876:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003880:	ec43 2b17 	vmov	d7, r2, r3
};
 8003884:	eeb0 0a47 	vmov.f32	s0, s14
 8003888:	eef0 0a67 	vmov.f32	s1, s15
 800388c:	3758      	adds	r7, #88	; 0x58
 800388e:	46bd      	mov	sp, r7
 8003890:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003894 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003898:	4b18      	ldr	r3, [pc, #96]	; (80038fc <MX_SPI1_Init+0x68>)
 800389a:	4a19      	ldr	r2, [pc, #100]	; (8003900 <MX_SPI1_Init+0x6c>)
 800389c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800389e:	4b17      	ldr	r3, [pc, #92]	; (80038fc <MX_SPI1_Init+0x68>)
 80038a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80038a6:	4b15      	ldr	r3, [pc, #84]	; (80038fc <MX_SPI1_Init+0x68>)
 80038a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038ac:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80038ae:	4b13      	ldr	r3, [pc, #76]	; (80038fc <MX_SPI1_Init+0x68>)
 80038b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80038b6:	4b11      	ldr	r3, [pc, #68]	; (80038fc <MX_SPI1_Init+0x68>)
 80038b8:	2202      	movs	r2, #2
 80038ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038bc:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <MX_SPI1_Init+0x68>)
 80038be:	2200      	movs	r2, #0
 80038c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80038c2:	4b0e      	ldr	r3, [pc, #56]	; (80038fc <MX_SPI1_Init+0x68>)
 80038c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80038ca:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <MX_SPI1_Init+0x68>)
 80038cc:	2228      	movs	r2, #40	; 0x28
 80038ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038d0:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <MX_SPI1_Init+0x68>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038d6:	4b09      	ldr	r3, [pc, #36]	; (80038fc <MX_SPI1_Init+0x68>)
 80038d8:	2200      	movs	r2, #0
 80038da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038dc:	4b07      	ldr	r3, [pc, #28]	; (80038fc <MX_SPI1_Init+0x68>)
 80038de:	2200      	movs	r2, #0
 80038e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80038e2:	4b06      	ldr	r3, [pc, #24]	; (80038fc <MX_SPI1_Init+0x68>)
 80038e4:	220a      	movs	r2, #10
 80038e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80038e8:	4804      	ldr	r0, [pc, #16]	; (80038fc <MX_SPI1_Init+0x68>)
 80038ea:	f004 ff41 	bl	8008770 <HAL_SPI_Init>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80038f4:	f7ff fc20 	bl	8003138 <Error_Handler>
  }

}
 80038f8:	bf00      	nop
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20000328 	.word	0x20000328
 8003900:	40013000 	.word	0x40013000

08003904 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390c:	f107 0314 	add.w	r3, r7, #20
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a19      	ldr	r2, [pc, #100]	; (8003988 <HAL_SPI_MspInit+0x84>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d12b      	bne.n	800397e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	4b18      	ldr	r3, [pc, #96]	; (800398c <HAL_SPI_MspInit+0x88>)
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	4a17      	ldr	r2, [pc, #92]	; (800398c <HAL_SPI_MspInit+0x88>)
 8003930:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003934:	6453      	str	r3, [r2, #68]	; 0x44
 8003936:	4b15      	ldr	r3, [pc, #84]	; (800398c <HAL_SPI_MspInit+0x88>)
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	4b11      	ldr	r3, [pc, #68]	; (800398c <HAL_SPI_MspInit+0x88>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	4a10      	ldr	r2, [pc, #64]	; (800398c <HAL_SPI_MspInit+0x88>)
 800394c:	f043 0301 	orr.w	r3, r3, #1
 8003950:	6313      	str	r3, [r2, #48]	; 0x30
 8003952:	4b0e      	ldr	r3, [pc, #56]	; (800398c <HAL_SPI_MspInit+0x88>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 800395e:	2360      	movs	r3, #96	; 0x60
 8003960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003962:	2302      	movs	r3, #2
 8003964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800396a:	2303      	movs	r3, #3
 800396c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800396e:	2305      	movs	r3, #5
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003972:	f107 0314 	add.w	r3, r7, #20
 8003976:	4619      	mov	r1, r3
 8003978:	4805      	ldr	r0, [pc, #20]	; (8003990 <HAL_SPI_MspInit+0x8c>)
 800397a:	f002 fc13 	bl	80061a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800397e:	bf00      	nop
 8003980:	3728      	adds	r7, #40	; 0x28
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40013000 	.word	0x40013000
 800398c:	40023800 	.word	0x40023800
 8003990:	40020000 	.word	0x40020000

08003994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	607b      	str	r3, [r7, #4]
 800399e:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <HAL_MspInit+0x4c>)
 80039a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a2:	4a0f      	ldr	r2, [pc, #60]	; (80039e0 <HAL_MspInit+0x4c>)
 80039a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039a8:	6453      	str	r3, [r2, #68]	; 0x44
 80039aa:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <HAL_MspInit+0x4c>)
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039b2:	607b      	str	r3, [r7, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	603b      	str	r3, [r7, #0]
 80039ba:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <HAL_MspInit+0x4c>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	4a08      	ldr	r2, [pc, #32]	; (80039e0 <HAL_MspInit+0x4c>)
 80039c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c4:	6413      	str	r3, [r2, #64]	; 0x40
 80039c6:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <HAL_MspInit+0x4c>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800

080039e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80039e8:	bf00      	nop
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039f2:	b480      	push	{r7}
 80039f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039f6:	e7fe      	b.n	80039f6 <HardFault_Handler+0x4>

080039f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039fc:	e7fe      	b.n	80039fc <MemManage_Handler+0x4>

080039fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039fe:	b480      	push	{r7}
 8003a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a02:	e7fe      	b.n	8003a02 <BusFault_Handler+0x4>

08003a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a08:	e7fe      	b.n	8003a08 <UsageFault_Handler+0x4>

08003a0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a1c:	bf00      	nop
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a26:	b480      	push	{r7}
 8003a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a2a:	bf00      	nop
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a38:	f000 fcca 	bl	80043d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a3c:	bf00      	nop
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003a44:	4802      	ldr	r0, [pc, #8]	; (8003a50 <DMA1_Stream1_IRQHandler+0x10>)
 8003a46:	f002 f943 	bl	8005cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003a4a:	bf00      	nop
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000750 	.word	0x20000750

08003a54 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003a58:	4802      	ldr	r0, [pc, #8]	; (8003a64 <CAN1_RX0_IRQHandler+0x10>)
 8003a5a:	f001 fb1f 	bl	800509c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20000380 	.word	0x20000380

08003a68 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003a6c:	2080      	movs	r0, #128	; 0x80
 8003a6e:	f002 ff1d 	bl	80068ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003a72:	bf00      	nop
 8003a74:	bd80      	pop	{r7, pc}
	...

08003a78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a7c:	4b08      	ldr	r3, [pc, #32]	; (8003aa0 <SystemInit+0x28>)
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a82:	4a07      	ldr	r2, [pc, #28]	; (8003aa0 <SystemInit+0x28>)
 8003a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a8c:	4b04      	ldr	r3, [pc, #16]	; (8003aa0 <SystemInit+0x28>)
 8003a8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a92:	609a      	str	r2, [r3, #8]
#endif
}
 8003a94:	bf00      	nop
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	e000ed00 	.word	0xe000ed00

08003aa4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b096      	sub	sp, #88	; 0x58
 8003aa8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003aaa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	605a      	str	r2, [r3, #4]
 8003ab4:	609a      	str	r2, [r3, #8]
 8003ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ab8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	605a      	str	r2, [r3, #4]
 8003acc:	609a      	str	r2, [r3, #8]
 8003ace:	60da      	str	r2, [r3, #12]
 8003ad0:	611a      	str	r2, [r3, #16]
 8003ad2:	615a      	str	r2, [r3, #20]
 8003ad4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003ad6:	1d3b      	adds	r3, r7, #4
 8003ad8:	2220      	movs	r2, #32
 8003ada:	2100      	movs	r1, #0
 8003adc:	4618      	mov	r0, r3
 8003ade:	f008 fc3f 	bl	800c360 <memset>

  htim1.Instance = TIM1;
 8003ae2:	4b3e      	ldr	r3, [pc, #248]	; (8003bdc <MX_TIM1_Init+0x138>)
 8003ae4:	4a3e      	ldr	r2, [pc, #248]	; (8003be0 <MX_TIM1_Init+0x13c>)
 8003ae6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8003ae8:	4b3c      	ldr	r3, [pc, #240]	; (8003bdc <MX_TIM1_Init+0x138>)
 8003aea:	22b3      	movs	r2, #179	; 0xb3
 8003aec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aee:	4b3b      	ldr	r3, [pc, #236]	; (8003bdc <MX_TIM1_Init+0x138>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8003af4:	4b39      	ldr	r3, [pc, #228]	; (8003bdc <MX_TIM1_Init+0x138>)
 8003af6:	2263      	movs	r2, #99	; 0x63
 8003af8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003afa:	4b38      	ldr	r3, [pc, #224]	; (8003bdc <MX_TIM1_Init+0x138>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003b00:	4b36      	ldr	r3, [pc, #216]	; (8003bdc <MX_TIM1_Init+0x138>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b06:	4b35      	ldr	r3, [pc, #212]	; (8003bdc <MX_TIM1_Init+0x138>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003b0c:	4833      	ldr	r0, [pc, #204]	; (8003bdc <MX_TIM1_Init+0x138>)
 8003b0e:	f005 fb2d 	bl	800916c <HAL_TIM_Base_Init>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003b18:	f7ff fb0e 	bl	8003138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b20:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003b22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003b26:	4619      	mov	r1, r3
 8003b28:	482c      	ldr	r0, [pc, #176]	; (8003bdc <MX_TIM1_Init+0x138>)
 8003b2a:	f006 faab 	bl	800a084 <HAL_TIM_ConfigClockSource>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003b34:	f7ff fb00 	bl	8003138 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003b38:	4828      	ldr	r0, [pc, #160]	; (8003bdc <MX_TIM1_Init+0x138>)
 8003b3a:	f005 fc6d 	bl	8009418 <HAL_TIM_PWM_Init>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003b44:	f7ff faf8 	bl	8003138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b54:	4619      	mov	r1, r3
 8003b56:	4821      	ldr	r0, [pc, #132]	; (8003bdc <MX_TIM1_Init+0x138>)
 8003b58:	f007 fb32 	bl	800b1c0 <HAL_TIMEx_MasterConfigSynchronization>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8003b62:	f7ff fae9 	bl	8003138 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b66:	2360      	movs	r3, #96	; 0x60
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b72:	2300      	movs	r3, #0
 8003b74:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b76:	2300      	movs	r3, #0
 8003b78:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b86:	2204      	movs	r2, #4
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4814      	ldr	r0, [pc, #80]	; (8003bdc <MX_TIM1_Init+0x138>)
 8003b8c:	f006 f89e 	bl	8009ccc <HAL_TIM_PWM_ConfigChannel>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8003b96:	f7ff facf 	bl	8003138 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003baa:	2300      	movs	r3, #0
 8003bac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003bae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bb2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003bb8:	1d3b      	adds	r3, r7, #4
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4807      	ldr	r0, [pc, #28]	; (8003bdc <MX_TIM1_Init+0x138>)
 8003bbe:	f007 fbdd 	bl	800b37c <HAL_TIMEx_ConfigBreakDeadTime>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8003bc8:	f7ff fab6 	bl	8003138 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8003bcc:	4803      	ldr	r0, [pc, #12]	; (8003bdc <MX_TIM1_Init+0x138>)
 8003bce:	f000 fa2b 	bl	8004028 <HAL_TIM_MspPostInit>

}
 8003bd2:	bf00      	nop
 8003bd4:	3758      	adds	r7, #88	; 0x58
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	200006d0 	.word	0x200006d0
 8003be0:	40010000 	.word	0x40010000

08003be4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08a      	sub	sp, #40	; 0x28
 8003be8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bea:	f107 0318 	add.w	r3, r7, #24
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	605a      	str	r2, [r3, #4]
 8003bf4:	609a      	str	r2, [r3, #8]
 8003bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bf8:	f107 0310 	add.w	r3, r7, #16
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003c02:	463b      	mov	r3, r7
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	605a      	str	r2, [r3, #4]
 8003c0a:	609a      	str	r2, [r3, #8]
 8003c0c:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8003c0e:	4b31      	ldr	r3, [pc, #196]	; (8003cd4 <MX_TIM2_Init+0xf0>)
 8003c10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8003c16:	4b2f      	ldr	r3, [pc, #188]	; (8003cd4 <MX_TIM2_Init+0xf0>)
 8003c18:	22b3      	movs	r2, #179	; 0xb3
 8003c1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c1c:	4b2d      	ldr	r3, [pc, #180]	; (8003cd4 <MX_TIM2_Init+0xf0>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536-1;
 8003c22:	4b2c      	ldr	r3, [pc, #176]	; (8003cd4 <MX_TIM2_Init+0xf0>)
 8003c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c2a:	4b2a      	ldr	r3, [pc, #168]	; (8003cd4 <MX_TIM2_Init+0xf0>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c30:	4b28      	ldr	r3, [pc, #160]	; (8003cd4 <MX_TIM2_Init+0xf0>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c36:	4827      	ldr	r0, [pc, #156]	; (8003cd4 <MX_TIM2_Init+0xf0>)
 8003c38:	f005 fa98 	bl	800916c <HAL_TIM_Base_Init>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8003c42:	f7ff fa79 	bl	8003138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c4a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c4c:	f107 0318 	add.w	r3, r7, #24
 8003c50:	4619      	mov	r1, r3
 8003c52:	4820      	ldr	r0, [pc, #128]	; (8003cd4 <MX_TIM2_Init+0xf0>)
 8003c54:	f006 fa16 	bl	800a084 <HAL_TIM_ConfigClockSource>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003c5e:	f7ff fa6b 	bl	8003138 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003c62:	481c      	ldr	r0, [pc, #112]	; (8003cd4 <MX_TIM2_Init+0xf0>)
 8003c64:	f005 fda8 	bl	80097b8 <HAL_TIM_IC_Init>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003c6e:	f7ff fa63 	bl	8003138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c72:	2300      	movs	r3, #0
 8003c74:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c7a:	f107 0310 	add.w	r3, r7, #16
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4814      	ldr	r0, [pc, #80]	; (8003cd4 <MX_TIM2_Init+0xf0>)
 8003c82:	f007 fa9d 	bl	800b1c0 <HAL_TIMEx_MasterConfigSynchronization>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8003c8c:	f7ff fa54 	bl	8003138 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003c90:	2300      	movs	r3, #0
 8003c92:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003c94:	2301      	movs	r3, #1
 8003c96:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8003ca0:	463b      	mov	r3, r7
 8003ca2:	2208      	movs	r2, #8
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	480b      	ldr	r0, [pc, #44]	; (8003cd4 <MX_TIM2_Init+0xf0>)
 8003ca8:	f005 fe5c 	bl	8009964 <HAL_TIM_IC_ConfigChannel>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8003cb2:	f7ff fa41 	bl	8003138 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003cb6:	463b      	mov	r3, r7
 8003cb8:	220c      	movs	r2, #12
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4805      	ldr	r0, [pc, #20]	; (8003cd4 <MX_TIM2_Init+0xf0>)
 8003cbe:	f005 fe51 	bl	8009964 <HAL_TIM_IC_ConfigChannel>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8003cc8:	f7ff fa36 	bl	8003138 <Error_Handler>
  }

}
 8003ccc:	bf00      	nop
 8003cce:	3728      	adds	r7, #40	; 0x28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20000710 	.word	0x20000710

08003cd8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08e      	sub	sp, #56	; 0x38
 8003cdc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	605a      	str	r2, [r3, #4]
 8003ce8:	609a      	str	r2, [r3, #8]
 8003cea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cec:	f107 0320 	add.w	r3, r7, #32
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cf6:	1d3b      	adds	r3, r7, #4
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	605a      	str	r2, [r3, #4]
 8003cfe:	609a      	str	r2, [r3, #8]
 8003d00:	60da      	str	r2, [r3, #12]
 8003d02:	611a      	str	r2, [r3, #16]
 8003d04:	615a      	str	r2, [r3, #20]
 8003d06:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8003d08:	4b32      	ldr	r3, [pc, #200]	; (8003dd4 <MX_TIM3_Init+0xfc>)
 8003d0a:	4a33      	ldr	r2, [pc, #204]	; (8003dd8 <MX_TIM3_Init+0x100>)
 8003d0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8003d0e:	4b31      	ldr	r3, [pc, #196]	; (8003dd4 <MX_TIM3_Init+0xfc>)
 8003d10:	2259      	movs	r2, #89	; 0x59
 8003d12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d14:	4b2f      	ldr	r3, [pc, #188]	; (8003dd4 <MX_TIM3_Init+0xfc>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8003d1a:	4b2e      	ldr	r3, [pc, #184]	; (8003dd4 <MX_TIM3_Init+0xfc>)
 8003d1c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003d20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d22:	4b2c      	ldr	r3, [pc, #176]	; (8003dd4 <MX_TIM3_Init+0xfc>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d28:	4b2a      	ldr	r3, [pc, #168]	; (8003dd4 <MX_TIM3_Init+0xfc>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003d2e:	4829      	ldr	r0, [pc, #164]	; (8003dd4 <MX_TIM3_Init+0xfc>)
 8003d30:	f005 fa1c 	bl	800916c <HAL_TIM_Base_Init>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003d3a:	f7ff f9fd 	bl	8003138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003d44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4822      	ldr	r0, [pc, #136]	; (8003dd4 <MX_TIM3_Init+0xfc>)
 8003d4c:	f006 f99a 	bl	800a084 <HAL_TIM_ConfigClockSource>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003d56:	f7ff f9ef 	bl	8003138 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003d5a:	481e      	ldr	r0, [pc, #120]	; (8003dd4 <MX_TIM3_Init+0xfc>)
 8003d5c:	f005 fb5c 	bl	8009418 <HAL_TIM_PWM_Init>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003d66:	f7ff f9e7 	bl	8003138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d72:	f107 0320 	add.w	r3, r7, #32
 8003d76:	4619      	mov	r1, r3
 8003d78:	4816      	ldr	r0, [pc, #88]	; (8003dd4 <MX_TIM3_Init+0xfc>)
 8003d7a:	f007 fa21 	bl	800b1c0 <HAL_TIMEx_MasterConfigSynchronization>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003d84:	f7ff f9d8 	bl	8003138 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d88:	2360      	movs	r3, #96	; 0x60
 8003d8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8003d8c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003d90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d9a:	1d3b      	adds	r3, r7, #4
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	4619      	mov	r1, r3
 8003da0:	480c      	ldr	r0, [pc, #48]	; (8003dd4 <MX_TIM3_Init+0xfc>)
 8003da2:	f005 ff93 	bl	8009ccc <HAL_TIM_PWM_ConfigChannel>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003dac:	f7ff f9c4 	bl	8003138 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003db0:	1d3b      	adds	r3, r7, #4
 8003db2:	2204      	movs	r2, #4
 8003db4:	4619      	mov	r1, r3
 8003db6:	4807      	ldr	r0, [pc, #28]	; (8003dd4 <MX_TIM3_Init+0xfc>)
 8003db8:	f005 ff88 	bl	8009ccc <HAL_TIM_PWM_ConfigChannel>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003dc2:	f7ff f9b9 	bl	8003138 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8003dc6:	4803      	ldr	r0, [pc, #12]	; (8003dd4 <MX_TIM3_Init+0xfc>)
 8003dc8:	f000 f92e 	bl	8004028 <HAL_TIM_MspPostInit>

}
 8003dcc:	bf00      	nop
 8003dce:	3738      	adds	r7, #56	; 0x38
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	20000690 	.word	0x20000690
 8003dd8:	40000400 	.word	0x40000400

08003ddc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b096      	sub	sp, #88	; 0x58
 8003de0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003de2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	605a      	str	r2, [r3, #4]
 8003dec:	609a      	str	r2, [r3, #8]
 8003dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003df0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	605a      	str	r2, [r3, #4]
 8003e04:	609a      	str	r2, [r3, #8]
 8003e06:	60da      	str	r2, [r3, #12]
 8003e08:	611a      	str	r2, [r3, #16]
 8003e0a:	615a      	str	r2, [r3, #20]
 8003e0c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e0e:	1d3b      	adds	r3, r7, #4
 8003e10:	2220      	movs	r2, #32
 8003e12:	2100      	movs	r1, #0
 8003e14:	4618      	mov	r0, r3
 8003e16:	f008 faa3 	bl	800c360 <memset>

  htim8.Instance = TIM8;
 8003e1a:	4b3d      	ldr	r3, [pc, #244]	; (8003f10 <MX_TIM8_Init+0x134>)
 8003e1c:	4a3d      	ldr	r2, [pc, #244]	; (8003f14 <MX_TIM8_Init+0x138>)
 8003e1e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 8003e20:	4b3b      	ldr	r3, [pc, #236]	; (8003f10 <MX_TIM8_Init+0x134>)
 8003e22:	22b3      	movs	r2, #179	; 0xb3
 8003e24:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e26:	4b3a      	ldr	r3, [pc, #232]	; (8003f10 <MX_TIM8_Init+0x134>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 8003e2c:	4b38      	ldr	r3, [pc, #224]	; (8003f10 <MX_TIM8_Init+0x134>)
 8003e2e:	2263      	movs	r2, #99	; 0x63
 8003e30:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e32:	4b37      	ldr	r3, [pc, #220]	; (8003f10 <MX_TIM8_Init+0x134>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003e38:	4b35      	ldr	r3, [pc, #212]	; (8003f10 <MX_TIM8_Init+0x134>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e3e:	4b34      	ldr	r3, [pc, #208]	; (8003f10 <MX_TIM8_Init+0x134>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003e44:	4832      	ldr	r0, [pc, #200]	; (8003f10 <MX_TIM8_Init+0x134>)
 8003e46:	f005 f991 	bl	800916c <HAL_TIM_Base_Init>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8003e50:	f7ff f972 	bl	8003138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e58:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003e5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e5e:	4619      	mov	r1, r3
 8003e60:	482b      	ldr	r0, [pc, #172]	; (8003f10 <MX_TIM8_Init+0x134>)
 8003e62:	f006 f90f 	bl	800a084 <HAL_TIM_ConfigClockSource>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8003e6c:	f7ff f964 	bl	8003138 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003e70:	4827      	ldr	r0, [pc, #156]	; (8003f10 <MX_TIM8_Init+0x134>)
 8003e72:	f005 fad1 	bl	8009418 <HAL_TIM_PWM_Init>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8003e7c:	f7ff f95c 	bl	8003138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e80:	2300      	movs	r3, #0
 8003e82:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e84:	2300      	movs	r3, #0
 8003e86:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003e88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4820      	ldr	r0, [pc, #128]	; (8003f10 <MX_TIM8_Init+0x134>)
 8003e90:	f007 f996 	bl	800b1c0 <HAL_TIMEx_MasterConfigSynchronization>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8003e9a:	f7ff f94d 	bl	8003138 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e9e:	2360      	movs	r3, #96	; 0x60
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eba:	220c      	movs	r2, #12
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4814      	ldr	r0, [pc, #80]	; (8003f10 <MX_TIM8_Init+0x134>)
 8003ec0:	f005 ff04 	bl	8009ccc <HAL_TIM_PWM_ConfigChannel>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 8003eca:	f7ff f935 	bl	8003138 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003eda:	2300      	movs	r3, #0
 8003edc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ee2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ee6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003eec:	1d3b      	adds	r3, r7, #4
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4807      	ldr	r0, [pc, #28]	; (8003f10 <MX_TIM8_Init+0x134>)
 8003ef2:	f007 fa43 	bl	800b37c <HAL_TIMEx_ConfigBreakDeadTime>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <MX_TIM8_Init+0x124>
  {
    Error_Handler();
 8003efc:	f7ff f91c 	bl	8003138 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8003f00:	4803      	ldr	r0, [pc, #12]	; (8003f10 <MX_TIM8_Init+0x134>)
 8003f02:	f000 f891 	bl	8004028 <HAL_TIM_MspPostInit>

}
 8003f06:	bf00      	nop
 8003f08:	3758      	adds	r7, #88	; 0x58
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20000650 	.word	0x20000650
 8003f14:	40010400 	.word	0x40010400

08003f18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08c      	sub	sp, #48	; 0x30
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f20:	f107 031c 	add.w	r3, r7, #28
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	605a      	str	r2, [r3, #4]
 8003f2a:	609a      	str	r2, [r3, #8]
 8003f2c:	60da      	str	r2, [r3, #12]
 8003f2e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a37      	ldr	r2, [pc, #220]	; (8004014 <HAL_TIM_Base_MspInit+0xfc>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d10e      	bne.n	8003f58 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61bb      	str	r3, [r7, #24]
 8003f3e:	4b36      	ldr	r3, [pc, #216]	; (8004018 <HAL_TIM_Base_MspInit+0x100>)
 8003f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f42:	4a35      	ldr	r2, [pc, #212]	; (8004018 <HAL_TIM_Base_MspInit+0x100>)
 8003f44:	f043 0301 	orr.w	r3, r3, #1
 8003f48:	6453      	str	r3, [r2, #68]	; 0x44
 8003f4a:	4b33      	ldr	r3, [pc, #204]	; (8004018 <HAL_TIM_Base_MspInit+0x100>)
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	61bb      	str	r3, [r7, #24]
 8003f54:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003f56:	e059      	b.n	800400c <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM2)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f60:	d12d      	bne.n	8003fbe <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f62:	2300      	movs	r3, #0
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	4b2c      	ldr	r3, [pc, #176]	; (8004018 <HAL_TIM_Base_MspInit+0x100>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	4a2b      	ldr	r2, [pc, #172]	; (8004018 <HAL_TIM_Base_MspInit+0x100>)
 8003f6c:	f043 0301 	orr.w	r3, r3, #1
 8003f70:	6413      	str	r3, [r2, #64]	; 0x40
 8003f72:	4b29      	ldr	r3, [pc, #164]	; (8004018 <HAL_TIM_Base_MspInit+0x100>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f7e:	2300      	movs	r3, #0
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	4b25      	ldr	r3, [pc, #148]	; (8004018 <HAL_TIM_Base_MspInit+0x100>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	4a24      	ldr	r2, [pc, #144]	; (8004018 <HAL_TIM_Base_MspInit+0x100>)
 8003f88:	f043 0302 	orr.w	r3, r3, #2
 8003f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f8e:	4b22      	ldr	r3, [pc, #136]	; (8004018 <HAL_TIM_Base_MspInit+0x100>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	613b      	str	r3, [r7, #16]
 8003f98:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin|ClimbSpeed_TIM2_CH4_Pin;
 8003f9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fac:	2301      	movs	r3, #1
 8003fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fb0:	f107 031c 	add.w	r3, r7, #28
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4819      	ldr	r0, [pc, #100]	; (800401c <HAL_TIM_Base_MspInit+0x104>)
 8003fb8:	f002 f8f4 	bl	80061a4 <HAL_GPIO_Init>
}
 8003fbc:	e026      	b.n	800400c <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM3)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a17      	ldr	r2, [pc, #92]	; (8004020 <HAL_TIM_Base_MspInit+0x108>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d10e      	bne.n	8003fe6 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	4b12      	ldr	r3, [pc, #72]	; (8004018 <HAL_TIM_Base_MspInit+0x100>)
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	4a11      	ldr	r2, [pc, #68]	; (8004018 <HAL_TIM_Base_MspInit+0x100>)
 8003fd2:	f043 0302 	orr.w	r3, r3, #2
 8003fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8003fd8:	4b0f      	ldr	r3, [pc, #60]	; (8004018 <HAL_TIM_Base_MspInit+0x100>)
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
}
 8003fe4:	e012      	b.n	800400c <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM8)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a0e      	ldr	r2, [pc, #56]	; (8004024 <HAL_TIM_Base_MspInit+0x10c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d10d      	bne.n	800400c <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60bb      	str	r3, [r7, #8]
 8003ff4:	4b08      	ldr	r3, [pc, #32]	; (8004018 <HAL_TIM_Base_MspInit+0x100>)
 8003ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff8:	4a07      	ldr	r2, [pc, #28]	; (8004018 <HAL_TIM_Base_MspInit+0x100>)
 8003ffa:	f043 0302 	orr.w	r3, r3, #2
 8003ffe:	6453      	str	r3, [r2, #68]	; 0x44
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <HAL_TIM_Base_MspInit+0x100>)
 8004002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	68bb      	ldr	r3, [r7, #8]
}
 800400c:	bf00      	nop
 800400e:	3730      	adds	r7, #48	; 0x30
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40010000 	.word	0x40010000
 8004018:	40023800 	.word	0x40023800
 800401c:	40020400 	.word	0x40020400
 8004020:	40000400 	.word	0x40000400
 8004024:	40010400 	.word	0x40010400

08004028 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	; 0x28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004030:	f107 0314 	add.w	r3, r7, #20
 8004034:	2200      	movs	r2, #0
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	605a      	str	r2, [r3, #4]
 800403a:	609a      	str	r2, [r3, #8]
 800403c:	60da      	str	r2, [r3, #12]
 800403e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a37      	ldr	r2, [pc, #220]	; (8004124 <HAL_TIM_MspPostInit+0xfc>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d11f      	bne.n	800408a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800404a:	2300      	movs	r3, #0
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	4b36      	ldr	r3, [pc, #216]	; (8004128 <HAL_TIM_MspPostInit+0x100>)
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	4a35      	ldr	r2, [pc, #212]	; (8004128 <HAL_TIM_MspPostInit+0x100>)
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	6313      	str	r3, [r2, #48]	; 0x30
 800405a:	4b33      	ldr	r3, [pc, #204]	; (8004128 <HAL_TIM_MspPostInit+0x100>)
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	613b      	str	r3, [r7, #16]
 8004064:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 8004066:	f44f 7300 	mov.w	r3, #512	; 0x200
 800406a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800406c:	2302      	movs	r3, #2
 800406e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004070:	2300      	movs	r3, #0
 8004072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004074:	2300      	movs	r3, #0
 8004076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004078:	2301      	movs	r3, #1
 800407a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 800407c:	f107 0314 	add.w	r3, r7, #20
 8004080:	4619      	mov	r1, r3
 8004082:	482a      	ldr	r0, [pc, #168]	; (800412c <HAL_TIM_MspPostInit+0x104>)
 8004084:	f002 f88e 	bl	80061a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004088:	e047      	b.n	800411a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a28      	ldr	r2, [pc, #160]	; (8004130 <HAL_TIM_MspPostInit+0x108>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d11e      	bne.n	80040d2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	4b23      	ldr	r3, [pc, #140]	; (8004128 <HAL_TIM_MspPostInit+0x100>)
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	4a22      	ldr	r2, [pc, #136]	; (8004128 <HAL_TIM_MspPostInit+0x100>)
 800409e:	f043 0304 	orr.w	r3, r3, #4
 80040a2:	6313      	str	r3, [r2, #48]	; 0x30
 80040a4:	4b20      	ldr	r3, [pc, #128]	; (8004128 <HAL_TIM_MspPostInit+0x100>)
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 80040b0:	23c0      	movs	r3, #192	; 0xc0
 80040b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b4:	2302      	movs	r3, #2
 80040b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b8:	2300      	movs	r3, #0
 80040ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040bc:	2300      	movs	r3, #0
 80040be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80040c0:	2302      	movs	r3, #2
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040c4:	f107 0314 	add.w	r3, r7, #20
 80040c8:	4619      	mov	r1, r3
 80040ca:	481a      	ldr	r0, [pc, #104]	; (8004134 <HAL_TIM_MspPostInit+0x10c>)
 80040cc:	f002 f86a 	bl	80061a4 <HAL_GPIO_Init>
}
 80040d0:	e023      	b.n	800411a <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM8)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a18      	ldr	r2, [pc, #96]	; (8004138 <HAL_TIM_MspPostInit+0x110>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d11e      	bne.n	800411a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040dc:	2300      	movs	r3, #0
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	4b11      	ldr	r3, [pc, #68]	; (8004128 <HAL_TIM_MspPostInit+0x100>)
 80040e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e4:	4a10      	ldr	r2, [pc, #64]	; (8004128 <HAL_TIM_MspPostInit+0x100>)
 80040e6:	f043 0304 	orr.w	r3, r3, #4
 80040ea:	6313      	str	r3, [r2, #48]	; 0x30
 80040ec:	4b0e      	ldr	r3, [pc, #56]	; (8004128 <HAL_TIM_MspPostInit+0x100>)
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	60bb      	str	r3, [r7, #8]
 80040f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Climb_TIM8_CH4_Pin;
 80040f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040fe:	2302      	movs	r3, #2
 8004100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004102:	2300      	movs	r3, #0
 8004104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004106:	2300      	movs	r3, #0
 8004108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800410a:	2303      	movs	r3, #3
 800410c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM8_CH4_GPIO_Port, &GPIO_InitStruct);
 800410e:	f107 0314 	add.w	r3, r7, #20
 8004112:	4619      	mov	r1, r3
 8004114:	4807      	ldr	r0, [pc, #28]	; (8004134 <HAL_TIM_MspPostInit+0x10c>)
 8004116:	f002 f845 	bl	80061a4 <HAL_GPIO_Init>
}
 800411a:	bf00      	nop
 800411c:	3728      	adds	r7, #40	; 0x28
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40010000 	.word	0x40010000
 8004128:	40023800 	.word	0x40023800
 800412c:	40020000 	.word	0x40020000
 8004130:	40000400 	.word	0x40000400
 8004134:	40020800 	.word	0x40020800
 8004138:	40010400 	.word	0x40010400

0800413c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8004140:	4b11      	ldr	r3, [pc, #68]	; (8004188 <MX_USART3_UART_Init+0x4c>)
 8004142:	4a12      	ldr	r2, [pc, #72]	; (800418c <MX_USART3_UART_Init+0x50>)
 8004144:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004146:	4b10      	ldr	r3, [pc, #64]	; (8004188 <MX_USART3_UART_Init+0x4c>)
 8004148:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800414c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800414e:	4b0e      	ldr	r3, [pc, #56]	; (8004188 <MX_USART3_UART_Init+0x4c>)
 8004150:	2200      	movs	r2, #0
 8004152:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004154:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <MX_USART3_UART_Init+0x4c>)
 8004156:	2200      	movs	r2, #0
 8004158:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800415a:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <MX_USART3_UART_Init+0x4c>)
 800415c:	2200      	movs	r2, #0
 800415e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004160:	4b09      	ldr	r3, [pc, #36]	; (8004188 <MX_USART3_UART_Init+0x4c>)
 8004162:	220c      	movs	r2, #12
 8004164:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004166:	4b08      	ldr	r3, [pc, #32]	; (8004188 <MX_USART3_UART_Init+0x4c>)
 8004168:	2200      	movs	r2, #0
 800416a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800416c:	4b06      	ldr	r3, [pc, #24]	; (8004188 <MX_USART3_UART_Init+0x4c>)
 800416e:	2200      	movs	r2, #0
 8004170:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004172:	4805      	ldr	r0, [pc, #20]	; (8004188 <MX_USART3_UART_Init+0x4c>)
 8004174:	f007 f9ce 	bl	800b514 <HAL_UART_Init>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800417e:	f7fe ffdb 	bl	8003138 <Error_Handler>
  }

}
 8004182:	bf00      	nop
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	200007b0 	.word	0x200007b0
 800418c:	40004800 	.word	0x40004800

08004190 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08a      	sub	sp, #40	; 0x28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004198:	f107 0314 	add.w	r3, r7, #20
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	605a      	str	r2, [r3, #4]
 80041a2:	609a      	str	r2, [r3, #8]
 80041a4:	60da      	str	r2, [r3, #12]
 80041a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a30      	ldr	r2, [pc, #192]	; (8004270 <HAL_UART_MspInit+0xe0>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d15a      	bne.n	8004268 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80041b2:	2300      	movs	r3, #0
 80041b4:	613b      	str	r3, [r7, #16]
 80041b6:	4b2f      	ldr	r3, [pc, #188]	; (8004274 <HAL_UART_MspInit+0xe4>)
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	4a2e      	ldr	r2, [pc, #184]	; (8004274 <HAL_UART_MspInit+0xe4>)
 80041bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041c0:	6413      	str	r3, [r2, #64]	; 0x40
 80041c2:	4b2c      	ldr	r3, [pc, #176]	; (8004274 <HAL_UART_MspInit+0xe4>)
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80041ce:	2300      	movs	r3, #0
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	4b28      	ldr	r3, [pc, #160]	; (8004274 <HAL_UART_MspInit+0xe4>)
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	4a27      	ldr	r2, [pc, #156]	; (8004274 <HAL_UART_MspInit+0xe4>)
 80041d8:	f043 0308 	orr.w	r3, r3, #8
 80041dc:	6313      	str	r3, [r2, #48]	; 0x30
 80041de:	4b25      	ldr	r3, [pc, #148]	; (8004274 <HAL_UART_MspInit+0xe4>)
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 80041ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80041ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f0:	2302      	movs	r3, #2
 80041f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041f8:	2303      	movs	r3, #3
 80041fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80041fc:	2307      	movs	r3, #7
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004200:	f107 0314 	add.w	r3, r7, #20
 8004204:	4619      	mov	r1, r3
 8004206:	481c      	ldr	r0, [pc, #112]	; (8004278 <HAL_UART_MspInit+0xe8>)
 8004208:	f001 ffcc 	bl	80061a4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800420c:	4b1b      	ldr	r3, [pc, #108]	; (800427c <HAL_UART_MspInit+0xec>)
 800420e:	4a1c      	ldr	r2, [pc, #112]	; (8004280 <HAL_UART_MspInit+0xf0>)
 8004210:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004212:	4b1a      	ldr	r3, [pc, #104]	; (800427c <HAL_UART_MspInit+0xec>)
 8004214:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004218:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800421a:	4b18      	ldr	r3, [pc, #96]	; (800427c <HAL_UART_MspInit+0xec>)
 800421c:	2200      	movs	r2, #0
 800421e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004220:	4b16      	ldr	r3, [pc, #88]	; (800427c <HAL_UART_MspInit+0xec>)
 8004222:	2200      	movs	r2, #0
 8004224:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004226:	4b15      	ldr	r3, [pc, #84]	; (800427c <HAL_UART_MspInit+0xec>)
 8004228:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800422c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800422e:	4b13      	ldr	r3, [pc, #76]	; (800427c <HAL_UART_MspInit+0xec>)
 8004230:	2200      	movs	r2, #0
 8004232:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004234:	4b11      	ldr	r3, [pc, #68]	; (800427c <HAL_UART_MspInit+0xec>)
 8004236:	2200      	movs	r2, #0
 8004238:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800423a:	4b10      	ldr	r3, [pc, #64]	; (800427c <HAL_UART_MspInit+0xec>)
 800423c:	2200      	movs	r2, #0
 800423e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004240:	4b0e      	ldr	r3, [pc, #56]	; (800427c <HAL_UART_MspInit+0xec>)
 8004242:	2200      	movs	r2, #0
 8004244:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004246:	4b0d      	ldr	r3, [pc, #52]	; (800427c <HAL_UART_MspInit+0xec>)
 8004248:	2200      	movs	r2, #0
 800424a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800424c:	480b      	ldr	r0, [pc, #44]	; (800427c <HAL_UART_MspInit+0xec>)
 800424e:	f001 fabd 	bl	80057cc <HAL_DMA_Init>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004258:	f7fe ff6e 	bl	8003138 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a07      	ldr	r2, [pc, #28]	; (800427c <HAL_UART_MspInit+0xec>)
 8004260:	635a      	str	r2, [r3, #52]	; 0x34
 8004262:	4a06      	ldr	r2, [pc, #24]	; (800427c <HAL_UART_MspInit+0xec>)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004268:	bf00      	nop
 800426a:	3728      	adds	r7, #40	; 0x28
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40004800 	.word	0x40004800
 8004274:	40023800 	.word	0x40023800
 8004278:	40020c00 	.word	0x40020c00
 800427c:	20000750 	.word	0x20000750
 8004280:	40026028 	.word	0x40026028

08004284 <wheelSpeedControl_Init>:

  joy_pos_buffer_cnt++;
}

void wheelSpeedControl_Init(WheelSpeed* wheel, float max_lin_speed, float max_ang_speed)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004290:	edc7 0a01 	vstr	s1, [r7, #4]
  wheel->stable_cnt = 0;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	611a      	str	r2, [r3, #16]
  wheel->cur_r = 0.0f;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	605a      	str	r2, [r3, #4]
  wheel->cur_l = 0.0f;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]
  wheel->pre_l= 0.0f;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	609a      	str	r2, [r3, #8]
  wheel->pre_r = 0.0f;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	60da      	str	r2, [r3, #12]
  wheel->max_angular_speed = max_ang_speed;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	619a      	str	r2, [r3, #24]
  wheel->max_linear_speed = max_lin_speed;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	615a      	str	r2, [r3, #20]
  wheel->start_from_stationary = false;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	771a      	strb	r2, [r3, #28]
}
 80042cc:	bf00      	nop
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 


  ldr   sp, =_estack       /* set stack pointer */
 80042d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004310 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80042dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80042de:	e003      	b.n	80042e8 <LoopCopyDataInit>

080042e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80042e0:	4b0c      	ldr	r3, [pc, #48]	; (8004314 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80042e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80042e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80042e6:	3104      	adds	r1, #4

080042e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80042e8:	480b      	ldr	r0, [pc, #44]	; (8004318 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80042ea:	4b0c      	ldr	r3, [pc, #48]	; (800431c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80042ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80042ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80042f0:	d3f6      	bcc.n	80042e0 <CopyDataInit>
  ldr  r2, =_sbss
 80042f2:	4a0b      	ldr	r2, [pc, #44]	; (8004320 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80042f4:	e002      	b.n	80042fc <LoopFillZerobss>

080042f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80042f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80042f8:	f842 3b04 	str.w	r3, [r2], #4

080042fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80042fc:	4b09      	ldr	r3, [pc, #36]	; (8004324 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80042fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004300:	d3f9      	bcc.n	80042f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004302:	f7ff fbb9 	bl	8003a78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004306:	f008 f807 	bl	800c318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800430a:	f7fd fe75 	bl	8001ff8 <main>
  bx  lr    
 800430e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004310:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004314:	0800e5c0 	.word	0x0800e5c0
  ldr  r0, =_sdata
 8004318:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800431c:	2000026c 	.word	0x2000026c
  ldr  r2, =_sbss
 8004320:	20000270 	.word	0x20000270
  ldr  r3, = _ebss
 8004324:	200007f4 	.word	0x200007f4

08004328 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004328:	e7fe      	b.n	8004328 <ADC_IRQHandler>
	...

0800432c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004330:	4b0e      	ldr	r3, [pc, #56]	; (800436c <HAL_Init+0x40>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a0d      	ldr	r2, [pc, #52]	; (800436c <HAL_Init+0x40>)
 8004336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800433a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <HAL_Init+0x40>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a0a      	ldr	r2, [pc, #40]	; (800436c <HAL_Init+0x40>)
 8004342:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004346:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004348:	4b08      	ldr	r3, [pc, #32]	; (800436c <HAL_Init+0x40>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a07      	ldr	r2, [pc, #28]	; (800436c <HAL_Init+0x40>)
 800434e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004352:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004354:	2003      	movs	r0, #3
 8004356:	f001 f9a1 	bl	800569c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800435a:	2000      	movs	r0, #0
 800435c:	f000 f808 	bl	8004370 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004360:	f7ff fb18 	bl	8003994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40023c00 	.word	0x40023c00

08004370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004378:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <HAL_InitTick+0x54>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	4b12      	ldr	r3, [pc, #72]	; (80043c8 <HAL_InitTick+0x58>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	4619      	mov	r1, r3
 8004382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004386:	fbb3 f3f1 	udiv	r3, r3, r1
 800438a:	fbb2 f3f3 	udiv	r3, r2, r3
 800438e:	4618      	mov	r0, r3
 8004390:	f001 f9e8 	bl	8005764 <HAL_SYSTICK_Config>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e00e      	b.n	80043bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b0f      	cmp	r3, #15
 80043a2:	d80a      	bhi.n	80043ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043a4:	2200      	movs	r2, #0
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043ac:	f001 f996 	bl	80056dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043b0:	4a06      	ldr	r2, [pc, #24]	; (80043cc <HAL_InitTick+0x5c>)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	e000      	b.n	80043bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	200001f8 	.word	0x200001f8
 80043c8:	20000200 	.word	0x20000200
 80043cc:	200001fc 	.word	0x200001fc

080043d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043d4:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <HAL_IncTick+0x20>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	461a      	mov	r2, r3
 80043da:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <HAL_IncTick+0x24>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4413      	add	r3, r2
 80043e0:	4a04      	ldr	r2, [pc, #16]	; (80043f4 <HAL_IncTick+0x24>)
 80043e2:	6013      	str	r3, [r2, #0]
}
 80043e4:	bf00      	nop
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20000200 	.word	0x20000200
 80043f4:	200007f0 	.word	0x200007f0

080043f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  return uwTick;
 80043fc:	4b03      	ldr	r3, [pc, #12]	; (800440c <HAL_GetTick+0x14>)
 80043fe:	681b      	ldr	r3, [r3, #0]
}
 8004400:	4618      	mov	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	200007f0 	.word	0x200007f0

08004410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004418:	f7ff ffee 	bl	80043f8 <HAL_GetTick>
 800441c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004428:	d005      	beq.n	8004436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800442a:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <HAL_Delay+0x44>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4413      	add	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004436:	bf00      	nop
 8004438:	f7ff ffde 	bl	80043f8 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	429a      	cmp	r2, r3
 8004446:	d8f7      	bhi.n	8004438 <HAL_Delay+0x28>
  {
  }
}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000200 	.word	0x20000200

08004458 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e20e      	b.n	8004888 <HAL_CAN_Init+0x430>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4aa0      	ldr	r2, [pc, #640]	; (80046f0 <HAL_CAN_Init+0x298>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d009      	beq.n	8004488 <HAL_CAN_Init+0x30>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a9e      	ldr	r2, [pc, #632]	; (80046f4 <HAL_CAN_Init+0x29c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d004      	beq.n	8004488 <HAL_CAN_Init+0x30>
 800447e:	f240 111d 	movw	r1, #285	; 0x11d
 8004482:	489d      	ldr	r0, [pc, #628]	; (80046f8 <HAL_CAN_Init+0x2a0>)
 8004484:	f7fe fe5f 	bl	8003146 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	7e1b      	ldrb	r3, [r3, #24]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d008      	beq.n	80044a2 <HAL_CAN_Init+0x4a>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	7e1b      	ldrb	r3, [r3, #24]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d004      	beq.n	80044a2 <HAL_CAN_Init+0x4a>
 8004498:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800449c:	4896      	ldr	r0, [pc, #600]	; (80046f8 <HAL_CAN_Init+0x2a0>)
 800449e:	f7fe fe52 	bl	8003146 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	7e5b      	ldrb	r3, [r3, #25]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d008      	beq.n	80044bc <HAL_CAN_Init+0x64>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	7e5b      	ldrb	r3, [r3, #25]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d004      	beq.n	80044bc <HAL_CAN_Init+0x64>
 80044b2:	f240 111f 	movw	r1, #287	; 0x11f
 80044b6:	4890      	ldr	r0, [pc, #576]	; (80046f8 <HAL_CAN_Init+0x2a0>)
 80044b8:	f7fe fe45 	bl	8003146 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	7e9b      	ldrb	r3, [r3, #26]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d008      	beq.n	80044d6 <HAL_CAN_Init+0x7e>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	7e9b      	ldrb	r3, [r3, #26]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d004      	beq.n	80044d6 <HAL_CAN_Init+0x7e>
 80044cc:	f44f 7190 	mov.w	r1, #288	; 0x120
 80044d0:	4889      	ldr	r0, [pc, #548]	; (80046f8 <HAL_CAN_Init+0x2a0>)
 80044d2:	f7fe fe38 	bl	8003146 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	7edb      	ldrb	r3, [r3, #27]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d008      	beq.n	80044f0 <HAL_CAN_Init+0x98>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	7edb      	ldrb	r3, [r3, #27]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d004      	beq.n	80044f0 <HAL_CAN_Init+0x98>
 80044e6:	f240 1121 	movw	r1, #289	; 0x121
 80044ea:	4883      	ldr	r0, [pc, #524]	; (80046f8 <HAL_CAN_Init+0x2a0>)
 80044ec:	f7fe fe2b 	bl	8003146 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	7f1b      	ldrb	r3, [r3, #28]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d008      	beq.n	800450a <HAL_CAN_Init+0xb2>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	7f1b      	ldrb	r3, [r3, #28]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d004      	beq.n	800450a <HAL_CAN_Init+0xb2>
 8004500:	f44f 7191 	mov.w	r1, #290	; 0x122
 8004504:	487c      	ldr	r0, [pc, #496]	; (80046f8 <HAL_CAN_Init+0x2a0>)
 8004506:	f7fe fe1e 	bl	8003146 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	7f5b      	ldrb	r3, [r3, #29]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d008      	beq.n	8004524 <HAL_CAN_Init+0xcc>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	7f5b      	ldrb	r3, [r3, #29]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d004      	beq.n	8004524 <HAL_CAN_Init+0xcc>
 800451a:	f240 1123 	movw	r1, #291	; 0x123
 800451e:	4876      	ldr	r0, [pc, #472]	; (80046f8 <HAL_CAN_Init+0x2a0>)
 8004520:	f7fe fe11 	bl	8003146 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d013      	beq.n	8004554 <HAL_CAN_Init+0xfc>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004534:	d00e      	beq.n	8004554 <HAL_CAN_Init+0xfc>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800453e:	d009      	beq.n	8004554 <HAL_CAN_Init+0xfc>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004548:	d004      	beq.n	8004554 <HAL_CAN_Init+0xfc>
 800454a:	f44f 7192 	mov.w	r1, #292	; 0x124
 800454e:	486a      	ldr	r0, [pc, #424]	; (80046f8 <HAL_CAN_Init+0x2a0>)
 8004550:	f7fe fdf9 	bl	8003146 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d013      	beq.n	8004584 <HAL_CAN_Init+0x12c>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004564:	d00e      	beq.n	8004584 <HAL_CAN_Init+0x12c>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800456e:	d009      	beq.n	8004584 <HAL_CAN_Init+0x12c>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004578:	d004      	beq.n	8004584 <HAL_CAN_Init+0x12c>
 800457a:	f240 1125 	movw	r1, #293	; 0x125
 800457e:	485e      	ldr	r0, [pc, #376]	; (80046f8 <HAL_CAN_Init+0x2a0>)
 8004580:	f7fe fde1 	bl	8003146 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d04f      	beq.n	800462c <HAL_CAN_Init+0x1d4>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004594:	d04a      	beq.n	800462c <HAL_CAN_Init+0x1d4>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800459e:	d045      	beq.n	800462c <HAL_CAN_Init+0x1d4>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045a8:	d040      	beq.n	800462c <HAL_CAN_Init+0x1d4>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80045b2:	d03b      	beq.n	800462c <HAL_CAN_Init+0x1d4>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045bc:	d036      	beq.n	800462c <HAL_CAN_Init+0x1d4>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80045c6:	d031      	beq.n	800462c <HAL_CAN_Init+0x1d4>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80045d0:	d02c      	beq.n	800462c <HAL_CAN_Init+0x1d4>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80045da:	d027      	beq.n	800462c <HAL_CAN_Init+0x1d4>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 80045e4:	d022      	beq.n	800462c <HAL_CAN_Init+0x1d4>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80045ee:	d01d      	beq.n	800462c <HAL_CAN_Init+0x1d4>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 80045f8:	d018      	beq.n	800462c <HAL_CAN_Init+0x1d4>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004602:	d013      	beq.n	800462c <HAL_CAN_Init+0x1d4>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 800460c:	d00e      	beq.n	800462c <HAL_CAN_Init+0x1d4>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004616:	d009      	beq.n	800462c <HAL_CAN_Init+0x1d4>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8004620:	d004      	beq.n	800462c <HAL_CAN_Init+0x1d4>
 8004622:	f44f 7193 	mov.w	r1, #294	; 0x126
 8004626:	4834      	ldr	r0, [pc, #208]	; (80046f8 <HAL_CAN_Init+0x2a0>)
 8004628:	f7fe fd8d 	bl	8003146 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d027      	beq.n	8004684 <HAL_CAN_Init+0x22c>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800463c:	d022      	beq.n	8004684 <HAL_CAN_Init+0x22c>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004646:	d01d      	beq.n	8004684 <HAL_CAN_Init+0x22c>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004650:	d018      	beq.n	8004684 <HAL_CAN_Init+0x22c>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800465a:	d013      	beq.n	8004684 <HAL_CAN_Init+0x22c>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8004664:	d00e      	beq.n	8004684 <HAL_CAN_Init+0x22c>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800466e:	d009      	beq.n	8004684 <HAL_CAN_Init+0x22c>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8004678:	d004      	beq.n	8004684 <HAL_CAN_Init+0x22c>
 800467a:	f240 1127 	movw	r1, #295	; 0x127
 800467e:	481e      	ldr	r0, [pc, #120]	; (80046f8 <HAL_CAN_Init+0x2a0>)
 8004680:	f7fe fd61 	bl	8003146 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d004      	beq.n	8004696 <HAL_CAN_Init+0x23e>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004694:	d904      	bls.n	80046a0 <HAL_CAN_Init+0x248>
 8004696:	f44f 7194 	mov.w	r1, #296	; 0x128
 800469a:	4817      	ldr	r0, [pc, #92]	; (80046f8 <HAL_CAN_Init+0x2a0>)
 800469c:	f7fe fd53 	bl	8003146 <assert_failed>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <HAL_CAN_Init+0x25a>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7fd f9b3 	bl	8001a18 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0202 	bic.w	r2, r2, #2
 80046c0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046c2:	f7ff fe99 	bl	80043f8 <HAL_GetTick>
 80046c6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80046c8:	e018      	b.n	80046fc <HAL_CAN_Init+0x2a4>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80046ca:	f7ff fe95 	bl	80043f8 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b0a      	cmp	r3, #10
 80046d6:	d911      	bls.n	80046fc <HAL_CAN_Init+0x2a4>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2205      	movs	r2, #5
 80046e8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0cb      	b.n	8004888 <HAL_CAN_Init+0x430>
 80046f0:	40006400 	.word	0x40006400
 80046f4:	40006800 	.word	0x40006800
 80046f8:	0800e090 	.word	0x0800e090
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1df      	bne.n	80046ca <HAL_CAN_Init+0x272>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0201 	orr.w	r2, r2, #1
 8004718:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800471a:	f7ff fe6d 	bl	80043f8 <HAL_GetTick>
 800471e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004720:	e012      	b.n	8004748 <HAL_CAN_Init+0x2f0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004722:	f7ff fe69 	bl	80043f8 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b0a      	cmp	r3, #10
 800472e:	d90b      	bls.n	8004748 <HAL_CAN_Init+0x2f0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2205      	movs	r2, #5
 8004740:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e09f      	b.n	8004888 <HAL_CAN_Init+0x430>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0e5      	beq.n	8004722 <HAL_CAN_Init+0x2ca>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	7e1b      	ldrb	r3, [r3, #24]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d108      	bne.n	8004770 <HAL_CAN_Init+0x318>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	e007      	b.n	8004780 <HAL_CAN_Init+0x328>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800477e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	7e5b      	ldrb	r3, [r3, #25]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d108      	bne.n	800479a <HAL_CAN_Init+0x342>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	e007      	b.n	80047aa <HAL_CAN_Init+0x352>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	7e9b      	ldrb	r3, [r3, #26]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d108      	bne.n	80047c4 <HAL_CAN_Init+0x36c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 0220 	orr.w	r2, r2, #32
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	e007      	b.n	80047d4 <HAL_CAN_Init+0x37c>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0220 	bic.w	r2, r2, #32
 80047d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	7edb      	ldrb	r3, [r3, #27]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d108      	bne.n	80047ee <HAL_CAN_Init+0x396>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0210 	bic.w	r2, r2, #16
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	e007      	b.n	80047fe <HAL_CAN_Init+0x3a6>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f042 0210 	orr.w	r2, r2, #16
 80047fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	7f1b      	ldrb	r3, [r3, #28]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d108      	bne.n	8004818 <HAL_CAN_Init+0x3c0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f042 0208 	orr.w	r2, r2, #8
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	e007      	b.n	8004828 <HAL_CAN_Init+0x3d0>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0208 	bic.w	r2, r2, #8
 8004826:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	7f5b      	ldrb	r3, [r3, #29]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d108      	bne.n	8004842 <HAL_CAN_Init+0x3ea>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0204 	orr.w	r2, r2, #4
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	e007      	b.n	8004852 <HAL_CAN_Init+0x3fa>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0204 	bic.w	r2, r2, #4
 8004850:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	ea42 0103 	orr.w	r1, r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	1e5a      	subs	r2, r3, #1
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048a6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80048a8:	7cfb      	ldrb	r3, [r7, #19]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d003      	beq.n	80048b6 <HAL_CAN_ConfigFilter+0x26>
 80048ae:	7cfb      	ldrb	r3, [r7, #19]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	f040 812c 	bne.w	8004b0e <HAL_CAN_ConfigFilter+0x27e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048be:	d304      	bcc.n	80048ca <HAL_CAN_ConfigFilter+0x3a>
 80048c0:	f44f 7154 	mov.w	r1, #848	; 0x350
 80048c4:	4897      	ldr	r0, [pc, #604]	; (8004b24 <HAL_CAN_ConfigFilter+0x294>)
 80048c6:	f7fe fc3e 	bl	8003146 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d2:	d304      	bcc.n	80048de <HAL_CAN_ConfigFilter+0x4e>
 80048d4:	f240 3151 	movw	r1, #849	; 0x351
 80048d8:	4892      	ldr	r0, [pc, #584]	; (8004b24 <HAL_CAN_ConfigFilter+0x294>)
 80048da:	f7fe fc34 	bl	8003146 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e6:	d304      	bcc.n	80048f2 <HAL_CAN_ConfigFilter+0x62>
 80048e8:	f240 3152 	movw	r1, #850	; 0x352
 80048ec:	488d      	ldr	r0, [pc, #564]	; (8004b24 <HAL_CAN_ConfigFilter+0x294>)
 80048ee:	f7fe fc2a 	bl	8003146 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fa:	d304      	bcc.n	8004906 <HAL_CAN_ConfigFilter+0x76>
 80048fc:	f240 3153 	movw	r1, #851	; 0x353
 8004900:	4888      	ldr	r0, [pc, #544]	; (8004b24 <HAL_CAN_ConfigFilter+0x294>)
 8004902:	f7fe fc20 	bl	8003146 <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d008      	beq.n	8004920 <HAL_CAN_ConfigFilter+0x90>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d004      	beq.n	8004920 <HAL_CAN_ConfigFilter+0x90>
 8004916:	f44f 7155 	mov.w	r1, #852	; 0x354
 800491a:	4882      	ldr	r0, [pc, #520]	; (8004b24 <HAL_CAN_ConfigFilter+0x294>)
 800491c:	f7fe fc13 	bl	8003146 <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d008      	beq.n	800493a <HAL_CAN_ConfigFilter+0xaa>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d004      	beq.n	800493a <HAL_CAN_ConfigFilter+0xaa>
 8004930:	f240 3155 	movw	r1, #853	; 0x355
 8004934:	487b      	ldr	r0, [pc, #492]	; (8004b24 <HAL_CAN_ConfigFilter+0x294>)
 8004936:	f7fe fc06 	bl	8003146 <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d008      	beq.n	8004954 <HAL_CAN_ConfigFilter+0xc4>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d004      	beq.n	8004954 <HAL_CAN_ConfigFilter+0xc4>
 800494a:	f240 3156 	movw	r1, #854	; 0x356
 800494e:	4875      	ldr	r0, [pc, #468]	; (8004b24 <HAL_CAN_ConfigFilter+0x294>)
 8004950:	f7fe fbf9 	bl	8003146 <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d008      	beq.n	800496e <HAL_CAN_ConfigFilter+0xde>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d004      	beq.n	800496e <HAL_CAN_ConfigFilter+0xde>
 8004964:	f240 3157 	movw	r1, #855	; 0x357
 8004968:	486e      	ldr	r0, [pc, #440]	; (8004b24 <HAL_CAN_ConfigFilter+0x294>)
 800496a:	f7fe fbec 	bl	8003146 <assert_failed>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800496e:	4b6e      	ldr	r3, [pc, #440]	; (8004b28 <HAL_CAN_ConfigFilter+0x298>)
 8004970:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	2b1b      	cmp	r3, #27
 8004978:	d904      	bls.n	8004984 <HAL_CAN_ConfigFilter+0xf4>
 800497a:	f240 3172 	movw	r1, #882	; 0x372
 800497e:	4869      	ldr	r0, [pc, #420]	; (8004b24 <HAL_CAN_ConfigFilter+0x294>)
 8004980:	f7fe fbe1 	bl	8003146 <assert_failed>
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	2b1b      	cmp	r3, #27
 800498a:	d904      	bls.n	8004996 <HAL_CAN_ConfigFilter+0x106>
 800498c:	f240 3173 	movw	r1, #883	; 0x373
 8004990:	4864      	ldr	r0, [pc, #400]	; (8004b24 <HAL_CAN_ConfigFilter+0x294>)
 8004992:	f7fe fbd8 	bl	8003146 <assert_failed>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800499c:	f043 0201 	orr.w	r2, r3, #1
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80049ac:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	021b      	lsls	r3, r3, #8
 80049c2:	431a      	orrs	r2, r3
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f003 031f 	and.w	r3, r3, #31
 80049d2:	2201      	movs	r2, #1
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	43db      	mvns	r3, r3
 80049e4:	401a      	ands	r2, r3
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d123      	bne.n	8004a3c <HAL_CAN_ConfigFilter+0x1ac>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	43db      	mvns	r3, r3
 80049fe:	401a      	ands	r2, r3
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004a16:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	3248      	adds	r2, #72	; 0x48
 8004a1c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004a30:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004a32:	6979      	ldr	r1, [r7, #20]
 8004a34:	3348      	adds	r3, #72	; 0x48
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	440b      	add	r3, r1
 8004a3a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d122      	bne.n	8004a8a <HAL_CAN_ConfigFilter+0x1fa>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004a64:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	3248      	adds	r2, #72	; 0x48
 8004a6a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004a7e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004a80:	6979      	ldr	r1, [r7, #20]
 8004a82:	3348      	adds	r3, #72	; 0x48
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	440b      	add	r3, r1
 8004a88:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d109      	bne.n	8004aa6 <HAL_CAN_ConfigFilter+0x216>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	401a      	ands	r2, r3
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004aa4:	e007      	b.n	8004ab6 <HAL_CAN_ConfigFilter+0x226>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d109      	bne.n	8004ad2 <HAL_CAN_ConfigFilter+0x242>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	43db      	mvns	r3, r3
 8004ac8:	401a      	ands	r2, r3
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004ad0:	e007      	b.n	8004ae2 <HAL_CAN_ConfigFilter+0x252>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	431a      	orrs	r2, r3
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d107      	bne.n	8004afa <HAL_CAN_ConfigFilter+0x26a>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004b00:	f023 0201 	bic.w	r2, r3, #1
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e006      	b.n	8004b1c <HAL_CAN_ConfigFilter+0x28c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
  }
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	0800e090 	.word	0x0800e090
 8004b28:	40006400 	.word	0x40006400

08004b2c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d12e      	bne.n	8004b9e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0201 	bic.w	r2, r2, #1
 8004b56:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b58:	f7ff fc4e 	bl	80043f8 <HAL_GetTick>
 8004b5c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004b5e:	e012      	b.n	8004b86 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b60:	f7ff fc4a 	bl	80043f8 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b0a      	cmp	r3, #10
 8004b6c:	d90b      	bls.n	8004b86 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2205      	movs	r2, #5
 8004b7e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e012      	b.n	8004bac <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1e5      	bne.n	8004b60 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e006      	b.n	8004bac <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
  }
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
 8004bc0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bc8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d008      	beq.n	8004bec <HAL_CAN_AddTxMessage+0x38>
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	d004      	beq.n	8004bec <HAL_CAN_AddTxMessage+0x38>
 8004be2:	f240 41e9 	movw	r1, #1257	; 0x4e9
 8004be6:	4884      	ldr	r0, [pc, #528]	; (8004df8 <HAL_CAN_AddTxMessage+0x244>)
 8004be8:	f7fe faad 	bl	8003146 <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d008      	beq.n	8004c06 <HAL_CAN_AddTxMessage+0x52>
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d004      	beq.n	8004c06 <HAL_CAN_AddTxMessage+0x52>
 8004bfc:	f240 41ea 	movw	r1, #1258	; 0x4ea
 8004c00:	487d      	ldr	r0, [pc, #500]	; (8004df8 <HAL_CAN_AddTxMessage+0x244>)
 8004c02:	f7fe faa0 	bl	8003146 <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b08      	cmp	r3, #8
 8004c0c:	d904      	bls.n	8004c18 <HAL_CAN_AddTxMessage+0x64>
 8004c0e:	f240 41eb 	movw	r1, #1259	; 0x4eb
 8004c12:	4879      	ldr	r0, [pc, #484]	; (8004df8 <HAL_CAN_AddTxMessage+0x244>)
 8004c14:	f7fe fa97 	bl	8003146 <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10a      	bne.n	8004c36 <HAL_CAN_AddTxMessage+0x82>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c28:	d30f      	bcc.n	8004c4a <HAL_CAN_AddTxMessage+0x96>
 8004c2a:	f240 41ee 	movw	r1, #1262	; 0x4ee
 8004c2e:	4872      	ldr	r0, [pc, #456]	; (8004df8 <HAL_CAN_AddTxMessage+0x244>)
 8004c30:	f7fe fa89 	bl	8003146 <assert_failed>
 8004c34:	e009      	b.n	8004c4a <HAL_CAN_AddTxMessage+0x96>
  }
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c3e:	d304      	bcc.n	8004c4a <HAL_CAN_AddTxMessage+0x96>
 8004c40:	f240 41f2 	movw	r1, #1266	; 0x4f2
 8004c44:	486c      	ldr	r0, [pc, #432]	; (8004df8 <HAL_CAN_AddTxMessage+0x244>)
 8004c46:	f7fe fa7e 	bl	8003146 <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	7d1b      	ldrb	r3, [r3, #20]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d008      	beq.n	8004c64 <HAL_CAN_AddTxMessage+0xb0>
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	7d1b      	ldrb	r3, [r3, #20]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d004      	beq.n	8004c64 <HAL_CAN_AddTxMessage+0xb0>
 8004c5a:	f240 41f4 	movw	r1, #1268	; 0x4f4
 8004c5e:	4866      	ldr	r0, [pc, #408]	; (8004df8 <HAL_CAN_AddTxMessage+0x244>)
 8004c60:	f7fe fa71 	bl	8003146 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8004c64:	7ffb      	ldrb	r3, [r7, #31]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d003      	beq.n	8004c72 <HAL_CAN_AddTxMessage+0xbe>
 8004c6a:	7ffb      	ldrb	r3, [r7, #31]
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	f040 80b8 	bne.w	8004de2 <HAL_CAN_AddTxMessage+0x22e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10a      	bne.n	8004c92 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d105      	bne.n	8004c92 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 80a0 	beq.w	8004dd2 <HAL_CAN_AddTxMessage+0x21e>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	0e1b      	lsrs	r3, r3, #24
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d907      	bls.n	8004cb2 <HAL_CAN_AddTxMessage+0xfe>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e09e      	b.n	8004df0 <HAL_CAN_AddTxMessage+0x23c>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	409a      	lsls	r2, r3
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10d      	bne.n	8004ce0 <HAL_CAN_AddTxMessage+0x12c>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004cce:	68f9      	ldr	r1, [r7, #12]
 8004cd0:	6809      	ldr	r1, [r1, #0]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	3318      	adds	r3, #24
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	440b      	add	r3, r1
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	e00f      	b.n	8004d00 <HAL_CAN_AddTxMessage+0x14c>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004cea:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004cf0:	68f9      	ldr	r1, [r7, #12]
 8004cf2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004cf4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	3318      	adds	r3, #24
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	440b      	add	r3, r1
 8004cfe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6819      	ldr	r1, [r3, #0]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	691a      	ldr	r2, [r3, #16]
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	3318      	adds	r3, #24
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	440b      	add	r3, r1
 8004d10:	3304      	adds	r3, #4
 8004d12:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	7d1b      	ldrb	r3, [r3, #20]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d111      	bne.n	8004d40 <HAL_CAN_AddTxMessage+0x18c>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	3318      	adds	r3, #24
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	4413      	add	r3, r2
 8004d28:	3304      	adds	r3, #4
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	6811      	ldr	r1, [r2, #0]
 8004d30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	3318      	adds	r3, #24
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	440b      	add	r3, r1
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3307      	adds	r3, #7
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	061a      	lsls	r2, r3, #24
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3306      	adds	r3, #6
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	041b      	lsls	r3, r3, #16
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3305      	adds	r3, #5
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	021b      	lsls	r3, r3, #8
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	3204      	adds	r2, #4
 8004d60:	7812      	ldrb	r2, [r2, #0]
 8004d62:	4610      	mov	r0, r2
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	6811      	ldr	r1, [r2, #0]
 8004d68:	ea43 0200 	orr.w	r2, r3, r0
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	011b      	lsls	r3, r3, #4
 8004d70:	440b      	add	r3, r1
 8004d72:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004d76:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3303      	adds	r3, #3
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	061a      	lsls	r2, r3, #24
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3302      	adds	r3, #2
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	041b      	lsls	r3, r3, #16
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	021b      	lsls	r3, r3, #8
 8004d92:	4313      	orrs	r3, r2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	7812      	ldrb	r2, [r2, #0]
 8004d98:	4610      	mov	r0, r2
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	6811      	ldr	r1, [r2, #0]
 8004d9e:	ea43 0200 	orr.w	r2, r3, r0
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	440b      	add	r3, r1
 8004da8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004dac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	3318      	adds	r3, #24
 8004db6:	011b      	lsls	r3, r3, #4
 8004db8:	4413      	add	r3, r2
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	6811      	ldr	r1, [r2, #0]
 8004dc0:	f043 0201 	orr.w	r2, r3, #1
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	3318      	adds	r3, #24
 8004dc8:	011b      	lsls	r3, r3, #4
 8004dca:	440b      	add	r3, r1
 8004dcc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e00e      	b.n	8004df0 <HAL_CAN_AddTxMessage+0x23c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e006      	b.n	8004df0 <HAL_CAN_AddTxMessage+0x23c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
  }
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3720      	adds	r7, #32
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	0800e090 	.word	0x0800e090

08004dfc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
 8004e08:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e10:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d007      	beq.n	8004e28 <HAL_CAN_GetRxMessage+0x2c>
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d004      	beq.n	8004e28 <HAL_CAN_GetRxMessage+0x2c>
 8004e1e:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 8004e22:	4884      	ldr	r0, [pc, #528]	; (8005034 <HAL_CAN_GetRxMessage+0x238>)
 8004e24:	f7fe f98f 	bl	8003146 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8004e28:	7dfb      	ldrb	r3, [r7, #23]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d003      	beq.n	8004e36 <HAL_CAN_GetRxMessage+0x3a>
 8004e2e:	7dfb      	ldrb	r3, [r7, #23]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	f040 80f3 	bne.w	800501c <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10e      	bne.n	8004e5a <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d116      	bne.n	8004e78 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e0e7      	b.n	800502a <HAL_CAN_GetRxMessage+0x22e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	f003 0303 	and.w	r3, r3, #3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d107      	bne.n	8004e78 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e0d8      	b.n	800502a <HAL_CAN_GetRxMessage+0x22e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	331b      	adds	r3, #27
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	4413      	add	r3, r2
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0204 	and.w	r2, r3, #4
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10c      	bne.n	8004eb0 <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	331b      	adds	r3, #27
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	4413      	add	r3, r2
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	0d5b      	lsrs	r3, r3, #21
 8004ea6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	e00b      	b.n	8004ec8 <HAL_CAN_GetRxMessage+0xcc>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	331b      	adds	r3, #27
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	4413      	add	r3, r2
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	08db      	lsrs	r3, r3, #3
 8004ec0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	331b      	adds	r3, #27
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	4413      	add	r3, r2
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0202 	and.w	r2, r3, #2
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	331b      	adds	r3, #27
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	4413      	add	r3, r2
 8004eea:	3304      	adds	r3, #4
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 020f 	and.w	r2, r3, #15
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	331b      	adds	r3, #27
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	4413      	add	r3, r2
 8004f02:	3304      	adds	r3, #4
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	0a1b      	lsrs	r3, r3, #8
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	331b      	adds	r3, #27
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	4413      	add	r3, r2
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	0c1b      	lsrs	r3, r3, #16
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	0a1a      	lsrs	r2, r3, #8
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	3301      	adds	r3, #1
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	0c1a      	lsrs	r2, r3, #16
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	3302      	adds	r3, #2
 8004f6c:	b2d2      	uxtb	r2, r2
 8004f6e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	011b      	lsls	r3, r3, #4
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	0e1a      	lsrs	r2, r3, #24
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	3303      	adds	r3, #3
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	b2d2      	uxtb	r2, r2
 8004fa0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	0a1a      	lsrs	r2, r3, #8
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	3305      	adds	r3, #5
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	0c1a      	lsrs	r2, r3, #16
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	3306      	adds	r3, #6
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	0e1a      	lsrs	r2, r3, #24
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	3307      	adds	r3, #7
 8004fec:	b2d2      	uxtb	r2, r2
 8004fee:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d108      	bne.n	8005008 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f042 0220 	orr.w	r2, r2, #32
 8005004:	60da      	str	r2, [r3, #12]
 8005006:	e007      	b.n	8005018 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	691a      	ldr	r2, [r3, #16]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0220 	orr.w	r2, r2, #32
 8005016:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005018:	2300      	movs	r3, #0
 800501a:	e006      	b.n	800502a <HAL_CAN_GetRxMessage+0x22e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
  }
}
 800502a:	4618      	mov	r0, r3
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	0800e090 	.word	0x0800e090

08005038 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005048:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	4a11      	ldr	r2, [pc, #68]	; (8005094 <HAL_CAN_ActivateNotification+0x5c>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d904      	bls.n	800505c <HAL_CAN_ActivateNotification+0x24>
 8005052:	f44f 61d0 	mov.w	r1, #1664	; 0x680
 8005056:	4810      	ldr	r0, [pc, #64]	; (8005098 <HAL_CAN_ActivateNotification+0x60>)
 8005058:	f7fe f875 	bl	8003146 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 800505c:	7bfb      	ldrb	r3, [r7, #15]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d002      	beq.n	8005068 <HAL_CAN_ActivateNotification+0x30>
 8005062:	7bfb      	ldrb	r3, [r7, #15]
 8005064:	2b02      	cmp	r3, #2
 8005066:	d109      	bne.n	800507c <HAL_CAN_ActivateNotification+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6959      	ldr	r1, [r3, #20]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	e006      	b.n	800508a <HAL_CAN_ActivateNotification+0x52>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
  }
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	00038f7f 	.word	0x00038f7f
 8005098:	0800e090 	.word	0x0800e090

0800509c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08a      	sub	sp, #40	; 0x28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80050a4:	2300      	movs	r3, #0
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d07c      	beq.n	80051dc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d023      	beq.n	8005134 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2201      	movs	r2, #1
 80050f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f983 	bl	800540a <HAL_CAN_TxMailbox0CompleteCallback>
 8005104:	e016      	b.n	8005134 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	d004      	beq.n	800511a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005116:	627b      	str	r3, [r7, #36]	; 0x24
 8005118:	e00c      	b.n	8005134 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	f003 0308 	and.w	r3, r3, #8
 8005120:	2b00      	cmp	r3, #0
 8005122:	d004      	beq.n	800512e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800512a:	627b      	str	r3, [r7, #36]	; 0x24
 800512c:	e002      	b.n	8005134 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f989 	bl	8005446 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513a:	2b00      	cmp	r3, #0
 800513c:	d024      	beq.n	8005188 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005146:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f963 	bl	800541e <HAL_CAN_TxMailbox1CompleteCallback>
 8005158:	e016      	b.n	8005188 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005160:	2b00      	cmp	r3, #0
 8005162:	d004      	beq.n	800516e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800516a:	627b      	str	r3, [r7, #36]	; 0x24
 800516c:	e00c      	b.n	8005188 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005174:	2b00      	cmp	r3, #0
 8005176:	d004      	beq.n	8005182 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
 8005180:	e002      	b.n	8005188 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f969 	bl	800545a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d024      	beq.n	80051dc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800519a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f943 	bl	8005432 <HAL_CAN_TxMailbox2CompleteCallback>
 80051ac:	e016      	b.n	80051dc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d004      	beq.n	80051c2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
 80051c0:	e00c      	b.n	80051dc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d004      	beq.n	80051d6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d2:	627b      	str	r3, [r7, #36]	; 0x24
 80051d4:	e002      	b.n	80051dc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f949 	bl	800546e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	f003 0308 	and.w	r3, r3, #8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00c      	beq.n	8005200 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f003 0310 	and.w	r3, r3, #16
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d007      	beq.n	8005200 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2210      	movs	r2, #16
 80051fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00b      	beq.n	8005222 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	f003 0308 	and.w	r3, r3, #8
 8005210:	2b00      	cmp	r3, #0
 8005212:	d006      	beq.n	8005222 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2208      	movs	r2, #8
 800521a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f930 	bl	8005482 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d009      	beq.n	8005240 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fd fd7c 	bl	8002d38 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00c      	beq.n	8005264 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f003 0310 	and.w	r3, r3, #16
 8005250:	2b00      	cmp	r3, #0
 8005252:	d007      	beq.n	8005264 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800525a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2210      	movs	r2, #16
 8005262:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	f003 0320 	and.w	r3, r3, #32
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00b      	beq.n	8005286 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f003 0308 	and.w	r3, r3, #8
 8005274:	2b00      	cmp	r3, #0
 8005276:	d006      	beq.n	8005286 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2208      	movs	r2, #8
 800527e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f912 	bl	80054aa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b00      	cmp	r3, #0
 800528e:	d009      	beq.n	80052a4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f8f9 	bl	8005496 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00b      	beq.n	80052c6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	f003 0310 	and.w	r3, r3, #16
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d006      	beq.n	80052c6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2210      	movs	r2, #16
 80052be:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f8fc 	bl	80054be <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00b      	beq.n	80052e8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	f003 0308 	and.w	r3, r3, #8
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d006      	beq.n	80052e8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2208      	movs	r2, #8
 80052e0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f8f5 	bl	80054d2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d07b      	beq.n	80053ea <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	f003 0304 	and.w	r3, r3, #4
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d072      	beq.n	80053e2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005302:	2b00      	cmp	r3, #0
 8005304:	d008      	beq.n	8005318 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	f043 0301 	orr.w	r3, r3, #1
 8005316:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800531e:	2b00      	cmp	r3, #0
 8005320:	d008      	beq.n	8005334 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	f043 0302 	orr.w	r3, r3, #2
 8005332:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800533a:	2b00      	cmp	r3, #0
 800533c:	d008      	beq.n	8005350 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005344:	2b00      	cmp	r3, #0
 8005346:	d003      	beq.n	8005350 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	f043 0304 	orr.w	r3, r3, #4
 800534e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005356:	2b00      	cmp	r3, #0
 8005358:	d043      	beq.n	80053e2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005360:	2b00      	cmp	r3, #0
 8005362:	d03e      	beq.n	80053e2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800536a:	2b60      	cmp	r3, #96	; 0x60
 800536c:	d02b      	beq.n	80053c6 <HAL_CAN_IRQHandler+0x32a>
 800536e:	2b60      	cmp	r3, #96	; 0x60
 8005370:	d82e      	bhi.n	80053d0 <HAL_CAN_IRQHandler+0x334>
 8005372:	2b50      	cmp	r3, #80	; 0x50
 8005374:	d022      	beq.n	80053bc <HAL_CAN_IRQHandler+0x320>
 8005376:	2b50      	cmp	r3, #80	; 0x50
 8005378:	d82a      	bhi.n	80053d0 <HAL_CAN_IRQHandler+0x334>
 800537a:	2b40      	cmp	r3, #64	; 0x40
 800537c:	d019      	beq.n	80053b2 <HAL_CAN_IRQHandler+0x316>
 800537e:	2b40      	cmp	r3, #64	; 0x40
 8005380:	d826      	bhi.n	80053d0 <HAL_CAN_IRQHandler+0x334>
 8005382:	2b30      	cmp	r3, #48	; 0x30
 8005384:	d010      	beq.n	80053a8 <HAL_CAN_IRQHandler+0x30c>
 8005386:	2b30      	cmp	r3, #48	; 0x30
 8005388:	d822      	bhi.n	80053d0 <HAL_CAN_IRQHandler+0x334>
 800538a:	2b10      	cmp	r3, #16
 800538c:	d002      	beq.n	8005394 <HAL_CAN_IRQHandler+0x2f8>
 800538e:	2b20      	cmp	r3, #32
 8005390:	d005      	beq.n	800539e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005392:	e01d      	b.n	80053d0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	f043 0308 	orr.w	r3, r3, #8
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800539c:	e019      	b.n	80053d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	f043 0310 	orr.w	r3, r3, #16
 80053a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80053a6:	e014      	b.n	80053d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	f043 0320 	orr.w	r3, r3, #32
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80053b0:	e00f      	b.n	80053d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80053ba:	e00a      	b.n	80053d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80053bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80053c4:	e005      	b.n	80053d2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80053ce:	e000      	b.n	80053d2 <HAL_CAN_IRQHandler+0x336>
            break;
 80053d0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	699a      	ldr	r2, [r3, #24]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80053e0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2204      	movs	r2, #4
 80053e8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d008      	beq.n	8005402 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	431a      	orrs	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f872 	bl	80054e6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005402:	bf00      	nop
 8005404:	3728      	adds	r7, #40	; 0x28
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005412:	bf00      	nop
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800549e:	bf00      	nop
 80054a0:	370c      	adds	r7, #12
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
	...

080054fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800550c:	4b0c      	ldr	r3, [pc, #48]	; (8005540 <__NVIC_SetPriorityGrouping+0x44>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005518:	4013      	ands	r3, r2
 800551a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800552c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800552e:	4a04      	ldr	r2, [pc, #16]	; (8005540 <__NVIC_SetPriorityGrouping+0x44>)
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	60d3      	str	r3, [r2, #12]
}
 8005534:	bf00      	nop
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	e000ed00 	.word	0xe000ed00

08005544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005548:	4b04      	ldr	r3, [pc, #16]	; (800555c <__NVIC_GetPriorityGrouping+0x18>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	0a1b      	lsrs	r3, r3, #8
 800554e:	f003 0307 	and.w	r3, r3, #7
}
 8005552:	4618      	mov	r0, r3
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	e000ed00 	.word	0xe000ed00

08005560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	4603      	mov	r3, r0
 8005568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800556a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800556e:	2b00      	cmp	r3, #0
 8005570:	db0b      	blt.n	800558a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005572:	79fb      	ldrb	r3, [r7, #7]
 8005574:	f003 021f 	and.w	r2, r3, #31
 8005578:	4907      	ldr	r1, [pc, #28]	; (8005598 <__NVIC_EnableIRQ+0x38>)
 800557a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800557e:	095b      	lsrs	r3, r3, #5
 8005580:	2001      	movs	r0, #1
 8005582:	fa00 f202 	lsl.w	r2, r0, r2
 8005586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	e000e100 	.word	0xe000e100

0800559c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	4603      	mov	r3, r0
 80055a4:	6039      	str	r1, [r7, #0]
 80055a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	db0a      	blt.n	80055c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	490c      	ldr	r1, [pc, #48]	; (80055e8 <__NVIC_SetPriority+0x4c>)
 80055b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ba:	0112      	lsls	r2, r2, #4
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	440b      	add	r3, r1
 80055c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055c4:	e00a      	b.n	80055dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	4908      	ldr	r1, [pc, #32]	; (80055ec <__NVIC_SetPriority+0x50>)
 80055cc:	79fb      	ldrb	r3, [r7, #7]
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	3b04      	subs	r3, #4
 80055d4:	0112      	lsls	r2, r2, #4
 80055d6:	b2d2      	uxtb	r2, r2
 80055d8:	440b      	add	r3, r1
 80055da:	761a      	strb	r2, [r3, #24]
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	e000e100 	.word	0xe000e100
 80055ec:	e000ed00 	.word	0xe000ed00

080055f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b089      	sub	sp, #36	; 0x24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	f1c3 0307 	rsb	r3, r3, #7
 800560a:	2b04      	cmp	r3, #4
 800560c:	bf28      	it	cs
 800560e:	2304      	movcs	r3, #4
 8005610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	3304      	adds	r3, #4
 8005616:	2b06      	cmp	r3, #6
 8005618:	d902      	bls.n	8005620 <NVIC_EncodePriority+0x30>
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	3b03      	subs	r3, #3
 800561e:	e000      	b.n	8005622 <NVIC_EncodePriority+0x32>
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	fa02 f303 	lsl.w	r3, r2, r3
 800562e:	43da      	mvns	r2, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	401a      	ands	r2, r3
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005638:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	fa01 f303 	lsl.w	r3, r1, r3
 8005642:	43d9      	mvns	r1, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005648:	4313      	orrs	r3, r2
         );
}
 800564a:	4618      	mov	r0, r3
 800564c:	3724      	adds	r7, #36	; 0x24
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
	...

08005658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3b01      	subs	r3, #1
 8005664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005668:	d301      	bcc.n	800566e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800566a:	2301      	movs	r3, #1
 800566c:	e00f      	b.n	800568e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800566e:	4a0a      	ldr	r2, [pc, #40]	; (8005698 <SysTick_Config+0x40>)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	3b01      	subs	r3, #1
 8005674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005676:	210f      	movs	r1, #15
 8005678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800567c:	f7ff ff8e 	bl	800559c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005680:	4b05      	ldr	r3, [pc, #20]	; (8005698 <SysTick_Config+0x40>)
 8005682:	2200      	movs	r2, #0
 8005684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005686:	4b04      	ldr	r3, [pc, #16]	; (8005698 <SysTick_Config+0x40>)
 8005688:	2207      	movs	r2, #7
 800568a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	e000e010 	.word	0xe000e010

0800569c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b07      	cmp	r3, #7
 80056a8:	d00f      	beq.n	80056ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b06      	cmp	r3, #6
 80056ae:	d00c      	beq.n	80056ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b05      	cmp	r3, #5
 80056b4:	d009      	beq.n	80056ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b04      	cmp	r3, #4
 80056ba:	d006      	beq.n	80056ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d003      	beq.n	80056ca <HAL_NVIC_SetPriorityGrouping+0x2e>
 80056c2:	2192      	movs	r1, #146	; 0x92
 80056c4:	4804      	ldr	r0, [pc, #16]	; (80056d8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80056c6:	f7fd fd3e 	bl	8003146 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7ff ff16 	bl	80054fc <__NVIC_SetPriorityGrouping>
}
 80056d0:	bf00      	nop
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	0800e0c8 	.word	0x0800e0c8

080056dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	4603      	mov	r3, r0
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b0f      	cmp	r3, #15
 80056f2:	d903      	bls.n	80056fc <HAL_NVIC_SetPriority+0x20>
 80056f4:	21aa      	movs	r1, #170	; 0xaa
 80056f6:	480e      	ldr	r0, [pc, #56]	; (8005730 <HAL_NVIC_SetPriority+0x54>)
 80056f8:	f7fd fd25 	bl	8003146 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b0f      	cmp	r3, #15
 8005700:	d903      	bls.n	800570a <HAL_NVIC_SetPriority+0x2e>
 8005702:	21ab      	movs	r1, #171	; 0xab
 8005704:	480a      	ldr	r0, [pc, #40]	; (8005730 <HAL_NVIC_SetPriority+0x54>)
 8005706:	f7fd fd1e 	bl	8003146 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800570a:	f7ff ff1b 	bl	8005544 <__NVIC_GetPriorityGrouping>
 800570e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	6978      	ldr	r0, [r7, #20]
 8005716:	f7ff ff6b 	bl	80055f0 <NVIC_EncodePriority>
 800571a:	4602      	mov	r2, r0
 800571c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005720:	4611      	mov	r1, r2
 8005722:	4618      	mov	r0, r3
 8005724:	f7ff ff3a 	bl	800559c <__NVIC_SetPriority>
}
 8005728:	bf00      	nop
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	0800e0c8 	.word	0x0800e0c8

08005734 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	4603      	mov	r3, r0
 800573c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800573e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005742:	2b00      	cmp	r3, #0
 8005744:	da03      	bge.n	800574e <HAL_NVIC_EnableIRQ+0x1a>
 8005746:	21be      	movs	r1, #190	; 0xbe
 8005748:	4805      	ldr	r0, [pc, #20]	; (8005760 <HAL_NVIC_EnableIRQ+0x2c>)
 800574a:	f7fd fcfc 	bl	8003146 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800574e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005752:	4618      	mov	r0, r3
 8005754:	f7ff ff04 	bl	8005560 <__NVIC_EnableIRQ>
}
 8005758:	bf00      	nop
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	0800e0c8 	.word	0x0800e0c8

08005764 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7ff ff73 	bl	8005658 <SysTick_Config>
 8005772:	4603      	mov	r3, r0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b04      	cmp	r3, #4
 8005788:	d007      	beq.n	800579a <HAL_SYSTICK_CLKSourceConfig+0x1e>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d004      	beq.n	800579a <HAL_SYSTICK_CLKSourceConfig+0x1e>
 8005790:	f240 11c9 	movw	r1, #457	; 0x1c9
 8005794:	480b      	ldr	r0, [pc, #44]	; (80057c4 <HAL_SYSTICK_CLKSourceConfig+0x48>)
 8005796:	f7fd fcd6 	bl	8003146 <assert_failed>
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b04      	cmp	r3, #4
 800579e:	d106      	bne.n	80057ae <HAL_SYSTICK_CLKSourceConfig+0x32>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80057a0:	4b09      	ldr	r3, [pc, #36]	; (80057c8 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a08      	ldr	r2, [pc, #32]	; (80057c8 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 80057a6:	f043 0304 	orr.w	r3, r3, #4
 80057aa:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80057ac:	e005      	b.n	80057ba <HAL_SYSTICK_CLKSourceConfig+0x3e>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80057ae:	4b06      	ldr	r3, [pc, #24]	; (80057c8 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a05      	ldr	r2, [pc, #20]	; (80057c8 <HAL_SYSTICK_CLKSourceConfig+0x4c>)
 80057b4:	f023 0304 	bic.w	r3, r3, #4
 80057b8:	6013      	str	r3, [r2, #0]
}
 80057ba:	bf00      	nop
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	0800e0c8 	.word	0x0800e0c8
 80057c8:	e000e010 	.word	0xe000e010

080057cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80057d8:	f7fe fe0e 	bl	80043f8 <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e204      	b.n	8005bf2 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a97      	ldr	r2, [pc, #604]	; (8005a4c <HAL_DMA_Init+0x280>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d04e      	beq.n	8005890 <HAL_DMA_Init+0xc4>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a96      	ldr	r2, [pc, #600]	; (8005a50 <HAL_DMA_Init+0x284>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d049      	beq.n	8005890 <HAL_DMA_Init+0xc4>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a94      	ldr	r2, [pc, #592]	; (8005a54 <HAL_DMA_Init+0x288>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d044      	beq.n	8005890 <HAL_DMA_Init+0xc4>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a93      	ldr	r2, [pc, #588]	; (8005a58 <HAL_DMA_Init+0x28c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d03f      	beq.n	8005890 <HAL_DMA_Init+0xc4>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a91      	ldr	r2, [pc, #580]	; (8005a5c <HAL_DMA_Init+0x290>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d03a      	beq.n	8005890 <HAL_DMA_Init+0xc4>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a90      	ldr	r2, [pc, #576]	; (8005a60 <HAL_DMA_Init+0x294>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d035      	beq.n	8005890 <HAL_DMA_Init+0xc4>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a8e      	ldr	r2, [pc, #568]	; (8005a64 <HAL_DMA_Init+0x298>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d030      	beq.n	8005890 <HAL_DMA_Init+0xc4>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a8d      	ldr	r2, [pc, #564]	; (8005a68 <HAL_DMA_Init+0x29c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d02b      	beq.n	8005890 <HAL_DMA_Init+0xc4>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a8b      	ldr	r2, [pc, #556]	; (8005a6c <HAL_DMA_Init+0x2a0>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d026      	beq.n	8005890 <HAL_DMA_Init+0xc4>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a8a      	ldr	r2, [pc, #552]	; (8005a70 <HAL_DMA_Init+0x2a4>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d021      	beq.n	8005890 <HAL_DMA_Init+0xc4>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a88      	ldr	r2, [pc, #544]	; (8005a74 <HAL_DMA_Init+0x2a8>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d01c      	beq.n	8005890 <HAL_DMA_Init+0xc4>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a87      	ldr	r2, [pc, #540]	; (8005a78 <HAL_DMA_Init+0x2ac>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d017      	beq.n	8005890 <HAL_DMA_Init+0xc4>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a85      	ldr	r2, [pc, #532]	; (8005a7c <HAL_DMA_Init+0x2b0>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d012      	beq.n	8005890 <HAL_DMA_Init+0xc4>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a84      	ldr	r2, [pc, #528]	; (8005a80 <HAL_DMA_Init+0x2b4>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d00d      	beq.n	8005890 <HAL_DMA_Init+0xc4>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a82      	ldr	r2, [pc, #520]	; (8005a84 <HAL_DMA_Init+0x2b8>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d008      	beq.n	8005890 <HAL_DMA_Init+0xc4>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a81      	ldr	r2, [pc, #516]	; (8005a88 <HAL_DMA_Init+0x2bc>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d003      	beq.n	8005890 <HAL_DMA_Init+0xc4>
 8005888:	21b8      	movs	r1, #184	; 0xb8
 800588a:	4880      	ldr	r0, [pc, #512]	; (8005a8c <HAL_DMA_Init+0x2c0>)
 800588c:	f7fd fc5b 	bl	8003146 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d026      	beq.n	80058e6 <HAL_DMA_Init+0x11a>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058a0:	d021      	beq.n	80058e6 <HAL_DMA_Init+0x11a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058aa:	d01c      	beq.n	80058e6 <HAL_DMA_Init+0x11a>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80058b4:	d017      	beq.n	80058e6 <HAL_DMA_Init+0x11a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058be:	d012      	beq.n	80058e6 <HAL_DMA_Init+0x11a>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 80058c8:	d00d      	beq.n	80058e6 <HAL_DMA_Init+0x11a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80058d2:	d008      	beq.n	80058e6 <HAL_DMA_Init+0x11a>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80058dc:	d003      	beq.n	80058e6 <HAL_DMA_Init+0x11a>
 80058de:	21b9      	movs	r1, #185	; 0xb9
 80058e0:	486a      	ldr	r0, [pc, #424]	; (8005a8c <HAL_DMA_Init+0x2c0>)
 80058e2:	f7fd fc30 	bl	8003146 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00b      	beq.n	8005906 <HAL_DMA_Init+0x13a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	2b40      	cmp	r3, #64	; 0x40
 80058f4:	d007      	beq.n	8005906 <HAL_DMA_Init+0x13a>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	2b80      	cmp	r3, #128	; 0x80
 80058fc:	d003      	beq.n	8005906 <HAL_DMA_Init+0x13a>
 80058fe:	21ba      	movs	r1, #186	; 0xba
 8005900:	4862      	ldr	r0, [pc, #392]	; (8005a8c <HAL_DMA_Init+0x2c0>)
 8005902:	f7fd fc20 	bl	8003146 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800590e:	d007      	beq.n	8005920 <HAL_DMA_Init+0x154>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <HAL_DMA_Init+0x154>
 8005918:	21bb      	movs	r1, #187	; 0xbb
 800591a:	485c      	ldr	r0, [pc, #368]	; (8005a8c <HAL_DMA_Init+0x2c0>)
 800591c:	f7fd fc13 	bl	8003146 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005928:	d007      	beq.n	800593a <HAL_DMA_Init+0x16e>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_DMA_Init+0x16e>
 8005932:	21bc      	movs	r1, #188	; 0xbc
 8005934:	4855      	ldr	r0, [pc, #340]	; (8005a8c <HAL_DMA_Init+0x2c0>)
 8005936:	f7fd fc06 	bl	8003146 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00d      	beq.n	800595e <HAL_DMA_Init+0x192>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800594a:	d008      	beq.n	800595e <HAL_DMA_Init+0x192>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005954:	d003      	beq.n	800595e <HAL_DMA_Init+0x192>
 8005956:	21bd      	movs	r1, #189	; 0xbd
 8005958:	484c      	ldr	r0, [pc, #304]	; (8005a8c <HAL_DMA_Init+0x2c0>)
 800595a:	f7fd fbf4 	bl	8003146 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00d      	beq.n	8005982 <HAL_DMA_Init+0x1b6>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800596e:	d008      	beq.n	8005982 <HAL_DMA_Init+0x1b6>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005978:	d003      	beq.n	8005982 <HAL_DMA_Init+0x1b6>
 800597a:	21be      	movs	r1, #190	; 0xbe
 800597c:	4843      	ldr	r0, [pc, #268]	; (8005a8c <HAL_DMA_Init+0x2c0>)
 800597e:	f7fd fbe2 	bl	8003146 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00c      	beq.n	80059a4 <HAL_DMA_Init+0x1d8>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005992:	d007      	beq.n	80059a4 <HAL_DMA_Init+0x1d8>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	2b20      	cmp	r3, #32
 800599a:	d003      	beq.n	80059a4 <HAL_DMA_Init+0x1d8>
 800599c:	21bf      	movs	r1, #191	; 0xbf
 800599e:	483b      	ldr	r0, [pc, #236]	; (8005a8c <HAL_DMA_Init+0x2c0>)
 80059a0:	f7fd fbd1 	bl	8003146 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d012      	beq.n	80059d2 <HAL_DMA_Init+0x206>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b4:	d00d      	beq.n	80059d2 <HAL_DMA_Init+0x206>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059be:	d008      	beq.n	80059d2 <HAL_DMA_Init+0x206>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80059c8:	d003      	beq.n	80059d2 <HAL_DMA_Init+0x206>
 80059ca:	21c0      	movs	r1, #192	; 0xc0
 80059cc:	482f      	ldr	r0, [pc, #188]	; (8005a8c <HAL_DMA_Init+0x2c0>)
 80059ce:	f7fd fbba 	bl	8003146 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d007      	beq.n	80059ea <HAL_DMA_Init+0x21e>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	2b04      	cmp	r3, #4
 80059e0:	d003      	beq.n	80059ea <HAL_DMA_Init+0x21e>
 80059e2:	21c1      	movs	r1, #193	; 0xc1
 80059e4:	4829      	ldr	r0, [pc, #164]	; (8005a8c <HAL_DMA_Init+0x2c0>)
 80059e6:	f7fd fbae 	bl	8003146 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d065      	beq.n	8005abe <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00f      	beq.n	8005a1a <HAL_DMA_Init+0x24e>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d00b      	beq.n	8005a1a <HAL_DMA_Init+0x24e>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d007      	beq.n	8005a1a <HAL_DMA_Init+0x24e>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d003      	beq.n	8005a1a <HAL_DMA_Init+0x24e>
 8005a12:	21c6      	movs	r1, #198	; 0xc6
 8005a14:	481d      	ldr	r0, [pc, #116]	; (8005a8c <HAL_DMA_Init+0x2c0>)
 8005a16:	f7fd fb96 	bl	8003146 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d036      	beq.n	8005a90 <HAL_DMA_Init+0x2c4>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a2a:	d031      	beq.n	8005a90 <HAL_DMA_Init+0x2c4>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a34:	d02c      	beq.n	8005a90 <HAL_DMA_Init+0x2c4>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a3e:	d027      	beq.n	8005a90 <HAL_DMA_Init+0x2c4>
 8005a40:	21c7      	movs	r1, #199	; 0xc7
 8005a42:	4812      	ldr	r0, [pc, #72]	; (8005a8c <HAL_DMA_Init+0x2c0>)
 8005a44:	f7fd fb7f 	bl	8003146 <assert_failed>
 8005a48:	e022      	b.n	8005a90 <HAL_DMA_Init+0x2c4>
 8005a4a:	bf00      	nop
 8005a4c:	40026010 	.word	0x40026010
 8005a50:	40026028 	.word	0x40026028
 8005a54:	40026040 	.word	0x40026040
 8005a58:	40026058 	.word	0x40026058
 8005a5c:	40026070 	.word	0x40026070
 8005a60:	40026088 	.word	0x40026088
 8005a64:	400260a0 	.word	0x400260a0
 8005a68:	400260b8 	.word	0x400260b8
 8005a6c:	40026410 	.word	0x40026410
 8005a70:	40026428 	.word	0x40026428
 8005a74:	40026440 	.word	0x40026440
 8005a78:	40026458 	.word	0x40026458
 8005a7c:	40026470 	.word	0x40026470
 8005a80:	40026488 	.word	0x40026488
 8005a84:	400264a0 	.word	0x400264a0
 8005a88:	400264b8 	.word	0x400264b8
 8005a8c:	0800e104 	.word	0x0800e104
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d012      	beq.n	8005abe <HAL_DMA_Init+0x2f2>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005aa0:	d00d      	beq.n	8005abe <HAL_DMA_Init+0x2f2>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aaa:	d008      	beq.n	8005abe <HAL_DMA_Init+0x2f2>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005ab4:	d003      	beq.n	8005abe <HAL_DMA_Init+0x2f2>
 8005ab6:	21c8      	movs	r1, #200	; 0xc8
 8005ab8:	4850      	ldr	r0, [pc, #320]	; (8005bfc <HAL_DMA_Init+0x430>)
 8005aba:	f7fd fb44 	bl	8003146 <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2202      	movs	r2, #2
 8005aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0201 	bic.w	r2, r2, #1
 8005adc:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ade:	e00f      	b.n	8005b00 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ae0:	f7fe fc8a 	bl	80043f8 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b05      	cmp	r3, #5
 8005aec:	d908      	bls.n	8005b00 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2220      	movs	r2, #32
 8005af2:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2203      	movs	r2, #3
 8005af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e078      	b.n	8005bf2 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1e8      	bne.n	8005ae0 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	4b39      	ldr	r3, [pc, #228]	; (8005c00 <HAL_DMA_Init+0x434>)
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	d107      	bne.n	8005b6a <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b62:	4313      	orrs	r3, r2
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f023 0307 	bic.w	r3, r3, #7
 8005b80:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b90:	2b04      	cmp	r3, #4
 8005b92:	d117      	bne.n	8005bc4 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00e      	beq.n	8005bc4 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fa80 	bl	80060ac <DMA_CheckFifoParam>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d008      	beq.n	8005bc4 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2240      	movs	r2, #64	; 0x40
 8005bb6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e016      	b.n	8005bf2 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fa37 	bl	8006040 <DMA_CalcBaseAndBitshift>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bda:	223f      	movs	r2, #63	; 0x3f
 8005bdc:	409a      	lsls	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3718      	adds	r7, #24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	0800e104 	.word	0x0800e104
 8005c00:	f010803f 	.word	0xf010803f

08005c04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
 8005c10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <HAL_DMA_Start_IT+0x26>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c28:	d304      	bcc.n	8005c34 <HAL_DMA_Start_IT+0x30>
 8005c2a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8005c2e:	4827      	ldr	r0, [pc, #156]	; (8005ccc <HAL_DMA_Start_IT+0xc8>)
 8005c30:	f7fd fa89 	bl	8003146 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d101      	bne.n	8005c42 <HAL_DMA_Start_IT+0x3e>
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e040      	b.n	8005cc4 <HAL_DMA_Start_IT+0xc0>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d12f      	bne.n	8005cb6 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2202      	movs	r2, #2
 8005c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	68b9      	ldr	r1, [r7, #8]
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 f9ba 	bl	8005fe4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c74:	223f      	movs	r2, #63	; 0x3f
 8005c76:	409a      	lsls	r2, r3
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0216 	orr.w	r2, r2, #22
 8005c8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d007      	beq.n	8005ca4 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f042 0208 	orr.w	r2, r2, #8
 8005ca2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f042 0201 	orr.w	r2, r2, #1
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	e005      	b.n	8005cc2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3718      	adds	r7, #24
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	0800e104 	.word	0x0800e104

08005cd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005cdc:	4b92      	ldr	r3, [pc, #584]	; (8005f28 <HAL_DMA_IRQHandler+0x258>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a92      	ldr	r2, [pc, #584]	; (8005f2c <HAL_DMA_IRQHandler+0x25c>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	0a9b      	lsrs	r3, r3, #10
 8005ce8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfa:	2208      	movs	r2, #8
 8005cfc:	409a      	lsls	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4013      	ands	r3, r2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d01a      	beq.n	8005d3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d013      	beq.n	8005d3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0204 	bic.w	r2, r2, #4
 8005d22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d28:	2208      	movs	r2, #8
 8005d2a:	409a      	lsls	r2, r3
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d34:	f043 0201 	orr.w	r2, r3, #1
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d40:	2201      	movs	r2, #1
 8005d42:	409a      	lsls	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4013      	ands	r3, r2
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d012      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00b      	beq.n	8005d72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d5e:	2201      	movs	r2, #1
 8005d60:	409a      	lsls	r2, r3
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6a:	f043 0202 	orr.w	r2, r3, #2
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d76:	2204      	movs	r2, #4
 8005d78:	409a      	lsls	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d012      	beq.n	8005da8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00b      	beq.n	8005da8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d94:	2204      	movs	r2, #4
 8005d96:	409a      	lsls	r2, r3
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da0:	f043 0204 	orr.w	r2, r3, #4
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dac:	2210      	movs	r2, #16
 8005dae:	409a      	lsls	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4013      	ands	r3, r2
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d043      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0308 	and.w	r3, r3, #8
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d03c      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dca:	2210      	movs	r2, #16
 8005dcc:	409a      	lsls	r2, r3
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d018      	beq.n	8005e12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d108      	bne.n	8005e00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d024      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	4798      	blx	r3
 8005dfe:	e01f      	b.n	8005e40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d01b      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	4798      	blx	r3
 8005e10:	e016      	b.n	8005e40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d107      	bne.n	8005e30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 0208 	bic.w	r2, r2, #8
 8005e2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e44:	2220      	movs	r2, #32
 8005e46:	409a      	lsls	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 808e 	beq.w	8005f6e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0310 	and.w	r3, r3, #16
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 8086 	beq.w	8005f6e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e66:	2220      	movs	r2, #32
 8005e68:	409a      	lsls	r2, r3
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b05      	cmp	r3, #5
 8005e78:	d136      	bne.n	8005ee8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 0216 	bic.w	r2, r2, #22
 8005e88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	695a      	ldr	r2, [r3, #20]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d103      	bne.n	8005eaa <HAL_DMA_IRQHandler+0x1da>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d007      	beq.n	8005eba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0208 	bic.w	r2, r2, #8
 8005eb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ebe:	223f      	movs	r2, #63	; 0x3f
 8005ec0:	409a      	lsls	r2, r3
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d07d      	beq.n	8005fda <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	4798      	blx	r3
        }
        return;
 8005ee6:	e078      	b.n	8005fda <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d01c      	beq.n	8005f30 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d108      	bne.n	8005f16 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d030      	beq.n	8005f6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	4798      	blx	r3
 8005f14:	e02b      	b.n	8005f6e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d027      	beq.n	8005f6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	4798      	blx	r3
 8005f26:	e022      	b.n	8005f6e <HAL_DMA_IRQHandler+0x29e>
 8005f28:	200001f8 	.word	0x200001f8
 8005f2c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10f      	bne.n	8005f5e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 0210 	bic.w	r2, r2, #16
 8005f4c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d032      	beq.n	8005fdc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d022      	beq.n	8005fc8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2205      	movs	r2, #5
 8005f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 0201 	bic.w	r2, r2, #1
 8005f98:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	60bb      	str	r3, [r7, #8]
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d307      	bcc.n	8005fb6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1f2      	bne.n	8005f9a <HAL_DMA_IRQHandler+0x2ca>
 8005fb4:	e000      	b.n	8005fb8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005fb6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d005      	beq.n	8005fdc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	4798      	blx	r3
 8005fd8:	e000      	b.n	8005fdc <HAL_DMA_IRQHandler+0x30c>
        return;
 8005fda:	bf00      	nop
    }
  }
}
 8005fdc:	3718      	adds	r7, #24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop

08005fe4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
 8005ff0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006000:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	2b40      	cmp	r3, #64	; 0x40
 8006010:	d108      	bne.n	8006024 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006022:	e007      	b.n	8006034 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	60da      	str	r2, [r3, #12]
}
 8006034:	bf00      	nop
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	b2db      	uxtb	r3, r3
 800604e:	3b10      	subs	r3, #16
 8006050:	4a14      	ldr	r2, [pc, #80]	; (80060a4 <DMA_CalcBaseAndBitshift+0x64>)
 8006052:	fba2 2303 	umull	r2, r3, r2, r3
 8006056:	091b      	lsrs	r3, r3, #4
 8006058:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800605a:	4a13      	ldr	r2, [pc, #76]	; (80060a8 <DMA_CalcBaseAndBitshift+0x68>)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	461a      	mov	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2b03      	cmp	r3, #3
 800606c:	d909      	bls.n	8006082 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006076:	f023 0303 	bic.w	r3, r3, #3
 800607a:	1d1a      	adds	r2, r3, #4
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	659a      	str	r2, [r3, #88]	; 0x58
 8006080:	e007      	b.n	8006092 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800608a:	f023 0303 	bic.w	r3, r3, #3
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006096:	4618      	mov	r0, r3
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	aaaaaaab 	.word	0xaaaaaaab
 80060a8:	0800e354 	.word	0x0800e354

080060ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d11f      	bne.n	8006106 <DMA_CheckFifoParam+0x5a>
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d856      	bhi.n	800617a <DMA_CheckFifoParam+0xce>
 80060cc:	a201      	add	r2, pc, #4	; (adr r2, 80060d4 <DMA_CheckFifoParam+0x28>)
 80060ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d2:	bf00      	nop
 80060d4:	080060e5 	.word	0x080060e5
 80060d8:	080060f7 	.word	0x080060f7
 80060dc:	080060e5 	.word	0x080060e5
 80060e0:	0800617b 	.word	0x0800617b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d046      	beq.n	800617e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060f4:	e043      	b.n	800617e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80060fe:	d140      	bne.n	8006182 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006104:	e03d      	b.n	8006182 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800610e:	d121      	bne.n	8006154 <DMA_CheckFifoParam+0xa8>
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2b03      	cmp	r3, #3
 8006114:	d837      	bhi.n	8006186 <DMA_CheckFifoParam+0xda>
 8006116:	a201      	add	r2, pc, #4	; (adr r2, 800611c <DMA_CheckFifoParam+0x70>)
 8006118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611c:	0800612d 	.word	0x0800612d
 8006120:	08006133 	.word	0x08006133
 8006124:	0800612d 	.word	0x0800612d
 8006128:	08006145 	.word	0x08006145
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	73fb      	strb	r3, [r7, #15]
      break;
 8006130:	e030      	b.n	8006194 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006136:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d025      	beq.n	800618a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006142:	e022      	b.n	800618a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006148:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800614c:	d11f      	bne.n	800618e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006152:	e01c      	b.n	800618e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b02      	cmp	r3, #2
 8006158:	d903      	bls.n	8006162 <DMA_CheckFifoParam+0xb6>
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	2b03      	cmp	r3, #3
 800615e:	d003      	beq.n	8006168 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006160:	e018      	b.n	8006194 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	73fb      	strb	r3, [r7, #15]
      break;
 8006166:	e015      	b.n	8006194 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00e      	beq.n	8006192 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	73fb      	strb	r3, [r7, #15]
      break;
 8006178:	e00b      	b.n	8006192 <DMA_CheckFifoParam+0xe6>
      break;
 800617a:	bf00      	nop
 800617c:	e00a      	b.n	8006194 <DMA_CheckFifoParam+0xe8>
      break;
 800617e:	bf00      	nop
 8006180:	e008      	b.n	8006194 <DMA_CheckFifoParam+0xe8>
      break;
 8006182:	bf00      	nop
 8006184:	e006      	b.n	8006194 <DMA_CheckFifoParam+0xe8>
      break;
 8006186:	bf00      	nop
 8006188:	e004      	b.n	8006194 <DMA_CheckFifoParam+0xe8>
      break;
 800618a:	bf00      	nop
 800618c:	e002      	b.n	8006194 <DMA_CheckFifoParam+0xe8>
      break;   
 800618e:	bf00      	nop
 8006190:	e000      	b.n	8006194 <DMA_CheckFifoParam+0xe8>
      break;
 8006192:	bf00      	nop
    }
  } 
  
  return status; 
 8006194:	7bfb      	ldrb	r3, [r7, #15]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3714      	adds	r7, #20
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop

080061a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b088      	sub	sp, #32
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80061b2:	2300      	movs	r3, #0
 80061b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a45      	ldr	r2, [pc, #276]	; (80062d4 <HAL_GPIO_Init+0x130>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d02b      	beq.n	800621a <HAL_GPIO_Init+0x76>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a44      	ldr	r2, [pc, #272]	; (80062d8 <HAL_GPIO_Init+0x134>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d027      	beq.n	800621a <HAL_GPIO_Init+0x76>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a43      	ldr	r2, [pc, #268]	; (80062dc <HAL_GPIO_Init+0x138>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d023      	beq.n	800621a <HAL_GPIO_Init+0x76>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a42      	ldr	r2, [pc, #264]	; (80062e0 <HAL_GPIO_Init+0x13c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d01f      	beq.n	800621a <HAL_GPIO_Init+0x76>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a41      	ldr	r2, [pc, #260]	; (80062e4 <HAL_GPIO_Init+0x140>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d01b      	beq.n	800621a <HAL_GPIO_Init+0x76>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a40      	ldr	r2, [pc, #256]	; (80062e8 <HAL_GPIO_Init+0x144>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d017      	beq.n	800621a <HAL_GPIO_Init+0x76>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a3f      	ldr	r2, [pc, #252]	; (80062ec <HAL_GPIO_Init+0x148>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d013      	beq.n	800621a <HAL_GPIO_Init+0x76>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a3e      	ldr	r2, [pc, #248]	; (80062f0 <HAL_GPIO_Init+0x14c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d00f      	beq.n	800621a <HAL_GPIO_Init+0x76>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a3d      	ldr	r2, [pc, #244]	; (80062f4 <HAL_GPIO_Init+0x150>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d00b      	beq.n	800621a <HAL_GPIO_Init+0x76>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a3c      	ldr	r2, [pc, #240]	; (80062f8 <HAL_GPIO_Init+0x154>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d007      	beq.n	800621a <HAL_GPIO_Init+0x76>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a3b      	ldr	r2, [pc, #236]	; (80062fc <HAL_GPIO_Init+0x158>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d003      	beq.n	800621a <HAL_GPIO_Init+0x76>
 8006212:	21b3      	movs	r1, #179	; 0xb3
 8006214:	483a      	ldr	r0, [pc, #232]	; (8006300 <HAL_GPIO_Init+0x15c>)
 8006216:	f7fc ff96 	bl	8003146 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	b29b      	uxth	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	d005      	beq.n	8006230 <HAL_GPIO_Init+0x8c>
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	0c1b      	lsrs	r3, r3, #16
 800622a:	041b      	lsls	r3, r3, #16
 800622c:	2b00      	cmp	r3, #0
 800622e:	d003      	beq.n	8006238 <HAL_GPIO_Init+0x94>
 8006230:	21b4      	movs	r1, #180	; 0xb4
 8006232:	4833      	ldr	r0, [pc, #204]	; (8006300 <HAL_GPIO_Init+0x15c>)
 8006234:	f7fc ff87 	bl	8003146 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d035      	beq.n	80062ac <HAL_GPIO_Init+0x108>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d031      	beq.n	80062ac <HAL_GPIO_Init+0x108>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	2b11      	cmp	r3, #17
 800624e:	d02d      	beq.n	80062ac <HAL_GPIO_Init+0x108>
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2b02      	cmp	r3, #2
 8006256:	d029      	beq.n	80062ac <HAL_GPIO_Init+0x108>
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2b12      	cmp	r3, #18
 800625e:	d025      	beq.n	80062ac <HAL_GPIO_Init+0x108>
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	4a27      	ldr	r2, [pc, #156]	; (8006304 <HAL_GPIO_Init+0x160>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d020      	beq.n	80062ac <HAL_GPIO_Init+0x108>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	4a26      	ldr	r2, [pc, #152]	; (8006308 <HAL_GPIO_Init+0x164>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d01b      	beq.n	80062ac <HAL_GPIO_Init+0x108>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	4a24      	ldr	r2, [pc, #144]	; (800630c <HAL_GPIO_Init+0x168>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d016      	beq.n	80062ac <HAL_GPIO_Init+0x108>
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	4a23      	ldr	r2, [pc, #140]	; (8006310 <HAL_GPIO_Init+0x16c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d011      	beq.n	80062ac <HAL_GPIO_Init+0x108>
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	4a21      	ldr	r2, [pc, #132]	; (8006314 <HAL_GPIO_Init+0x170>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d00c      	beq.n	80062ac <HAL_GPIO_Init+0x108>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	4a20      	ldr	r2, [pc, #128]	; (8006318 <HAL_GPIO_Init+0x174>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d007      	beq.n	80062ac <HAL_GPIO_Init+0x108>
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	2b03      	cmp	r3, #3
 80062a2:	d003      	beq.n	80062ac <HAL_GPIO_Init+0x108>
 80062a4:	21b5      	movs	r1, #181	; 0xb5
 80062a6:	4816      	ldr	r0, [pc, #88]	; (8006300 <HAL_GPIO_Init+0x15c>)
 80062a8:	f7fc ff4d 	bl	8003146 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00b      	beq.n	80062cc <HAL_GPIO_Init+0x128>
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d007      	beq.n	80062cc <HAL_GPIO_Init+0x128>
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d003      	beq.n	80062cc <HAL_GPIO_Init+0x128>
 80062c4:	21b6      	movs	r1, #182	; 0xb6
 80062c6:	480e      	ldr	r0, [pc, #56]	; (8006300 <HAL_GPIO_Init+0x15c>)
 80062c8:	f7fc ff3d 	bl	8003146 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062cc:	2300      	movs	r3, #0
 80062ce:	61fb      	str	r3, [r7, #28]
 80062d0:	e270      	b.n	80067b4 <HAL_GPIO_Init+0x610>
 80062d2:	bf00      	nop
 80062d4:	40020000 	.word	0x40020000
 80062d8:	40020400 	.word	0x40020400
 80062dc:	40020800 	.word	0x40020800
 80062e0:	40020c00 	.word	0x40020c00
 80062e4:	40021000 	.word	0x40021000
 80062e8:	40021400 	.word	0x40021400
 80062ec:	40021800 	.word	0x40021800
 80062f0:	40021c00 	.word	0x40021c00
 80062f4:	40022000 	.word	0x40022000
 80062f8:	40022400 	.word	0x40022400
 80062fc:	40022800 	.word	0x40022800
 8006300:	0800e13c 	.word	0x0800e13c
 8006304:	10110000 	.word	0x10110000
 8006308:	10210000 	.word	0x10210000
 800630c:	10310000 	.word	0x10310000
 8006310:	10120000 	.word	0x10120000
 8006314:	10220000 	.word	0x10220000
 8006318:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800631c:	2201      	movs	r2, #1
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	fa02 f303 	lsl.w	r3, r2, r3
 8006324:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	4013      	ands	r3, r2
 800632e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	429a      	cmp	r2, r3
 8006336:	f040 823a 	bne.w	80067ae <HAL_GPIO_Init+0x60a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d00b      	beq.n	800635a <HAL_GPIO_Init+0x1b6>
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	2b02      	cmp	r3, #2
 8006348:	d007      	beq.n	800635a <HAL_GPIO_Init+0x1b6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800634e:	2b11      	cmp	r3, #17
 8006350:	d003      	beq.n	800635a <HAL_GPIO_Init+0x1b6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	2b12      	cmp	r3, #18
 8006358:	d144      	bne.n	80063e4 <HAL_GPIO_Init+0x240>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00f      	beq.n	8006382 <HAL_GPIO_Init+0x1de>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d00b      	beq.n	8006382 <HAL_GPIO_Init+0x1de>
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	2b02      	cmp	r3, #2
 8006370:	d007      	beq.n	8006382 <HAL_GPIO_Init+0x1de>
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	2b03      	cmp	r3, #3
 8006378:	d003      	beq.n	8006382 <HAL_GPIO_Init+0x1de>
 800637a:	21c8      	movs	r1, #200	; 0xc8
 800637c:	489a      	ldr	r0, [pc, #616]	; (80065e8 <HAL_GPIO_Init+0x444>)
 800637e:	f7fc fee2 	bl	8003146 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	2203      	movs	r2, #3
 800638e:	fa02 f303 	lsl.w	r3, r2, r3
 8006392:	43db      	mvns	r3, r3
 8006394:	69ba      	ldr	r2, [r7, #24]
 8006396:	4013      	ands	r3, r2
 8006398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68da      	ldr	r2, [r3, #12]
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	005b      	lsls	r3, r3, #1
 80063a2:	fa02 f303 	lsl.w	r3, r2, r3
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80063b8:	2201      	movs	r2, #1
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	fa02 f303 	lsl.w	r3, r2, r3
 80063c0:	43db      	mvns	r3, r3
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	4013      	ands	r3, r2
 80063c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	091b      	lsrs	r3, r3, #4
 80063ce:	f003 0201 	and.w	r2, r3, #1
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	fa02 f303 	lsl.w	r3, r2, r3
 80063d8:	69ba      	ldr	r2, [r7, #24]
 80063da:	4313      	orrs	r3, r2
 80063dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	69ba      	ldr	r2, [r7, #24]
 80063e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	2203      	movs	r2, #3
 80063f0:	fa02 f303 	lsl.w	r3, r2, r3
 80063f4:	43db      	mvns	r3, r3
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	4013      	ands	r3, r2
 80063fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	689a      	ldr	r2, [r3, #8]
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	fa02 f303 	lsl.w	r3, r2, r3
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	4313      	orrs	r3, r2
 800640c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	2b02      	cmp	r3, #2
 800641a:	d004      	beq.n	8006426 <HAL_GPIO_Init+0x282>
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	2b12      	cmp	r3, #18
 8006422:	f040 80e3 	bne.w	80065ec <HAL_GPIO_Init+0x448>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 80b6 	beq.w	800659c <HAL_GPIO_Init+0x3f8>
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	2b09      	cmp	r3, #9
 8006436:	f000 80b1 	beq.w	800659c <HAL_GPIO_Init+0x3f8>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 80ac 	beq.w	800659c <HAL_GPIO_Init+0x3f8>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	f000 80a7 	beq.w	800659c <HAL_GPIO_Init+0x3f8>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 80a2 	beq.w	800659c <HAL_GPIO_Init+0x3f8>
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 809d 	beq.w	800659c <HAL_GPIO_Init+0x3f8>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	2b01      	cmp	r3, #1
 8006468:	f000 8098 	beq.w	800659c <HAL_GPIO_Init+0x3f8>
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	2b01      	cmp	r3, #1
 8006472:	f000 8093 	beq.w	800659c <HAL_GPIO_Init+0x3f8>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	2b02      	cmp	r3, #2
 800647c:	f000 808e 	beq.w	800659c <HAL_GPIO_Init+0x3f8>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	2b02      	cmp	r3, #2
 8006486:	f000 8089 	beq.w	800659c <HAL_GPIO_Init+0x3f8>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	2b02      	cmp	r3, #2
 8006490:	f000 8084 	beq.w	800659c <HAL_GPIO_Init+0x3f8>
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	2b03      	cmp	r3, #3
 800649a:	d07f      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	2b04      	cmp	r3, #4
 80064a2:	d07b      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	2b04      	cmp	r3, #4
 80064aa:	d077      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	2b04      	cmp	r3, #4
 80064b2:	d073      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	2b05      	cmp	r3, #5
 80064ba:	d06f      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	2b05      	cmp	r3, #5
 80064c2:	d06b      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	2b09      	cmp	r3, #9
 80064ca:	d067      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	2b06      	cmp	r3, #6
 80064d2:	d063      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	2b09      	cmp	r3, #9
 80064da:	d05f      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	2b07      	cmp	r3, #7
 80064e2:	d05b      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	2b07      	cmp	r3, #7
 80064ea:	d057      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	2b07      	cmp	r3, #7
 80064f2:	d053      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	2b08      	cmp	r3, #8
 80064fa:	d04f      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	2b08      	cmp	r3, #8
 8006502:	d04b      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	2b08      	cmp	r3, #8
 800650a:	d047      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	2b09      	cmp	r3, #9
 8006512:	d043      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	2b09      	cmp	r3, #9
 800651a:	d03f      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	2b0a      	cmp	r3, #10
 8006522:	d03b      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	2b0a      	cmp	r3, #10
 800652a:	d037      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	2b0b      	cmp	r3, #11
 8006532:	d033      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	2b0c      	cmp	r3, #12
 800653a:	d02f      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	2b0c      	cmp	r3, #12
 8006542:	d02b      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	2b0d      	cmp	r3, #13
 800654a:	d027      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	2b0f      	cmp	r3, #15
 8006552:	d023      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	2b05      	cmp	r3, #5
 800655a:	d01f      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	2b05      	cmp	r3, #5
 8006562:	d01b      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	2b05      	cmp	r3, #5
 800656a:	d017      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	2b08      	cmp	r3, #8
 8006572:	d013      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	2b08      	cmp	r3, #8
 800657a:	d00f      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	2b0c      	cmp	r3, #12
 8006582:	d00b      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	2b06      	cmp	r3, #6
 800658a:	d007      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	2b0e      	cmp	r3, #14
 8006592:	d003      	beq.n	800659c <HAL_GPIO_Init+0x3f8>
 8006594:	21e0      	movs	r1, #224	; 0xe0
 8006596:	4814      	ldr	r0, [pc, #80]	; (80065e8 <HAL_GPIO_Init+0x444>)
 8006598:	f7fc fdd5 	bl	8003146 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	08da      	lsrs	r2, r3, #3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	3208      	adds	r2, #8
 80065a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	f003 0307 	and.w	r3, r3, #7
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	220f      	movs	r2, #15
 80065b4:	fa02 f303 	lsl.w	r3, r2, r3
 80065b8:	43db      	mvns	r3, r3
 80065ba:	69ba      	ldr	r2, [r7, #24]
 80065bc:	4013      	ands	r3, r2
 80065be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	691a      	ldr	r2, [r3, #16]
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	fa02 f303 	lsl.w	r3, r2, r3
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	08da      	lsrs	r2, r3, #3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	3208      	adds	r2, #8
 80065de:	69b9      	ldr	r1, [r7, #24]
 80065e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80065e4:	e002      	b.n	80065ec <HAL_GPIO_Init+0x448>
 80065e6:	bf00      	nop
 80065e8:	0800e13c 	.word	0x0800e13c
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	2203      	movs	r2, #3
 80065f8:	fa02 f303 	lsl.w	r3, r2, r3
 80065fc:	43db      	mvns	r3, r3
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	4013      	ands	r3, r2
 8006602:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f003 0203 	and.w	r2, r3, #3
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	fa02 f303 	lsl.w	r3, r2, r3
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	4313      	orrs	r3, r2
 8006618:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 80c0 	beq.w	80067ae <HAL_GPIO_Init+0x60a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800662e:	2300      	movs	r3, #0
 8006630:	60fb      	str	r3, [r7, #12]
 8006632:	4b65      	ldr	r3, [pc, #404]	; (80067c8 <HAL_GPIO_Init+0x624>)
 8006634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006636:	4a64      	ldr	r2, [pc, #400]	; (80067c8 <HAL_GPIO_Init+0x624>)
 8006638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800663c:	6453      	str	r3, [r2, #68]	; 0x44
 800663e:	4b62      	ldr	r3, [pc, #392]	; (80067c8 <HAL_GPIO_Init+0x624>)
 8006640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800664a:	4a60      	ldr	r2, [pc, #384]	; (80067cc <HAL_GPIO_Init+0x628>)
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	089b      	lsrs	r3, r3, #2
 8006650:	3302      	adds	r3, #2
 8006652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	f003 0303 	and.w	r3, r3, #3
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	220f      	movs	r2, #15
 8006662:	fa02 f303 	lsl.w	r3, r2, r3
 8006666:	43db      	mvns	r3, r3
 8006668:	69ba      	ldr	r2, [r7, #24]
 800666a:	4013      	ands	r3, r2
 800666c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a57      	ldr	r2, [pc, #348]	; (80067d0 <HAL_GPIO_Init+0x62c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d037      	beq.n	80066e6 <HAL_GPIO_Init+0x542>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a56      	ldr	r2, [pc, #344]	; (80067d4 <HAL_GPIO_Init+0x630>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d031      	beq.n	80066e2 <HAL_GPIO_Init+0x53e>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a55      	ldr	r2, [pc, #340]	; (80067d8 <HAL_GPIO_Init+0x634>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d02b      	beq.n	80066de <HAL_GPIO_Init+0x53a>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a54      	ldr	r2, [pc, #336]	; (80067dc <HAL_GPIO_Init+0x638>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d025      	beq.n	80066da <HAL_GPIO_Init+0x536>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a53      	ldr	r2, [pc, #332]	; (80067e0 <HAL_GPIO_Init+0x63c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d01f      	beq.n	80066d6 <HAL_GPIO_Init+0x532>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a52      	ldr	r2, [pc, #328]	; (80067e4 <HAL_GPIO_Init+0x640>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d019      	beq.n	80066d2 <HAL_GPIO_Init+0x52e>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a51      	ldr	r2, [pc, #324]	; (80067e8 <HAL_GPIO_Init+0x644>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d013      	beq.n	80066ce <HAL_GPIO_Init+0x52a>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a50      	ldr	r2, [pc, #320]	; (80067ec <HAL_GPIO_Init+0x648>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d00d      	beq.n	80066ca <HAL_GPIO_Init+0x526>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a4f      	ldr	r2, [pc, #316]	; (80067f0 <HAL_GPIO_Init+0x64c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d007      	beq.n	80066c6 <HAL_GPIO_Init+0x522>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a4e      	ldr	r2, [pc, #312]	; (80067f4 <HAL_GPIO_Init+0x650>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d101      	bne.n	80066c2 <HAL_GPIO_Init+0x51e>
 80066be:	2309      	movs	r3, #9
 80066c0:	e012      	b.n	80066e8 <HAL_GPIO_Init+0x544>
 80066c2:	230a      	movs	r3, #10
 80066c4:	e010      	b.n	80066e8 <HAL_GPIO_Init+0x544>
 80066c6:	2308      	movs	r3, #8
 80066c8:	e00e      	b.n	80066e8 <HAL_GPIO_Init+0x544>
 80066ca:	2307      	movs	r3, #7
 80066cc:	e00c      	b.n	80066e8 <HAL_GPIO_Init+0x544>
 80066ce:	2306      	movs	r3, #6
 80066d0:	e00a      	b.n	80066e8 <HAL_GPIO_Init+0x544>
 80066d2:	2305      	movs	r3, #5
 80066d4:	e008      	b.n	80066e8 <HAL_GPIO_Init+0x544>
 80066d6:	2304      	movs	r3, #4
 80066d8:	e006      	b.n	80066e8 <HAL_GPIO_Init+0x544>
 80066da:	2303      	movs	r3, #3
 80066dc:	e004      	b.n	80066e8 <HAL_GPIO_Init+0x544>
 80066de:	2302      	movs	r3, #2
 80066e0:	e002      	b.n	80066e8 <HAL_GPIO_Init+0x544>
 80066e2:	2301      	movs	r3, #1
 80066e4:	e000      	b.n	80066e8 <HAL_GPIO_Init+0x544>
 80066e6:	2300      	movs	r3, #0
 80066e8:	69fa      	ldr	r2, [r7, #28]
 80066ea:	f002 0203 	and.w	r2, r2, #3
 80066ee:	0092      	lsls	r2, r2, #2
 80066f0:	4093      	lsls	r3, r2
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066f8:	4934      	ldr	r1, [pc, #208]	; (80067cc <HAL_GPIO_Init+0x628>)
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	089b      	lsrs	r3, r3, #2
 80066fe:	3302      	adds	r3, #2
 8006700:	69ba      	ldr	r2, [r7, #24]
 8006702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006706:	4b3c      	ldr	r3, [pc, #240]	; (80067f8 <HAL_GPIO_Init+0x654>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	43db      	mvns	r3, r3
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	4013      	ands	r3, r2
 8006714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <HAL_GPIO_Init+0x586>
        {
          temp |= iocurrent;
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800672a:	4a33      	ldr	r2, [pc, #204]	; (80067f8 <HAL_GPIO_Init+0x654>)
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006730:	4b31      	ldr	r3, [pc, #196]	; (80067f8 <HAL_GPIO_Init+0x654>)
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	43db      	mvns	r3, r3
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	4013      	ands	r3, r2
 800673e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d003      	beq.n	8006754 <HAL_GPIO_Init+0x5b0>
        {
          temp |= iocurrent;
 800674c:	69ba      	ldr	r2, [r7, #24]
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	4313      	orrs	r3, r2
 8006752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006754:	4a28      	ldr	r2, [pc, #160]	; (80067f8 <HAL_GPIO_Init+0x654>)
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800675a:	4b27      	ldr	r3, [pc, #156]	; (80067f8 <HAL_GPIO_Init+0x654>)
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	43db      	mvns	r3, r3
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	4013      	ands	r3, r2
 8006768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <HAL_GPIO_Init+0x5da>
        {
          temp |= iocurrent;
 8006776:	69ba      	ldr	r2, [r7, #24]
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	4313      	orrs	r3, r2
 800677c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800677e:	4a1e      	ldr	r2, [pc, #120]	; (80067f8 <HAL_GPIO_Init+0x654>)
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006784:	4b1c      	ldr	r3, [pc, #112]	; (80067f8 <HAL_GPIO_Init+0x654>)
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	43db      	mvns	r3, r3
 800678e:	69ba      	ldr	r2, [r7, #24]
 8006790:	4013      	ands	r3, r2
 8006792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d003      	beq.n	80067a8 <HAL_GPIO_Init+0x604>
        {
          temp |= iocurrent;
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80067a8:	4a13      	ldr	r2, [pc, #76]	; (80067f8 <HAL_GPIO_Init+0x654>)
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	3301      	adds	r3, #1
 80067b2:	61fb      	str	r3, [r7, #28]
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	2b0f      	cmp	r3, #15
 80067b8:	f67f adb0 	bls.w	800631c <HAL_GPIO_Init+0x178>
      }
    }
  }
}
 80067bc:	bf00      	nop
 80067be:	bf00      	nop
 80067c0:	3720      	adds	r7, #32
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	40023800 	.word	0x40023800
 80067cc:	40013800 	.word	0x40013800
 80067d0:	40020000 	.word	0x40020000
 80067d4:	40020400 	.word	0x40020400
 80067d8:	40020800 	.word	0x40020800
 80067dc:	40020c00 	.word	0x40020c00
 80067e0:	40021000 	.word	0x40021000
 80067e4:	40021400 	.word	0x40021400
 80067e8:	40021800 	.word	0x40021800
 80067ec:	40021c00 	.word	0x40021c00
 80067f0:	40022000 	.word	0x40022000
 80067f4:	40022400 	.word	0x40022400
 80067f8:	40013c00 	.word	0x40013c00

080067fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006808:	887b      	ldrh	r3, [r7, #2]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d004      	beq.n	8006818 <HAL_GPIO_ReadPin+0x1c>
 800680e:	887b      	ldrh	r3, [r7, #2]
 8006810:	0c1b      	lsrs	r3, r3, #16
 8006812:	041b      	lsls	r3, r3, #16
 8006814:	2b00      	cmp	r3, #0
 8006816:	d004      	beq.n	8006822 <HAL_GPIO_ReadPin+0x26>
 8006818:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 800681c:	4809      	ldr	r0, [pc, #36]	; (8006844 <HAL_GPIO_ReadPin+0x48>)
 800681e:	f7fc fc92 	bl	8003146 <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691a      	ldr	r2, [r3, #16]
 8006826:	887b      	ldrh	r3, [r7, #2]
 8006828:	4013      	ands	r3, r2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d002      	beq.n	8006834 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800682e:	2301      	movs	r3, #1
 8006830:	73fb      	strb	r3, [r7, #15]
 8006832:	e001      	b.n	8006838 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006834:	2300      	movs	r3, #0
 8006836:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006838:	7bfb      	ldrb	r3, [r7, #15]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	0800e13c 	.word	0x0800e13c

08006848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	807b      	strh	r3, [r7, #2]
 8006854:	4613      	mov	r3, r2
 8006856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8006858:	887b      	ldrh	r3, [r7, #2]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d004      	beq.n	8006868 <HAL_GPIO_WritePin+0x20>
 800685e:	887b      	ldrh	r3, [r7, #2]
 8006860:	0c1b      	lsrs	r3, r3, #16
 8006862:	041b      	lsls	r3, r3, #16
 8006864:	2b00      	cmp	r3, #0
 8006866:	d004      	beq.n	8006872 <HAL_GPIO_WritePin+0x2a>
 8006868:	f240 119f 	movw	r1, #415	; 0x19f
 800686c:	480e      	ldr	r0, [pc, #56]	; (80068a8 <HAL_GPIO_WritePin+0x60>)
 800686e:	f7fc fc6a 	bl	8003146 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8006872:	787b      	ldrb	r3, [r7, #1]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d007      	beq.n	8006888 <HAL_GPIO_WritePin+0x40>
 8006878:	787b      	ldrb	r3, [r7, #1]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d004      	beq.n	8006888 <HAL_GPIO_WritePin+0x40>
 800687e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8006882:	4809      	ldr	r0, [pc, #36]	; (80068a8 <HAL_GPIO_WritePin+0x60>)
 8006884:	f7fc fc5f 	bl	8003146 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8006888:	787b      	ldrb	r3, [r7, #1]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800688e:	887a      	ldrh	r2, [r7, #2]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006894:	e003      	b.n	800689e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006896:	887b      	ldrh	r3, [r7, #2]
 8006898:	041a      	lsls	r2, r3, #16
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	619a      	str	r2, [r3, #24]
}
 800689e:	bf00      	nop
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	0800e13c 	.word	0x0800e13c

080068ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	4603      	mov	r3, r0
 80068b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80068b6:	4b08      	ldr	r3, [pc, #32]	; (80068d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068b8:	695a      	ldr	r2, [r3, #20]
 80068ba:	88fb      	ldrh	r3, [r7, #6]
 80068bc:	4013      	ands	r3, r2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d006      	beq.n	80068d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80068c2:	4a05      	ldr	r2, [pc, #20]	; (80068d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80068c4:	88fb      	ldrh	r3, [r7, #6]
 80068c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80068c8:	88fb      	ldrh	r3, [r7, #6]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fc f960 	bl	8002b90 <HAL_GPIO_EXTI_Callback>
  }
}
 80068d0:	bf00      	nop
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	40013c00 	.word	0x40013c00

080068dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e1be      	b.n	8006c6c <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a9f      	ldr	r2, [pc, #636]	; (8006b70 <HAL_I2C_Init+0x294>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d00e      	beq.n	8006916 <HAL_I2C_Init+0x3a>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a9d      	ldr	r2, [pc, #628]	; (8006b74 <HAL_I2C_Init+0x298>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d009      	beq.n	8006916 <HAL_I2C_Init+0x3a>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a9c      	ldr	r2, [pc, #624]	; (8006b78 <HAL_I2C_Init+0x29c>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d004      	beq.n	8006916 <HAL_I2C_Init+0x3a>
 800690c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8006910:	489a      	ldr	r0, [pc, #616]	; (8006b7c <HAL_I2C_Init+0x2a0>)
 8006912:	f7fc fc18 	bl	8003146 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d004      	beq.n	8006928 <HAL_I2C_Init+0x4c>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	4a97      	ldr	r2, [pc, #604]	; (8006b80 <HAL_I2C_Init+0x2a4>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d904      	bls.n	8006932 <HAL_I2C_Init+0x56>
 8006928:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800692c:	4893      	ldr	r0, [pc, #588]	; (8006b7c <HAL_I2C_Init+0x2a0>)
 800692e:	f7fc fc0a 	bl	8003146 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d009      	beq.n	800694e <HAL_I2C_Init+0x72>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006942:	d004      	beq.n	800694e <HAL_I2C_Init+0x72>
 8006944:	f240 11c1 	movw	r1, #449	; 0x1c1
 8006948:	488c      	ldr	r0, [pc, #560]	; (8006b7c <HAL_I2C_Init+0x2a0>)
 800694a:	f7fc fbfc 	bl	8003146 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006956:	f023 0303 	bic.w	r3, r3, #3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d004      	beq.n	8006968 <HAL_I2C_Init+0x8c>
 800695e:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8006962:	4886      	ldr	r0, [pc, #536]	; (8006b7c <HAL_I2C_Init+0x2a0>)
 8006964:	f7fc fbef 	bl	8003146 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006970:	d009      	beq.n	8006986 <HAL_I2C_Init+0xaa>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800697a:	d004      	beq.n	8006986 <HAL_I2C_Init+0xaa>
 800697c:	f240 11c3 	movw	r1, #451	; 0x1c3
 8006980:	487e      	ldr	r0, [pc, #504]	; (8006b7c <HAL_I2C_Init+0x2a0>)
 8006982:	f7fc fbe0 	bl	8003146 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d008      	beq.n	80069a0 <HAL_I2C_Init+0xc4>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d004      	beq.n	80069a0 <HAL_I2C_Init+0xc4>
 8006996:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800699a:	4878      	ldr	r0, [pc, #480]	; (8006b7c <HAL_I2C_Init+0x2a0>)
 800699c:	f7fc fbd3 	bl	8003146 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d004      	beq.n	80069b6 <HAL_I2C_Init+0xda>
 80069ac:	f240 11c5 	movw	r1, #453	; 0x1c5
 80069b0:	4872      	ldr	r0, [pc, #456]	; (8006b7c <HAL_I2C_Init+0x2a0>)
 80069b2:	f7fc fbc8 	bl	8003146 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d008      	beq.n	80069d0 <HAL_I2C_Init+0xf4>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	2b40      	cmp	r3, #64	; 0x40
 80069c4:	d004      	beq.n	80069d0 <HAL_I2C_Init+0xf4>
 80069c6:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80069ca:	486c      	ldr	r0, [pc, #432]	; (8006b7c <HAL_I2C_Init+0x2a0>)
 80069cc:	f7fc fbbb 	bl	8003146 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d008      	beq.n	80069ea <HAL_I2C_Init+0x10e>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	2b80      	cmp	r3, #128	; 0x80
 80069de:	d004      	beq.n	80069ea <HAL_I2C_Init+0x10e>
 80069e0:	f240 11c7 	movw	r1, #455	; 0x1c7
 80069e4:	4865      	ldr	r0, [pc, #404]	; (8006b7c <HAL_I2C_Init+0x2a0>)
 80069e6:	f7fc fbae 	bl	8003146 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d106      	bne.n	8006a04 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7fb fab0 	bl	8001f64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2224      	movs	r2, #36	; 0x24
 8006a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 0201 	bic.w	r2, r2, #1
 8006a1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006a3c:	f001 fe70 	bl	8008720 <HAL_RCC_GetPCLK1Freq>
 8006a40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	4a4f      	ldr	r2, [pc, #316]	; (8006b84 <HAL_I2C_Init+0x2a8>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d807      	bhi.n	8006a5c <HAL_I2C_Init+0x180>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4a4e      	ldr	r2, [pc, #312]	; (8006b88 <HAL_I2C_Init+0x2ac>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	bf94      	ite	ls
 8006a54:	2301      	movls	r3, #1
 8006a56:	2300      	movhi	r3, #0
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	e006      	b.n	8006a6a <HAL_I2C_Init+0x18e>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4a4b      	ldr	r2, [pc, #300]	; (8006b8c <HAL_I2C_Init+0x2b0>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	bf94      	ite	ls
 8006a64:	2301      	movls	r3, #1
 8006a66:	2300      	movhi	r3, #0
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d001      	beq.n	8006a72 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e0fc      	b.n	8006c6c <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	4a46      	ldr	r2, [pc, #280]	; (8006b90 <HAL_I2C_Init+0x2b4>)
 8006a76:	fba2 2303 	umull	r2, r3, r2, r3
 8006a7a:	0c9b      	lsrs	r3, r3, #18
 8006a7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	4a38      	ldr	r2, [pc, #224]	; (8006b84 <HAL_I2C_Init+0x2a8>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d802      	bhi.n	8006aac <HAL_I2C_Init+0x1d0>
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	e009      	b.n	8006ac0 <HAL_I2C_Init+0x1e4>
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006ab2:	fb02 f303 	mul.w	r3, r2, r3
 8006ab6:	4a37      	ldr	r2, [pc, #220]	; (8006b94 <HAL_I2C_Init+0x2b8>)
 8006ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8006abc:	099b      	lsrs	r3, r3, #6
 8006abe:	3301      	adds	r3, #1
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	6812      	ldr	r2, [r2, #0]
 8006ac4:	430b      	orrs	r3, r1
 8006ac6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	69db      	ldr	r3, [r3, #28]
 8006ace:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006ad2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	492a      	ldr	r1, [pc, #168]	; (8006b84 <HAL_I2C_Init+0x2a8>)
 8006adc:	428b      	cmp	r3, r1
 8006ade:	d819      	bhi.n	8006b14 <HAL_I2C_Init+0x238>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	1e59      	subs	r1, r3, #1
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	005b      	lsls	r3, r3, #1
 8006aea:	fbb1 f3f3 	udiv	r3, r1, r3
 8006aee:	1c59      	adds	r1, r3, #1
 8006af0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006af4:	400b      	ands	r3, r1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00a      	beq.n	8006b10 <HAL_I2C_Init+0x234>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	1e59      	subs	r1, r3, #1
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	005b      	lsls	r3, r3, #1
 8006b04:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b08:	3301      	adds	r3, #1
 8006b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b0e:	e066      	b.n	8006bde <HAL_I2C_Init+0x302>
 8006b10:	2304      	movs	r3, #4
 8006b12:	e064      	b.n	8006bde <HAL_I2C_Init+0x302>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d111      	bne.n	8006b40 <HAL_I2C_Init+0x264>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	1e58      	subs	r0, r3, #1
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6859      	ldr	r1, [r3, #4]
 8006b24:	460b      	mov	r3, r1
 8006b26:	005b      	lsls	r3, r3, #1
 8006b28:	440b      	add	r3, r1
 8006b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b2e:	3301      	adds	r3, #1
 8006b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	bf0c      	ite	eq
 8006b38:	2301      	moveq	r3, #1
 8006b3a:	2300      	movne	r3, #0
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	e012      	b.n	8006b66 <HAL_I2C_Init+0x28a>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	1e58      	subs	r0, r3, #1
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6859      	ldr	r1, [r3, #4]
 8006b48:	460b      	mov	r3, r1
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	440b      	add	r3, r1
 8006b4e:	0099      	lsls	r1, r3, #2
 8006b50:	440b      	add	r3, r1
 8006b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8006b56:	3301      	adds	r3, #1
 8006b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	bf0c      	ite	eq
 8006b60:	2301      	moveq	r3, #1
 8006b62:	2300      	movne	r3, #0
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d016      	beq.n	8006b98 <HAL_I2C_Init+0x2bc>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e037      	b.n	8006bde <HAL_I2C_Init+0x302>
 8006b6e:	bf00      	nop
 8006b70:	40005400 	.word	0x40005400
 8006b74:	40005800 	.word	0x40005800
 8006b78:	40005c00 	.word	0x40005c00
 8006b7c:	0800e178 	.word	0x0800e178
 8006b80:	00061a80 	.word	0x00061a80
 8006b84:	000186a0 	.word	0x000186a0
 8006b88:	001e847f 	.word	0x001e847f
 8006b8c:	003d08ff 	.word	0x003d08ff
 8006b90:	431bde83 	.word	0x431bde83
 8006b94:	10624dd3 	.word	0x10624dd3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10e      	bne.n	8006bbe <HAL_I2C_Init+0x2e2>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	1e58      	subs	r0, r3, #1
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6859      	ldr	r1, [r3, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	005b      	lsls	r3, r3, #1
 8006bac:	440b      	add	r3, r1
 8006bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bbc:	e00f      	b.n	8006bde <HAL_I2C_Init+0x302>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	1e58      	subs	r0, r3, #1
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6859      	ldr	r1, [r3, #4]
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	440b      	add	r3, r1
 8006bcc:	0099      	lsls	r1, r3, #2
 8006bce:	440b      	add	r3, r1
 8006bd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bde:	6879      	ldr	r1, [r7, #4]
 8006be0:	6809      	ldr	r1, [r1, #0]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	69da      	ldr	r2, [r3, #28]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006c0c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	6911      	ldr	r1, [r2, #16]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	68d2      	ldr	r2, [r2, #12]
 8006c18:	4311      	orrs	r1, r2
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	6812      	ldr	r2, [r2, #0]
 8006c1e:	430b      	orrs	r3, r1
 8006c20:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	695a      	ldr	r2, [r3, #20]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	431a      	orrs	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f042 0201 	orr.w	r2, r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2220      	movs	r2, #32
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b088      	sub	sp, #32
 8006c78:	af02      	add	r7, sp, #8
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	4608      	mov	r0, r1
 8006c7e:	4611      	mov	r1, r2
 8006c80:	461a      	mov	r2, r3
 8006c82:	4603      	mov	r3, r0
 8006c84:	817b      	strh	r3, [r7, #10]
 8006c86:	460b      	mov	r3, r1
 8006c88:	813b      	strh	r3, [r7, #8]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006c8e:	f7fd fbb3 	bl	80043f8 <HAL_GetTick>
 8006c92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8006c94:	88fb      	ldrh	r3, [r7, #6]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d007      	beq.n	8006caa <HAL_I2C_Mem_Write+0x36>
 8006c9a:	88fb      	ldrh	r3, [r7, #6]
 8006c9c:	2b10      	cmp	r3, #16
 8006c9e:	d004      	beq.n	8006caa <HAL_I2C_Mem_Write+0x36>
 8006ca0:	f640 1175 	movw	r1, #2421	; 0x975
 8006ca4:	4873      	ldr	r0, [pc, #460]	; (8006e74 <HAL_I2C_Mem_Write+0x200>)
 8006ca6:	f7fc fa4e 	bl	8003146 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b20      	cmp	r3, #32
 8006cb4:	f040 80d9 	bne.w	8006e6a <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	2319      	movs	r3, #25
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	496d      	ldr	r1, [pc, #436]	; (8006e78 <HAL_I2C_Mem_Write+0x204>)
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f000 fc8c 	bl	80075e0 <I2C_WaitOnFlagUntilTimeout>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8006cce:	2302      	movs	r3, #2
 8006cd0:	e0cc      	b.n	8006e6c <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d101      	bne.n	8006ce0 <HAL_I2C_Mem_Write+0x6c>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e0c5      	b.n	8006e6c <HAL_I2C_Mem_Write+0x1f8>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d007      	beq.n	8006d06 <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f042 0201 	orr.w	r2, r2, #1
 8006d04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d14:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2221      	movs	r2, #33	; 0x21
 8006d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2240      	movs	r2, #64	; 0x40
 8006d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6a3a      	ldr	r2, [r7, #32]
 8006d30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	4a4d      	ldr	r2, [pc, #308]	; (8006e7c <HAL_I2C_Mem_Write+0x208>)
 8006d46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d48:	88f8      	ldrh	r0, [r7, #6]
 8006d4a:	893a      	ldrh	r2, [r7, #8]
 8006d4c:	8979      	ldrh	r1, [r7, #10]
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	4603      	mov	r3, r0
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f000 fac3 	bl	80072e4 <I2C_RequestMemoryWrite>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d052      	beq.n	8006e0a <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e081      	b.n	8006e6c <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f000 fd0d 	bl	800778c <I2C_WaitOnTXEFlagUntilTimeout>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00d      	beq.n	8006d94 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7c:	2b04      	cmp	r3, #4
 8006d7e:	d107      	bne.n	8006d90 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d8e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e06b      	b.n	8006e6c <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d98:	781a      	ldrb	r2, [r3, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	1c5a      	adds	r2, r3, #1
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dae:	3b01      	subs	r3, #1
 8006db0:	b29a      	uxth	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	f003 0304 	and.w	r3, r3, #4
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	d11b      	bne.n	8006e0a <HAL_I2C_Mem_Write+0x196>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d017      	beq.n	8006e0a <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	781a      	ldrb	r2, [r3, #0]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006df4:	3b01      	subs	r3, #1
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1aa      	bne.n	8006d68 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 fcf9 	bl	800780e <I2C_WaitOnBTFFlagUntilTimeout>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00d      	beq.n	8006e3e <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e26:	2b04      	cmp	r3, #4
 8006e28:	d107      	bne.n	8006e3a <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e016      	b.n	8006e6c <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2220      	movs	r2, #32
 8006e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	e000      	b.n	8006e6c <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 8006e6a:	2302      	movs	r3, #2
  }
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3718      	adds	r7, #24
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	0800e178 	.word	0x0800e178
 8006e78:	00100002 	.word	0x00100002
 8006e7c:	ffff0000 	.word	0xffff0000

08006e80 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b08c      	sub	sp, #48	; 0x30
 8006e84:	af02      	add	r7, sp, #8
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	4608      	mov	r0, r1
 8006e8a:	4611      	mov	r1, r2
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	4603      	mov	r3, r0
 8006e90:	817b      	strh	r3, [r7, #10]
 8006e92:	460b      	mov	r3, r1
 8006e94:	813b      	strh	r3, [r7, #8]
 8006e96:	4613      	mov	r3, r2
 8006e98:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006e9a:	f7fd faad 	bl	80043f8 <HAL_GetTick>
 8006e9e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8006ea0:	88fb      	ldrh	r3, [r7, #6]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d007      	beq.n	8006eb6 <HAL_I2C_Mem_Read+0x36>
 8006ea6:	88fb      	ldrh	r3, [r7, #6]
 8006ea8:	2b10      	cmp	r3, #16
 8006eaa:	d004      	beq.n	8006eb6 <HAL_I2C_Mem_Read+0x36>
 8006eac:	f44f 611f 	mov.w	r1, #2544	; 0x9f0
 8006eb0:	4881      	ldr	r0, [pc, #516]	; (80070b8 <HAL_I2C_Mem_Read+0x238>)
 8006eb2:	f7fc f948 	bl	8003146 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b20      	cmp	r3, #32
 8006ec0:	f040 8209 	bne.w	80072d6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	2319      	movs	r3, #25
 8006eca:	2201      	movs	r2, #1
 8006ecc:	497b      	ldr	r1, [pc, #492]	; (80070bc <HAL_I2C_Mem_Read+0x23c>)
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f000 fb86 	bl	80075e0 <I2C_WaitOnFlagUntilTimeout>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 8006eda:	2302      	movs	r3, #2
 8006edc:	e1fc      	b.n	80072d8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d101      	bne.n	8006eec <HAL_I2C_Mem_Read+0x6c>
 8006ee8:	2302      	movs	r3, #2
 8006eea:	e1f5      	b.n	80072d8 <HAL_I2C_Mem_Read+0x458>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d007      	beq.n	8006f12 <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f042 0201 	orr.w	r2, r2, #1
 8006f10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f20:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2222      	movs	r2, #34	; 0x22
 8006f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2240      	movs	r2, #64	; 0x40
 8006f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006f42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	4a5b      	ldr	r2, [pc, #364]	; (80070c0 <HAL_I2C_Mem_Read+0x240>)
 8006f52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f54:	88f8      	ldrh	r0, [r7, #6]
 8006f56:	893a      	ldrh	r2, [r7, #8]
 8006f58:	8979      	ldrh	r1, [r7, #10]
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5c:	9301      	str	r3, [sp, #4]
 8006f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	4603      	mov	r3, r0
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 fa53 	bl	8007410 <I2C_RequestMemoryRead>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e1b1      	b.n	80072d8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d113      	bne.n	8006fa4 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	623b      	str	r3, [r7, #32]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	623b      	str	r3, [r7, #32]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	623b      	str	r3, [r7, #32]
 8006f90:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fa0:	601a      	str	r2, [r3, #0]
 8006fa2:	e185      	b.n	80072b0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d11b      	bne.n	8006fe4 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fba:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	61fb      	str	r3, [r7, #28]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	61fb      	str	r3, [r7, #28]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	61fb      	str	r3, [r7, #28]
 8006fd0:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	e165      	b.n	80072b0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d11b      	bne.n	8007024 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ffa:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800700a:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800700c:	2300      	movs	r3, #0
 800700e:	61bb      	str	r3, [r7, #24]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	61bb      	str	r3, [r7, #24]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	61bb      	str	r3, [r7, #24]
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	e145      	b.n	80072b0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007024:	2300      	movs	r3, #0
 8007026:	617b      	str	r3, [r7, #20]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	617b      	str	r3, [r7, #20]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	617b      	str	r3, [r7, #20]
 8007038:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800703a:	e139      	b.n	80072b0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007040:	2b03      	cmp	r3, #3
 8007042:	f200 80f2 	bhi.w	800722a <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800704a:	2b01      	cmp	r3, #1
 800704c:	d123      	bne.n	8007096 <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800704e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007050:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f000 fc1c 	bl	8007890 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e13a      	b.n	80072d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	691a      	ldr	r2, [r3, #16]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	b2d2      	uxtb	r2, r2
 800706e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007074:	1c5a      	adds	r2, r3, #1
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800707e:	3b01      	subs	r3, #1
 8007080:	b29a      	uxth	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800708a:	b29b      	uxth	r3, r3
 800708c:	3b01      	subs	r3, #1
 800708e:	b29a      	uxth	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007094:	e10c      	b.n	80072b0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800709a:	2b02      	cmp	r3, #2
 800709c:	d14f      	bne.n	800713e <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800709e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a4:	2200      	movs	r2, #0
 80070a6:	4907      	ldr	r1, [pc, #28]	; (80070c4 <HAL_I2C_Mem_Read+0x244>)
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f000 fa99 	bl	80075e0 <I2C_WaitOnFlagUntilTimeout>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d009      	beq.n	80070c8 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e10f      	b.n	80072d8 <HAL_I2C_Mem_Read+0x458>
 80070b8:	0800e178 	.word	0x0800e178
 80070bc:	00100002 	.word	0x00100002
 80070c0:	ffff0000 	.word	0xffff0000
 80070c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	691a      	ldr	r2, [r3, #16]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e2:	b2d2      	uxtb	r2, r2
 80070e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ea:	1c5a      	adds	r2, r3, #1
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070f4:	3b01      	subs	r3, #1
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007100:	b29b      	uxth	r3, r3
 8007102:	3b01      	subs	r3, #1
 8007104:	b29a      	uxth	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	691a      	ldr	r2, [r3, #16]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007114:	b2d2      	uxtb	r2, r2
 8007116:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007126:	3b01      	subs	r3, #1
 8007128:	b29a      	uxth	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007132:	b29b      	uxth	r3, r3
 8007134:	3b01      	subs	r3, #1
 8007136:	b29a      	uxth	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800713c:	e0b8      	b.n	80072b0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800713e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007144:	2200      	movs	r2, #0
 8007146:	4966      	ldr	r1, [pc, #408]	; (80072e0 <HAL_I2C_Mem_Read+0x460>)
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f000 fa49 	bl	80075e0 <I2C_WaitOnFlagUntilTimeout>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d001      	beq.n	8007158 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e0bf      	b.n	80072d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007166:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	691a      	ldr	r2, [r3, #16]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007172:	b2d2      	uxtb	r2, r2
 8007174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717a:	1c5a      	adds	r2, r3, #1
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007184:	3b01      	subs	r3, #1
 8007186:	b29a      	uxth	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007190:	b29b      	uxth	r3, r3
 8007192:	3b01      	subs	r3, #1
 8007194:	b29a      	uxth	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a0:	2200      	movs	r2, #0
 80071a2:	494f      	ldr	r1, [pc, #316]	; (80072e0 <HAL_I2C_Mem_Read+0x460>)
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f000 fa1b 	bl	80075e0 <I2C_WaitOnFlagUntilTimeout>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e091      	b.n	80072d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	691a      	ldr	r2, [r3, #16]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	b2d2      	uxtb	r2, r2
 80071d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d6:	1c5a      	adds	r2, r3, #1
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071e0:	3b01      	subs	r3, #1
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	3b01      	subs	r3, #1
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	691a      	ldr	r2, [r3, #16]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007200:	b2d2      	uxtb	r2, r2
 8007202:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007208:	1c5a      	adds	r2, r3, #1
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007212:	3b01      	subs	r3, #1
 8007214:	b29a      	uxth	r2, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800721e:	b29b      	uxth	r3, r3
 8007220:	3b01      	subs	r3, #1
 8007222:	b29a      	uxth	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007228:	e042      	b.n	80072b0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800722a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800722c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f000 fb2e 	bl	8007890 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e04c      	b.n	80072d8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	691a      	ldr	r2, [r3, #16]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007248:	b2d2      	uxtb	r2, r2
 800724a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	1c5a      	adds	r2, r3, #1
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800725a:	3b01      	subs	r3, #1
 800725c:	b29a      	uxth	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007266:	b29b      	uxth	r3, r3
 8007268:	3b01      	subs	r3, #1
 800726a:	b29a      	uxth	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	f003 0304 	and.w	r3, r3, #4
 800727a:	2b04      	cmp	r3, #4
 800727c:	d118      	bne.n	80072b0 <HAL_I2C_Mem_Read+0x430>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	691a      	ldr	r2, [r3, #16]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	b2d2      	uxtb	r2, r2
 800728a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	1c5a      	adds	r2, r3, #1
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800729a:	3b01      	subs	r3, #1
 800729c:	b29a      	uxth	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	3b01      	subs	r3, #1
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f47f aec1 	bne.w	800703c <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2220      	movs	r2, #32
 80072be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80072d2:	2300      	movs	r3, #0
 80072d4:	e000      	b.n	80072d8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80072d6:	2302      	movs	r3, #2
  }
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3728      	adds	r7, #40	; 0x28
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	00010004 	.word	0x00010004

080072e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b088      	sub	sp, #32
 80072e8:	af02      	add	r7, sp, #8
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	4608      	mov	r0, r1
 80072ee:	4611      	mov	r1, r2
 80072f0:	461a      	mov	r2, r3
 80072f2:	4603      	mov	r3, r0
 80072f4:	817b      	strh	r3, [r7, #10]
 80072f6:	460b      	mov	r3, r1
 80072f8:	813b      	strh	r3, [r7, #8]
 80072fa:	4613      	mov	r3, r2
 80072fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800730c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	6a3b      	ldr	r3, [r7, #32]
 8007314:	2200      	movs	r2, #0
 8007316:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 f960 	bl	80075e0 <I2C_WaitOnFlagUntilTimeout>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00d      	beq.n	8007342 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007334:	d103      	bne.n	800733e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800733c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e05f      	b.n	8007402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007342:	897b      	ldrh	r3, [r7, #10]
 8007344:	b2db      	uxtb	r3, r3
 8007346:	461a      	mov	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007350:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007354:	6a3a      	ldr	r2, [r7, #32]
 8007356:	492d      	ldr	r1, [pc, #180]	; (800740c <I2C_RequestMemoryWrite+0x128>)
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 f998 	bl	800768e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e04c      	b.n	8007402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007368:	2300      	movs	r3, #0
 800736a:	617b      	str	r3, [r7, #20]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	617b      	str	r3, [r7, #20]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	617b      	str	r3, [r7, #20]
 800737c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800737e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007380:	6a39      	ldr	r1, [r7, #32]
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 fa02 	bl	800778c <I2C_WaitOnTXEFlagUntilTimeout>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00d      	beq.n	80073aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007392:	2b04      	cmp	r3, #4
 8007394:	d107      	bne.n	80073a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e02b      	b.n	8007402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80073aa:	88fb      	ldrh	r3, [r7, #6]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d105      	bne.n	80073bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073b0:	893b      	ldrh	r3, [r7, #8]
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	611a      	str	r2, [r3, #16]
 80073ba:	e021      	b.n	8007400 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80073bc:	893b      	ldrh	r3, [r7, #8]
 80073be:	0a1b      	lsrs	r3, r3, #8
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	b2da      	uxtb	r2, r3
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073cc:	6a39      	ldr	r1, [r7, #32]
 80073ce:	68f8      	ldr	r0, [r7, #12]
 80073d0:	f000 f9dc 	bl	800778c <I2C_WaitOnTXEFlagUntilTimeout>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00d      	beq.n	80073f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	2b04      	cmp	r3, #4
 80073e0:	d107      	bne.n	80073f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e005      	b.n	8007402 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073f6:	893b      	ldrh	r3, [r7, #8]
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3718      	adds	r7, #24
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	00010002 	.word	0x00010002

08007410 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b088      	sub	sp, #32
 8007414:	af02      	add	r7, sp, #8
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	4608      	mov	r0, r1
 800741a:	4611      	mov	r1, r2
 800741c:	461a      	mov	r2, r3
 800741e:	4603      	mov	r3, r0
 8007420:	817b      	strh	r3, [r7, #10]
 8007422:	460b      	mov	r3, r1
 8007424:	813b      	strh	r3, [r7, #8]
 8007426:	4613      	mov	r3, r2
 8007428:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007438:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007448:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	2200      	movs	r2, #0
 8007452:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f000 f8c2 	bl	80075e0 <I2C_WaitOnFlagUntilTimeout>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00d      	beq.n	800747e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800746c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007470:	d103      	bne.n	800747a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007478:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e0aa      	b.n	80075d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800747e:	897b      	ldrh	r3, [r7, #10]
 8007480:	b2db      	uxtb	r3, r3
 8007482:	461a      	mov	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800748c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007490:	6a3a      	ldr	r2, [r7, #32]
 8007492:	4952      	ldr	r1, [pc, #328]	; (80075dc <I2C_RequestMemoryRead+0x1cc>)
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 f8fa 	bl	800768e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d001      	beq.n	80074a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e097      	b.n	80075d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074a4:	2300      	movs	r3, #0
 80074a6:	617b      	str	r3, [r7, #20]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	695b      	ldr	r3, [r3, #20]
 80074ae:	617b      	str	r3, [r7, #20]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	617b      	str	r3, [r7, #20]
 80074b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074bc:	6a39      	ldr	r1, [r7, #32]
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 f964 	bl	800778c <I2C_WaitOnTXEFlagUntilTimeout>
 80074c4:	4603      	mov	r3, r0
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00d      	beq.n	80074e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	2b04      	cmp	r3, #4
 80074d0:	d107      	bne.n	80074e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e076      	b.n	80075d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80074e6:	88fb      	ldrh	r3, [r7, #6]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d105      	bne.n	80074f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80074ec:	893b      	ldrh	r3, [r7, #8]
 80074ee:	b2da      	uxtb	r2, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	611a      	str	r2, [r3, #16]
 80074f6:	e021      	b.n	800753c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80074f8:	893b      	ldrh	r3, [r7, #8]
 80074fa:	0a1b      	lsrs	r3, r3, #8
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007508:	6a39      	ldr	r1, [r7, #32]
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f000 f93e 	bl	800778c <I2C_WaitOnTXEFlagUntilTimeout>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00d      	beq.n	8007532 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751a:	2b04      	cmp	r3, #4
 800751c:	d107      	bne.n	800752e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800752c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e050      	b.n	80075d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007532:	893b      	ldrh	r3, [r7, #8]
 8007534:	b2da      	uxtb	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800753c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800753e:	6a39      	ldr	r1, [r7, #32]
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 f923 	bl	800778c <I2C_WaitOnTXEFlagUntilTimeout>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00d      	beq.n	8007568 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007550:	2b04      	cmp	r3, #4
 8007552:	d107      	bne.n	8007564 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007562:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e035      	b.n	80075d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007576:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	9300      	str	r3, [sp, #0]
 800757c:	6a3b      	ldr	r3, [r7, #32]
 800757e:	2200      	movs	r2, #0
 8007580:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 f82b 	bl	80075e0 <I2C_WaitOnFlagUntilTimeout>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00d      	beq.n	80075ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800759a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800759e:	d103      	bne.n	80075a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e013      	b.n	80075d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80075ac:	897b      	ldrh	r3, [r7, #10]
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	f043 0301 	orr.w	r3, r3, #1
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80075bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075be:	6a3a      	ldr	r2, [r7, #32]
 80075c0:	4906      	ldr	r1, [pc, #24]	; (80075dc <I2C_RequestMemoryRead+0x1cc>)
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 f863 	bl	800768e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e000      	b.n	80075d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3718      	adds	r7, #24
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	00010002 	.word	0x00010002

080075e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	603b      	str	r3, [r7, #0]
 80075ec:	4613      	mov	r3, r2
 80075ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075f0:	e025      	b.n	800763e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075f8:	d021      	beq.n	800763e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075fa:	f7fc fefd 	bl	80043f8 <HAL_GetTick>
 80075fe:	4602      	mov	r2, r0
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	429a      	cmp	r2, r3
 8007608:	d302      	bcc.n	8007610 <I2C_WaitOnFlagUntilTimeout+0x30>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d116      	bne.n	800763e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2220      	movs	r2, #32
 800761a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762a:	f043 0220 	orr.w	r2, r3, #32
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e023      	b.n	8007686 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	0c1b      	lsrs	r3, r3, #16
 8007642:	b2db      	uxtb	r3, r3
 8007644:	2b01      	cmp	r3, #1
 8007646:	d10d      	bne.n	8007664 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	43da      	mvns	r2, r3
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	4013      	ands	r3, r2
 8007654:	b29b      	uxth	r3, r3
 8007656:	2b00      	cmp	r3, #0
 8007658:	bf0c      	ite	eq
 800765a:	2301      	moveq	r3, #1
 800765c:	2300      	movne	r3, #0
 800765e:	b2db      	uxtb	r3, r3
 8007660:	461a      	mov	r2, r3
 8007662:	e00c      	b.n	800767e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	43da      	mvns	r2, r3
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	4013      	ands	r3, r2
 8007670:	b29b      	uxth	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	bf0c      	ite	eq
 8007676:	2301      	moveq	r3, #1
 8007678:	2300      	movne	r3, #0
 800767a:	b2db      	uxtb	r3, r3
 800767c:	461a      	mov	r2, r3
 800767e:	79fb      	ldrb	r3, [r7, #7]
 8007680:	429a      	cmp	r2, r3
 8007682:	d0b6      	beq.n	80075f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b084      	sub	sp, #16
 8007692:	af00      	add	r7, sp, #0
 8007694:	60f8      	str	r0, [r7, #12]
 8007696:	60b9      	str	r1, [r7, #8]
 8007698:	607a      	str	r2, [r7, #4]
 800769a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800769c:	e051      	b.n	8007742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076ac:	d123      	bne.n	80076f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2220      	movs	r2, #32
 80076d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e2:	f043 0204 	orr.w	r2, r3, #4
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e046      	b.n	8007784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076fc:	d021      	beq.n	8007742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076fe:	f7fc fe7b 	bl	80043f8 <HAL_GetTick>
 8007702:	4602      	mov	r2, r0
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	429a      	cmp	r2, r3
 800770c:	d302      	bcc.n	8007714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d116      	bne.n	8007742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2220      	movs	r2, #32
 800771e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772e:	f043 0220 	orr.w	r2, r3, #32
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e020      	b.n	8007784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	0c1b      	lsrs	r3, r3, #16
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b01      	cmp	r3, #1
 800774a:	d10c      	bne.n	8007766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	43da      	mvns	r2, r3
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	4013      	ands	r3, r2
 8007758:	b29b      	uxth	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	bf14      	ite	ne
 800775e:	2301      	movne	r3, #1
 8007760:	2300      	moveq	r3, #0
 8007762:	b2db      	uxtb	r3, r3
 8007764:	e00b      	b.n	800777e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	43da      	mvns	r2, r3
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	4013      	ands	r3, r2
 8007772:	b29b      	uxth	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	bf14      	ite	ne
 8007778:	2301      	movne	r3, #1
 800777a:	2300      	moveq	r3, #0
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b00      	cmp	r3, #0
 8007780:	d18d      	bne.n	800769e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007798:	e02d      	b.n	80077f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 f8ce 	bl	800793c <I2C_IsAcknowledgeFailed>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e02d      	b.n	8007806 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077b0:	d021      	beq.n	80077f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077b2:	f7fc fe21 	bl	80043f8 <HAL_GetTick>
 80077b6:	4602      	mov	r2, r0
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d302      	bcc.n	80077c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d116      	bne.n	80077f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2220      	movs	r2, #32
 80077d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e2:	f043 0220 	orr.w	r2, r3, #32
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e007      	b.n	8007806 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	695b      	ldr	r3, [r3, #20]
 80077fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007800:	2b80      	cmp	r3, #128	; 0x80
 8007802:	d1ca      	bne.n	800779a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b084      	sub	sp, #16
 8007812:	af00      	add	r7, sp, #0
 8007814:	60f8      	str	r0, [r7, #12]
 8007816:	60b9      	str	r1, [r7, #8]
 8007818:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800781a:	e02d      	b.n	8007878 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800781c:	68f8      	ldr	r0, [r7, #12]
 800781e:	f000 f88d 	bl	800793c <I2C_IsAcknowledgeFailed>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d001      	beq.n	800782c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e02d      	b.n	8007888 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007832:	d021      	beq.n	8007878 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007834:	f7fc fde0 	bl	80043f8 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	429a      	cmp	r2, r3
 8007842:	d302      	bcc.n	800784a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d116      	bne.n	8007878 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2220      	movs	r2, #32
 8007854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007864:	f043 0220 	orr.w	r2, r3, #32
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	e007      	b.n	8007888 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	f003 0304 	and.w	r3, r3, #4
 8007882:	2b04      	cmp	r3, #4
 8007884:	d1ca      	bne.n	800781c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800789c:	e042      	b.n	8007924 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	695b      	ldr	r3, [r3, #20]
 80078a4:	f003 0310 	and.w	r3, r3, #16
 80078a8:	2b10      	cmp	r3, #16
 80078aa:	d119      	bne.n	80078e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f06f 0210 	mvn.w	r2, #16
 80078b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2220      	movs	r2, #32
 80078c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e029      	b.n	8007934 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078e0:	f7fc fd8a 	bl	80043f8 <HAL_GetTick>
 80078e4:	4602      	mov	r2, r0
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d302      	bcc.n	80078f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d116      	bne.n	8007924 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2220      	movs	r2, #32
 8007900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007910:	f043 0220 	orr.w	r2, r3, #32
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2200      	movs	r2, #0
 800791c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e007      	b.n	8007934 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800792e:	2b40      	cmp	r3, #64	; 0x40
 8007930:	d1b5      	bne.n	800789e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007932:	2300      	movs	r3, #0
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800794e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007952:	d11b      	bne.n	800798c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800795c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2220      	movs	r2, #32
 8007968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007978:	f043 0204 	orr.w	r2, r3, #4
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e000      	b.n	800798e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
	...

0800799c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a28      	ldr	r2, [pc, #160]	; (8007a4c <HAL_I2CEx_ConfigAnalogFilter+0xb0>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d00d      	beq.n	80079cc <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a26      	ldr	r2, [pc, #152]	; (8007a50 <HAL_I2CEx_ConfigAnalogFilter+0xb4>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d008      	beq.n	80079cc <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a25      	ldr	r2, [pc, #148]	; (8007a54 <HAL_I2CEx_ConfigAnalogFilter+0xb8>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d003      	beq.n	80079cc <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80079c4:	215c      	movs	r1, #92	; 0x5c
 80079c6:	4824      	ldr	r0, [pc, #144]	; (8007a58 <HAL_I2CEx_ConfigAnalogFilter+0xbc>)
 80079c8:	f7fb fbbd 	bl	8003146 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d006      	beq.n	80079e0 <HAL_I2CEx_ConfigAnalogFilter+0x44>
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b10      	cmp	r3, #16
 80079d6:	d003      	beq.n	80079e0 <HAL_I2CEx_ConfigAnalogFilter+0x44>
 80079d8:	215d      	movs	r1, #93	; 0x5d
 80079da:	481f      	ldr	r0, [pc, #124]	; (8007a58 <HAL_I2CEx_ConfigAnalogFilter+0xbc>)
 80079dc:	f7fb fbb3 	bl	8003146 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b20      	cmp	r3, #32
 80079ea:	d129      	bne.n	8007a40 <HAL_I2CEx_ConfigAnalogFilter+0xa4>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2224      	movs	r2, #36	; 0x24
 80079f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f022 0201 	bic.w	r2, r2, #1
 8007a02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f022 0210 	bic.w	r2, r2, #16
 8007a12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	683a      	ldr	r2, [r7, #0]
 8007a20:	430a      	orrs	r2, r1
 8007a22:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f042 0201 	orr.w	r2, r2, #1
 8007a32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2220      	movs	r2, #32
 8007a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	e000      	b.n	8007a42 <HAL_I2CEx_ConfigAnalogFilter+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8007a40:	2302      	movs	r3, #2
  }
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	40005400 	.word	0x40005400
 8007a50:	40005800 	.word	0x40005800
 8007a54:	40005c00 	.word	0x40005c00
 8007a58:	0800e1b0 	.word	0x0800e1b0

08007a5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007a66:	2300      	movs	r3, #0
 8007a68:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a27      	ldr	r2, [pc, #156]	; (8007b0c <HAL_I2CEx_ConfigDigitalFilter+0xb0>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d00d      	beq.n	8007a90 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a25      	ldr	r2, [pc, #148]	; (8007b10 <HAL_I2CEx_ConfigDigitalFilter+0xb4>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d008      	beq.n	8007a90 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a24      	ldr	r2, [pc, #144]	; (8007b14 <HAL_I2CEx_ConfigDigitalFilter+0xb8>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d003      	beq.n	8007a90 <HAL_I2CEx_ConfigDigitalFilter+0x34>
 8007a88:	2184      	movs	r1, #132	; 0x84
 8007a8a:	4823      	ldr	r0, [pc, #140]	; (8007b18 <HAL_I2CEx_ConfigDigitalFilter+0xbc>)
 8007a8c:	f7fb fb5b 	bl	8003146 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	2b0f      	cmp	r3, #15
 8007a94:	d903      	bls.n	8007a9e <HAL_I2CEx_ConfigDigitalFilter+0x42>
 8007a96:	2185      	movs	r1, #133	; 0x85
 8007a98:	481f      	ldr	r0, [pc, #124]	; (8007b18 <HAL_I2CEx_ConfigDigitalFilter+0xbc>)
 8007a9a:	f7fb fb54 	bl	8003146 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b20      	cmp	r3, #32
 8007aa8:	d12a      	bne.n	8007b00 <HAL_I2CEx_ConfigDigitalFilter+0xa4>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2224      	movs	r2, #36	; 0x24
 8007aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f022 0201 	bic.w	r2, r2, #1
 8007ac0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007aca:	89fb      	ldrh	r3, [r7, #14]
 8007acc:	f023 030f 	bic.w	r3, r3, #15
 8007ad0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	89fb      	ldrh	r3, [r7, #14]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	89fa      	ldrh	r2, [r7, #14]
 8007ae2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f042 0201 	orr.w	r2, r2, #1
 8007af2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2220      	movs	r2, #32
 8007af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	e000      	b.n	8007b02 <HAL_I2CEx_ConfigDigitalFilter+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8007b00:	2302      	movs	r3, #2
  }
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	40005400 	.word	0x40005400
 8007b10:	40005800 	.word	0x40005800
 8007b14:	40005c00 	.word	0x40005c00
 8007b18:	0800e1b0 	.word	0x0800e1b0

08007b1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007b26:	2300      	movs	r3, #0
 8007b28:	603b      	str	r3, [r7, #0]
 8007b2a:	4b20      	ldr	r3, [pc, #128]	; (8007bac <HAL_PWREx_EnableOverDrive+0x90>)
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2e:	4a1f      	ldr	r2, [pc, #124]	; (8007bac <HAL_PWREx_EnableOverDrive+0x90>)
 8007b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b34:	6413      	str	r3, [r2, #64]	; 0x40
 8007b36:	4b1d      	ldr	r3, [pc, #116]	; (8007bac <HAL_PWREx_EnableOverDrive+0x90>)
 8007b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b3e:	603b      	str	r3, [r7, #0]
 8007b40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007b42:	4b1b      	ldr	r3, [pc, #108]	; (8007bb0 <HAL_PWREx_EnableOverDrive+0x94>)
 8007b44:	2201      	movs	r2, #1
 8007b46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b48:	f7fc fc56 	bl	80043f8 <HAL_GetTick>
 8007b4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007b4e:	e009      	b.n	8007b64 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007b50:	f7fc fc52 	bl	80043f8 <HAL_GetTick>
 8007b54:	4602      	mov	r2, r0
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b5e:	d901      	bls.n	8007b64 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e01f      	b.n	8007ba4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007b64:	4b13      	ldr	r3, [pc, #76]	; (8007bb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b70:	d1ee      	bne.n	8007b50 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007b72:	4b11      	ldr	r3, [pc, #68]	; (8007bb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007b74:	2201      	movs	r2, #1
 8007b76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b78:	f7fc fc3e 	bl	80043f8 <HAL_GetTick>
 8007b7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007b7e:	e009      	b.n	8007b94 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007b80:	f7fc fc3a 	bl	80043f8 <HAL_GetTick>
 8007b84:	4602      	mov	r2, r0
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b8e:	d901      	bls.n	8007b94 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e007      	b.n	8007ba4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007b94:	4b07      	ldr	r3, [pc, #28]	; (8007bb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ba0:	d1ee      	bne.n	8007b80 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	40023800 	.word	0x40023800
 8007bb0:	420e0040 	.word	0x420e0040
 8007bb4:	40007000 	.word	0x40007000
 8007bb8:	420e0044 	.word	0x420e0044

08007bbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e30d      	b.n	80081ea <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b0f      	cmp	r3, #15
 8007bd4:	d903      	bls.n	8007bde <HAL_RCC_OscConfig+0x22>
 8007bd6:	21e8      	movs	r1, #232	; 0xe8
 8007bd8:	48a3      	ldr	r0, [pc, #652]	; (8007e68 <HAL_RCC_OscConfig+0x2ac>)
 8007bda:	f7fb fab4 	bl	8003146 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f000 8088 	beq.w	8007cfc <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00d      	beq.n	8007c10 <HAL_RCC_OscConfig+0x54>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bfc:	d008      	beq.n	8007c10 <HAL_RCC_OscConfig+0x54>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c06:	d003      	beq.n	8007c10 <HAL_RCC_OscConfig+0x54>
 8007c08:	21ed      	movs	r1, #237	; 0xed
 8007c0a:	4897      	ldr	r0, [pc, #604]	; (8007e68 <HAL_RCC_OscConfig+0x2ac>)
 8007c0c:	f7fb fa9b 	bl	8003146 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c10:	4b96      	ldr	r3, [pc, #600]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f003 030c 	and.w	r3, r3, #12
 8007c18:	2b04      	cmp	r3, #4
 8007c1a:	d00c      	beq.n	8007c36 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c1c:	4b93      	ldr	r3, [pc, #588]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c24:	2b08      	cmp	r3, #8
 8007c26:	d112      	bne.n	8007c4e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c28:	4b90      	ldr	r3, [pc, #576]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c34:	d10b      	bne.n	8007c4e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c36:	4b8d      	ldr	r3, [pc, #564]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d05b      	beq.n	8007cfa <HAL_RCC_OscConfig+0x13e>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d157      	bne.n	8007cfa <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e2cd      	b.n	80081ea <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c56:	d106      	bne.n	8007c66 <HAL_RCC_OscConfig+0xaa>
 8007c58:	4b84      	ldr	r3, [pc, #528]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a83      	ldr	r2, [pc, #524]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c62:	6013      	str	r3, [r2, #0]
 8007c64:	e01d      	b.n	8007ca2 <HAL_RCC_OscConfig+0xe6>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c6e:	d10c      	bne.n	8007c8a <HAL_RCC_OscConfig+0xce>
 8007c70:	4b7e      	ldr	r3, [pc, #504]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a7d      	ldr	r2, [pc, #500]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007c76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c7a:	6013      	str	r3, [r2, #0]
 8007c7c:	4b7b      	ldr	r3, [pc, #492]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a7a      	ldr	r2, [pc, #488]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c86:	6013      	str	r3, [r2, #0]
 8007c88:	e00b      	b.n	8007ca2 <HAL_RCC_OscConfig+0xe6>
 8007c8a:	4b78      	ldr	r3, [pc, #480]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a77      	ldr	r2, [pc, #476]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c94:	6013      	str	r3, [r2, #0]
 8007c96:	4b75      	ldr	r3, [pc, #468]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a74      	ldr	r2, [pc, #464]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007c9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ca0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d013      	beq.n	8007cd2 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007caa:	f7fc fba5 	bl	80043f8 <HAL_GetTick>
 8007cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cb0:	e008      	b.n	8007cc4 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007cb2:	f7fc fba1 	bl	80043f8 <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	2b64      	cmp	r3, #100	; 0x64
 8007cbe:	d901      	bls.n	8007cc4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e292      	b.n	80081ea <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cc4:	4b69      	ldr	r3, [pc, #420]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d0f0      	beq.n	8007cb2 <HAL_RCC_OscConfig+0xf6>
 8007cd0:	e014      	b.n	8007cfc <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cd2:	f7fc fb91 	bl	80043f8 <HAL_GetTick>
 8007cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cd8:	e008      	b.n	8007cec <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007cda:	f7fc fb8d 	bl	80043f8 <HAL_GetTick>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	1ad3      	subs	r3, r2, r3
 8007ce4:	2b64      	cmp	r3, #100	; 0x64
 8007ce6:	d901      	bls.n	8007cec <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	e27e      	b.n	80081ea <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cec:	4b5f      	ldr	r3, [pc, #380]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1f0      	bne.n	8007cda <HAL_RCC_OscConfig+0x11e>
 8007cf8:	e000      	b.n	8007cfc <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cfa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0302 	and.w	r3, r3, #2
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d079      	beq.n	8007dfc <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d008      	beq.n	8007d22 <HAL_RCC_OscConfig+0x166>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d004      	beq.n	8007d22 <HAL_RCC_OscConfig+0x166>
 8007d18:	f240 111f 	movw	r1, #287	; 0x11f
 8007d1c:	4852      	ldr	r0, [pc, #328]	; (8007e68 <HAL_RCC_OscConfig+0x2ac>)
 8007d1e:	f7fb fa12 	bl	8003146 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	2b1f      	cmp	r3, #31
 8007d28:	d904      	bls.n	8007d34 <HAL_RCC_OscConfig+0x178>
 8007d2a:	f44f 7190 	mov.w	r1, #288	; 0x120
 8007d2e:	484e      	ldr	r0, [pc, #312]	; (8007e68 <HAL_RCC_OscConfig+0x2ac>)
 8007d30:	f7fb fa09 	bl	8003146 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d34:	4b4d      	ldr	r3, [pc, #308]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f003 030c 	and.w	r3, r3, #12
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00b      	beq.n	8007d58 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d40:	4b4a      	ldr	r3, [pc, #296]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d48:	2b08      	cmp	r3, #8
 8007d4a:	d11c      	bne.n	8007d86 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d4c:	4b47      	ldr	r3, [pc, #284]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d116      	bne.n	8007d86 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d58:	4b44      	ldr	r3, [pc, #272]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0302 	and.w	r3, r3, #2
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d005      	beq.n	8007d70 <HAL_RCC_OscConfig+0x1b4>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d001      	beq.n	8007d70 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e23c      	b.n	80081ea <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d70:	4b3e      	ldr	r3, [pc, #248]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	00db      	lsls	r3, r3, #3
 8007d7e:	493b      	ldr	r1, [pc, #236]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007d80:	4313      	orrs	r3, r2
 8007d82:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d84:	e03a      	b.n	8007dfc <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d020      	beq.n	8007dd0 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d8e:	4b38      	ldr	r3, [pc, #224]	; (8007e70 <HAL_RCC_OscConfig+0x2b4>)
 8007d90:	2201      	movs	r2, #1
 8007d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d94:	f7fc fb30 	bl	80043f8 <HAL_GetTick>
 8007d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d9a:	e008      	b.n	8007dae <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d9c:	f7fc fb2c 	bl	80043f8 <HAL_GetTick>
 8007da0:	4602      	mov	r2, r0
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d901      	bls.n	8007dae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e21d      	b.n	80081ea <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dae:	4b2f      	ldr	r3, [pc, #188]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 0302 	and.w	r3, r3, #2
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d0f0      	beq.n	8007d9c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dba:	4b2c      	ldr	r3, [pc, #176]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	00db      	lsls	r3, r3, #3
 8007dc8:	4928      	ldr	r1, [pc, #160]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	600b      	str	r3, [r1, #0]
 8007dce:	e015      	b.n	8007dfc <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007dd0:	4b27      	ldr	r3, [pc, #156]	; (8007e70 <HAL_RCC_OscConfig+0x2b4>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd6:	f7fc fb0f 	bl	80043f8 <HAL_GetTick>
 8007dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ddc:	e008      	b.n	8007df0 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007dde:	f7fc fb0b 	bl	80043f8 <HAL_GetTick>
 8007de2:	4602      	mov	r2, r0
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d901      	bls.n	8007df0 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e1fc      	b.n	80081ea <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007df0:	4b1e      	ldr	r3, [pc, #120]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0302 	and.w	r3, r3, #2
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1f0      	bne.n	8007dde <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 0308 	and.w	r3, r3, #8
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d046      	beq.n	8007e96 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d008      	beq.n	8007e22 <HAL_RCC_OscConfig+0x266>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d004      	beq.n	8007e22 <HAL_RCC_OscConfig+0x266>
 8007e18:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8007e1c:	4812      	ldr	r0, [pc, #72]	; (8007e68 <HAL_RCC_OscConfig+0x2ac>)
 8007e1e:	f7fb f992 	bl	8003146 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	695b      	ldr	r3, [r3, #20]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d016      	beq.n	8007e58 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e2a:	4b12      	ldr	r3, [pc, #72]	; (8007e74 <HAL_RCC_OscConfig+0x2b8>)
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e30:	f7fc fae2 	bl	80043f8 <HAL_GetTick>
 8007e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e36:	e008      	b.n	8007e4a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e38:	f7fc fade 	bl	80043f8 <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d901      	bls.n	8007e4a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e1cf      	b.n	80081ea <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e4a:	4b08      	ldr	r3, [pc, #32]	; (8007e6c <HAL_RCC_OscConfig+0x2b0>)
 8007e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e4e:	f003 0302 	and.w	r3, r3, #2
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d0f0      	beq.n	8007e38 <HAL_RCC_OscConfig+0x27c>
 8007e56:	e01e      	b.n	8007e96 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e58:	4b06      	ldr	r3, [pc, #24]	; (8007e74 <HAL_RCC_OscConfig+0x2b8>)
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e5e:	f7fc facb 	bl	80043f8 <HAL_GetTick>
 8007e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e64:	e011      	b.n	8007e8a <HAL_RCC_OscConfig+0x2ce>
 8007e66:	bf00      	nop
 8007e68:	0800e1ec 	.word	0x0800e1ec
 8007e6c:	40023800 	.word	0x40023800
 8007e70:	42470000 	.word	0x42470000
 8007e74:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e78:	f7fc fabe 	bl	80043f8 <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d901      	bls.n	8007e8a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007e86:	2303      	movs	r3, #3
 8007e88:	e1af      	b.n	80081ea <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e8a:	4b97      	ldr	r3, [pc, #604]	; (80080e8 <HAL_RCC_OscConfig+0x52c>)
 8007e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e8e:	f003 0302 	and.w	r3, r3, #2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1f0      	bne.n	8007e78 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 0304 	and.w	r3, r3, #4
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f000 80a8 	beq.w	8007ff4 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00c      	beq.n	8007eca <HAL_RCC_OscConfig+0x30e>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d008      	beq.n	8007eca <HAL_RCC_OscConfig+0x30e>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	2b05      	cmp	r3, #5
 8007ebe:	d004      	beq.n	8007eca <HAL_RCC_OscConfig+0x30e>
 8007ec0:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8007ec4:	4889      	ldr	r0, [pc, #548]	; (80080ec <HAL_RCC_OscConfig+0x530>)
 8007ec6:	f7fb f93e 	bl	8003146 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007eca:	4b87      	ldr	r3, [pc, #540]	; (80080e8 <HAL_RCC_OscConfig+0x52c>)
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10f      	bne.n	8007ef6 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	60bb      	str	r3, [r7, #8]
 8007eda:	4b83      	ldr	r3, [pc, #524]	; (80080e8 <HAL_RCC_OscConfig+0x52c>)
 8007edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ede:	4a82      	ldr	r2, [pc, #520]	; (80080e8 <HAL_RCC_OscConfig+0x52c>)
 8007ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ee6:	4b80      	ldr	r3, [pc, #512]	; (80080e8 <HAL_RCC_OscConfig+0x52c>)
 8007ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eee:	60bb      	str	r3, [r7, #8]
 8007ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ef6:	4b7e      	ldr	r3, [pc, #504]	; (80080f0 <HAL_RCC_OscConfig+0x534>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d118      	bne.n	8007f34 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f02:	4b7b      	ldr	r3, [pc, #492]	; (80080f0 <HAL_RCC_OscConfig+0x534>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a7a      	ldr	r2, [pc, #488]	; (80080f0 <HAL_RCC_OscConfig+0x534>)
 8007f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f0e:	f7fc fa73 	bl	80043f8 <HAL_GetTick>
 8007f12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f14:	e008      	b.n	8007f28 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f16:	f7fc fa6f 	bl	80043f8 <HAL_GetTick>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d901      	bls.n	8007f28 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e160      	b.n	80081ea <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f28:	4b71      	ldr	r3, [pc, #452]	; (80080f0 <HAL_RCC_OscConfig+0x534>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d0f0      	beq.n	8007f16 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d106      	bne.n	8007f4a <HAL_RCC_OscConfig+0x38e>
 8007f3c:	4b6a      	ldr	r3, [pc, #424]	; (80080e8 <HAL_RCC_OscConfig+0x52c>)
 8007f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f40:	4a69      	ldr	r2, [pc, #420]	; (80080e8 <HAL_RCC_OscConfig+0x52c>)
 8007f42:	f043 0301 	orr.w	r3, r3, #1
 8007f46:	6713      	str	r3, [r2, #112]	; 0x70
 8007f48:	e01c      	b.n	8007f84 <HAL_RCC_OscConfig+0x3c8>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	2b05      	cmp	r3, #5
 8007f50:	d10c      	bne.n	8007f6c <HAL_RCC_OscConfig+0x3b0>
 8007f52:	4b65      	ldr	r3, [pc, #404]	; (80080e8 <HAL_RCC_OscConfig+0x52c>)
 8007f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f56:	4a64      	ldr	r2, [pc, #400]	; (80080e8 <HAL_RCC_OscConfig+0x52c>)
 8007f58:	f043 0304 	orr.w	r3, r3, #4
 8007f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8007f5e:	4b62      	ldr	r3, [pc, #392]	; (80080e8 <HAL_RCC_OscConfig+0x52c>)
 8007f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f62:	4a61      	ldr	r2, [pc, #388]	; (80080e8 <HAL_RCC_OscConfig+0x52c>)
 8007f64:	f043 0301 	orr.w	r3, r3, #1
 8007f68:	6713      	str	r3, [r2, #112]	; 0x70
 8007f6a:	e00b      	b.n	8007f84 <HAL_RCC_OscConfig+0x3c8>
 8007f6c:	4b5e      	ldr	r3, [pc, #376]	; (80080e8 <HAL_RCC_OscConfig+0x52c>)
 8007f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f70:	4a5d      	ldr	r2, [pc, #372]	; (80080e8 <HAL_RCC_OscConfig+0x52c>)
 8007f72:	f023 0301 	bic.w	r3, r3, #1
 8007f76:	6713      	str	r3, [r2, #112]	; 0x70
 8007f78:	4b5b      	ldr	r3, [pc, #364]	; (80080e8 <HAL_RCC_OscConfig+0x52c>)
 8007f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f7c:	4a5a      	ldr	r2, [pc, #360]	; (80080e8 <HAL_RCC_OscConfig+0x52c>)
 8007f7e:	f023 0304 	bic.w	r3, r3, #4
 8007f82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d015      	beq.n	8007fb8 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f8c:	f7fc fa34 	bl	80043f8 <HAL_GetTick>
 8007f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f92:	e00a      	b.n	8007faa <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f94:	f7fc fa30 	bl	80043f8 <HAL_GetTick>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d901      	bls.n	8007faa <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e11f      	b.n	80081ea <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007faa:	4b4f      	ldr	r3, [pc, #316]	; (80080e8 <HAL_RCC_OscConfig+0x52c>)
 8007fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fae:	f003 0302 	and.w	r3, r3, #2
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d0ee      	beq.n	8007f94 <HAL_RCC_OscConfig+0x3d8>
 8007fb6:	e014      	b.n	8007fe2 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007fb8:	f7fc fa1e 	bl	80043f8 <HAL_GetTick>
 8007fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fbe:	e00a      	b.n	8007fd6 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fc0:	f7fc fa1a 	bl	80043f8 <HAL_GetTick>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d901      	bls.n	8007fd6 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e109      	b.n	80081ea <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fd6:	4b44      	ldr	r3, [pc, #272]	; (80080e8 <HAL_RCC_OscConfig+0x52c>)
 8007fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fda:	f003 0302 	and.w	r3, r3, #2
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1ee      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007fe2:	7dfb      	ldrb	r3, [r7, #23]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d105      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fe8:	4b3f      	ldr	r3, [pc, #252]	; (80080e8 <HAL_RCC_OscConfig+0x52c>)
 8007fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fec:	4a3e      	ldr	r2, [pc, #248]	; (80080e8 <HAL_RCC_OscConfig+0x52c>)
 8007fee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ff2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	699b      	ldr	r3, [r3, #24]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00c      	beq.n	8008016 <HAL_RCC_OscConfig+0x45a>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d008      	beq.n	8008016 <HAL_RCC_OscConfig+0x45a>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	699b      	ldr	r3, [r3, #24]
 8008008:	2b02      	cmp	r3, #2
 800800a:	d004      	beq.n	8008016 <HAL_RCC_OscConfig+0x45a>
 800800c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8008010:	4836      	ldr	r0, [pc, #216]	; (80080ec <HAL_RCC_OscConfig+0x530>)
 8008012:	f7fb f898 	bl	8003146 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	699b      	ldr	r3, [r3, #24]
 800801a:	2b00      	cmp	r3, #0
 800801c:	f000 80e4 	beq.w	80081e8 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008020:	4b31      	ldr	r3, [pc, #196]	; (80080e8 <HAL_RCC_OscConfig+0x52c>)
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	f003 030c 	and.w	r3, r3, #12
 8008028:	2b08      	cmp	r3, #8
 800802a:	f000 80ae 	beq.w	800818a <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	2b02      	cmp	r3, #2
 8008034:	f040 8092 	bne.w	800815c <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	69db      	ldr	r3, [r3, #28]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d009      	beq.n	8008054 <HAL_RCC_OscConfig+0x498>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	69db      	ldr	r3, [r3, #28]
 8008044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008048:	d004      	beq.n	8008054 <HAL_RCC_OscConfig+0x498>
 800804a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800804e:	4827      	ldr	r0, [pc, #156]	; (80080ec <HAL_RCC_OscConfig+0x530>)
 8008050:	f7fb f879 	bl	8003146 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a1b      	ldr	r3, [r3, #32]
 8008058:	2b3f      	cmp	r3, #63	; 0x3f
 800805a:	d904      	bls.n	8008066 <HAL_RCC_OscConfig+0x4aa>
 800805c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008060:	4822      	ldr	r0, [pc, #136]	; (80080ec <HAL_RCC_OscConfig+0x530>)
 8008062:	f7fb f870 	bl	8003146 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806a:	2b31      	cmp	r3, #49	; 0x31
 800806c:	d904      	bls.n	8008078 <HAL_RCC_OscConfig+0x4bc>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008072:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8008076:	d904      	bls.n	8008082 <HAL_RCC_OscConfig+0x4c6>
 8008078:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800807c:	481b      	ldr	r0, [pc, #108]	; (80080ec <HAL_RCC_OscConfig+0x530>)
 800807e:	f7fb f862 	bl	8003146 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008086:	2b02      	cmp	r3, #2
 8008088:	d010      	beq.n	80080ac <HAL_RCC_OscConfig+0x4f0>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808e:	2b04      	cmp	r3, #4
 8008090:	d00c      	beq.n	80080ac <HAL_RCC_OscConfig+0x4f0>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008096:	2b06      	cmp	r3, #6
 8008098:	d008      	beq.n	80080ac <HAL_RCC_OscConfig+0x4f0>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809e:	2b08      	cmp	r3, #8
 80080a0:	d004      	beq.n	80080ac <HAL_RCC_OscConfig+0x4f0>
 80080a2:	f240 11db 	movw	r1, #475	; 0x1db
 80080a6:	4811      	ldr	r0, [pc, #68]	; (80080ec <HAL_RCC_OscConfig+0x530>)
 80080a8:	f7fb f84d 	bl	8003146 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d903      	bls.n	80080bc <HAL_RCC_OscConfig+0x500>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b8:	2b0f      	cmp	r3, #15
 80080ba:	d904      	bls.n	80080c6 <HAL_RCC_OscConfig+0x50a>
 80080bc:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80080c0:	480a      	ldr	r0, [pc, #40]	; (80080ec <HAL_RCC_OscConfig+0x530>)
 80080c2:	f7fb f840 	bl	8003146 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080c6:	4b0b      	ldr	r3, [pc, #44]	; (80080f4 <HAL_RCC_OscConfig+0x538>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080cc:	f7fc f994 	bl	80043f8 <HAL_GetTick>
 80080d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080d2:	e011      	b.n	80080f8 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080d4:	f7fc f990 	bl	80043f8 <HAL_GetTick>
 80080d8:	4602      	mov	r2, r0
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d90a      	bls.n	80080f8 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e081      	b.n	80081ea <HAL_RCC_OscConfig+0x62e>
 80080e6:	bf00      	nop
 80080e8:	40023800 	.word	0x40023800
 80080ec:	0800e1ec 	.word	0x0800e1ec
 80080f0:	40007000 	.word	0x40007000
 80080f4:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080f8:	4b3e      	ldr	r3, [pc, #248]	; (80081f4 <HAL_RCC_OscConfig+0x638>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1e7      	bne.n	80080d4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	69da      	ldr	r2, [r3, #28]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6a1b      	ldr	r3, [r3, #32]
 800810c:	431a      	orrs	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008112:	019b      	lsls	r3, r3, #6
 8008114:	431a      	orrs	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800811a:	085b      	lsrs	r3, r3, #1
 800811c:	3b01      	subs	r3, #1
 800811e:	041b      	lsls	r3, r3, #16
 8008120:	431a      	orrs	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008126:	061b      	lsls	r3, r3, #24
 8008128:	4932      	ldr	r1, [pc, #200]	; (80081f4 <HAL_RCC_OscConfig+0x638>)
 800812a:	4313      	orrs	r3, r2
 800812c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800812e:	4b32      	ldr	r3, [pc, #200]	; (80081f8 <HAL_RCC_OscConfig+0x63c>)
 8008130:	2201      	movs	r2, #1
 8008132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008134:	f7fc f960 	bl	80043f8 <HAL_GetTick>
 8008138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800813a:	e008      	b.n	800814e <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800813c:	f7fc f95c 	bl	80043f8 <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	2b02      	cmp	r3, #2
 8008148:	d901      	bls.n	800814e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	e04d      	b.n	80081ea <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800814e:	4b29      	ldr	r3, [pc, #164]	; (80081f4 <HAL_RCC_OscConfig+0x638>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008156:	2b00      	cmp	r3, #0
 8008158:	d0f0      	beq.n	800813c <HAL_RCC_OscConfig+0x580>
 800815a:	e045      	b.n	80081e8 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800815c:	4b26      	ldr	r3, [pc, #152]	; (80081f8 <HAL_RCC_OscConfig+0x63c>)
 800815e:	2200      	movs	r2, #0
 8008160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008162:	f7fc f949 	bl	80043f8 <HAL_GetTick>
 8008166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008168:	e008      	b.n	800817c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800816a:	f7fc f945 	bl	80043f8 <HAL_GetTick>
 800816e:	4602      	mov	r2, r0
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	2b02      	cmp	r3, #2
 8008176:	d901      	bls.n	800817c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8008178:	2303      	movs	r3, #3
 800817a:	e036      	b.n	80081ea <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800817c:	4b1d      	ldr	r3, [pc, #116]	; (80081f4 <HAL_RCC_OscConfig+0x638>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1f0      	bne.n	800816a <HAL_RCC_OscConfig+0x5ae>
 8008188:	e02e      	b.n	80081e8 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d101      	bne.n	8008196 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	e029      	b.n	80081ea <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008196:	4b17      	ldr	r3, [pc, #92]	; (80081f4 <HAL_RCC_OscConfig+0x638>)
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	69db      	ldr	r3, [r3, #28]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d11c      	bne.n	80081e4 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d115      	bne.n	80081e4 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80081be:	4013      	ands	r3, r2
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d10d      	bne.n	80081e4 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d106      	bne.n	80081e4 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d001      	beq.n	80081e8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e000      	b.n	80081ea <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3718      	adds	r7, #24
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	40023800 	.word	0x40023800
 80081f8:	42470060 	.word	0x42470060

080081fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d101      	bne.n	8008210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	e18c      	b.n	800852a <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d003      	beq.n	8008220 <HAL_RCC_ClockConfig+0x24>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b0f      	cmp	r3, #15
 800821e:	d904      	bls.n	800822a <HAL_RCC_ClockConfig+0x2e>
 8008220:	f240 2151 	movw	r1, #593	; 0x251
 8008224:	4887      	ldr	r0, [pc, #540]	; (8008444 <HAL_RCC_ClockConfig+0x248>)
 8008226:	f7fa ff8e 	bl	8003146 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d031      	beq.n	8008294 <HAL_RCC_ClockConfig+0x98>
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d02e      	beq.n	8008294 <HAL_RCC_ClockConfig+0x98>
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	2b02      	cmp	r3, #2
 800823a:	d02b      	beq.n	8008294 <HAL_RCC_ClockConfig+0x98>
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	2b03      	cmp	r3, #3
 8008240:	d028      	beq.n	8008294 <HAL_RCC_ClockConfig+0x98>
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2b04      	cmp	r3, #4
 8008246:	d025      	beq.n	8008294 <HAL_RCC_ClockConfig+0x98>
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	2b05      	cmp	r3, #5
 800824c:	d022      	beq.n	8008294 <HAL_RCC_ClockConfig+0x98>
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b06      	cmp	r3, #6
 8008252:	d01f      	beq.n	8008294 <HAL_RCC_ClockConfig+0x98>
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	2b07      	cmp	r3, #7
 8008258:	d01c      	beq.n	8008294 <HAL_RCC_ClockConfig+0x98>
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	2b08      	cmp	r3, #8
 800825e:	d019      	beq.n	8008294 <HAL_RCC_ClockConfig+0x98>
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2b09      	cmp	r3, #9
 8008264:	d016      	beq.n	8008294 <HAL_RCC_ClockConfig+0x98>
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b0a      	cmp	r3, #10
 800826a:	d013      	beq.n	8008294 <HAL_RCC_ClockConfig+0x98>
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	2b0b      	cmp	r3, #11
 8008270:	d010      	beq.n	8008294 <HAL_RCC_ClockConfig+0x98>
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	2b0c      	cmp	r3, #12
 8008276:	d00d      	beq.n	8008294 <HAL_RCC_ClockConfig+0x98>
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	2b0d      	cmp	r3, #13
 800827c:	d00a      	beq.n	8008294 <HAL_RCC_ClockConfig+0x98>
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	2b0e      	cmp	r3, #14
 8008282:	d007      	beq.n	8008294 <HAL_RCC_ClockConfig+0x98>
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	2b0f      	cmp	r3, #15
 8008288:	d004      	beq.n	8008294 <HAL_RCC_ClockConfig+0x98>
 800828a:	f240 2152 	movw	r1, #594	; 0x252
 800828e:	486d      	ldr	r0, [pc, #436]	; (8008444 <HAL_RCC_ClockConfig+0x248>)
 8008290:	f7fa ff59 	bl	8003146 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008294:	4b6c      	ldr	r3, [pc, #432]	; (8008448 <HAL_RCC_ClockConfig+0x24c>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 030f 	and.w	r3, r3, #15
 800829c:	683a      	ldr	r2, [r7, #0]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d90c      	bls.n	80082bc <HAL_RCC_ClockConfig+0xc0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082a2:	4b69      	ldr	r3, [pc, #420]	; (8008448 <HAL_RCC_ClockConfig+0x24c>)
 80082a4:	683a      	ldr	r2, [r7, #0]
 80082a6:	b2d2      	uxtb	r2, r2
 80082a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082aa:	4b67      	ldr	r3, [pc, #412]	; (8008448 <HAL_RCC_ClockConfig+0x24c>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 030f 	and.w	r3, r3, #15
 80082b2:	683a      	ldr	r2, [r7, #0]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d001      	beq.n	80082bc <HAL_RCC_ClockConfig+0xc0>
    {
      return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e136      	b.n	800852a <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 0302 	and.w	r3, r3, #2
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d049      	beq.n	800835c <HAL_RCC_ClockConfig+0x160>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0304 	and.w	r3, r3, #4
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d005      	beq.n	80082e0 <HAL_RCC_ClockConfig+0xe4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082d4:	4b5d      	ldr	r3, [pc, #372]	; (800844c <HAL_RCC_ClockConfig+0x250>)
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	4a5c      	ldr	r2, [pc, #368]	; (800844c <HAL_RCC_ClockConfig+0x250>)
 80082da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80082de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0308 	and.w	r3, r3, #8
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d005      	beq.n	80082f8 <HAL_RCC_ClockConfig+0xfc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80082ec:	4b57      	ldr	r3, [pc, #348]	; (800844c <HAL_RCC_ClockConfig+0x250>)
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	4a56      	ldr	r2, [pc, #344]	; (800844c <HAL_RCC_ClockConfig+0x250>)
 80082f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80082f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d024      	beq.n	800834a <HAL_RCC_ClockConfig+0x14e>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	2b80      	cmp	r3, #128	; 0x80
 8008306:	d020      	beq.n	800834a <HAL_RCC_ClockConfig+0x14e>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	2b90      	cmp	r3, #144	; 0x90
 800830e:	d01c      	beq.n	800834a <HAL_RCC_ClockConfig+0x14e>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	2ba0      	cmp	r3, #160	; 0xa0
 8008316:	d018      	beq.n	800834a <HAL_RCC_ClockConfig+0x14e>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	2bb0      	cmp	r3, #176	; 0xb0
 800831e:	d014      	beq.n	800834a <HAL_RCC_ClockConfig+0x14e>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	2bc0      	cmp	r3, #192	; 0xc0
 8008326:	d010      	beq.n	800834a <HAL_RCC_ClockConfig+0x14e>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	2bd0      	cmp	r3, #208	; 0xd0
 800832e:	d00c      	beq.n	800834a <HAL_RCC_ClockConfig+0x14e>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	2be0      	cmp	r3, #224	; 0xe0
 8008336:	d008      	beq.n	800834a <HAL_RCC_ClockConfig+0x14e>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	2bf0      	cmp	r3, #240	; 0xf0
 800833e:	d004      	beq.n	800834a <HAL_RCC_ClockConfig+0x14e>
 8008340:	f240 2175 	movw	r1, #629	; 0x275
 8008344:	483f      	ldr	r0, [pc, #252]	; (8008444 <HAL_RCC_ClockConfig+0x248>)
 8008346:	f7fa fefe 	bl	8003146 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800834a:	4b40      	ldr	r3, [pc, #256]	; (800844c <HAL_RCC_ClockConfig+0x250>)
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	493d      	ldr	r1, [pc, #244]	; (800844c <HAL_RCC_ClockConfig+0x250>)
 8008358:	4313      	orrs	r3, r2
 800835a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 0301 	and.w	r3, r3, #1
 8008364:	2b00      	cmp	r3, #0
 8008366:	d059      	beq.n	800841c <HAL_RCC_ClockConfig+0x220>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d010      	beq.n	8008392 <HAL_RCC_ClockConfig+0x196>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d00c      	beq.n	8008392 <HAL_RCC_ClockConfig+0x196>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	2b02      	cmp	r3, #2
 800837e:	d008      	beq.n	8008392 <HAL_RCC_ClockConfig+0x196>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	2b03      	cmp	r3, #3
 8008386:	d004      	beq.n	8008392 <HAL_RCC_ClockConfig+0x196>
 8008388:	f44f 711f 	mov.w	r1, #636	; 0x27c
 800838c:	482d      	ldr	r0, [pc, #180]	; (8008444 <HAL_RCC_ClockConfig+0x248>)
 800838e:	f7fa feda 	bl	8003146 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d107      	bne.n	80083aa <HAL_RCC_ClockConfig+0x1ae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800839a:	4b2c      	ldr	r3, [pc, #176]	; (800844c <HAL_RCC_ClockConfig+0x250>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d119      	bne.n	80083da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e0bf      	b.n	800852a <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d003      	beq.n	80083ba <HAL_RCC_ClockConfig+0x1be>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80083b6:	2b03      	cmp	r3, #3
 80083b8:	d107      	bne.n	80083ca <HAL_RCC_ClockConfig+0x1ce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083ba:	4b24      	ldr	r3, [pc, #144]	; (800844c <HAL_RCC_ClockConfig+0x250>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d109      	bne.n	80083da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	e0af      	b.n	800852a <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083ca:	4b20      	ldr	r3, [pc, #128]	; (800844c <HAL_RCC_ClockConfig+0x250>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 0302 	and.w	r3, r3, #2
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d101      	bne.n	80083da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e0a7      	b.n	800852a <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80083da:	4b1c      	ldr	r3, [pc, #112]	; (800844c <HAL_RCC_ClockConfig+0x250>)
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f023 0203 	bic.w	r2, r3, #3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	4919      	ldr	r1, [pc, #100]	; (800844c <HAL_RCC_ClockConfig+0x250>)
 80083e8:	4313      	orrs	r3, r2
 80083ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80083ec:	f7fc f804 	bl	80043f8 <HAL_GetTick>
 80083f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083f2:	e00a      	b.n	800840a <HAL_RCC_ClockConfig+0x20e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083f4:	f7fc f800 	bl	80043f8 <HAL_GetTick>
 80083f8:	4602      	mov	r2, r0
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008402:	4293      	cmp	r3, r2
 8008404:	d901      	bls.n	800840a <HAL_RCC_ClockConfig+0x20e>
      {
        return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e08f      	b.n	800852a <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800840a:	4b10      	ldr	r3, [pc, #64]	; (800844c <HAL_RCC_ClockConfig+0x250>)
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	f003 020c 	and.w	r2, r3, #12
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	429a      	cmp	r2, r3
 800841a:	d1eb      	bne.n	80083f4 <HAL_RCC_ClockConfig+0x1f8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800841c:	4b0a      	ldr	r3, [pc, #40]	; (8008448 <HAL_RCC_ClockConfig+0x24c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 030f 	and.w	r3, r3, #15
 8008424:	683a      	ldr	r2, [r7, #0]
 8008426:	429a      	cmp	r2, r3
 8008428:	d212      	bcs.n	8008450 <HAL_RCC_ClockConfig+0x254>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800842a:	4b07      	ldr	r3, [pc, #28]	; (8008448 <HAL_RCC_ClockConfig+0x24c>)
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	b2d2      	uxtb	r2, r2
 8008430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008432:	4b05      	ldr	r3, [pc, #20]	; (8008448 <HAL_RCC_ClockConfig+0x24c>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 030f 	and.w	r3, r3, #15
 800843a:	683a      	ldr	r2, [r7, #0]
 800843c:	429a      	cmp	r2, r3
 800843e:	d007      	beq.n	8008450 <HAL_RCC_ClockConfig+0x254>
    {
      return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e072      	b.n	800852a <HAL_RCC_ClockConfig+0x32e>
 8008444:	0800e1ec 	.word	0x0800e1ec
 8008448:	40023c00 	.word	0x40023c00
 800844c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 0304 	and.w	r3, r3, #4
 8008458:	2b00      	cmp	r3, #0
 800845a:	d025      	beq.n	80084a8 <HAL_RCC_ClockConfig+0x2ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d018      	beq.n	8008496 <HAL_RCC_ClockConfig+0x29a>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800846c:	d013      	beq.n	8008496 <HAL_RCC_ClockConfig+0x29a>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008476:	d00e      	beq.n	8008496 <HAL_RCC_ClockConfig+0x29a>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8008480:	d009      	beq.n	8008496 <HAL_RCC_ClockConfig+0x29a>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800848a:	d004      	beq.n	8008496 <HAL_RCC_ClockConfig+0x29a>
 800848c:	f240 21ba 	movw	r1, #698	; 0x2ba
 8008490:	4828      	ldr	r0, [pc, #160]	; (8008534 <HAL_RCC_ClockConfig+0x338>)
 8008492:	f7fa fe58 	bl	8003146 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008496:	4b28      	ldr	r3, [pc, #160]	; (8008538 <HAL_RCC_ClockConfig+0x33c>)
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	4925      	ldr	r1, [pc, #148]	; (8008538 <HAL_RCC_ClockConfig+0x33c>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0308 	and.w	r3, r3, #8
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d026      	beq.n	8008502 <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d018      	beq.n	80084ee <HAL_RCC_ClockConfig+0x2f2>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084c4:	d013      	beq.n	80084ee <HAL_RCC_ClockConfig+0x2f2>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80084ce:	d00e      	beq.n	80084ee <HAL_RCC_ClockConfig+0x2f2>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80084d8:	d009      	beq.n	80084ee <HAL_RCC_ClockConfig+0x2f2>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80084e2:	d004      	beq.n	80084ee <HAL_RCC_ClockConfig+0x2f2>
 80084e4:	f240 21c1 	movw	r1, #705	; 0x2c1
 80084e8:	4812      	ldr	r0, [pc, #72]	; (8008534 <HAL_RCC_ClockConfig+0x338>)
 80084ea:	f7fa fe2c 	bl	8003146 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80084ee:	4b12      	ldr	r3, [pc, #72]	; (8008538 <HAL_RCC_ClockConfig+0x33c>)
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	00db      	lsls	r3, r3, #3
 80084fc:	490e      	ldr	r1, [pc, #56]	; (8008538 <HAL_RCC_ClockConfig+0x33c>)
 80084fe:	4313      	orrs	r3, r2
 8008500:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008502:	f000 f821 	bl	8008548 <HAL_RCC_GetSysClockFreq>
 8008506:	4602      	mov	r2, r0
 8008508:	4b0b      	ldr	r3, [pc, #44]	; (8008538 <HAL_RCC_ClockConfig+0x33c>)
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	091b      	lsrs	r3, r3, #4
 800850e:	f003 030f 	and.w	r3, r3, #15
 8008512:	490a      	ldr	r1, [pc, #40]	; (800853c <HAL_RCC_ClockConfig+0x340>)
 8008514:	5ccb      	ldrb	r3, [r1, r3]
 8008516:	fa22 f303 	lsr.w	r3, r2, r3
 800851a:	4a09      	ldr	r2, [pc, #36]	; (8008540 <HAL_RCC_ClockConfig+0x344>)
 800851c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800851e:	4b09      	ldr	r3, [pc, #36]	; (8008544 <HAL_RCC_ClockConfig+0x348>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4618      	mov	r0, r3
 8008524:	f7fb ff24 	bl	8004370 <HAL_InitTick>

  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	0800e1ec 	.word	0x0800e1ec
 8008538:	40023800 	.word	0x40023800
 800853c:	0800e33c 	.word	0x0800e33c
 8008540:	200001f8 	.word	0x200001f8
 8008544:	200001fc 	.word	0x200001fc

08008548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008548:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800854c:	b084      	sub	sp, #16
 800854e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008550:	2300      	movs	r3, #0
 8008552:	607b      	str	r3, [r7, #4]
 8008554:	2300      	movs	r3, #0
 8008556:	60fb      	str	r3, [r7, #12]
 8008558:	2300      	movs	r3, #0
 800855a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800855c:	2300      	movs	r3, #0
 800855e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008560:	4b67      	ldr	r3, [pc, #412]	; (8008700 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	f003 030c 	and.w	r3, r3, #12
 8008568:	2b08      	cmp	r3, #8
 800856a:	d00d      	beq.n	8008588 <HAL_RCC_GetSysClockFreq+0x40>
 800856c:	2b08      	cmp	r3, #8
 800856e:	f200 80bd 	bhi.w	80086ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <HAL_RCC_GetSysClockFreq+0x34>
 8008576:	2b04      	cmp	r3, #4
 8008578:	d003      	beq.n	8008582 <HAL_RCC_GetSysClockFreq+0x3a>
 800857a:	e0b7      	b.n	80086ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800857c:	4b61      	ldr	r3, [pc, #388]	; (8008704 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800857e:	60bb      	str	r3, [r7, #8]
       break;
 8008580:	e0b7      	b.n	80086f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008582:	4b60      	ldr	r3, [pc, #384]	; (8008704 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008584:	60bb      	str	r3, [r7, #8]
      break;
 8008586:	e0b4      	b.n	80086f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008588:	4b5d      	ldr	r3, [pc, #372]	; (8008700 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008590:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008592:	4b5b      	ldr	r3, [pc, #364]	; (8008700 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800859a:	2b00      	cmp	r3, #0
 800859c:	d04d      	beq.n	800863a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800859e:	4b58      	ldr	r3, [pc, #352]	; (8008700 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	099b      	lsrs	r3, r3, #6
 80085a4:	461a      	mov	r2, r3
 80085a6:	f04f 0300 	mov.w	r3, #0
 80085aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80085ae:	f04f 0100 	mov.w	r1, #0
 80085b2:	ea02 0800 	and.w	r8, r2, r0
 80085b6:	ea03 0901 	and.w	r9, r3, r1
 80085ba:	4640      	mov	r0, r8
 80085bc:	4649      	mov	r1, r9
 80085be:	f04f 0200 	mov.w	r2, #0
 80085c2:	f04f 0300 	mov.w	r3, #0
 80085c6:	014b      	lsls	r3, r1, #5
 80085c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80085cc:	0142      	lsls	r2, r0, #5
 80085ce:	4610      	mov	r0, r2
 80085d0:	4619      	mov	r1, r3
 80085d2:	ebb0 0008 	subs.w	r0, r0, r8
 80085d6:	eb61 0109 	sbc.w	r1, r1, r9
 80085da:	f04f 0200 	mov.w	r2, #0
 80085de:	f04f 0300 	mov.w	r3, #0
 80085e2:	018b      	lsls	r3, r1, #6
 80085e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80085e8:	0182      	lsls	r2, r0, #6
 80085ea:	1a12      	subs	r2, r2, r0
 80085ec:	eb63 0301 	sbc.w	r3, r3, r1
 80085f0:	f04f 0000 	mov.w	r0, #0
 80085f4:	f04f 0100 	mov.w	r1, #0
 80085f8:	00d9      	lsls	r1, r3, #3
 80085fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80085fe:	00d0      	lsls	r0, r2, #3
 8008600:	4602      	mov	r2, r0
 8008602:	460b      	mov	r3, r1
 8008604:	eb12 0208 	adds.w	r2, r2, r8
 8008608:	eb43 0309 	adc.w	r3, r3, r9
 800860c:	f04f 0000 	mov.w	r0, #0
 8008610:	f04f 0100 	mov.w	r1, #0
 8008614:	0299      	lsls	r1, r3, #10
 8008616:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800861a:	0290      	lsls	r0, r2, #10
 800861c:	4602      	mov	r2, r0
 800861e:	460b      	mov	r3, r1
 8008620:	4610      	mov	r0, r2
 8008622:	4619      	mov	r1, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	461a      	mov	r2, r3
 8008628:	f04f 0300 	mov.w	r3, #0
 800862c:	f7f8 fae4 	bl	8000bf8 <__aeabi_uldivmod>
 8008630:	4602      	mov	r2, r0
 8008632:	460b      	mov	r3, r1
 8008634:	4613      	mov	r3, r2
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	e04a      	b.n	80086d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800863a:	4b31      	ldr	r3, [pc, #196]	; (8008700 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	099b      	lsrs	r3, r3, #6
 8008640:	461a      	mov	r2, r3
 8008642:	f04f 0300 	mov.w	r3, #0
 8008646:	f240 10ff 	movw	r0, #511	; 0x1ff
 800864a:	f04f 0100 	mov.w	r1, #0
 800864e:	ea02 0400 	and.w	r4, r2, r0
 8008652:	ea03 0501 	and.w	r5, r3, r1
 8008656:	4620      	mov	r0, r4
 8008658:	4629      	mov	r1, r5
 800865a:	f04f 0200 	mov.w	r2, #0
 800865e:	f04f 0300 	mov.w	r3, #0
 8008662:	014b      	lsls	r3, r1, #5
 8008664:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008668:	0142      	lsls	r2, r0, #5
 800866a:	4610      	mov	r0, r2
 800866c:	4619      	mov	r1, r3
 800866e:	1b00      	subs	r0, r0, r4
 8008670:	eb61 0105 	sbc.w	r1, r1, r5
 8008674:	f04f 0200 	mov.w	r2, #0
 8008678:	f04f 0300 	mov.w	r3, #0
 800867c:	018b      	lsls	r3, r1, #6
 800867e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008682:	0182      	lsls	r2, r0, #6
 8008684:	1a12      	subs	r2, r2, r0
 8008686:	eb63 0301 	sbc.w	r3, r3, r1
 800868a:	f04f 0000 	mov.w	r0, #0
 800868e:	f04f 0100 	mov.w	r1, #0
 8008692:	00d9      	lsls	r1, r3, #3
 8008694:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008698:	00d0      	lsls	r0, r2, #3
 800869a:	4602      	mov	r2, r0
 800869c:	460b      	mov	r3, r1
 800869e:	1912      	adds	r2, r2, r4
 80086a0:	eb45 0303 	adc.w	r3, r5, r3
 80086a4:	f04f 0000 	mov.w	r0, #0
 80086a8:	f04f 0100 	mov.w	r1, #0
 80086ac:	0299      	lsls	r1, r3, #10
 80086ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80086b2:	0290      	lsls	r0, r2, #10
 80086b4:	4602      	mov	r2, r0
 80086b6:	460b      	mov	r3, r1
 80086b8:	4610      	mov	r0, r2
 80086ba:	4619      	mov	r1, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	461a      	mov	r2, r3
 80086c0:	f04f 0300 	mov.w	r3, #0
 80086c4:	f7f8 fa98 	bl	8000bf8 <__aeabi_uldivmod>
 80086c8:	4602      	mov	r2, r0
 80086ca:	460b      	mov	r3, r1
 80086cc:	4613      	mov	r3, r2
 80086ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80086d0:	4b0b      	ldr	r3, [pc, #44]	; (8008700 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	0c1b      	lsrs	r3, r3, #16
 80086d6:	f003 0303 	and.w	r3, r3, #3
 80086da:	3301      	adds	r3, #1
 80086dc:	005b      	lsls	r3, r3, #1
 80086de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086e8:	60bb      	str	r3, [r7, #8]
      break;
 80086ea:	e002      	b.n	80086f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80086ec:	4b05      	ldr	r3, [pc, #20]	; (8008704 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80086ee:	60bb      	str	r3, [r7, #8]
      break;
 80086f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80086f2:	68bb      	ldr	r3, [r7, #8]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80086fe:	bf00      	nop
 8008700:	40023800 	.word	0x40023800
 8008704:	00f42400 	.word	0x00f42400

08008708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008708:	b480      	push	{r7}
 800870a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800870c:	4b03      	ldr	r3, [pc, #12]	; (800871c <HAL_RCC_GetHCLKFreq+0x14>)
 800870e:	681b      	ldr	r3, [r3, #0]
}
 8008710:	4618      	mov	r0, r3
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	200001f8 	.word	0x200001f8

08008720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008724:	f7ff fff0 	bl	8008708 <HAL_RCC_GetHCLKFreq>
 8008728:	4602      	mov	r2, r0
 800872a:	4b05      	ldr	r3, [pc, #20]	; (8008740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	0a9b      	lsrs	r3, r3, #10
 8008730:	f003 0307 	and.w	r3, r3, #7
 8008734:	4903      	ldr	r1, [pc, #12]	; (8008744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008736:	5ccb      	ldrb	r3, [r1, r3]
 8008738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800873c:	4618      	mov	r0, r3
 800873e:	bd80      	pop	{r7, pc}
 8008740:	40023800 	.word	0x40023800
 8008744:	0800e34c 	.word	0x0800e34c

08008748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800874c:	f7ff ffdc 	bl	8008708 <HAL_RCC_GetHCLKFreq>
 8008750:	4602      	mov	r2, r0
 8008752:	4b05      	ldr	r3, [pc, #20]	; (8008768 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	0b5b      	lsrs	r3, r3, #13
 8008758:	f003 0307 	and.w	r3, r3, #7
 800875c:	4903      	ldr	r1, [pc, #12]	; (800876c <HAL_RCC_GetPCLK2Freq+0x24>)
 800875e:	5ccb      	ldrb	r3, [r1, r3]
 8008760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008764:	4618      	mov	r0, r3
 8008766:	bd80      	pop	{r7, pc}
 8008768:	40023800 	.word	0x40023800
 800876c:	0800e34c 	.word	0x0800e34c

08008770 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d101      	bne.n	8008782 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e118      	b.n	80089b4 <HAL_SPI_Init+0x244>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a8d      	ldr	r2, [pc, #564]	; (80089bc <HAL_SPI_Init+0x24c>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d01d      	beq.n	80087c8 <HAL_SPI_Init+0x58>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a8b      	ldr	r2, [pc, #556]	; (80089c0 <HAL_SPI_Init+0x250>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d018      	beq.n	80087c8 <HAL_SPI_Init+0x58>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a8a      	ldr	r2, [pc, #552]	; (80089c4 <HAL_SPI_Init+0x254>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d013      	beq.n	80087c8 <HAL_SPI_Init+0x58>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a88      	ldr	r2, [pc, #544]	; (80089c8 <HAL_SPI_Init+0x258>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d00e      	beq.n	80087c8 <HAL_SPI_Init+0x58>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a87      	ldr	r2, [pc, #540]	; (80089cc <HAL_SPI_Init+0x25c>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d009      	beq.n	80087c8 <HAL_SPI_Init+0x58>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a85      	ldr	r2, [pc, #532]	; (80089d0 <HAL_SPI_Init+0x260>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d004      	beq.n	80087c8 <HAL_SPI_Init+0x58>
 80087be:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80087c2:	4884      	ldr	r0, [pc, #528]	; (80089d4 <HAL_SPI_Init+0x264>)
 80087c4:	f7fa fcbf 	bl	8003146 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d009      	beq.n	80087e4 <HAL_SPI_Init+0x74>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087d8:	d004      	beq.n	80087e4 <HAL_SPI_Init+0x74>
 80087da:	f240 1143 	movw	r1, #323	; 0x143
 80087de:	487d      	ldr	r0, [pc, #500]	; (80089d4 <HAL_SPI_Init+0x264>)
 80087e0:	f7fa fcb1 	bl	8003146 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00e      	beq.n	800880a <HAL_SPI_Init+0x9a>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087f4:	d009      	beq.n	800880a <HAL_SPI_Init+0x9a>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087fe:	d004      	beq.n	800880a <HAL_SPI_Init+0x9a>
 8008800:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8008804:	4873      	ldr	r0, [pc, #460]	; (80089d4 <HAL_SPI_Init+0x264>)
 8008806:	f7fa fc9e 	bl	8003146 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008812:	d008      	beq.n	8008826 <HAL_SPI_Init+0xb6>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d004      	beq.n	8008826 <HAL_SPI_Init+0xb6>
 800881c:	f240 1145 	movw	r1, #325	; 0x145
 8008820:	486c      	ldr	r0, [pc, #432]	; (80089d4 <HAL_SPI_Init+0x264>)
 8008822:	f7fa fc90 	bl	8003146 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	699b      	ldr	r3, [r3, #24]
 800882a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800882e:	d00d      	beq.n	800884c <HAL_SPI_Init+0xdc>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d009      	beq.n	800884c <HAL_SPI_Init+0xdc>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	699b      	ldr	r3, [r3, #24]
 800883c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008840:	d004      	beq.n	800884c <HAL_SPI_Init+0xdc>
 8008842:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8008846:	4863      	ldr	r0, [pc, #396]	; (80089d4 <HAL_SPI_Init+0x264>)
 8008848:	f7fa fc7d 	bl	8003146 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	69db      	ldr	r3, [r3, #28]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d020      	beq.n	8008896 <HAL_SPI_Init+0x126>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	69db      	ldr	r3, [r3, #28]
 8008858:	2b08      	cmp	r3, #8
 800885a:	d01c      	beq.n	8008896 <HAL_SPI_Init+0x126>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	69db      	ldr	r3, [r3, #28]
 8008860:	2b10      	cmp	r3, #16
 8008862:	d018      	beq.n	8008896 <HAL_SPI_Init+0x126>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	69db      	ldr	r3, [r3, #28]
 8008868:	2b18      	cmp	r3, #24
 800886a:	d014      	beq.n	8008896 <HAL_SPI_Init+0x126>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	69db      	ldr	r3, [r3, #28]
 8008870:	2b20      	cmp	r3, #32
 8008872:	d010      	beq.n	8008896 <HAL_SPI_Init+0x126>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	69db      	ldr	r3, [r3, #28]
 8008878:	2b28      	cmp	r3, #40	; 0x28
 800887a:	d00c      	beq.n	8008896 <HAL_SPI_Init+0x126>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	69db      	ldr	r3, [r3, #28]
 8008880:	2b30      	cmp	r3, #48	; 0x30
 8008882:	d008      	beq.n	8008896 <HAL_SPI_Init+0x126>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	69db      	ldr	r3, [r3, #28]
 8008888:	2b38      	cmp	r3, #56	; 0x38
 800888a:	d004      	beq.n	8008896 <HAL_SPI_Init+0x126>
 800888c:	f240 1147 	movw	r1, #327	; 0x147
 8008890:	4850      	ldr	r0, [pc, #320]	; (80089d4 <HAL_SPI_Init+0x264>)
 8008892:	f7fa fc58 	bl	8003146 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a1b      	ldr	r3, [r3, #32]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d008      	beq.n	80088b0 <HAL_SPI_Init+0x140>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a1b      	ldr	r3, [r3, #32]
 80088a2:	2b80      	cmp	r3, #128	; 0x80
 80088a4:	d004      	beq.n	80088b0 <HAL_SPI_Init+0x140>
 80088a6:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80088aa:	484a      	ldr	r0, [pc, #296]	; (80089d4 <HAL_SPI_Init+0x264>)
 80088ac:	f7fa fc4b 	bl	8003146 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d008      	beq.n	80088ca <HAL_SPI_Init+0x15a>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088bc:	2b10      	cmp	r3, #16
 80088be:	d004      	beq.n	80088ca <HAL_SPI_Init+0x15a>
 80088c0:	f240 1149 	movw	r1, #329	; 0x149
 80088c4:	4843      	ldr	r0, [pc, #268]	; (80089d4 <HAL_SPI_Init+0x264>)
 80088c6:	f7fa fc3e 	bl	8003146 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d119      	bne.n	8008906 <HAL_SPI_Init+0x196>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d008      	beq.n	80088ec <HAL_SPI_Init+0x17c>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d004      	beq.n	80088ec <HAL_SPI_Init+0x17c>
 80088e2:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 80088e6:	483b      	ldr	r0, [pc, #236]	; (80089d4 <HAL_SPI_Init+0x264>)
 80088e8:	f7fa fc2d 	bl	8003146 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	695b      	ldr	r3, [r3, #20]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d008      	beq.n	8008906 <HAL_SPI_Init+0x196>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	695b      	ldr	r3, [r3, #20]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d004      	beq.n	8008906 <HAL_SPI_Init+0x196>
 80088fc:	f240 114d 	movw	r1, #333	; 0x14d
 8008900:	4834      	ldr	r0, [pc, #208]	; (80089d4 <HAL_SPI_Init+0x264>)
 8008902:	f7fa fc20 	bl	8003146 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008912:	b2db      	uxtb	r3, r3
 8008914:	2b00      	cmp	r3, #0
 8008916:	d106      	bne.n	8008926 <HAL_SPI_Init+0x1b6>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f7fa ffef 	bl	8003904 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2202      	movs	r2, #2
 800892a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800893c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685a      	ldr	r2, [r3, #4]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	431a      	orrs	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	431a      	orrs	r2, r3
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	431a      	orrs	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	695b      	ldr	r3, [r3, #20]
 8008958:	431a      	orrs	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	699b      	ldr	r3, [r3, #24]
 800895e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008962:	431a      	orrs	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	69db      	ldr	r3, [r3, #28]
 8008968:	431a      	orrs	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a1b      	ldr	r3, [r3, #32]
 800896e:	ea42 0103 	orr.w	r1, r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	430a      	orrs	r2, r1
 800897c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	0c1b      	lsrs	r3, r3, #16
 8008984:	f003 0104 	and.w	r1, r3, #4
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	430a      	orrs	r2, r1
 8008992:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	69da      	ldr	r2, [r3, #28]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	40013000 	.word	0x40013000
 80089c0:	40003800 	.word	0x40003800
 80089c4:	40003c00 	.word	0x40003c00
 80089c8:	40013400 	.word	0x40013400
 80089cc:	40015000 	.word	0x40015000
 80089d0:	40015400 	.word	0x40015400
 80089d4:	0800e224 	.word	0x0800e224

080089d8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b088      	sub	sp, #32
 80089dc:	af02      	add	r7, sp, #8
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	603b      	str	r3, [r7, #0]
 80089e4:	4613      	mov	r3, r2
 80089e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80089e8:	2300      	movs	r3, #0
 80089ea:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089f4:	d112      	bne.n	8008a1c <HAL_SPI_Receive+0x44>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10e      	bne.n	8008a1c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2204      	movs	r2, #4
 8008a02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008a06:	88fa      	ldrh	r2, [r7, #6]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	68ba      	ldr	r2, [r7, #8]
 8008a10:	68b9      	ldr	r1, [r7, #8]
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f000 f8ea 	bl	8008bec <HAL_SPI_TransmitReceive>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	e0e2      	b.n	8008be2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d101      	bne.n	8008a2a <HAL_SPI_Receive+0x52>
 8008a26:	2302      	movs	r3, #2
 8008a28:	e0db      	b.n	8008be2 <HAL_SPI_Receive+0x20a>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a32:	f7fb fce1 	bl	80043f8 <HAL_GetTick>
 8008a36:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d002      	beq.n	8008a4a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008a44:	2302      	movs	r3, #2
 8008a46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008a48:	e0c2      	b.n	8008bd0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d002      	beq.n	8008a56 <HAL_SPI_Receive+0x7e>
 8008a50:	88fb      	ldrh	r3, [r7, #6]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d102      	bne.n	8008a5c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008a5a:	e0b9      	b.n	8008bd0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2204      	movs	r2, #4
 8008a60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2200      	movs	r2, #0
 8008a68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	88fa      	ldrh	r2, [r7, #6]
 8008a74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	88fa      	ldrh	r2, [r7, #6]
 8008a7a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2200      	movs	r2, #0
 8008a86:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2200      	movs	r2, #0
 8008a92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2200      	movs	r2, #0
 8008a98:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008aa2:	d107      	bne.n	8008ab4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008ab2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008abe:	2b40      	cmp	r3, #64	; 0x40
 8008ac0:	d007      	beq.n	8008ad2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ad0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d162      	bne.n	8008ba0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008ada:	e02e      	b.n	8008b3a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	f003 0301 	and.w	r3, r3, #1
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d115      	bne.n	8008b16 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f103 020c 	add.w	r2, r3, #12
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af6:	7812      	ldrb	r2, [r2, #0]
 8008af8:	b2d2      	uxtb	r2, r2
 8008afa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b00:	1c5a      	adds	r2, r3, #1
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b14:	e011      	b.n	8008b3a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b16:	f7fb fc6f 	bl	80043f8 <HAL_GetTick>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	683a      	ldr	r2, [r7, #0]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d803      	bhi.n	8008b2e <HAL_SPI_Receive+0x156>
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b2c:	d102      	bne.n	8008b34 <HAL_SPI_Receive+0x15c>
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d102      	bne.n	8008b3a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8008b34:	2303      	movs	r3, #3
 8008b36:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008b38:	e04a      	b.n	8008bd0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1cb      	bne.n	8008adc <HAL_SPI_Receive+0x104>
 8008b44:	e031      	b.n	8008baa <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	f003 0301 	and.w	r3, r3, #1
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d113      	bne.n	8008b7c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68da      	ldr	r2, [r3, #12]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5e:	b292      	uxth	r2, r2
 8008b60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b66:	1c9a      	adds	r2, r3, #2
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	3b01      	subs	r3, #1
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b7a:	e011      	b.n	8008ba0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b7c:	f7fb fc3c 	bl	80043f8 <HAL_GetTick>
 8008b80:	4602      	mov	r2, r0
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d803      	bhi.n	8008b94 <HAL_SPI_Receive+0x1bc>
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b92:	d102      	bne.n	8008b9a <HAL_SPI_Receive+0x1c2>
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d102      	bne.n	8008ba0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008b9e:	e017      	b.n	8008bd0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1cd      	bne.n	8008b46 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008baa:	693a      	ldr	r2, [r7, #16]
 8008bac:	6839      	ldr	r1, [r7, #0]
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f000 fa34 	bl	800901c <SPI_EndRxTransaction>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d002      	beq.n	8008bc0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2220      	movs	r2, #32
 8008bbe:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d002      	beq.n	8008bce <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	75fb      	strb	r3, [r7, #23]
 8008bcc:	e000      	b.n	8008bd0 <HAL_SPI_Receive+0x1f8>
  }

error :
 8008bce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3718      	adds	r7, #24
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
	...

08008bec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b08c      	sub	sp, #48	; 0x30
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]
 8008bf8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d004      	beq.n	8008c16 <HAL_SPI_TransmitReceive+0x2a>
 8008c0c:	f240 415a 	movw	r1, #1114	; 0x45a
 8008c10:	4884      	ldr	r0, [pc, #528]	; (8008e24 <HAL_SPI_TransmitReceive+0x238>)
 8008c12:	f7fa fa98 	bl	8003146 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d101      	bne.n	8008c24 <HAL_SPI_TransmitReceive+0x38>
 8008c20:	2302      	movs	r3, #2
 8008c22:	e18d      	b.n	8008f40 <HAL_SPI_TransmitReceive+0x354>
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c2c:	f7fb fbe4 	bl	80043f8 <HAL_GetTick>
 8008c30:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008c42:	887b      	ldrh	r3, [r7, #2]
 8008c44:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d00f      	beq.n	8008c6e <HAL_SPI_TransmitReceive+0x82>
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c54:	d107      	bne.n	8008c66 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d103      	bne.n	8008c66 <HAL_SPI_TransmitReceive+0x7a>
 8008c5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c62:	2b04      	cmp	r3, #4
 8008c64:	d003      	beq.n	8008c6e <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8008c66:	2302      	movs	r3, #2
 8008c68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008c6c:	e15e      	b.n	8008f2c <HAL_SPI_TransmitReceive+0x340>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d005      	beq.n	8008c80 <HAL_SPI_TransmitReceive+0x94>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d002      	beq.n	8008c80 <HAL_SPI_TransmitReceive+0x94>
 8008c7a:	887b      	ldrh	r3, [r7, #2]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d103      	bne.n	8008c88 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008c86:	e151      	b.n	8008f2c <HAL_SPI_TransmitReceive+0x340>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	2b04      	cmp	r3, #4
 8008c92:	d003      	beq.n	8008c9c <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2205      	movs	r2, #5
 8008c98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	887a      	ldrh	r2, [r7, #2]
 8008cac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	887a      	ldrh	r2, [r7, #2]
 8008cb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	887a      	ldrh	r2, [r7, #2]
 8008cbe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	887a      	ldrh	r2, [r7, #2]
 8008cc4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cdc:	2b40      	cmp	r3, #64	; 0x40
 8008cde:	d007      	beq.n	8008cf0 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cf8:	d178      	bne.n	8008dec <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d002      	beq.n	8008d08 <HAL_SPI_TransmitReceive+0x11c>
 8008d02:	8b7b      	ldrh	r3, [r7, #26]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d166      	bne.n	8008dd6 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d0c:	881a      	ldrh	r2, [r3, #0]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d18:	1c9a      	adds	r2, r3, #2
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	3b01      	subs	r3, #1
 8008d26:	b29a      	uxth	r2, r3
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d2c:	e053      	b.n	8008dd6 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	f003 0302 	and.w	r3, r3, #2
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d11b      	bne.n	8008d74 <HAL_SPI_TransmitReceive+0x188>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d016      	beq.n	8008d74 <HAL_SPI_TransmitReceive+0x188>
 8008d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d113      	bne.n	8008d74 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d50:	881a      	ldrh	r2, [r3, #0]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d5c:	1c9a      	adds	r2, r3, #2
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d70:	2300      	movs	r3, #0
 8008d72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	f003 0301 	and.w	r3, r3, #1
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d119      	bne.n	8008db6 <HAL_SPI_TransmitReceive+0x1ca>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d014      	beq.n	8008db6 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68da      	ldr	r2, [r3, #12]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d96:	b292      	uxth	r2, r2
 8008d98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9e:	1c9a      	adds	r2, r3, #2
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	3b01      	subs	r3, #1
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008db2:	2301      	movs	r3, #1
 8008db4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008db6:	f7fb fb1f 	bl	80043f8 <HAL_GetTick>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d807      	bhi.n	8008dd6 <HAL_SPI_TransmitReceive+0x1ea>
 8008dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dcc:	d003      	beq.n	8008dd6 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008dd4:	e0aa      	b.n	8008f2c <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d1a6      	bne.n	8008d2e <HAL_SPI_TransmitReceive+0x142>
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1a1      	bne.n	8008d2e <HAL_SPI_TransmitReceive+0x142>
 8008dea:	e07f      	b.n	8008eec <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d002      	beq.n	8008dfa <HAL_SPI_TransmitReceive+0x20e>
 8008df4:	8b7b      	ldrh	r3, [r7, #26]
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	d16e      	bne.n	8008ed8 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	330c      	adds	r3, #12
 8008e04:	7812      	ldrb	r2, [r2, #0]
 8008e06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e0c:	1c5a      	adds	r2, r3, #1
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	3b01      	subs	r3, #1
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e20:	e05a      	b.n	8008ed8 <HAL_SPI_TransmitReceive+0x2ec>
 8008e22:	bf00      	nop
 8008e24:	0800e224 	.word	0x0800e224
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	f003 0302 	and.w	r3, r3, #2
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d11c      	bne.n	8008e70 <HAL_SPI_TransmitReceive+0x284>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d017      	beq.n	8008e70 <HAL_SPI_TransmitReceive+0x284>
 8008e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d114      	bne.n	8008e70 <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	330c      	adds	r3, #12
 8008e50:	7812      	ldrb	r2, [r2, #0]
 8008e52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e58:	1c5a      	adds	r2, r3, #1
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	3b01      	subs	r3, #1
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	f003 0301 	and.w	r3, r3, #1
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d119      	bne.n	8008eb2 <HAL_SPI_TransmitReceive+0x2c6>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d014      	beq.n	8008eb2 <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	68da      	ldr	r2, [r3, #12]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e92:	b2d2      	uxtb	r2, r2
 8008e94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9a:	1c5a      	adds	r2, r3, #1
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008eb2:	f7fb faa1 	bl	80043f8 <HAL_GetTick>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eba:	1ad3      	subs	r3, r2, r3
 8008ebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d803      	bhi.n	8008eca <HAL_SPI_TransmitReceive+0x2de>
 8008ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ec8:	d102      	bne.n	8008ed0 <HAL_SPI_TransmitReceive+0x2e4>
 8008eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d103      	bne.n	8008ed8 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008ed6:	e029      	b.n	8008f2c <HAL_SPI_TransmitReceive+0x340>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1a2      	bne.n	8008e28 <HAL_SPI_TransmitReceive+0x23c>
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d19d      	bne.n	8008e28 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f000 f8f9 	bl	80090e8 <SPI_EndRxTxTransaction>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d006      	beq.n	8008f0a <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2220      	movs	r2, #32
 8008f06:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008f08:	e010      	b.n	8008f2c <HAL_SPI_TransmitReceive+0x340>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d10b      	bne.n	8008f2a <HAL_SPI_TransmitReceive+0x33e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f12:	2300      	movs	r3, #0
 8008f14:	617b      	str	r3, [r7, #20]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	617b      	str	r3, [r7, #20]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	617b      	str	r3, [r7, #20]
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	e000      	b.n	8008f2c <HAL_SPI_TransmitReceive+0x340>
  }

error :
 8008f2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008f3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3730      	adds	r7, #48	; 0x30
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	603b      	str	r3, [r7, #0]
 8008f54:	4613      	mov	r3, r2
 8008f56:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f58:	e04c      	b.n	8008ff4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f60:	d048      	beq.n	8008ff4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008f62:	f7fb fa49 	bl	80043f8 <HAL_GetTick>
 8008f66:	4602      	mov	r2, r0
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	1ad3      	subs	r3, r2, r3
 8008f6c:	683a      	ldr	r2, [r7, #0]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d902      	bls.n	8008f78 <SPI_WaitFlagStateUntilTimeout+0x30>
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d13d      	bne.n	8008ff4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	685a      	ldr	r2, [r3, #4]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008f86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f90:	d111      	bne.n	8008fb6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f9a:	d004      	beq.n	8008fa6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fa4:	d107      	bne.n	8008fb6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fb4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fbe:	d10f      	bne.n	8008fe0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008fce:	601a      	str	r2, [r3, #0]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008fde:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e00f      	b.n	8009014 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	689a      	ldr	r2, [r3, #8]
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	68ba      	ldr	r2, [r7, #8]
 8009000:	429a      	cmp	r2, r3
 8009002:	bf0c      	ite	eq
 8009004:	2301      	moveq	r3, #1
 8009006:	2300      	movne	r3, #0
 8009008:	b2db      	uxtb	r3, r3
 800900a:	461a      	mov	r2, r3
 800900c:	79fb      	ldrb	r3, [r7, #7]
 800900e:	429a      	cmp	r2, r3
 8009010:	d1a3      	bne.n	8008f5a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af02      	add	r7, sp, #8
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009030:	d111      	bne.n	8009056 <SPI_EndRxTransaction+0x3a>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800903a:	d004      	beq.n	8009046 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009044:	d107      	bne.n	8009056 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009054:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800905e:	d12a      	bne.n	80090b6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009068:	d012      	beq.n	8009090 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	2200      	movs	r2, #0
 8009072:	2180      	movs	r1, #128	; 0x80
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f7ff ff67 	bl	8008f48 <SPI_WaitFlagStateUntilTimeout>
 800907a:	4603      	mov	r3, r0
 800907c:	2b00      	cmp	r3, #0
 800907e:	d02d      	beq.n	80090dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009084:	f043 0220 	orr.w	r2, r3, #32
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800908c:	2303      	movs	r3, #3
 800908e:	e026      	b.n	80090de <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	9300      	str	r3, [sp, #0]
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	2200      	movs	r2, #0
 8009098:	2101      	movs	r1, #1
 800909a:	68f8      	ldr	r0, [r7, #12]
 800909c:	f7ff ff54 	bl	8008f48 <SPI_WaitFlagStateUntilTimeout>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d01a      	beq.n	80090dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090aa:	f043 0220 	orr.w	r2, r3, #32
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80090b2:	2303      	movs	r3, #3
 80090b4:	e013      	b.n	80090de <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	2200      	movs	r2, #0
 80090be:	2101      	movs	r1, #1
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f7ff ff41 	bl	8008f48 <SPI_WaitFlagStateUntilTimeout>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d007      	beq.n	80090dc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090d0:	f043 0220 	orr.w	r2, r3, #32
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80090d8:	2303      	movs	r3, #3
 80090da:	e000      	b.n	80090de <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
	...

080090e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b088      	sub	sp, #32
 80090ec:	af02      	add	r7, sp, #8
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80090f4:	4b1b      	ldr	r3, [pc, #108]	; (8009164 <SPI_EndRxTxTransaction+0x7c>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a1b      	ldr	r2, [pc, #108]	; (8009168 <SPI_EndRxTxTransaction+0x80>)
 80090fa:	fba2 2303 	umull	r2, r3, r2, r3
 80090fe:	0d5b      	lsrs	r3, r3, #21
 8009100:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009104:	fb02 f303 	mul.w	r3, r2, r3
 8009108:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009112:	d112      	bne.n	800913a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	2200      	movs	r2, #0
 800911c:	2180      	movs	r1, #128	; 0x80
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	f7ff ff12 	bl	8008f48 <SPI_WaitFlagStateUntilTimeout>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d016      	beq.n	8009158 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800912e:	f043 0220 	orr.w	r2, r3, #32
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e00f      	b.n	800915a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00a      	beq.n	8009156 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	3b01      	subs	r3, #1
 8009144:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009150:	2b80      	cmp	r3, #128	; 0x80
 8009152:	d0f2      	beq.n	800913a <SPI_EndRxTxTransaction+0x52>
 8009154:	e000      	b.n	8009158 <SPI_EndRxTxTransaction+0x70>
        break;
 8009156:	bf00      	nop
  }

  return HAL_OK;
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3718      	adds	r7, #24
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	200001f8 	.word	0x200001f8
 8009168:	165e9f81 	.word	0x165e9f81

0800916c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d101      	bne.n	800917e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e0a1      	b.n	80092c2 <HAL_TIM_Base_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a52      	ldr	r2, [pc, #328]	; (80092cc <HAL_TIM_Base_Init+0x160>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d045      	beq.n	8009214 <HAL_TIM_Base_Init+0xa8>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009190:	d040      	beq.n	8009214 <HAL_TIM_Base_Init+0xa8>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a4e      	ldr	r2, [pc, #312]	; (80092d0 <HAL_TIM_Base_Init+0x164>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d03b      	beq.n	8009214 <HAL_TIM_Base_Init+0xa8>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a4c      	ldr	r2, [pc, #304]	; (80092d4 <HAL_TIM_Base_Init+0x168>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d036      	beq.n	8009214 <HAL_TIM_Base_Init+0xa8>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a4b      	ldr	r2, [pc, #300]	; (80092d8 <HAL_TIM_Base_Init+0x16c>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d031      	beq.n	8009214 <HAL_TIM_Base_Init+0xa8>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a49      	ldr	r2, [pc, #292]	; (80092dc <HAL_TIM_Base_Init+0x170>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d02c      	beq.n	8009214 <HAL_TIM_Base_Init+0xa8>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a48      	ldr	r2, [pc, #288]	; (80092e0 <HAL_TIM_Base_Init+0x174>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d027      	beq.n	8009214 <HAL_TIM_Base_Init+0xa8>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a46      	ldr	r2, [pc, #280]	; (80092e4 <HAL_TIM_Base_Init+0x178>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d022      	beq.n	8009214 <HAL_TIM_Base_Init+0xa8>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a45      	ldr	r2, [pc, #276]	; (80092e8 <HAL_TIM_Base_Init+0x17c>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d01d      	beq.n	8009214 <HAL_TIM_Base_Init+0xa8>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a43      	ldr	r2, [pc, #268]	; (80092ec <HAL_TIM_Base_Init+0x180>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d018      	beq.n	8009214 <HAL_TIM_Base_Init+0xa8>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a42      	ldr	r2, [pc, #264]	; (80092f0 <HAL_TIM_Base_Init+0x184>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d013      	beq.n	8009214 <HAL_TIM_Base_Init+0xa8>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a40      	ldr	r2, [pc, #256]	; (80092f4 <HAL_TIM_Base_Init+0x188>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d00e      	beq.n	8009214 <HAL_TIM_Base_Init+0xa8>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a3f      	ldr	r2, [pc, #252]	; (80092f8 <HAL_TIM_Base_Init+0x18c>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d009      	beq.n	8009214 <HAL_TIM_Base_Init+0xa8>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a3d      	ldr	r2, [pc, #244]	; (80092fc <HAL_TIM_Base_Init+0x190>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d004      	beq.n	8009214 <HAL_TIM_Base_Init+0xa8>
 800920a:	f44f 7189 	mov.w	r1, #274	; 0x112
 800920e:	483c      	ldr	r0, [pc, #240]	; (8009300 <HAL_TIM_Base_Init+0x194>)
 8009210:	f7f9 ff99 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d014      	beq.n	8009246 <HAL_TIM_Base_Init+0xda>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	2b10      	cmp	r3, #16
 8009222:	d010      	beq.n	8009246 <HAL_TIM_Base_Init+0xda>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	2b20      	cmp	r3, #32
 800922a:	d00c      	beq.n	8009246 <HAL_TIM_Base_Init+0xda>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	2b40      	cmp	r3, #64	; 0x40
 8009232:	d008      	beq.n	8009246 <HAL_TIM_Base_Init+0xda>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	2b60      	cmp	r3, #96	; 0x60
 800923a:	d004      	beq.n	8009246 <HAL_TIM_Base_Init+0xda>
 800923c:	f240 1113 	movw	r1, #275	; 0x113
 8009240:	482f      	ldr	r0, [pc, #188]	; (8009300 <HAL_TIM_Base_Init+0x194>)
 8009242:	f7f9 ff80 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00e      	beq.n	800926c <HAL_TIM_Base_Init+0x100>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009256:	d009      	beq.n	800926c <HAL_TIM_Base_Init+0x100>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	691b      	ldr	r3, [r3, #16]
 800925c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009260:	d004      	beq.n	800926c <HAL_TIM_Base_Init+0x100>
 8009262:	f44f 718a 	mov.w	r1, #276	; 0x114
 8009266:	4826      	ldr	r0, [pc, #152]	; (8009300 <HAL_TIM_Base_Init+0x194>)
 8009268:	f7f9 ff6d 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	699b      	ldr	r3, [r3, #24]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d008      	beq.n	8009286 <HAL_TIM_Base_Init+0x11a>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	699b      	ldr	r3, [r3, #24]
 8009278:	2b80      	cmp	r3, #128	; 0x80
 800927a:	d004      	beq.n	8009286 <HAL_TIM_Base_Init+0x11a>
 800927c:	f240 1115 	movw	r1, #277	; 0x115
 8009280:	481f      	ldr	r0, [pc, #124]	; (8009300 <HAL_TIM_Base_Init+0x194>)
 8009282:	f7f9 ff60 	bl	8003146 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800928c:	b2db      	uxtb	r3, r3
 800928e:	2b00      	cmp	r3, #0
 8009290:	d106      	bne.n	80092a0 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f7fa fe3c 	bl	8003f18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2202      	movs	r2, #2
 80092a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	3304      	adds	r3, #4
 80092b0:	4619      	mov	r1, r3
 80092b2:	4610      	mov	r0, r2
 80092b4:	f001 fa62 	bl	800a77c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	40010000 	.word	0x40010000
 80092d0:	40000400 	.word	0x40000400
 80092d4:	40000800 	.word	0x40000800
 80092d8:	40000c00 	.word	0x40000c00
 80092dc:	40001000 	.word	0x40001000
 80092e0:	40001400 	.word	0x40001400
 80092e4:	40010400 	.word	0x40010400
 80092e8:	40014000 	.word	0x40014000
 80092ec:	40014400 	.word	0x40014400
 80092f0:	40014800 	.word	0x40014800
 80092f4:	40001800 	.word	0x40001800
 80092f8:	40001c00 	.word	0x40001c00
 80092fc:	40002000 	.word	0x40002000
 8009300:	0800e25c 	.word	0x0800e25c

08009304 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a33      	ldr	r2, [pc, #204]	; (80093e0 <HAL_TIM_Base_Start+0xdc>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d045      	beq.n	80093a2 <HAL_TIM_Base_Start+0x9e>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800931e:	d040      	beq.n	80093a2 <HAL_TIM_Base_Start+0x9e>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a2f      	ldr	r2, [pc, #188]	; (80093e4 <HAL_TIM_Base_Start+0xe0>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d03b      	beq.n	80093a2 <HAL_TIM_Base_Start+0x9e>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a2e      	ldr	r2, [pc, #184]	; (80093e8 <HAL_TIM_Base_Start+0xe4>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d036      	beq.n	80093a2 <HAL_TIM_Base_Start+0x9e>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a2c      	ldr	r2, [pc, #176]	; (80093ec <HAL_TIM_Base_Start+0xe8>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d031      	beq.n	80093a2 <HAL_TIM_Base_Start+0x9e>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a2b      	ldr	r2, [pc, #172]	; (80093f0 <HAL_TIM_Base_Start+0xec>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d02c      	beq.n	80093a2 <HAL_TIM_Base_Start+0x9e>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a29      	ldr	r2, [pc, #164]	; (80093f4 <HAL_TIM_Base_Start+0xf0>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d027      	beq.n	80093a2 <HAL_TIM_Base_Start+0x9e>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a28      	ldr	r2, [pc, #160]	; (80093f8 <HAL_TIM_Base_Start+0xf4>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d022      	beq.n	80093a2 <HAL_TIM_Base_Start+0x9e>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a26      	ldr	r2, [pc, #152]	; (80093fc <HAL_TIM_Base_Start+0xf8>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d01d      	beq.n	80093a2 <HAL_TIM_Base_Start+0x9e>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a25      	ldr	r2, [pc, #148]	; (8009400 <HAL_TIM_Base_Start+0xfc>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d018      	beq.n	80093a2 <HAL_TIM_Base_Start+0x9e>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a23      	ldr	r2, [pc, #140]	; (8009404 <HAL_TIM_Base_Start+0x100>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d013      	beq.n	80093a2 <HAL_TIM_Base_Start+0x9e>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a22      	ldr	r2, [pc, #136]	; (8009408 <HAL_TIM_Base_Start+0x104>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d00e      	beq.n	80093a2 <HAL_TIM_Base_Start+0x9e>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a20      	ldr	r2, [pc, #128]	; (800940c <HAL_TIM_Base_Start+0x108>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d009      	beq.n	80093a2 <HAL_TIM_Base_Start+0x9e>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a1f      	ldr	r2, [pc, #124]	; (8009410 <HAL_TIM_Base_Start+0x10c>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d004      	beq.n	80093a2 <HAL_TIM_Base_Start+0x9e>
 8009398:	f240 1185 	movw	r1, #389	; 0x185
 800939c:	481d      	ldr	r0, [pc, #116]	; (8009414 <HAL_TIM_Base_Start+0x110>)
 800939e:	f7f9 fed2 	bl	8003146 <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2202      	movs	r2, #2
 80093a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	f003 0307 	and.w	r3, r3, #7
 80093b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2b06      	cmp	r3, #6
 80093ba:	d007      	beq.n	80093cc <HAL_TIM_Base_Start+0xc8>
  {
    __HAL_TIM_ENABLE(htim);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f042 0201 	orr.w	r2, r2, #1
 80093ca:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	40010000 	.word	0x40010000
 80093e4:	40000400 	.word	0x40000400
 80093e8:	40000800 	.word	0x40000800
 80093ec:	40000c00 	.word	0x40000c00
 80093f0:	40001000 	.word	0x40001000
 80093f4:	40001400 	.word	0x40001400
 80093f8:	40010400 	.word	0x40010400
 80093fc:	40014000 	.word	0x40014000
 8009400:	40014400 	.word	0x40014400
 8009404:	40014800 	.word	0x40014800
 8009408:	40001800 	.word	0x40001800
 800940c:	40001c00 	.word	0x40001c00
 8009410:	40002000 	.word	0x40002000
 8009414:	0800e25c 	.word	0x0800e25c

08009418 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d101      	bne.n	800942a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	e0a1      	b.n	800956e <HAL_TIM_PWM_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a52      	ldr	r2, [pc, #328]	; (8009578 <HAL_TIM_PWM_Init+0x160>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d045      	beq.n	80094c0 <HAL_TIM_PWM_Init+0xa8>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800943c:	d040      	beq.n	80094c0 <HAL_TIM_PWM_Init+0xa8>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a4e      	ldr	r2, [pc, #312]	; (800957c <HAL_TIM_PWM_Init+0x164>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d03b      	beq.n	80094c0 <HAL_TIM_PWM_Init+0xa8>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a4c      	ldr	r2, [pc, #304]	; (8009580 <HAL_TIM_PWM_Init+0x168>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d036      	beq.n	80094c0 <HAL_TIM_PWM_Init+0xa8>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a4b      	ldr	r2, [pc, #300]	; (8009584 <HAL_TIM_PWM_Init+0x16c>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d031      	beq.n	80094c0 <HAL_TIM_PWM_Init+0xa8>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a49      	ldr	r2, [pc, #292]	; (8009588 <HAL_TIM_PWM_Init+0x170>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d02c      	beq.n	80094c0 <HAL_TIM_PWM_Init+0xa8>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a48      	ldr	r2, [pc, #288]	; (800958c <HAL_TIM_PWM_Init+0x174>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d027      	beq.n	80094c0 <HAL_TIM_PWM_Init+0xa8>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a46      	ldr	r2, [pc, #280]	; (8009590 <HAL_TIM_PWM_Init+0x178>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d022      	beq.n	80094c0 <HAL_TIM_PWM_Init+0xa8>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a45      	ldr	r2, [pc, #276]	; (8009594 <HAL_TIM_PWM_Init+0x17c>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d01d      	beq.n	80094c0 <HAL_TIM_PWM_Init+0xa8>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a43      	ldr	r2, [pc, #268]	; (8009598 <HAL_TIM_PWM_Init+0x180>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d018      	beq.n	80094c0 <HAL_TIM_PWM_Init+0xa8>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a42      	ldr	r2, [pc, #264]	; (800959c <HAL_TIM_PWM_Init+0x184>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d013      	beq.n	80094c0 <HAL_TIM_PWM_Init+0xa8>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a40      	ldr	r2, [pc, #256]	; (80095a0 <HAL_TIM_PWM_Init+0x188>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d00e      	beq.n	80094c0 <HAL_TIM_PWM_Init+0xa8>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a3f      	ldr	r2, [pc, #252]	; (80095a4 <HAL_TIM_PWM_Init+0x18c>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d009      	beq.n	80094c0 <HAL_TIM_PWM_Init+0xa8>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a3d      	ldr	r2, [pc, #244]	; (80095a8 <HAL_TIM_PWM_Init+0x190>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d004      	beq.n	80094c0 <HAL_TIM_PWM_Init+0xa8>
 80094b6:	f240 419b 	movw	r1, #1179	; 0x49b
 80094ba:	483c      	ldr	r0, [pc, #240]	; (80095ac <HAL_TIM_PWM_Init+0x194>)
 80094bc:	f7f9 fe43 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d014      	beq.n	80094f2 <HAL_TIM_PWM_Init+0xda>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	2b10      	cmp	r3, #16
 80094ce:	d010      	beq.n	80094f2 <HAL_TIM_PWM_Init+0xda>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	2b20      	cmp	r3, #32
 80094d6:	d00c      	beq.n	80094f2 <HAL_TIM_PWM_Init+0xda>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	2b40      	cmp	r3, #64	; 0x40
 80094de:	d008      	beq.n	80094f2 <HAL_TIM_PWM_Init+0xda>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	2b60      	cmp	r3, #96	; 0x60
 80094e6:	d004      	beq.n	80094f2 <HAL_TIM_PWM_Init+0xda>
 80094e8:	f240 419c 	movw	r1, #1180	; 0x49c
 80094ec:	482f      	ldr	r0, [pc, #188]	; (80095ac <HAL_TIM_PWM_Init+0x194>)
 80094ee:	f7f9 fe2a 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00e      	beq.n	8009518 <HAL_TIM_PWM_Init+0x100>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009502:	d009      	beq.n	8009518 <HAL_TIM_PWM_Init+0x100>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800950c:	d004      	beq.n	8009518 <HAL_TIM_PWM_Init+0x100>
 800950e:	f240 419d 	movw	r1, #1181	; 0x49d
 8009512:	4826      	ldr	r0, [pc, #152]	; (80095ac <HAL_TIM_PWM_Init+0x194>)
 8009514:	f7f9 fe17 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	699b      	ldr	r3, [r3, #24]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d008      	beq.n	8009532 <HAL_TIM_PWM_Init+0x11a>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	699b      	ldr	r3, [r3, #24]
 8009524:	2b80      	cmp	r3, #128	; 0x80
 8009526:	d004      	beq.n	8009532 <HAL_TIM_PWM_Init+0x11a>
 8009528:	f240 419e 	movw	r1, #1182	; 0x49e
 800952c:	481f      	ldr	r0, [pc, #124]	; (80095ac <HAL_TIM_PWM_Init+0x194>)
 800952e:	f7f9 fe0a 	bl	8003146 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009538:	b2db      	uxtb	r3, r3
 800953a:	2b00      	cmp	r3, #0
 800953c:	d106      	bne.n	800954c <HAL_TIM_PWM_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f832 	bl	80095b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2202      	movs	r2, #2
 8009550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	3304      	adds	r3, #4
 800955c:	4619      	mov	r1, r3
 800955e:	4610      	mov	r0, r2
 8009560:	f001 f90c 	bl	800a77c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3708      	adds	r7, #8
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	40010000 	.word	0x40010000
 800957c:	40000400 	.word	0x40000400
 8009580:	40000800 	.word	0x40000800
 8009584:	40000c00 	.word	0x40000c00
 8009588:	40001000 	.word	0x40001000
 800958c:	40001400 	.word	0x40001400
 8009590:	40010400 	.word	0x40010400
 8009594:	40014000 	.word	0x40014000
 8009598:	40014400 	.word	0x40014400
 800959c:	40014800 	.word	0x40014800
 80095a0:	40001800 	.word	0x40001800
 80095a4:	40001c00 	.word	0x40001c00
 80095a8:	40002000 	.word	0x40002000
 80095ac:	0800e25c 	.word	0x0800e25c

080095b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a6d      	ldr	r2, [pc, #436]	; (8009788 <HAL_TIM_PWM_Start+0x1c4>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d10f      	bne.n	80095f8 <HAL_TIM_PWM_Start+0x34>
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f000 809f 	beq.w	800971e <HAL_TIM_PWM_Start+0x15a>
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	2b04      	cmp	r3, #4
 80095e4:	f000 809b 	beq.w	800971e <HAL_TIM_PWM_Start+0x15a>
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	2b08      	cmp	r3, #8
 80095ec:	f000 8097 	beq.w	800971e <HAL_TIM_PWM_Start+0x15a>
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	2b0c      	cmp	r3, #12
 80095f4:	f000 8093 	beq.w	800971e <HAL_TIM_PWM_Start+0x15a>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009600:	d10e      	bne.n	8009620 <HAL_TIM_PWM_Start+0x5c>
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	f000 808a 	beq.w	800971e <HAL_TIM_PWM_Start+0x15a>
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	2b04      	cmp	r3, #4
 800960e:	f000 8086 	beq.w	800971e <HAL_TIM_PWM_Start+0x15a>
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	2b08      	cmp	r3, #8
 8009616:	f000 8082 	beq.w	800971e <HAL_TIM_PWM_Start+0x15a>
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	2b0c      	cmp	r3, #12
 800961e:	d07e      	beq.n	800971e <HAL_TIM_PWM_Start+0x15a>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a59      	ldr	r2, [pc, #356]	; (800978c <HAL_TIM_PWM_Start+0x1c8>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d10b      	bne.n	8009642 <HAL_TIM_PWM_Start+0x7e>
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d076      	beq.n	800971e <HAL_TIM_PWM_Start+0x15a>
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	2b04      	cmp	r3, #4
 8009634:	d073      	beq.n	800971e <HAL_TIM_PWM_Start+0x15a>
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	2b08      	cmp	r3, #8
 800963a:	d070      	beq.n	800971e <HAL_TIM_PWM_Start+0x15a>
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	2b0c      	cmp	r3, #12
 8009640:	d06d      	beq.n	800971e <HAL_TIM_PWM_Start+0x15a>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a52      	ldr	r2, [pc, #328]	; (8009790 <HAL_TIM_PWM_Start+0x1cc>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d10b      	bne.n	8009664 <HAL_TIM_PWM_Start+0xa0>
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d065      	beq.n	800971e <HAL_TIM_PWM_Start+0x15a>
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	2b04      	cmp	r3, #4
 8009656:	d062      	beq.n	800971e <HAL_TIM_PWM_Start+0x15a>
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	2b08      	cmp	r3, #8
 800965c:	d05f      	beq.n	800971e <HAL_TIM_PWM_Start+0x15a>
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	2b0c      	cmp	r3, #12
 8009662:	d05c      	beq.n	800971e <HAL_TIM_PWM_Start+0x15a>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a4a      	ldr	r2, [pc, #296]	; (8009794 <HAL_TIM_PWM_Start+0x1d0>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d10b      	bne.n	8009686 <HAL_TIM_PWM_Start+0xc2>
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d054      	beq.n	800971e <HAL_TIM_PWM_Start+0x15a>
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	2b04      	cmp	r3, #4
 8009678:	d051      	beq.n	800971e <HAL_TIM_PWM_Start+0x15a>
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	2b08      	cmp	r3, #8
 800967e:	d04e      	beq.n	800971e <HAL_TIM_PWM_Start+0x15a>
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	2b0c      	cmp	r3, #12
 8009684:	d04b      	beq.n	800971e <HAL_TIM_PWM_Start+0x15a>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a43      	ldr	r2, [pc, #268]	; (8009798 <HAL_TIM_PWM_Start+0x1d4>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d10b      	bne.n	80096a8 <HAL_TIM_PWM_Start+0xe4>
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d043      	beq.n	800971e <HAL_TIM_PWM_Start+0x15a>
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	2b04      	cmp	r3, #4
 800969a:	d040      	beq.n	800971e <HAL_TIM_PWM_Start+0x15a>
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	2b08      	cmp	r3, #8
 80096a0:	d03d      	beq.n	800971e <HAL_TIM_PWM_Start+0x15a>
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	2b0c      	cmp	r3, #12
 80096a6:	d03a      	beq.n	800971e <HAL_TIM_PWM_Start+0x15a>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a3b      	ldr	r2, [pc, #236]	; (800979c <HAL_TIM_PWM_Start+0x1d8>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d105      	bne.n	80096be <HAL_TIM_PWM_Start+0xfa>
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d032      	beq.n	800971e <HAL_TIM_PWM_Start+0x15a>
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	2b04      	cmp	r3, #4
 80096bc:	d02f      	beq.n	800971e <HAL_TIM_PWM_Start+0x15a>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a37      	ldr	r2, [pc, #220]	; (80097a0 <HAL_TIM_PWM_Start+0x1dc>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d102      	bne.n	80096ce <HAL_TIM_PWM_Start+0x10a>
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d027      	beq.n	800971e <HAL_TIM_PWM_Start+0x15a>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a34      	ldr	r2, [pc, #208]	; (80097a4 <HAL_TIM_PWM_Start+0x1e0>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d102      	bne.n	80096de <HAL_TIM_PWM_Start+0x11a>
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d01f      	beq.n	800971e <HAL_TIM_PWM_Start+0x15a>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a31      	ldr	r2, [pc, #196]	; (80097a8 <HAL_TIM_PWM_Start+0x1e4>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d105      	bne.n	80096f4 <HAL_TIM_PWM_Start+0x130>
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d017      	beq.n	800971e <HAL_TIM_PWM_Start+0x15a>
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	2b04      	cmp	r3, #4
 80096f2:	d014      	beq.n	800971e <HAL_TIM_PWM_Start+0x15a>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a2c      	ldr	r2, [pc, #176]	; (80097ac <HAL_TIM_PWM_Start+0x1e8>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d102      	bne.n	8009704 <HAL_TIM_PWM_Start+0x140>
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00c      	beq.n	800971e <HAL_TIM_PWM_Start+0x15a>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a29      	ldr	r2, [pc, #164]	; (80097b0 <HAL_TIM_PWM_Start+0x1ec>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d102      	bne.n	8009714 <HAL_TIM_PWM_Start+0x150>
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d004      	beq.n	800971e <HAL_TIM_PWM_Start+0x15a>
 8009714:	f240 5113 	movw	r1, #1299	; 0x513
 8009718:	4826      	ldr	r0, [pc, #152]	; (80097b4 <HAL_TIM_PWM_Start+0x1f0>)
 800971a:	f7f9 fd14 	bl	8003146 <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2201      	movs	r2, #1
 8009724:	6839      	ldr	r1, [r7, #0]
 8009726:	4618      	mov	r0, r3
 8009728:	f001 fcc6 	bl	800b0b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a15      	ldr	r2, [pc, #84]	; (8009788 <HAL_TIM_PWM_Start+0x1c4>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d004      	beq.n	8009740 <HAL_TIM_PWM_Start+0x17c>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a17      	ldr	r2, [pc, #92]	; (8009798 <HAL_TIM_PWM_Start+0x1d4>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d101      	bne.n	8009744 <HAL_TIM_PWM_Start+0x180>
 8009740:	2301      	movs	r3, #1
 8009742:	e000      	b.n	8009746 <HAL_TIM_PWM_Start+0x182>
 8009744:	2300      	movs	r3, #0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d007      	beq.n	800975a <HAL_TIM_PWM_Start+0x196>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009758:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	f003 0307 	and.w	r3, r3, #7
 8009764:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2b06      	cmp	r3, #6
 800976a:	d007      	beq.n	800977c <HAL_TIM_PWM_Start+0x1b8>
  {
    __HAL_TIM_ENABLE(htim);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f042 0201 	orr.w	r2, r2, #1
 800977a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	40010000 	.word	0x40010000
 800978c:	40000400 	.word	0x40000400
 8009790:	40000800 	.word	0x40000800
 8009794:	40000c00 	.word	0x40000c00
 8009798:	40010400 	.word	0x40010400
 800979c:	40014000 	.word	0x40014000
 80097a0:	40014400 	.word	0x40014400
 80097a4:	40014800 	.word	0x40014800
 80097a8:	40001800 	.word	0x40001800
 80097ac:	40001c00 	.word	0x40001c00
 80097b0:	40002000 	.word	0x40002000
 80097b4:	0800e25c 	.word	0x0800e25c

080097b8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d101      	bne.n	80097ca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	e0a1      	b.n	800990e <HAL_TIM_IC_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a52      	ldr	r2, [pc, #328]	; (8009918 <HAL_TIM_IC_Init+0x160>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d045      	beq.n	8009860 <HAL_TIM_IC_Init+0xa8>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097dc:	d040      	beq.n	8009860 <HAL_TIM_IC_Init+0xa8>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a4e      	ldr	r2, [pc, #312]	; (800991c <HAL_TIM_IC_Init+0x164>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d03b      	beq.n	8009860 <HAL_TIM_IC_Init+0xa8>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a4c      	ldr	r2, [pc, #304]	; (8009920 <HAL_TIM_IC_Init+0x168>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d036      	beq.n	8009860 <HAL_TIM_IC_Init+0xa8>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a4b      	ldr	r2, [pc, #300]	; (8009924 <HAL_TIM_IC_Init+0x16c>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d031      	beq.n	8009860 <HAL_TIM_IC_Init+0xa8>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a49      	ldr	r2, [pc, #292]	; (8009928 <HAL_TIM_IC_Init+0x170>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d02c      	beq.n	8009860 <HAL_TIM_IC_Init+0xa8>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a48      	ldr	r2, [pc, #288]	; (800992c <HAL_TIM_IC_Init+0x174>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d027      	beq.n	8009860 <HAL_TIM_IC_Init+0xa8>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a46      	ldr	r2, [pc, #280]	; (8009930 <HAL_TIM_IC_Init+0x178>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d022      	beq.n	8009860 <HAL_TIM_IC_Init+0xa8>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a45      	ldr	r2, [pc, #276]	; (8009934 <HAL_TIM_IC_Init+0x17c>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d01d      	beq.n	8009860 <HAL_TIM_IC_Init+0xa8>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a43      	ldr	r2, [pc, #268]	; (8009938 <HAL_TIM_IC_Init+0x180>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d018      	beq.n	8009860 <HAL_TIM_IC_Init+0xa8>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a42      	ldr	r2, [pc, #264]	; (800993c <HAL_TIM_IC_Init+0x184>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d013      	beq.n	8009860 <HAL_TIM_IC_Init+0xa8>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a40      	ldr	r2, [pc, #256]	; (8009940 <HAL_TIM_IC_Init+0x188>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d00e      	beq.n	8009860 <HAL_TIM_IC_Init+0xa8>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a3f      	ldr	r2, [pc, #252]	; (8009944 <HAL_TIM_IC_Init+0x18c>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d009      	beq.n	8009860 <HAL_TIM_IC_Init+0xa8>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a3d      	ldr	r2, [pc, #244]	; (8009948 <HAL_TIM_IC_Init+0x190>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d004      	beq.n	8009860 <HAL_TIM_IC_Init+0xa8>
 8009856:	f240 61d9 	movw	r1, #1753	; 0x6d9
 800985a:	483c      	ldr	r0, [pc, #240]	; (800994c <HAL_TIM_IC_Init+0x194>)
 800985c:	f7f9 fc73 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d014      	beq.n	8009892 <HAL_TIM_IC_Init+0xda>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	2b10      	cmp	r3, #16
 800986e:	d010      	beq.n	8009892 <HAL_TIM_IC_Init+0xda>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	2b20      	cmp	r3, #32
 8009876:	d00c      	beq.n	8009892 <HAL_TIM_IC_Init+0xda>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	689b      	ldr	r3, [r3, #8]
 800987c:	2b40      	cmp	r3, #64	; 0x40
 800987e:	d008      	beq.n	8009892 <HAL_TIM_IC_Init+0xda>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	2b60      	cmp	r3, #96	; 0x60
 8009886:	d004      	beq.n	8009892 <HAL_TIM_IC_Init+0xda>
 8009888:	f240 61da 	movw	r1, #1754	; 0x6da
 800988c:	482f      	ldr	r0, [pc, #188]	; (800994c <HAL_TIM_IC_Init+0x194>)
 800988e:	f7f9 fc5a 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00e      	beq.n	80098b8 <HAL_TIM_IC_Init+0x100>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098a2:	d009      	beq.n	80098b8 <HAL_TIM_IC_Init+0x100>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098ac:	d004      	beq.n	80098b8 <HAL_TIM_IC_Init+0x100>
 80098ae:	f240 61db 	movw	r1, #1755	; 0x6db
 80098b2:	4826      	ldr	r0, [pc, #152]	; (800994c <HAL_TIM_IC_Init+0x194>)
 80098b4:	f7f9 fc47 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d008      	beq.n	80098d2 <HAL_TIM_IC_Init+0x11a>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	2b80      	cmp	r3, #128	; 0x80
 80098c6:	d004      	beq.n	80098d2 <HAL_TIM_IC_Init+0x11a>
 80098c8:	f240 61dc 	movw	r1, #1756	; 0x6dc
 80098cc:	481f      	ldr	r0, [pc, #124]	; (800994c <HAL_TIM_IC_Init+0x194>)
 80098ce:	f7f9 fc3a 	bl	8003146 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d106      	bne.n	80098ec <HAL_TIM_IC_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f832 	bl	8009950 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2202      	movs	r2, #2
 80098f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	3304      	adds	r3, #4
 80098fc:	4619      	mov	r1, r3
 80098fe:	4610      	mov	r0, r2
 8009900:	f000 ff3c 	bl	800a77c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	40010000 	.word	0x40010000
 800991c:	40000400 	.word	0x40000400
 8009920:	40000800 	.word	0x40000800
 8009924:	40000c00 	.word	0x40000c00
 8009928:	40001000 	.word	0x40001000
 800992c:	40001400 	.word	0x40001400
 8009930:	40010400 	.word	0x40010400
 8009934:	40014000 	.word	0x40014000
 8009938:	40014400 	.word	0x40014400
 800993c:	40014800 	.word	0x40014800
 8009940:	40001800 	.word	0x40001800
 8009944:	40001c00 	.word	0x40001c00
 8009948:	40002000 	.word	0x40002000
 800994c:	0800e25c 	.word	0x0800e25c

08009950 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009958:	bf00      	nop
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a7c      	ldr	r2, [pc, #496]	; (8009b68 <HAL_TIM_IC_ConfigChannel+0x204>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d03b      	beq.n	80099f2 <HAL_TIM_IC_ConfigChannel+0x8e>
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009982:	d036      	beq.n	80099f2 <HAL_TIM_IC_ConfigChannel+0x8e>
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a78      	ldr	r2, [pc, #480]	; (8009b6c <HAL_TIM_IC_ConfigChannel+0x208>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d031      	beq.n	80099f2 <HAL_TIM_IC_ConfigChannel+0x8e>
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a77      	ldr	r2, [pc, #476]	; (8009b70 <HAL_TIM_IC_ConfigChannel+0x20c>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d02c      	beq.n	80099f2 <HAL_TIM_IC_ConfigChannel+0x8e>
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a75      	ldr	r2, [pc, #468]	; (8009b74 <HAL_TIM_IC_ConfigChannel+0x210>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d027      	beq.n	80099f2 <HAL_TIM_IC_ConfigChannel+0x8e>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a74      	ldr	r2, [pc, #464]	; (8009b78 <HAL_TIM_IC_ConfigChannel+0x214>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d022      	beq.n	80099f2 <HAL_TIM_IC_ConfigChannel+0x8e>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a72      	ldr	r2, [pc, #456]	; (8009b7c <HAL_TIM_IC_ConfigChannel+0x218>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d01d      	beq.n	80099f2 <HAL_TIM_IC_ConfigChannel+0x8e>
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a71      	ldr	r2, [pc, #452]	; (8009b80 <HAL_TIM_IC_ConfigChannel+0x21c>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d018      	beq.n	80099f2 <HAL_TIM_IC_ConfigChannel+0x8e>
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a6f      	ldr	r2, [pc, #444]	; (8009b84 <HAL_TIM_IC_ConfigChannel+0x220>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d013      	beq.n	80099f2 <HAL_TIM_IC_ConfigChannel+0x8e>
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a6e      	ldr	r2, [pc, #440]	; (8009b88 <HAL_TIM_IC_ConfigChannel+0x224>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d00e      	beq.n	80099f2 <HAL_TIM_IC_ConfigChannel+0x8e>
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a6c      	ldr	r2, [pc, #432]	; (8009b8c <HAL_TIM_IC_ConfigChannel+0x228>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d009      	beq.n	80099f2 <HAL_TIM_IC_ConfigChannel+0x8e>
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a6b      	ldr	r2, [pc, #428]	; (8009b90 <HAL_TIM_IC_ConfigChannel+0x22c>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d004      	beq.n	80099f2 <HAL_TIM_IC_ConfigChannel+0x8e>
 80099e8:	f640 5189 	movw	r1, #3465	; 0xd89
 80099ec:	4869      	ldr	r0, [pc, #420]	; (8009b94 <HAL_TIM_IC_ConfigChannel+0x230>)
 80099ee:	f7f9 fbaa 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00c      	beq.n	8009a14 <HAL_TIM_IC_ConfigChannel+0xb0>
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b02      	cmp	r3, #2
 8009a00:	d008      	beq.n	8009a14 <HAL_TIM_IC_ConfigChannel+0xb0>
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2b0a      	cmp	r3, #10
 8009a08:	d004      	beq.n	8009a14 <HAL_TIM_IC_ConfigChannel+0xb0>
 8009a0a:	f640 518a 	movw	r1, #3466	; 0xd8a
 8009a0e:	4861      	ldr	r0, [pc, #388]	; (8009b94 <HAL_TIM_IC_ConfigChannel+0x230>)
 8009a10:	f7f9 fb99 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d00c      	beq.n	8009a36 <HAL_TIM_IC_ConfigChannel+0xd2>
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	2b02      	cmp	r3, #2
 8009a22:	d008      	beq.n	8009a36 <HAL_TIM_IC_ConfigChannel+0xd2>
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	2b03      	cmp	r3, #3
 8009a2a:	d004      	beq.n	8009a36 <HAL_TIM_IC_ConfigChannel+0xd2>
 8009a2c:	f640 518b 	movw	r1, #3467	; 0xd8b
 8009a30:	4858      	ldr	r0, [pc, #352]	; (8009b94 <HAL_TIM_IC_ConfigChannel+0x230>)
 8009a32:	f7f9 fb88 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d010      	beq.n	8009a60 <HAL_TIM_IC_ConfigChannel+0xfc>
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	2b04      	cmp	r3, #4
 8009a44:	d00c      	beq.n	8009a60 <HAL_TIM_IC_ConfigChannel+0xfc>
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	2b08      	cmp	r3, #8
 8009a4c:	d008      	beq.n	8009a60 <HAL_TIM_IC_ConfigChannel+0xfc>
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	2b0c      	cmp	r3, #12
 8009a54:	d004      	beq.n	8009a60 <HAL_TIM_IC_ConfigChannel+0xfc>
 8009a56:	f640 518c 	movw	r1, #3468	; 0xd8c
 8009a5a:	484e      	ldr	r0, [pc, #312]	; (8009b94 <HAL_TIM_IC_ConfigChannel+0x230>)
 8009a5c:	f7f9 fb73 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	2b0f      	cmp	r3, #15
 8009a66:	d904      	bls.n	8009a72 <HAL_TIM_IC_ConfigChannel+0x10e>
 8009a68:	f640 518d 	movw	r1, #3469	; 0xd8d
 8009a6c:	4849      	ldr	r0, [pc, #292]	; (8009b94 <HAL_TIM_IC_ConfigChannel+0x230>)
 8009a6e:	f7f9 fb6a 	bl	8003146 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d101      	bne.n	8009a80 <HAL_TIM_IC_ConfigChannel+0x11c>
 8009a7c:	2302      	movs	r3, #2
 8009a7e:	e115      	b.n	8009cac <HAL_TIM_IC_ConfigChannel+0x348>
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2201      	movs	r2, #1
 8009a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d11b      	bne.n	8009ace <HAL_TIM_IC_ConfigChannel+0x16a>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6818      	ldr	r0, [r3, #0]
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	6819      	ldr	r1, [r3, #0]
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	685a      	ldr	r2, [r3, #4]
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	f001 f943 	bl	800ad30 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	699a      	ldr	r2, [r3, #24]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f022 020c 	bic.w	r2, r2, #12
 8009ab8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	6999      	ldr	r1, [r3, #24]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	689a      	ldr	r2, [r3, #8]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	430a      	orrs	r2, r1
 8009aca:	619a      	str	r2, [r3, #24]
 8009acc:	e0e5      	b.n	8009c9a <HAL_TIM_IC_ConfigChannel+0x336>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2b04      	cmp	r3, #4
 8009ad2:	d161      	bne.n	8009b98 <HAL_TIM_IC_ConfigChannel+0x234>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a23      	ldr	r2, [pc, #140]	; (8009b68 <HAL_TIM_IC_ConfigChannel+0x204>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d027      	beq.n	8009b2e <HAL_TIM_IC_ConfigChannel+0x1ca>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ae6:	d022      	beq.n	8009b2e <HAL_TIM_IC_ConfigChannel+0x1ca>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a1f      	ldr	r2, [pc, #124]	; (8009b6c <HAL_TIM_IC_ConfigChannel+0x208>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d01d      	beq.n	8009b2e <HAL_TIM_IC_ConfigChannel+0x1ca>
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a1e      	ldr	r2, [pc, #120]	; (8009b70 <HAL_TIM_IC_ConfigChannel+0x20c>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d018      	beq.n	8009b2e <HAL_TIM_IC_ConfigChannel+0x1ca>
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a1c      	ldr	r2, [pc, #112]	; (8009b74 <HAL_TIM_IC_ConfigChannel+0x210>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d013      	beq.n	8009b2e <HAL_TIM_IC_ConfigChannel+0x1ca>
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a1b      	ldr	r2, [pc, #108]	; (8009b78 <HAL_TIM_IC_ConfigChannel+0x214>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d00e      	beq.n	8009b2e <HAL_TIM_IC_ConfigChannel+0x1ca>
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a19      	ldr	r2, [pc, #100]	; (8009b7c <HAL_TIM_IC_ConfigChannel+0x218>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d009      	beq.n	8009b2e <HAL_TIM_IC_ConfigChannel+0x1ca>
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a1a      	ldr	r2, [pc, #104]	; (8009b88 <HAL_TIM_IC_ConfigChannel+0x224>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d004      	beq.n	8009b2e <HAL_TIM_IC_ConfigChannel+0x1ca>
 8009b24:	f640 51a5 	movw	r1, #3493	; 0xda5
 8009b28:	481a      	ldr	r0, [pc, #104]	; (8009b94 <HAL_TIM_IC_ConfigChannel+0x230>)
 8009b2a:	f7f9 fb0c 	bl	8003146 <assert_failed>

    TIM_TI2_SetConfig(htim->Instance,
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6818      	ldr	r0, [r3, #0]
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	6819      	ldr	r1, [r3, #0]
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	685a      	ldr	r2, [r3, #4]
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	f001 f99a 	bl	800ae76 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	699a      	ldr	r2, [r3, #24]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009b50:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	6999      	ldr	r1, [r3, #24]
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	021a      	lsls	r2, r3, #8
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	430a      	orrs	r2, r1
 8009b64:	619a      	str	r2, [r3, #24]
 8009b66:	e098      	b.n	8009c9a <HAL_TIM_IC_ConfigChannel+0x336>
 8009b68:	40010000 	.word	0x40010000
 8009b6c:	40000400 	.word	0x40000400
 8009b70:	40000800 	.word	0x40000800
 8009b74:	40000c00 	.word	0x40000c00
 8009b78:	40010400 	.word	0x40010400
 8009b7c:	40014000 	.word	0x40014000
 8009b80:	40014400 	.word	0x40014400
 8009b84:	40014800 	.word	0x40014800
 8009b88:	40001800 	.word	0x40001800
 8009b8c:	40001c00 	.word	0x40001c00
 8009b90:	40002000 	.word	0x40002000
 8009b94:	0800e25c 	.word	0x0800e25c
  }
  else if (Channel == TIM_CHANNEL_3)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2b08      	cmp	r3, #8
 8009b9c:	d13e      	bne.n	8009c1c <HAL_TIM_IC_ConfigChannel+0x2b8>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a44      	ldr	r2, [pc, #272]	; (8009cb4 <HAL_TIM_IC_ConfigChannel+0x350>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d01d      	beq.n	8009be4 <HAL_TIM_IC_ConfigChannel+0x280>
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bb0:	d018      	beq.n	8009be4 <HAL_TIM_IC_ConfigChannel+0x280>
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a40      	ldr	r2, [pc, #256]	; (8009cb8 <HAL_TIM_IC_ConfigChannel+0x354>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d013      	beq.n	8009be4 <HAL_TIM_IC_ConfigChannel+0x280>
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a3e      	ldr	r2, [pc, #248]	; (8009cbc <HAL_TIM_IC_ConfigChannel+0x358>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d00e      	beq.n	8009be4 <HAL_TIM_IC_ConfigChannel+0x280>
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a3d      	ldr	r2, [pc, #244]	; (8009cc0 <HAL_TIM_IC_ConfigChannel+0x35c>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d009      	beq.n	8009be4 <HAL_TIM_IC_ConfigChannel+0x280>
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a3b      	ldr	r2, [pc, #236]	; (8009cc4 <HAL_TIM_IC_ConfigChannel+0x360>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d004      	beq.n	8009be4 <HAL_TIM_IC_ConfigChannel+0x280>
 8009bda:	f640 51b5 	movw	r1, #3509	; 0xdb5
 8009bde:	483a      	ldr	r0, [pc, #232]	; (8009cc8 <HAL_TIM_IC_ConfigChannel+0x364>)
 8009be0:	f7f9 fab1 	bl	8003146 <assert_failed>

    TIM_TI3_SetConfig(htim->Instance,
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6818      	ldr	r0, [r3, #0]
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	6819      	ldr	r1, [r3, #0]
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	685a      	ldr	r2, [r3, #4]
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	f001 f9ac 	bl	800af50 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	69da      	ldr	r2, [r3, #28]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f022 020c 	bic.w	r2, r2, #12
 8009c06:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	69d9      	ldr	r1, [r3, #28]
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	689a      	ldr	r2, [r3, #8]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	430a      	orrs	r2, r1
 8009c18:	61da      	str	r2, [r3, #28]
 8009c1a:	e03e      	b.n	8009c9a <HAL_TIM_IC_ConfigChannel+0x336>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a24      	ldr	r2, [pc, #144]	; (8009cb4 <HAL_TIM_IC_ConfigChannel+0x350>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d01d      	beq.n	8009c62 <HAL_TIM_IC_ConfigChannel+0x2fe>
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c2e:	d018      	beq.n	8009c62 <HAL_TIM_IC_ConfigChannel+0x2fe>
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a20      	ldr	r2, [pc, #128]	; (8009cb8 <HAL_TIM_IC_ConfigChannel+0x354>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d013      	beq.n	8009c62 <HAL_TIM_IC_ConfigChannel+0x2fe>
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a1f      	ldr	r2, [pc, #124]	; (8009cbc <HAL_TIM_IC_ConfigChannel+0x358>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d00e      	beq.n	8009c62 <HAL_TIM_IC_ConfigChannel+0x2fe>
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a1d      	ldr	r2, [pc, #116]	; (8009cc0 <HAL_TIM_IC_ConfigChannel+0x35c>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d009      	beq.n	8009c62 <HAL_TIM_IC_ConfigChannel+0x2fe>
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a1c      	ldr	r2, [pc, #112]	; (8009cc4 <HAL_TIM_IC_ConfigChannel+0x360>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d004      	beq.n	8009c62 <HAL_TIM_IC_ConfigChannel+0x2fe>
 8009c58:	f640 51c5 	movw	r1, #3525	; 0xdc5
 8009c5c:	481a      	ldr	r0, [pc, #104]	; (8009cc8 <HAL_TIM_IC_ConfigChannel+0x364>)
 8009c5e:	f7f9 fa72 	bl	8003146 <assert_failed>

    TIM_TI4_SetConfig(htim->Instance,
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6818      	ldr	r0, [r3, #0]
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	6819      	ldr	r1, [r3, #0]
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	685a      	ldr	r2, [r3, #4]
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	f001 f9a9 	bl	800afc8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	69da      	ldr	r2, [r3, #28]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009c84:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	69d9      	ldr	r1, [r3, #28]
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	021a      	lsls	r2, r3, #8
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	430a      	orrs	r2, r1
 8009c98:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	40010000 	.word	0x40010000
 8009cb8:	40000400 	.word	0x40000400
 8009cbc:	40000800 	.word	0x40000800
 8009cc0:	40000c00 	.word	0x40000c00
 8009cc4:	40010400 	.word	0x40010400
 8009cc8:	0800e25c 	.word	0x0800e25c

08009ccc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d010      	beq.n	8009d00 <HAL_TIM_PWM_ConfigChannel+0x34>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2b04      	cmp	r3, #4
 8009ce2:	d00d      	beq.n	8009d00 <HAL_TIM_PWM_ConfigChannel+0x34>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2b08      	cmp	r3, #8
 8009ce8:	d00a      	beq.n	8009d00 <HAL_TIM_PWM_ConfigChannel+0x34>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2b0c      	cmp	r3, #12
 8009cee:	d007      	beq.n	8009d00 <HAL_TIM_PWM_ConfigChannel+0x34>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2b3c      	cmp	r3, #60	; 0x3c
 8009cf4:	d004      	beq.n	8009d00 <HAL_TIM_PWM_ConfigChannel+0x34>
 8009cf6:	f640 51ec 	movw	r1, #3564	; 0xdec
 8009cfa:	4885      	ldr	r0, [pc, #532]	; (8009f10 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8009cfc:	f7f9 fa23 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b60      	cmp	r3, #96	; 0x60
 8009d06:	d008      	beq.n	8009d1a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b70      	cmp	r3, #112	; 0x70
 8009d0e:	d004      	beq.n	8009d1a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8009d10:	f640 51ed 	movw	r1, #3565	; 0xded
 8009d14:	487e      	ldr	r0, [pc, #504]	; (8009f10 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8009d16:	f7f9 fa16 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d008      	beq.n	8009d34 <HAL_TIM_PWM_ConfigChannel+0x68>
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	d004      	beq.n	8009d34 <HAL_TIM_PWM_ConfigChannel+0x68>
 8009d2a:	f640 51ee 	movw	r1, #3566	; 0xdee
 8009d2e:	4878      	ldr	r0, [pc, #480]	; (8009f10 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8009d30:	f7f9 fa09 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	691b      	ldr	r3, [r3, #16]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d008      	beq.n	8009d4e <HAL_TIM_PWM_ConfigChannel+0x82>
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	691b      	ldr	r3, [r3, #16]
 8009d40:	2b04      	cmp	r3, #4
 8009d42:	d004      	beq.n	8009d4e <HAL_TIM_PWM_ConfigChannel+0x82>
 8009d44:	f640 51ef 	movw	r1, #3567	; 0xdef
 8009d48:	4871      	ldr	r0, [pc, #452]	; (8009f10 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8009d4a:	f7f9 f9fc 	bl	8003146 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d101      	bne.n	8009d5c <HAL_TIM_PWM_ConfigChannel+0x90>
 8009d58:	2302      	movs	r3, #2
 8009d5a:	e182      	b.n	800a062 <HAL_TIM_PWM_ConfigChannel+0x396>
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2202      	movs	r2, #2
 8009d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b0c      	cmp	r3, #12
 8009d70:	f200 816d 	bhi.w	800a04e <HAL_TIM_PWM_ConfigChannel+0x382>
 8009d74:	a201      	add	r2, pc, #4	; (adr r2, 8009d7c <HAL_TIM_PWM_ConfigChannel+0xb0>)
 8009d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7a:	bf00      	nop
 8009d7c:	08009db1 	.word	0x08009db1
 8009d80:	0800a04f 	.word	0x0800a04f
 8009d84:	0800a04f 	.word	0x0800a04f
 8009d88:	0800a04f 	.word	0x0800a04f
 8009d8c:	08009e73 	.word	0x08009e73
 8009d90:	0800a04f 	.word	0x0800a04f
 8009d94:	0800a04f 	.word	0x0800a04f
 8009d98:	0800a04f 	.word	0x0800a04f
 8009d9c:	08009f41 	.word	0x08009f41
 8009da0:	0800a04f 	.word	0x0800a04f
 8009da4:	0800a04f 	.word	0x0800a04f
 8009da8:	0800a04f 	.word	0x0800a04f
 8009dac:	08009fc7 	.word	0x08009fc7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a57      	ldr	r2, [pc, #348]	; (8009f14 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d03b      	beq.n	8009e32 <HAL_TIM_PWM_ConfigChannel+0x166>
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dc2:	d036      	beq.n	8009e32 <HAL_TIM_PWM_ConfigChannel+0x166>
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a53      	ldr	r2, [pc, #332]	; (8009f18 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d031      	beq.n	8009e32 <HAL_TIM_PWM_ConfigChannel+0x166>
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a52      	ldr	r2, [pc, #328]	; (8009f1c <HAL_TIM_PWM_ConfigChannel+0x250>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d02c      	beq.n	8009e32 <HAL_TIM_PWM_ConfigChannel+0x166>
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a50      	ldr	r2, [pc, #320]	; (8009f20 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d027      	beq.n	8009e32 <HAL_TIM_PWM_ConfigChannel+0x166>
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a4f      	ldr	r2, [pc, #316]	; (8009f24 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d022      	beq.n	8009e32 <HAL_TIM_PWM_ConfigChannel+0x166>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a4d      	ldr	r2, [pc, #308]	; (8009f28 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d01d      	beq.n	8009e32 <HAL_TIM_PWM_ConfigChannel+0x166>
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a4c      	ldr	r2, [pc, #304]	; (8009f2c <HAL_TIM_PWM_ConfigChannel+0x260>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d018      	beq.n	8009e32 <HAL_TIM_PWM_ConfigChannel+0x166>
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a4a      	ldr	r2, [pc, #296]	; (8009f30 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d013      	beq.n	8009e32 <HAL_TIM_PWM_ConfigChannel+0x166>
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a49      	ldr	r2, [pc, #292]	; (8009f34 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d00e      	beq.n	8009e32 <HAL_TIM_PWM_ConfigChannel+0x166>
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a47      	ldr	r2, [pc, #284]	; (8009f38 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d009      	beq.n	8009e32 <HAL_TIM_PWM_ConfigChannel+0x166>
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a46      	ldr	r2, [pc, #280]	; (8009f3c <HAL_TIM_PWM_ConfigChannel+0x270>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d004      	beq.n	8009e32 <HAL_TIM_PWM_ConfigChannel+0x166>
 8009e28:	f640 51fb 	movw	r1, #3579	; 0xdfb
 8009e2c:	4838      	ldr	r0, [pc, #224]	; (8009f10 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8009e2e:	f7f9 f98a 	bl	8003146 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68b9      	ldr	r1, [r7, #8]
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f000 fd3f 	bl	800a8bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	699a      	ldr	r2, [r3, #24]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f042 0208 	orr.w	r2, r2, #8
 8009e4c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	699a      	ldr	r2, [r3, #24]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f022 0204 	bic.w	r2, r2, #4
 8009e5c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	6999      	ldr	r1, [r3, #24]
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	691a      	ldr	r2, [r3, #16]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	430a      	orrs	r2, r1
 8009e6e:	619a      	str	r2, [r3, #24]
      break;
 8009e70:	e0ee      	b.n	800a050 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a27      	ldr	r2, [pc, #156]	; (8009f14 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d027      	beq.n	8009ecc <HAL_TIM_PWM_ConfigChannel+0x200>
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e84:	d022      	beq.n	8009ecc <HAL_TIM_PWM_ConfigChannel+0x200>
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a23      	ldr	r2, [pc, #140]	; (8009f18 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d01d      	beq.n	8009ecc <HAL_TIM_PWM_ConfigChannel+0x200>
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a21      	ldr	r2, [pc, #132]	; (8009f1c <HAL_TIM_PWM_ConfigChannel+0x250>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d018      	beq.n	8009ecc <HAL_TIM_PWM_ConfigChannel+0x200>
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a20      	ldr	r2, [pc, #128]	; (8009f20 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d013      	beq.n	8009ecc <HAL_TIM_PWM_ConfigChannel+0x200>
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a1e      	ldr	r2, [pc, #120]	; (8009f24 <HAL_TIM_PWM_ConfigChannel+0x258>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d00e      	beq.n	8009ecc <HAL_TIM_PWM_ConfigChannel+0x200>
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a1d      	ldr	r2, [pc, #116]	; (8009f28 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d009      	beq.n	8009ecc <HAL_TIM_PWM_ConfigChannel+0x200>
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a1d      	ldr	r2, [pc, #116]	; (8009f34 <HAL_TIM_PWM_ConfigChannel+0x268>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d004      	beq.n	8009ecc <HAL_TIM_PWM_ConfigChannel+0x200>
 8009ec2:	f640 610c 	movw	r1, #3596	; 0xe0c
 8009ec6:	4812      	ldr	r0, [pc, #72]	; (8009f10 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8009ec8:	f7f9 f93d 	bl	8003146 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	68b9      	ldr	r1, [r7, #8]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f000 fd8c 	bl	800a9f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	699a      	ldr	r2, [r3, #24]
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	699a      	ldr	r2, [r3, #24]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	6999      	ldr	r1, [r3, #24]
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	021a      	lsls	r2, r3, #8
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	430a      	orrs	r2, r1
 8009f0a:	619a      	str	r2, [r3, #24]
      break;
 8009f0c:	e0a0      	b.n	800a050 <HAL_TIM_PWM_ConfigChannel+0x384>
 8009f0e:	bf00      	nop
 8009f10:	0800e25c 	.word	0x0800e25c
 8009f14:	40010000 	.word	0x40010000
 8009f18:	40000400 	.word	0x40000400
 8009f1c:	40000800 	.word	0x40000800
 8009f20:	40000c00 	.word	0x40000c00
 8009f24:	40010400 	.word	0x40010400
 8009f28:	40014000 	.word	0x40014000
 8009f2c:	40014400 	.word	0x40014400
 8009f30:	40014800 	.word	0x40014800
 8009f34:	40001800 	.word	0x40001800
 8009f38:	40001c00 	.word	0x40001c00
 8009f3c:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a49      	ldr	r2, [pc, #292]	; (800a06c <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d01d      	beq.n	8009f86 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f52:	d018      	beq.n	8009f86 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a45      	ldr	r2, [pc, #276]	; (800a070 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d013      	beq.n	8009f86 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a44      	ldr	r2, [pc, #272]	; (800a074 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d00e      	beq.n	8009f86 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a42      	ldr	r2, [pc, #264]	; (800a078 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d009      	beq.n	8009f86 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a41      	ldr	r2, [pc, #260]	; (800a07c <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d004      	beq.n	8009f86 <HAL_TIM_PWM_ConfigChannel+0x2ba>
 8009f7c:	f640 611d 	movw	r1, #3613	; 0xe1d
 8009f80:	483f      	ldr	r0, [pc, #252]	; (800a080 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 8009f82:	f7f9 f8e0 	bl	8003146 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68b9      	ldr	r1, [r7, #8]
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f000 fdcd 	bl	800ab2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	69da      	ldr	r2, [r3, #28]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f042 0208 	orr.w	r2, r2, #8
 8009fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	69da      	ldr	r2, [r3, #28]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f022 0204 	bic.w	r2, r2, #4
 8009fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	69d9      	ldr	r1, [r3, #28]
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	691a      	ldr	r2, [r3, #16]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	430a      	orrs	r2, r1
 8009fc2:	61da      	str	r2, [r3, #28]
      break;
 8009fc4:	e044      	b.n	800a050 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a28      	ldr	r2, [pc, #160]	; (800a06c <HAL_TIM_PWM_ConfigChannel+0x3a0>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d01d      	beq.n	800a00c <HAL_TIM_PWM_ConfigChannel+0x340>
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fd8:	d018      	beq.n	800a00c <HAL_TIM_PWM_ConfigChannel+0x340>
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a24      	ldr	r2, [pc, #144]	; (800a070 <HAL_TIM_PWM_ConfigChannel+0x3a4>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d013      	beq.n	800a00c <HAL_TIM_PWM_ConfigChannel+0x340>
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a22      	ldr	r2, [pc, #136]	; (800a074 <HAL_TIM_PWM_ConfigChannel+0x3a8>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d00e      	beq.n	800a00c <HAL_TIM_PWM_ConfigChannel+0x340>
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a21      	ldr	r2, [pc, #132]	; (800a078 <HAL_TIM_PWM_ConfigChannel+0x3ac>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d009      	beq.n	800a00c <HAL_TIM_PWM_ConfigChannel+0x340>
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a1f      	ldr	r2, [pc, #124]	; (800a07c <HAL_TIM_PWM_ConfigChannel+0x3b0>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d004      	beq.n	800a00c <HAL_TIM_PWM_ConfigChannel+0x340>
 800a002:	f640 612e 	movw	r1, #3630	; 0xe2e
 800a006:	481e      	ldr	r0, [pc, #120]	; (800a080 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 800a008:	f7f9 f89d 	bl	8003146 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68b9      	ldr	r1, [r7, #8]
 800a012:	4618      	mov	r0, r3
 800a014:	f000 fe28 	bl	800ac68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	69da      	ldr	r2, [r3, #28]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a026:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	69da      	ldr	r2, [r3, #28]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a036:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	69d9      	ldr	r1, [r3, #28]
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	691b      	ldr	r3, [r3, #16]
 800a042:	021a      	lsls	r2, r3, #8
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	430a      	orrs	r2, r1
 800a04a:	61da      	str	r2, [r3, #28]
      break;
 800a04c:	e000      	b.n	800a050 <HAL_TIM_PWM_ConfigChannel+0x384>
    }

    default:
      break;
 800a04e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2201      	movs	r2, #1
 800a054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	40010000 	.word	0x40010000
 800a070:	40000400 	.word	0x40000400
 800a074:	40000800 	.word	0x40000800
 800a078:	40000c00 	.word	0x40000c00
 800a07c:	40010400 	.word	0x40010400
 800a080:	0800e25c 	.word	0x0800e25c

0800a084 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a094:	2b01      	cmp	r3, #1
 800a096:	d101      	bne.n	800a09c <HAL_TIM_ConfigClockSource+0x18>
 800a098:	2302      	movs	r3, #2
 800a09a:	e35b      	b.n	800a754 <HAL_TIM_ConfigClockSource+0x6d0>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2202      	movs	r2, #2
 800a0a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0b4:	d029      	beq.n	800a10a <HAL_TIM_ConfigClockSource+0x86>
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0be:	d024      	beq.n	800a10a <HAL_TIM_ConfigClockSource+0x86>
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d020      	beq.n	800a10a <HAL_TIM_ConfigClockSource+0x86>
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2b10      	cmp	r3, #16
 800a0ce:	d01c      	beq.n	800a10a <HAL_TIM_ConfigClockSource+0x86>
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2b20      	cmp	r3, #32
 800a0d6:	d018      	beq.n	800a10a <HAL_TIM_ConfigClockSource+0x86>
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	2b30      	cmp	r3, #48	; 0x30
 800a0de:	d014      	beq.n	800a10a <HAL_TIM_ConfigClockSource+0x86>
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b40      	cmp	r3, #64	; 0x40
 800a0e6:	d010      	beq.n	800a10a <HAL_TIM_ConfigClockSource+0x86>
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2b50      	cmp	r3, #80	; 0x50
 800a0ee:	d00c      	beq.n	800a10a <HAL_TIM_ConfigClockSource+0x86>
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2b60      	cmp	r3, #96	; 0x60
 800a0f6:	d008      	beq.n	800a10a <HAL_TIM_ConfigClockSource+0x86>
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2b70      	cmp	r3, #112	; 0x70
 800a0fe:	d004      	beq.n	800a10a <HAL_TIM_ConfigClockSource+0x86>
 800a100:	f241 118b 	movw	r1, #4491	; 0x118b
 800a104:	4893      	ldr	r0, [pc, #588]	; (800a354 <HAL_TIM_ConfigClockSource+0x2d0>)
 800a106:	f7f9 f81e 	bl	8003146 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a118:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a120:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	68fa      	ldr	r2, [r7, #12]
 800a128:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a132:	f000 812b 	beq.w	800a38c <HAL_TIM_ConfigClockSource+0x308>
 800a136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a13a:	f200 82ff 	bhi.w	800a73c <HAL_TIM_ConfigClockSource+0x6b8>
 800a13e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a142:	d02e      	beq.n	800a1a2 <HAL_TIM_ConfigClockSource+0x11e>
 800a144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a148:	f200 82f8 	bhi.w	800a73c <HAL_TIM_ConfigClockSource+0x6b8>
 800a14c:	2b70      	cmp	r3, #112	; 0x70
 800a14e:	f000 8082 	beq.w	800a256 <HAL_TIM_ConfigClockSource+0x1d2>
 800a152:	2b70      	cmp	r3, #112	; 0x70
 800a154:	f200 82f2 	bhi.w	800a73c <HAL_TIM_ConfigClockSource+0x6b8>
 800a158:	2b60      	cmp	r3, #96	; 0x60
 800a15a:	f000 81e8 	beq.w	800a52e <HAL_TIM_ConfigClockSource+0x4aa>
 800a15e:	2b60      	cmp	r3, #96	; 0x60
 800a160:	f200 82ec 	bhi.w	800a73c <HAL_TIM_ConfigClockSource+0x6b8>
 800a164:	2b50      	cmp	r3, #80	; 0x50
 800a166:	f000 8182 	beq.w	800a46e <HAL_TIM_ConfigClockSource+0x3ea>
 800a16a:	2b50      	cmp	r3, #80	; 0x50
 800a16c:	f200 82e6 	bhi.w	800a73c <HAL_TIM_ConfigClockSource+0x6b8>
 800a170:	2b40      	cmp	r3, #64	; 0x40
 800a172:	f000 824d 	beq.w	800a610 <HAL_TIM_ConfigClockSource+0x58c>
 800a176:	2b40      	cmp	r3, #64	; 0x40
 800a178:	f200 82e0 	bhi.w	800a73c <HAL_TIM_ConfigClockSource+0x6b8>
 800a17c:	2b30      	cmp	r3, #48	; 0x30
 800a17e:	f000 82a7 	beq.w	800a6d0 <HAL_TIM_ConfigClockSource+0x64c>
 800a182:	2b30      	cmp	r3, #48	; 0x30
 800a184:	f200 82da 	bhi.w	800a73c <HAL_TIM_ConfigClockSource+0x6b8>
 800a188:	2b20      	cmp	r3, #32
 800a18a:	f000 82a1 	beq.w	800a6d0 <HAL_TIM_ConfigClockSource+0x64c>
 800a18e:	2b20      	cmp	r3, #32
 800a190:	f200 82d4 	bhi.w	800a73c <HAL_TIM_ConfigClockSource+0x6b8>
 800a194:	2b00      	cmp	r3, #0
 800a196:	f000 829b 	beq.w	800a6d0 <HAL_TIM_ConfigClockSource+0x64c>
 800a19a:	2b10      	cmp	r3, #16
 800a19c:	f000 8298 	beq.w	800a6d0 <HAL_TIM_ConfigClockSource+0x64c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a1a0:	e2cc      	b.n	800a73c <HAL_TIM_ConfigClockSource+0x6b8>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a6c      	ldr	r2, [pc, #432]	; (800a358 <HAL_TIM_ConfigClockSource+0x2d4>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	f000 82c9 	beq.w	800a740 <HAL_TIM_ConfigClockSource+0x6bc>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1b6:	f000 82c3 	beq.w	800a740 <HAL_TIM_ConfigClockSource+0x6bc>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a67      	ldr	r2, [pc, #412]	; (800a35c <HAL_TIM_ConfigClockSource+0x2d8>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	f000 82bd 	beq.w	800a740 <HAL_TIM_ConfigClockSource+0x6bc>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a65      	ldr	r2, [pc, #404]	; (800a360 <HAL_TIM_ConfigClockSource+0x2dc>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	f000 82b7 	beq.w	800a740 <HAL_TIM_ConfigClockSource+0x6bc>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a63      	ldr	r2, [pc, #396]	; (800a364 <HAL_TIM_ConfigClockSource+0x2e0>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	f000 82b1 	beq.w	800a740 <HAL_TIM_ConfigClockSource+0x6bc>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a61      	ldr	r2, [pc, #388]	; (800a368 <HAL_TIM_ConfigClockSource+0x2e4>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	f000 82ab 	beq.w	800a740 <HAL_TIM_ConfigClockSource+0x6bc>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a5f      	ldr	r2, [pc, #380]	; (800a36c <HAL_TIM_ConfigClockSource+0x2e8>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	f000 82a5 	beq.w	800a740 <HAL_TIM_ConfigClockSource+0x6bc>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a5d      	ldr	r2, [pc, #372]	; (800a370 <HAL_TIM_ConfigClockSource+0x2ec>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	f000 829f 	beq.w	800a740 <HAL_TIM_ConfigClockSource+0x6bc>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a5b      	ldr	r2, [pc, #364]	; (800a374 <HAL_TIM_ConfigClockSource+0x2f0>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	f000 8299 	beq.w	800a740 <HAL_TIM_ConfigClockSource+0x6bc>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a59      	ldr	r2, [pc, #356]	; (800a378 <HAL_TIM_ConfigClockSource+0x2f4>)
 800a214:	4293      	cmp	r3, r2
 800a216:	f000 8293 	beq.w	800a740 <HAL_TIM_ConfigClockSource+0x6bc>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a57      	ldr	r2, [pc, #348]	; (800a37c <HAL_TIM_ConfigClockSource+0x2f8>)
 800a220:	4293      	cmp	r3, r2
 800a222:	f000 828d 	beq.w	800a740 <HAL_TIM_ConfigClockSource+0x6bc>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a55      	ldr	r2, [pc, #340]	; (800a380 <HAL_TIM_ConfigClockSource+0x2fc>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	f000 8287 	beq.w	800a740 <HAL_TIM_ConfigClockSource+0x6bc>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a53      	ldr	r2, [pc, #332]	; (800a384 <HAL_TIM_ConfigClockSource+0x300>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	f000 8281 	beq.w	800a740 <HAL_TIM_ConfigClockSource+0x6bc>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a51      	ldr	r2, [pc, #324]	; (800a388 <HAL_TIM_ConfigClockSource+0x304>)
 800a244:	4293      	cmp	r3, r2
 800a246:	f000 827b 	beq.w	800a740 <HAL_TIM_ConfigClockSource+0x6bc>
 800a24a:	f241 1197 	movw	r1, #4503	; 0x1197
 800a24e:	4841      	ldr	r0, [pc, #260]	; (800a354 <HAL_TIM_ConfigClockSource+0x2d0>)
 800a250:	f7f8 ff79 	bl	8003146 <assert_failed>
      break;
 800a254:	e274      	b.n	800a740 <HAL_TIM_ConfigClockSource+0x6bc>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a3f      	ldr	r2, [pc, #252]	; (800a358 <HAL_TIM_ConfigClockSource+0x2d4>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d027      	beq.n	800a2b0 <HAL_TIM_ConfigClockSource+0x22c>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a268:	d022      	beq.n	800a2b0 <HAL_TIM_ConfigClockSource+0x22c>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a3b      	ldr	r2, [pc, #236]	; (800a35c <HAL_TIM_ConfigClockSource+0x2d8>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d01d      	beq.n	800a2b0 <HAL_TIM_ConfigClockSource+0x22c>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a39      	ldr	r2, [pc, #228]	; (800a360 <HAL_TIM_ConfigClockSource+0x2dc>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d018      	beq.n	800a2b0 <HAL_TIM_ConfigClockSource+0x22c>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a38      	ldr	r2, [pc, #224]	; (800a364 <HAL_TIM_ConfigClockSource+0x2e0>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d013      	beq.n	800a2b0 <HAL_TIM_ConfigClockSource+0x22c>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a38      	ldr	r2, [pc, #224]	; (800a370 <HAL_TIM_ConfigClockSource+0x2ec>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d00e      	beq.n	800a2b0 <HAL_TIM_ConfigClockSource+0x22c>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a37      	ldr	r2, [pc, #220]	; (800a374 <HAL_TIM_ConfigClockSource+0x2f0>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d009      	beq.n	800a2b0 <HAL_TIM_ConfigClockSource+0x22c>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a37      	ldr	r2, [pc, #220]	; (800a380 <HAL_TIM_ConfigClockSource+0x2fc>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d004      	beq.n	800a2b0 <HAL_TIM_ConfigClockSource+0x22c>
 800a2a6:	f241 119e 	movw	r1, #4510	; 0x119e
 800a2aa:	482a      	ldr	r0, [pc, #168]	; (800a354 <HAL_TIM_ConfigClockSource+0x2d0>)
 800a2ac:	f7f8 ff4b 	bl	8003146 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d013      	beq.n	800a2e0 <HAL_TIM_ConfigClockSource+0x25c>
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2c0:	d00e      	beq.n	800a2e0 <HAL_TIM_ConfigClockSource+0x25c>
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	689b      	ldr	r3, [r3, #8]
 800a2c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2ca:	d009      	beq.n	800a2e0 <HAL_TIM_ConfigClockSource+0x25c>
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a2d4:	d004      	beq.n	800a2e0 <HAL_TIM_ConfigClockSource+0x25c>
 800a2d6:	f241 11a1 	movw	r1, #4513	; 0x11a1
 800a2da:	481e      	ldr	r0, [pc, #120]	; (800a354 <HAL_TIM_ConfigClockSource+0x2d0>)
 800a2dc:	f7f8 ff33 	bl	8003146 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2e8:	d014      	beq.n	800a314 <HAL_TIM_ConfigClockSource+0x290>
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d010      	beq.n	800a314 <HAL_TIM_ConfigClockSource+0x290>
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00c      	beq.n	800a314 <HAL_TIM_ConfigClockSource+0x290>
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	2b02      	cmp	r3, #2
 800a300:	d008      	beq.n	800a314 <HAL_TIM_ConfigClockSource+0x290>
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	2b0a      	cmp	r3, #10
 800a308:	d004      	beq.n	800a314 <HAL_TIM_ConfigClockSource+0x290>
 800a30a:	f241 11a2 	movw	r1, #4514	; 0x11a2
 800a30e:	4811      	ldr	r0, [pc, #68]	; (800a354 <HAL_TIM_ConfigClockSource+0x2d0>)
 800a310:	f7f8 ff19 	bl	8003146 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	2b0f      	cmp	r3, #15
 800a31a:	d904      	bls.n	800a326 <HAL_TIM_ConfigClockSource+0x2a2>
 800a31c:	f241 11a3 	movw	r1, #4515	; 0x11a3
 800a320:	480c      	ldr	r0, [pc, #48]	; (800a354 <HAL_TIM_ConfigClockSource+0x2d0>)
 800a322:	f7f8 ff10 	bl	8003146 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6818      	ldr	r0, [r3, #0]
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	6899      	ldr	r1, [r3, #8]
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	685a      	ldr	r2, [r3, #4]
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	f000 fe9f 	bl	800b078 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a348:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	609a      	str	r2, [r3, #8]
      break;
 800a352:	e1f6      	b.n	800a742 <HAL_TIM_ConfigClockSource+0x6be>
 800a354:	0800e25c 	.word	0x0800e25c
 800a358:	40010000 	.word	0x40010000
 800a35c:	40000400 	.word	0x40000400
 800a360:	40000800 	.word	0x40000800
 800a364:	40000c00 	.word	0x40000c00
 800a368:	40001000 	.word	0x40001000
 800a36c:	40001400 	.word	0x40001400
 800a370:	40010400 	.word	0x40010400
 800a374:	40014000 	.word	0x40014000
 800a378:	40014400 	.word	0x40014400
 800a37c:	40014800 	.word	0x40014800
 800a380:	40001800 	.word	0x40001800
 800a384:	40001c00 	.word	0x40001c00
 800a388:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a97      	ldr	r2, [pc, #604]	; (800a5f0 <HAL_TIM_ConfigClockSource+0x56c>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d01d      	beq.n	800a3d2 <HAL_TIM_ConfigClockSource+0x34e>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a39e:	d018      	beq.n	800a3d2 <HAL_TIM_ConfigClockSource+0x34e>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a93      	ldr	r2, [pc, #588]	; (800a5f4 <HAL_TIM_ConfigClockSource+0x570>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d013      	beq.n	800a3d2 <HAL_TIM_ConfigClockSource+0x34e>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a92      	ldr	r2, [pc, #584]	; (800a5f8 <HAL_TIM_ConfigClockSource+0x574>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d00e      	beq.n	800a3d2 <HAL_TIM_ConfigClockSource+0x34e>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a90      	ldr	r2, [pc, #576]	; (800a5fc <HAL_TIM_ConfigClockSource+0x578>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d009      	beq.n	800a3d2 <HAL_TIM_ConfigClockSource+0x34e>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a8f      	ldr	r2, [pc, #572]	; (800a600 <HAL_TIM_ConfigClockSource+0x57c>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d004      	beq.n	800a3d2 <HAL_TIM_ConfigClockSource+0x34e>
 800a3c8:	f241 11b6 	movw	r1, #4534	; 0x11b6
 800a3cc:	488d      	ldr	r0, [pc, #564]	; (800a604 <HAL_TIM_ConfigClockSource+0x580>)
 800a3ce:	f7f8 feba 	bl	8003146 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d013      	beq.n	800a402 <HAL_TIM_ConfigClockSource+0x37e>
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3e2:	d00e      	beq.n	800a402 <HAL_TIM_ConfigClockSource+0x37e>
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3ec:	d009      	beq.n	800a402 <HAL_TIM_ConfigClockSource+0x37e>
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a3f6:	d004      	beq.n	800a402 <HAL_TIM_ConfigClockSource+0x37e>
 800a3f8:	f241 11b9 	movw	r1, #4537	; 0x11b9
 800a3fc:	4881      	ldr	r0, [pc, #516]	; (800a604 <HAL_TIM_ConfigClockSource+0x580>)
 800a3fe:	f7f8 fea2 	bl	8003146 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a40a:	d014      	beq.n	800a436 <HAL_TIM_ConfigClockSource+0x3b2>
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d010      	beq.n	800a436 <HAL_TIM_ConfigClockSource+0x3b2>
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00c      	beq.n	800a436 <HAL_TIM_ConfigClockSource+0x3b2>
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	2b02      	cmp	r3, #2
 800a422:	d008      	beq.n	800a436 <HAL_TIM_ConfigClockSource+0x3b2>
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	2b0a      	cmp	r3, #10
 800a42a:	d004      	beq.n	800a436 <HAL_TIM_ConfigClockSource+0x3b2>
 800a42c:	f241 11ba 	movw	r1, #4538	; 0x11ba
 800a430:	4874      	ldr	r0, [pc, #464]	; (800a604 <HAL_TIM_ConfigClockSource+0x580>)
 800a432:	f7f8 fe88 	bl	8003146 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	68db      	ldr	r3, [r3, #12]
 800a43a:	2b0f      	cmp	r3, #15
 800a43c:	d904      	bls.n	800a448 <HAL_TIM_ConfigClockSource+0x3c4>
 800a43e:	f241 11bb 	movw	r1, #4539	; 0x11bb
 800a442:	4870      	ldr	r0, [pc, #448]	; (800a604 <HAL_TIM_ConfigClockSource+0x580>)
 800a444:	f7f8 fe7f 	bl	8003146 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6818      	ldr	r0, [r3, #0]
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	6899      	ldr	r1, [r3, #8]
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	685a      	ldr	r2, [r3, #4]
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	f000 fe0e 	bl	800b078 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	689a      	ldr	r2, [r3, #8]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a46a:	609a      	str	r2, [r3, #8]
      break;
 800a46c:	e169      	b.n	800a742 <HAL_TIM_ConfigClockSource+0x6be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a5f      	ldr	r2, [pc, #380]	; (800a5f0 <HAL_TIM_ConfigClockSource+0x56c>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d027      	beq.n	800a4c8 <HAL_TIM_ConfigClockSource+0x444>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a480:	d022      	beq.n	800a4c8 <HAL_TIM_ConfigClockSource+0x444>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a5b      	ldr	r2, [pc, #364]	; (800a5f4 <HAL_TIM_ConfigClockSource+0x570>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d01d      	beq.n	800a4c8 <HAL_TIM_ConfigClockSource+0x444>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a59      	ldr	r2, [pc, #356]	; (800a5f8 <HAL_TIM_ConfigClockSource+0x574>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d018      	beq.n	800a4c8 <HAL_TIM_ConfigClockSource+0x444>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a58      	ldr	r2, [pc, #352]	; (800a5fc <HAL_TIM_ConfigClockSource+0x578>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d013      	beq.n	800a4c8 <HAL_TIM_ConfigClockSource+0x444>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a56      	ldr	r2, [pc, #344]	; (800a600 <HAL_TIM_ConfigClockSource+0x57c>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d00e      	beq.n	800a4c8 <HAL_TIM_ConfigClockSource+0x444>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a56      	ldr	r2, [pc, #344]	; (800a608 <HAL_TIM_ConfigClockSource+0x584>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d009      	beq.n	800a4c8 <HAL_TIM_ConfigClockSource+0x444>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a54      	ldr	r2, [pc, #336]	; (800a60c <HAL_TIM_ConfigClockSource+0x588>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d004      	beq.n	800a4c8 <HAL_TIM_ConfigClockSource+0x444>
 800a4be:	f241 11ca 	movw	r1, #4554	; 0x11ca
 800a4c2:	4850      	ldr	r0, [pc, #320]	; (800a604 <HAL_TIM_ConfigClockSource+0x580>)
 800a4c4:	f7f8 fe3f 	bl	8003146 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4d0:	d014      	beq.n	800a4fc <HAL_TIM_ConfigClockSource+0x478>
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d010      	beq.n	800a4fc <HAL_TIM_ConfigClockSource+0x478>
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00c      	beq.n	800a4fc <HAL_TIM_ConfigClockSource+0x478>
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	2b02      	cmp	r3, #2
 800a4e8:	d008      	beq.n	800a4fc <HAL_TIM_ConfigClockSource+0x478>
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	2b0a      	cmp	r3, #10
 800a4f0:	d004      	beq.n	800a4fc <HAL_TIM_ConfigClockSource+0x478>
 800a4f2:	f241 11cd 	movw	r1, #4557	; 0x11cd
 800a4f6:	4843      	ldr	r0, [pc, #268]	; (800a604 <HAL_TIM_ConfigClockSource+0x580>)
 800a4f8:	f7f8 fe25 	bl	8003146 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	2b0f      	cmp	r3, #15
 800a502:	d904      	bls.n	800a50e <HAL_TIM_ConfigClockSource+0x48a>
 800a504:	f241 11ce 	movw	r1, #4558	; 0x11ce
 800a508:	483e      	ldr	r0, [pc, #248]	; (800a604 <HAL_TIM_ConfigClockSource+0x580>)
 800a50a:	f7f8 fe1c 	bl	8003146 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6818      	ldr	r0, [r3, #0]
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	6859      	ldr	r1, [r3, #4]
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	461a      	mov	r2, r3
 800a51c:	f000 fc7c 	bl	800ae18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2150      	movs	r1, #80	; 0x50
 800a526:	4618      	mov	r0, r3
 800a528:	f000 fd8b 	bl	800b042 <TIM_ITRx_SetConfig>
      break;
 800a52c:	e109      	b.n	800a742 <HAL_TIM_ConfigClockSource+0x6be>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a2f      	ldr	r2, [pc, #188]	; (800a5f0 <HAL_TIM_ConfigClockSource+0x56c>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d027      	beq.n	800a588 <HAL_TIM_ConfigClockSource+0x504>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a540:	d022      	beq.n	800a588 <HAL_TIM_ConfigClockSource+0x504>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a2b      	ldr	r2, [pc, #172]	; (800a5f4 <HAL_TIM_ConfigClockSource+0x570>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d01d      	beq.n	800a588 <HAL_TIM_ConfigClockSource+0x504>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a29      	ldr	r2, [pc, #164]	; (800a5f8 <HAL_TIM_ConfigClockSource+0x574>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d018      	beq.n	800a588 <HAL_TIM_ConfigClockSource+0x504>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a28      	ldr	r2, [pc, #160]	; (800a5fc <HAL_TIM_ConfigClockSource+0x578>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d013      	beq.n	800a588 <HAL_TIM_ConfigClockSource+0x504>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a26      	ldr	r2, [pc, #152]	; (800a600 <HAL_TIM_ConfigClockSource+0x57c>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d00e      	beq.n	800a588 <HAL_TIM_ConfigClockSource+0x504>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a26      	ldr	r2, [pc, #152]	; (800a608 <HAL_TIM_ConfigClockSource+0x584>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d009      	beq.n	800a588 <HAL_TIM_ConfigClockSource+0x504>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a24      	ldr	r2, [pc, #144]	; (800a60c <HAL_TIM_ConfigClockSource+0x588>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d004      	beq.n	800a588 <HAL_TIM_ConfigClockSource+0x504>
 800a57e:	f241 11da 	movw	r1, #4570	; 0x11da
 800a582:	4820      	ldr	r0, [pc, #128]	; (800a604 <HAL_TIM_ConfigClockSource+0x580>)
 800a584:	f7f8 fddf 	bl	8003146 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a590:	d014      	beq.n	800a5bc <HAL_TIM_ConfigClockSource+0x538>
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d010      	beq.n	800a5bc <HAL_TIM_ConfigClockSource+0x538>
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d00c      	beq.n	800a5bc <HAL_TIM_ConfigClockSource+0x538>
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d008      	beq.n	800a5bc <HAL_TIM_ConfigClockSource+0x538>
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	2b0a      	cmp	r3, #10
 800a5b0:	d004      	beq.n	800a5bc <HAL_TIM_ConfigClockSource+0x538>
 800a5b2:	f241 11dd 	movw	r1, #4573	; 0x11dd
 800a5b6:	4813      	ldr	r0, [pc, #76]	; (800a604 <HAL_TIM_ConfigClockSource+0x580>)
 800a5b8:	f7f8 fdc5 	bl	8003146 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	2b0f      	cmp	r3, #15
 800a5c2:	d904      	bls.n	800a5ce <HAL_TIM_ConfigClockSource+0x54a>
 800a5c4:	f241 11de 	movw	r1, #4574	; 0x11de
 800a5c8:	480e      	ldr	r0, [pc, #56]	; (800a604 <HAL_TIM_ConfigClockSource+0x580>)
 800a5ca:	f7f8 fdbc 	bl	8003146 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6818      	ldr	r0, [r3, #0]
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	6859      	ldr	r1, [r3, #4]
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	68db      	ldr	r3, [r3, #12]
 800a5da:	461a      	mov	r2, r3
 800a5dc:	f000 fc88 	bl	800aef0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2160      	movs	r1, #96	; 0x60
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f000 fd2b 	bl	800b042 <TIM_ITRx_SetConfig>
      break;
 800a5ec:	e0a9      	b.n	800a742 <HAL_TIM_ConfigClockSource+0x6be>
 800a5ee:	bf00      	nop
 800a5f0:	40010000 	.word	0x40010000
 800a5f4:	40000400 	.word	0x40000400
 800a5f8:	40000800 	.word	0x40000800
 800a5fc:	40000c00 	.word	0x40000c00
 800a600:	40010400 	.word	0x40010400
 800a604:	0800e25c 	.word	0x0800e25c
 800a608:	40014000 	.word	0x40014000
 800a60c:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a51      	ldr	r2, [pc, #324]	; (800a75c <HAL_TIM_ConfigClockSource+0x6d8>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d027      	beq.n	800a66a <HAL_TIM_ConfigClockSource+0x5e6>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a622:	d022      	beq.n	800a66a <HAL_TIM_ConfigClockSource+0x5e6>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a4d      	ldr	r2, [pc, #308]	; (800a760 <HAL_TIM_ConfigClockSource+0x6dc>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d01d      	beq.n	800a66a <HAL_TIM_ConfigClockSource+0x5e6>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a4c      	ldr	r2, [pc, #304]	; (800a764 <HAL_TIM_ConfigClockSource+0x6e0>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d018      	beq.n	800a66a <HAL_TIM_ConfigClockSource+0x5e6>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a4a      	ldr	r2, [pc, #296]	; (800a768 <HAL_TIM_ConfigClockSource+0x6e4>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d013      	beq.n	800a66a <HAL_TIM_ConfigClockSource+0x5e6>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a49      	ldr	r2, [pc, #292]	; (800a76c <HAL_TIM_ConfigClockSource+0x6e8>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d00e      	beq.n	800a66a <HAL_TIM_ConfigClockSource+0x5e6>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a47      	ldr	r2, [pc, #284]	; (800a770 <HAL_TIM_ConfigClockSource+0x6ec>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d009      	beq.n	800a66a <HAL_TIM_ConfigClockSource+0x5e6>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a46      	ldr	r2, [pc, #280]	; (800a774 <HAL_TIM_ConfigClockSource+0x6f0>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d004      	beq.n	800a66a <HAL_TIM_ConfigClockSource+0x5e6>
 800a660:	f241 11ea 	movw	r1, #4586	; 0x11ea
 800a664:	4844      	ldr	r0, [pc, #272]	; (800a778 <HAL_TIM_ConfigClockSource+0x6f4>)
 800a666:	f7f8 fd6e 	bl	8003146 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a672:	d014      	beq.n	800a69e <HAL_TIM_ConfigClockSource+0x61a>
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d010      	beq.n	800a69e <HAL_TIM_ConfigClockSource+0x61a>
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d00c      	beq.n	800a69e <HAL_TIM_ConfigClockSource+0x61a>
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	2b02      	cmp	r3, #2
 800a68a:	d008      	beq.n	800a69e <HAL_TIM_ConfigClockSource+0x61a>
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	2b0a      	cmp	r3, #10
 800a692:	d004      	beq.n	800a69e <HAL_TIM_ConfigClockSource+0x61a>
 800a694:	f241 11ed 	movw	r1, #4589	; 0x11ed
 800a698:	4837      	ldr	r0, [pc, #220]	; (800a778 <HAL_TIM_ConfigClockSource+0x6f4>)
 800a69a:	f7f8 fd54 	bl	8003146 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	2b0f      	cmp	r3, #15
 800a6a4:	d904      	bls.n	800a6b0 <HAL_TIM_ConfigClockSource+0x62c>
 800a6a6:	f241 11ee 	movw	r1, #4590	; 0x11ee
 800a6aa:	4833      	ldr	r0, [pc, #204]	; (800a778 <HAL_TIM_ConfigClockSource+0x6f4>)
 800a6ac:	f7f8 fd4b 	bl	8003146 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6818      	ldr	r0, [r3, #0]
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	6859      	ldr	r1, [r3, #4]
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	461a      	mov	r2, r3
 800a6be:	f000 fbab 	bl	800ae18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2140      	movs	r1, #64	; 0x40
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f000 fcba 	bl	800b042 <TIM_ITRx_SetConfig>
      break;
 800a6ce:	e038      	b.n	800a742 <HAL_TIM_ConfigClockSource+0x6be>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a21      	ldr	r2, [pc, #132]	; (800a75c <HAL_TIM_ConfigClockSource+0x6d8>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d027      	beq.n	800a72a <HAL_TIM_ConfigClockSource+0x6a6>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6e2:	d022      	beq.n	800a72a <HAL_TIM_ConfigClockSource+0x6a6>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a1d      	ldr	r2, [pc, #116]	; (800a760 <HAL_TIM_ConfigClockSource+0x6dc>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d01d      	beq.n	800a72a <HAL_TIM_ConfigClockSource+0x6a6>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a1c      	ldr	r2, [pc, #112]	; (800a764 <HAL_TIM_ConfigClockSource+0x6e0>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d018      	beq.n	800a72a <HAL_TIM_ConfigClockSource+0x6a6>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a1a      	ldr	r2, [pc, #104]	; (800a768 <HAL_TIM_ConfigClockSource+0x6e4>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d013      	beq.n	800a72a <HAL_TIM_ConfigClockSource+0x6a6>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a19      	ldr	r2, [pc, #100]	; (800a76c <HAL_TIM_ConfigClockSource+0x6e8>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d00e      	beq.n	800a72a <HAL_TIM_ConfigClockSource+0x6a6>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a17      	ldr	r2, [pc, #92]	; (800a770 <HAL_TIM_ConfigClockSource+0x6ec>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d009      	beq.n	800a72a <HAL_TIM_ConfigClockSource+0x6a6>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a16      	ldr	r2, [pc, #88]	; (800a774 <HAL_TIM_ConfigClockSource+0x6f0>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d004      	beq.n	800a72a <HAL_TIM_ConfigClockSource+0x6a6>
 800a720:	f241 11fd 	movw	r1, #4605	; 0x11fd
 800a724:	4814      	ldr	r0, [pc, #80]	; (800a778 <HAL_TIM_ConfigClockSource+0x6f4>)
 800a726:	f7f8 fd0e 	bl	8003146 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4619      	mov	r1, r3
 800a734:	4610      	mov	r0, r2
 800a736:	f000 fc84 	bl	800b042 <TIM_ITRx_SetConfig>
      break;
 800a73a:	e002      	b.n	800a742 <HAL_TIM_ConfigClockSource+0x6be>
      break;
 800a73c:	bf00      	nop
 800a73e:	e000      	b.n	800a742 <HAL_TIM_ConfigClockSource+0x6be>
      break;
 800a740:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2201      	movs	r2, #1
 800a746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a752:	2300      	movs	r3, #0
}
 800a754:	4618      	mov	r0, r3
 800a756:	3710      	adds	r7, #16
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	40010000 	.word	0x40010000
 800a760:	40000400 	.word	0x40000400
 800a764:	40000800 	.word	0x40000800
 800a768:	40000c00 	.word	0x40000c00
 800a76c:	40010400 	.word	0x40010400
 800a770:	40014000 	.word	0x40014000
 800a774:	40001800 	.word	0x40001800
 800a778:	0800e25c 	.word	0x0800e25c

0800a77c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b085      	sub	sp, #20
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	4a40      	ldr	r2, [pc, #256]	; (800a890 <TIM_Base_SetConfig+0x114>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d013      	beq.n	800a7bc <TIM_Base_SetConfig+0x40>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a79a:	d00f      	beq.n	800a7bc <TIM_Base_SetConfig+0x40>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4a3d      	ldr	r2, [pc, #244]	; (800a894 <TIM_Base_SetConfig+0x118>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d00b      	beq.n	800a7bc <TIM_Base_SetConfig+0x40>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4a3c      	ldr	r2, [pc, #240]	; (800a898 <TIM_Base_SetConfig+0x11c>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d007      	beq.n	800a7bc <TIM_Base_SetConfig+0x40>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a3b      	ldr	r2, [pc, #236]	; (800a89c <TIM_Base_SetConfig+0x120>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d003      	beq.n	800a7bc <TIM_Base_SetConfig+0x40>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	4a3a      	ldr	r2, [pc, #232]	; (800a8a0 <TIM_Base_SetConfig+0x124>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d108      	bne.n	800a7ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	68fa      	ldr	r2, [r7, #12]
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	4a2f      	ldr	r2, [pc, #188]	; (800a890 <TIM_Base_SetConfig+0x114>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d02b      	beq.n	800a82e <TIM_Base_SetConfig+0xb2>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7dc:	d027      	beq.n	800a82e <TIM_Base_SetConfig+0xb2>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	4a2c      	ldr	r2, [pc, #176]	; (800a894 <TIM_Base_SetConfig+0x118>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d023      	beq.n	800a82e <TIM_Base_SetConfig+0xb2>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4a2b      	ldr	r2, [pc, #172]	; (800a898 <TIM_Base_SetConfig+0x11c>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d01f      	beq.n	800a82e <TIM_Base_SetConfig+0xb2>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4a2a      	ldr	r2, [pc, #168]	; (800a89c <TIM_Base_SetConfig+0x120>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d01b      	beq.n	800a82e <TIM_Base_SetConfig+0xb2>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4a29      	ldr	r2, [pc, #164]	; (800a8a0 <TIM_Base_SetConfig+0x124>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d017      	beq.n	800a82e <TIM_Base_SetConfig+0xb2>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4a28      	ldr	r2, [pc, #160]	; (800a8a4 <TIM_Base_SetConfig+0x128>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d013      	beq.n	800a82e <TIM_Base_SetConfig+0xb2>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	4a27      	ldr	r2, [pc, #156]	; (800a8a8 <TIM_Base_SetConfig+0x12c>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d00f      	beq.n	800a82e <TIM_Base_SetConfig+0xb2>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	4a26      	ldr	r2, [pc, #152]	; (800a8ac <TIM_Base_SetConfig+0x130>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d00b      	beq.n	800a82e <TIM_Base_SetConfig+0xb2>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4a25      	ldr	r2, [pc, #148]	; (800a8b0 <TIM_Base_SetConfig+0x134>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d007      	beq.n	800a82e <TIM_Base_SetConfig+0xb2>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	4a24      	ldr	r2, [pc, #144]	; (800a8b4 <TIM_Base_SetConfig+0x138>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d003      	beq.n	800a82e <TIM_Base_SetConfig+0xb2>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	4a23      	ldr	r2, [pc, #140]	; (800a8b8 <TIM_Base_SetConfig+0x13c>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d108      	bne.n	800a840 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	4313      	orrs	r3, r2
 800a83e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	695b      	ldr	r3, [r3, #20]
 800a84a:	4313      	orrs	r3, r2
 800a84c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	689a      	ldr	r2, [r3, #8]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	4a0a      	ldr	r2, [pc, #40]	; (800a890 <TIM_Base_SetConfig+0x114>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d003      	beq.n	800a874 <TIM_Base_SetConfig+0xf8>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	4a0c      	ldr	r2, [pc, #48]	; (800a8a0 <TIM_Base_SetConfig+0x124>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d103      	bne.n	800a87c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	691a      	ldr	r2, [r3, #16]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2201      	movs	r2, #1
 800a880:	615a      	str	r2, [r3, #20]
}
 800a882:	bf00      	nop
 800a884:	3714      	adds	r7, #20
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr
 800a88e:	bf00      	nop
 800a890:	40010000 	.word	0x40010000
 800a894:	40000400 	.word	0x40000400
 800a898:	40000800 	.word	0x40000800
 800a89c:	40000c00 	.word	0x40000c00
 800a8a0:	40010400 	.word	0x40010400
 800a8a4:	40014000 	.word	0x40014000
 800a8a8:	40014400 	.word	0x40014400
 800a8ac:	40014800 	.word	0x40014800
 800a8b0:	40001800 	.word	0x40001800
 800a8b4:	40001c00 	.word	0x40001c00
 800a8b8:	40002000 	.word	0x40002000

0800a8bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b086      	sub	sp, #24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6a1b      	ldr	r3, [r3, #32]
 800a8ca:	f023 0201 	bic.w	r2, r3, #1
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a1b      	ldr	r3, [r3, #32]
 800a8d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	699b      	ldr	r3, [r3, #24]
 800a8e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f023 0303 	bic.w	r3, r3, #3
 800a8f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	f023 0302 	bic.w	r3, r3, #2
 800a904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	689b      	ldr	r3, [r3, #8]
 800a90a:	697a      	ldr	r2, [r7, #20]
 800a90c:	4313      	orrs	r3, r2
 800a90e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a34      	ldr	r2, [pc, #208]	; (800a9e4 <TIM_OC1_SetConfig+0x128>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d003      	beq.n	800a920 <TIM_OC1_SetConfig+0x64>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a33      	ldr	r2, [pc, #204]	; (800a9e8 <TIM_OC1_SetConfig+0x12c>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d119      	bne.n	800a954 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d008      	beq.n	800a93a <TIM_OC1_SetConfig+0x7e>
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	2b08      	cmp	r3, #8
 800a92e:	d004      	beq.n	800a93a <TIM_OC1_SetConfig+0x7e>
 800a930:	f241 7102 	movw	r1, #5890	; 0x1702
 800a934:	482d      	ldr	r0, [pc, #180]	; (800a9ec <TIM_OC1_SetConfig+0x130>)
 800a936:	f7f8 fc06 	bl	8003146 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	f023 0308 	bic.w	r3, r3, #8
 800a940:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	68db      	ldr	r3, [r3, #12]
 800a946:	697a      	ldr	r2, [r7, #20]
 800a948:	4313      	orrs	r3, r2
 800a94a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	f023 0304 	bic.w	r3, r3, #4
 800a952:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	4a23      	ldr	r2, [pc, #140]	; (800a9e4 <TIM_OC1_SetConfig+0x128>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d003      	beq.n	800a964 <TIM_OC1_SetConfig+0xa8>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	4a22      	ldr	r2, [pc, #136]	; (800a9e8 <TIM_OC1_SetConfig+0x12c>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d12d      	bne.n	800a9c0 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	699b      	ldr	r3, [r3, #24]
 800a968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a96c:	d008      	beq.n	800a980 <TIM_OC1_SetConfig+0xc4>
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	699b      	ldr	r3, [r3, #24]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d004      	beq.n	800a980 <TIM_OC1_SetConfig+0xc4>
 800a976:	f241 710f 	movw	r1, #5903	; 0x170f
 800a97a:	481c      	ldr	r0, [pc, #112]	; (800a9ec <TIM_OC1_SetConfig+0x130>)
 800a97c:	f7f8 fbe3 	bl	8003146 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	695b      	ldr	r3, [r3, #20]
 800a984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a988:	d008      	beq.n	800a99c <TIM_OC1_SetConfig+0xe0>
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	695b      	ldr	r3, [r3, #20]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d004      	beq.n	800a99c <TIM_OC1_SetConfig+0xe0>
 800a992:	f241 7110 	movw	r1, #5904	; 0x1710
 800a996:	4815      	ldr	r0, [pc, #84]	; (800a9ec <TIM_OC1_SetConfig+0x130>)
 800a998:	f7f8 fbd5 	bl	8003146 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a9aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	695b      	ldr	r3, [r3, #20]
 800a9b0:	693a      	ldr	r2, [r7, #16]
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	699b      	ldr	r3, [r3, #24]
 800a9ba:	693a      	ldr	r2, [r7, #16]
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	693a      	ldr	r2, [r7, #16]
 800a9c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	68fa      	ldr	r2, [r7, #12]
 800a9ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	685a      	ldr	r2, [r3, #4]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	697a      	ldr	r2, [r7, #20]
 800a9d8:	621a      	str	r2, [r3, #32]
}
 800a9da:	bf00      	nop
 800a9dc:	3718      	adds	r7, #24
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	40010000 	.word	0x40010000
 800a9e8:	40010400 	.word	0x40010400
 800a9ec:	0800e25c 	.word	0x0800e25c

0800a9f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b086      	sub	sp, #24
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a1b      	ldr	r3, [r3, #32]
 800a9fe:	f023 0210 	bic.w	r2, r3, #16
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6a1b      	ldr	r3, [r3, #32]
 800aa0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	699b      	ldr	r3, [r3, #24]
 800aa16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	021b      	lsls	r3, r3, #8
 800aa2e:	68fa      	ldr	r2, [r7, #12]
 800aa30:	4313      	orrs	r3, r2
 800aa32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	f023 0320 	bic.w	r3, r3, #32
 800aa3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	011b      	lsls	r3, r3, #4
 800aa42:	697a      	ldr	r2, [r7, #20]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a35      	ldr	r2, [pc, #212]	; (800ab20 <TIM_OC2_SetConfig+0x130>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d003      	beq.n	800aa58 <TIM_OC2_SetConfig+0x68>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4a34      	ldr	r2, [pc, #208]	; (800ab24 <TIM_OC2_SetConfig+0x134>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d11a      	bne.n	800aa8e <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d008      	beq.n	800aa72 <TIM_OC2_SetConfig+0x82>
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	2b08      	cmp	r3, #8
 800aa66:	d004      	beq.n	800aa72 <TIM_OC2_SetConfig+0x82>
 800aa68:	f241 714d 	movw	r1, #5965	; 0x174d
 800aa6c:	482e      	ldr	r0, [pc, #184]	; (800ab28 <TIM_OC2_SetConfig+0x138>)
 800aa6e:	f7f8 fb6a 	bl	8003146 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	011b      	lsls	r3, r3, #4
 800aa80:	697a      	ldr	r2, [r7, #20]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa8c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a23      	ldr	r2, [pc, #140]	; (800ab20 <TIM_OC2_SetConfig+0x130>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d003      	beq.n	800aa9e <TIM_OC2_SetConfig+0xae>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4a22      	ldr	r2, [pc, #136]	; (800ab24 <TIM_OC2_SetConfig+0x134>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d12f      	bne.n	800aafe <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	699b      	ldr	r3, [r3, #24]
 800aaa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aaa6:	d008      	beq.n	800aaba <TIM_OC2_SetConfig+0xca>
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d004      	beq.n	800aaba <TIM_OC2_SetConfig+0xca>
 800aab0:	f241 715b 	movw	r1, #5979	; 0x175b
 800aab4:	481c      	ldr	r0, [pc, #112]	; (800ab28 <TIM_OC2_SetConfig+0x138>)
 800aab6:	f7f8 fb46 	bl	8003146 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	695b      	ldr	r3, [r3, #20]
 800aabe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aac2:	d008      	beq.n	800aad6 <TIM_OC2_SetConfig+0xe6>
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	695b      	ldr	r3, [r3, #20]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d004      	beq.n	800aad6 <TIM_OC2_SetConfig+0xe6>
 800aacc:	f241 715c 	movw	r1, #5980	; 0x175c
 800aad0:	4815      	ldr	r0, [pc, #84]	; (800ab28 <TIM_OC2_SetConfig+0x138>)
 800aad2:	f7f8 fb38 	bl	8003146 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aadc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	695b      	ldr	r3, [r3, #20]
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	693a      	ldr	r2, [r7, #16]
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	699b      	ldr	r3, [r3, #24]
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	693a      	ldr	r2, [r7, #16]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	693a      	ldr	r2, [r7, #16]
 800ab02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	685a      	ldr	r2, [r3, #4]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	697a      	ldr	r2, [r7, #20]
 800ab16:	621a      	str	r2, [r3, #32]
}
 800ab18:	bf00      	nop
 800ab1a:	3718      	adds	r7, #24
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	40010000 	.word	0x40010000
 800ab24:	40010400 	.word	0x40010400
 800ab28:	0800e25c 	.word	0x0800e25c

0800ab2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b086      	sub	sp, #24
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6a1b      	ldr	r3, [r3, #32]
 800ab3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6a1b      	ldr	r3, [r3, #32]
 800ab46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	69db      	ldr	r3, [r3, #28]
 800ab52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f023 0303 	bic.w	r3, r3, #3
 800ab62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	68fa      	ldr	r2, [r7, #12]
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	021b      	lsls	r3, r3, #8
 800ab7c:	697a      	ldr	r2, [r7, #20]
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4a35      	ldr	r2, [pc, #212]	; (800ac5c <TIM_OC3_SetConfig+0x130>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d003      	beq.n	800ab92 <TIM_OC3_SetConfig+0x66>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4a34      	ldr	r2, [pc, #208]	; (800ac60 <TIM_OC3_SetConfig+0x134>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d11a      	bne.n	800abc8 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d008      	beq.n	800abac <TIM_OC3_SetConfig+0x80>
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	2b08      	cmp	r3, #8
 800aba0:	d004      	beq.n	800abac <TIM_OC3_SetConfig+0x80>
 800aba2:	f241 7198 	movw	r1, #6040	; 0x1798
 800aba6:	482f      	ldr	r0, [pc, #188]	; (800ac64 <TIM_OC3_SetConfig+0x138>)
 800aba8:	f7f8 facd 	bl	8003146 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800abb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	021b      	lsls	r3, r3, #8
 800abba:	697a      	ldr	r2, [r7, #20]
 800abbc:	4313      	orrs	r3, r2
 800abbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800abc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	4a24      	ldr	r2, [pc, #144]	; (800ac5c <TIM_OC3_SetConfig+0x130>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d003      	beq.n	800abd8 <TIM_OC3_SetConfig+0xac>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4a23      	ldr	r2, [pc, #140]	; (800ac60 <TIM_OC3_SetConfig+0x134>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d12f      	bne.n	800ac38 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	699b      	ldr	r3, [r3, #24]
 800abdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abe0:	d008      	beq.n	800abf4 <TIM_OC3_SetConfig+0xc8>
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	699b      	ldr	r3, [r3, #24]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d004      	beq.n	800abf4 <TIM_OC3_SetConfig+0xc8>
 800abea:	f241 71a5 	movw	r1, #6053	; 0x17a5
 800abee:	481d      	ldr	r0, [pc, #116]	; (800ac64 <TIM_OC3_SetConfig+0x138>)
 800abf0:	f7f8 faa9 	bl	8003146 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	695b      	ldr	r3, [r3, #20]
 800abf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abfc:	d008      	beq.n	800ac10 <TIM_OC3_SetConfig+0xe4>
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	695b      	ldr	r3, [r3, #20]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d004      	beq.n	800ac10 <TIM_OC3_SetConfig+0xe4>
 800ac06:	f241 71a6 	movw	r1, #6054	; 0x17a6
 800ac0a:	4816      	ldr	r0, [pc, #88]	; (800ac64 <TIM_OC3_SetConfig+0x138>)
 800ac0c:	f7f8 fa9b 	bl	8003146 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	695b      	ldr	r3, [r3, #20]
 800ac24:	011b      	lsls	r3, r3, #4
 800ac26:	693a      	ldr	r2, [r7, #16]
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	699b      	ldr	r3, [r3, #24]
 800ac30:	011b      	lsls	r3, r3, #4
 800ac32:	693a      	ldr	r2, [r7, #16]
 800ac34:	4313      	orrs	r3, r2
 800ac36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	693a      	ldr	r2, [r7, #16]
 800ac3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	68fa      	ldr	r2, [r7, #12]
 800ac42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	685a      	ldr	r2, [r3, #4]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	697a      	ldr	r2, [r7, #20]
 800ac50:	621a      	str	r2, [r3, #32]
}
 800ac52:	bf00      	nop
 800ac54:	3718      	adds	r7, #24
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	40010000 	.word	0x40010000
 800ac60:	40010400 	.word	0x40010400
 800ac64:	0800e25c 	.word	0x0800e25c

0800ac68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b086      	sub	sp, #24
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a1b      	ldr	r3, [r3, #32]
 800ac76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a1b      	ldr	r3, [r3, #32]
 800ac82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	69db      	ldr	r3, [r3, #28]
 800ac8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	021b      	lsls	r3, r3, #8
 800aca6:	68fa      	ldr	r2, [r7, #12]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800acb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	031b      	lsls	r3, r3, #12
 800acba:	693a      	ldr	r2, [r7, #16]
 800acbc:	4313      	orrs	r3, r2
 800acbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	4a18      	ldr	r2, [pc, #96]	; (800ad24 <TIM_OC4_SetConfig+0xbc>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d003      	beq.n	800acd0 <TIM_OC4_SetConfig+0x68>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	4a17      	ldr	r2, [pc, #92]	; (800ad28 <TIM_OC4_SetConfig+0xc0>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d117      	bne.n	800ad00 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	695b      	ldr	r3, [r3, #20]
 800acd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acd8:	d008      	beq.n	800acec <TIM_OC4_SetConfig+0x84>
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	695b      	ldr	r3, [r3, #20]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d004      	beq.n	800acec <TIM_OC4_SetConfig+0x84>
 800ace2:	f241 71e4 	movw	r1, #6116	; 0x17e4
 800ace6:	4811      	ldr	r0, [pc, #68]	; (800ad2c <TIM_OC4_SetConfig+0xc4>)
 800ace8:	f7f8 fa2d 	bl	8003146 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	695b      	ldr	r3, [r3, #20]
 800acf8:	019b      	lsls	r3, r3, #6
 800acfa:	697a      	ldr	r2, [r7, #20]
 800acfc:	4313      	orrs	r3, r2
 800acfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	697a      	ldr	r2, [r7, #20]
 800ad04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	68fa      	ldr	r2, [r7, #12]
 800ad0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	685a      	ldr	r2, [r3, #4]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	693a      	ldr	r2, [r7, #16]
 800ad18:	621a      	str	r2, [r3, #32]
}
 800ad1a:	bf00      	nop
 800ad1c:	3718      	adds	r7, #24
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	40010000 	.word	0x40010000
 800ad28:	40010400 	.word	0x40010400
 800ad2c:	0800e25c 	.word	0x0800e25c

0800ad30 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b087      	sub	sp, #28
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	60b9      	str	r1, [r7, #8]
 800ad3a:	607a      	str	r2, [r7, #4]
 800ad3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	6a1b      	ldr	r3, [r3, #32]
 800ad42:	f023 0201 	bic.w	r2, r3, #1
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	699b      	ldr	r3, [r3, #24]
 800ad4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	6a1b      	ldr	r3, [r3, #32]
 800ad54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	4a28      	ldr	r2, [pc, #160]	; (800adfc <TIM_TI1_SetConfig+0xcc>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d01b      	beq.n	800ad96 <TIM_TI1_SetConfig+0x66>
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad64:	d017      	beq.n	800ad96 <TIM_TI1_SetConfig+0x66>
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	4a25      	ldr	r2, [pc, #148]	; (800ae00 <TIM_TI1_SetConfig+0xd0>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d013      	beq.n	800ad96 <TIM_TI1_SetConfig+0x66>
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	4a24      	ldr	r2, [pc, #144]	; (800ae04 <TIM_TI1_SetConfig+0xd4>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d00f      	beq.n	800ad96 <TIM_TI1_SetConfig+0x66>
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	4a23      	ldr	r2, [pc, #140]	; (800ae08 <TIM_TI1_SetConfig+0xd8>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d00b      	beq.n	800ad96 <TIM_TI1_SetConfig+0x66>
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	4a22      	ldr	r2, [pc, #136]	; (800ae0c <TIM_TI1_SetConfig+0xdc>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d007      	beq.n	800ad96 <TIM_TI1_SetConfig+0x66>
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	4a21      	ldr	r2, [pc, #132]	; (800ae10 <TIM_TI1_SetConfig+0xe0>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d003      	beq.n	800ad96 <TIM_TI1_SetConfig+0x66>
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	4a20      	ldr	r2, [pc, #128]	; (800ae14 <TIM_TI1_SetConfig+0xe4>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d101      	bne.n	800ad9a <TIM_TI1_SetConfig+0x6a>
 800ad96:	2301      	movs	r3, #1
 800ad98:	e000      	b.n	800ad9c <TIM_TI1_SetConfig+0x6c>
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d008      	beq.n	800adb2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	f023 0303 	bic.w	r3, r3, #3
 800ada6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ada8:	697a      	ldr	r2, [r7, #20]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4313      	orrs	r3, r2
 800adae:	617b      	str	r3, [r7, #20]
 800adb0:	e003      	b.n	800adba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	f043 0301 	orr.w	r3, r3, #1
 800adb8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800adc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	011b      	lsls	r3, r3, #4
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	697a      	ldr	r2, [r7, #20]
 800adca:	4313      	orrs	r3, r2
 800adcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	f023 030a 	bic.w	r3, r3, #10
 800add4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	f003 030a 	and.w	r3, r3, #10
 800addc:	693a      	ldr	r2, [r7, #16]
 800adde:	4313      	orrs	r3, r2
 800ade0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	697a      	ldr	r2, [r7, #20]
 800ade6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	693a      	ldr	r2, [r7, #16]
 800adec:	621a      	str	r2, [r3, #32]
}
 800adee:	bf00      	nop
 800adf0:	371c      	adds	r7, #28
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	40010000 	.word	0x40010000
 800ae00:	40000400 	.word	0x40000400
 800ae04:	40000800 	.word	0x40000800
 800ae08:	40000c00 	.word	0x40000c00
 800ae0c:	40010400 	.word	0x40010400
 800ae10:	40014000 	.word	0x40014000
 800ae14:	40001800 	.word	0x40001800

0800ae18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b087      	sub	sp, #28
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	60f8      	str	r0, [r7, #12]
 800ae20:	60b9      	str	r1, [r7, #8]
 800ae22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6a1b      	ldr	r3, [r3, #32]
 800ae28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	6a1b      	ldr	r3, [r3, #32]
 800ae2e:	f023 0201 	bic.w	r2, r3, #1
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	699b      	ldr	r3, [r3, #24]
 800ae3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	011b      	lsls	r3, r3, #4
 800ae48:	693a      	ldr	r2, [r7, #16]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	f023 030a 	bic.w	r3, r3, #10
 800ae54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae56:	697a      	ldr	r2, [r7, #20]
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	693a      	ldr	r2, [r7, #16]
 800ae62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	697a      	ldr	r2, [r7, #20]
 800ae68:	621a      	str	r2, [r3, #32]
}
 800ae6a:	bf00      	nop
 800ae6c:	371c      	adds	r7, #28
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr

0800ae76 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ae76:	b480      	push	{r7}
 800ae78:	b087      	sub	sp, #28
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	60f8      	str	r0, [r7, #12]
 800ae7e:	60b9      	str	r1, [r7, #8]
 800ae80:	607a      	str	r2, [r7, #4]
 800ae82:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6a1b      	ldr	r3, [r3, #32]
 800ae88:	f023 0210 	bic.w	r2, r3, #16
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	699b      	ldr	r3, [r3, #24]
 800ae94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6a1b      	ldr	r3, [r3, #32]
 800ae9a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aea2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	021b      	lsls	r3, r3, #8
 800aea8:	697a      	ldr	r2, [r7, #20]
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aeb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	031b      	lsls	r3, r3, #12
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	697a      	ldr	r2, [r7, #20]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aec8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	011b      	lsls	r3, r3, #4
 800aece:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800aed2:	693a      	ldr	r2, [r7, #16]
 800aed4:	4313      	orrs	r3, r2
 800aed6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	697a      	ldr	r2, [r7, #20]
 800aedc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	693a      	ldr	r2, [r7, #16]
 800aee2:	621a      	str	r2, [r3, #32]
}
 800aee4:	bf00      	nop
 800aee6:	371c      	adds	r7, #28
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr

0800aef0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b087      	sub	sp, #28
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	60f8      	str	r0, [r7, #12]
 800aef8:	60b9      	str	r1, [r7, #8]
 800aefa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	6a1b      	ldr	r3, [r3, #32]
 800af00:	f023 0210 	bic.w	r2, r3, #16
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	699b      	ldr	r3, [r3, #24]
 800af0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	6a1b      	ldr	r3, [r3, #32]
 800af12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	031b      	lsls	r3, r3, #12
 800af20:	697a      	ldr	r2, [r7, #20]
 800af22:	4313      	orrs	r3, r2
 800af24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	011b      	lsls	r3, r3, #4
 800af32:	693a      	ldr	r2, [r7, #16]
 800af34:	4313      	orrs	r3, r2
 800af36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	697a      	ldr	r2, [r7, #20]
 800af3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	693a      	ldr	r2, [r7, #16]
 800af42:	621a      	str	r2, [r3, #32]
}
 800af44:	bf00      	nop
 800af46:	371c      	adds	r7, #28
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800af50:	b480      	push	{r7}
 800af52:	b087      	sub	sp, #28
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
 800af5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6a1b      	ldr	r3, [r3, #32]
 800af62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	69db      	ldr	r3, [r3, #28]
 800af6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6a1b      	ldr	r3, [r3, #32]
 800af74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	f023 0303 	bic.w	r3, r3, #3
 800af7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800af7e:	697a      	ldr	r2, [r7, #20]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	4313      	orrs	r3, r2
 800af84:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800af8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	011b      	lsls	r3, r3, #4
 800af92:	b2db      	uxtb	r3, r3
 800af94:	697a      	ldr	r2, [r7, #20]
 800af96:	4313      	orrs	r3, r2
 800af98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800afa0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	021b      	lsls	r3, r3, #8
 800afa6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800afaa:	693a      	ldr	r2, [r7, #16]
 800afac:	4313      	orrs	r3, r2
 800afae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	697a      	ldr	r2, [r7, #20]
 800afb4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	693a      	ldr	r2, [r7, #16]
 800afba:	621a      	str	r2, [r3, #32]
}
 800afbc:	bf00      	nop
 800afbe:	371c      	adds	r7, #28
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800afc8:	b480      	push	{r7}
 800afca:	b087      	sub	sp, #28
 800afcc:	af00      	add	r7, sp, #0
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	607a      	str	r2, [r7, #4]
 800afd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	6a1b      	ldr	r3, [r3, #32]
 800afda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	69db      	ldr	r3, [r3, #28]
 800afe6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	6a1b      	ldr	r3, [r3, #32]
 800afec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aff4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	021b      	lsls	r3, r3, #8
 800affa:	697a      	ldr	r2, [r7, #20]
 800affc:	4313      	orrs	r3, r2
 800affe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b006:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	031b      	lsls	r3, r3, #12
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	697a      	ldr	r2, [r7, #20]
 800b010:	4313      	orrs	r3, r2
 800b012:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800b01a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	031b      	lsls	r3, r3, #12
 800b020:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800b024:	693a      	ldr	r2, [r7, #16]
 800b026:	4313      	orrs	r3, r2
 800b028:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	697a      	ldr	r2, [r7, #20]
 800b02e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	693a      	ldr	r2, [r7, #16]
 800b034:	621a      	str	r2, [r3, #32]
}
 800b036:	bf00      	nop
 800b038:	371c      	adds	r7, #28
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b042:	b480      	push	{r7}
 800b044:	b085      	sub	sp, #20
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
 800b04a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b058:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b05a:	683a      	ldr	r2, [r7, #0]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	4313      	orrs	r3, r2
 800b060:	f043 0307 	orr.w	r3, r3, #7
 800b064:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	609a      	str	r2, [r3, #8]
}
 800b06c:	bf00      	nop
 800b06e:	3714      	adds	r7, #20
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b078:	b480      	push	{r7}
 800b07a:	b087      	sub	sp, #28
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	60f8      	str	r0, [r7, #12]
 800b080:	60b9      	str	r1, [r7, #8]
 800b082:	607a      	str	r2, [r7, #4]
 800b084:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b092:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	021a      	lsls	r2, r3, #8
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	431a      	orrs	r2, r3
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	697a      	ldr	r2, [r7, #20]
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	697a      	ldr	r2, [r7, #20]
 800b0aa:	609a      	str	r2, [r3, #8]
}
 800b0ac:	bf00      	nop
 800b0ae:	371c      	adds	r7, #28
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr

0800b0b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b086      	sub	sp, #24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	4a32      	ldr	r2, [pc, #200]	; (800b190 <TIM_CCxChannelCmd+0xd8>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d030      	beq.n	800b12e <TIM_CCxChannelCmd+0x76>
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0d2:	d02c      	beq.n	800b12e <TIM_CCxChannelCmd+0x76>
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	4a2f      	ldr	r2, [pc, #188]	; (800b194 <TIM_CCxChannelCmd+0xdc>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d028      	beq.n	800b12e <TIM_CCxChannelCmd+0x76>
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	4a2e      	ldr	r2, [pc, #184]	; (800b198 <TIM_CCxChannelCmd+0xe0>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d024      	beq.n	800b12e <TIM_CCxChannelCmd+0x76>
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	4a2d      	ldr	r2, [pc, #180]	; (800b19c <TIM_CCxChannelCmd+0xe4>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d020      	beq.n	800b12e <TIM_CCxChannelCmd+0x76>
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	4a2c      	ldr	r2, [pc, #176]	; (800b1a0 <TIM_CCxChannelCmd+0xe8>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d01c      	beq.n	800b12e <TIM_CCxChannelCmd+0x76>
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	4a2b      	ldr	r2, [pc, #172]	; (800b1a4 <TIM_CCxChannelCmd+0xec>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d018      	beq.n	800b12e <TIM_CCxChannelCmd+0x76>
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	4a2a      	ldr	r2, [pc, #168]	; (800b1a8 <TIM_CCxChannelCmd+0xf0>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d014      	beq.n	800b12e <TIM_CCxChannelCmd+0x76>
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	4a29      	ldr	r2, [pc, #164]	; (800b1ac <TIM_CCxChannelCmd+0xf4>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d010      	beq.n	800b12e <TIM_CCxChannelCmd+0x76>
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	4a28      	ldr	r2, [pc, #160]	; (800b1b0 <TIM_CCxChannelCmd+0xf8>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d00c      	beq.n	800b12e <TIM_CCxChannelCmd+0x76>
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	4a27      	ldr	r2, [pc, #156]	; (800b1b4 <TIM_CCxChannelCmd+0xfc>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d008      	beq.n	800b12e <TIM_CCxChannelCmd+0x76>
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	4a26      	ldr	r2, [pc, #152]	; (800b1b8 <TIM_CCxChannelCmd+0x100>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d004      	beq.n	800b12e <TIM_CCxChannelCmd+0x76>
 800b124:	f641 11cc 	movw	r1, #6604	; 0x19cc
 800b128:	4824      	ldr	r0, [pc, #144]	; (800b1bc <TIM_CCxChannelCmd+0x104>)
 800b12a:	f7f8 f80c 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d010      	beq.n	800b156 <TIM_CCxChannelCmd+0x9e>
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	2b04      	cmp	r3, #4
 800b138:	d00d      	beq.n	800b156 <TIM_CCxChannelCmd+0x9e>
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	2b08      	cmp	r3, #8
 800b13e:	d00a      	beq.n	800b156 <TIM_CCxChannelCmd+0x9e>
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	2b0c      	cmp	r3, #12
 800b144:	d007      	beq.n	800b156 <TIM_CCxChannelCmd+0x9e>
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	2b3c      	cmp	r3, #60	; 0x3c
 800b14a:	d004      	beq.n	800b156 <TIM_CCxChannelCmd+0x9e>
 800b14c:	f641 11cd 	movw	r1, #6605	; 0x19cd
 800b150:	481a      	ldr	r0, [pc, #104]	; (800b1bc <TIM_CCxChannelCmd+0x104>)
 800b152:	f7f7 fff8 	bl	8003146 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	f003 031f 	and.w	r3, r3, #31
 800b15c:	2201      	movs	r2, #1
 800b15e:	fa02 f303 	lsl.w	r3, r2, r3
 800b162:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	6a1a      	ldr	r2, [r3, #32]
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	43db      	mvns	r3, r3
 800b16c:	401a      	ands	r2, r3
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	6a1a      	ldr	r2, [r3, #32]
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	f003 031f 	and.w	r3, r3, #31
 800b17c:	6879      	ldr	r1, [r7, #4]
 800b17e:	fa01 f303 	lsl.w	r3, r1, r3
 800b182:	431a      	orrs	r2, r3
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	621a      	str	r2, [r3, #32]
}
 800b188:	bf00      	nop
 800b18a:	3718      	adds	r7, #24
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	40010000 	.word	0x40010000
 800b194:	40000400 	.word	0x40000400
 800b198:	40000800 	.word	0x40000800
 800b19c:	40000c00 	.word	0x40000c00
 800b1a0:	40010400 	.word	0x40010400
 800b1a4:	40014000 	.word	0x40014000
 800b1a8:	40014400 	.word	0x40014400
 800b1ac:	40014800 	.word	0x40014800
 800b1b0:	40001800 	.word	0x40001800
 800b1b4:	40001c00 	.word	0x40001c00
 800b1b8:	40002000 	.word	0x40002000
 800b1bc:	0800e25c 	.word	0x0800e25c

0800b1c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	4a61      	ldr	r2, [pc, #388]	; (800b354 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d027      	beq.n	800b224 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1dc:	d022      	beq.n	800b224 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a5d      	ldr	r2, [pc, #372]	; (800b358 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d01d      	beq.n	800b224 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a5b      	ldr	r2, [pc, #364]	; (800b35c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d018      	beq.n	800b224 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a5a      	ldr	r2, [pc, #360]	; (800b360 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d013      	beq.n	800b224 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a58      	ldr	r2, [pc, #352]	; (800b364 <HAL_TIMEx_MasterConfigSynchronization+0x1a4>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d00e      	beq.n	800b224 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a57      	ldr	r2, [pc, #348]	; (800b368 <HAL_TIMEx_MasterConfigSynchronization+0x1a8>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d009      	beq.n	800b224 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a55      	ldr	r2, [pc, #340]	; (800b36c <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d004      	beq.n	800b224 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800b21a:	f240 6164 	movw	r1, #1636	; 0x664
 800b21e:	4854      	ldr	r0, [pc, #336]	; (800b370 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800b220:	f7f7 ff91 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d020      	beq.n	800b26e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2b10      	cmp	r3, #16
 800b232:	d01c      	beq.n	800b26e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2b20      	cmp	r3, #32
 800b23a:	d018      	beq.n	800b26e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	2b30      	cmp	r3, #48	; 0x30
 800b242:	d014      	beq.n	800b26e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2b40      	cmp	r3, #64	; 0x40
 800b24a:	d010      	beq.n	800b26e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	2b50      	cmp	r3, #80	; 0x50
 800b252:	d00c      	beq.n	800b26e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2b60      	cmp	r3, #96	; 0x60
 800b25a:	d008      	beq.n	800b26e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2b70      	cmp	r3, #112	; 0x70
 800b262:	d004      	beq.n	800b26e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b264:	f240 6165 	movw	r1, #1637	; 0x665
 800b268:	4841      	ldr	r0, [pc, #260]	; (800b370 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800b26a:	f7f7 ff6c 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	2b80      	cmp	r3, #128	; 0x80
 800b274:	d008      	beq.n	800b288 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d004      	beq.n	800b288 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b27e:	f240 6166 	movw	r1, #1638	; 0x666
 800b282:	483b      	ldr	r0, [pc, #236]	; (800b370 <HAL_TIMEx_MasterConfigSynchronization+0x1b0>)
 800b284:	f7f7 ff5f 	bl	8003146 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b28e:	2b01      	cmp	r3, #1
 800b290:	d101      	bne.n	800b296 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b292:	2302      	movs	r3, #2
 800b294:	e05a      	b.n	800b34c <HAL_TIMEx_MasterConfigSynchronization+0x18c>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2201      	movs	r2, #1
 800b29a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2202      	movs	r2, #2
 800b2a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	689b      	ldr	r3, [r3, #8]
 800b2b4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	68fa      	ldr	r2, [r7, #12]
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	68fa      	ldr	r2, [r7, #12]
 800b2ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4a1f      	ldr	r2, [pc, #124]	; (800b354 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d022      	beq.n	800b320 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2e2:	d01d      	beq.n	800b320 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4a1b      	ldr	r2, [pc, #108]	; (800b358 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d018      	beq.n	800b320 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a1a      	ldr	r2, [pc, #104]	; (800b35c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d013      	beq.n	800b320 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a18      	ldr	r2, [pc, #96]	; (800b360 <HAL_TIMEx_MasterConfigSynchronization+0x1a0>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d00e      	beq.n	800b320 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a19      	ldr	r2, [pc, #100]	; (800b36c <HAL_TIMEx_MasterConfigSynchronization+0x1ac>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d009      	beq.n	800b320 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a18      	ldr	r2, [pc, #96]	; (800b374 <HAL_TIMEx_MasterConfigSynchronization+0x1b4>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d004      	beq.n	800b320 <HAL_TIMEx_MasterConfigSynchronization+0x160>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a17      	ldr	r2, [pc, #92]	; (800b378 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d10c      	bne.n	800b33a <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b326:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	68ba      	ldr	r2, [r7, #8]
 800b32e:	4313      	orrs	r3, r2
 800b330:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	68ba      	ldr	r2, [r7, #8]
 800b338:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2201      	movs	r2, #1
 800b33e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3710      	adds	r7, #16
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	40010000 	.word	0x40010000
 800b358:	40000400 	.word	0x40000400
 800b35c:	40000800 	.word	0x40000800
 800b360:	40000c00 	.word	0x40000c00
 800b364:	40001000 	.word	0x40001000
 800b368:	40001400 	.word	0x40001400
 800b36c:	40010400 	.word	0x40010400
 800b370:	0800e294 	.word	0x0800e294
 800b374:	40014000 	.word	0x40014000
 800b378:	40001800 	.word	0x40001800

0800b37c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b386:	2300      	movs	r3, #0
 800b388:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4a5e      	ldr	r2, [pc, #376]	; (800b508 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d009      	beq.n	800b3a8 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a5c      	ldr	r2, [pc, #368]	; (800b50c <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d004      	beq.n	800b3a8 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800b39e:	f240 61a1 	movw	r1, #1697	; 0x6a1
 800b3a2:	485b      	ldr	r0, [pc, #364]	; (800b510 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b3a4:	f7f7 fecf 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3b0:	d008      	beq.n	800b3c4 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d004      	beq.n	800b3c4 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800b3ba:	f240 61a2 	movw	r1, #1698	; 0x6a2
 800b3be:	4854      	ldr	r0, [pc, #336]	; (800b510 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b3c0:	f7f7 fec1 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3cc:	d008      	beq.n	800b3e0 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d004      	beq.n	800b3e0 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800b3d6:	f240 61a3 	movw	r1, #1699	; 0x6a3
 800b3da:	484d      	ldr	r0, [pc, #308]	; (800b510 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b3dc:	f7f7 feb3 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d013      	beq.n	800b410 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3f0:	d00e      	beq.n	800b410 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3fa:	d009      	beq.n	800b410 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b404:	d004      	beq.n	800b410 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800b406:	f240 61a4 	movw	r1, #1700	; 0x6a4
 800b40a:	4841      	ldr	r0, [pc, #260]	; (800b510 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b40c:	f7f7 fe9b 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	2bff      	cmp	r3, #255	; 0xff
 800b416:	d904      	bls.n	800b422 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800b418:	f240 61a5 	movw	r1, #1701	; 0x6a5
 800b41c:	483c      	ldr	r0, [pc, #240]	; (800b510 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b41e:	f7f7 fe92 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	691b      	ldr	r3, [r3, #16]
 800b426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b42a:	d008      	beq.n	800b43e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	691b      	ldr	r3, [r3, #16]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d004      	beq.n	800b43e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b434:	f240 61a6 	movw	r1, #1702	; 0x6a6
 800b438:	4835      	ldr	r0, [pc, #212]	; (800b510 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b43a:	f7f7 fe84 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	695b      	ldr	r3, [r3, #20]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d009      	beq.n	800b45a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	695b      	ldr	r3, [r3, #20]
 800b44a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b44e:	d004      	beq.n	800b45a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800b450:	f240 61a7 	movw	r1, #1703	; 0x6a7
 800b454:	482e      	ldr	r0, [pc, #184]	; (800b510 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b456:	f7f7 fe76 	bl	8003146 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	69db      	ldr	r3, [r3, #28]
 800b45e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b462:	d008      	beq.n	800b476 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	69db      	ldr	r3, [r3, #28]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d004      	beq.n	800b476 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800b46c:	f44f 61d5 	mov.w	r1, #1704	; 0x6a8
 800b470:	4827      	ldr	r0, [pc, #156]	; (800b510 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800b472:	f7f7 fe68 	bl	8003146 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d101      	bne.n	800b484 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 800b480:	2302      	movs	r3, #2
 800b482:	e03d      	b.n	800b500 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2201      	movs	r2, #1
 800b488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	68db      	ldr	r3, [r3, #12]
 800b496:	4313      	orrs	r3, r2
 800b498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	689b      	ldr	r3, [r3, #8]
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	691b      	ldr	r3, [r3, #16]
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	695b      	ldr	r3, [r3, #20]
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	69db      	ldr	r3, [r3, #28]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	68fa      	ldr	r2, [r7, #12]
 800b4f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	3710      	adds	r7, #16
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	40010000 	.word	0x40010000
 800b50c:	40010400 	.word	0x40010400
 800b510:	0800e294 	.word	0x0800e294

0800b514 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d101      	bne.n	800b526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b522:	2301      	movs	r3, #1
 800b524:	e0be      	b.n	800b6a4 <HAL_UART_Init+0x190>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	699b      	ldr	r3, [r3, #24]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d031      	beq.n	800b592 <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4a5e      	ldr	r2, [pc, #376]	; (800b6ac <HAL_UART_Init+0x198>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d013      	beq.n	800b560 <HAL_UART_Init+0x4c>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4a5c      	ldr	r2, [pc, #368]	; (800b6b0 <HAL_UART_Init+0x19c>)
 800b53e:	4293      	cmp	r3, r2
 800b540:	d00e      	beq.n	800b560 <HAL_UART_Init+0x4c>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4a5b      	ldr	r2, [pc, #364]	; (800b6b4 <HAL_UART_Init+0x1a0>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d009      	beq.n	800b560 <HAL_UART_Init+0x4c>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a59      	ldr	r2, [pc, #356]	; (800b6b8 <HAL_UART_Init+0x1a4>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d004      	beq.n	800b560 <HAL_UART_Init+0x4c>
 800b556:	f240 114b 	movw	r1, #331	; 0x14b
 800b55a:	4858      	ldr	r0, [pc, #352]	; (800b6bc <HAL_UART_Init+0x1a8>)
 800b55c:	f7f7 fdf3 	bl	8003146 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	699b      	ldr	r3, [r3, #24]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d041      	beq.n	800b5ec <HAL_UART_Init+0xd8>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	699b      	ldr	r3, [r3, #24]
 800b56c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b570:	d03c      	beq.n	800b5ec <HAL_UART_Init+0xd8>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	699b      	ldr	r3, [r3, #24]
 800b576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b57a:	d037      	beq.n	800b5ec <HAL_UART_Init+0xd8>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	699b      	ldr	r3, [r3, #24]
 800b580:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b584:	d032      	beq.n	800b5ec <HAL_UART_Init+0xd8>
 800b586:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800b58a:	484c      	ldr	r0, [pc, #304]	; (800b6bc <HAL_UART_Init+0x1a8>)
 800b58c:	f7f7 fddb 	bl	8003146 <assert_failed>
 800b590:	e02c      	b.n	800b5ec <HAL_UART_Init+0xd8>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4a45      	ldr	r2, [pc, #276]	; (800b6ac <HAL_UART_Init+0x198>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d027      	beq.n	800b5ec <HAL_UART_Init+0xd8>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a43      	ldr	r2, [pc, #268]	; (800b6b0 <HAL_UART_Init+0x19c>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d022      	beq.n	800b5ec <HAL_UART_Init+0xd8>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a42      	ldr	r2, [pc, #264]	; (800b6b4 <HAL_UART_Init+0x1a0>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d01d      	beq.n	800b5ec <HAL_UART_Init+0xd8>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4a42      	ldr	r2, [pc, #264]	; (800b6c0 <HAL_UART_Init+0x1ac>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d018      	beq.n	800b5ec <HAL_UART_Init+0xd8>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4a41      	ldr	r2, [pc, #260]	; (800b6c4 <HAL_UART_Init+0x1b0>)
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d013      	beq.n	800b5ec <HAL_UART_Init+0xd8>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a3b      	ldr	r2, [pc, #236]	; (800b6b8 <HAL_UART_Init+0x1a4>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d00e      	beq.n	800b5ec <HAL_UART_Init+0xd8>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4a3d      	ldr	r2, [pc, #244]	; (800b6c8 <HAL_UART_Init+0x1b4>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d009      	beq.n	800b5ec <HAL_UART_Init+0xd8>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a3b      	ldr	r2, [pc, #236]	; (800b6cc <HAL_UART_Init+0x1b8>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d004      	beq.n	800b5ec <HAL_UART_Init+0xd8>
 800b5e2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800b5e6:	4835      	ldr	r0, [pc, #212]	; (800b6bc <HAL_UART_Init+0x1a8>)
 800b5e8:	f7f7 fdad 	bl	8003146 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d009      	beq.n	800b608 <HAL_UART_Init+0xf4>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	689b      	ldr	r3, [r3, #8]
 800b5f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5fc:	d004      	beq.n	800b608 <HAL_UART_Init+0xf4>
 800b5fe:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800b602:	482e      	ldr	r0, [pc, #184]	; (800b6bc <HAL_UART_Init+0x1a8>)
 800b604:	f7f7 fd9f 	bl	8003146 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	69db      	ldr	r3, [r3, #28]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d009      	beq.n	800b624 <HAL_UART_Init+0x110>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	69db      	ldr	r3, [r3, #28]
 800b614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b618:	d004      	beq.n	800b624 <HAL_UART_Init+0x110>
 800b61a:	f240 1153 	movw	r1, #339	; 0x153
 800b61e:	4827      	ldr	r0, [pc, #156]	; (800b6bc <HAL_UART_Init+0x1a8>)
 800b620:	f7f7 fd91 	bl	8003146 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d106      	bne.n	800b63e <HAL_UART_Init+0x12a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f7f8 fda9 	bl	8004190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2224      	movs	r2, #36	; 0x24
 800b642:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	68da      	ldr	r2, [r3, #12]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b654:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 fa72 	bl	800bb40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	691a      	ldr	r2, [r3, #16]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b66a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	695a      	ldr	r2, [r3, #20]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b67a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	68da      	ldr	r2, [r3, #12]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b68a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2220      	movs	r2, #32
 800b696:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2220      	movs	r2, #32
 800b69e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b6a2:	2300      	movs	r3, #0
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3708      	adds	r7, #8
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	40011000 	.word	0x40011000
 800b6b0:	40004400 	.word	0x40004400
 800b6b4:	40004800 	.word	0x40004800
 800b6b8:	40011400 	.word	0x40011400
 800b6bc:	0800e2d0 	.word	0x0800e2d0
 800b6c0:	40004c00 	.word	0x40004c00
 800b6c4:	40005000 	.word	0x40005000
 800b6c8:	40007800 	.word	0x40007800
 800b6cc:	40007c00 	.word	0x40007c00

0800b6d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b088      	sub	sp, #32
 800b6d4:	af02      	add	r7, sp, #8
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	603b      	str	r3, [r7, #0]
 800b6dc:	4613      	mov	r3, r2
 800b6de:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	2b20      	cmp	r3, #32
 800b6ee:	f040 8083 	bne.w	800b7f8 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d002      	beq.n	800b6fe <HAL_UART_Transmit+0x2e>
 800b6f8:	88fb      	ldrh	r3, [r7, #6]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d101      	bne.n	800b702 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	e07b      	b.n	800b7fa <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d101      	bne.n	800b710 <HAL_UART_Transmit+0x40>
 800b70c:	2302      	movs	r3, #2
 800b70e:	e074      	b.n	800b7fa <HAL_UART_Transmit+0x12a>
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2201      	movs	r2, #1
 800b714:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2200      	movs	r2, #0
 800b71c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2221      	movs	r2, #33	; 0x21
 800b722:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800b726:	f7f8 fe67 	bl	80043f8 <HAL_GetTick>
 800b72a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	88fa      	ldrh	r2, [r7, #6]
 800b730:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	88fa      	ldrh	r2, [r7, #6]
 800b736:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800b740:	e042      	b.n	800b7c8 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b746:	b29b      	uxth	r3, r3
 800b748:	3b01      	subs	r3, #1
 800b74a:	b29a      	uxth	r2, r3
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	689b      	ldr	r3, [r3, #8]
 800b754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b758:	d122      	bne.n	800b7a0 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	9300      	str	r3, [sp, #0]
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	2200      	movs	r2, #0
 800b762:	2180      	movs	r1, #128	; 0x80
 800b764:	68f8      	ldr	r0, [r7, #12]
 800b766:	f000 f96d 	bl	800ba44 <UART_WaitOnFlagUntilTimeout>
 800b76a:	4603      	mov	r3, r0
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d001      	beq.n	800b774 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800b770:	2303      	movs	r3, #3
 800b772:	e042      	b.n	800b7fa <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	881b      	ldrh	r3, [r3, #0]
 800b77c:	461a      	mov	r2, r3
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b786:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	691b      	ldr	r3, [r3, #16]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d103      	bne.n	800b798 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	3302      	adds	r3, #2
 800b794:	60bb      	str	r3, [r7, #8]
 800b796:	e017      	b.n	800b7c8 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	3301      	adds	r3, #1
 800b79c:	60bb      	str	r3, [r7, #8]
 800b79e:	e013      	b.n	800b7c8 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	9300      	str	r3, [sp, #0]
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	2180      	movs	r1, #128	; 0x80
 800b7aa:	68f8      	ldr	r0, [r7, #12]
 800b7ac:	f000 f94a 	bl	800ba44 <UART_WaitOnFlagUntilTimeout>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d001      	beq.n	800b7ba <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800b7b6:	2303      	movs	r3, #3
 800b7b8:	e01f      	b.n	800b7fa <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	1c5a      	adds	r2, r3, #1
 800b7be:	60ba      	str	r2, [r7, #8]
 800b7c0:	781a      	ldrb	r2, [r3, #0]
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d1b7      	bne.n	800b742 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	9300      	str	r3, [sp, #0]
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	2140      	movs	r1, #64	; 0x40
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	f000 f931 	bl	800ba44 <UART_WaitOnFlagUntilTimeout>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d001      	beq.n	800b7ec <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800b7e8:	2303      	movs	r3, #3
 800b7ea:	e006      	b.n	800b7fa <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2220      	movs	r2, #32
 800b7f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	e000      	b.n	800b7fa <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800b7f8:	2302      	movs	r3, #2
  }
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3718      	adds	r7, #24
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
	...

0800b804 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b086      	sub	sp, #24
 800b808:	af00      	add	r7, sp, #0
 800b80a:	60f8      	str	r0, [r7, #12]
 800b80c:	60b9      	str	r1, [r7, #8]
 800b80e:	4613      	mov	r3, r2
 800b810:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b818:	b2db      	uxtb	r3, r3
 800b81a:	2b20      	cmp	r3, #32
 800b81c:	d166      	bne.n	800b8ec <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d002      	beq.n	800b82a <HAL_UART_Receive_DMA+0x26>
 800b824:	88fb      	ldrh	r3, [r7, #6]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d101      	bne.n	800b82e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b82a:	2301      	movs	r3, #1
 800b82c:	e05f      	b.n	800b8ee <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b834:	2b01      	cmp	r3, #1
 800b836:	d101      	bne.n	800b83c <HAL_UART_Receive_DMA+0x38>
 800b838:	2302      	movs	r3, #2
 800b83a:	e058      	b.n	800b8ee <HAL_UART_Receive_DMA+0xea>
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2201      	movs	r2, #1
 800b840:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800b844:	68ba      	ldr	r2, [r7, #8]
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	88fa      	ldrh	r2, [r7, #6]
 800b84e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2200      	movs	r2, #0
 800b854:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2222      	movs	r2, #34	; 0x22
 800b85a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b862:	4a25      	ldr	r2, [pc, #148]	; (800b8f8 <HAL_UART_Receive_DMA+0xf4>)
 800b864:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b86a:	4a24      	ldr	r2, [pc, #144]	; (800b8fc <HAL_UART_Receive_DMA+0xf8>)
 800b86c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b872:	4a23      	ldr	r2, [pc, #140]	; (800b900 <HAL_UART_Receive_DMA+0xfc>)
 800b874:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b87a:	2200      	movs	r2, #0
 800b87c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800b87e:	f107 0308 	add.w	r3, r7, #8
 800b882:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	3304      	adds	r3, #4
 800b88e:	4619      	mov	r1, r3
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	88fb      	ldrh	r3, [r7, #6]
 800b896:	f7fa f9b5 	bl	8005c04 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800b89a:	2300      	movs	r3, #0
 800b89c:	613b      	str	r3, [r7, #16]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	613b      	str	r3, [r7, #16]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	613b      	str	r3, [r7, #16]
 800b8ae:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	68da      	ldr	r2, [r3, #12]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8c6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	695a      	ldr	r2, [r3, #20]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f042 0201 	orr.w	r2, r2, #1
 800b8d6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	695a      	ldr	r2, [r3, #20]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b8e6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	e000      	b.n	800b8ee <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b8ec:	2302      	movs	r3, #2
  }
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3718      	adds	r7, #24
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	0800b92d 	.word	0x0800b92d
 800b8fc:	0800b995 	.word	0x0800b995
 800b900:	0800b9b1 	.word	0x0800b9b1

0800b904 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b904:	b480      	push	{r7}
 800b906:	b083      	sub	sp, #12
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b90c:	bf00      	nop
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b918:	b480      	push	{r7}
 800b91a:	b083      	sub	sp, #12
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b920:	bf00      	nop
 800b922:	370c      	adds	r7, #12
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b084      	sub	sp, #16
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b938:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b944:	2b00      	cmp	r3, #0
 800b946:	d11e      	bne.n	800b986 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2200      	movs	r2, #0
 800b94c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	68da      	ldr	r2, [r3, #12]
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b95c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	695a      	ldr	r2, [r3, #20]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f022 0201 	bic.w	r2, r2, #1
 800b96c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	695a      	ldr	r2, [r3, #20]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b97c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2220      	movs	r2, #32
 800b982:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f7f7 f936 	bl	8002bf8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b98c:	bf00      	nop
 800b98e:	3710      	adds	r7, #16
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f7ff ffae 	bl	800b904 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9a8:	bf00      	nop
 800b9aa:	3710      	adds	r7, #16
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9c0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	695b      	ldr	r3, [r3, #20]
 800b9c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9cc:	2b80      	cmp	r3, #128	; 0x80
 800b9ce:	bf0c      	ite	eq
 800b9d0:	2301      	moveq	r3, #1
 800b9d2:	2300      	movne	r3, #0
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	2b21      	cmp	r3, #33	; 0x21
 800b9e2:	d108      	bne.n	800b9f6 <UART_DMAError+0x46>
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d005      	beq.n	800b9f6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b9f0:	68b8      	ldr	r0, [r7, #8]
 800b9f2:	f000 f871 	bl	800bad8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	695b      	ldr	r3, [r3, #20]
 800b9fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba00:	2b40      	cmp	r3, #64	; 0x40
 800ba02:	bf0c      	ite	eq
 800ba04:	2301      	moveq	r3, #1
 800ba06:	2300      	movne	r3, #0
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	2b22      	cmp	r3, #34	; 0x22
 800ba16:	d108      	bne.n	800ba2a <UART_DMAError+0x7a>
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d005      	beq.n	800ba2a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	2200      	movs	r2, #0
 800ba22:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ba24:	68b8      	ldr	r0, [r7, #8]
 800ba26:	f000 f86d 	bl	800bb04 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba2e:	f043 0210 	orr.w	r2, r3, #16
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba36:	68b8      	ldr	r0, [r7, #8]
 800ba38:	f7ff ff6e 	bl	800b918 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba3c:	bf00      	nop
 800ba3e:	3710      	adds	r7, #16
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	60f8      	str	r0, [r7, #12]
 800ba4c:	60b9      	str	r1, [r7, #8]
 800ba4e:	603b      	str	r3, [r7, #0]
 800ba50:	4613      	mov	r3, r2
 800ba52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba54:	e02c      	b.n	800bab0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba56:	69bb      	ldr	r3, [r7, #24]
 800ba58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba5c:	d028      	beq.n	800bab0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ba5e:	69bb      	ldr	r3, [r7, #24]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d007      	beq.n	800ba74 <UART_WaitOnFlagUntilTimeout+0x30>
 800ba64:	f7f8 fcc8 	bl	80043f8 <HAL_GetTick>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	1ad3      	subs	r3, r2, r3
 800ba6e:	69ba      	ldr	r2, [r7, #24]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d21d      	bcs.n	800bab0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	68da      	ldr	r2, [r3, #12]
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ba82:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	695a      	ldr	r2, [r3, #20]
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f022 0201 	bic.w	r2, r2, #1
 800ba92:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2220      	movs	r2, #32
 800ba98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2220      	movs	r2, #32
 800baa0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2200      	movs	r2, #0
 800baa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800baac:	2303      	movs	r3, #3
 800baae:	e00f      	b.n	800bad0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	4013      	ands	r3, r2
 800baba:	68ba      	ldr	r2, [r7, #8]
 800babc:	429a      	cmp	r2, r3
 800babe:	bf0c      	ite	eq
 800bac0:	2301      	moveq	r3, #1
 800bac2:	2300      	movne	r3, #0
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	461a      	mov	r2, r3
 800bac8:	79fb      	ldrb	r3, [r7, #7]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d0c3      	beq.n	800ba56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bace:	2300      	movs	r3, #0
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3710      	adds	r7, #16
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	68da      	ldr	r2, [r3, #12]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800baee:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2220      	movs	r2, #32
 800baf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800baf8:	bf00      	nop
 800bafa:	370c      	adds	r7, #12
 800bafc:	46bd      	mov	sp, r7
 800bafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb02:	4770      	bx	lr

0800bb04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b083      	sub	sp, #12
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	68da      	ldr	r2, [r3, #12]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bb1a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	695a      	ldr	r2, [r3, #20]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f022 0201 	bic.w	r2, r2, #1
 800bb2a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2220      	movs	r2, #32
 800bb30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800bb34:	bf00      	nop
 800bb36:	370c      	adds	r7, #12
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb44:	b0bd      	sub	sp, #244	; 0xf4
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800bb4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb50:	685a      	ldr	r2, [r3, #4]
 800bb52:	4bae      	ldr	r3, [pc, #696]	; (800be0c <UART_SetConfig+0x2cc>)
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d904      	bls.n	800bb62 <UART_SetConfig+0x22>
 800bb58:	f640 31fb 	movw	r1, #3067	; 0xbfb
 800bb5c:	48ac      	ldr	r0, [pc, #688]	; (800be10 <UART_SetConfig+0x2d0>)
 800bb5e:	f7f7 faf2 	bl	8003146 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800bb62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d00a      	beq.n	800bb82 <UART_SetConfig+0x42>
 800bb6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb76:	d004      	beq.n	800bb82 <UART_SetConfig+0x42>
 800bb78:	f640 31fc 	movw	r1, #3068	; 0xbfc
 800bb7c:	48a4      	ldr	r0, [pc, #656]	; (800be10 <UART_SetConfig+0x2d0>)
 800bb7e:	f7f7 fae2 	bl	8003146 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800bb82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb86:	691b      	ldr	r3, [r3, #16]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d010      	beq.n	800bbae <UART_SetConfig+0x6e>
 800bb8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb90:	691b      	ldr	r3, [r3, #16]
 800bb92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb96:	d00a      	beq.n	800bbae <UART_SetConfig+0x6e>
 800bb98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb9c:	691b      	ldr	r3, [r3, #16]
 800bb9e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bba2:	d004      	beq.n	800bbae <UART_SetConfig+0x6e>
 800bba4:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800bba8:	4899      	ldr	r0, [pc, #612]	; (800be10 <UART_SetConfig+0x2d0>)
 800bbaa:	f7f7 facc 	bl	8003146 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800bbae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbb2:	695a      	ldr	r2, [r3, #20]
 800bbb4:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800bbb8:	4013      	ands	r3, r2
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d104      	bne.n	800bbc8 <UART_SetConfig+0x88>
 800bbbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbc2:	695b      	ldr	r3, [r3, #20]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d104      	bne.n	800bbd2 <UART_SetConfig+0x92>
 800bbc8:	f640 31fe 	movw	r1, #3070	; 0xbfe
 800bbcc:	4890      	ldr	r0, [pc, #576]	; (800be10 <UART_SetConfig+0x2d0>)
 800bbce:	f7f7 faba 	bl	8003146 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bbd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	691b      	ldr	r3, [r3, #16]
 800bbda:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bbde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbe2:	68d9      	ldr	r1, [r3, #12]
 800bbe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbe8:	681a      	ldr	r2, [r3, #0]
 800bbea:	ea40 0301 	orr.w	r3, r0, r1
 800bbee:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bbf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbf4:	689a      	ldr	r2, [r3, #8]
 800bbf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbfa:	691b      	ldr	r3, [r3, #16]
 800bbfc:	431a      	orrs	r2, r3
 800bbfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc02:	695b      	ldr	r3, [r3, #20]
 800bc04:	431a      	orrs	r2, r3
 800bc06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc0a:	69db      	ldr	r3, [r3, #28]
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800bc12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bc1e:	f021 010c 	bic.w	r1, r1, #12
 800bc22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bc2c:	430b      	orrs	r3, r1
 800bc2e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bc30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	695b      	ldr	r3, [r3, #20]
 800bc38:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bc3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc40:	6999      	ldr	r1, [r3, #24]
 800bc42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc46:	681a      	ldr	r2, [r3, #0]
 800bc48:	ea40 0301 	orr.w	r3, r0, r1
 800bc4c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc52:	69db      	ldr	r3, [r3, #28]
 800bc54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc58:	f040 81a9 	bne.w	800bfae <UART_SetConfig+0x46e>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bc5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	4b6c      	ldr	r3, [pc, #432]	; (800be14 <UART_SetConfig+0x2d4>)
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d006      	beq.n	800bc76 <UART_SetConfig+0x136>
 800bc68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	4b6a      	ldr	r3, [pc, #424]	; (800be18 <UART_SetConfig+0x2d8>)
 800bc70:	429a      	cmp	r2, r3
 800bc72:	f040 80d5 	bne.w	800be20 <UART_SetConfig+0x2e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bc76:	f7fc fd67 	bl	8008748 <HAL_RCC_GetPCLK2Freq>
 800bc7a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bc7e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bc82:	461c      	mov	r4, r3
 800bc84:	f04f 0500 	mov.w	r5, #0
 800bc88:	4622      	mov	r2, r4
 800bc8a:	462b      	mov	r3, r5
 800bc8c:	1891      	adds	r1, r2, r2
 800bc8e:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800bc92:	415b      	adcs	r3, r3
 800bc94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bc98:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800bc9c:	1912      	adds	r2, r2, r4
 800bc9e:	eb45 0303 	adc.w	r3, r5, r3
 800bca2:	f04f 0000 	mov.w	r0, #0
 800bca6:	f04f 0100 	mov.w	r1, #0
 800bcaa:	00d9      	lsls	r1, r3, #3
 800bcac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bcb0:	00d0      	lsls	r0, r2, #3
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	1911      	adds	r1, r2, r4
 800bcb8:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800bcbc:	416b      	adcs	r3, r5
 800bcbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bcc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	461a      	mov	r2, r3
 800bcca:	f04f 0300 	mov.w	r3, #0
 800bcce:	1891      	adds	r1, r2, r2
 800bcd0:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800bcd4:	415b      	adcs	r3, r3
 800bcd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bcda:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800bcde:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800bce2:	f7f4 ff89 	bl	8000bf8 <__aeabi_uldivmod>
 800bce6:	4602      	mov	r2, r0
 800bce8:	460b      	mov	r3, r1
 800bcea:	4b4c      	ldr	r3, [pc, #304]	; (800be1c <UART_SetConfig+0x2dc>)
 800bcec:	fba3 2302 	umull	r2, r3, r3, r2
 800bcf0:	095b      	lsrs	r3, r3, #5
 800bcf2:	011e      	lsls	r6, r3, #4
 800bcf4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bcf8:	461c      	mov	r4, r3
 800bcfa:	f04f 0500 	mov.w	r5, #0
 800bcfe:	4622      	mov	r2, r4
 800bd00:	462b      	mov	r3, r5
 800bd02:	1891      	adds	r1, r2, r2
 800bd04:	67b9      	str	r1, [r7, #120]	; 0x78
 800bd06:	415b      	adcs	r3, r3
 800bd08:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bd0a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800bd0e:	1912      	adds	r2, r2, r4
 800bd10:	eb45 0303 	adc.w	r3, r5, r3
 800bd14:	f04f 0000 	mov.w	r0, #0
 800bd18:	f04f 0100 	mov.w	r1, #0
 800bd1c:	00d9      	lsls	r1, r3, #3
 800bd1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bd22:	00d0      	lsls	r0, r2, #3
 800bd24:	4602      	mov	r2, r0
 800bd26:	460b      	mov	r3, r1
 800bd28:	1911      	adds	r1, r2, r4
 800bd2a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800bd2e:	416b      	adcs	r3, r5
 800bd30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bd34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	f04f 0300 	mov.w	r3, #0
 800bd40:	1891      	adds	r1, r2, r2
 800bd42:	6739      	str	r1, [r7, #112]	; 0x70
 800bd44:	415b      	adcs	r3, r3
 800bd46:	677b      	str	r3, [r7, #116]	; 0x74
 800bd48:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800bd4c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800bd50:	f7f4 ff52 	bl	8000bf8 <__aeabi_uldivmod>
 800bd54:	4602      	mov	r2, r0
 800bd56:	460b      	mov	r3, r1
 800bd58:	4b30      	ldr	r3, [pc, #192]	; (800be1c <UART_SetConfig+0x2dc>)
 800bd5a:	fba3 1302 	umull	r1, r3, r3, r2
 800bd5e:	095b      	lsrs	r3, r3, #5
 800bd60:	2164      	movs	r1, #100	; 0x64
 800bd62:	fb01 f303 	mul.w	r3, r1, r3
 800bd66:	1ad3      	subs	r3, r2, r3
 800bd68:	00db      	lsls	r3, r3, #3
 800bd6a:	3332      	adds	r3, #50	; 0x32
 800bd6c:	4a2b      	ldr	r2, [pc, #172]	; (800be1c <UART_SetConfig+0x2dc>)
 800bd6e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd72:	095b      	lsrs	r3, r3, #5
 800bd74:	005b      	lsls	r3, r3, #1
 800bd76:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bd7a:	441e      	add	r6, r3
 800bd7c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bd80:	4618      	mov	r0, r3
 800bd82:	f04f 0100 	mov.w	r1, #0
 800bd86:	4602      	mov	r2, r0
 800bd88:	460b      	mov	r3, r1
 800bd8a:	1894      	adds	r4, r2, r2
 800bd8c:	66bc      	str	r4, [r7, #104]	; 0x68
 800bd8e:	415b      	adcs	r3, r3
 800bd90:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd92:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800bd96:	1812      	adds	r2, r2, r0
 800bd98:	eb41 0303 	adc.w	r3, r1, r3
 800bd9c:	f04f 0400 	mov.w	r4, #0
 800bda0:	f04f 0500 	mov.w	r5, #0
 800bda4:	00dd      	lsls	r5, r3, #3
 800bda6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bdaa:	00d4      	lsls	r4, r2, #3
 800bdac:	4622      	mov	r2, r4
 800bdae:	462b      	mov	r3, r5
 800bdb0:	1814      	adds	r4, r2, r0
 800bdb2:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800bdb6:	414b      	adcs	r3, r1
 800bdb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bdbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	f04f 0300 	mov.w	r3, #0
 800bdc8:	1891      	adds	r1, r2, r2
 800bdca:	6639      	str	r1, [r7, #96]	; 0x60
 800bdcc:	415b      	adcs	r3, r3
 800bdce:	667b      	str	r3, [r7, #100]	; 0x64
 800bdd0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800bdd4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800bdd8:	f7f4 ff0e 	bl	8000bf8 <__aeabi_uldivmod>
 800bddc:	4602      	mov	r2, r0
 800bdde:	460b      	mov	r3, r1
 800bde0:	4b0e      	ldr	r3, [pc, #56]	; (800be1c <UART_SetConfig+0x2dc>)
 800bde2:	fba3 1302 	umull	r1, r3, r3, r2
 800bde6:	095b      	lsrs	r3, r3, #5
 800bde8:	2164      	movs	r1, #100	; 0x64
 800bdea:	fb01 f303 	mul.w	r3, r1, r3
 800bdee:	1ad3      	subs	r3, r2, r3
 800bdf0:	00db      	lsls	r3, r3, #3
 800bdf2:	3332      	adds	r3, #50	; 0x32
 800bdf4:	4a09      	ldr	r2, [pc, #36]	; (800be1c <UART_SetConfig+0x2dc>)
 800bdf6:	fba2 2303 	umull	r2, r3, r2, r3
 800bdfa:	095b      	lsrs	r3, r3, #5
 800bdfc:	f003 0207 	and.w	r2, r3, #7
 800be00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4432      	add	r2, r6
 800be08:	609a      	str	r2, [r3, #8]
 800be0a:	e277      	b.n	800c2fc <UART_SetConfig+0x7bc>
 800be0c:	00a037a0 	.word	0x00a037a0
 800be10:	0800e2d0 	.word	0x0800e2d0
 800be14:	40011000 	.word	0x40011000
 800be18:	40011400 	.word	0x40011400
 800be1c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800be20:	f7fc fc7e 	bl	8008720 <HAL_RCC_GetPCLK1Freq>
 800be24:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800be28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800be2c:	461c      	mov	r4, r3
 800be2e:	f04f 0500 	mov.w	r5, #0
 800be32:	4622      	mov	r2, r4
 800be34:	462b      	mov	r3, r5
 800be36:	1891      	adds	r1, r2, r2
 800be38:	65b9      	str	r1, [r7, #88]	; 0x58
 800be3a:	415b      	adcs	r3, r3
 800be3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800be42:	1912      	adds	r2, r2, r4
 800be44:	eb45 0303 	adc.w	r3, r5, r3
 800be48:	f04f 0000 	mov.w	r0, #0
 800be4c:	f04f 0100 	mov.w	r1, #0
 800be50:	00d9      	lsls	r1, r3, #3
 800be52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800be56:	00d0      	lsls	r0, r2, #3
 800be58:	4602      	mov	r2, r0
 800be5a:	460b      	mov	r3, r1
 800be5c:	1911      	adds	r1, r2, r4
 800be5e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800be62:	416b      	adcs	r3, r5
 800be64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800be68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	461a      	mov	r2, r3
 800be70:	f04f 0300 	mov.w	r3, #0
 800be74:	1891      	adds	r1, r2, r2
 800be76:	6539      	str	r1, [r7, #80]	; 0x50
 800be78:	415b      	adcs	r3, r3
 800be7a:	657b      	str	r3, [r7, #84]	; 0x54
 800be7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800be80:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800be84:	f7f4 feb8 	bl	8000bf8 <__aeabi_uldivmod>
 800be88:	4602      	mov	r2, r0
 800be8a:	460b      	mov	r3, r1
 800be8c:	4bb3      	ldr	r3, [pc, #716]	; (800c15c <UART_SetConfig+0x61c>)
 800be8e:	fba3 2302 	umull	r2, r3, r3, r2
 800be92:	095b      	lsrs	r3, r3, #5
 800be94:	011e      	lsls	r6, r3, #4
 800be96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800be9a:	461c      	mov	r4, r3
 800be9c:	f04f 0500 	mov.w	r5, #0
 800bea0:	4622      	mov	r2, r4
 800bea2:	462b      	mov	r3, r5
 800bea4:	1891      	adds	r1, r2, r2
 800bea6:	64b9      	str	r1, [r7, #72]	; 0x48
 800bea8:	415b      	adcs	r3, r3
 800beaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800beac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800beb0:	1912      	adds	r2, r2, r4
 800beb2:	eb45 0303 	adc.w	r3, r5, r3
 800beb6:	f04f 0000 	mov.w	r0, #0
 800beba:	f04f 0100 	mov.w	r1, #0
 800bebe:	00d9      	lsls	r1, r3, #3
 800bec0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bec4:	00d0      	lsls	r0, r2, #3
 800bec6:	4602      	mov	r2, r0
 800bec8:	460b      	mov	r3, r1
 800beca:	1911      	adds	r1, r2, r4
 800becc:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800bed0:	416b      	adcs	r3, r5
 800bed2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	461a      	mov	r2, r3
 800bede:	f04f 0300 	mov.w	r3, #0
 800bee2:	1891      	adds	r1, r2, r2
 800bee4:	6439      	str	r1, [r7, #64]	; 0x40
 800bee6:	415b      	adcs	r3, r3
 800bee8:	647b      	str	r3, [r7, #68]	; 0x44
 800beea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800beee:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800bef2:	f7f4 fe81 	bl	8000bf8 <__aeabi_uldivmod>
 800bef6:	4602      	mov	r2, r0
 800bef8:	460b      	mov	r3, r1
 800befa:	4b98      	ldr	r3, [pc, #608]	; (800c15c <UART_SetConfig+0x61c>)
 800befc:	fba3 1302 	umull	r1, r3, r3, r2
 800bf00:	095b      	lsrs	r3, r3, #5
 800bf02:	2164      	movs	r1, #100	; 0x64
 800bf04:	fb01 f303 	mul.w	r3, r1, r3
 800bf08:	1ad3      	subs	r3, r2, r3
 800bf0a:	00db      	lsls	r3, r3, #3
 800bf0c:	3332      	adds	r3, #50	; 0x32
 800bf0e:	4a93      	ldr	r2, [pc, #588]	; (800c15c <UART_SetConfig+0x61c>)
 800bf10:	fba2 2303 	umull	r2, r3, r2, r3
 800bf14:	095b      	lsrs	r3, r3, #5
 800bf16:	005b      	lsls	r3, r3, #1
 800bf18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bf1c:	441e      	add	r6, r3
 800bf1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bf22:	4618      	mov	r0, r3
 800bf24:	f04f 0100 	mov.w	r1, #0
 800bf28:	4602      	mov	r2, r0
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	1894      	adds	r4, r2, r2
 800bf2e:	63bc      	str	r4, [r7, #56]	; 0x38
 800bf30:	415b      	adcs	r3, r3
 800bf32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bf38:	1812      	adds	r2, r2, r0
 800bf3a:	eb41 0303 	adc.w	r3, r1, r3
 800bf3e:	f04f 0400 	mov.w	r4, #0
 800bf42:	f04f 0500 	mov.w	r5, #0
 800bf46:	00dd      	lsls	r5, r3, #3
 800bf48:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bf4c:	00d4      	lsls	r4, r2, #3
 800bf4e:	4622      	mov	r2, r4
 800bf50:	462b      	mov	r3, r5
 800bf52:	1814      	adds	r4, r2, r0
 800bf54:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800bf58:	414b      	adcs	r3, r1
 800bf5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bf5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	461a      	mov	r2, r3
 800bf66:	f04f 0300 	mov.w	r3, #0
 800bf6a:	1891      	adds	r1, r2, r2
 800bf6c:	6339      	str	r1, [r7, #48]	; 0x30
 800bf6e:	415b      	adcs	r3, r3
 800bf70:	637b      	str	r3, [r7, #52]	; 0x34
 800bf72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800bf76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bf7a:	f7f4 fe3d 	bl	8000bf8 <__aeabi_uldivmod>
 800bf7e:	4602      	mov	r2, r0
 800bf80:	460b      	mov	r3, r1
 800bf82:	4b76      	ldr	r3, [pc, #472]	; (800c15c <UART_SetConfig+0x61c>)
 800bf84:	fba3 1302 	umull	r1, r3, r3, r2
 800bf88:	095b      	lsrs	r3, r3, #5
 800bf8a:	2164      	movs	r1, #100	; 0x64
 800bf8c:	fb01 f303 	mul.w	r3, r1, r3
 800bf90:	1ad3      	subs	r3, r2, r3
 800bf92:	00db      	lsls	r3, r3, #3
 800bf94:	3332      	adds	r3, #50	; 0x32
 800bf96:	4a71      	ldr	r2, [pc, #452]	; (800c15c <UART_SetConfig+0x61c>)
 800bf98:	fba2 2303 	umull	r2, r3, r2, r3
 800bf9c:	095b      	lsrs	r3, r3, #5
 800bf9e:	f003 0207 	and.w	r2, r3, #7
 800bfa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4432      	add	r2, r6
 800bfaa:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800bfac:	e1a6      	b.n	800c2fc <UART_SetConfig+0x7bc>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bfae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfb2:	681a      	ldr	r2, [r3, #0]
 800bfb4:	4b6a      	ldr	r3, [pc, #424]	; (800c160 <UART_SetConfig+0x620>)
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d006      	beq.n	800bfc8 <UART_SetConfig+0x488>
 800bfba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	4b68      	ldr	r3, [pc, #416]	; (800c164 <UART_SetConfig+0x624>)
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	f040 80d0 	bne.w	800c168 <UART_SetConfig+0x628>
      pclk = HAL_RCC_GetPCLK2Freq();
 800bfc8:	f7fc fbbe 	bl	8008748 <HAL_RCC_GetPCLK2Freq>
 800bfcc:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bfd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bfd4:	461c      	mov	r4, r3
 800bfd6:	f04f 0500 	mov.w	r5, #0
 800bfda:	4622      	mov	r2, r4
 800bfdc:	462b      	mov	r3, r5
 800bfde:	1891      	adds	r1, r2, r2
 800bfe0:	62b9      	str	r1, [r7, #40]	; 0x28
 800bfe2:	415b      	adcs	r3, r3
 800bfe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bfe6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bfea:	1912      	adds	r2, r2, r4
 800bfec:	eb45 0303 	adc.w	r3, r5, r3
 800bff0:	f04f 0000 	mov.w	r0, #0
 800bff4:	f04f 0100 	mov.w	r1, #0
 800bff8:	00d9      	lsls	r1, r3, #3
 800bffa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bffe:	00d0      	lsls	r0, r2, #3
 800c000:	4602      	mov	r2, r0
 800c002:	460b      	mov	r3, r1
 800c004:	eb12 0a04 	adds.w	sl, r2, r4
 800c008:	eb43 0b05 	adc.w	fp, r3, r5
 800c00c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	4618      	mov	r0, r3
 800c014:	f04f 0100 	mov.w	r1, #0
 800c018:	f04f 0200 	mov.w	r2, #0
 800c01c:	f04f 0300 	mov.w	r3, #0
 800c020:	008b      	lsls	r3, r1, #2
 800c022:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c026:	0082      	lsls	r2, r0, #2
 800c028:	4650      	mov	r0, sl
 800c02a:	4659      	mov	r1, fp
 800c02c:	f7f4 fde4 	bl	8000bf8 <__aeabi_uldivmod>
 800c030:	4602      	mov	r2, r0
 800c032:	460b      	mov	r3, r1
 800c034:	4b49      	ldr	r3, [pc, #292]	; (800c15c <UART_SetConfig+0x61c>)
 800c036:	fba3 2302 	umull	r2, r3, r3, r2
 800c03a:	095b      	lsrs	r3, r3, #5
 800c03c:	011e      	lsls	r6, r3, #4
 800c03e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c042:	4618      	mov	r0, r3
 800c044:	f04f 0100 	mov.w	r1, #0
 800c048:	4602      	mov	r2, r0
 800c04a:	460b      	mov	r3, r1
 800c04c:	1894      	adds	r4, r2, r2
 800c04e:	623c      	str	r4, [r7, #32]
 800c050:	415b      	adcs	r3, r3
 800c052:	627b      	str	r3, [r7, #36]	; 0x24
 800c054:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c058:	1812      	adds	r2, r2, r0
 800c05a:	eb41 0303 	adc.w	r3, r1, r3
 800c05e:	f04f 0400 	mov.w	r4, #0
 800c062:	f04f 0500 	mov.w	r5, #0
 800c066:	00dd      	lsls	r5, r3, #3
 800c068:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c06c:	00d4      	lsls	r4, r2, #3
 800c06e:	4622      	mov	r2, r4
 800c070:	462b      	mov	r3, r5
 800c072:	1814      	adds	r4, r2, r0
 800c074:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800c078:	414b      	adcs	r3, r1
 800c07a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c07e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	4618      	mov	r0, r3
 800c086:	f04f 0100 	mov.w	r1, #0
 800c08a:	f04f 0200 	mov.w	r2, #0
 800c08e:	f04f 0300 	mov.w	r3, #0
 800c092:	008b      	lsls	r3, r1, #2
 800c094:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c098:	0082      	lsls	r2, r0, #2
 800c09a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800c09e:	f7f4 fdab 	bl	8000bf8 <__aeabi_uldivmod>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	4b2d      	ldr	r3, [pc, #180]	; (800c15c <UART_SetConfig+0x61c>)
 800c0a8:	fba3 1302 	umull	r1, r3, r3, r2
 800c0ac:	095b      	lsrs	r3, r3, #5
 800c0ae:	2164      	movs	r1, #100	; 0x64
 800c0b0:	fb01 f303 	mul.w	r3, r1, r3
 800c0b4:	1ad3      	subs	r3, r2, r3
 800c0b6:	011b      	lsls	r3, r3, #4
 800c0b8:	3332      	adds	r3, #50	; 0x32
 800c0ba:	4a28      	ldr	r2, [pc, #160]	; (800c15c <UART_SetConfig+0x61c>)
 800c0bc:	fba2 2303 	umull	r2, r3, r2, r3
 800c0c0:	095b      	lsrs	r3, r3, #5
 800c0c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c0c6:	441e      	add	r6, r3
 800c0c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f04f 0100 	mov.w	r1, #0
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	1894      	adds	r4, r2, r2
 800c0d8:	61bc      	str	r4, [r7, #24]
 800c0da:	415b      	adcs	r3, r3
 800c0dc:	61fb      	str	r3, [r7, #28]
 800c0de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c0e2:	1812      	adds	r2, r2, r0
 800c0e4:	eb41 0303 	adc.w	r3, r1, r3
 800c0e8:	f04f 0400 	mov.w	r4, #0
 800c0ec:	f04f 0500 	mov.w	r5, #0
 800c0f0:	00dd      	lsls	r5, r3, #3
 800c0f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c0f6:	00d4      	lsls	r4, r2, #3
 800c0f8:	4622      	mov	r2, r4
 800c0fa:	462b      	mov	r3, r5
 800c0fc:	1814      	adds	r4, r2, r0
 800c0fe:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800c102:	414b      	adcs	r3, r1
 800c104:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	4618      	mov	r0, r3
 800c110:	f04f 0100 	mov.w	r1, #0
 800c114:	f04f 0200 	mov.w	r2, #0
 800c118:	f04f 0300 	mov.w	r3, #0
 800c11c:	008b      	lsls	r3, r1, #2
 800c11e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c122:	0082      	lsls	r2, r0, #2
 800c124:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800c128:	f7f4 fd66 	bl	8000bf8 <__aeabi_uldivmod>
 800c12c:	4602      	mov	r2, r0
 800c12e:	460b      	mov	r3, r1
 800c130:	4b0a      	ldr	r3, [pc, #40]	; (800c15c <UART_SetConfig+0x61c>)
 800c132:	fba3 1302 	umull	r1, r3, r3, r2
 800c136:	095b      	lsrs	r3, r3, #5
 800c138:	2164      	movs	r1, #100	; 0x64
 800c13a:	fb01 f303 	mul.w	r3, r1, r3
 800c13e:	1ad3      	subs	r3, r2, r3
 800c140:	011b      	lsls	r3, r3, #4
 800c142:	3332      	adds	r3, #50	; 0x32
 800c144:	4a05      	ldr	r2, [pc, #20]	; (800c15c <UART_SetConfig+0x61c>)
 800c146:	fba2 2303 	umull	r2, r3, r2, r3
 800c14a:	095b      	lsrs	r3, r3, #5
 800c14c:	f003 020f 	and.w	r2, r3, #15
 800c150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4432      	add	r2, r6
 800c158:	609a      	str	r2, [r3, #8]
 800c15a:	e0cf      	b.n	800c2fc <UART_SetConfig+0x7bc>
 800c15c:	51eb851f 	.word	0x51eb851f
 800c160:	40011000 	.word	0x40011000
 800c164:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 800c168:	f7fc fada 	bl	8008720 <HAL_RCC_GetPCLK1Freq>
 800c16c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c170:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c174:	461c      	mov	r4, r3
 800c176:	f04f 0500 	mov.w	r5, #0
 800c17a:	4622      	mov	r2, r4
 800c17c:	462b      	mov	r3, r5
 800c17e:	1891      	adds	r1, r2, r2
 800c180:	6139      	str	r1, [r7, #16]
 800c182:	415b      	adcs	r3, r3
 800c184:	617b      	str	r3, [r7, #20]
 800c186:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c18a:	1912      	adds	r2, r2, r4
 800c18c:	eb45 0303 	adc.w	r3, r5, r3
 800c190:	f04f 0000 	mov.w	r0, #0
 800c194:	f04f 0100 	mov.w	r1, #0
 800c198:	00d9      	lsls	r1, r3, #3
 800c19a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c19e:	00d0      	lsls	r0, r2, #3
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	eb12 0804 	adds.w	r8, r2, r4
 800c1a8:	eb43 0905 	adc.w	r9, r3, r5
 800c1ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f04f 0100 	mov.w	r1, #0
 800c1b8:	f04f 0200 	mov.w	r2, #0
 800c1bc:	f04f 0300 	mov.w	r3, #0
 800c1c0:	008b      	lsls	r3, r1, #2
 800c1c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c1c6:	0082      	lsls	r2, r0, #2
 800c1c8:	4640      	mov	r0, r8
 800c1ca:	4649      	mov	r1, r9
 800c1cc:	f7f4 fd14 	bl	8000bf8 <__aeabi_uldivmod>
 800c1d0:	4602      	mov	r2, r0
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	4b4c      	ldr	r3, [pc, #304]	; (800c308 <UART_SetConfig+0x7c8>)
 800c1d6:	fba3 2302 	umull	r2, r3, r3, r2
 800c1da:	095b      	lsrs	r3, r3, #5
 800c1dc:	011e      	lsls	r6, r3, #4
 800c1de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f04f 0100 	mov.w	r1, #0
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	1894      	adds	r4, r2, r2
 800c1ee:	60bc      	str	r4, [r7, #8]
 800c1f0:	415b      	adcs	r3, r3
 800c1f2:	60fb      	str	r3, [r7, #12]
 800c1f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c1f8:	1812      	adds	r2, r2, r0
 800c1fa:	eb41 0303 	adc.w	r3, r1, r3
 800c1fe:	f04f 0400 	mov.w	r4, #0
 800c202:	f04f 0500 	mov.w	r5, #0
 800c206:	00dd      	lsls	r5, r3, #3
 800c208:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c20c:	00d4      	lsls	r4, r2, #3
 800c20e:	4622      	mov	r2, r4
 800c210:	462b      	mov	r3, r5
 800c212:	1814      	adds	r4, r2, r0
 800c214:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800c218:	414b      	adcs	r3, r1
 800c21a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c21e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	4618      	mov	r0, r3
 800c226:	f04f 0100 	mov.w	r1, #0
 800c22a:	f04f 0200 	mov.w	r2, #0
 800c22e:	f04f 0300 	mov.w	r3, #0
 800c232:	008b      	lsls	r3, r1, #2
 800c234:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c238:	0082      	lsls	r2, r0, #2
 800c23a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c23e:	f7f4 fcdb 	bl	8000bf8 <__aeabi_uldivmod>
 800c242:	4602      	mov	r2, r0
 800c244:	460b      	mov	r3, r1
 800c246:	4b30      	ldr	r3, [pc, #192]	; (800c308 <UART_SetConfig+0x7c8>)
 800c248:	fba3 1302 	umull	r1, r3, r3, r2
 800c24c:	095b      	lsrs	r3, r3, #5
 800c24e:	2164      	movs	r1, #100	; 0x64
 800c250:	fb01 f303 	mul.w	r3, r1, r3
 800c254:	1ad3      	subs	r3, r2, r3
 800c256:	011b      	lsls	r3, r3, #4
 800c258:	3332      	adds	r3, #50	; 0x32
 800c25a:	4a2b      	ldr	r2, [pc, #172]	; (800c308 <UART_SetConfig+0x7c8>)
 800c25c:	fba2 2303 	umull	r2, r3, r2, r3
 800c260:	095b      	lsrs	r3, r3, #5
 800c262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c266:	441e      	add	r6, r3
 800c268:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c26c:	4618      	mov	r0, r3
 800c26e:	f04f 0100 	mov.w	r1, #0
 800c272:	4602      	mov	r2, r0
 800c274:	460b      	mov	r3, r1
 800c276:	1894      	adds	r4, r2, r2
 800c278:	603c      	str	r4, [r7, #0]
 800c27a:	415b      	adcs	r3, r3
 800c27c:	607b      	str	r3, [r7, #4]
 800c27e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c282:	1812      	adds	r2, r2, r0
 800c284:	eb41 0303 	adc.w	r3, r1, r3
 800c288:	f04f 0400 	mov.w	r4, #0
 800c28c:	f04f 0500 	mov.w	r5, #0
 800c290:	00dd      	lsls	r5, r3, #3
 800c292:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c296:	00d4      	lsls	r4, r2, #3
 800c298:	4622      	mov	r2, r4
 800c29a:	462b      	mov	r3, r5
 800c29c:	1814      	adds	r4, r2, r0
 800c29e:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800c2a2:	414b      	adcs	r3, r1
 800c2a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c2a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f04f 0100 	mov.w	r1, #0
 800c2b4:	f04f 0200 	mov.w	r2, #0
 800c2b8:	f04f 0300 	mov.w	r3, #0
 800c2bc:	008b      	lsls	r3, r1, #2
 800c2be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c2c2:	0082      	lsls	r2, r0, #2
 800c2c4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800c2c8:	f7f4 fc96 	bl	8000bf8 <__aeabi_uldivmod>
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	4b0d      	ldr	r3, [pc, #52]	; (800c308 <UART_SetConfig+0x7c8>)
 800c2d2:	fba3 1302 	umull	r1, r3, r3, r2
 800c2d6:	095b      	lsrs	r3, r3, #5
 800c2d8:	2164      	movs	r1, #100	; 0x64
 800c2da:	fb01 f303 	mul.w	r3, r1, r3
 800c2de:	1ad3      	subs	r3, r2, r3
 800c2e0:	011b      	lsls	r3, r3, #4
 800c2e2:	3332      	adds	r3, #50	; 0x32
 800c2e4:	4a08      	ldr	r2, [pc, #32]	; (800c308 <UART_SetConfig+0x7c8>)
 800c2e6:	fba2 2303 	umull	r2, r3, r2, r3
 800c2ea:	095b      	lsrs	r3, r3, #5
 800c2ec:	f003 020f 	and.w	r2, r3, #15
 800c2f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4432      	add	r2, r6
 800c2f8:	609a      	str	r2, [r3, #8]
}
 800c2fa:	e7ff      	b.n	800c2fc <UART_SetConfig+0x7bc>
 800c2fc:	bf00      	nop
 800c2fe:	37f4      	adds	r7, #244	; 0xf4
 800c300:	46bd      	mov	sp, r7
 800c302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c306:	bf00      	nop
 800c308:	51eb851f 	.word	0x51eb851f

0800c30c <__errno>:
 800c30c:	4b01      	ldr	r3, [pc, #4]	; (800c314 <__errno+0x8>)
 800c30e:	6818      	ldr	r0, [r3, #0]
 800c310:	4770      	bx	lr
 800c312:	bf00      	nop
 800c314:	20000204 	.word	0x20000204

0800c318 <__libc_init_array>:
 800c318:	b570      	push	{r4, r5, r6, lr}
 800c31a:	4d0d      	ldr	r5, [pc, #52]	; (800c350 <__libc_init_array+0x38>)
 800c31c:	4c0d      	ldr	r4, [pc, #52]	; (800c354 <__libc_init_array+0x3c>)
 800c31e:	1b64      	subs	r4, r4, r5
 800c320:	10a4      	asrs	r4, r4, #2
 800c322:	2600      	movs	r6, #0
 800c324:	42a6      	cmp	r6, r4
 800c326:	d109      	bne.n	800c33c <__libc_init_array+0x24>
 800c328:	4d0b      	ldr	r5, [pc, #44]	; (800c358 <__libc_init_array+0x40>)
 800c32a:	4c0c      	ldr	r4, [pc, #48]	; (800c35c <__libc_init_array+0x44>)
 800c32c:	f001 fea2 	bl	800e074 <_init>
 800c330:	1b64      	subs	r4, r4, r5
 800c332:	10a4      	asrs	r4, r4, #2
 800c334:	2600      	movs	r6, #0
 800c336:	42a6      	cmp	r6, r4
 800c338:	d105      	bne.n	800c346 <__libc_init_array+0x2e>
 800c33a:	bd70      	pop	{r4, r5, r6, pc}
 800c33c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c340:	4798      	blx	r3
 800c342:	3601      	adds	r6, #1
 800c344:	e7ee      	b.n	800c324 <__libc_init_array+0xc>
 800c346:	f855 3b04 	ldr.w	r3, [r5], #4
 800c34a:	4798      	blx	r3
 800c34c:	3601      	adds	r6, #1
 800c34e:	e7f2      	b.n	800c336 <__libc_init_array+0x1e>
 800c350:	0800e5b8 	.word	0x0800e5b8
 800c354:	0800e5b8 	.word	0x0800e5b8
 800c358:	0800e5b8 	.word	0x0800e5b8
 800c35c:	0800e5bc 	.word	0x0800e5bc

0800c360 <memset>:
 800c360:	4402      	add	r2, r0
 800c362:	4603      	mov	r3, r0
 800c364:	4293      	cmp	r3, r2
 800c366:	d100      	bne.n	800c36a <memset+0xa>
 800c368:	4770      	bx	lr
 800c36a:	f803 1b01 	strb.w	r1, [r3], #1
 800c36e:	e7f9      	b.n	800c364 <memset+0x4>

0800c370 <atan>:
 800c370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c374:	ec55 4b10 	vmov	r4, r5, d0
 800c378:	4bc3      	ldr	r3, [pc, #780]	; (800c688 <atan+0x318>)
 800c37a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c37e:	429e      	cmp	r6, r3
 800c380:	46ab      	mov	fp, r5
 800c382:	dd18      	ble.n	800c3b6 <atan+0x46>
 800c384:	4bc1      	ldr	r3, [pc, #772]	; (800c68c <atan+0x31c>)
 800c386:	429e      	cmp	r6, r3
 800c388:	dc01      	bgt.n	800c38e <atan+0x1e>
 800c38a:	d109      	bne.n	800c3a0 <atan+0x30>
 800c38c:	b144      	cbz	r4, 800c3a0 <atan+0x30>
 800c38e:	4622      	mov	r2, r4
 800c390:	462b      	mov	r3, r5
 800c392:	4620      	mov	r0, r4
 800c394:	4629      	mov	r1, r5
 800c396:	f7f3 ff31 	bl	80001fc <__adddf3>
 800c39a:	4604      	mov	r4, r0
 800c39c:	460d      	mov	r5, r1
 800c39e:	e006      	b.n	800c3ae <atan+0x3e>
 800c3a0:	f1bb 0f00 	cmp.w	fp, #0
 800c3a4:	f300 8131 	bgt.w	800c60a <atan+0x29a>
 800c3a8:	a59b      	add	r5, pc, #620	; (adr r5, 800c618 <atan+0x2a8>)
 800c3aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c3ae:	ec45 4b10 	vmov	d0, r4, r5
 800c3b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3b6:	4bb6      	ldr	r3, [pc, #728]	; (800c690 <atan+0x320>)
 800c3b8:	429e      	cmp	r6, r3
 800c3ba:	dc14      	bgt.n	800c3e6 <atan+0x76>
 800c3bc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c3c0:	429e      	cmp	r6, r3
 800c3c2:	dc0d      	bgt.n	800c3e0 <atan+0x70>
 800c3c4:	a396      	add	r3, pc, #600	; (adr r3, 800c620 <atan+0x2b0>)
 800c3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ca:	ee10 0a10 	vmov	r0, s0
 800c3ce:	4629      	mov	r1, r5
 800c3d0:	f7f3 ff14 	bl	80001fc <__adddf3>
 800c3d4:	4baf      	ldr	r3, [pc, #700]	; (800c694 <atan+0x324>)
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	f7f4 fb56 	bl	8000a88 <__aeabi_dcmpgt>
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	d1e6      	bne.n	800c3ae <atan+0x3e>
 800c3e0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c3e4:	e02b      	b.n	800c43e <atan+0xce>
 800c3e6:	f000 f9b3 	bl	800c750 <fabs>
 800c3ea:	4bab      	ldr	r3, [pc, #684]	; (800c698 <atan+0x328>)
 800c3ec:	429e      	cmp	r6, r3
 800c3ee:	ec55 4b10 	vmov	r4, r5, d0
 800c3f2:	f300 80bf 	bgt.w	800c574 <atan+0x204>
 800c3f6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c3fa:	429e      	cmp	r6, r3
 800c3fc:	f300 80a0 	bgt.w	800c540 <atan+0x1d0>
 800c400:	ee10 2a10 	vmov	r2, s0
 800c404:	ee10 0a10 	vmov	r0, s0
 800c408:	462b      	mov	r3, r5
 800c40a:	4629      	mov	r1, r5
 800c40c:	f7f3 fef6 	bl	80001fc <__adddf3>
 800c410:	4ba0      	ldr	r3, [pc, #640]	; (800c694 <atan+0x324>)
 800c412:	2200      	movs	r2, #0
 800c414:	f7f3 fef0 	bl	80001f8 <__aeabi_dsub>
 800c418:	2200      	movs	r2, #0
 800c41a:	4606      	mov	r6, r0
 800c41c:	460f      	mov	r7, r1
 800c41e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c422:	4620      	mov	r0, r4
 800c424:	4629      	mov	r1, r5
 800c426:	f7f3 fee9 	bl	80001fc <__adddf3>
 800c42a:	4602      	mov	r2, r0
 800c42c:	460b      	mov	r3, r1
 800c42e:	4630      	mov	r0, r6
 800c430:	4639      	mov	r1, r7
 800c432:	f7f4 f9c3 	bl	80007bc <__aeabi_ddiv>
 800c436:	f04f 0a00 	mov.w	sl, #0
 800c43a:	4604      	mov	r4, r0
 800c43c:	460d      	mov	r5, r1
 800c43e:	4622      	mov	r2, r4
 800c440:	462b      	mov	r3, r5
 800c442:	4620      	mov	r0, r4
 800c444:	4629      	mov	r1, r5
 800c446:	f7f4 f88f 	bl	8000568 <__aeabi_dmul>
 800c44a:	4602      	mov	r2, r0
 800c44c:	460b      	mov	r3, r1
 800c44e:	4680      	mov	r8, r0
 800c450:	4689      	mov	r9, r1
 800c452:	f7f4 f889 	bl	8000568 <__aeabi_dmul>
 800c456:	a374      	add	r3, pc, #464	; (adr r3, 800c628 <atan+0x2b8>)
 800c458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45c:	4606      	mov	r6, r0
 800c45e:	460f      	mov	r7, r1
 800c460:	f7f4 f882 	bl	8000568 <__aeabi_dmul>
 800c464:	a372      	add	r3, pc, #456	; (adr r3, 800c630 <atan+0x2c0>)
 800c466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46a:	f7f3 fec7 	bl	80001fc <__adddf3>
 800c46e:	4632      	mov	r2, r6
 800c470:	463b      	mov	r3, r7
 800c472:	f7f4 f879 	bl	8000568 <__aeabi_dmul>
 800c476:	a370      	add	r3, pc, #448	; (adr r3, 800c638 <atan+0x2c8>)
 800c478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47c:	f7f3 febe 	bl	80001fc <__adddf3>
 800c480:	4632      	mov	r2, r6
 800c482:	463b      	mov	r3, r7
 800c484:	f7f4 f870 	bl	8000568 <__aeabi_dmul>
 800c488:	a36d      	add	r3, pc, #436	; (adr r3, 800c640 <atan+0x2d0>)
 800c48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48e:	f7f3 feb5 	bl	80001fc <__adddf3>
 800c492:	4632      	mov	r2, r6
 800c494:	463b      	mov	r3, r7
 800c496:	f7f4 f867 	bl	8000568 <__aeabi_dmul>
 800c49a:	a36b      	add	r3, pc, #428	; (adr r3, 800c648 <atan+0x2d8>)
 800c49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a0:	f7f3 feac 	bl	80001fc <__adddf3>
 800c4a4:	4632      	mov	r2, r6
 800c4a6:	463b      	mov	r3, r7
 800c4a8:	f7f4 f85e 	bl	8000568 <__aeabi_dmul>
 800c4ac:	a368      	add	r3, pc, #416	; (adr r3, 800c650 <atan+0x2e0>)
 800c4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b2:	f7f3 fea3 	bl	80001fc <__adddf3>
 800c4b6:	4642      	mov	r2, r8
 800c4b8:	464b      	mov	r3, r9
 800c4ba:	f7f4 f855 	bl	8000568 <__aeabi_dmul>
 800c4be:	a366      	add	r3, pc, #408	; (adr r3, 800c658 <atan+0x2e8>)
 800c4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c4:	4680      	mov	r8, r0
 800c4c6:	4689      	mov	r9, r1
 800c4c8:	4630      	mov	r0, r6
 800c4ca:	4639      	mov	r1, r7
 800c4cc:	f7f4 f84c 	bl	8000568 <__aeabi_dmul>
 800c4d0:	a363      	add	r3, pc, #396	; (adr r3, 800c660 <atan+0x2f0>)
 800c4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d6:	f7f3 fe8f 	bl	80001f8 <__aeabi_dsub>
 800c4da:	4632      	mov	r2, r6
 800c4dc:	463b      	mov	r3, r7
 800c4de:	f7f4 f843 	bl	8000568 <__aeabi_dmul>
 800c4e2:	a361      	add	r3, pc, #388	; (adr r3, 800c668 <atan+0x2f8>)
 800c4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e8:	f7f3 fe86 	bl	80001f8 <__aeabi_dsub>
 800c4ec:	4632      	mov	r2, r6
 800c4ee:	463b      	mov	r3, r7
 800c4f0:	f7f4 f83a 	bl	8000568 <__aeabi_dmul>
 800c4f4:	a35e      	add	r3, pc, #376	; (adr r3, 800c670 <atan+0x300>)
 800c4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fa:	f7f3 fe7d 	bl	80001f8 <__aeabi_dsub>
 800c4fe:	4632      	mov	r2, r6
 800c500:	463b      	mov	r3, r7
 800c502:	f7f4 f831 	bl	8000568 <__aeabi_dmul>
 800c506:	a35c      	add	r3, pc, #368	; (adr r3, 800c678 <atan+0x308>)
 800c508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50c:	f7f3 fe74 	bl	80001f8 <__aeabi_dsub>
 800c510:	4632      	mov	r2, r6
 800c512:	463b      	mov	r3, r7
 800c514:	f7f4 f828 	bl	8000568 <__aeabi_dmul>
 800c518:	4602      	mov	r2, r0
 800c51a:	460b      	mov	r3, r1
 800c51c:	4640      	mov	r0, r8
 800c51e:	4649      	mov	r1, r9
 800c520:	f7f3 fe6c 	bl	80001fc <__adddf3>
 800c524:	4622      	mov	r2, r4
 800c526:	462b      	mov	r3, r5
 800c528:	f7f4 f81e 	bl	8000568 <__aeabi_dmul>
 800c52c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800c530:	4602      	mov	r2, r0
 800c532:	460b      	mov	r3, r1
 800c534:	d14b      	bne.n	800c5ce <atan+0x25e>
 800c536:	4620      	mov	r0, r4
 800c538:	4629      	mov	r1, r5
 800c53a:	f7f3 fe5d 	bl	80001f8 <__aeabi_dsub>
 800c53e:	e72c      	b.n	800c39a <atan+0x2a>
 800c540:	ee10 0a10 	vmov	r0, s0
 800c544:	4b53      	ldr	r3, [pc, #332]	; (800c694 <atan+0x324>)
 800c546:	2200      	movs	r2, #0
 800c548:	4629      	mov	r1, r5
 800c54a:	f7f3 fe55 	bl	80001f8 <__aeabi_dsub>
 800c54e:	4b51      	ldr	r3, [pc, #324]	; (800c694 <atan+0x324>)
 800c550:	4606      	mov	r6, r0
 800c552:	460f      	mov	r7, r1
 800c554:	2200      	movs	r2, #0
 800c556:	4620      	mov	r0, r4
 800c558:	4629      	mov	r1, r5
 800c55a:	f7f3 fe4f 	bl	80001fc <__adddf3>
 800c55e:	4602      	mov	r2, r0
 800c560:	460b      	mov	r3, r1
 800c562:	4630      	mov	r0, r6
 800c564:	4639      	mov	r1, r7
 800c566:	f7f4 f929 	bl	80007bc <__aeabi_ddiv>
 800c56a:	f04f 0a01 	mov.w	sl, #1
 800c56e:	4604      	mov	r4, r0
 800c570:	460d      	mov	r5, r1
 800c572:	e764      	b.n	800c43e <atan+0xce>
 800c574:	4b49      	ldr	r3, [pc, #292]	; (800c69c <atan+0x32c>)
 800c576:	429e      	cmp	r6, r3
 800c578:	da1d      	bge.n	800c5b6 <atan+0x246>
 800c57a:	ee10 0a10 	vmov	r0, s0
 800c57e:	4b48      	ldr	r3, [pc, #288]	; (800c6a0 <atan+0x330>)
 800c580:	2200      	movs	r2, #0
 800c582:	4629      	mov	r1, r5
 800c584:	f7f3 fe38 	bl	80001f8 <__aeabi_dsub>
 800c588:	4b45      	ldr	r3, [pc, #276]	; (800c6a0 <atan+0x330>)
 800c58a:	4606      	mov	r6, r0
 800c58c:	460f      	mov	r7, r1
 800c58e:	2200      	movs	r2, #0
 800c590:	4620      	mov	r0, r4
 800c592:	4629      	mov	r1, r5
 800c594:	f7f3 ffe8 	bl	8000568 <__aeabi_dmul>
 800c598:	4b3e      	ldr	r3, [pc, #248]	; (800c694 <atan+0x324>)
 800c59a:	2200      	movs	r2, #0
 800c59c:	f7f3 fe2e 	bl	80001fc <__adddf3>
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	4630      	mov	r0, r6
 800c5a6:	4639      	mov	r1, r7
 800c5a8:	f7f4 f908 	bl	80007bc <__aeabi_ddiv>
 800c5ac:	f04f 0a02 	mov.w	sl, #2
 800c5b0:	4604      	mov	r4, r0
 800c5b2:	460d      	mov	r5, r1
 800c5b4:	e743      	b.n	800c43e <atan+0xce>
 800c5b6:	462b      	mov	r3, r5
 800c5b8:	ee10 2a10 	vmov	r2, s0
 800c5bc:	4939      	ldr	r1, [pc, #228]	; (800c6a4 <atan+0x334>)
 800c5be:	2000      	movs	r0, #0
 800c5c0:	f7f4 f8fc 	bl	80007bc <__aeabi_ddiv>
 800c5c4:	f04f 0a03 	mov.w	sl, #3
 800c5c8:	4604      	mov	r4, r0
 800c5ca:	460d      	mov	r5, r1
 800c5cc:	e737      	b.n	800c43e <atan+0xce>
 800c5ce:	4b36      	ldr	r3, [pc, #216]	; (800c6a8 <atan+0x338>)
 800c5d0:	4e36      	ldr	r6, [pc, #216]	; (800c6ac <atan+0x33c>)
 800c5d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c5d6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c5da:	e9da 2300 	ldrd	r2, r3, [sl]
 800c5de:	f7f3 fe0b 	bl	80001f8 <__aeabi_dsub>
 800c5e2:	4622      	mov	r2, r4
 800c5e4:	462b      	mov	r3, r5
 800c5e6:	f7f3 fe07 	bl	80001f8 <__aeabi_dsub>
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	460b      	mov	r3, r1
 800c5ee:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c5f2:	f7f3 fe01 	bl	80001f8 <__aeabi_dsub>
 800c5f6:	f1bb 0f00 	cmp.w	fp, #0
 800c5fa:	4604      	mov	r4, r0
 800c5fc:	460d      	mov	r5, r1
 800c5fe:	f6bf aed6 	bge.w	800c3ae <atan+0x3e>
 800c602:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c606:	461d      	mov	r5, r3
 800c608:	e6d1      	b.n	800c3ae <atan+0x3e>
 800c60a:	a51d      	add	r5, pc, #116	; (adr r5, 800c680 <atan+0x310>)
 800c60c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c610:	e6cd      	b.n	800c3ae <atan+0x3e>
 800c612:	bf00      	nop
 800c614:	f3af 8000 	nop.w
 800c618:	54442d18 	.word	0x54442d18
 800c61c:	bff921fb 	.word	0xbff921fb
 800c620:	8800759c 	.word	0x8800759c
 800c624:	7e37e43c 	.word	0x7e37e43c
 800c628:	e322da11 	.word	0xe322da11
 800c62c:	3f90ad3a 	.word	0x3f90ad3a
 800c630:	24760deb 	.word	0x24760deb
 800c634:	3fa97b4b 	.word	0x3fa97b4b
 800c638:	a0d03d51 	.word	0xa0d03d51
 800c63c:	3fb10d66 	.word	0x3fb10d66
 800c640:	c54c206e 	.word	0xc54c206e
 800c644:	3fb745cd 	.word	0x3fb745cd
 800c648:	920083ff 	.word	0x920083ff
 800c64c:	3fc24924 	.word	0x3fc24924
 800c650:	5555550d 	.word	0x5555550d
 800c654:	3fd55555 	.word	0x3fd55555
 800c658:	2c6a6c2f 	.word	0x2c6a6c2f
 800c65c:	bfa2b444 	.word	0xbfa2b444
 800c660:	52defd9a 	.word	0x52defd9a
 800c664:	3fadde2d 	.word	0x3fadde2d
 800c668:	af749a6d 	.word	0xaf749a6d
 800c66c:	3fb3b0f2 	.word	0x3fb3b0f2
 800c670:	fe231671 	.word	0xfe231671
 800c674:	3fbc71c6 	.word	0x3fbc71c6
 800c678:	9998ebc4 	.word	0x9998ebc4
 800c67c:	3fc99999 	.word	0x3fc99999
 800c680:	54442d18 	.word	0x54442d18
 800c684:	3ff921fb 	.word	0x3ff921fb
 800c688:	440fffff 	.word	0x440fffff
 800c68c:	7ff00000 	.word	0x7ff00000
 800c690:	3fdbffff 	.word	0x3fdbffff
 800c694:	3ff00000 	.word	0x3ff00000
 800c698:	3ff2ffff 	.word	0x3ff2ffff
 800c69c:	40038000 	.word	0x40038000
 800c6a0:	3ff80000 	.word	0x3ff80000
 800c6a4:	bff00000 	.word	0xbff00000
 800c6a8:	0800e380 	.word	0x0800e380
 800c6ac:	0800e360 	.word	0x0800e360

0800c6b0 <cos>:
 800c6b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c6b2:	ec53 2b10 	vmov	r2, r3, d0
 800c6b6:	4824      	ldr	r0, [pc, #144]	; (800c748 <cos+0x98>)
 800c6b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c6bc:	4281      	cmp	r1, r0
 800c6be:	dc06      	bgt.n	800c6ce <cos+0x1e>
 800c6c0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800c740 <cos+0x90>
 800c6c4:	f000 ff00 	bl	800d4c8 <__kernel_cos>
 800c6c8:	ec51 0b10 	vmov	r0, r1, d0
 800c6cc:	e007      	b.n	800c6de <cos+0x2e>
 800c6ce:	481f      	ldr	r0, [pc, #124]	; (800c74c <cos+0x9c>)
 800c6d0:	4281      	cmp	r1, r0
 800c6d2:	dd09      	ble.n	800c6e8 <cos+0x38>
 800c6d4:	ee10 0a10 	vmov	r0, s0
 800c6d8:	4619      	mov	r1, r3
 800c6da:	f7f3 fd8d 	bl	80001f8 <__aeabi_dsub>
 800c6de:	ec41 0b10 	vmov	d0, r0, r1
 800c6e2:	b005      	add	sp, #20
 800c6e4:	f85d fb04 	ldr.w	pc, [sp], #4
 800c6e8:	4668      	mov	r0, sp
 800c6ea:	f000 fc2d 	bl	800cf48 <__ieee754_rem_pio2>
 800c6ee:	f000 0003 	and.w	r0, r0, #3
 800c6f2:	2801      	cmp	r0, #1
 800c6f4:	d007      	beq.n	800c706 <cos+0x56>
 800c6f6:	2802      	cmp	r0, #2
 800c6f8:	d012      	beq.n	800c720 <cos+0x70>
 800c6fa:	b9c0      	cbnz	r0, 800c72e <cos+0x7e>
 800c6fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c700:	ed9d 0b00 	vldr	d0, [sp]
 800c704:	e7de      	b.n	800c6c4 <cos+0x14>
 800c706:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c70a:	ed9d 0b00 	vldr	d0, [sp]
 800c70e:	f001 fae3 	bl	800dcd8 <__kernel_sin>
 800c712:	ec53 2b10 	vmov	r2, r3, d0
 800c716:	ee10 0a10 	vmov	r0, s0
 800c71a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c71e:	e7de      	b.n	800c6de <cos+0x2e>
 800c720:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c724:	ed9d 0b00 	vldr	d0, [sp]
 800c728:	f000 fece 	bl	800d4c8 <__kernel_cos>
 800c72c:	e7f1      	b.n	800c712 <cos+0x62>
 800c72e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c732:	ed9d 0b00 	vldr	d0, [sp]
 800c736:	2001      	movs	r0, #1
 800c738:	f001 face 	bl	800dcd8 <__kernel_sin>
 800c73c:	e7c4      	b.n	800c6c8 <cos+0x18>
 800c73e:	bf00      	nop
	...
 800c748:	3fe921fb 	.word	0x3fe921fb
 800c74c:	7fefffff 	.word	0x7fefffff

0800c750 <fabs>:
 800c750:	ec51 0b10 	vmov	r0, r1, d0
 800c754:	ee10 2a10 	vmov	r2, s0
 800c758:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c75c:	ec43 2b10 	vmov	d0, r2, r3
 800c760:	4770      	bx	lr
 800c762:	0000      	movs	r0, r0
 800c764:	0000      	movs	r0, r0
	...

0800c768 <sin>:
 800c768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c76a:	ec53 2b10 	vmov	r2, r3, d0
 800c76e:	4826      	ldr	r0, [pc, #152]	; (800c808 <sin+0xa0>)
 800c770:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c774:	4281      	cmp	r1, r0
 800c776:	dc07      	bgt.n	800c788 <sin+0x20>
 800c778:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800c800 <sin+0x98>
 800c77c:	2000      	movs	r0, #0
 800c77e:	f001 faab 	bl	800dcd8 <__kernel_sin>
 800c782:	ec51 0b10 	vmov	r0, r1, d0
 800c786:	e007      	b.n	800c798 <sin+0x30>
 800c788:	4820      	ldr	r0, [pc, #128]	; (800c80c <sin+0xa4>)
 800c78a:	4281      	cmp	r1, r0
 800c78c:	dd09      	ble.n	800c7a2 <sin+0x3a>
 800c78e:	ee10 0a10 	vmov	r0, s0
 800c792:	4619      	mov	r1, r3
 800c794:	f7f3 fd30 	bl	80001f8 <__aeabi_dsub>
 800c798:	ec41 0b10 	vmov	d0, r0, r1
 800c79c:	b005      	add	sp, #20
 800c79e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c7a2:	4668      	mov	r0, sp
 800c7a4:	f000 fbd0 	bl	800cf48 <__ieee754_rem_pio2>
 800c7a8:	f000 0003 	and.w	r0, r0, #3
 800c7ac:	2801      	cmp	r0, #1
 800c7ae:	d008      	beq.n	800c7c2 <sin+0x5a>
 800c7b0:	2802      	cmp	r0, #2
 800c7b2:	d00d      	beq.n	800c7d0 <sin+0x68>
 800c7b4:	b9d0      	cbnz	r0, 800c7ec <sin+0x84>
 800c7b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7ba:	ed9d 0b00 	vldr	d0, [sp]
 800c7be:	2001      	movs	r0, #1
 800c7c0:	e7dd      	b.n	800c77e <sin+0x16>
 800c7c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7c6:	ed9d 0b00 	vldr	d0, [sp]
 800c7ca:	f000 fe7d 	bl	800d4c8 <__kernel_cos>
 800c7ce:	e7d8      	b.n	800c782 <sin+0x1a>
 800c7d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7d4:	ed9d 0b00 	vldr	d0, [sp]
 800c7d8:	2001      	movs	r0, #1
 800c7da:	f001 fa7d 	bl	800dcd8 <__kernel_sin>
 800c7de:	ec53 2b10 	vmov	r2, r3, d0
 800c7e2:	ee10 0a10 	vmov	r0, s0
 800c7e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c7ea:	e7d5      	b.n	800c798 <sin+0x30>
 800c7ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c7f0:	ed9d 0b00 	vldr	d0, [sp]
 800c7f4:	f000 fe68 	bl	800d4c8 <__kernel_cos>
 800c7f8:	e7f1      	b.n	800c7de <sin+0x76>
 800c7fa:	bf00      	nop
 800c7fc:	f3af 8000 	nop.w
	...
 800c808:	3fe921fb 	.word	0x3fe921fb
 800c80c:	7fefffff 	.word	0x7fefffff

0800c810 <acos>:
 800c810:	b538      	push	{r3, r4, r5, lr}
 800c812:	ed2d 8b02 	vpush	{d8}
 800c816:	ec55 4b10 	vmov	r4, r5, d0
 800c81a:	f000 f869 	bl	800c8f0 <__ieee754_acos>
 800c81e:	4b16      	ldr	r3, [pc, #88]	; (800c878 <acos+0x68>)
 800c820:	eeb0 8a40 	vmov.f32	s16, s0
 800c824:	eef0 8a60 	vmov.f32	s17, s1
 800c828:	f993 3000 	ldrsb.w	r3, [r3]
 800c82c:	3301      	adds	r3, #1
 800c82e:	d01c      	beq.n	800c86a <acos+0x5a>
 800c830:	4622      	mov	r2, r4
 800c832:	462b      	mov	r3, r5
 800c834:	4620      	mov	r0, r4
 800c836:	4629      	mov	r1, r5
 800c838:	f7f4 f930 	bl	8000a9c <__aeabi_dcmpun>
 800c83c:	b9a8      	cbnz	r0, 800c86a <acos+0x5a>
 800c83e:	ec45 4b10 	vmov	d0, r4, r5
 800c842:	f7ff ff85 	bl	800c750 <fabs>
 800c846:	4b0d      	ldr	r3, [pc, #52]	; (800c87c <acos+0x6c>)
 800c848:	ec51 0b10 	vmov	r0, r1, d0
 800c84c:	2200      	movs	r2, #0
 800c84e:	f7f4 f91b 	bl	8000a88 <__aeabi_dcmpgt>
 800c852:	b150      	cbz	r0, 800c86a <acos+0x5a>
 800c854:	f7ff fd5a 	bl	800c30c <__errno>
 800c858:	ecbd 8b02 	vpop	{d8}
 800c85c:	2321      	movs	r3, #33	; 0x21
 800c85e:	6003      	str	r3, [r0, #0]
 800c860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c864:	4806      	ldr	r0, [pc, #24]	; (800c880 <acos+0x70>)
 800c866:	f001 bb77 	b.w	800df58 <nan>
 800c86a:	eeb0 0a48 	vmov.f32	s0, s16
 800c86e:	eef0 0a68 	vmov.f32	s1, s17
 800c872:	ecbd 8b02 	vpop	{d8}
 800c876:	bd38      	pop	{r3, r4, r5, pc}
 800c878:	20000268 	.word	0x20000268
 800c87c:	3ff00000 	.word	0x3ff00000
 800c880:	0800e3a0 	.word	0x0800e3a0

0800c884 <atan2>:
 800c884:	f000 ba94 	b.w	800cdb0 <__ieee754_atan2>

0800c888 <sqrt>:
 800c888:	b538      	push	{r3, r4, r5, lr}
 800c88a:	ed2d 8b02 	vpush	{d8}
 800c88e:	ec55 4b10 	vmov	r4, r5, d0
 800c892:	f000 fd63 	bl	800d35c <__ieee754_sqrt>
 800c896:	4b15      	ldr	r3, [pc, #84]	; (800c8ec <sqrt+0x64>)
 800c898:	eeb0 8a40 	vmov.f32	s16, s0
 800c89c:	eef0 8a60 	vmov.f32	s17, s1
 800c8a0:	f993 3000 	ldrsb.w	r3, [r3]
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	d019      	beq.n	800c8dc <sqrt+0x54>
 800c8a8:	4622      	mov	r2, r4
 800c8aa:	462b      	mov	r3, r5
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	4629      	mov	r1, r5
 800c8b0:	f7f4 f8f4 	bl	8000a9c <__aeabi_dcmpun>
 800c8b4:	b990      	cbnz	r0, 800c8dc <sqrt+0x54>
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	4620      	mov	r0, r4
 800c8bc:	4629      	mov	r1, r5
 800c8be:	f7f4 f8c5 	bl	8000a4c <__aeabi_dcmplt>
 800c8c2:	b158      	cbz	r0, 800c8dc <sqrt+0x54>
 800c8c4:	f7ff fd22 	bl	800c30c <__errno>
 800c8c8:	2321      	movs	r3, #33	; 0x21
 800c8ca:	6003      	str	r3, [r0, #0]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	4610      	mov	r0, r2
 800c8d2:	4619      	mov	r1, r3
 800c8d4:	f7f3 ff72 	bl	80007bc <__aeabi_ddiv>
 800c8d8:	ec41 0b18 	vmov	d8, r0, r1
 800c8dc:	eeb0 0a48 	vmov.f32	s0, s16
 800c8e0:	eef0 0a68 	vmov.f32	s1, s17
 800c8e4:	ecbd 8b02 	vpop	{d8}
 800c8e8:	bd38      	pop	{r3, r4, r5, pc}
 800c8ea:	bf00      	nop
 800c8ec:	20000268 	.word	0x20000268

0800c8f0 <__ieee754_acos>:
 800c8f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f4:	ec55 4b10 	vmov	r4, r5, d0
 800c8f8:	49b7      	ldr	r1, [pc, #732]	; (800cbd8 <__ieee754_acos+0x2e8>)
 800c8fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c8fe:	428b      	cmp	r3, r1
 800c900:	dd1b      	ble.n	800c93a <__ieee754_acos+0x4a>
 800c902:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800c906:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c90a:	4323      	orrs	r3, r4
 800c90c:	d106      	bne.n	800c91c <__ieee754_acos+0x2c>
 800c90e:	2d00      	cmp	r5, #0
 800c910:	f300 8211 	bgt.w	800cd36 <__ieee754_acos+0x446>
 800c914:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800cb70 <__ieee754_acos+0x280>
 800c918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c91c:	ee10 2a10 	vmov	r2, s0
 800c920:	462b      	mov	r3, r5
 800c922:	ee10 0a10 	vmov	r0, s0
 800c926:	4629      	mov	r1, r5
 800c928:	f7f3 fc66 	bl	80001f8 <__aeabi_dsub>
 800c92c:	4602      	mov	r2, r0
 800c92e:	460b      	mov	r3, r1
 800c930:	f7f3 ff44 	bl	80007bc <__aeabi_ddiv>
 800c934:	ec41 0b10 	vmov	d0, r0, r1
 800c938:	e7ee      	b.n	800c918 <__ieee754_acos+0x28>
 800c93a:	49a8      	ldr	r1, [pc, #672]	; (800cbdc <__ieee754_acos+0x2ec>)
 800c93c:	428b      	cmp	r3, r1
 800c93e:	f300 8087 	bgt.w	800ca50 <__ieee754_acos+0x160>
 800c942:	4aa7      	ldr	r2, [pc, #668]	; (800cbe0 <__ieee754_acos+0x2f0>)
 800c944:	4293      	cmp	r3, r2
 800c946:	f340 81f9 	ble.w	800cd3c <__ieee754_acos+0x44c>
 800c94a:	ee10 2a10 	vmov	r2, s0
 800c94e:	ee10 0a10 	vmov	r0, s0
 800c952:	462b      	mov	r3, r5
 800c954:	4629      	mov	r1, r5
 800c956:	f7f3 fe07 	bl	8000568 <__aeabi_dmul>
 800c95a:	a387      	add	r3, pc, #540	; (adr r3, 800cb78 <__ieee754_acos+0x288>)
 800c95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c960:	4606      	mov	r6, r0
 800c962:	460f      	mov	r7, r1
 800c964:	f7f3 fe00 	bl	8000568 <__aeabi_dmul>
 800c968:	a385      	add	r3, pc, #532	; (adr r3, 800cb80 <__ieee754_acos+0x290>)
 800c96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c96e:	f7f3 fc45 	bl	80001fc <__adddf3>
 800c972:	4632      	mov	r2, r6
 800c974:	463b      	mov	r3, r7
 800c976:	f7f3 fdf7 	bl	8000568 <__aeabi_dmul>
 800c97a:	a383      	add	r3, pc, #524	; (adr r3, 800cb88 <__ieee754_acos+0x298>)
 800c97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c980:	f7f3 fc3a 	bl	80001f8 <__aeabi_dsub>
 800c984:	4632      	mov	r2, r6
 800c986:	463b      	mov	r3, r7
 800c988:	f7f3 fdee 	bl	8000568 <__aeabi_dmul>
 800c98c:	a380      	add	r3, pc, #512	; (adr r3, 800cb90 <__ieee754_acos+0x2a0>)
 800c98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c992:	f7f3 fc33 	bl	80001fc <__adddf3>
 800c996:	4632      	mov	r2, r6
 800c998:	463b      	mov	r3, r7
 800c99a:	f7f3 fde5 	bl	8000568 <__aeabi_dmul>
 800c99e:	a37e      	add	r3, pc, #504	; (adr r3, 800cb98 <__ieee754_acos+0x2a8>)
 800c9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a4:	f7f3 fc28 	bl	80001f8 <__aeabi_dsub>
 800c9a8:	4632      	mov	r2, r6
 800c9aa:	463b      	mov	r3, r7
 800c9ac:	f7f3 fddc 	bl	8000568 <__aeabi_dmul>
 800c9b0:	a37b      	add	r3, pc, #492	; (adr r3, 800cba0 <__ieee754_acos+0x2b0>)
 800c9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b6:	f7f3 fc21 	bl	80001fc <__adddf3>
 800c9ba:	4632      	mov	r2, r6
 800c9bc:	463b      	mov	r3, r7
 800c9be:	f7f3 fdd3 	bl	8000568 <__aeabi_dmul>
 800c9c2:	a379      	add	r3, pc, #484	; (adr r3, 800cba8 <__ieee754_acos+0x2b8>)
 800c9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c8:	4680      	mov	r8, r0
 800c9ca:	4689      	mov	r9, r1
 800c9cc:	4630      	mov	r0, r6
 800c9ce:	4639      	mov	r1, r7
 800c9d0:	f7f3 fdca 	bl	8000568 <__aeabi_dmul>
 800c9d4:	a376      	add	r3, pc, #472	; (adr r3, 800cbb0 <__ieee754_acos+0x2c0>)
 800c9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9da:	f7f3 fc0d 	bl	80001f8 <__aeabi_dsub>
 800c9de:	4632      	mov	r2, r6
 800c9e0:	463b      	mov	r3, r7
 800c9e2:	f7f3 fdc1 	bl	8000568 <__aeabi_dmul>
 800c9e6:	a374      	add	r3, pc, #464	; (adr r3, 800cbb8 <__ieee754_acos+0x2c8>)
 800c9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ec:	f7f3 fc06 	bl	80001fc <__adddf3>
 800c9f0:	4632      	mov	r2, r6
 800c9f2:	463b      	mov	r3, r7
 800c9f4:	f7f3 fdb8 	bl	8000568 <__aeabi_dmul>
 800c9f8:	a371      	add	r3, pc, #452	; (adr r3, 800cbc0 <__ieee754_acos+0x2d0>)
 800c9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fe:	f7f3 fbfb 	bl	80001f8 <__aeabi_dsub>
 800ca02:	4632      	mov	r2, r6
 800ca04:	463b      	mov	r3, r7
 800ca06:	f7f3 fdaf 	bl	8000568 <__aeabi_dmul>
 800ca0a:	4b76      	ldr	r3, [pc, #472]	; (800cbe4 <__ieee754_acos+0x2f4>)
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	f7f3 fbf5 	bl	80001fc <__adddf3>
 800ca12:	4602      	mov	r2, r0
 800ca14:	460b      	mov	r3, r1
 800ca16:	4640      	mov	r0, r8
 800ca18:	4649      	mov	r1, r9
 800ca1a:	f7f3 fecf 	bl	80007bc <__aeabi_ddiv>
 800ca1e:	4622      	mov	r2, r4
 800ca20:	462b      	mov	r3, r5
 800ca22:	f7f3 fda1 	bl	8000568 <__aeabi_dmul>
 800ca26:	4602      	mov	r2, r0
 800ca28:	460b      	mov	r3, r1
 800ca2a:	a167      	add	r1, pc, #412	; (adr r1, 800cbc8 <__ieee754_acos+0x2d8>)
 800ca2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca30:	f7f3 fbe2 	bl	80001f8 <__aeabi_dsub>
 800ca34:	4602      	mov	r2, r0
 800ca36:	460b      	mov	r3, r1
 800ca38:	4620      	mov	r0, r4
 800ca3a:	4629      	mov	r1, r5
 800ca3c:	f7f3 fbdc 	bl	80001f8 <__aeabi_dsub>
 800ca40:	4602      	mov	r2, r0
 800ca42:	460b      	mov	r3, r1
 800ca44:	a162      	add	r1, pc, #392	; (adr r1, 800cbd0 <__ieee754_acos+0x2e0>)
 800ca46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca4a:	f7f3 fbd5 	bl	80001f8 <__aeabi_dsub>
 800ca4e:	e771      	b.n	800c934 <__ieee754_acos+0x44>
 800ca50:	2d00      	cmp	r5, #0
 800ca52:	f280 80cb 	bge.w	800cbec <__ieee754_acos+0x2fc>
 800ca56:	ee10 0a10 	vmov	r0, s0
 800ca5a:	4b62      	ldr	r3, [pc, #392]	; (800cbe4 <__ieee754_acos+0x2f4>)
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	4629      	mov	r1, r5
 800ca60:	f7f3 fbcc 	bl	80001fc <__adddf3>
 800ca64:	4b60      	ldr	r3, [pc, #384]	; (800cbe8 <__ieee754_acos+0x2f8>)
 800ca66:	2200      	movs	r2, #0
 800ca68:	f7f3 fd7e 	bl	8000568 <__aeabi_dmul>
 800ca6c:	a342      	add	r3, pc, #264	; (adr r3, 800cb78 <__ieee754_acos+0x288>)
 800ca6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca72:	4604      	mov	r4, r0
 800ca74:	460d      	mov	r5, r1
 800ca76:	f7f3 fd77 	bl	8000568 <__aeabi_dmul>
 800ca7a:	a341      	add	r3, pc, #260	; (adr r3, 800cb80 <__ieee754_acos+0x290>)
 800ca7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca80:	f7f3 fbbc 	bl	80001fc <__adddf3>
 800ca84:	4622      	mov	r2, r4
 800ca86:	462b      	mov	r3, r5
 800ca88:	f7f3 fd6e 	bl	8000568 <__aeabi_dmul>
 800ca8c:	a33e      	add	r3, pc, #248	; (adr r3, 800cb88 <__ieee754_acos+0x298>)
 800ca8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca92:	f7f3 fbb1 	bl	80001f8 <__aeabi_dsub>
 800ca96:	4622      	mov	r2, r4
 800ca98:	462b      	mov	r3, r5
 800ca9a:	f7f3 fd65 	bl	8000568 <__aeabi_dmul>
 800ca9e:	a33c      	add	r3, pc, #240	; (adr r3, 800cb90 <__ieee754_acos+0x2a0>)
 800caa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa4:	f7f3 fbaa 	bl	80001fc <__adddf3>
 800caa8:	4622      	mov	r2, r4
 800caaa:	462b      	mov	r3, r5
 800caac:	f7f3 fd5c 	bl	8000568 <__aeabi_dmul>
 800cab0:	a339      	add	r3, pc, #228	; (adr r3, 800cb98 <__ieee754_acos+0x2a8>)
 800cab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab6:	f7f3 fb9f 	bl	80001f8 <__aeabi_dsub>
 800caba:	4622      	mov	r2, r4
 800cabc:	462b      	mov	r3, r5
 800cabe:	f7f3 fd53 	bl	8000568 <__aeabi_dmul>
 800cac2:	a337      	add	r3, pc, #220	; (adr r3, 800cba0 <__ieee754_acos+0x2b0>)
 800cac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac8:	f7f3 fb98 	bl	80001fc <__adddf3>
 800cacc:	4622      	mov	r2, r4
 800cace:	462b      	mov	r3, r5
 800cad0:	f7f3 fd4a 	bl	8000568 <__aeabi_dmul>
 800cad4:	ec45 4b10 	vmov	d0, r4, r5
 800cad8:	4680      	mov	r8, r0
 800cada:	4689      	mov	r9, r1
 800cadc:	f000 fc3e 	bl	800d35c <__ieee754_sqrt>
 800cae0:	a331      	add	r3, pc, #196	; (adr r3, 800cba8 <__ieee754_acos+0x2b8>)
 800cae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae6:	4620      	mov	r0, r4
 800cae8:	4629      	mov	r1, r5
 800caea:	ec57 6b10 	vmov	r6, r7, d0
 800caee:	f7f3 fd3b 	bl	8000568 <__aeabi_dmul>
 800caf2:	a32f      	add	r3, pc, #188	; (adr r3, 800cbb0 <__ieee754_acos+0x2c0>)
 800caf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf8:	f7f3 fb7e 	bl	80001f8 <__aeabi_dsub>
 800cafc:	4622      	mov	r2, r4
 800cafe:	462b      	mov	r3, r5
 800cb00:	f7f3 fd32 	bl	8000568 <__aeabi_dmul>
 800cb04:	a32c      	add	r3, pc, #176	; (adr r3, 800cbb8 <__ieee754_acos+0x2c8>)
 800cb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb0a:	f7f3 fb77 	bl	80001fc <__adddf3>
 800cb0e:	4622      	mov	r2, r4
 800cb10:	462b      	mov	r3, r5
 800cb12:	f7f3 fd29 	bl	8000568 <__aeabi_dmul>
 800cb16:	a32a      	add	r3, pc, #168	; (adr r3, 800cbc0 <__ieee754_acos+0x2d0>)
 800cb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1c:	f7f3 fb6c 	bl	80001f8 <__aeabi_dsub>
 800cb20:	4622      	mov	r2, r4
 800cb22:	462b      	mov	r3, r5
 800cb24:	f7f3 fd20 	bl	8000568 <__aeabi_dmul>
 800cb28:	4b2e      	ldr	r3, [pc, #184]	; (800cbe4 <__ieee754_acos+0x2f4>)
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	f7f3 fb66 	bl	80001fc <__adddf3>
 800cb30:	4602      	mov	r2, r0
 800cb32:	460b      	mov	r3, r1
 800cb34:	4640      	mov	r0, r8
 800cb36:	4649      	mov	r1, r9
 800cb38:	f7f3 fe40 	bl	80007bc <__aeabi_ddiv>
 800cb3c:	4632      	mov	r2, r6
 800cb3e:	463b      	mov	r3, r7
 800cb40:	f7f3 fd12 	bl	8000568 <__aeabi_dmul>
 800cb44:	a320      	add	r3, pc, #128	; (adr r3, 800cbc8 <__ieee754_acos+0x2d8>)
 800cb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb4a:	f7f3 fb55 	bl	80001f8 <__aeabi_dsub>
 800cb4e:	4632      	mov	r2, r6
 800cb50:	463b      	mov	r3, r7
 800cb52:	f7f3 fb53 	bl	80001fc <__adddf3>
 800cb56:	4602      	mov	r2, r0
 800cb58:	460b      	mov	r3, r1
 800cb5a:	f7f3 fb4f 	bl	80001fc <__adddf3>
 800cb5e:	4602      	mov	r2, r0
 800cb60:	460b      	mov	r3, r1
 800cb62:	a103      	add	r1, pc, #12	; (adr r1, 800cb70 <__ieee754_acos+0x280>)
 800cb64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb68:	e76f      	b.n	800ca4a <__ieee754_acos+0x15a>
 800cb6a:	bf00      	nop
 800cb6c:	f3af 8000 	nop.w
 800cb70:	54442d18 	.word	0x54442d18
 800cb74:	400921fb 	.word	0x400921fb
 800cb78:	0dfdf709 	.word	0x0dfdf709
 800cb7c:	3f023de1 	.word	0x3f023de1
 800cb80:	7501b288 	.word	0x7501b288
 800cb84:	3f49efe0 	.word	0x3f49efe0
 800cb88:	b5688f3b 	.word	0xb5688f3b
 800cb8c:	3fa48228 	.word	0x3fa48228
 800cb90:	0e884455 	.word	0x0e884455
 800cb94:	3fc9c155 	.word	0x3fc9c155
 800cb98:	03eb6f7d 	.word	0x03eb6f7d
 800cb9c:	3fd4d612 	.word	0x3fd4d612
 800cba0:	55555555 	.word	0x55555555
 800cba4:	3fc55555 	.word	0x3fc55555
 800cba8:	b12e9282 	.word	0xb12e9282
 800cbac:	3fb3b8c5 	.word	0x3fb3b8c5
 800cbb0:	1b8d0159 	.word	0x1b8d0159
 800cbb4:	3fe6066c 	.word	0x3fe6066c
 800cbb8:	9c598ac8 	.word	0x9c598ac8
 800cbbc:	40002ae5 	.word	0x40002ae5
 800cbc0:	1c8a2d4b 	.word	0x1c8a2d4b
 800cbc4:	40033a27 	.word	0x40033a27
 800cbc8:	33145c07 	.word	0x33145c07
 800cbcc:	3c91a626 	.word	0x3c91a626
 800cbd0:	54442d18 	.word	0x54442d18
 800cbd4:	3ff921fb 	.word	0x3ff921fb
 800cbd8:	3fefffff 	.word	0x3fefffff
 800cbdc:	3fdfffff 	.word	0x3fdfffff
 800cbe0:	3c600000 	.word	0x3c600000
 800cbe4:	3ff00000 	.word	0x3ff00000
 800cbe8:	3fe00000 	.word	0x3fe00000
 800cbec:	ee10 2a10 	vmov	r2, s0
 800cbf0:	462b      	mov	r3, r5
 800cbf2:	496d      	ldr	r1, [pc, #436]	; (800cda8 <__ieee754_acos+0x4b8>)
 800cbf4:	2000      	movs	r0, #0
 800cbf6:	f7f3 faff 	bl	80001f8 <__aeabi_dsub>
 800cbfa:	4b6c      	ldr	r3, [pc, #432]	; (800cdac <__ieee754_acos+0x4bc>)
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	f7f3 fcb3 	bl	8000568 <__aeabi_dmul>
 800cc02:	4604      	mov	r4, r0
 800cc04:	460d      	mov	r5, r1
 800cc06:	ec45 4b10 	vmov	d0, r4, r5
 800cc0a:	f000 fba7 	bl	800d35c <__ieee754_sqrt>
 800cc0e:	a34e      	add	r3, pc, #312	; (adr r3, 800cd48 <__ieee754_acos+0x458>)
 800cc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc14:	4620      	mov	r0, r4
 800cc16:	4629      	mov	r1, r5
 800cc18:	ec59 8b10 	vmov	r8, r9, d0
 800cc1c:	f7f3 fca4 	bl	8000568 <__aeabi_dmul>
 800cc20:	a34b      	add	r3, pc, #300	; (adr r3, 800cd50 <__ieee754_acos+0x460>)
 800cc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc26:	f7f3 fae9 	bl	80001fc <__adddf3>
 800cc2a:	4622      	mov	r2, r4
 800cc2c:	462b      	mov	r3, r5
 800cc2e:	f7f3 fc9b 	bl	8000568 <__aeabi_dmul>
 800cc32:	a349      	add	r3, pc, #292	; (adr r3, 800cd58 <__ieee754_acos+0x468>)
 800cc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc38:	f7f3 fade 	bl	80001f8 <__aeabi_dsub>
 800cc3c:	4622      	mov	r2, r4
 800cc3e:	462b      	mov	r3, r5
 800cc40:	f7f3 fc92 	bl	8000568 <__aeabi_dmul>
 800cc44:	a346      	add	r3, pc, #280	; (adr r3, 800cd60 <__ieee754_acos+0x470>)
 800cc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4a:	f7f3 fad7 	bl	80001fc <__adddf3>
 800cc4e:	4622      	mov	r2, r4
 800cc50:	462b      	mov	r3, r5
 800cc52:	f7f3 fc89 	bl	8000568 <__aeabi_dmul>
 800cc56:	a344      	add	r3, pc, #272	; (adr r3, 800cd68 <__ieee754_acos+0x478>)
 800cc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5c:	f7f3 facc 	bl	80001f8 <__aeabi_dsub>
 800cc60:	4622      	mov	r2, r4
 800cc62:	462b      	mov	r3, r5
 800cc64:	f7f3 fc80 	bl	8000568 <__aeabi_dmul>
 800cc68:	a341      	add	r3, pc, #260	; (adr r3, 800cd70 <__ieee754_acos+0x480>)
 800cc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6e:	f7f3 fac5 	bl	80001fc <__adddf3>
 800cc72:	4622      	mov	r2, r4
 800cc74:	462b      	mov	r3, r5
 800cc76:	f7f3 fc77 	bl	8000568 <__aeabi_dmul>
 800cc7a:	a33f      	add	r3, pc, #252	; (adr r3, 800cd78 <__ieee754_acos+0x488>)
 800cc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc80:	4682      	mov	sl, r0
 800cc82:	468b      	mov	fp, r1
 800cc84:	4620      	mov	r0, r4
 800cc86:	4629      	mov	r1, r5
 800cc88:	f7f3 fc6e 	bl	8000568 <__aeabi_dmul>
 800cc8c:	a33c      	add	r3, pc, #240	; (adr r3, 800cd80 <__ieee754_acos+0x490>)
 800cc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc92:	f7f3 fab1 	bl	80001f8 <__aeabi_dsub>
 800cc96:	4622      	mov	r2, r4
 800cc98:	462b      	mov	r3, r5
 800cc9a:	f7f3 fc65 	bl	8000568 <__aeabi_dmul>
 800cc9e:	a33a      	add	r3, pc, #232	; (adr r3, 800cd88 <__ieee754_acos+0x498>)
 800cca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca4:	f7f3 faaa 	bl	80001fc <__adddf3>
 800cca8:	4622      	mov	r2, r4
 800ccaa:	462b      	mov	r3, r5
 800ccac:	f7f3 fc5c 	bl	8000568 <__aeabi_dmul>
 800ccb0:	a337      	add	r3, pc, #220	; (adr r3, 800cd90 <__ieee754_acos+0x4a0>)
 800ccb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb6:	f7f3 fa9f 	bl	80001f8 <__aeabi_dsub>
 800ccba:	4622      	mov	r2, r4
 800ccbc:	462b      	mov	r3, r5
 800ccbe:	f7f3 fc53 	bl	8000568 <__aeabi_dmul>
 800ccc2:	4b39      	ldr	r3, [pc, #228]	; (800cda8 <__ieee754_acos+0x4b8>)
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	f7f3 fa99 	bl	80001fc <__adddf3>
 800ccca:	4602      	mov	r2, r0
 800cccc:	460b      	mov	r3, r1
 800ccce:	4650      	mov	r0, sl
 800ccd0:	4659      	mov	r1, fp
 800ccd2:	f7f3 fd73 	bl	80007bc <__aeabi_ddiv>
 800ccd6:	4642      	mov	r2, r8
 800ccd8:	464b      	mov	r3, r9
 800ccda:	f7f3 fc45 	bl	8000568 <__aeabi_dmul>
 800ccde:	2600      	movs	r6, #0
 800cce0:	4682      	mov	sl, r0
 800cce2:	468b      	mov	fp, r1
 800cce4:	4632      	mov	r2, r6
 800cce6:	464b      	mov	r3, r9
 800cce8:	4630      	mov	r0, r6
 800ccea:	4649      	mov	r1, r9
 800ccec:	f7f3 fc3c 	bl	8000568 <__aeabi_dmul>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	460b      	mov	r3, r1
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	4629      	mov	r1, r5
 800ccf8:	f7f3 fa7e 	bl	80001f8 <__aeabi_dsub>
 800ccfc:	4632      	mov	r2, r6
 800ccfe:	4604      	mov	r4, r0
 800cd00:	460d      	mov	r5, r1
 800cd02:	464b      	mov	r3, r9
 800cd04:	4640      	mov	r0, r8
 800cd06:	4649      	mov	r1, r9
 800cd08:	f7f3 fa78 	bl	80001fc <__adddf3>
 800cd0c:	4602      	mov	r2, r0
 800cd0e:	460b      	mov	r3, r1
 800cd10:	4620      	mov	r0, r4
 800cd12:	4629      	mov	r1, r5
 800cd14:	f7f3 fd52 	bl	80007bc <__aeabi_ddiv>
 800cd18:	4602      	mov	r2, r0
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	4650      	mov	r0, sl
 800cd1e:	4659      	mov	r1, fp
 800cd20:	f7f3 fa6c 	bl	80001fc <__adddf3>
 800cd24:	4632      	mov	r2, r6
 800cd26:	464b      	mov	r3, r9
 800cd28:	f7f3 fa68 	bl	80001fc <__adddf3>
 800cd2c:	4602      	mov	r2, r0
 800cd2e:	460b      	mov	r3, r1
 800cd30:	f7f3 fa64 	bl	80001fc <__adddf3>
 800cd34:	e5fe      	b.n	800c934 <__ieee754_acos+0x44>
 800cd36:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800cd98 <__ieee754_acos+0x4a8>
 800cd3a:	e5ed      	b.n	800c918 <__ieee754_acos+0x28>
 800cd3c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800cda0 <__ieee754_acos+0x4b0>
 800cd40:	e5ea      	b.n	800c918 <__ieee754_acos+0x28>
 800cd42:	bf00      	nop
 800cd44:	f3af 8000 	nop.w
 800cd48:	0dfdf709 	.word	0x0dfdf709
 800cd4c:	3f023de1 	.word	0x3f023de1
 800cd50:	7501b288 	.word	0x7501b288
 800cd54:	3f49efe0 	.word	0x3f49efe0
 800cd58:	b5688f3b 	.word	0xb5688f3b
 800cd5c:	3fa48228 	.word	0x3fa48228
 800cd60:	0e884455 	.word	0x0e884455
 800cd64:	3fc9c155 	.word	0x3fc9c155
 800cd68:	03eb6f7d 	.word	0x03eb6f7d
 800cd6c:	3fd4d612 	.word	0x3fd4d612
 800cd70:	55555555 	.word	0x55555555
 800cd74:	3fc55555 	.word	0x3fc55555
 800cd78:	b12e9282 	.word	0xb12e9282
 800cd7c:	3fb3b8c5 	.word	0x3fb3b8c5
 800cd80:	1b8d0159 	.word	0x1b8d0159
 800cd84:	3fe6066c 	.word	0x3fe6066c
 800cd88:	9c598ac8 	.word	0x9c598ac8
 800cd8c:	40002ae5 	.word	0x40002ae5
 800cd90:	1c8a2d4b 	.word	0x1c8a2d4b
 800cd94:	40033a27 	.word	0x40033a27
	...
 800cda0:	54442d18 	.word	0x54442d18
 800cda4:	3ff921fb 	.word	0x3ff921fb
 800cda8:	3ff00000 	.word	0x3ff00000
 800cdac:	3fe00000 	.word	0x3fe00000

0800cdb0 <__ieee754_atan2>:
 800cdb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdb4:	ec57 6b11 	vmov	r6, r7, d1
 800cdb8:	4273      	negs	r3, r6
 800cdba:	f8df e184 	ldr.w	lr, [pc, #388]	; 800cf40 <__ieee754_atan2+0x190>
 800cdbe:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800cdc2:	4333      	orrs	r3, r6
 800cdc4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800cdc8:	4573      	cmp	r3, lr
 800cdca:	ec51 0b10 	vmov	r0, r1, d0
 800cdce:	ee11 8a10 	vmov	r8, s2
 800cdd2:	d80a      	bhi.n	800cdea <__ieee754_atan2+0x3a>
 800cdd4:	4244      	negs	r4, r0
 800cdd6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cdda:	4304      	orrs	r4, r0
 800cddc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800cde0:	4574      	cmp	r4, lr
 800cde2:	ee10 9a10 	vmov	r9, s0
 800cde6:	468c      	mov	ip, r1
 800cde8:	d907      	bls.n	800cdfa <__ieee754_atan2+0x4a>
 800cdea:	4632      	mov	r2, r6
 800cdec:	463b      	mov	r3, r7
 800cdee:	f7f3 fa05 	bl	80001fc <__adddf3>
 800cdf2:	ec41 0b10 	vmov	d0, r0, r1
 800cdf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdfa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800cdfe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ce02:	4334      	orrs	r4, r6
 800ce04:	d103      	bne.n	800ce0e <__ieee754_atan2+0x5e>
 800ce06:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce0a:	f7ff bab1 	b.w	800c370 <atan>
 800ce0e:	17bc      	asrs	r4, r7, #30
 800ce10:	f004 0402 	and.w	r4, r4, #2
 800ce14:	ea53 0909 	orrs.w	r9, r3, r9
 800ce18:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ce1c:	d107      	bne.n	800ce2e <__ieee754_atan2+0x7e>
 800ce1e:	2c02      	cmp	r4, #2
 800ce20:	d060      	beq.n	800cee4 <__ieee754_atan2+0x134>
 800ce22:	2c03      	cmp	r4, #3
 800ce24:	d1e5      	bne.n	800cdf2 <__ieee754_atan2+0x42>
 800ce26:	a142      	add	r1, pc, #264	; (adr r1, 800cf30 <__ieee754_atan2+0x180>)
 800ce28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce2c:	e7e1      	b.n	800cdf2 <__ieee754_atan2+0x42>
 800ce2e:	ea52 0808 	orrs.w	r8, r2, r8
 800ce32:	d106      	bne.n	800ce42 <__ieee754_atan2+0x92>
 800ce34:	f1bc 0f00 	cmp.w	ip, #0
 800ce38:	da5f      	bge.n	800cefa <__ieee754_atan2+0x14a>
 800ce3a:	a13f      	add	r1, pc, #252	; (adr r1, 800cf38 <__ieee754_atan2+0x188>)
 800ce3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce40:	e7d7      	b.n	800cdf2 <__ieee754_atan2+0x42>
 800ce42:	4572      	cmp	r2, lr
 800ce44:	d10f      	bne.n	800ce66 <__ieee754_atan2+0xb6>
 800ce46:	4293      	cmp	r3, r2
 800ce48:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ce4c:	d107      	bne.n	800ce5e <__ieee754_atan2+0xae>
 800ce4e:	2c02      	cmp	r4, #2
 800ce50:	d84c      	bhi.n	800ceec <__ieee754_atan2+0x13c>
 800ce52:	4b35      	ldr	r3, [pc, #212]	; (800cf28 <__ieee754_atan2+0x178>)
 800ce54:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ce58:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ce5c:	e7c9      	b.n	800cdf2 <__ieee754_atan2+0x42>
 800ce5e:	2c02      	cmp	r4, #2
 800ce60:	d848      	bhi.n	800cef4 <__ieee754_atan2+0x144>
 800ce62:	4b32      	ldr	r3, [pc, #200]	; (800cf2c <__ieee754_atan2+0x17c>)
 800ce64:	e7f6      	b.n	800ce54 <__ieee754_atan2+0xa4>
 800ce66:	4573      	cmp	r3, lr
 800ce68:	d0e4      	beq.n	800ce34 <__ieee754_atan2+0x84>
 800ce6a:	1a9b      	subs	r3, r3, r2
 800ce6c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ce70:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ce74:	da1e      	bge.n	800ceb4 <__ieee754_atan2+0x104>
 800ce76:	2f00      	cmp	r7, #0
 800ce78:	da01      	bge.n	800ce7e <__ieee754_atan2+0xce>
 800ce7a:	323c      	adds	r2, #60	; 0x3c
 800ce7c:	db1e      	blt.n	800cebc <__ieee754_atan2+0x10c>
 800ce7e:	4632      	mov	r2, r6
 800ce80:	463b      	mov	r3, r7
 800ce82:	f7f3 fc9b 	bl	80007bc <__aeabi_ddiv>
 800ce86:	ec41 0b10 	vmov	d0, r0, r1
 800ce8a:	f7ff fc61 	bl	800c750 <fabs>
 800ce8e:	f7ff fa6f 	bl	800c370 <atan>
 800ce92:	ec51 0b10 	vmov	r0, r1, d0
 800ce96:	2c01      	cmp	r4, #1
 800ce98:	d013      	beq.n	800cec2 <__ieee754_atan2+0x112>
 800ce9a:	2c02      	cmp	r4, #2
 800ce9c:	d015      	beq.n	800ceca <__ieee754_atan2+0x11a>
 800ce9e:	2c00      	cmp	r4, #0
 800cea0:	d0a7      	beq.n	800cdf2 <__ieee754_atan2+0x42>
 800cea2:	a319      	add	r3, pc, #100	; (adr r3, 800cf08 <__ieee754_atan2+0x158>)
 800cea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea8:	f7f3 f9a6 	bl	80001f8 <__aeabi_dsub>
 800ceac:	a318      	add	r3, pc, #96	; (adr r3, 800cf10 <__ieee754_atan2+0x160>)
 800ceae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb2:	e014      	b.n	800cede <__ieee754_atan2+0x12e>
 800ceb4:	a118      	add	r1, pc, #96	; (adr r1, 800cf18 <__ieee754_atan2+0x168>)
 800ceb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ceba:	e7ec      	b.n	800ce96 <__ieee754_atan2+0xe6>
 800cebc:	2000      	movs	r0, #0
 800cebe:	2100      	movs	r1, #0
 800cec0:	e7e9      	b.n	800ce96 <__ieee754_atan2+0xe6>
 800cec2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cec6:	4619      	mov	r1, r3
 800cec8:	e793      	b.n	800cdf2 <__ieee754_atan2+0x42>
 800ceca:	a30f      	add	r3, pc, #60	; (adr r3, 800cf08 <__ieee754_atan2+0x158>)
 800cecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced0:	f7f3 f992 	bl	80001f8 <__aeabi_dsub>
 800ced4:	4602      	mov	r2, r0
 800ced6:	460b      	mov	r3, r1
 800ced8:	a10d      	add	r1, pc, #52	; (adr r1, 800cf10 <__ieee754_atan2+0x160>)
 800ceda:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cede:	f7f3 f98b 	bl	80001f8 <__aeabi_dsub>
 800cee2:	e786      	b.n	800cdf2 <__ieee754_atan2+0x42>
 800cee4:	a10a      	add	r1, pc, #40	; (adr r1, 800cf10 <__ieee754_atan2+0x160>)
 800cee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ceea:	e782      	b.n	800cdf2 <__ieee754_atan2+0x42>
 800ceec:	a10c      	add	r1, pc, #48	; (adr r1, 800cf20 <__ieee754_atan2+0x170>)
 800ceee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cef2:	e77e      	b.n	800cdf2 <__ieee754_atan2+0x42>
 800cef4:	2000      	movs	r0, #0
 800cef6:	2100      	movs	r1, #0
 800cef8:	e77b      	b.n	800cdf2 <__ieee754_atan2+0x42>
 800cefa:	a107      	add	r1, pc, #28	; (adr r1, 800cf18 <__ieee754_atan2+0x168>)
 800cefc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf00:	e777      	b.n	800cdf2 <__ieee754_atan2+0x42>
 800cf02:	bf00      	nop
 800cf04:	f3af 8000 	nop.w
 800cf08:	33145c07 	.word	0x33145c07
 800cf0c:	3ca1a626 	.word	0x3ca1a626
 800cf10:	54442d18 	.word	0x54442d18
 800cf14:	400921fb 	.word	0x400921fb
 800cf18:	54442d18 	.word	0x54442d18
 800cf1c:	3ff921fb 	.word	0x3ff921fb
 800cf20:	54442d18 	.word	0x54442d18
 800cf24:	3fe921fb 	.word	0x3fe921fb
 800cf28:	0800e3a8 	.word	0x0800e3a8
 800cf2c:	0800e3c0 	.word	0x0800e3c0
 800cf30:	54442d18 	.word	0x54442d18
 800cf34:	c00921fb 	.word	0xc00921fb
 800cf38:	54442d18 	.word	0x54442d18
 800cf3c:	bff921fb 	.word	0xbff921fb
 800cf40:	7ff00000 	.word	0x7ff00000
 800cf44:	00000000 	.word	0x00000000

0800cf48 <__ieee754_rem_pio2>:
 800cf48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf4c:	ed2d 8b02 	vpush	{d8}
 800cf50:	ec55 4b10 	vmov	r4, r5, d0
 800cf54:	4bca      	ldr	r3, [pc, #808]	; (800d280 <__ieee754_rem_pio2+0x338>)
 800cf56:	b08b      	sub	sp, #44	; 0x2c
 800cf58:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800cf5c:	4598      	cmp	r8, r3
 800cf5e:	4682      	mov	sl, r0
 800cf60:	9502      	str	r5, [sp, #8]
 800cf62:	dc08      	bgt.n	800cf76 <__ieee754_rem_pio2+0x2e>
 800cf64:	2200      	movs	r2, #0
 800cf66:	2300      	movs	r3, #0
 800cf68:	ed80 0b00 	vstr	d0, [r0]
 800cf6c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cf70:	f04f 0b00 	mov.w	fp, #0
 800cf74:	e028      	b.n	800cfc8 <__ieee754_rem_pio2+0x80>
 800cf76:	4bc3      	ldr	r3, [pc, #780]	; (800d284 <__ieee754_rem_pio2+0x33c>)
 800cf78:	4598      	cmp	r8, r3
 800cf7a:	dc78      	bgt.n	800d06e <__ieee754_rem_pio2+0x126>
 800cf7c:	9b02      	ldr	r3, [sp, #8]
 800cf7e:	4ec2      	ldr	r6, [pc, #776]	; (800d288 <__ieee754_rem_pio2+0x340>)
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	ee10 0a10 	vmov	r0, s0
 800cf86:	a3b0      	add	r3, pc, #704	; (adr r3, 800d248 <__ieee754_rem_pio2+0x300>)
 800cf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8c:	4629      	mov	r1, r5
 800cf8e:	dd39      	ble.n	800d004 <__ieee754_rem_pio2+0xbc>
 800cf90:	f7f3 f932 	bl	80001f8 <__aeabi_dsub>
 800cf94:	45b0      	cmp	r8, r6
 800cf96:	4604      	mov	r4, r0
 800cf98:	460d      	mov	r5, r1
 800cf9a:	d01b      	beq.n	800cfd4 <__ieee754_rem_pio2+0x8c>
 800cf9c:	a3ac      	add	r3, pc, #688	; (adr r3, 800d250 <__ieee754_rem_pio2+0x308>)
 800cf9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa2:	f7f3 f929 	bl	80001f8 <__aeabi_dsub>
 800cfa6:	4602      	mov	r2, r0
 800cfa8:	460b      	mov	r3, r1
 800cfaa:	e9ca 2300 	strd	r2, r3, [sl]
 800cfae:	4620      	mov	r0, r4
 800cfb0:	4629      	mov	r1, r5
 800cfb2:	f7f3 f921 	bl	80001f8 <__aeabi_dsub>
 800cfb6:	a3a6      	add	r3, pc, #664	; (adr r3, 800d250 <__ieee754_rem_pio2+0x308>)
 800cfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfbc:	f7f3 f91c 	bl	80001f8 <__aeabi_dsub>
 800cfc0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cfc4:	f04f 0b01 	mov.w	fp, #1
 800cfc8:	4658      	mov	r0, fp
 800cfca:	b00b      	add	sp, #44	; 0x2c
 800cfcc:	ecbd 8b02 	vpop	{d8}
 800cfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfd4:	a3a0      	add	r3, pc, #640	; (adr r3, 800d258 <__ieee754_rem_pio2+0x310>)
 800cfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfda:	f7f3 f90d 	bl	80001f8 <__aeabi_dsub>
 800cfde:	a3a0      	add	r3, pc, #640	; (adr r3, 800d260 <__ieee754_rem_pio2+0x318>)
 800cfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfe4:	4604      	mov	r4, r0
 800cfe6:	460d      	mov	r5, r1
 800cfe8:	f7f3 f906 	bl	80001f8 <__aeabi_dsub>
 800cfec:	4602      	mov	r2, r0
 800cfee:	460b      	mov	r3, r1
 800cff0:	e9ca 2300 	strd	r2, r3, [sl]
 800cff4:	4620      	mov	r0, r4
 800cff6:	4629      	mov	r1, r5
 800cff8:	f7f3 f8fe 	bl	80001f8 <__aeabi_dsub>
 800cffc:	a398      	add	r3, pc, #608	; (adr r3, 800d260 <__ieee754_rem_pio2+0x318>)
 800cffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d002:	e7db      	b.n	800cfbc <__ieee754_rem_pio2+0x74>
 800d004:	f7f3 f8fa 	bl	80001fc <__adddf3>
 800d008:	45b0      	cmp	r8, r6
 800d00a:	4604      	mov	r4, r0
 800d00c:	460d      	mov	r5, r1
 800d00e:	d016      	beq.n	800d03e <__ieee754_rem_pio2+0xf6>
 800d010:	a38f      	add	r3, pc, #572	; (adr r3, 800d250 <__ieee754_rem_pio2+0x308>)
 800d012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d016:	f7f3 f8f1 	bl	80001fc <__adddf3>
 800d01a:	4602      	mov	r2, r0
 800d01c:	460b      	mov	r3, r1
 800d01e:	e9ca 2300 	strd	r2, r3, [sl]
 800d022:	4620      	mov	r0, r4
 800d024:	4629      	mov	r1, r5
 800d026:	f7f3 f8e7 	bl	80001f8 <__aeabi_dsub>
 800d02a:	a389      	add	r3, pc, #548	; (adr r3, 800d250 <__ieee754_rem_pio2+0x308>)
 800d02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d030:	f7f3 f8e4 	bl	80001fc <__adddf3>
 800d034:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800d038:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d03c:	e7c4      	b.n	800cfc8 <__ieee754_rem_pio2+0x80>
 800d03e:	a386      	add	r3, pc, #536	; (adr r3, 800d258 <__ieee754_rem_pio2+0x310>)
 800d040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d044:	f7f3 f8da 	bl	80001fc <__adddf3>
 800d048:	a385      	add	r3, pc, #532	; (adr r3, 800d260 <__ieee754_rem_pio2+0x318>)
 800d04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04e:	4604      	mov	r4, r0
 800d050:	460d      	mov	r5, r1
 800d052:	f7f3 f8d3 	bl	80001fc <__adddf3>
 800d056:	4602      	mov	r2, r0
 800d058:	460b      	mov	r3, r1
 800d05a:	e9ca 2300 	strd	r2, r3, [sl]
 800d05e:	4620      	mov	r0, r4
 800d060:	4629      	mov	r1, r5
 800d062:	f7f3 f8c9 	bl	80001f8 <__aeabi_dsub>
 800d066:	a37e      	add	r3, pc, #504	; (adr r3, 800d260 <__ieee754_rem_pio2+0x318>)
 800d068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06c:	e7e0      	b.n	800d030 <__ieee754_rem_pio2+0xe8>
 800d06e:	4b87      	ldr	r3, [pc, #540]	; (800d28c <__ieee754_rem_pio2+0x344>)
 800d070:	4598      	cmp	r8, r3
 800d072:	f300 80d9 	bgt.w	800d228 <__ieee754_rem_pio2+0x2e0>
 800d076:	f7ff fb6b 	bl	800c750 <fabs>
 800d07a:	ec55 4b10 	vmov	r4, r5, d0
 800d07e:	ee10 0a10 	vmov	r0, s0
 800d082:	a379      	add	r3, pc, #484	; (adr r3, 800d268 <__ieee754_rem_pio2+0x320>)
 800d084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d088:	4629      	mov	r1, r5
 800d08a:	f7f3 fa6d 	bl	8000568 <__aeabi_dmul>
 800d08e:	4b80      	ldr	r3, [pc, #512]	; (800d290 <__ieee754_rem_pio2+0x348>)
 800d090:	2200      	movs	r2, #0
 800d092:	f7f3 f8b3 	bl	80001fc <__adddf3>
 800d096:	f7f3 fd17 	bl	8000ac8 <__aeabi_d2iz>
 800d09a:	4683      	mov	fp, r0
 800d09c:	f7f3 f9fa 	bl	8000494 <__aeabi_i2d>
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	ec43 2b18 	vmov	d8, r2, r3
 800d0a8:	a367      	add	r3, pc, #412	; (adr r3, 800d248 <__ieee754_rem_pio2+0x300>)
 800d0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ae:	f7f3 fa5b 	bl	8000568 <__aeabi_dmul>
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	460b      	mov	r3, r1
 800d0b6:	4620      	mov	r0, r4
 800d0b8:	4629      	mov	r1, r5
 800d0ba:	f7f3 f89d 	bl	80001f8 <__aeabi_dsub>
 800d0be:	a364      	add	r3, pc, #400	; (adr r3, 800d250 <__ieee754_rem_pio2+0x308>)
 800d0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c4:	4606      	mov	r6, r0
 800d0c6:	460f      	mov	r7, r1
 800d0c8:	ec51 0b18 	vmov	r0, r1, d8
 800d0cc:	f7f3 fa4c 	bl	8000568 <__aeabi_dmul>
 800d0d0:	f1bb 0f1f 	cmp.w	fp, #31
 800d0d4:	4604      	mov	r4, r0
 800d0d6:	460d      	mov	r5, r1
 800d0d8:	dc0d      	bgt.n	800d0f6 <__ieee754_rem_pio2+0x1ae>
 800d0da:	4b6e      	ldr	r3, [pc, #440]	; (800d294 <__ieee754_rem_pio2+0x34c>)
 800d0dc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800d0e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0e4:	4543      	cmp	r3, r8
 800d0e6:	d006      	beq.n	800d0f6 <__ieee754_rem_pio2+0x1ae>
 800d0e8:	4622      	mov	r2, r4
 800d0ea:	462b      	mov	r3, r5
 800d0ec:	4630      	mov	r0, r6
 800d0ee:	4639      	mov	r1, r7
 800d0f0:	f7f3 f882 	bl	80001f8 <__aeabi_dsub>
 800d0f4:	e00f      	b.n	800d116 <__ieee754_rem_pio2+0x1ce>
 800d0f6:	462b      	mov	r3, r5
 800d0f8:	4622      	mov	r2, r4
 800d0fa:	4630      	mov	r0, r6
 800d0fc:	4639      	mov	r1, r7
 800d0fe:	f7f3 f87b 	bl	80001f8 <__aeabi_dsub>
 800d102:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d106:	9303      	str	r3, [sp, #12]
 800d108:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d10c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800d110:	f1b8 0f10 	cmp.w	r8, #16
 800d114:	dc02      	bgt.n	800d11c <__ieee754_rem_pio2+0x1d4>
 800d116:	e9ca 0100 	strd	r0, r1, [sl]
 800d11a:	e039      	b.n	800d190 <__ieee754_rem_pio2+0x248>
 800d11c:	a34e      	add	r3, pc, #312	; (adr r3, 800d258 <__ieee754_rem_pio2+0x310>)
 800d11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d122:	ec51 0b18 	vmov	r0, r1, d8
 800d126:	f7f3 fa1f 	bl	8000568 <__aeabi_dmul>
 800d12a:	4604      	mov	r4, r0
 800d12c:	460d      	mov	r5, r1
 800d12e:	4602      	mov	r2, r0
 800d130:	460b      	mov	r3, r1
 800d132:	4630      	mov	r0, r6
 800d134:	4639      	mov	r1, r7
 800d136:	f7f3 f85f 	bl	80001f8 <__aeabi_dsub>
 800d13a:	4602      	mov	r2, r0
 800d13c:	460b      	mov	r3, r1
 800d13e:	4680      	mov	r8, r0
 800d140:	4689      	mov	r9, r1
 800d142:	4630      	mov	r0, r6
 800d144:	4639      	mov	r1, r7
 800d146:	f7f3 f857 	bl	80001f8 <__aeabi_dsub>
 800d14a:	4622      	mov	r2, r4
 800d14c:	462b      	mov	r3, r5
 800d14e:	f7f3 f853 	bl	80001f8 <__aeabi_dsub>
 800d152:	a343      	add	r3, pc, #268	; (adr r3, 800d260 <__ieee754_rem_pio2+0x318>)
 800d154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d158:	4604      	mov	r4, r0
 800d15a:	460d      	mov	r5, r1
 800d15c:	ec51 0b18 	vmov	r0, r1, d8
 800d160:	f7f3 fa02 	bl	8000568 <__aeabi_dmul>
 800d164:	4622      	mov	r2, r4
 800d166:	462b      	mov	r3, r5
 800d168:	f7f3 f846 	bl	80001f8 <__aeabi_dsub>
 800d16c:	4602      	mov	r2, r0
 800d16e:	460b      	mov	r3, r1
 800d170:	4604      	mov	r4, r0
 800d172:	460d      	mov	r5, r1
 800d174:	4640      	mov	r0, r8
 800d176:	4649      	mov	r1, r9
 800d178:	f7f3 f83e 	bl	80001f8 <__aeabi_dsub>
 800d17c:	9a03      	ldr	r2, [sp, #12]
 800d17e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d182:	1ad3      	subs	r3, r2, r3
 800d184:	2b31      	cmp	r3, #49	; 0x31
 800d186:	dc24      	bgt.n	800d1d2 <__ieee754_rem_pio2+0x28a>
 800d188:	e9ca 0100 	strd	r0, r1, [sl]
 800d18c:	4646      	mov	r6, r8
 800d18e:	464f      	mov	r7, r9
 800d190:	e9da 8900 	ldrd	r8, r9, [sl]
 800d194:	4630      	mov	r0, r6
 800d196:	4642      	mov	r2, r8
 800d198:	464b      	mov	r3, r9
 800d19a:	4639      	mov	r1, r7
 800d19c:	f7f3 f82c 	bl	80001f8 <__aeabi_dsub>
 800d1a0:	462b      	mov	r3, r5
 800d1a2:	4622      	mov	r2, r4
 800d1a4:	f7f3 f828 	bl	80001f8 <__aeabi_dsub>
 800d1a8:	9b02      	ldr	r3, [sp, #8]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d1b0:	f6bf af0a 	bge.w	800cfc8 <__ieee754_rem_pio2+0x80>
 800d1b4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d1b8:	f8ca 3004 	str.w	r3, [sl, #4]
 800d1bc:	f8ca 8000 	str.w	r8, [sl]
 800d1c0:	f8ca 0008 	str.w	r0, [sl, #8]
 800d1c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d1c8:	f8ca 300c 	str.w	r3, [sl, #12]
 800d1cc:	f1cb 0b00 	rsb	fp, fp, #0
 800d1d0:	e6fa      	b.n	800cfc8 <__ieee754_rem_pio2+0x80>
 800d1d2:	a327      	add	r3, pc, #156	; (adr r3, 800d270 <__ieee754_rem_pio2+0x328>)
 800d1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d8:	ec51 0b18 	vmov	r0, r1, d8
 800d1dc:	f7f3 f9c4 	bl	8000568 <__aeabi_dmul>
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	460d      	mov	r5, r1
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	4640      	mov	r0, r8
 800d1ea:	4649      	mov	r1, r9
 800d1ec:	f7f3 f804 	bl	80001f8 <__aeabi_dsub>
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	4606      	mov	r6, r0
 800d1f6:	460f      	mov	r7, r1
 800d1f8:	4640      	mov	r0, r8
 800d1fa:	4649      	mov	r1, r9
 800d1fc:	f7f2 fffc 	bl	80001f8 <__aeabi_dsub>
 800d200:	4622      	mov	r2, r4
 800d202:	462b      	mov	r3, r5
 800d204:	f7f2 fff8 	bl	80001f8 <__aeabi_dsub>
 800d208:	a31b      	add	r3, pc, #108	; (adr r3, 800d278 <__ieee754_rem_pio2+0x330>)
 800d20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20e:	4604      	mov	r4, r0
 800d210:	460d      	mov	r5, r1
 800d212:	ec51 0b18 	vmov	r0, r1, d8
 800d216:	f7f3 f9a7 	bl	8000568 <__aeabi_dmul>
 800d21a:	4622      	mov	r2, r4
 800d21c:	462b      	mov	r3, r5
 800d21e:	f7f2 ffeb 	bl	80001f8 <__aeabi_dsub>
 800d222:	4604      	mov	r4, r0
 800d224:	460d      	mov	r5, r1
 800d226:	e75f      	b.n	800d0e8 <__ieee754_rem_pio2+0x1a0>
 800d228:	4b1b      	ldr	r3, [pc, #108]	; (800d298 <__ieee754_rem_pio2+0x350>)
 800d22a:	4598      	cmp	r8, r3
 800d22c:	dd36      	ble.n	800d29c <__ieee754_rem_pio2+0x354>
 800d22e:	ee10 2a10 	vmov	r2, s0
 800d232:	462b      	mov	r3, r5
 800d234:	4620      	mov	r0, r4
 800d236:	4629      	mov	r1, r5
 800d238:	f7f2 ffde 	bl	80001f8 <__aeabi_dsub>
 800d23c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d240:	e9ca 0100 	strd	r0, r1, [sl]
 800d244:	e694      	b.n	800cf70 <__ieee754_rem_pio2+0x28>
 800d246:	bf00      	nop
 800d248:	54400000 	.word	0x54400000
 800d24c:	3ff921fb 	.word	0x3ff921fb
 800d250:	1a626331 	.word	0x1a626331
 800d254:	3dd0b461 	.word	0x3dd0b461
 800d258:	1a600000 	.word	0x1a600000
 800d25c:	3dd0b461 	.word	0x3dd0b461
 800d260:	2e037073 	.word	0x2e037073
 800d264:	3ba3198a 	.word	0x3ba3198a
 800d268:	6dc9c883 	.word	0x6dc9c883
 800d26c:	3fe45f30 	.word	0x3fe45f30
 800d270:	2e000000 	.word	0x2e000000
 800d274:	3ba3198a 	.word	0x3ba3198a
 800d278:	252049c1 	.word	0x252049c1
 800d27c:	397b839a 	.word	0x397b839a
 800d280:	3fe921fb 	.word	0x3fe921fb
 800d284:	4002d97b 	.word	0x4002d97b
 800d288:	3ff921fb 	.word	0x3ff921fb
 800d28c:	413921fb 	.word	0x413921fb
 800d290:	3fe00000 	.word	0x3fe00000
 800d294:	0800e3d8 	.word	0x0800e3d8
 800d298:	7fefffff 	.word	0x7fefffff
 800d29c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800d2a0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800d2a4:	ee10 0a10 	vmov	r0, s0
 800d2a8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800d2ac:	ee10 6a10 	vmov	r6, s0
 800d2b0:	460f      	mov	r7, r1
 800d2b2:	f7f3 fc09 	bl	8000ac8 <__aeabi_d2iz>
 800d2b6:	f7f3 f8ed 	bl	8000494 <__aeabi_i2d>
 800d2ba:	4602      	mov	r2, r0
 800d2bc:	460b      	mov	r3, r1
 800d2be:	4630      	mov	r0, r6
 800d2c0:	4639      	mov	r1, r7
 800d2c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d2c6:	f7f2 ff97 	bl	80001f8 <__aeabi_dsub>
 800d2ca:	4b22      	ldr	r3, [pc, #136]	; (800d354 <__ieee754_rem_pio2+0x40c>)
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	f7f3 f94b 	bl	8000568 <__aeabi_dmul>
 800d2d2:	460f      	mov	r7, r1
 800d2d4:	4606      	mov	r6, r0
 800d2d6:	f7f3 fbf7 	bl	8000ac8 <__aeabi_d2iz>
 800d2da:	f7f3 f8db 	bl	8000494 <__aeabi_i2d>
 800d2de:	4602      	mov	r2, r0
 800d2e0:	460b      	mov	r3, r1
 800d2e2:	4630      	mov	r0, r6
 800d2e4:	4639      	mov	r1, r7
 800d2e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d2ea:	f7f2 ff85 	bl	80001f8 <__aeabi_dsub>
 800d2ee:	4b19      	ldr	r3, [pc, #100]	; (800d354 <__ieee754_rem_pio2+0x40c>)
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	f7f3 f939 	bl	8000568 <__aeabi_dmul>
 800d2f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d2fa:	ad04      	add	r5, sp, #16
 800d2fc:	f04f 0803 	mov.w	r8, #3
 800d300:	46a9      	mov	r9, r5
 800d302:	2600      	movs	r6, #0
 800d304:	2700      	movs	r7, #0
 800d306:	4632      	mov	r2, r6
 800d308:	463b      	mov	r3, r7
 800d30a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d30e:	46c3      	mov	fp, r8
 800d310:	3d08      	subs	r5, #8
 800d312:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d316:	f7f3 fb8f 	bl	8000a38 <__aeabi_dcmpeq>
 800d31a:	2800      	cmp	r0, #0
 800d31c:	d1f3      	bne.n	800d306 <__ieee754_rem_pio2+0x3be>
 800d31e:	4b0e      	ldr	r3, [pc, #56]	; (800d358 <__ieee754_rem_pio2+0x410>)
 800d320:	9301      	str	r3, [sp, #4]
 800d322:	2302      	movs	r3, #2
 800d324:	9300      	str	r3, [sp, #0]
 800d326:	4622      	mov	r2, r4
 800d328:	465b      	mov	r3, fp
 800d32a:	4651      	mov	r1, sl
 800d32c:	4648      	mov	r0, r9
 800d32e:	f000 f993 	bl	800d658 <__kernel_rem_pio2>
 800d332:	9b02      	ldr	r3, [sp, #8]
 800d334:	2b00      	cmp	r3, #0
 800d336:	4683      	mov	fp, r0
 800d338:	f6bf ae46 	bge.w	800cfc8 <__ieee754_rem_pio2+0x80>
 800d33c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d340:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d344:	f8ca 3004 	str.w	r3, [sl, #4]
 800d348:	f8da 300c 	ldr.w	r3, [sl, #12]
 800d34c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d350:	e73a      	b.n	800d1c8 <__ieee754_rem_pio2+0x280>
 800d352:	bf00      	nop
 800d354:	41700000 	.word	0x41700000
 800d358:	0800e458 	.word	0x0800e458

0800d35c <__ieee754_sqrt>:
 800d35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d360:	ec55 4b10 	vmov	r4, r5, d0
 800d364:	4e56      	ldr	r6, [pc, #344]	; (800d4c0 <__ieee754_sqrt+0x164>)
 800d366:	43ae      	bics	r6, r5
 800d368:	ee10 0a10 	vmov	r0, s0
 800d36c:	ee10 3a10 	vmov	r3, s0
 800d370:	4629      	mov	r1, r5
 800d372:	462a      	mov	r2, r5
 800d374:	d110      	bne.n	800d398 <__ieee754_sqrt+0x3c>
 800d376:	ee10 2a10 	vmov	r2, s0
 800d37a:	462b      	mov	r3, r5
 800d37c:	f7f3 f8f4 	bl	8000568 <__aeabi_dmul>
 800d380:	4602      	mov	r2, r0
 800d382:	460b      	mov	r3, r1
 800d384:	4620      	mov	r0, r4
 800d386:	4629      	mov	r1, r5
 800d388:	f7f2 ff38 	bl	80001fc <__adddf3>
 800d38c:	4604      	mov	r4, r0
 800d38e:	460d      	mov	r5, r1
 800d390:	ec45 4b10 	vmov	d0, r4, r5
 800d394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d398:	2d00      	cmp	r5, #0
 800d39a:	dc10      	bgt.n	800d3be <__ieee754_sqrt+0x62>
 800d39c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d3a0:	4330      	orrs	r0, r6
 800d3a2:	d0f5      	beq.n	800d390 <__ieee754_sqrt+0x34>
 800d3a4:	b15d      	cbz	r5, 800d3be <__ieee754_sqrt+0x62>
 800d3a6:	ee10 2a10 	vmov	r2, s0
 800d3aa:	462b      	mov	r3, r5
 800d3ac:	ee10 0a10 	vmov	r0, s0
 800d3b0:	f7f2 ff22 	bl	80001f8 <__aeabi_dsub>
 800d3b4:	4602      	mov	r2, r0
 800d3b6:	460b      	mov	r3, r1
 800d3b8:	f7f3 fa00 	bl	80007bc <__aeabi_ddiv>
 800d3bc:	e7e6      	b.n	800d38c <__ieee754_sqrt+0x30>
 800d3be:	1509      	asrs	r1, r1, #20
 800d3c0:	d076      	beq.n	800d4b0 <__ieee754_sqrt+0x154>
 800d3c2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d3c6:	07ce      	lsls	r6, r1, #31
 800d3c8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800d3cc:	bf5e      	ittt	pl
 800d3ce:	0fda      	lsrpl	r2, r3, #31
 800d3d0:	005b      	lslpl	r3, r3, #1
 800d3d2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800d3d6:	0fda      	lsrs	r2, r3, #31
 800d3d8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800d3dc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800d3e0:	2000      	movs	r0, #0
 800d3e2:	106d      	asrs	r5, r5, #1
 800d3e4:	005b      	lsls	r3, r3, #1
 800d3e6:	f04f 0e16 	mov.w	lr, #22
 800d3ea:	4684      	mov	ip, r0
 800d3ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d3f0:	eb0c 0401 	add.w	r4, ip, r1
 800d3f4:	4294      	cmp	r4, r2
 800d3f6:	bfde      	ittt	le
 800d3f8:	1b12      	suble	r2, r2, r4
 800d3fa:	eb04 0c01 	addle.w	ip, r4, r1
 800d3fe:	1840      	addle	r0, r0, r1
 800d400:	0052      	lsls	r2, r2, #1
 800d402:	f1be 0e01 	subs.w	lr, lr, #1
 800d406:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d40a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d40e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d412:	d1ed      	bne.n	800d3f0 <__ieee754_sqrt+0x94>
 800d414:	4671      	mov	r1, lr
 800d416:	2720      	movs	r7, #32
 800d418:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d41c:	4562      	cmp	r2, ip
 800d41e:	eb04 060e 	add.w	r6, r4, lr
 800d422:	dc02      	bgt.n	800d42a <__ieee754_sqrt+0xce>
 800d424:	d113      	bne.n	800d44e <__ieee754_sqrt+0xf2>
 800d426:	429e      	cmp	r6, r3
 800d428:	d811      	bhi.n	800d44e <__ieee754_sqrt+0xf2>
 800d42a:	2e00      	cmp	r6, #0
 800d42c:	eb06 0e04 	add.w	lr, r6, r4
 800d430:	da43      	bge.n	800d4ba <__ieee754_sqrt+0x15e>
 800d432:	f1be 0f00 	cmp.w	lr, #0
 800d436:	db40      	blt.n	800d4ba <__ieee754_sqrt+0x15e>
 800d438:	f10c 0801 	add.w	r8, ip, #1
 800d43c:	eba2 020c 	sub.w	r2, r2, ip
 800d440:	429e      	cmp	r6, r3
 800d442:	bf88      	it	hi
 800d444:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800d448:	1b9b      	subs	r3, r3, r6
 800d44a:	4421      	add	r1, r4
 800d44c:	46c4      	mov	ip, r8
 800d44e:	0052      	lsls	r2, r2, #1
 800d450:	3f01      	subs	r7, #1
 800d452:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d456:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d45a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d45e:	d1dd      	bne.n	800d41c <__ieee754_sqrt+0xc0>
 800d460:	4313      	orrs	r3, r2
 800d462:	d006      	beq.n	800d472 <__ieee754_sqrt+0x116>
 800d464:	1c4c      	adds	r4, r1, #1
 800d466:	bf13      	iteet	ne
 800d468:	3101      	addne	r1, #1
 800d46a:	3001      	addeq	r0, #1
 800d46c:	4639      	moveq	r1, r7
 800d46e:	f021 0101 	bicne.w	r1, r1, #1
 800d472:	1043      	asrs	r3, r0, #1
 800d474:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d478:	0849      	lsrs	r1, r1, #1
 800d47a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d47e:	07c2      	lsls	r2, r0, #31
 800d480:	bf48      	it	mi
 800d482:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800d486:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800d48a:	460c      	mov	r4, r1
 800d48c:	463d      	mov	r5, r7
 800d48e:	e77f      	b.n	800d390 <__ieee754_sqrt+0x34>
 800d490:	0ada      	lsrs	r2, r3, #11
 800d492:	3815      	subs	r0, #21
 800d494:	055b      	lsls	r3, r3, #21
 800d496:	2a00      	cmp	r2, #0
 800d498:	d0fa      	beq.n	800d490 <__ieee754_sqrt+0x134>
 800d49a:	02d7      	lsls	r7, r2, #11
 800d49c:	d50a      	bpl.n	800d4b4 <__ieee754_sqrt+0x158>
 800d49e:	f1c1 0420 	rsb	r4, r1, #32
 800d4a2:	fa23 f404 	lsr.w	r4, r3, r4
 800d4a6:	1e4d      	subs	r5, r1, #1
 800d4a8:	408b      	lsls	r3, r1
 800d4aa:	4322      	orrs	r2, r4
 800d4ac:	1b41      	subs	r1, r0, r5
 800d4ae:	e788      	b.n	800d3c2 <__ieee754_sqrt+0x66>
 800d4b0:	4608      	mov	r0, r1
 800d4b2:	e7f0      	b.n	800d496 <__ieee754_sqrt+0x13a>
 800d4b4:	0052      	lsls	r2, r2, #1
 800d4b6:	3101      	adds	r1, #1
 800d4b8:	e7ef      	b.n	800d49a <__ieee754_sqrt+0x13e>
 800d4ba:	46e0      	mov	r8, ip
 800d4bc:	e7be      	b.n	800d43c <__ieee754_sqrt+0xe0>
 800d4be:	bf00      	nop
 800d4c0:	7ff00000 	.word	0x7ff00000
 800d4c4:	00000000 	.word	0x00000000

0800d4c8 <__kernel_cos>:
 800d4c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4cc:	ec57 6b10 	vmov	r6, r7, d0
 800d4d0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d4d4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d4d8:	ed8d 1b00 	vstr	d1, [sp]
 800d4dc:	da07      	bge.n	800d4ee <__kernel_cos+0x26>
 800d4de:	ee10 0a10 	vmov	r0, s0
 800d4e2:	4639      	mov	r1, r7
 800d4e4:	f7f3 faf0 	bl	8000ac8 <__aeabi_d2iz>
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	f000 8088 	beq.w	800d5fe <__kernel_cos+0x136>
 800d4ee:	4632      	mov	r2, r6
 800d4f0:	463b      	mov	r3, r7
 800d4f2:	4630      	mov	r0, r6
 800d4f4:	4639      	mov	r1, r7
 800d4f6:	f7f3 f837 	bl	8000568 <__aeabi_dmul>
 800d4fa:	4b51      	ldr	r3, [pc, #324]	; (800d640 <__kernel_cos+0x178>)
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	4604      	mov	r4, r0
 800d500:	460d      	mov	r5, r1
 800d502:	f7f3 f831 	bl	8000568 <__aeabi_dmul>
 800d506:	a340      	add	r3, pc, #256	; (adr r3, 800d608 <__kernel_cos+0x140>)
 800d508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50c:	4682      	mov	sl, r0
 800d50e:	468b      	mov	fp, r1
 800d510:	4620      	mov	r0, r4
 800d512:	4629      	mov	r1, r5
 800d514:	f7f3 f828 	bl	8000568 <__aeabi_dmul>
 800d518:	a33d      	add	r3, pc, #244	; (adr r3, 800d610 <__kernel_cos+0x148>)
 800d51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51e:	f7f2 fe6d 	bl	80001fc <__adddf3>
 800d522:	4622      	mov	r2, r4
 800d524:	462b      	mov	r3, r5
 800d526:	f7f3 f81f 	bl	8000568 <__aeabi_dmul>
 800d52a:	a33b      	add	r3, pc, #236	; (adr r3, 800d618 <__kernel_cos+0x150>)
 800d52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d530:	f7f2 fe62 	bl	80001f8 <__aeabi_dsub>
 800d534:	4622      	mov	r2, r4
 800d536:	462b      	mov	r3, r5
 800d538:	f7f3 f816 	bl	8000568 <__aeabi_dmul>
 800d53c:	a338      	add	r3, pc, #224	; (adr r3, 800d620 <__kernel_cos+0x158>)
 800d53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d542:	f7f2 fe5b 	bl	80001fc <__adddf3>
 800d546:	4622      	mov	r2, r4
 800d548:	462b      	mov	r3, r5
 800d54a:	f7f3 f80d 	bl	8000568 <__aeabi_dmul>
 800d54e:	a336      	add	r3, pc, #216	; (adr r3, 800d628 <__kernel_cos+0x160>)
 800d550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d554:	f7f2 fe50 	bl	80001f8 <__aeabi_dsub>
 800d558:	4622      	mov	r2, r4
 800d55a:	462b      	mov	r3, r5
 800d55c:	f7f3 f804 	bl	8000568 <__aeabi_dmul>
 800d560:	a333      	add	r3, pc, #204	; (adr r3, 800d630 <__kernel_cos+0x168>)
 800d562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d566:	f7f2 fe49 	bl	80001fc <__adddf3>
 800d56a:	4622      	mov	r2, r4
 800d56c:	462b      	mov	r3, r5
 800d56e:	f7f2 fffb 	bl	8000568 <__aeabi_dmul>
 800d572:	4622      	mov	r2, r4
 800d574:	462b      	mov	r3, r5
 800d576:	f7f2 fff7 	bl	8000568 <__aeabi_dmul>
 800d57a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d57e:	4604      	mov	r4, r0
 800d580:	460d      	mov	r5, r1
 800d582:	4630      	mov	r0, r6
 800d584:	4639      	mov	r1, r7
 800d586:	f7f2 ffef 	bl	8000568 <__aeabi_dmul>
 800d58a:	460b      	mov	r3, r1
 800d58c:	4602      	mov	r2, r0
 800d58e:	4629      	mov	r1, r5
 800d590:	4620      	mov	r0, r4
 800d592:	f7f2 fe31 	bl	80001f8 <__aeabi_dsub>
 800d596:	4b2b      	ldr	r3, [pc, #172]	; (800d644 <__kernel_cos+0x17c>)
 800d598:	4598      	cmp	r8, r3
 800d59a:	4606      	mov	r6, r0
 800d59c:	460f      	mov	r7, r1
 800d59e:	dc10      	bgt.n	800d5c2 <__kernel_cos+0xfa>
 800d5a0:	4602      	mov	r2, r0
 800d5a2:	460b      	mov	r3, r1
 800d5a4:	4650      	mov	r0, sl
 800d5a6:	4659      	mov	r1, fp
 800d5a8:	f7f2 fe26 	bl	80001f8 <__aeabi_dsub>
 800d5ac:	460b      	mov	r3, r1
 800d5ae:	4926      	ldr	r1, [pc, #152]	; (800d648 <__kernel_cos+0x180>)
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	2000      	movs	r0, #0
 800d5b4:	f7f2 fe20 	bl	80001f8 <__aeabi_dsub>
 800d5b8:	ec41 0b10 	vmov	d0, r0, r1
 800d5bc:	b003      	add	sp, #12
 800d5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5c2:	4b22      	ldr	r3, [pc, #136]	; (800d64c <__kernel_cos+0x184>)
 800d5c4:	4920      	ldr	r1, [pc, #128]	; (800d648 <__kernel_cos+0x180>)
 800d5c6:	4598      	cmp	r8, r3
 800d5c8:	bfcc      	ite	gt
 800d5ca:	4d21      	ldrgt	r5, [pc, #132]	; (800d650 <__kernel_cos+0x188>)
 800d5cc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d5d0:	2400      	movs	r4, #0
 800d5d2:	4622      	mov	r2, r4
 800d5d4:	462b      	mov	r3, r5
 800d5d6:	2000      	movs	r0, #0
 800d5d8:	f7f2 fe0e 	bl	80001f8 <__aeabi_dsub>
 800d5dc:	4622      	mov	r2, r4
 800d5de:	4680      	mov	r8, r0
 800d5e0:	4689      	mov	r9, r1
 800d5e2:	462b      	mov	r3, r5
 800d5e4:	4650      	mov	r0, sl
 800d5e6:	4659      	mov	r1, fp
 800d5e8:	f7f2 fe06 	bl	80001f8 <__aeabi_dsub>
 800d5ec:	4632      	mov	r2, r6
 800d5ee:	463b      	mov	r3, r7
 800d5f0:	f7f2 fe02 	bl	80001f8 <__aeabi_dsub>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	460b      	mov	r3, r1
 800d5f8:	4640      	mov	r0, r8
 800d5fa:	4649      	mov	r1, r9
 800d5fc:	e7da      	b.n	800d5b4 <__kernel_cos+0xec>
 800d5fe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d638 <__kernel_cos+0x170>
 800d602:	e7db      	b.n	800d5bc <__kernel_cos+0xf4>
 800d604:	f3af 8000 	nop.w
 800d608:	be8838d4 	.word	0xbe8838d4
 800d60c:	bda8fae9 	.word	0xbda8fae9
 800d610:	bdb4b1c4 	.word	0xbdb4b1c4
 800d614:	3e21ee9e 	.word	0x3e21ee9e
 800d618:	809c52ad 	.word	0x809c52ad
 800d61c:	3e927e4f 	.word	0x3e927e4f
 800d620:	19cb1590 	.word	0x19cb1590
 800d624:	3efa01a0 	.word	0x3efa01a0
 800d628:	16c15177 	.word	0x16c15177
 800d62c:	3f56c16c 	.word	0x3f56c16c
 800d630:	5555554c 	.word	0x5555554c
 800d634:	3fa55555 	.word	0x3fa55555
 800d638:	00000000 	.word	0x00000000
 800d63c:	3ff00000 	.word	0x3ff00000
 800d640:	3fe00000 	.word	0x3fe00000
 800d644:	3fd33332 	.word	0x3fd33332
 800d648:	3ff00000 	.word	0x3ff00000
 800d64c:	3fe90000 	.word	0x3fe90000
 800d650:	3fd20000 	.word	0x3fd20000
 800d654:	00000000 	.word	0x00000000

0800d658 <__kernel_rem_pio2>:
 800d658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d65c:	ed2d 8b02 	vpush	{d8}
 800d660:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d664:	f112 0f14 	cmn.w	r2, #20
 800d668:	9308      	str	r3, [sp, #32]
 800d66a:	9101      	str	r1, [sp, #4]
 800d66c:	4bc6      	ldr	r3, [pc, #792]	; (800d988 <__kernel_rem_pio2+0x330>)
 800d66e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800d670:	9009      	str	r0, [sp, #36]	; 0x24
 800d672:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d676:	9304      	str	r3, [sp, #16]
 800d678:	9b08      	ldr	r3, [sp, #32]
 800d67a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d67e:	bfa8      	it	ge
 800d680:	1ed4      	subge	r4, r2, #3
 800d682:	9306      	str	r3, [sp, #24]
 800d684:	bfb2      	itee	lt
 800d686:	2400      	movlt	r4, #0
 800d688:	2318      	movge	r3, #24
 800d68a:	fb94 f4f3 	sdivge	r4, r4, r3
 800d68e:	f06f 0317 	mvn.w	r3, #23
 800d692:	fb04 3303 	mla	r3, r4, r3, r3
 800d696:	eb03 0a02 	add.w	sl, r3, r2
 800d69a:	9b04      	ldr	r3, [sp, #16]
 800d69c:	9a06      	ldr	r2, [sp, #24]
 800d69e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800d978 <__kernel_rem_pio2+0x320>
 800d6a2:	eb03 0802 	add.w	r8, r3, r2
 800d6a6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d6a8:	1aa7      	subs	r7, r4, r2
 800d6aa:	ae20      	add	r6, sp, #128	; 0x80
 800d6ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d6b0:	2500      	movs	r5, #0
 800d6b2:	4545      	cmp	r5, r8
 800d6b4:	dd18      	ble.n	800d6e8 <__kernel_rem_pio2+0x90>
 800d6b6:	9b08      	ldr	r3, [sp, #32]
 800d6b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800d6bc:	aa20      	add	r2, sp, #128	; 0x80
 800d6be:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800d978 <__kernel_rem_pio2+0x320>
 800d6c2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d6c6:	f1c3 0301 	rsb	r3, r3, #1
 800d6ca:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800d6ce:	9307      	str	r3, [sp, #28]
 800d6d0:	9b07      	ldr	r3, [sp, #28]
 800d6d2:	9a04      	ldr	r2, [sp, #16]
 800d6d4:	4443      	add	r3, r8
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	db2f      	blt.n	800d73a <__kernel_rem_pio2+0xe2>
 800d6da:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d6de:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d6e2:	462f      	mov	r7, r5
 800d6e4:	2600      	movs	r6, #0
 800d6e6:	e01b      	b.n	800d720 <__kernel_rem_pio2+0xc8>
 800d6e8:	42ef      	cmn	r7, r5
 800d6ea:	d407      	bmi.n	800d6fc <__kernel_rem_pio2+0xa4>
 800d6ec:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d6f0:	f7f2 fed0 	bl	8000494 <__aeabi_i2d>
 800d6f4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d6f8:	3501      	adds	r5, #1
 800d6fa:	e7da      	b.n	800d6b2 <__kernel_rem_pio2+0x5a>
 800d6fc:	ec51 0b18 	vmov	r0, r1, d8
 800d700:	e7f8      	b.n	800d6f4 <__kernel_rem_pio2+0x9c>
 800d702:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d706:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d70a:	f7f2 ff2d 	bl	8000568 <__aeabi_dmul>
 800d70e:	4602      	mov	r2, r0
 800d710:	460b      	mov	r3, r1
 800d712:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d716:	f7f2 fd71 	bl	80001fc <__adddf3>
 800d71a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d71e:	3601      	adds	r6, #1
 800d720:	9b06      	ldr	r3, [sp, #24]
 800d722:	429e      	cmp	r6, r3
 800d724:	f1a7 0708 	sub.w	r7, r7, #8
 800d728:	ddeb      	ble.n	800d702 <__kernel_rem_pio2+0xaa>
 800d72a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d72e:	3508      	adds	r5, #8
 800d730:	ecab 7b02 	vstmia	fp!, {d7}
 800d734:	f108 0801 	add.w	r8, r8, #1
 800d738:	e7ca      	b.n	800d6d0 <__kernel_rem_pio2+0x78>
 800d73a:	9b04      	ldr	r3, [sp, #16]
 800d73c:	aa0c      	add	r2, sp, #48	; 0x30
 800d73e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d742:	930b      	str	r3, [sp, #44]	; 0x2c
 800d744:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800d746:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d74a:	9c04      	ldr	r4, [sp, #16]
 800d74c:	930a      	str	r3, [sp, #40]	; 0x28
 800d74e:	ab98      	add	r3, sp, #608	; 0x260
 800d750:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d754:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d758:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800d75c:	f8cd b008 	str.w	fp, [sp, #8]
 800d760:	4625      	mov	r5, r4
 800d762:	2d00      	cmp	r5, #0
 800d764:	dc78      	bgt.n	800d858 <__kernel_rem_pio2+0x200>
 800d766:	ec47 6b10 	vmov	d0, r6, r7
 800d76a:	4650      	mov	r0, sl
 800d76c:	f000 fbfc 	bl	800df68 <scalbn>
 800d770:	ec57 6b10 	vmov	r6, r7, d0
 800d774:	2200      	movs	r2, #0
 800d776:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d77a:	ee10 0a10 	vmov	r0, s0
 800d77e:	4639      	mov	r1, r7
 800d780:	f7f2 fef2 	bl	8000568 <__aeabi_dmul>
 800d784:	ec41 0b10 	vmov	d0, r0, r1
 800d788:	f000 fb66 	bl	800de58 <floor>
 800d78c:	4b7f      	ldr	r3, [pc, #508]	; (800d98c <__kernel_rem_pio2+0x334>)
 800d78e:	ec51 0b10 	vmov	r0, r1, d0
 800d792:	2200      	movs	r2, #0
 800d794:	f7f2 fee8 	bl	8000568 <__aeabi_dmul>
 800d798:	4602      	mov	r2, r0
 800d79a:	460b      	mov	r3, r1
 800d79c:	4630      	mov	r0, r6
 800d79e:	4639      	mov	r1, r7
 800d7a0:	f7f2 fd2a 	bl	80001f8 <__aeabi_dsub>
 800d7a4:	460f      	mov	r7, r1
 800d7a6:	4606      	mov	r6, r0
 800d7a8:	f7f3 f98e 	bl	8000ac8 <__aeabi_d2iz>
 800d7ac:	9007      	str	r0, [sp, #28]
 800d7ae:	f7f2 fe71 	bl	8000494 <__aeabi_i2d>
 800d7b2:	4602      	mov	r2, r0
 800d7b4:	460b      	mov	r3, r1
 800d7b6:	4630      	mov	r0, r6
 800d7b8:	4639      	mov	r1, r7
 800d7ba:	f7f2 fd1d 	bl	80001f8 <__aeabi_dsub>
 800d7be:	f1ba 0f00 	cmp.w	sl, #0
 800d7c2:	4606      	mov	r6, r0
 800d7c4:	460f      	mov	r7, r1
 800d7c6:	dd70      	ble.n	800d8aa <__kernel_rem_pio2+0x252>
 800d7c8:	1e62      	subs	r2, r4, #1
 800d7ca:	ab0c      	add	r3, sp, #48	; 0x30
 800d7cc:	9d07      	ldr	r5, [sp, #28]
 800d7ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d7d2:	f1ca 0118 	rsb	r1, sl, #24
 800d7d6:	fa40 f301 	asr.w	r3, r0, r1
 800d7da:	441d      	add	r5, r3
 800d7dc:	408b      	lsls	r3, r1
 800d7de:	1ac0      	subs	r0, r0, r3
 800d7e0:	ab0c      	add	r3, sp, #48	; 0x30
 800d7e2:	9507      	str	r5, [sp, #28]
 800d7e4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d7e8:	f1ca 0317 	rsb	r3, sl, #23
 800d7ec:	fa40 f303 	asr.w	r3, r0, r3
 800d7f0:	9302      	str	r3, [sp, #8]
 800d7f2:	9b02      	ldr	r3, [sp, #8]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	dd66      	ble.n	800d8c6 <__kernel_rem_pio2+0x26e>
 800d7f8:	9b07      	ldr	r3, [sp, #28]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	9307      	str	r3, [sp, #28]
 800d800:	4615      	mov	r5, r2
 800d802:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d806:	4294      	cmp	r4, r2
 800d808:	f300 8099 	bgt.w	800d93e <__kernel_rem_pio2+0x2e6>
 800d80c:	f1ba 0f00 	cmp.w	sl, #0
 800d810:	dd07      	ble.n	800d822 <__kernel_rem_pio2+0x1ca>
 800d812:	f1ba 0f01 	cmp.w	sl, #1
 800d816:	f000 80a5 	beq.w	800d964 <__kernel_rem_pio2+0x30c>
 800d81a:	f1ba 0f02 	cmp.w	sl, #2
 800d81e:	f000 80c1 	beq.w	800d9a4 <__kernel_rem_pio2+0x34c>
 800d822:	9b02      	ldr	r3, [sp, #8]
 800d824:	2b02      	cmp	r3, #2
 800d826:	d14e      	bne.n	800d8c6 <__kernel_rem_pio2+0x26e>
 800d828:	4632      	mov	r2, r6
 800d82a:	463b      	mov	r3, r7
 800d82c:	4958      	ldr	r1, [pc, #352]	; (800d990 <__kernel_rem_pio2+0x338>)
 800d82e:	2000      	movs	r0, #0
 800d830:	f7f2 fce2 	bl	80001f8 <__aeabi_dsub>
 800d834:	4606      	mov	r6, r0
 800d836:	460f      	mov	r7, r1
 800d838:	2d00      	cmp	r5, #0
 800d83a:	d044      	beq.n	800d8c6 <__kernel_rem_pio2+0x26e>
 800d83c:	4650      	mov	r0, sl
 800d83e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800d980 <__kernel_rem_pio2+0x328>
 800d842:	f000 fb91 	bl	800df68 <scalbn>
 800d846:	4630      	mov	r0, r6
 800d848:	4639      	mov	r1, r7
 800d84a:	ec53 2b10 	vmov	r2, r3, d0
 800d84e:	f7f2 fcd3 	bl	80001f8 <__aeabi_dsub>
 800d852:	4606      	mov	r6, r0
 800d854:	460f      	mov	r7, r1
 800d856:	e036      	b.n	800d8c6 <__kernel_rem_pio2+0x26e>
 800d858:	4b4e      	ldr	r3, [pc, #312]	; (800d994 <__kernel_rem_pio2+0x33c>)
 800d85a:	2200      	movs	r2, #0
 800d85c:	4630      	mov	r0, r6
 800d85e:	4639      	mov	r1, r7
 800d860:	f7f2 fe82 	bl	8000568 <__aeabi_dmul>
 800d864:	f7f3 f930 	bl	8000ac8 <__aeabi_d2iz>
 800d868:	f7f2 fe14 	bl	8000494 <__aeabi_i2d>
 800d86c:	4b4a      	ldr	r3, [pc, #296]	; (800d998 <__kernel_rem_pio2+0x340>)
 800d86e:	2200      	movs	r2, #0
 800d870:	4680      	mov	r8, r0
 800d872:	4689      	mov	r9, r1
 800d874:	f7f2 fe78 	bl	8000568 <__aeabi_dmul>
 800d878:	4602      	mov	r2, r0
 800d87a:	460b      	mov	r3, r1
 800d87c:	4630      	mov	r0, r6
 800d87e:	4639      	mov	r1, r7
 800d880:	f7f2 fcba 	bl	80001f8 <__aeabi_dsub>
 800d884:	f7f3 f920 	bl	8000ac8 <__aeabi_d2iz>
 800d888:	9b02      	ldr	r3, [sp, #8]
 800d88a:	f843 0b04 	str.w	r0, [r3], #4
 800d88e:	3d01      	subs	r5, #1
 800d890:	9302      	str	r3, [sp, #8]
 800d892:	ab70      	add	r3, sp, #448	; 0x1c0
 800d894:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89c:	4640      	mov	r0, r8
 800d89e:	4649      	mov	r1, r9
 800d8a0:	f7f2 fcac 	bl	80001fc <__adddf3>
 800d8a4:	4606      	mov	r6, r0
 800d8a6:	460f      	mov	r7, r1
 800d8a8:	e75b      	b.n	800d762 <__kernel_rem_pio2+0x10a>
 800d8aa:	d105      	bne.n	800d8b8 <__kernel_rem_pio2+0x260>
 800d8ac:	1e63      	subs	r3, r4, #1
 800d8ae:	aa0c      	add	r2, sp, #48	; 0x30
 800d8b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d8b4:	15c3      	asrs	r3, r0, #23
 800d8b6:	e79b      	b.n	800d7f0 <__kernel_rem_pio2+0x198>
 800d8b8:	4b38      	ldr	r3, [pc, #224]	; (800d99c <__kernel_rem_pio2+0x344>)
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	f7f3 f8da 	bl	8000a74 <__aeabi_dcmpge>
 800d8c0:	2800      	cmp	r0, #0
 800d8c2:	d139      	bne.n	800d938 <__kernel_rem_pio2+0x2e0>
 800d8c4:	9002      	str	r0, [sp, #8]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	4630      	mov	r0, r6
 800d8cc:	4639      	mov	r1, r7
 800d8ce:	f7f3 f8b3 	bl	8000a38 <__aeabi_dcmpeq>
 800d8d2:	2800      	cmp	r0, #0
 800d8d4:	f000 80b4 	beq.w	800da40 <__kernel_rem_pio2+0x3e8>
 800d8d8:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800d8dc:	465b      	mov	r3, fp
 800d8de:	2200      	movs	r2, #0
 800d8e0:	9904      	ldr	r1, [sp, #16]
 800d8e2:	428b      	cmp	r3, r1
 800d8e4:	da65      	bge.n	800d9b2 <__kernel_rem_pio2+0x35a>
 800d8e6:	2a00      	cmp	r2, #0
 800d8e8:	d07b      	beq.n	800d9e2 <__kernel_rem_pio2+0x38a>
 800d8ea:	ab0c      	add	r3, sp, #48	; 0x30
 800d8ec:	f1aa 0a18 	sub.w	sl, sl, #24
 800d8f0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	f000 80a0 	beq.w	800da3a <__kernel_rem_pio2+0x3e2>
 800d8fa:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800d980 <__kernel_rem_pio2+0x328>
 800d8fe:	4650      	mov	r0, sl
 800d900:	f000 fb32 	bl	800df68 <scalbn>
 800d904:	4f23      	ldr	r7, [pc, #140]	; (800d994 <__kernel_rem_pio2+0x33c>)
 800d906:	ec55 4b10 	vmov	r4, r5, d0
 800d90a:	46d8      	mov	r8, fp
 800d90c:	2600      	movs	r6, #0
 800d90e:	f1b8 0f00 	cmp.w	r8, #0
 800d912:	f280 80cf 	bge.w	800dab4 <__kernel_rem_pio2+0x45c>
 800d916:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800d978 <__kernel_rem_pio2+0x320>
 800d91a:	465f      	mov	r7, fp
 800d91c:	f04f 0800 	mov.w	r8, #0
 800d920:	2f00      	cmp	r7, #0
 800d922:	f2c0 80fd 	blt.w	800db20 <__kernel_rem_pio2+0x4c8>
 800d926:	ab70      	add	r3, sp, #448	; 0x1c0
 800d928:	f8df a074 	ldr.w	sl, [pc, #116]	; 800d9a0 <__kernel_rem_pio2+0x348>
 800d92c:	ec55 4b18 	vmov	r4, r5, d8
 800d930:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800d934:	2600      	movs	r6, #0
 800d936:	e0e5      	b.n	800db04 <__kernel_rem_pio2+0x4ac>
 800d938:	2302      	movs	r3, #2
 800d93a:	9302      	str	r3, [sp, #8]
 800d93c:	e75c      	b.n	800d7f8 <__kernel_rem_pio2+0x1a0>
 800d93e:	f8db 3000 	ldr.w	r3, [fp]
 800d942:	b955      	cbnz	r5, 800d95a <__kernel_rem_pio2+0x302>
 800d944:	b123      	cbz	r3, 800d950 <__kernel_rem_pio2+0x2f8>
 800d946:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d94a:	f8cb 3000 	str.w	r3, [fp]
 800d94e:	2301      	movs	r3, #1
 800d950:	3201      	adds	r2, #1
 800d952:	f10b 0b04 	add.w	fp, fp, #4
 800d956:	461d      	mov	r5, r3
 800d958:	e755      	b.n	800d806 <__kernel_rem_pio2+0x1ae>
 800d95a:	1acb      	subs	r3, r1, r3
 800d95c:	f8cb 3000 	str.w	r3, [fp]
 800d960:	462b      	mov	r3, r5
 800d962:	e7f5      	b.n	800d950 <__kernel_rem_pio2+0x2f8>
 800d964:	1e62      	subs	r2, r4, #1
 800d966:	ab0c      	add	r3, sp, #48	; 0x30
 800d968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d96c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d970:	a90c      	add	r1, sp, #48	; 0x30
 800d972:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d976:	e754      	b.n	800d822 <__kernel_rem_pio2+0x1ca>
	...
 800d984:	3ff00000 	.word	0x3ff00000
 800d988:	0800e5a0 	.word	0x0800e5a0
 800d98c:	40200000 	.word	0x40200000
 800d990:	3ff00000 	.word	0x3ff00000
 800d994:	3e700000 	.word	0x3e700000
 800d998:	41700000 	.word	0x41700000
 800d99c:	3fe00000 	.word	0x3fe00000
 800d9a0:	0800e560 	.word	0x0800e560
 800d9a4:	1e62      	subs	r2, r4, #1
 800d9a6:	ab0c      	add	r3, sp, #48	; 0x30
 800d9a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9ac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d9b0:	e7de      	b.n	800d970 <__kernel_rem_pio2+0x318>
 800d9b2:	a90c      	add	r1, sp, #48	; 0x30
 800d9b4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d9b8:	3b01      	subs	r3, #1
 800d9ba:	430a      	orrs	r2, r1
 800d9bc:	e790      	b.n	800d8e0 <__kernel_rem_pio2+0x288>
 800d9be:	3301      	adds	r3, #1
 800d9c0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d9c4:	2900      	cmp	r1, #0
 800d9c6:	d0fa      	beq.n	800d9be <__kernel_rem_pio2+0x366>
 800d9c8:	9a08      	ldr	r2, [sp, #32]
 800d9ca:	18e3      	adds	r3, r4, r3
 800d9cc:	18a6      	adds	r6, r4, r2
 800d9ce:	aa20      	add	r2, sp, #128	; 0x80
 800d9d0:	1c65      	adds	r5, r4, #1
 800d9d2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800d9d6:	9302      	str	r3, [sp, #8]
 800d9d8:	9b02      	ldr	r3, [sp, #8]
 800d9da:	42ab      	cmp	r3, r5
 800d9dc:	da04      	bge.n	800d9e8 <__kernel_rem_pio2+0x390>
 800d9de:	461c      	mov	r4, r3
 800d9e0:	e6b5      	b.n	800d74e <__kernel_rem_pio2+0xf6>
 800d9e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	e7eb      	b.n	800d9c0 <__kernel_rem_pio2+0x368>
 800d9e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d9ee:	f7f2 fd51 	bl	8000494 <__aeabi_i2d>
 800d9f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9f8:	46b3      	mov	fp, r6
 800d9fa:	461c      	mov	r4, r3
 800d9fc:	2700      	movs	r7, #0
 800d9fe:	f04f 0800 	mov.w	r8, #0
 800da02:	f04f 0900 	mov.w	r9, #0
 800da06:	9b06      	ldr	r3, [sp, #24]
 800da08:	429f      	cmp	r7, r3
 800da0a:	dd06      	ble.n	800da1a <__kernel_rem_pio2+0x3c2>
 800da0c:	ab70      	add	r3, sp, #448	; 0x1c0
 800da0e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800da12:	e9c3 8900 	strd	r8, r9, [r3]
 800da16:	3501      	adds	r5, #1
 800da18:	e7de      	b.n	800d9d8 <__kernel_rem_pio2+0x380>
 800da1a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800da1e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800da22:	f7f2 fda1 	bl	8000568 <__aeabi_dmul>
 800da26:	4602      	mov	r2, r0
 800da28:	460b      	mov	r3, r1
 800da2a:	4640      	mov	r0, r8
 800da2c:	4649      	mov	r1, r9
 800da2e:	f7f2 fbe5 	bl	80001fc <__adddf3>
 800da32:	3701      	adds	r7, #1
 800da34:	4680      	mov	r8, r0
 800da36:	4689      	mov	r9, r1
 800da38:	e7e5      	b.n	800da06 <__kernel_rem_pio2+0x3ae>
 800da3a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800da3e:	e754      	b.n	800d8ea <__kernel_rem_pio2+0x292>
 800da40:	ec47 6b10 	vmov	d0, r6, r7
 800da44:	f1ca 0000 	rsb	r0, sl, #0
 800da48:	f000 fa8e 	bl	800df68 <scalbn>
 800da4c:	ec57 6b10 	vmov	r6, r7, d0
 800da50:	4b9f      	ldr	r3, [pc, #636]	; (800dcd0 <__kernel_rem_pio2+0x678>)
 800da52:	ee10 0a10 	vmov	r0, s0
 800da56:	2200      	movs	r2, #0
 800da58:	4639      	mov	r1, r7
 800da5a:	f7f3 f80b 	bl	8000a74 <__aeabi_dcmpge>
 800da5e:	b300      	cbz	r0, 800daa2 <__kernel_rem_pio2+0x44a>
 800da60:	4b9c      	ldr	r3, [pc, #624]	; (800dcd4 <__kernel_rem_pio2+0x67c>)
 800da62:	2200      	movs	r2, #0
 800da64:	4630      	mov	r0, r6
 800da66:	4639      	mov	r1, r7
 800da68:	f7f2 fd7e 	bl	8000568 <__aeabi_dmul>
 800da6c:	f7f3 f82c 	bl	8000ac8 <__aeabi_d2iz>
 800da70:	4605      	mov	r5, r0
 800da72:	f7f2 fd0f 	bl	8000494 <__aeabi_i2d>
 800da76:	4b96      	ldr	r3, [pc, #600]	; (800dcd0 <__kernel_rem_pio2+0x678>)
 800da78:	2200      	movs	r2, #0
 800da7a:	f7f2 fd75 	bl	8000568 <__aeabi_dmul>
 800da7e:	460b      	mov	r3, r1
 800da80:	4602      	mov	r2, r0
 800da82:	4639      	mov	r1, r7
 800da84:	4630      	mov	r0, r6
 800da86:	f7f2 fbb7 	bl	80001f8 <__aeabi_dsub>
 800da8a:	f7f3 f81d 	bl	8000ac8 <__aeabi_d2iz>
 800da8e:	f104 0b01 	add.w	fp, r4, #1
 800da92:	ab0c      	add	r3, sp, #48	; 0x30
 800da94:	f10a 0a18 	add.w	sl, sl, #24
 800da98:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800da9c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800daa0:	e72b      	b.n	800d8fa <__kernel_rem_pio2+0x2a2>
 800daa2:	4630      	mov	r0, r6
 800daa4:	4639      	mov	r1, r7
 800daa6:	f7f3 f80f 	bl	8000ac8 <__aeabi_d2iz>
 800daaa:	ab0c      	add	r3, sp, #48	; 0x30
 800daac:	46a3      	mov	fp, r4
 800daae:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dab2:	e722      	b.n	800d8fa <__kernel_rem_pio2+0x2a2>
 800dab4:	ab70      	add	r3, sp, #448	; 0x1c0
 800dab6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800daba:	ab0c      	add	r3, sp, #48	; 0x30
 800dabc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800dac0:	f7f2 fce8 	bl	8000494 <__aeabi_i2d>
 800dac4:	4622      	mov	r2, r4
 800dac6:	462b      	mov	r3, r5
 800dac8:	f7f2 fd4e 	bl	8000568 <__aeabi_dmul>
 800dacc:	4632      	mov	r2, r6
 800dace:	e9c9 0100 	strd	r0, r1, [r9]
 800dad2:	463b      	mov	r3, r7
 800dad4:	4620      	mov	r0, r4
 800dad6:	4629      	mov	r1, r5
 800dad8:	f7f2 fd46 	bl	8000568 <__aeabi_dmul>
 800dadc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800dae0:	4604      	mov	r4, r0
 800dae2:	460d      	mov	r5, r1
 800dae4:	e713      	b.n	800d90e <__kernel_rem_pio2+0x2b6>
 800dae6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800daea:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800daee:	f7f2 fd3b 	bl	8000568 <__aeabi_dmul>
 800daf2:	4602      	mov	r2, r0
 800daf4:	460b      	mov	r3, r1
 800daf6:	4620      	mov	r0, r4
 800daf8:	4629      	mov	r1, r5
 800dafa:	f7f2 fb7f 	bl	80001fc <__adddf3>
 800dafe:	3601      	adds	r6, #1
 800db00:	4604      	mov	r4, r0
 800db02:	460d      	mov	r5, r1
 800db04:	9b04      	ldr	r3, [sp, #16]
 800db06:	429e      	cmp	r6, r3
 800db08:	dc01      	bgt.n	800db0e <__kernel_rem_pio2+0x4b6>
 800db0a:	45b0      	cmp	r8, r6
 800db0c:	daeb      	bge.n	800dae6 <__kernel_rem_pio2+0x48e>
 800db0e:	ab48      	add	r3, sp, #288	; 0x120
 800db10:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800db14:	e9c3 4500 	strd	r4, r5, [r3]
 800db18:	3f01      	subs	r7, #1
 800db1a:	f108 0801 	add.w	r8, r8, #1
 800db1e:	e6ff      	b.n	800d920 <__kernel_rem_pio2+0x2c8>
 800db20:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800db22:	2b02      	cmp	r3, #2
 800db24:	dc0b      	bgt.n	800db3e <__kernel_rem_pio2+0x4e6>
 800db26:	2b00      	cmp	r3, #0
 800db28:	dc6e      	bgt.n	800dc08 <__kernel_rem_pio2+0x5b0>
 800db2a:	d045      	beq.n	800dbb8 <__kernel_rem_pio2+0x560>
 800db2c:	9b07      	ldr	r3, [sp, #28]
 800db2e:	f003 0007 	and.w	r0, r3, #7
 800db32:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800db36:	ecbd 8b02 	vpop	{d8}
 800db3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db3e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800db40:	2b03      	cmp	r3, #3
 800db42:	d1f3      	bne.n	800db2c <__kernel_rem_pio2+0x4d4>
 800db44:	ab48      	add	r3, sp, #288	; 0x120
 800db46:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800db4a:	46d0      	mov	r8, sl
 800db4c:	46d9      	mov	r9, fp
 800db4e:	f1b9 0f00 	cmp.w	r9, #0
 800db52:	f1a8 0808 	sub.w	r8, r8, #8
 800db56:	dc64      	bgt.n	800dc22 <__kernel_rem_pio2+0x5ca>
 800db58:	465c      	mov	r4, fp
 800db5a:	2c01      	cmp	r4, #1
 800db5c:	f1aa 0a08 	sub.w	sl, sl, #8
 800db60:	dc7e      	bgt.n	800dc60 <__kernel_rem_pio2+0x608>
 800db62:	2000      	movs	r0, #0
 800db64:	2100      	movs	r1, #0
 800db66:	f1bb 0f01 	cmp.w	fp, #1
 800db6a:	f300 8097 	bgt.w	800dc9c <__kernel_rem_pio2+0x644>
 800db6e:	9b02      	ldr	r3, [sp, #8]
 800db70:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800db74:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800db78:	2b00      	cmp	r3, #0
 800db7a:	f040 8099 	bne.w	800dcb0 <__kernel_rem_pio2+0x658>
 800db7e:	9b01      	ldr	r3, [sp, #4]
 800db80:	e9c3 5600 	strd	r5, r6, [r3]
 800db84:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800db88:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800db8c:	e7ce      	b.n	800db2c <__kernel_rem_pio2+0x4d4>
 800db8e:	ab48      	add	r3, sp, #288	; 0x120
 800db90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800db94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db98:	f7f2 fb30 	bl	80001fc <__adddf3>
 800db9c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800dba0:	f1bb 0f00 	cmp.w	fp, #0
 800dba4:	daf3      	bge.n	800db8e <__kernel_rem_pio2+0x536>
 800dba6:	9b02      	ldr	r3, [sp, #8]
 800dba8:	b113      	cbz	r3, 800dbb0 <__kernel_rem_pio2+0x558>
 800dbaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbae:	4619      	mov	r1, r3
 800dbb0:	9b01      	ldr	r3, [sp, #4]
 800dbb2:	e9c3 0100 	strd	r0, r1, [r3]
 800dbb6:	e7b9      	b.n	800db2c <__kernel_rem_pio2+0x4d4>
 800dbb8:	2000      	movs	r0, #0
 800dbba:	2100      	movs	r1, #0
 800dbbc:	e7f0      	b.n	800dba0 <__kernel_rem_pio2+0x548>
 800dbbe:	ab48      	add	r3, sp, #288	; 0x120
 800dbc0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc8:	f7f2 fb18 	bl	80001fc <__adddf3>
 800dbcc:	3c01      	subs	r4, #1
 800dbce:	2c00      	cmp	r4, #0
 800dbd0:	daf5      	bge.n	800dbbe <__kernel_rem_pio2+0x566>
 800dbd2:	9b02      	ldr	r3, [sp, #8]
 800dbd4:	b1e3      	cbz	r3, 800dc10 <__kernel_rem_pio2+0x5b8>
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbdc:	9c01      	ldr	r4, [sp, #4]
 800dbde:	e9c4 2300 	strd	r2, r3, [r4]
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800dbea:	f7f2 fb05 	bl	80001f8 <__aeabi_dsub>
 800dbee:	ad4a      	add	r5, sp, #296	; 0x128
 800dbf0:	2401      	movs	r4, #1
 800dbf2:	45a3      	cmp	fp, r4
 800dbf4:	da0f      	bge.n	800dc16 <__kernel_rem_pio2+0x5be>
 800dbf6:	9b02      	ldr	r3, [sp, #8]
 800dbf8:	b113      	cbz	r3, 800dc00 <__kernel_rem_pio2+0x5a8>
 800dbfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbfe:	4619      	mov	r1, r3
 800dc00:	9b01      	ldr	r3, [sp, #4]
 800dc02:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800dc06:	e791      	b.n	800db2c <__kernel_rem_pio2+0x4d4>
 800dc08:	465c      	mov	r4, fp
 800dc0a:	2000      	movs	r0, #0
 800dc0c:	2100      	movs	r1, #0
 800dc0e:	e7de      	b.n	800dbce <__kernel_rem_pio2+0x576>
 800dc10:	4602      	mov	r2, r0
 800dc12:	460b      	mov	r3, r1
 800dc14:	e7e2      	b.n	800dbdc <__kernel_rem_pio2+0x584>
 800dc16:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800dc1a:	f7f2 faef 	bl	80001fc <__adddf3>
 800dc1e:	3401      	adds	r4, #1
 800dc20:	e7e7      	b.n	800dbf2 <__kernel_rem_pio2+0x59a>
 800dc22:	e9d8 4500 	ldrd	r4, r5, [r8]
 800dc26:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	4632      	mov	r2, r6
 800dc2e:	463b      	mov	r3, r7
 800dc30:	4629      	mov	r1, r5
 800dc32:	f7f2 fae3 	bl	80001fc <__adddf3>
 800dc36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc3a:	4602      	mov	r2, r0
 800dc3c:	460b      	mov	r3, r1
 800dc3e:	4620      	mov	r0, r4
 800dc40:	4629      	mov	r1, r5
 800dc42:	f7f2 fad9 	bl	80001f8 <__aeabi_dsub>
 800dc46:	4632      	mov	r2, r6
 800dc48:	463b      	mov	r3, r7
 800dc4a:	f7f2 fad7 	bl	80001fc <__adddf3>
 800dc4e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800dc52:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800dc56:	ed88 7b00 	vstr	d7, [r8]
 800dc5a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800dc5e:	e776      	b.n	800db4e <__kernel_rem_pio2+0x4f6>
 800dc60:	e9da 8900 	ldrd	r8, r9, [sl]
 800dc64:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800dc68:	4640      	mov	r0, r8
 800dc6a:	4632      	mov	r2, r6
 800dc6c:	463b      	mov	r3, r7
 800dc6e:	4649      	mov	r1, r9
 800dc70:	f7f2 fac4 	bl	80001fc <__adddf3>
 800dc74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dc78:	4602      	mov	r2, r0
 800dc7a:	460b      	mov	r3, r1
 800dc7c:	4640      	mov	r0, r8
 800dc7e:	4649      	mov	r1, r9
 800dc80:	f7f2 faba 	bl	80001f8 <__aeabi_dsub>
 800dc84:	4632      	mov	r2, r6
 800dc86:	463b      	mov	r3, r7
 800dc88:	f7f2 fab8 	bl	80001fc <__adddf3>
 800dc8c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800dc90:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dc94:	ed8a 7b00 	vstr	d7, [sl]
 800dc98:	3c01      	subs	r4, #1
 800dc9a:	e75e      	b.n	800db5a <__kernel_rem_pio2+0x502>
 800dc9c:	ab48      	add	r3, sp, #288	; 0x120
 800dc9e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca6:	f7f2 faa9 	bl	80001fc <__adddf3>
 800dcaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800dcae:	e75a      	b.n	800db66 <__kernel_rem_pio2+0x50e>
 800dcb0:	9b01      	ldr	r3, [sp, #4]
 800dcb2:	9a01      	ldr	r2, [sp, #4]
 800dcb4:	601d      	str	r5, [r3, #0]
 800dcb6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800dcba:	605c      	str	r4, [r3, #4]
 800dcbc:	609f      	str	r7, [r3, #8]
 800dcbe:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800dcc2:	60d3      	str	r3, [r2, #12]
 800dcc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dcc8:	6110      	str	r0, [r2, #16]
 800dcca:	6153      	str	r3, [r2, #20]
 800dccc:	e72e      	b.n	800db2c <__kernel_rem_pio2+0x4d4>
 800dcce:	bf00      	nop
 800dcd0:	41700000 	.word	0x41700000
 800dcd4:	3e700000 	.word	0x3e700000

0800dcd8 <__kernel_sin>:
 800dcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcdc:	ed2d 8b04 	vpush	{d8-d9}
 800dce0:	eeb0 8a41 	vmov.f32	s16, s2
 800dce4:	eef0 8a61 	vmov.f32	s17, s3
 800dce8:	ec55 4b10 	vmov	r4, r5, d0
 800dcec:	b083      	sub	sp, #12
 800dcee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dcf2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800dcf6:	9001      	str	r0, [sp, #4]
 800dcf8:	da06      	bge.n	800dd08 <__kernel_sin+0x30>
 800dcfa:	ee10 0a10 	vmov	r0, s0
 800dcfe:	4629      	mov	r1, r5
 800dd00:	f7f2 fee2 	bl	8000ac8 <__aeabi_d2iz>
 800dd04:	2800      	cmp	r0, #0
 800dd06:	d051      	beq.n	800ddac <__kernel_sin+0xd4>
 800dd08:	4622      	mov	r2, r4
 800dd0a:	462b      	mov	r3, r5
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	4629      	mov	r1, r5
 800dd10:	f7f2 fc2a 	bl	8000568 <__aeabi_dmul>
 800dd14:	4682      	mov	sl, r0
 800dd16:	468b      	mov	fp, r1
 800dd18:	4602      	mov	r2, r0
 800dd1a:	460b      	mov	r3, r1
 800dd1c:	4620      	mov	r0, r4
 800dd1e:	4629      	mov	r1, r5
 800dd20:	f7f2 fc22 	bl	8000568 <__aeabi_dmul>
 800dd24:	a341      	add	r3, pc, #260	; (adr r3, 800de2c <__kernel_sin+0x154>)
 800dd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2a:	4680      	mov	r8, r0
 800dd2c:	4689      	mov	r9, r1
 800dd2e:	4650      	mov	r0, sl
 800dd30:	4659      	mov	r1, fp
 800dd32:	f7f2 fc19 	bl	8000568 <__aeabi_dmul>
 800dd36:	a33f      	add	r3, pc, #252	; (adr r3, 800de34 <__kernel_sin+0x15c>)
 800dd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd3c:	f7f2 fa5c 	bl	80001f8 <__aeabi_dsub>
 800dd40:	4652      	mov	r2, sl
 800dd42:	465b      	mov	r3, fp
 800dd44:	f7f2 fc10 	bl	8000568 <__aeabi_dmul>
 800dd48:	a33c      	add	r3, pc, #240	; (adr r3, 800de3c <__kernel_sin+0x164>)
 800dd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4e:	f7f2 fa55 	bl	80001fc <__adddf3>
 800dd52:	4652      	mov	r2, sl
 800dd54:	465b      	mov	r3, fp
 800dd56:	f7f2 fc07 	bl	8000568 <__aeabi_dmul>
 800dd5a:	a33a      	add	r3, pc, #232	; (adr r3, 800de44 <__kernel_sin+0x16c>)
 800dd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd60:	f7f2 fa4a 	bl	80001f8 <__aeabi_dsub>
 800dd64:	4652      	mov	r2, sl
 800dd66:	465b      	mov	r3, fp
 800dd68:	f7f2 fbfe 	bl	8000568 <__aeabi_dmul>
 800dd6c:	a337      	add	r3, pc, #220	; (adr r3, 800de4c <__kernel_sin+0x174>)
 800dd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd72:	f7f2 fa43 	bl	80001fc <__adddf3>
 800dd76:	9b01      	ldr	r3, [sp, #4]
 800dd78:	4606      	mov	r6, r0
 800dd7a:	460f      	mov	r7, r1
 800dd7c:	b9eb      	cbnz	r3, 800ddba <__kernel_sin+0xe2>
 800dd7e:	4602      	mov	r2, r0
 800dd80:	460b      	mov	r3, r1
 800dd82:	4650      	mov	r0, sl
 800dd84:	4659      	mov	r1, fp
 800dd86:	f7f2 fbef 	bl	8000568 <__aeabi_dmul>
 800dd8a:	a325      	add	r3, pc, #148	; (adr r3, 800de20 <__kernel_sin+0x148>)
 800dd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd90:	f7f2 fa32 	bl	80001f8 <__aeabi_dsub>
 800dd94:	4642      	mov	r2, r8
 800dd96:	464b      	mov	r3, r9
 800dd98:	f7f2 fbe6 	bl	8000568 <__aeabi_dmul>
 800dd9c:	4602      	mov	r2, r0
 800dd9e:	460b      	mov	r3, r1
 800dda0:	4620      	mov	r0, r4
 800dda2:	4629      	mov	r1, r5
 800dda4:	f7f2 fa2a 	bl	80001fc <__adddf3>
 800dda8:	4604      	mov	r4, r0
 800ddaa:	460d      	mov	r5, r1
 800ddac:	ec45 4b10 	vmov	d0, r4, r5
 800ddb0:	b003      	add	sp, #12
 800ddb2:	ecbd 8b04 	vpop	{d8-d9}
 800ddb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddba:	4b1b      	ldr	r3, [pc, #108]	; (800de28 <__kernel_sin+0x150>)
 800ddbc:	ec51 0b18 	vmov	r0, r1, d8
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	f7f2 fbd1 	bl	8000568 <__aeabi_dmul>
 800ddc6:	4632      	mov	r2, r6
 800ddc8:	ec41 0b19 	vmov	d9, r0, r1
 800ddcc:	463b      	mov	r3, r7
 800ddce:	4640      	mov	r0, r8
 800ddd0:	4649      	mov	r1, r9
 800ddd2:	f7f2 fbc9 	bl	8000568 <__aeabi_dmul>
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	460b      	mov	r3, r1
 800ddda:	ec51 0b19 	vmov	r0, r1, d9
 800ddde:	f7f2 fa0b 	bl	80001f8 <__aeabi_dsub>
 800dde2:	4652      	mov	r2, sl
 800dde4:	465b      	mov	r3, fp
 800dde6:	f7f2 fbbf 	bl	8000568 <__aeabi_dmul>
 800ddea:	ec53 2b18 	vmov	r2, r3, d8
 800ddee:	f7f2 fa03 	bl	80001f8 <__aeabi_dsub>
 800ddf2:	a30b      	add	r3, pc, #44	; (adr r3, 800de20 <__kernel_sin+0x148>)
 800ddf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf8:	4606      	mov	r6, r0
 800ddfa:	460f      	mov	r7, r1
 800ddfc:	4640      	mov	r0, r8
 800ddfe:	4649      	mov	r1, r9
 800de00:	f7f2 fbb2 	bl	8000568 <__aeabi_dmul>
 800de04:	4602      	mov	r2, r0
 800de06:	460b      	mov	r3, r1
 800de08:	4630      	mov	r0, r6
 800de0a:	4639      	mov	r1, r7
 800de0c:	f7f2 f9f6 	bl	80001fc <__adddf3>
 800de10:	4602      	mov	r2, r0
 800de12:	460b      	mov	r3, r1
 800de14:	4620      	mov	r0, r4
 800de16:	4629      	mov	r1, r5
 800de18:	f7f2 f9ee 	bl	80001f8 <__aeabi_dsub>
 800de1c:	e7c4      	b.n	800dda8 <__kernel_sin+0xd0>
 800de1e:	bf00      	nop
 800de20:	55555549 	.word	0x55555549
 800de24:	3fc55555 	.word	0x3fc55555
 800de28:	3fe00000 	.word	0x3fe00000
 800de2c:	5acfd57c 	.word	0x5acfd57c
 800de30:	3de5d93a 	.word	0x3de5d93a
 800de34:	8a2b9ceb 	.word	0x8a2b9ceb
 800de38:	3e5ae5e6 	.word	0x3e5ae5e6
 800de3c:	57b1fe7d 	.word	0x57b1fe7d
 800de40:	3ec71de3 	.word	0x3ec71de3
 800de44:	19c161d5 	.word	0x19c161d5
 800de48:	3f2a01a0 	.word	0x3f2a01a0
 800de4c:	1110f8a6 	.word	0x1110f8a6
 800de50:	3f811111 	.word	0x3f811111
 800de54:	00000000 	.word	0x00000000

0800de58 <floor>:
 800de58:	ec51 0b10 	vmov	r0, r1, d0
 800de5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de60:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800de64:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800de68:	2e13      	cmp	r6, #19
 800de6a:	ee10 5a10 	vmov	r5, s0
 800de6e:	ee10 8a10 	vmov	r8, s0
 800de72:	460c      	mov	r4, r1
 800de74:	dc32      	bgt.n	800dedc <floor+0x84>
 800de76:	2e00      	cmp	r6, #0
 800de78:	da14      	bge.n	800dea4 <floor+0x4c>
 800de7a:	a333      	add	r3, pc, #204	; (adr r3, 800df48 <floor+0xf0>)
 800de7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de80:	f7f2 f9bc 	bl	80001fc <__adddf3>
 800de84:	2200      	movs	r2, #0
 800de86:	2300      	movs	r3, #0
 800de88:	f7f2 fdfe 	bl	8000a88 <__aeabi_dcmpgt>
 800de8c:	b138      	cbz	r0, 800de9e <floor+0x46>
 800de8e:	2c00      	cmp	r4, #0
 800de90:	da57      	bge.n	800df42 <floor+0xea>
 800de92:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800de96:	431d      	orrs	r5, r3
 800de98:	d001      	beq.n	800de9e <floor+0x46>
 800de9a:	4c2d      	ldr	r4, [pc, #180]	; (800df50 <floor+0xf8>)
 800de9c:	2500      	movs	r5, #0
 800de9e:	4621      	mov	r1, r4
 800dea0:	4628      	mov	r0, r5
 800dea2:	e025      	b.n	800def0 <floor+0x98>
 800dea4:	4f2b      	ldr	r7, [pc, #172]	; (800df54 <floor+0xfc>)
 800dea6:	4137      	asrs	r7, r6
 800dea8:	ea01 0307 	and.w	r3, r1, r7
 800deac:	4303      	orrs	r3, r0
 800deae:	d01f      	beq.n	800def0 <floor+0x98>
 800deb0:	a325      	add	r3, pc, #148	; (adr r3, 800df48 <floor+0xf0>)
 800deb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb6:	f7f2 f9a1 	bl	80001fc <__adddf3>
 800deba:	2200      	movs	r2, #0
 800debc:	2300      	movs	r3, #0
 800debe:	f7f2 fde3 	bl	8000a88 <__aeabi_dcmpgt>
 800dec2:	2800      	cmp	r0, #0
 800dec4:	d0eb      	beq.n	800de9e <floor+0x46>
 800dec6:	2c00      	cmp	r4, #0
 800dec8:	bfbe      	ittt	lt
 800deca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800dece:	fa43 f606 	asrlt.w	r6, r3, r6
 800ded2:	19a4      	addlt	r4, r4, r6
 800ded4:	ea24 0407 	bic.w	r4, r4, r7
 800ded8:	2500      	movs	r5, #0
 800deda:	e7e0      	b.n	800de9e <floor+0x46>
 800dedc:	2e33      	cmp	r6, #51	; 0x33
 800dede:	dd0b      	ble.n	800def8 <floor+0xa0>
 800dee0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800dee4:	d104      	bne.n	800def0 <floor+0x98>
 800dee6:	ee10 2a10 	vmov	r2, s0
 800deea:	460b      	mov	r3, r1
 800deec:	f7f2 f986 	bl	80001fc <__adddf3>
 800def0:	ec41 0b10 	vmov	d0, r0, r1
 800def4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800def8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800defc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df00:	fa23 f707 	lsr.w	r7, r3, r7
 800df04:	4207      	tst	r7, r0
 800df06:	d0f3      	beq.n	800def0 <floor+0x98>
 800df08:	a30f      	add	r3, pc, #60	; (adr r3, 800df48 <floor+0xf0>)
 800df0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0e:	f7f2 f975 	bl	80001fc <__adddf3>
 800df12:	2200      	movs	r2, #0
 800df14:	2300      	movs	r3, #0
 800df16:	f7f2 fdb7 	bl	8000a88 <__aeabi_dcmpgt>
 800df1a:	2800      	cmp	r0, #0
 800df1c:	d0bf      	beq.n	800de9e <floor+0x46>
 800df1e:	2c00      	cmp	r4, #0
 800df20:	da02      	bge.n	800df28 <floor+0xd0>
 800df22:	2e14      	cmp	r6, #20
 800df24:	d103      	bne.n	800df2e <floor+0xd6>
 800df26:	3401      	adds	r4, #1
 800df28:	ea25 0507 	bic.w	r5, r5, r7
 800df2c:	e7b7      	b.n	800de9e <floor+0x46>
 800df2e:	2301      	movs	r3, #1
 800df30:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800df34:	fa03 f606 	lsl.w	r6, r3, r6
 800df38:	4435      	add	r5, r6
 800df3a:	4545      	cmp	r5, r8
 800df3c:	bf38      	it	cc
 800df3e:	18e4      	addcc	r4, r4, r3
 800df40:	e7f2      	b.n	800df28 <floor+0xd0>
 800df42:	2500      	movs	r5, #0
 800df44:	462c      	mov	r4, r5
 800df46:	e7aa      	b.n	800de9e <floor+0x46>
 800df48:	8800759c 	.word	0x8800759c
 800df4c:	7e37e43c 	.word	0x7e37e43c
 800df50:	bff00000 	.word	0xbff00000
 800df54:	000fffff 	.word	0x000fffff

0800df58 <nan>:
 800df58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800df60 <nan+0x8>
 800df5c:	4770      	bx	lr
 800df5e:	bf00      	nop
 800df60:	00000000 	.word	0x00000000
 800df64:	7ff80000 	.word	0x7ff80000

0800df68 <scalbn>:
 800df68:	b570      	push	{r4, r5, r6, lr}
 800df6a:	ec55 4b10 	vmov	r4, r5, d0
 800df6e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800df72:	4606      	mov	r6, r0
 800df74:	462b      	mov	r3, r5
 800df76:	b99a      	cbnz	r2, 800dfa0 <scalbn+0x38>
 800df78:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800df7c:	4323      	orrs	r3, r4
 800df7e:	d036      	beq.n	800dfee <scalbn+0x86>
 800df80:	4b39      	ldr	r3, [pc, #228]	; (800e068 <scalbn+0x100>)
 800df82:	4629      	mov	r1, r5
 800df84:	ee10 0a10 	vmov	r0, s0
 800df88:	2200      	movs	r2, #0
 800df8a:	f7f2 faed 	bl	8000568 <__aeabi_dmul>
 800df8e:	4b37      	ldr	r3, [pc, #220]	; (800e06c <scalbn+0x104>)
 800df90:	429e      	cmp	r6, r3
 800df92:	4604      	mov	r4, r0
 800df94:	460d      	mov	r5, r1
 800df96:	da10      	bge.n	800dfba <scalbn+0x52>
 800df98:	a32b      	add	r3, pc, #172	; (adr r3, 800e048 <scalbn+0xe0>)
 800df9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9e:	e03a      	b.n	800e016 <scalbn+0xae>
 800dfa0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800dfa4:	428a      	cmp	r2, r1
 800dfa6:	d10c      	bne.n	800dfc2 <scalbn+0x5a>
 800dfa8:	ee10 2a10 	vmov	r2, s0
 800dfac:	4620      	mov	r0, r4
 800dfae:	4629      	mov	r1, r5
 800dfb0:	f7f2 f924 	bl	80001fc <__adddf3>
 800dfb4:	4604      	mov	r4, r0
 800dfb6:	460d      	mov	r5, r1
 800dfb8:	e019      	b.n	800dfee <scalbn+0x86>
 800dfba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	3a36      	subs	r2, #54	; 0x36
 800dfc2:	4432      	add	r2, r6
 800dfc4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800dfc8:	428a      	cmp	r2, r1
 800dfca:	dd08      	ble.n	800dfde <scalbn+0x76>
 800dfcc:	2d00      	cmp	r5, #0
 800dfce:	a120      	add	r1, pc, #128	; (adr r1, 800e050 <scalbn+0xe8>)
 800dfd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfd4:	da1c      	bge.n	800e010 <scalbn+0xa8>
 800dfd6:	a120      	add	r1, pc, #128	; (adr r1, 800e058 <scalbn+0xf0>)
 800dfd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfdc:	e018      	b.n	800e010 <scalbn+0xa8>
 800dfde:	2a00      	cmp	r2, #0
 800dfe0:	dd08      	ble.n	800dff4 <scalbn+0x8c>
 800dfe2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dfe6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dfea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dfee:	ec45 4b10 	vmov	d0, r4, r5
 800dff2:	bd70      	pop	{r4, r5, r6, pc}
 800dff4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800dff8:	da19      	bge.n	800e02e <scalbn+0xc6>
 800dffa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dffe:	429e      	cmp	r6, r3
 800e000:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e004:	dd0a      	ble.n	800e01c <scalbn+0xb4>
 800e006:	a112      	add	r1, pc, #72	; (adr r1, 800e050 <scalbn+0xe8>)
 800e008:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d1e2      	bne.n	800dfd6 <scalbn+0x6e>
 800e010:	a30f      	add	r3, pc, #60	; (adr r3, 800e050 <scalbn+0xe8>)
 800e012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e016:	f7f2 faa7 	bl	8000568 <__aeabi_dmul>
 800e01a:	e7cb      	b.n	800dfb4 <scalbn+0x4c>
 800e01c:	a10a      	add	r1, pc, #40	; (adr r1, 800e048 <scalbn+0xe0>)
 800e01e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d0b8      	beq.n	800df98 <scalbn+0x30>
 800e026:	a10e      	add	r1, pc, #56	; (adr r1, 800e060 <scalbn+0xf8>)
 800e028:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e02c:	e7b4      	b.n	800df98 <scalbn+0x30>
 800e02e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e032:	3236      	adds	r2, #54	; 0x36
 800e034:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e038:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e03c:	4620      	mov	r0, r4
 800e03e:	4b0c      	ldr	r3, [pc, #48]	; (800e070 <scalbn+0x108>)
 800e040:	2200      	movs	r2, #0
 800e042:	e7e8      	b.n	800e016 <scalbn+0xae>
 800e044:	f3af 8000 	nop.w
 800e048:	c2f8f359 	.word	0xc2f8f359
 800e04c:	01a56e1f 	.word	0x01a56e1f
 800e050:	8800759c 	.word	0x8800759c
 800e054:	7e37e43c 	.word	0x7e37e43c
 800e058:	8800759c 	.word	0x8800759c
 800e05c:	fe37e43c 	.word	0xfe37e43c
 800e060:	c2f8f359 	.word	0xc2f8f359
 800e064:	81a56e1f 	.word	0x81a56e1f
 800e068:	43500000 	.word	0x43500000
 800e06c:	ffff3cb0 	.word	0xffff3cb0
 800e070:	3c900000 	.word	0x3c900000

0800e074 <_init>:
 800e074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e076:	bf00      	nop
 800e078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e07a:	bc08      	pop	{r3}
 800e07c:	469e      	mov	lr, r3
 800e07e:	4770      	bx	lr

0800e080 <_fini>:
 800e080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e082:	bf00      	nop
 800e084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e086:	bc08      	pop	{r3}
 800e088:	469e      	mov	lr, r3
 800e08a:	4770      	bx	lr
