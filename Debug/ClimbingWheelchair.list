
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bd8  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007d88  08007d88  00017d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007da8  08007da8  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08007da8  08007da8  00017da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007db0  08007db0  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007db0  08007db0  00017db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007db4  08007db4  00017db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08007db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  200000b0  08007e68  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  08007e68  0002075c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec79  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dd5  00000000  00000000  0003ed59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  00042b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  000440f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000046bd  00000000  00000000  00045530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c9e3  00000000  00000000  00049bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e39a6  00000000  00000000  000665d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00149f76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b34  00000000  00000000  00149fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007d70 	.word	0x08007d70

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	08007d70 	.word	0x08007d70

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2iz>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000994:	d215      	bcs.n	80009c2 <__aeabi_d2iz+0x36>
 8000996:	d511      	bpl.n	80009bc <__aeabi_d2iz+0x30>
 8000998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d912      	bls.n	80009c8 <__aeabi_d2iz+0x3c>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009b2:	fa23 f002 	lsr.w	r0, r3, r2
 80009b6:	bf18      	it	ne
 80009b8:	4240      	negne	r0, r0
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c6:	d105      	bne.n	80009d4 <__aeabi_d2iz+0x48>
 80009c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	bf08      	it	eq
 80009ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_d2uiz>:
 80009dc:	004a      	lsls	r2, r1, #1
 80009de:	d211      	bcs.n	8000a04 <__aeabi_d2uiz+0x28>
 80009e0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009e4:	d211      	bcs.n	8000a0a <__aeabi_d2uiz+0x2e>
 80009e6:	d50d      	bpl.n	8000a04 <__aeabi_d2uiz+0x28>
 80009e8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009f0:	d40e      	bmi.n	8000a10 <__aeabi_d2uiz+0x34>
 80009f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009fe:	fa23 f002 	lsr.w	r0, r3, r2
 8000a02:	4770      	bx	lr
 8000a04:	f04f 0000 	mov.w	r0, #0
 8000a08:	4770      	bx	lr
 8000a0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a0e:	d102      	bne.n	8000a16 <__aeabi_d2uiz+0x3a>
 8000a10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a14:	4770      	bx	lr
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	4770      	bx	lr

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ad0:	f000 b96e 	b.w	8000db0 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468c      	mov	ip, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8083 	bne.w	8000c02 <__udivmoddi4+0x116>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4617      	mov	r7, r2
 8000b00:	d947      	bls.n	8000b92 <__udivmoddi4+0xa6>
 8000b02:	fab2 f282 	clz	r2, r2
 8000b06:	b142      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	f1c2 0020 	rsb	r0, r2, #32
 8000b0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b10:	4091      	lsls	r1, r2
 8000b12:	4097      	lsls	r7, r2
 8000b14:	ea40 0c01 	orr.w	ip, r0, r1
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbbc f6f8 	udiv	r6, ip, r8
 8000b24:	fa1f fe87 	uxth.w	lr, r7
 8000b28:	fb08 c116 	mls	r1, r8, r6, ip
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb06 f10e 	mul.w	r1, r6, lr
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b3e:	f080 8119 	bcs.w	8000d74 <__udivmoddi4+0x288>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8116 	bls.w	8000d74 <__udivmoddi4+0x288>
 8000b48:	3e02      	subs	r6, #2
 8000b4a:	443b      	add	r3, r7
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3310 	mls	r3, r8, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b6a:	f080 8105 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f240 8102 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b74:	3802      	subs	r0, #2
 8000b76:	443c      	add	r4, r7
 8000b78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	2600      	movs	r6, #0
 8000b82:	b11d      	cbz	r5, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c5 4300 	strd	r4, r3, [r5]
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	b902      	cbnz	r2, 8000b96 <__udivmoddi4+0xaa>
 8000b94:	deff      	udf	#255	; 0xff
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d150      	bne.n	8000c40 <__udivmoddi4+0x154>
 8000b9e:	1bcb      	subs	r3, r1, r7
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	2601      	movs	r6, #1
 8000baa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bae:	0c21      	lsrs	r1, r4, #16
 8000bb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000bc0:	1879      	adds	r1, r7, r1
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0xe2>
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	f200 80e9 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1ac9      	subs	r1, r1, r3
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x10c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x10a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80d9 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e7bf      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x12e>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <__udivmoddi4+0x282>
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c12:	4630      	mov	r0, r6
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f683 	clz	r6, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d14a      	bne.n	8000cb8 <__udivmoddi4+0x1cc>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0x140>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80b8 	bhi.w	8000d9c <__udivmoddi4+0x2b0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	468c      	mov	ip, r1
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0a8      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000c3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c3e:	e7a5      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f603 	lsr.w	r6, r0, r3
 8000c48:	4097      	lsls	r7, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c52:	40d9      	lsrs	r1, r3
 8000c54:	4330      	orrs	r0, r6
 8000c56:	0c03      	lsrs	r3, r0, #16
 8000c58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c5c:	fa1f f887 	uxth.w	r8, r7
 8000c60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb06 f108 	mul.w	r1, r6, r8
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x19c>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c7a:	f080 808d 	bcs.w	8000d98 <__udivmoddi4+0x2ac>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 808a 	bls.w	8000d98 <__udivmoddi4+0x2ac>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b281      	uxth	r1, r0
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb00 f308 	mul.w	r3, r0, r8
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x1c4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ca6:	d273      	bcs.n	8000d90 <__udivmoddi4+0x2a4>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d971      	bls.n	8000d90 <__udivmoddi4+0x2a4>
 8000cac:	3802      	subs	r0, #2
 8000cae:	4439      	add	r1, r7
 8000cb0:	1acb      	subs	r3, r1, r3
 8000cb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cb6:	e778      	b.n	8000baa <__udivmoddi4+0xbe>
 8000cb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cca:	fa01 f306 	lsl.w	r3, r1, r6
 8000cce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cde:	fa1f f884 	uxth.w	r8, r4
 8000ce2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cea:	fb09 fa08 	mul.w	sl, r9, r8
 8000cee:	458a      	cmp	sl, r1
 8000cf0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x220>
 8000cfa:	1861      	adds	r1, r4, r1
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d00:	d248      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d02:	458a      	cmp	sl, r1
 8000d04:	d946      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4421      	add	r1, r4
 8000d0c:	eba1 010a 	sub.w	r1, r1, sl
 8000d10:	b2bf      	uxth	r7, r7
 8000d12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d1e:	fb00 f808 	mul.w	r8, r0, r8
 8000d22:	45b8      	cmp	r8, r7
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x24a>
 8000d26:	19e7      	adds	r7, r4, r7
 8000d28:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d2c:	d22e      	bcs.n	8000d8c <__udivmoddi4+0x2a0>
 8000d2e:	45b8      	cmp	r8, r7
 8000d30:	d92c      	bls.n	8000d8c <__udivmoddi4+0x2a0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4427      	add	r7, r4
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	eba7 0708 	sub.w	r7, r7, r8
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	454f      	cmp	r7, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	4649      	mov	r1, r9
 8000d48:	d31a      	bcc.n	8000d80 <__udivmoddi4+0x294>
 8000d4a:	d017      	beq.n	8000d7c <__udivmoddi4+0x290>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x27a>
 8000d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d52:	eb67 0701 	sbc.w	r7, r7, r1
 8000d56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d5a:	40f2      	lsrs	r2, r6
 8000d5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d60:	40f7      	lsrs	r7, r6
 8000d62:	e9c5 2700 	strd	r2, r7, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e70b      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6fd      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d7c:	4543      	cmp	r3, r8
 8000d7e:	d2e5      	bcs.n	8000d4c <__udivmoddi4+0x260>
 8000d80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d84:	eb69 0104 	sbc.w	r1, r9, r4
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7df      	b.n	8000d4c <__udivmoddi4+0x260>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e7d2      	b.n	8000d36 <__udivmoddi4+0x24a>
 8000d90:	4660      	mov	r0, ip
 8000d92:	e78d      	b.n	8000cb0 <__udivmoddi4+0x1c4>
 8000d94:	4681      	mov	r9, r0
 8000d96:	e7b9      	b.n	8000d0c <__udivmoddi4+0x220>
 8000d98:	4666      	mov	r6, ip
 8000d9a:	e775      	b.n	8000c88 <__udivmoddi4+0x19c>
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	e74a      	b.n	8000c36 <__udivmoddi4+0x14a>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	4439      	add	r1, r7
 8000da6:	e713      	b.n	8000bd0 <__udivmoddi4+0xe4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443c      	add	r4, r7
 8000dac:	e724      	b.n	8000bf8 <__udivmoddi4+0x10c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <MotorInit>:
 * param [targetNumber]	1 or 2, or a Simplified Serial character like '1' or '2'.
 * return		None.
 */
static void writeSabertoothGetCommand(Sabertooth_Handler *st_handler, uint8_t getType, uint8_t targetType, uint8_t targetNumber);

void MotorInit(Sabertooth_Handler* st_handler, uint8_t address, UART_HandleTypeDef* huart){
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	607a      	str	r2, [r7, #4]
 8000dc0:	72fb      	strb	r3, [r7, #11]
	st_handler->address = address;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	7afa      	ldrb	r2, [r7, #11]
 8000dc6:	701a      	strb	r2, [r3, #0]
	st_handler->huart = huart;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	605a      	str	r2, [r3, #4]
	st_handler->motor1.battery = 0;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	815a      	strh	r2, [r3, #10]
	st_handler->motor1.duty_cycle = 0;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	811a      	strh	r2, [r3, #8]
	st_handler->motor1.current = 0;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	819a      	strh	r2, [r3, #12]
	st_handler->motor1.temp = 0;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2200      	movs	r2, #0
 8000de4:	81da      	strh	r2, [r3, #14]
	st_handler->motor2.battery = 0;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	2200      	movs	r2, #0
 8000dea:	825a      	strh	r2, [r3, #18]
	st_handler->motor2.duty_cycle = 0;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2200      	movs	r2, #0
 8000df0:	821a      	strh	r2, [r3, #16]
	st_handler->motor2.current = 0;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2200      	movs	r2, #0
 8000df6:	829a      	strh	r2, [r3, #20]
	st_handler->motor2.temp = 0;
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	82da      	strh	r2, [r3, #22]
}
 8000dfe:	bf00      	nop
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <ADC_Init>:
SPI_HandleTypeDef hspi1;

//ADCHandle         hADC;

void ADC_Init()
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0

	//Delay for SPI encoder to startup
//	HAL_Delay(100);

	/*Reset AD7606*/
	AD7606_CS_HIGH;
 8000e10:	2201      	movs	r2, #1
 8000e12:	2110      	movs	r1, #16
 8000e14:	481c      	ldr	r0, [pc, #112]	; (8000e88 <ADC_Init+0x7c>)
 8000e16:	f003 fc13 	bl	8004640 <HAL_GPIO_WritePin>
	AD7606_CV_LOW;
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2120      	movs	r1, #32
 8000e1e:	481b      	ldr	r0, [pc, #108]	; (8000e8c <ADC_Init+0x80>)
 8000e20:	f003 fc0e 	bl	8004640 <HAL_GPIO_WritePin>

	AD7606_RST_LOW;
 8000e24:	2200      	movs	r2, #0
 8000e26:	2110      	movs	r1, #16
 8000e28:	4818      	ldr	r0, [pc, #96]	; (8000e8c <ADC_Init+0x80>)
 8000e2a:	f003 fc09 	bl	8004640 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e2e:	2001      	movs	r0, #1
 8000e30:	f001 ff12 	bl	8002c58 <HAL_Delay>
	AD7606_RST_HIGH;
 8000e34:	2201      	movs	r2, #1
 8000e36:	2110      	movs	r1, #16
 8000e38:	4814      	ldr	r0, [pc, #80]	; (8000e8c <ADC_Init+0x80>)
 8000e3a:	f003 fc01 	bl	8004640 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f001 ff0a 	bl	8002c58 <HAL_Delay>
	AD7606_RST_LOW;
 8000e44:	2200      	movs	r2, #0
 8000e46:	2110      	movs	r1, #16
 8000e48:	4810      	ldr	r0, [pc, #64]	; (8000e8c <ADC_Init+0x80>)
 8000e4a:	f003 fbf9 	bl	8004640 <HAL_GPIO_WritePin>

	/*Set analog input range*/
	AD7606_RANGE_LOW_5V;
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2101      	movs	r1, #1
 8000e52:	480e      	ldr	r0, [pc, #56]	; (8000e8c <ADC_Init+0x80>)
 8000e54:	f003 fbf4 	bl	8004640 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f001 fefd 	bl	8002c58 <HAL_Delay>

	/*Set oversampling ratio to 32*/
	HAL_GPIO_WritePin(AD7606_OS2_PIN_Port, AD7606_OS2_PIN, GPIO_PIN_SET);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	2102      	movs	r1, #2
 8000e62:	480a      	ldr	r0, [pc, #40]	; (8000e8c <ADC_Init+0x80>)
 8000e64:	f003 fbec 	bl	8004640 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS1_PIN_Port, AD7606_OS1_PIN, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	4807      	ldr	r0, [pc, #28]	; (8000e8c <ADC_Init+0x80>)
 8000e6e:	f003 fbe7 	bl	8004640 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS0_PIN_Port, AD7606_OS0_PIN, GPIO_PIN_SET);
 8000e72:	2201      	movs	r2, #1
 8000e74:	2108      	movs	r1, #8
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <ADC_Init+0x80>)
 8000e78:	f003 fbe2 	bl	8004640 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f001 feeb 	bl	8002c58 <HAL_Delay>

//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
//	HAL_Delay(500);
//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40020000 	.word	0x40020000
 8000e8c:	40020800 	.word	0x40020800

08000e90 <ADC_DataRequest>:

void ADC_DataRequest(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	AD7606_CV_LOW;
 8000e94:	2200      	movs	r2, #0
 8000e96:	2120      	movs	r1, #32
 8000e98:	4804      	ldr	r0, [pc, #16]	; (8000eac <ADC_DataRequest+0x1c>)
 8000e9a:	f003 fbd1 	bl	8004640 <HAL_GPIO_WritePin>
	AD7606_CV_HIGH;
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2120      	movs	r1, #32
 8000ea2:	4802      	ldr	r0, [pc, #8]	; (8000eac <ADC_DataRequest+0x1c>)
 8000ea4:	f003 fbcc 	bl	8004640 <HAL_GPIO_WritePin>
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40020800 	.word	0x40020800

08000eb0 <ADC_Read>:


void ADC_Read(int16_t *data)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2110      	movs	r1, #16
 8000ebc:	4808      	ldr	r0, [pc, #32]	; (8000ee0 <ADC_Read+0x30>)
 8000ebe:	f003 fbbf 	bl	8004640 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	2208      	movs	r2, #8
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <ADC_Read+0x34>)
 8000eca:	f004 faf6 	bl	80054ba <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 8000ece:	2201      	movs	r2, #1
 8000ed0:	2110      	movs	r1, #16
 8000ed2:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <ADC_Read+0x30>)
 8000ed4:	f003 fbb4 	bl	8004640 <HAL_GPIO_WritePin>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	20000124 	.word	0x20000124

08000ee8 <emBrakeMotor>:

void enableMotor(Motor_TypeDef* motor, uint8_t state){
	HAL_GPIO_WritePin(motor->EN_port, motor->EN_pin, state);
}

void emBrakeMotor(uint8_t state){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Brake_Wheel_GPIO_Port, Brake_Wheel_Pin, state);
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	2108      	movs	r1, #8
 8000ef8:	4803      	ldr	r0, [pc, #12]	; (8000f08 <emBrakeMotor+0x20>)
 8000efa:	f003 fba1 	bl	8004640 <HAL_GPIO_WritePin>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40020c00 	.word	0x40020c00

08000f0c <brakeMotor>:

void brakeMotor(Motor_TypeDef* motor, uint8_t state){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->BRK_port, motor->BRK_pin, state);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69d8      	ldr	r0, [r3, #28]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	8c1b      	ldrh	r3, [r3, #32]
 8000f20:	78fa      	ldrb	r2, [r7, #3]
 8000f22:	4619      	mov	r1, r3
 8000f24:	f003 fb8c 	bl	8004640 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(motor->outputPWM, motor->PWM_channel);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	695a      	ldr	r2, [r3, #20]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	8b1b      	ldrh	r3, [r3, #24]
 8000f30:	4619      	mov	r1, r3
 8000f32:	4610      	mov	r0, r2
 8000f34:	f004 ff4c 	bl	8005dd0 <HAL_TIM_PWM_Stop>
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	889b      	ldrh	r3, [r3, #4]
 8000f52:	4619      	mov	r1, r3
 8000f54:	4610      	mov	r0, r2
 8000f56:	f003 fb5b 	bl	8004610 <HAL_GPIO_ReadPin>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	799a      	ldrb	r2, [r3, #6]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	79db      	ldrb	r3, [r3, #7]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d004      	beq.n	8000f78 <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 8000f6e:	f001 fe67 	bl	8002c40 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 8000f78:	f001 fe62 	bl	8002c40 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d209      	bcs.n	8000f9e <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	799a      	ldrb	r2, [r3, #6]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	7a1b      	ldrb	r3, [r3, #8]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d101      	bne.n	8000f9e <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e004      	b.n	8000fa8 <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	799a      	ldrb	r2, [r3, #6]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000fb6:	4b30      	ldr	r3, [pc, #192]	; (8001078 <MX_CAN1_Init+0xc8>)
 8000fb8:	4a30      	ldr	r2, [pc, #192]	; (800107c <MX_CAN1_Init+0xcc>)
 8000fba:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000fbc:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <MX_CAN1_Init+0xc8>)
 8000fbe:	2209      	movs	r2, #9
 8000fc0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fc2:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <MX_CAN1_Init+0xc8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fc8:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <MX_CAN1_Init+0xc8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000fce:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <MX_CAN1_Init+0xc8>)
 8000fd0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fd4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000fd6:	4b28      	ldr	r3, [pc, #160]	; (8001078 <MX_CAN1_Init+0xc8>)
 8000fd8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000fdc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fde:	4b26      	ldr	r3, [pc, #152]	; (8001078 <MX_CAN1_Init+0xc8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000fe4:	4b24      	ldr	r3, [pc, #144]	; (8001078 <MX_CAN1_Init+0xc8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000fea:	4b23      	ldr	r3, [pc, #140]	; (8001078 <MX_CAN1_Init+0xc8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ff0:	4b21      	ldr	r3, [pc, #132]	; (8001078 <MX_CAN1_Init+0xc8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ff6:	4b20      	ldr	r3, [pc, #128]	; (8001078 <MX_CAN1_Init+0xc8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <MX_CAN1_Init+0xc8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001002:	481d      	ldr	r0, [pc, #116]	; (8001078 <MX_CAN1_Init+0xc8>)
 8001004:	f001 fe4c 	bl	8002ca0 <HAL_CAN_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800100e:	f001 f873 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfil_1;
	canfil_1.FilterBank = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 800101a:	2301      	movs	r3, #1
 800101c:	61fb      	str	r3, [r7, #28]
	canfil_1.FilterIdHigh = 0x0000;
 800101e:	2300      	movs	r3, #0
 8001020:	603b      	str	r3, [r7, #0]
	canfil_1.FilterIdLow = 0x0000;
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
	canfil_1.FilterMaskIdHigh = 0x0000;
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
	canfil_1.FilterMaskIdLow = 0x0000;
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
	canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 8001032:	2301      	movs	r3, #1
 8001034:	623b      	str	r3, [r7, #32]
	canfil_1.SlaveStartFilterBank = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK)
 800103a:	463b      	mov	r3, r7
 800103c:	4619      	mov	r1, r3
 800103e:	480e      	ldr	r0, [pc, #56]	; (8001078 <MX_CAN1_Init+0xc8>)
 8001040:	f001 ff2a 	bl	8002e98 <HAL_CAN_ConfigFilter>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_CAN1_Init+0x9e>
				Error_Handler();
 800104a:	f001 f855 	bl	80020f8 <Error_Handler>

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING))
 800104e:	2102      	movs	r1, #2
 8001050:	4809      	ldr	r0, [pc, #36]	; (8001078 <MX_CAN1_Init+0xc8>)
 8001052:	f002 fa32 	bl	80034ba <HAL_CAN_ActivateNotification>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d002      	beq.n	8001062 <MX_CAN1_Init+0xb2>
				return Error_Handler();
 800105c:	f001 f84c 	bl	80020f8 <Error_Handler>
 8001060:	e007      	b.n	8001072 <MX_CAN1_Init+0xc2>

	if (HAL_CAN_Start(&hcan1))
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_CAN1_Init+0xc8>)
 8001064:	f001 fff8 	bl	8003058 <HAL_CAN_Start>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_CAN1_Init+0xc2>
					return Error_Handler();
 800106e:	f001 f843 	bl	80020f8 <Error_Handler>


  /* USER CODE END CAN1_Init 2 */

}
 8001072:	3728      	adds	r7, #40	; 0x28
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000017c 	.word	0x2000017c
 800107c:	40006400 	.word	0x40006400

08001080 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a1d      	ldr	r2, [pc, #116]	; (8001114 <HAL_CAN_MspInit+0x94>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d133      	bne.n	800110a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <HAL_CAN_MspInit+0x98>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	4a1b      	ldr	r2, [pc, #108]	; (8001118 <HAL_CAN_MspInit+0x98>)
 80010ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010b0:	6413      	str	r3, [r2, #64]	; 0x40
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <HAL_CAN_MspInit+0x98>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <HAL_CAN_MspInit+0x98>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a14      	ldr	r2, [pc, #80]	; (8001118 <HAL_CAN_MspInit+0x98>)
 80010c8:	f043 0308 	orr.w	r3, r3, #8
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_CAN_MspInit+0x98>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010da:	2303      	movs	r3, #3
 80010dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010ea:	2309      	movs	r3, #9
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	4809      	ldr	r0, [pc, #36]	; (800111c <HAL_CAN_MspInit+0x9c>)
 80010f6:	f003 f8df 	bl	80042b8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	2014      	movs	r0, #20
 8001100:	f002 fd0b 	bl	8003b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001104:	2014      	movs	r0, #20
 8001106:	f002 fd24 	bl	8003b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	; 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40006400 	.word	0x40006400
 8001118:	40023800 	.word	0x40023800
 800111c:	40020c00 	.word	0x40020c00

08001120 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <MX_DMA_Init+0x88>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a1e      	ldr	r2, [pc, #120]	; (80011a8 <MX_DMA_Init+0x88>)
 8001130:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <MX_DMA_Init+0x88>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <MX_DMA_Init+0x88>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a17      	ldr	r2, [pc, #92]	; (80011a8 <MX_DMA_Init+0x88>)
 800114c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_DMA_Init+0x88>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	200c      	movs	r0, #12
 8001164:	f002 fcd9 	bl	8003b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001168:	200c      	movs	r0, #12
 800116a:	f002 fcf2 	bl	8003b52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	200e      	movs	r0, #14
 8001174:	f002 fcd1 	bl	8003b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001178:	200e      	movs	r0, #14
 800117a:	f002 fcea 	bl	8003b52 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	2100      	movs	r1, #0
 8001182:	2039      	movs	r0, #57	; 0x39
 8001184:	f002 fcc9 	bl	8003b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001188:	2039      	movs	r0, #57	; 0x39
 800118a:	f002 fce2 	bl	8003b52 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2045      	movs	r0, #69	; 0x45
 8001194:	f002 fcc1 	bl	8003b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001198:	2045      	movs	r0, #69	; 0x45
 800119a:	f002 fcda 	bl	8003b52 <HAL_NVIC_EnableIRQ>

}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800

080011ac <ENCODER_Init>:
CAN_HandleTypeDef hcan2;
//uint8_t incoming[8];
//CAN_RxHeaderTypeDef RxHeader;

void ENCODER_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  //Assign each encoder to one of the two CAN buses
	encoderBack.hcan = &hcan1;
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <ENCODER_Init+0x24>)
 80011b2:	4a08      	ldr	r2, [pc, #32]	; (80011d4 <ENCODER_Init+0x28>)
 80011b4:	601a      	str	r2, [r3, #0]
	encoderFront.hcan = &hcan1;
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <ENCODER_Init+0x2c>)
 80011b8:	4a06      	ldr	r2, [pc, #24]	; (80011d4 <ENCODER_Init+0x28>)
 80011ba:	601a      	str	r2, [r3, #0]
	
	//Set Tx header for each encoder handle
	ENCODER_Set_TxHeader(&encoderBack, ENC_ADDR_LEFT);
 80011bc:	2101      	movs	r1, #1
 80011be:	4804      	ldr	r0, [pc, #16]	; (80011d0 <ENCODER_Init+0x24>)
 80011c0:	f000 f83f 	bl	8001242 <ENCODER_Set_TxHeader>
	ENCODER_Set_TxHeader(&encoderFront, ENC_ADDR_RIGHT);
 80011c4:	2102      	movs	r1, #2
 80011c6:	4804      	ldr	r0, [pc, #16]	; (80011d8 <ENCODER_Init+0x2c>)
 80011c8:	f000 f83b 	bl	8001242 <ENCODER_Set_TxHeader>

}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000224 	.word	0x20000224
 80011d4:	2000017c 	.word	0x2000017c
 80011d8:	200001cc 	.word	0x200001cc

080011dc <ENCODER_Sort_Incoming>:

void ENCODER_Sort_Incoming(uint8_t* incoming_array, EncoderHandle* Encoder_ptr){
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
	Encoder_ptr->rawRead[0] = incoming_array[0];
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	781a      	ldrb	r2, [r3, #0]
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Encoder_ptr->rawRead[1] = incoming_array[1];
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	785a      	ldrb	r2, [r3, #1]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Encoder_ptr->rawRead[2] = incoming_array[2];
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	789a      	ldrb	r2, [r3, #2]
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Encoder_ptr->rawRead[3] = incoming_array[3];
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	78da      	ldrb	r2, [r3, #3]
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	Encoder_ptr->rawRead[4] = incoming_array[4];
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	791a      	ldrb	r2, [r3, #4]
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	Encoder_ptr->rawRead[5] = incoming_array[5];
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	795a      	ldrb	r2, [r3, #5]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	Encoder_ptr->rawRead[6] = incoming_array[6];
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	799a      	ldrb	r2, [r3, #6]
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	Encoder_ptr->rawRead[7] = incoming_array[7];
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	79da      	ldrb	r2, [r3, #7]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <ENCODER_Set_TxHeader>:

void ENCODER_Set_TxHeader(EncoderHandle* Encoder_ptr, uint32_t Encoder_Address){
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	6039      	str	r1, [r7, #0]
	Encoder_ptr->canTxHeader.DLC = 4;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2204      	movs	r2, #4
 8001250:	631a      	str	r2, [r3, #48]	; 0x30
	Encoder_ptr->canTxHeader.IDE = CAN_ID_STD;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder_ptr->canTxHeader.RTR = CAN_RTR_DATA;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	62da      	str	r2, [r3, #44]	; 0x2c
	Encoder_ptr->canTxHeader.StdId = Encoder_Address;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	621a      	str	r2, [r3, #32]
	Encoder_ptr->canTxHeader.TransmitGlobalTime = DISABLE;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Encoder_ptr->canTxHeader.ExtId = 0;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <ENCODER_Read>:

void ENCODER_Read(EncoderHandle* Encoder_ptr){
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
	Encoder_ptr->sendData[0] = Encoder_ptr->canTxHeader.DLC;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	b2da      	uxtb	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Encoder_ptr->sendData[1] = Encoder_ptr->canTxHeader.StdId;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Encoder_ptr->sendData[2] = 0x01;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Encoder_ptr->sendData[3] = 0x00;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	
	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f103 0120 	add.w	r1, r3, #32
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3338      	adds	r3, #56	; 0x38
 80012c2:	f001 ff0d 	bl	80030e0 <HAL_CAN_AddTxMessage>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <ENCODER_Get_Angle>:
	Encoder_ptr->sendData[3] = 0x01;

	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
}

void ENCODER_Get_Angle(EncoderHandle* Encoder_ptr){
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
	ENCODER_Read(Encoder_ptr);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ffd1 	bl	800127e <ENCODER_Read>
	Encoder_ptr->angle32Bit.b8[0] = Encoder_ptr->rawRead[3];
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Encoder_ptr->angle32Bit.b8[1] = Encoder_ptr->rawRead[4];
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Encoder_ptr->angle32Bit.b8[2] = Encoder_ptr->rawRead[5];
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Encoder_ptr->angle32Bit.b8[3] = Encoder_ptr->rawRead[6];
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	//Get the outer gear encoder position
	//Gear ration from inner to outer gear is 1:2. Therefore, (2*4096=)8192 is used
//	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)) ; //Get single turn encoder reading
	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)); //Get single turn encoder reading
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001312:	461a      	mov	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	441a      	add	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001324:	041b      	lsls	r3, r3, #16
 8001326:	4413      	add	r3, r2
 8001328:	461a      	mov	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	645a      	str	r2, [r3, #68]	; 0x44

	//Convert from encoder position to angle in degree
//	Encoder_ptr->angleDeg = (Encoder_ptr->encoder_pos * 360 /8192) ; //Get encoder angle

}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <MX_GPIO_Init>:
     PB13   ------> SPI2_SCK
     PB14   ------> SPI2_MISO
     PB5   ------> CAN2_RX
*/
void MX_GPIO_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08c      	sub	sp, #48	; 0x30
 800133c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
 8001352:	4b8a      	ldr	r3, [pc, #552]	; (800157c <MX_GPIO_Init+0x244>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a89      	ldr	r2, [pc, #548]	; (800157c <MX_GPIO_Init+0x244>)
 8001358:	f043 0310 	orr.w	r3, r3, #16
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b87      	ldr	r3, [pc, #540]	; (800157c <MX_GPIO_Init+0x244>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0310 	and.w	r3, r3, #16
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	4b83      	ldr	r3, [pc, #524]	; (800157c <MX_GPIO_Init+0x244>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a82      	ldr	r2, [pc, #520]	; (800157c <MX_GPIO_Init+0x244>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b80      	ldr	r3, [pc, #512]	; (800157c <MX_GPIO_Init+0x244>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	4b7c      	ldr	r3, [pc, #496]	; (800157c <MX_GPIO_Init+0x244>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a7b      	ldr	r2, [pc, #492]	; (800157c <MX_GPIO_Init+0x244>)
 8001390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b79      	ldr	r3, [pc, #484]	; (800157c <MX_GPIO_Init+0x244>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	4b75      	ldr	r3, [pc, #468]	; (800157c <MX_GPIO_Init+0x244>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a74      	ldr	r2, [pc, #464]	; (800157c <MX_GPIO_Init+0x244>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b72      	ldr	r3, [pc, #456]	; (800157c <MX_GPIO_Init+0x244>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	4b6e      	ldr	r3, [pc, #440]	; (800157c <MX_GPIO_Init+0x244>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a6d      	ldr	r2, [pc, #436]	; (800157c <MX_GPIO_Init+0x244>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b6b      	ldr	r3, [pc, #428]	; (800157c <MX_GPIO_Init+0x244>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b67      	ldr	r3, [pc, #412]	; (800157c <MX_GPIO_Init+0x244>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a66      	ldr	r2, [pc, #408]	; (800157c <MX_GPIO_Init+0x244>)
 80013e4:	f043 0308 	orr.w	r3, r3, #8
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b64      	ldr	r3, [pc, #400]	; (800157c <MX_GPIO_Init+0x244>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 80013f6:	2200      	movs	r2, #0
 80013f8:	213f      	movs	r1, #63	; 0x3f
 80013fa:	4861      	ldr	r0, [pc, #388]	; (8001580 <MX_GPIO_Init+0x248>)
 80013fc:	f003 f920 	bl	8004640 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8001400:	2200      	movs	r2, #0
 8001402:	2110      	movs	r1, #16
 8001404:	485f      	ldr	r0, [pc, #380]	; (8001584 <MX_GPIO_Init+0x24c>)
 8001406:	f003 f91b 	bl	8004640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 800140a:	2200      	movs	r2, #0
 800140c:	219b      	movs	r1, #155	; 0x9b
 800140e:	485e      	ldr	r0, [pc, #376]	; (8001588 <MX_GPIO_Init+0x250>)
 8001410:	f003 f916 	bl	8004640 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 800141a:	485c      	ldr	r0, [pc, #368]	; (800158c <MX_GPIO_Init+0x254>)
 800141c:	f003 f910 	bl	8004640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001420:	2200      	movs	r2, #0
 8001422:	f64e 4108 	movw	r1, #60424	; 0xec08
 8001426:	485a      	ldr	r0, [pc, #360]	; (8001590 <MX_GPIO_Init+0x258>)
 8001428:	f003 f90a 	bl	8004640 <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 800142c:	2307      	movs	r3, #7
 800142e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001430:	2300      	movs	r3, #0
 8001432:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001434:	2302      	movs	r3, #2
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	4619      	mov	r1, r3
 800143e:	4853      	ldr	r0, [pc, #332]	; (800158c <MX_GPIO_Init+0x254>)
 8001440:	f002 ff3a 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 8001444:	f248 1378 	movw	r3, #33144	; 0x8178
 8001448:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800144e:	2301      	movs	r3, #1
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	4619      	mov	r1, r3
 8001458:	484c      	ldr	r0, [pc, #304]	; (800158c <MX_GPIO_Init+0x254>)
 800145a:	f002 ff2d 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 800145e:	233f      	movs	r3, #63	; 0x3f
 8001460:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001462:	2301      	movs	r3, #1
 8001464:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001466:	2301      	movs	r3, #1
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	4619      	mov	r1, r3
 8001474:	4842      	ldr	r0, [pc, #264]	; (8001580 <MX_GPIO_Init+0x248>)
 8001476:	f002 ff1f 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 800147a:	2310      	movs	r3, #16
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147e:	2301      	movs	r3, #1
 8001480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001482:	2301      	movs	r3, #1
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	4619      	mov	r1, r3
 8001490:	483c      	ldr	r0, [pc, #240]	; (8001584 <MX_GPIO_Init+0x24c>)
 8001492:	f002 ff11 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800149a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800149e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4619      	mov	r1, r3
 80014aa:	4836      	ldr	r0, [pc, #216]	; (8001584 <MX_GPIO_Init+0x24c>)
 80014ac:	f002 ff04 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 80014b0:	239b      	movs	r3, #155	; 0x9b
 80014b2:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4619      	mov	r1, r3
 80014c6:	4830      	ldr	r0, [pc, #192]	; (8001588 <MX_GPIO_Init+0x250>)
 80014c8:	f002 fef6 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 80014cc:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 80014d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4619      	mov	r1, r3
 80014e4:	4829      	ldr	r0, [pc, #164]	; (800158c <MX_GPIO_Init+0x254>)
 80014e6:	f002 fee7 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin;
 80014ea:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80014ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014fc:	2305      	movs	r3, #5
 80014fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	4619      	mov	r1, r3
 8001506:	4820      	ldr	r0, [pc, #128]	; (8001588 <MX_GPIO_Init+0x250>)
 8001508:	f002 fed6 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 800150c:	f64e 4308 	movw	r3, #60424	; 0xec08
 8001510:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001516:	2301      	movs	r3, #1
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800151e:	f107 031c 	add.w	r3, r7, #28
 8001522:	4619      	mov	r1, r3
 8001524:	481a      	ldr	r0, [pc, #104]	; (8001590 <MX_GPIO_Init+0x258>)
 8001526:	f002 fec7 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 800152a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	4619      	mov	r1, r3
 800153e:	4814      	ldr	r0, [pc, #80]	; (8001590 <MX_GPIO_Init+0x258>)
 8001540:	f002 feba 	bl	80042b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001544:	2320      	movs	r3, #32
 8001546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001554:	2309      	movs	r3, #9
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	4619      	mov	r1, r3
 800155e:	480a      	ldr	r0, [pc, #40]	; (8001588 <MX_GPIO_Init+0x250>)
 8001560:	f002 feaa 	bl	80042b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001564:	2200      	movs	r2, #0
 8001566:	2100      	movs	r1, #0
 8001568:	2017      	movs	r0, #23
 800156a:	f002 fad6 	bl	8003b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800156e:	2017      	movs	r0, #23
 8001570:	f002 faef 	bl	8003b52 <HAL_NVIC_EnableIRQ>

}
 8001574:	bf00      	nop
 8001576:	3730      	adds	r7, #48	; 0x30
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40023800 	.word	0x40023800
 8001580:	40020800 	.word	0x40020800
 8001584:	40020000 	.word	0x40020000
 8001588:	40020400 	.word	0x40020400
 800158c:	40021000 	.word	0x40021000
 8001590:	40020c00 	.word	0x40020c00

08001594 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001598:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <MX_I2C1_Init+0x74>)
 800159a:	4a1c      	ldr	r2, [pc, #112]	; (800160c <MX_I2C1_Init+0x78>)
 800159c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <MX_I2C1_Init+0x74>)
 80015a0:	4a1b      	ldr	r2, [pc, #108]	; (8001610 <MX_I2C1_Init+0x7c>)
 80015a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015a4:	4b18      	ldr	r3, [pc, #96]	; (8001608 <MX_I2C1_Init+0x74>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <MX_I2C1_Init+0x74>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015b0:	4b15      	ldr	r3, [pc, #84]	; (8001608 <MX_I2C1_Init+0x74>)
 80015b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <MX_I2C1_Init+0x74>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <MX_I2C1_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015c4:	4b10      	ldr	r3, [pc, #64]	; (8001608 <MX_I2C1_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <MX_I2C1_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015d0:	480d      	ldr	r0, [pc, #52]	; (8001608 <MX_I2C1_Init+0x74>)
 80015d2:	f003 f867 	bl	80046a4 <HAL_I2C_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015dc:	f000 fd8c 	bl	80020f8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015e0:	2100      	movs	r1, #0
 80015e2:	4809      	ldr	r0, [pc, #36]	; (8001608 <MX_I2C1_Init+0x74>)
 80015e4:	f003 f9a2 	bl	800492c <HAL_I2CEx_ConfigAnalogFilter>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80015ee:	f000 fd83 	bl	80020f8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015f2:	2100      	movs	r1, #0
 80015f4:	4804      	ldr	r0, [pc, #16]	; (8001608 <MX_I2C1_Init+0x74>)
 80015f6:	f003 f9d5 	bl	80049a4 <HAL_I2CEx_ConfigDigitalFilter>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001600:	f000 fd7a 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	2000027c 	.word	0x2000027c
 800160c:	40005400 	.word	0x40005400
 8001610:	00061a80 	.word	0x00061a80

08001614 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	; 0x28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a19      	ldr	r2, [pc, #100]	; (8001698 <HAL_I2C_MspInit+0x84>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d12c      	bne.n	8001690 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <HAL_I2C_MspInit+0x88>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a17      	ldr	r2, [pc, #92]	; (800169c <HAL_I2C_MspInit+0x88>)
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_I2C_MspInit+0x88>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8001652:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001658:	2312      	movs	r3, #18
 800165a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800165c:	2301      	movs	r3, #1
 800165e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001660:	2303      	movs	r3, #3
 8001662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001664:	2304      	movs	r3, #4
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4619      	mov	r1, r3
 800166e:	480c      	ldr	r0, [pc, #48]	; (80016a0 <HAL_I2C_MspInit+0x8c>)
 8001670:	f002 fe22 	bl	80042b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <HAL_I2C_MspInit+0x88>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	4a07      	ldr	r2, [pc, #28]	; (800169c <HAL_I2C_MspInit+0x88>)
 800167e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001682:	6413      	str	r3, [r2, #64]	; 0x40
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <HAL_I2C_MspInit+0x88>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001690:	bf00      	nop
 8001692:	3728      	adds	r7, #40	; 0x28
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40005400 	.word	0x40005400
 800169c:	40023800 	.word	0x40023800
 80016a0:	40020400 	.word	0x40020400

080016a4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80016a8:	4b18      	ldr	r3, [pc, #96]	; (800170c <MX_SPI1_Init+0x68>)
 80016aa:	4a19      	ldr	r2, [pc, #100]	; (8001710 <MX_SPI1_Init+0x6c>)
 80016ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ae:	4b17      	ldr	r3, [pc, #92]	; (800170c <MX_SPI1_Init+0x68>)
 80016b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <MX_SPI1_Init+0x68>)
 80016b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016bc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <MX_SPI1_Init+0x68>)
 80016c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_SPI1_Init+0x68>)
 80016c8:	2202      	movs	r2, #2
 80016ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <MX_SPI1_Init+0x68>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_SPI1_Init+0x68>)
 80016d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_SPI1_Init+0x68>)
 80016dc:	2228      	movs	r2, #40	; 0x28
 80016de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <MX_SPI1_Init+0x68>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_SPI1_Init+0x68>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ec:	4b07      	ldr	r3, [pc, #28]	; (800170c <MX_SPI1_Init+0x68>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_SPI1_Init+0x68>)
 80016f4:	220a      	movs	r2, #10
 80016f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016f8:	4804      	ldr	r0, [pc, #16]	; (800170c <MX_SPI1_Init+0x68>)
 80016fa:	f003 fe55 	bl	80053a8 <HAL_SPI_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8001704:	f000 fcf8 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000124 	.word	0x20000124
 8001710:	40013000 	.word	0x40013000

08001714 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a19      	ldr	r2, [pc, #100]	; (8001798 <HAL_SPI_MspInit+0x84>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d12b      	bne.n	800178e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_SPI_MspInit+0x88>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	4a17      	ldr	r2, [pc, #92]	; (800179c <HAL_SPI_MspInit+0x88>)
 8001740:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001744:	6453      	str	r3, [r2, #68]	; 0x44
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_SPI_MspInit+0x88>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_SPI_MspInit+0x88>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a10      	ldr	r2, [pc, #64]	; (800179c <HAL_SPI_MspInit+0x88>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <HAL_SPI_MspInit+0x88>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 800176e:	2360      	movs	r3, #96	; 0x60
 8001770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177a:	2303      	movs	r3, #3
 800177c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800177e:	2305      	movs	r3, #5
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	4805      	ldr	r0, [pc, #20]	; (80017a0 <HAL_SPI_MspInit+0x8c>)
 800178a:	f002 fd95 	bl	80042b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800178e:	bf00      	nop
 8001790:	3728      	adds	r7, #40	; 0x28
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40013000 	.word	0x40013000
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020000 	.word	0x40020000

080017a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <HAL_MspInit+0x4c>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a0f      	ldr	r2, [pc, #60]	; (80017f0 <HAL_MspInit+0x4c>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <HAL_MspInit+0x4c>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_MspInit+0x4c>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <HAL_MspInit+0x4c>)
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_MspInit+0x4c>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800

080017f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <HardFault_Handler+0x4>

08001808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <MemManage_Handler+0x4>

0800180e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <BusFault_Handler+0x4>

08001814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <UsageFault_Handler+0x4>

0800181a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001848:	f001 f9e6 	bl	8002c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}

08001850 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <DMA1_Stream1_IRQHandler+0x10>)
 8001856:	f002 faf3 	bl	8003e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	2000056c 	.word	0x2000056c

08001864 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <DMA1_Stream3_IRQHandler+0x10>)
 800186a:	f002 fae9 	bl	8003e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000610 	.word	0x20000610

08001878 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <CAN1_RX0_IRQHandler+0x10>)
 800187e:	f001 fe42 	bl	8003506 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	2000017c 	.word	0x2000017c

0800188c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001890:	2080      	movs	r0, #128	; 0x80
 8001892:	f002 feef 	bl	8004674 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <USART3_IRQHandler+0x10>)
 80018a2:	f005 fc29 	bl	80070f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200005cc 	.word	0x200005cc

080018b0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80018b6:	f004 fb54 	bl	8005f62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200003ec 	.word	0x200003ec

080018c4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80018ca:	f004 fb4a 	bl	8005f62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200003ec 	.word	0x200003ec

080018d8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80018de:	f004 fb40 	bl	8005f62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200003ec 	.word	0x200003ec

080018ec <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <TIM8_CC_IRQHandler+0x10>)
 80018f2:	f004 fb36 	bl	8005f62 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200003ec 	.word	0x200003ec

08001900 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <DMA2_Stream1_IRQHandler+0x10>)
 8001906:	f002 fa9b 	bl	8003e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000050c 	.word	0x2000050c

08001914 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <DMA2_Stream6_IRQHandler+0x10>)
 800191a:	f002 fa91 	bl	8003e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000670 	.word	0x20000670

08001928 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <USART6_IRQHandler+0x10>)
 800192e:	f005 fbe3 	bl	80070f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000714 	.word	0x20000714

0800193c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <SystemInit+0x28>)
 8001942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001946:	4a07      	ldr	r2, [pc, #28]	; (8001964 <SystemInit+0x28>)
 8001948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800194c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <SystemInit+0x28>)
 8001952:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001956:	609a      	str	r2, [r3, #8]
#endif
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800196e:	f001 f901 	bl	8002b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001972:	f000 f95f 	bl	8001c34 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 8001976:	f003 fce3 	bl	8005340 <HAL_RCC_GetHCLKFreq>
 800197a:	4603      	mov	r3, r0
 800197c:	4a9d      	ldr	r2, [pc, #628]	; (8001bf4 <main+0x28c>)
 800197e:	fba2 2303 	umull	r2, r3, r2, r3
 8001982:	099b      	lsrs	r3, r3, #6
 8001984:	4618      	mov	r0, r3
 8001986:	f002 f8f2 	bl	8003b6e <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800198a:	2004      	movs	r0, #4
 800198c:	f002 f8fc 	bl	8003b88 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001990:	2200      	movs	r2, #0
 8001992:	2100      	movs	r1, #0
 8001994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001998:	f002 f8bf 	bl	8003b1a <HAL_NVIC_SetPriority>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800199c:	f7ff fccc 	bl	8001338 <MX_GPIO_Init>
  MX_DMA_Init();
 80019a0:	f7ff fbbe 	bl	8001120 <MX_DMA_Init>
  MX_I2C1_Init();
 80019a4:	f7ff fdf6 	bl	8001594 <MX_I2C1_Init>
  MX_TIM1_Init();
 80019a8:	f000 fbbe 	bl	8002128 <MX_TIM1_Init>
  MX_TIM2_Init();
 80019ac:	f000 fc5c 	bl	8002268 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80019b0:	f000 fec4 	bl	800273c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80019b4:	f000 fccc 	bl	8002350 <MX_TIM3_Init>
  MX_TIM8_Init();
 80019b8:	f000 fd18 	bl	80023ec <MX_TIM8_Init>
  MX_CAN1_Init();
 80019bc:	f7ff faf8 	bl	8000fb0 <MX_CAN1_Init>
  MX_SPI1_Init();
 80019c0:	f7ff fe70 	bl	80016a4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80019c4:	f000 fe90 	bl	80026e8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80019c8:	f000 fee2 	bl	8002790 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
	//Initialize hardware communication
	joystick_Init();
 80019cc:	f001 f89c 	bl	8002b08 <joystick_Init>
	ADC_Init();
 80019d0:	f7ff fa1c 	bl	8000e0c <ADC_Init>
	ADC_DataRequest();
 80019d4:	f7ff fa5c 	bl	8000e90 <ADC_DataRequest>
	ENCODER_Init();
 80019d8:	f7ff fbe8 	bl	80011ac <ENCODER_Init>

	MotorInit(&sabertooth_handler, 128, &huart6);
 80019dc:	4a86      	ldr	r2, [pc, #536]	; (8001bf8 <main+0x290>)
 80019de:	2180      	movs	r1, #128	; 0x80
 80019e0:	4886      	ldr	r0, [pc, #536]	; (8001bfc <main+0x294>)
 80019e2:	f7ff f9e7 	bl	8000db4 <MotorInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint32_t prev_time = HAL_GetTick();
 80019e6:	f001 f92b 	bl	8002c40 <HAL_GetTick>
 80019ea:	6078      	str	r0, [r7, #4]
	ENCODER_Get_Angle(&encoderBack);
 80019ec:	4884      	ldr	r0, [pc, #528]	; (8001c00 <main+0x298>)
 80019ee:	f7ff fc6e 	bl	80012ce <ENCODER_Get_Angle>
	ENCODER_Get_Angle(&encoderFront);
 80019f2:	4884      	ldr	r0, [pc, #528]	; (8001c04 <main+0x29c>)
 80019f4:	f7ff fc6b 	bl	80012ce <ENCODER_Get_Angle>

//	while (state_count++ < 1000)
//		MPU6050_Read_All(&hi2c1, &MPU6050);
//	initial_angle = MPU6050.KalmanAngleX;
	state_count = 0;
 80019f8:	4b83      	ldr	r3, [pc, #524]	; (8001c08 <main+0x2a0>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
	emBrakeMotor(1);
 80019fe:	2001      	movs	r0, #1
 8001a00:	f7ff fa72 	bl	8000ee8 <emBrakeMotor>
	//Reset encoder position
//	ENCODER_Set_ZeroPosition(&encoderBack);
//	ENCODER_Set_ZeroPosition(&encoderFront);
	HAL_Delay(500);
 8001a04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a08:	f001 f926 	bl	8002c58 <HAL_Delay>
		//      MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL -= 50;
		//      runMotor(&backMotor, 100, 1);

		//      runMotor(&backMotor, speed++, 1);
		//Loop should execute once every 1 tick
		if (HAL_GetTick() - prev_time >= 1)
 8001a0c:	f001 f918 	bl	8002c40 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d0f9      	beq.n	8001a0c <main+0xa4>
		{
			ADC_DataRequest();
 8001a18:	f7ff fa3a 	bl	8000e90 <ADC_DataRequest>
			ENCODER_Read(&encoderBack);
 8001a1c:	4878      	ldr	r0, [pc, #480]	; (8001c00 <main+0x298>)
 8001a1e:	f7ff fc2e 	bl	800127e <ENCODER_Read>
			ENCODER_Read(&encoderFront);
 8001a22:	4878      	ldr	r0, [pc, #480]	; (8001c04 <main+0x29c>)
 8001a24:	f7ff fc2b 	bl	800127e <ENCODER_Read>

			//Get kamlan filtered angle from MPU6050
//			MPU6050_Read_All(&hi2c1, &MPU6050);
			GPIO_Digital_Filtered_Input(&button1, 30);
 8001a28:	211e      	movs	r1, #30
 8001a2a:	4878      	ldr	r0, [pc, #480]	; (8001c0c <main+0x2a4>)
 8001a2c:	f7ff fa88 	bl	8000f40 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button2, 30);
 8001a30:	211e      	movs	r1, #30
 8001a32:	4877      	ldr	r0, [pc, #476]	; (8001c10 <main+0x2a8>)
 8001a34:	f7ff fa84 	bl	8000f40 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button3, 30);
 8001a38:	211e      	movs	r1, #30
 8001a3a:	4876      	ldr	r0, [pc, #472]	; (8001c14 <main+0x2ac>)
 8001a3c:	f7ff fa80 	bl	8000f40 <GPIO_Digital_Filtered_Input>

			GPIO_Digital_Filtered_Input(&rearLS1, 5);
 8001a40:	2105      	movs	r1, #5
 8001a42:	4875      	ldr	r0, [pc, #468]	; (8001c18 <main+0x2b0>)
 8001a44:	f7ff fa7c 	bl	8000f40 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&rearLS2, 5);
 8001a48:	2105      	movs	r1, #5
 8001a4a:	4874      	ldr	r0, [pc, #464]	; (8001c1c <main+0x2b4>)
 8001a4c:	f7ff fa78 	bl	8000f40 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS1, 5);
 8001a50:	2105      	movs	r1, #5
 8001a52:	4873      	ldr	r0, [pc, #460]	; (8001c20 <main+0x2b8>)
 8001a54:	f7ff fa74 	bl	8000f40 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS2, 5);
 8001a58:	2105      	movs	r1, #5
 8001a5a:	4872      	ldr	r0, [pc, #456]	; (8001c24 <main+0x2bc>)
 8001a5c:	f7ff fa70 	bl	8000f40 <GPIO_Digital_Filtered_Input>
//				speed[BACK_INDEX] = 0;
//			if (button3.state == GPIO_PIN_SET){
//				motor_speed += 50;
//				HAL_Delay(500);
//			}
			if (button3.state == GPIO_PIN_SET){
 8001a60:	4b6c      	ldr	r3, [pc, #432]	; (8001c14 <main+0x2ac>)
 8001a62:	7a1b      	ldrb	r3, [r3, #8]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d108      	bne.n	8001a7a <main+0x112>
				motor_speed += 50;
 8001a68:	4b6f      	ldr	r3, [pc, #444]	; (8001c28 <main+0x2c0>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	3332      	adds	r3, #50	; 0x32
 8001a6e:	4a6e      	ldr	r2, [pc, #440]	; (8001c28 <main+0x2c0>)
 8001a70:	6013      	str	r3, [r2, #0]
				HAL_Delay(5000);
 8001a72:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a76:	f001 f8ef 	bl	8002c58 <HAL_Delay>
			}


			if (button1.state == GPIO_PIN_SET)
 8001a7a:	4b64      	ldr	r3, [pc, #400]	; (8001c0c <main+0x2a4>)
 8001a7c:	7a1b      	ldrb	r3, [r3, #8]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d107      	bne.n	8001a92 <main+0x12a>
				MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = motor_speed + 1500;
 8001a82:	4b69      	ldr	r3, [pc, #420]	; (8001c28 <main+0x2c0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 8001a8a:	4b68      	ldr	r3, [pc, #416]	; (8001c2c <main+0x2c4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	639a      	str	r2, [r3, #56]	; 0x38
 8001a90:	e008      	b.n	8001aa4 <main+0x13c>
			else if (button1.state == GPIO_PIN_RESET)
 8001a92:	4b5e      	ldr	r3, [pc, #376]	; (8001c0c <main+0x2a4>)
 8001a94:	7a1b      	ldrb	r3, [r3, #8]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d104      	bne.n	8001aa4 <main+0x13c>
				MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = 1500;
 8001a9a:	4b64      	ldr	r3, [pc, #400]	; (8001c2c <main+0x2c4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001aa2:	639a      	str	r2, [r3, #56]	; 0x38

			if (button2.state == GPIO_PIN_SET)
 8001aa4:	4b5a      	ldr	r3, [pc, #360]	; (8001c10 <main+0x2a8>)
 8001aa6:	7a1b      	ldrb	r3, [r3, #8]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d107      	bne.n	8001abc <main+0x154>
				MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = motor_speed + 1500;
 8001aac:	4b5e      	ldr	r3, [pc, #376]	; (8001c28 <main+0x2c0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 8001ab4:	4b5d      	ldr	r3, [pc, #372]	; (8001c2c <main+0x2c4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	635a      	str	r2, [r3, #52]	; 0x34
 8001aba:	e008      	b.n	8001ace <main+0x166>
			else if (button2.state == GPIO_PIN_RESET)
 8001abc:	4b54      	ldr	r3, [pc, #336]	; (8001c10 <main+0x2a8>)
 8001abe:	7a1b      	ldrb	r3, [r3, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d104      	bne.n	8001ace <main+0x166>
				MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = 1500;
 8001ac4:	4b59      	ldr	r3, [pc, #356]	; (8001c2c <main+0x2c4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001acc:	635a      	str	r2, [r3, #52]	; 0x34
\

			//!Must not comment the following section
			//Deadzone of climbing motor, force zero to avoid noise
			if (fabs(speed[FRONT_INDEX]) < 5)
 8001ace:	4b58      	ldr	r3, [pc, #352]	; (8001c30 <main+0x2c8>)
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	eef0 7ae7 	vabs.f32	s15, s15
 8001ad8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001adc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae4:	d503      	bpl.n	8001aee <main+0x186>
				speed[FRONT_INDEX] = 0;
 8001ae6:	4b52      	ldr	r3, [pc, #328]	; (8001c30 <main+0x2c8>)
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
			if (fabs(speed[BACK_INDEX]) < 5)
 8001aee:	4b50      	ldr	r3, [pc, #320]	; (8001c30 <main+0x2c8>)
 8001af0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001af4:	eef0 7ae7 	vabs.f32	s15, s15
 8001af8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b04:	d503      	bpl.n	8001b0e <main+0x1a6>
				speed[BACK_INDEX] = 0;
 8001b06:	4b4a      	ldr	r3, [pc, #296]	; (8001c30 <main+0x2c8>)
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	605a      	str	r2, [r3, #4]
			//*****VERY IMPORTANT AND MUST NOT BE COMMENTED OUT**********************************//
			//Safety check for to avoid the climbing leg overturn
			if (encoderFront.encoder_pos < FRONT_FULL_ROTATION_ENC / 2){
 8001b0e:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <main+0x29c>)
 8001b10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b12:	f242 3333 	movw	r3, #9011	; 0x2333
 8001b16:	085b      	lsrs	r3, r3, #1
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d212      	bcs.n	8001b42 <main+0x1da>
				if (encoderFront.encoder_pos > MAX_FRONT_ALLOWABLE_ENC && speed[FRONT_INDEX] > 0)
 8001b1c:	4b39      	ldr	r3, [pc, #228]	; (8001c04 <main+0x29c>)
 8001b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b20:	f640 421c 	movw	r2, #3100	; 0xc1c
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d91e      	bls.n	8001b66 <main+0x1fe>
 8001b28:	4b41      	ldr	r3, [pc, #260]	; (8001c30 <main+0x2c8>)
 8001b2a:	edd3 7a00 	vldr	s15, [r3]
 8001b2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b36:	dd16      	ble.n	8001b66 <main+0x1fe>
					speed[FRONT_INDEX] = 0;
 8001b38:	4b3d      	ldr	r3, [pc, #244]	; (8001c30 <main+0x2c8>)
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	e011      	b.n	8001b66 <main+0x1fe>
			}
			else{
				if (encoderFront.encoder_pos < MIN_FRONT_ALLOWABLE_ENC && speed[FRONT_INDEX] < 0)
 8001b42:	4b30      	ldr	r3, [pc, #192]	; (8001c04 <main+0x29c>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f641 12c8 	movw	r2, #6600	; 0x19c8
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d20b      	bcs.n	8001b66 <main+0x1fe>
 8001b4e:	4b38      	ldr	r3, [pc, #224]	; (8001c30 <main+0x2c8>)
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b5c:	d503      	bpl.n	8001b66 <main+0x1fe>
					speed[FRONT_INDEX] = 0;
 8001b5e:	4b34      	ldr	r3, [pc, #208]	; (8001c30 <main+0x2c8>)
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
			}

			if (encoderBack.encoder_pos < BACK_FULL_ROTATION_ENC / 2){
 8001b66:	4b26      	ldr	r3, [pc, #152]	; (8001c00 <main+0x298>)
 8001b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b6e:	085b      	lsrs	r3, r3, #1
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d212      	bcs.n	8001b9a <main+0x232>
				if (encoderBack.encoder_pos > MAX_BACK_ALLOWABLE_ENC && speed[BACK_INDEX] > 0)
 8001b74:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <main+0x298>)
 8001b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b78:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d91e      	bls.n	8001bbe <main+0x256>
 8001b80:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <main+0x2c8>)
 8001b82:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8e:	dd16      	ble.n	8001bbe <main+0x256>
					speed[BACK_INDEX] = 0;
 8001b90:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <main+0x2c8>)
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	e011      	b.n	8001bbe <main+0x256>
			}
			else{
				if (encoderBack.encoder_pos < MIN_BACK_ALLOWABLE_ENC && speed[BACK_INDEX] < 0)
 8001b9a:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <main+0x298>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d20b      	bcs.n	8001bbe <main+0x256>
 8001ba6:	4b22      	ldr	r3, [pc, #136]	; (8001c30 <main+0x2c8>)
 8001ba8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb4:	d503      	bpl.n	8001bbe <main+0x256>
					speed[BACK_INDEX] = 0;
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <main+0x2c8>)
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	605a      	str	r2, [r3, #4]
			}
			//**********************************************************************************//


			if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8001bbe:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <main+0x2c8>)
 8001bc0:	edd3 7a00 	vldr	s15, [r3]
 8001bc4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bcc:	d10b      	bne.n	8001be6 <main+0x27e>
 8001bce:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <main+0x2c8>)
 8001bd0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bd4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bdc:	d103      	bne.n	8001be6 <main+0x27e>
				emBrakeMotor(0);
 8001bde:	2000      	movs	r0, #0
 8001be0:	f7ff f982 	bl	8000ee8 <emBrakeMotor>
 8001be4:	e002      	b.n	8001bec <main+0x284>
			else
				emBrakeMotor(1);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f7ff f97e 	bl	8000ee8 <emBrakeMotor>

			prev_time = HAL_GetTick();
 8001bec:	f001 f828 	bl	8002c40 <HAL_GetTick>
 8001bf0:	6078      	str	r0, [r7, #4]
		if (HAL_GetTick() - prev_time >= 1)
 8001bf2:	e70b      	b.n	8001a0c <main+0xa4>
 8001bf4:	10624dd3 	.word	0x10624dd3
 8001bf8:	20000714 	.word	0x20000714
 8001bfc:	200002d0 	.word	0x200002d0
 8001c00:	20000224 	.word	0x20000224
 8001c04:	200001cc 	.word	0x200001cc
 8001c08:	200000d8 	.word	0x200000d8
 8001c0c:	20000078 	.word	0x20000078
 8001c10:	20000088 	.word	0x20000088
 8001c14:	20000098 	.word	0x20000098
 8001c18:	20000038 	.word	0x20000038
 8001c1c:	20000048 	.word	0x20000048
 8001c20:	20000058 	.word	0x20000058
 8001c24:	20000068 	.word	0x20000068
 8001c28:	200000dc 	.word	0x200000dc
 8001c2c:	20000434 	.word	0x20000434
 8001c30:	200000d0 	.word	0x200000d0

08001c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b094      	sub	sp, #80	; 0x50
 8001c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c3a:	f107 0320 	add.w	r3, r7, #32
 8001c3e:	2230      	movs	r2, #48	; 0x30
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f006 f88c 	bl	8007d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <SystemClock_Config+0xd8>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	4a2a      	ldr	r2, [pc, #168]	; (8001d0c <SystemClock_Config+0xd8>)
 8001c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c66:	6413      	str	r3, [r2, #64]	; 0x40
 8001c68:	4b28      	ldr	r3, [pc, #160]	; (8001d0c <SystemClock_Config+0xd8>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c74:	2300      	movs	r3, #0
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	4b25      	ldr	r3, [pc, #148]	; (8001d10 <SystemClock_Config+0xdc>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a24      	ldr	r2, [pc, #144]	; (8001d10 <SystemClock_Config+0xdc>)
 8001c7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <SystemClock_Config+0xdc>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c90:	2301      	movs	r3, #1
 8001c92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001ca8:	23b4      	movs	r3, #180	; 0xb4
 8001caa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cac:	2302      	movs	r3, #2
 8001cae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cb0:	2304      	movs	r3, #4
 8001cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb4:	f107 0320 	add.w	r3, r7, #32
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f002 ff03 	bl	8004ac4 <HAL_RCC_OscConfig>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cc4:	f000 fa18 	bl	80020f8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001cc8:	f002 feac 	bl	8004a24 <HAL_PWREx_EnableOverDrive>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001cd2:	f000 fa11 	bl	80020f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cd6:	230f      	movs	r3, #15
 8001cd8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ce2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ce6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	2105      	movs	r1, #5
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f003 f95d 	bl	8004fb4 <HAL_RCC_ClockConfig>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001d00:	f000 f9fa 	bl	80020f8 <Error_Handler>
  }
}
 8001d04:	bf00      	nop
 8001d06:	3750      	adds	r7, #80	; 0x50
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40007000 	.word	0x40007000

08001d14 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	2b80      	cmp	r3, #128	; 0x80
 8001d22:	d11c      	bne.n	8001d5e <HAL_GPIO_EXTI_Callback+0x4a>
	{
	case AD_BUSY_Pin:
	{
		if (HAL_GetTick() - prev_adc_time > 1)
 8001d24:	f000 ff8c 	bl	8002c40 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <HAL_GPIO_EXTI_Callback+0x58>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d916      	bls.n	8001d62 <HAL_GPIO_EXTI_Callback+0x4e>
		{
			ADC_Read(adc_rawData);
 8001d34:	480e      	ldr	r0, [pc, #56]	; (8001d70 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001d36:	f7ff f8bb 	bl	8000eb0 <ADC_Read>
			tempJoyRawDataX = adc_rawData[2];
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001d3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <HAL_GPIO_EXTI_Callback+0x60>)
 8001d44:	601a      	str	r2, [r3, #0]
			tempJoyRawDataY = adc_rawData[1];
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001d48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_GPIO_EXTI_Callback+0x64>)
 8001d50:	601a      	str	r2, [r3, #0]
			prev_adc_time = HAL_GetTick();
 8001d52:	f000 ff75 	bl	8002c40 <HAL_GetTick>
 8001d56:	4603      	mov	r3, r0
 8001d58:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <HAL_GPIO_EXTI_Callback+0x58>)
 8001d5a:	6013      	str	r3, [r2, #0]
		}
	}
		break;
 8001d5c:	e001      	b.n	8001d62 <HAL_GPIO_EXTI_Callback+0x4e>
	default:
		break;
 8001d5e:	bf00      	nop
 8001d60:	e000      	b.n	8001d64 <HAL_GPIO_EXTI_Callback+0x50>
		break;
 8001d62:	bf00      	nop
	}
}
 8001d64:	bf00      	nop
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	200000cc 	.word	0x200000cc
 8001d70:	2000038c 	.word	0x2000038c
 8001d74:	200003e4 	.word	0x200003e4
 8001d78:	200002e8 	.word	0x200002e8

08001d7c <HAL_UART_RxCpltCallback>:
//
//	}
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	//Hub Encoder callback
	if (huart->Instance == USART3)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a3f      	ldr	r2, [pc, #252]	; (8001e88 <HAL_UART_RxCpltCallback+0x10c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d175      	bne.n	8001e7a <HAL_UART_RxCpltCallback+0xfe>
	{
		//Checksum, make sure that response is correct
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 8001d8e:	4b3f      	ldr	r3, [pc, #252]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	4b3d      	ldr	r3, [pc, #244]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001d96:	785b      	ldrb	r3, [r3, #1]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[2] + (uint16_t) receive_buf[3]
 8001d9e:	4b3b      	ldr	r3, [pc, #236]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001da0:	789b      	ldrb	r3, [r3, #2]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	4413      	add	r3, r2
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	4b38      	ldr	r3, [pc, #224]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001daa:	78db      	ldrb	r3, [r3, #3]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	4413      	add	r3, r2
 8001db0:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[4] + (uint16_t) receive_buf[5]
 8001db2:	4b36      	ldr	r3, [pc, #216]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001db4:	791b      	ldrb	r3, [r3, #4]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	4b33      	ldr	r3, [pc, #204]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001dbe:	795b      	ldrb	r3, [r3, #5]
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[6] + (uint16_t) receive_buf[7]
 8001dc6:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001dc8:	799b      	ldrb	r3, [r3, #6]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	4413      	add	r3, r2
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	4b2e      	ldr	r3, [pc, #184]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001dd2:	79db      	ldrb	r3, [r3, #7]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[8] + (uint16_t) receive_buf[9]
 8001dda:	4b2c      	ldr	r3, [pc, #176]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001ddc:	7a1b      	ldrb	r3, [r3, #8]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	4413      	add	r3, r2
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	4b29      	ldr	r3, [pc, #164]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001de6:	7a5b      	ldrb	r3, [r3, #9]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	4413      	add	r3, r2
 8001dec:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[10] + (uint16_t) receive_buf[11]
 8001dee:	4b27      	ldr	r3, [pc, #156]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001df0:	7a9b      	ldrb	r3, [r3, #10]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	4413      	add	r3, r2
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001dfa:	7adb      	ldrb	r3, [r3, #11]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	4413      	add	r3, r2
 8001e00:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[12] + (uint16_t) receive_buf[13];
 8001e02:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001e04:	7b1b      	ldrb	r3, [r3, #12]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	4413      	add	r3, r2
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001e0e:	7b5b      	ldrb	r3, [r3, #13]
 8001e10:	b29b      	uxth	r3, r3
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 8001e12:	4413      	add	r3, r2
 8001e14:	81fb      	strh	r3, [r7, #14]
		if ((uint8_t) sum == receive_buf[14])
 8001e16:	89fb      	ldrh	r3, [r7, #14]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001e1c:	7b9b      	ldrb	r3, [r3, #14]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d12b      	bne.n	8001e7a <HAL_UART_RxCpltCallback+0xfe>
		{
			//Encoder Feedback
			if (receive_buf[0] == 0xAA && receive_buf[1] == 0xA4
 8001e22:	4b1a      	ldr	r3, [pc, #104]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2baa      	cmp	r3, #170	; 0xaa
 8001e28:	d127      	bne.n	8001e7a <HAL_UART_RxCpltCallback+0xfe>
 8001e2a:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001e2c:	785b      	ldrb	r3, [r3, #1]
 8001e2e:	2ba4      	cmp	r3, #164	; 0xa4
 8001e30:	d123      	bne.n	8001e7a <HAL_UART_RxCpltCallback+0xfe>
					&& receive_buf[3] == 0x00)
 8001e32:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001e34:	78db      	ldrb	r3, [r3, #3]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d11f      	bne.n	8001e7a <HAL_UART_RxCpltCallback+0xfe>
			{
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 8001e3a:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001e3c:	7a5b      	ldrb	r3, [r3, #9]
 8001e3e:	061a      	lsls	r2, r3, #24
						+ (receive_buf[8] << 16) + (receive_buf[7] << 8)
 8001e40:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001e42:	7a1b      	ldrb	r3, [r3, #8]
 8001e44:	041b      	lsls	r3, r3, #16
 8001e46:	441a      	add	r2, r3
 8001e48:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001e4a:	79db      	ldrb	r3, [r3, #7]
 8001e4c:	021b      	lsls	r3, r3, #8
 8001e4e:	4413      	add	r3, r2
						+ (receive_buf[6]);
 8001e50:	4a0e      	ldr	r2, [pc, #56]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001e52:	7992      	ldrb	r2, [r2, #6]
 8001e54:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 8001e56:	4a0e      	ldr	r2, [pc, #56]	; (8001e90 <HAL_UART_RxCpltCallback+0x114>)
 8001e58:	6013      	str	r3, [r2, #0]
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001e5c:	7b5b      	ldrb	r3, [r3, #13]
 8001e5e:	061a      	lsls	r2, r3, #24
						+ (receive_buf[12] << 16) + (receive_buf[11] << 8)
 8001e60:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001e62:	7b1b      	ldrb	r3, [r3, #12]
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	441a      	add	r2, r3
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001e6a:	7adb      	ldrb	r3, [r3, #11]
 8001e6c:	021b      	lsls	r3, r3, #8
 8001e6e:	4413      	add	r3, r2
						+ (receive_buf[10]);
 8001e70:	4a06      	ldr	r2, [pc, #24]	; (8001e8c <HAL_UART_RxCpltCallback+0x110>)
 8001e72:	7a92      	ldrb	r2, [r2, #10]
 8001e74:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 8001e76:	4a06      	ldr	r2, [pc, #24]	; (8001e90 <HAL_UART_RxCpltCallback+0x114>)
 8001e78:	6053      	str	r3, [r2, #4]
			}
		}
	}

}
 8001e7a:	bf00      	nop
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40004800 	.word	0x40004800
 8001e8c:	200003d4 	.word	0x200003d4
 8001e90:	200002ec 	.word	0x200002ec
 8001e94:	00000000 	.word	0x00000000

08001e98 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
	//Left Encoder Callback
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	if (hcan == &hcan1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a8d      	ldr	r2, [pc, #564]	; (80020d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	f040 810b 	bne.w	80020c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 8001eaa:	f107 0308 	add.w	r3, r7, #8
 8001eae:	4a8b      	ldr	r2, [pc, #556]	; (80020dc <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f001 f9ef 	bl	8003296 <HAL_CAN_GetRxMessage>
		if (incoming[1] == ENC_ADDR_LEFT)
 8001eb8:	7a7b      	ldrb	r3, [r7, #9]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d150      	bne.n	8001f60 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
		{
			ENCODER_Sort_Incoming(incoming, &encoderBack);
 8001ebe:	f107 0308 	add.w	r3, r7, #8
 8001ec2:	4987      	ldr	r1, [pc, #540]	; (80020e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff f989 	bl	80011dc <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderBack);
 8001eca:	4885      	ldr	r0, [pc, #532]	; (80020e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001ecc:	f7ff f9ff 	bl	80012ce <ENCODER_Get_Angle>
			//Process the angle and GR
			//4096 is encoder single turn value
			//Need to check the encoder value in the correct direction
			encoderBack.encoder_pos = (uint32_t)((4096 * BACK_GEAR_RATIO)
					- encoderBack.encoder_pos)
 8001ed0:	4b83      	ldr	r3, [pc, #524]	; (80020e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							% (4096 * BACK_GEAR_RATIO);
 8001ed4:	425b      	negs	r3, r3
 8001ed6:	f3c3 030c 	ubfx	r3, r3, #0, #13
			encoderBack.encoder_pos = (uint32_t)((4096 * BACK_GEAR_RATIO)
 8001eda:	4a81      	ldr	r2, [pc, #516]	; (80020e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001edc:	6453      	str	r3, [r2, #68]	; 0x44
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 8001ede:	4b80      	ldr	r3, [pc, #512]	; (80020e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					/ (4096 * BACK_GEAR_RATIO) * 360 + 36.587;
 8001eea:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80020e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>
 8001eee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ef2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80020e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 8001ef6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001efa:	ee17 0a90 	vmov	r0, s15
 8001efe:	f7fe fadb 	bl	80004b8 <__aeabi_f2d>
 8001f02:	a371      	add	r3, pc, #452	; (adr r3, 80020c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f08:	f7fe f978 	bl	80001fc <__adddf3>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4610      	mov	r0, r2
 8001f12:	4619      	mov	r1, r3
 8001f14:	f7fe fd82 	bl	8000a1c <__aeabi_d2f>
 8001f18:	4603      	mov	r3, r0
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 8001f1a:	4a71      	ldr	r2, [pc, #452]	; (80020e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001f1c:	6413      	str	r3, [r2, #64]	; 0x40
			if (encoderBack.angleDeg > 360)
 8001f1e:	4b70      	ldr	r3, [pc, #448]	; (80020e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001f20:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001f24:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80020e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 8001f28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f30:	dd09      	ble.n	8001f46 <HAL_CAN_RxFifo0MsgPendingCallback+0xae>
				encoderBack.angleDeg -= 360;
 8001f32:	4b6b      	ldr	r3, [pc, #428]	; (80020e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001f34:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001f38:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80020e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>
 8001f3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f40:	4b67      	ldr	r3, [pc, #412]	; (80020e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001f42:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			if (encoderBack.encoder_pos >= MAX_BACK_ALLOWABLE_ENC)
 8001f46:	4b66      	ldr	r3, [pc, #408]	; (80020e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d306      	bcc.n	8001f60 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
				encoderBack.signed_encoder_pos = encoderBack.encoder_pos
 8001f52:	4b63      	ldr	r3, [pc, #396]	; (80020e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
						- 4096 * BACK_GEAR_RATIO;
 8001f56:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8001f5a:	461a      	mov	r2, r3
				encoderBack.signed_encoder_pos = encoderBack.encoder_pos
 8001f5c:	4b60      	ldr	r3, [pc, #384]	; (80020e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8001f5e:	649a      	str	r2, [r3, #72]	; 0x48
		}
		if (incoming[1] == ENC_ADDR_RIGHT)
 8001f60:	7a7b      	ldrb	r3, [r7, #9]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	f040 80ac 	bne.w	80020c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
		{
			ENCODER_Sort_Incoming(incoming, &encoderFront);
 8001f68:	f107 0308 	add.w	r3, r7, #8
 8001f6c:	495f      	ldr	r1, [pc, #380]	; (80020ec <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff f934 	bl	80011dc <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderFront);
 8001f74:	485d      	ldr	r0, [pc, #372]	; (80020ec <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8001f76:	f7ff f9aa 	bl	80012ce <ENCODER_Get_Angle>
			if (4096 * 24 - encoderFront.encoder_pos < 30000)
 8001f7a:	4b5c      	ldr	r3, [pc, #368]	; (80020ec <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	f5c3 33c0 	rsb	r3, r3, #98304	; 0x18000
 8001f82:	f247 522f 	movw	r2, #29999	; 0x752f
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d839      	bhi.n	8001ffe <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
			{
				encoderFront.encoder_pos =
						(4096 * 24 - encoderFront.encoder_pos)
 8001f8a:	4b58      	ldr	r3, [pc, #352]	; (80020ec <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	f5c3 32c0 	rsb	r2, r3, #98304	; 0x18000
								% (uint32_t) (4096 * FRONT_GEAR_RATIO);
 8001f92:	4b57      	ldr	r3, [pc, #348]	; (80020f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>)
 8001f94:	fba3 1302 	umull	r1, r3, r3, r2
 8001f98:	0b5b      	lsrs	r3, r3, #13
 8001f9a:	f242 3133 	movw	r1, #9011	; 0x2333
 8001f9e:	fb01 f303 	mul.w	r3, r1, r3
 8001fa2:	1ad3      	subs	r3, r2, r3
				encoderFront.encoder_pos =
 8001fa4:	4a51      	ldr	r2, [pc, #324]	; (80020ec <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8001fa6:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8001fa8:	4b50      	ldr	r3, [pc, #320]	; (80020ec <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8001faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fac:	ee07 3a90 	vmov	s15, r3
 8001fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb4:	ee17 0a90 	vmov	r0, s15
 8001fb8:	f7fe fa7e 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587;
 8001fbc:	a344      	add	r3, pc, #272	; (adr r3, 80020d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8001fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc2:	f7fe fbfb 	bl	80007bc <__aeabi_ddiv>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	4b48      	ldr	r3, [pc, #288]	; (80020f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8001fd4:	f7fe fac8 	bl	8000568 <__aeabi_dmul>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4610      	mov	r0, r2
 8001fde:	4619      	mov	r1, r3
 8001fe0:	a339      	add	r3, pc, #228	; (adr r3, 80020c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8001fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe6:	f7fe f909 	bl	80001fc <__adddf3>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4610      	mov	r0, r2
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f7fe fd13 	bl	8000a1c <__aeabi_d2f>
 8001ff6:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8001ff8:	4a3c      	ldr	r2, [pc, #240]	; (80020ec <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8001ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffc:	e047      	b.n	800208e <HAL_CAN_RxFifo0MsgPendingCallback+0x1f6>
			}
			else
			{
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
						- encoderFront.encoder_pos;
 8001ffe:	4b3b      	ldr	r3, [pc, #236]	; (80020ec <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fa36 	bl	8000474 <__aeabi_ui2d>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	a130      	add	r1, pc, #192	; (adr r1, 80020d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 800200e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002012:	f7fe f8f1 	bl	80001f8 <__aeabi_dsub>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
 800201a:	4610      	mov	r0, r2
 800201c:	4619      	mov	r1, r3
 800201e:	f7fe fcdd 	bl	80009dc <__aeabi_d2uiz>
 8002022:	4603      	mov	r3, r0
 8002024:	4a31      	ldr	r2, [pc, #196]	; (80020ec <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002026:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002028:	4b30      	ldr	r3, [pc, #192]	; (80020ec <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 800202a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202c:	ee07 3a90 	vmov	s15, r3
 8002030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002034:	ee17 0a90 	vmov	r0, s15
 8002038:	f7fe fa3e 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587 - 360;
 800203c:	a324      	add	r3, pc, #144	; (adr r3, 80020d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 800203e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002042:	f7fe fbbb 	bl	80007bc <__aeabi_ddiv>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4610      	mov	r0, r2
 800204c:	4619      	mov	r1, r3
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	4b28      	ldr	r3, [pc, #160]	; (80020f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002054:	f7fe fa88 	bl	8000568 <__aeabi_dmul>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	a319      	add	r3, pc, #100	; (adr r3, 80020c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8002062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002066:	f7fe f8c9 	bl	80001fc <__adddf3>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4610      	mov	r0, r2
 8002070:	4619      	mov	r1, r3
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002078:	f7fe f8be 	bl	80001f8 <__aeabi_dsub>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	f7fe fcca 	bl	8000a1c <__aeabi_d2f>
 8002088:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 800208a:	4a18      	ldr	r2, [pc, #96]	; (80020ec <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 800208c:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (encoderFront.encoder_pos >= MAX_FRONT_ALLOWABLE_ENC)
 800208e:	4b17      	ldr	r3, [pc, #92]	; (80020ec <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f640 421c 	movw	r2, #3100	; 0xc1c
 8002096:	4293      	cmp	r3, r2
 8002098:	d312      	bcc.n	80020c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>
				encoderFront.signed_encoder_pos = encoderFront.encoder_pos
 800209a:	4b14      	ldr	r3, [pc, #80]	; (80020ec <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
						- 4096 * FRONT_GEAR_RATIO;
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe f9e8 	bl	8000474 <__aeabi_ui2d>
 80020a4:	a30a      	add	r3, pc, #40	; (adr r3, 80020d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 80020a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020aa:	f7fe f8a5 	bl	80001f8 <__aeabi_dsub>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
				encoderFront.signed_encoder_pos = encoderFront.encoder_pos
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	f7fe fc69 	bl	800098c <__aeabi_d2iz>
 80020ba:	4603      	mov	r3, r0
 80020bc:	4a0b      	ldr	r2, [pc, #44]	; (80020ec <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 80020be:	6493      	str	r3, [r2, #72]	; 0x48
		}
	}
}
 80020c0:	bf00      	nop
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	d0e56042 	.word	0xd0e56042
 80020cc:	40424b22 	.word	0x40424b22
 80020d0:	9999999a 	.word	0x9999999a
 80020d4:	40c19999 	.word	0x40c19999
 80020d8:	2000017c 	.word	0x2000017c
 80020dc:	200000e0 	.word	0x200000e0
 80020e0:	20000224 	.word	0x20000224
 80020e4:	46000000 	.word	0x46000000
 80020e8:	43b40000 	.word	0x43b40000
 80020ec:	200001cc 	.word	0x200001cc
 80020f0:	e8bb8111 	.word	0xe8bb8111
 80020f4:	40768000 	.word	0x40768000

080020f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_TIM_PWM_Stop(&MOTOR_TIM, TIM_CHANNEL_1);
 80020fc:	2100      	movs	r1, #0
 80020fe:	4808      	ldr	r0, [pc, #32]	; (8002120 <Error_Handler+0x28>)
 8002100:	f003 fe66 	bl	8005dd0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&MOTOR_TIM, TIM_CHANNEL_2);
 8002104:	2104      	movs	r1, #4
 8002106:	4806      	ldr	r0, [pc, #24]	; (8002120 <Error_Handler+0x28>)
 8002108:	f003 fe62 	bl	8005dd0 <HAL_TIM_PWM_Stop>
	brakeMotor(&backMotor, 1);
 800210c:	2101      	movs	r1, #1
 800210e:	4805      	ldr	r0, [pc, #20]	; (8002124 <Error_Handler+0x2c>)
 8002110:	f7fe fefc 	bl	8000f0c <brakeMotor>
	brakeMotor(&backMotor, 1);
 8002114:	2101      	movs	r1, #1
 8002116:	4803      	ldr	r0, [pc, #12]	; (8002124 <Error_Handler+0x2c>)
 8002118:	f7fe fef8 	bl	8000f0c <brakeMotor>
  /* USER CODE END Error_Handler_Debug */
}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000434 	.word	0x20000434
 8002124:	20000000 	.word	0x20000000

08002128 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b096      	sub	sp, #88	; 0x58
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800212e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	609a      	str	r2, [r3, #8]
 800213a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800213c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	605a      	str	r2, [r3, #4]
 8002150:	609a      	str	r2, [r3, #8]
 8002152:	60da      	str	r2, [r3, #12]
 8002154:	611a      	str	r2, [r3, #16]
 8002156:	615a      	str	r2, [r3, #20]
 8002158:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	2220      	movs	r2, #32
 800215e:	2100      	movs	r1, #0
 8002160:	4618      	mov	r0, r3
 8002162:	f005 fdfd 	bl	8007d60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002166:	4b3e      	ldr	r3, [pc, #248]	; (8002260 <MX_TIM1_Init+0x138>)
 8002168:	4a3e      	ldr	r2, [pc, #248]	; (8002264 <MX_TIM1_Init+0x13c>)
 800216a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 800216c:	4b3c      	ldr	r3, [pc, #240]	; (8002260 <MX_TIM1_Init+0x138>)
 800216e:	22b3      	movs	r2, #179	; 0xb3
 8002170:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002172:	4b3b      	ldr	r3, [pc, #236]	; (8002260 <MX_TIM1_Init+0x138>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8002178:	4b39      	ldr	r3, [pc, #228]	; (8002260 <MX_TIM1_Init+0x138>)
 800217a:	2263      	movs	r2, #99	; 0x63
 800217c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800217e:	4b38      	ldr	r3, [pc, #224]	; (8002260 <MX_TIM1_Init+0x138>)
 8002180:	2200      	movs	r2, #0
 8002182:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002184:	4b36      	ldr	r3, [pc, #216]	; (8002260 <MX_TIM1_Init+0x138>)
 8002186:	2200      	movs	r2, #0
 8002188:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800218a:	4b35      	ldr	r3, [pc, #212]	; (8002260 <MX_TIM1_Init+0x138>)
 800218c:	2200      	movs	r2, #0
 800218e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002190:	4833      	ldr	r0, [pc, #204]	; (8002260 <MX_TIM1_Init+0x138>)
 8002192:	f003 fd75 	bl	8005c80 <HAL_TIM_Base_Init>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800219c:	f7ff ffac 	bl	80020f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80021aa:	4619      	mov	r1, r3
 80021ac:	482c      	ldr	r0, [pc, #176]	; (8002260 <MX_TIM1_Init+0x138>)
 80021ae:	f004 f93f 	bl	8006430 <HAL_TIM_ConfigClockSource>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80021b8:	f7ff ff9e 	bl	80020f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021bc:	4828      	ldr	r0, [pc, #160]	; (8002260 <MX_TIM1_Init+0x138>)
 80021be:	f003 fdae 	bl	8005d1e <HAL_TIM_PWM_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80021c8:	f7ff ff96 	bl	80020f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021cc:	2300      	movs	r3, #0
 80021ce:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021d8:	4619      	mov	r1, r3
 80021da:	4821      	ldr	r0, [pc, #132]	; (8002260 <MX_TIM1_Init+0x138>)
 80021dc:	f004 fe5c 	bl	8006e98 <HAL_TIMEx_MasterConfigSynchronization>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80021e6:	f7ff ff87 	bl	80020f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021ea:	2360      	movs	r3, #96	; 0x60
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021f2:	2300      	movs	r3, #0
 80021f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021f6:	2300      	movs	r3, #0
 80021f8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002202:	2300      	movs	r3, #0
 8002204:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220a:	2204      	movs	r2, #4
 800220c:	4619      	mov	r1, r3
 800220e:	4814      	ldr	r0, [pc, #80]	; (8002260 <MX_TIM1_Init+0x138>)
 8002210:	f004 f84c 	bl	80062ac <HAL_TIM_PWM_ConfigChannel>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800221a:	f7ff ff6d 	bl	80020f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002232:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002236:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002238:	2300      	movs	r3, #0
 800223a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800223c:	1d3b      	adds	r3, r7, #4
 800223e:	4619      	mov	r1, r3
 8002240:	4807      	ldr	r0, [pc, #28]	; (8002260 <MX_TIM1_Init+0x138>)
 8002242:	f004 fea5 	bl	8006f90 <HAL_TIMEx_ConfigBreakDeadTime>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800224c:	f7ff ff54 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002250:	4803      	ldr	r0, [pc, #12]	; (8002260 <MX_TIM1_Init+0x138>)
 8002252:	f000 f9e7 	bl	8002624 <HAL_TIM_MspPostInit>

}
 8002256:	bf00      	nop
 8002258:	3758      	adds	r7, #88	; 0x58
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	2000047c 	.word	0x2000047c
 8002264:	40010000 	.word	0x40010000

08002268 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08e      	sub	sp, #56	; 0x38
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800226e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800227c:	f107 0320 	add.w	r3, r7, #32
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002286:	1d3b      	adds	r3, r7, #4
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
 8002294:	615a      	str	r2, [r3, #20]
 8002296:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002298:	4b2c      	ldr	r3, [pc, #176]	; (800234c <MX_TIM2_Init+0xe4>)
 800229a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800229e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80022a0:	4b2a      	ldr	r3, [pc, #168]	; (800234c <MX_TIM2_Init+0xe4>)
 80022a2:	2259      	movs	r2, #89	; 0x59
 80022a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a6:	4b29      	ldr	r3, [pc, #164]	; (800234c <MX_TIM2_Init+0xe4>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80022ac:	4b27      	ldr	r3, [pc, #156]	; (800234c <MX_TIM2_Init+0xe4>)
 80022ae:	2263      	movs	r2, #99	; 0x63
 80022b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b2:	4b26      	ldr	r3, [pc, #152]	; (800234c <MX_TIM2_Init+0xe4>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b8:	4b24      	ldr	r3, [pc, #144]	; (800234c <MX_TIM2_Init+0xe4>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022be:	4823      	ldr	r0, [pc, #140]	; (800234c <MX_TIM2_Init+0xe4>)
 80022c0:	f003 fcde 	bl	8005c80 <HAL_TIM_Base_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80022ca:	f7ff ff15 	bl	80020f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022d8:	4619      	mov	r1, r3
 80022da:	481c      	ldr	r0, [pc, #112]	; (800234c <MX_TIM2_Init+0xe4>)
 80022dc:	f004 f8a8 	bl	8006430 <HAL_TIM_ConfigClockSource>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80022e6:	f7ff ff07 	bl	80020f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80022ea:	4818      	ldr	r0, [pc, #96]	; (800234c <MX_TIM2_Init+0xe4>)
 80022ec:	f003 fd17 	bl	8005d1e <HAL_TIM_PWM_Init>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80022f6:	f7ff feff 	bl	80020f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fe:	2300      	movs	r3, #0
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002302:	f107 0320 	add.w	r3, r7, #32
 8002306:	4619      	mov	r1, r3
 8002308:	4810      	ldr	r0, [pc, #64]	; (800234c <MX_TIM2_Init+0xe4>)
 800230a:	f004 fdc5 	bl	8006e98 <HAL_TIMEx_MasterConfigSynchronization>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002314:	f7ff fef0 	bl	80020f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002318:	2360      	movs	r3, #96	; 0x60
 800231a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	2208      	movs	r2, #8
 800232c:	4619      	mov	r1, r3
 800232e:	4807      	ldr	r0, [pc, #28]	; (800234c <MX_TIM2_Init+0xe4>)
 8002330:	f003 ffbc 	bl	80062ac <HAL_TIM_PWM_ConfigChannel>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800233a:	f7ff fedd 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800233e:	4803      	ldr	r0, [pc, #12]	; (800234c <MX_TIM2_Init+0xe4>)
 8002340:	f000 f970 	bl	8002624 <HAL_TIM_MspPostInit>

}
 8002344:	bf00      	nop
 8002346:	3738      	adds	r7, #56	; 0x38
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	200004c4 	.word	0x200004c4

08002350 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002356:	f107 0308 	add.w	r3, r7, #8
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002364:	463b      	mov	r3, r7
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <MX_TIM3_Init+0x94>)
 800236e:	4a1e      	ldr	r2, [pc, #120]	; (80023e8 <MX_TIM3_Init+0x98>)
 8002370:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8002372:	4b1c      	ldr	r3, [pc, #112]	; (80023e4 <MX_TIM3_Init+0x94>)
 8002374:	2259      	movs	r2, #89	; 0x59
 8002376:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002378:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <MX_TIM3_Init+0x94>)
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800237e:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <MX_TIM3_Init+0x94>)
 8002380:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002384:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002386:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <MX_TIM3_Init+0x94>)
 8002388:	2200      	movs	r2, #0
 800238a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800238c:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <MX_TIM3_Init+0x94>)
 800238e:	2200      	movs	r2, #0
 8002390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002392:	4814      	ldr	r0, [pc, #80]	; (80023e4 <MX_TIM3_Init+0x94>)
 8002394:	f003 fc74 	bl	8005c80 <HAL_TIM_Base_Init>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800239e:	f7ff feab 	bl	80020f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023a8:	f107 0308 	add.w	r3, r7, #8
 80023ac:	4619      	mov	r1, r3
 80023ae:	480d      	ldr	r0, [pc, #52]	; (80023e4 <MX_TIM3_Init+0x94>)
 80023b0:	f004 f83e 	bl	8006430 <HAL_TIM_ConfigClockSource>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80023ba:	f7ff fe9d 	bl	80020f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c2:	2300      	movs	r3, #0
 80023c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023c6:	463b      	mov	r3, r7
 80023c8:	4619      	mov	r1, r3
 80023ca:	4806      	ldr	r0, [pc, #24]	; (80023e4 <MX_TIM3_Init+0x94>)
 80023cc:	f004 fd64 	bl	8006e98 <HAL_TIMEx_MasterConfigSynchronization>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80023d6:	f7ff fe8f 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023da:	bf00      	nop
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000434 	.word	0x20000434
 80023e8:	40000400 	.word	0x40000400

080023ec <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	; 0x28
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023f2:	f107 0318 	add.w	r3, r7, #24
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]
 80023fc:	609a      	str	r2, [r3, #8]
 80023fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002400:	f107 0310 	add.w	r3, r7, #16
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800240a:	463b      	mov	r3, r7
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002416:	4b2d      	ldr	r3, [pc, #180]	; (80024cc <MX_TIM8_Init+0xe0>)
 8002418:	4a2d      	ldr	r2, [pc, #180]	; (80024d0 <MX_TIM8_Init+0xe4>)
 800241a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 90-1;
 800241c:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <MX_TIM8_Init+0xe0>)
 800241e:	2259      	movs	r2, #89	; 0x59
 8002420:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002422:	4b2a      	ldr	r3, [pc, #168]	; (80024cc <MX_TIM8_Init+0xe0>)
 8002424:	2200      	movs	r2, #0
 8002426:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002428:	4b28      	ldr	r3, [pc, #160]	; (80024cc <MX_TIM8_Init+0xe0>)
 800242a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800242e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002430:	4b26      	ldr	r3, [pc, #152]	; (80024cc <MX_TIM8_Init+0xe0>)
 8002432:	2200      	movs	r2, #0
 8002434:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002436:	4b25      	ldr	r3, [pc, #148]	; (80024cc <MX_TIM8_Init+0xe0>)
 8002438:	2200      	movs	r2, #0
 800243a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800243c:	4b23      	ldr	r3, [pc, #140]	; (80024cc <MX_TIM8_Init+0xe0>)
 800243e:	2200      	movs	r2, #0
 8002440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002442:	4822      	ldr	r0, [pc, #136]	; (80024cc <MX_TIM8_Init+0xe0>)
 8002444:	f003 fc1c 	bl	8005c80 <HAL_TIM_Base_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800244e:	f7ff fe53 	bl	80020f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002456:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002458:	f107 0318 	add.w	r3, r7, #24
 800245c:	4619      	mov	r1, r3
 800245e:	481b      	ldr	r0, [pc, #108]	; (80024cc <MX_TIM8_Init+0xe0>)
 8002460:	f003 ffe6 	bl	8006430 <HAL_TIM_ConfigClockSource>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800246a:	f7ff fe45 	bl	80020f8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800246e:	4817      	ldr	r0, [pc, #92]	; (80024cc <MX_TIM8_Init+0xe0>)
 8002470:	f003 fd1e 	bl	8005eb0 <HAL_TIM_IC_Init>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 800247a:	f7ff fe3d 	bl	80020f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002486:	f107 0310 	add.w	r3, r7, #16
 800248a:	4619      	mov	r1, r3
 800248c:	480f      	ldr	r0, [pc, #60]	; (80024cc <MX_TIM8_Init+0xe0>)
 800248e:	f004 fd03 	bl	8006e98 <HAL_TIMEx_MasterConfigSynchronization>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_TIM8_Init+0xb0>
  {
    Error_Handler();
 8002498:	f7ff fe2e 	bl	80020f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800249c:	2300      	movs	r3, #0
 800249e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80024a0:	2301      	movs	r3, #1
 80024a2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80024ac:	463b      	mov	r3, r7
 80024ae:	220c      	movs	r2, #12
 80024b0:	4619      	mov	r1, r3
 80024b2:	4806      	ldr	r0, [pc, #24]	; (80024cc <MX_TIM8_Init+0xe0>)
 80024b4:	f003 fe5d 	bl	8006172 <HAL_TIM_IC_ConfigChannel>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80024be:	f7ff fe1b 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80024c2:	bf00      	nop
 80024c4:	3728      	adds	r7, #40	; 0x28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	200003ec 	.word	0x200003ec
 80024d0:	40010400 	.word	0x40010400

080024d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08c      	sub	sp, #48	; 0x30
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 031c 	add.w	r3, r7, #28
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a47      	ldr	r2, [pc, #284]	; (8002610 <HAL_TIM_Base_MspInit+0x13c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d10e      	bne.n	8002514 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	61bb      	str	r3, [r7, #24]
 80024fa:	4b46      	ldr	r3, [pc, #280]	; (8002614 <HAL_TIM_Base_MspInit+0x140>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	4a45      	ldr	r2, [pc, #276]	; (8002614 <HAL_TIM_Base_MspInit+0x140>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6453      	str	r3, [r2, #68]	; 0x44
 8002506:	4b43      	ldr	r3, [pc, #268]	; (8002614 <HAL_TIM_Base_MspInit+0x140>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002512:	e079      	b.n	8002608 <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800251c:	d10e      	bne.n	800253c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	4b3c      	ldr	r3, [pc, #240]	; (8002614 <HAL_TIM_Base_MspInit+0x140>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	4a3b      	ldr	r2, [pc, #236]	; (8002614 <HAL_TIM_Base_MspInit+0x140>)
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	6413      	str	r3, [r2, #64]	; 0x40
 800252e:	4b39      	ldr	r3, [pc, #228]	; (8002614 <HAL_TIM_Base_MspInit+0x140>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	697b      	ldr	r3, [r7, #20]
}
 800253a:	e065      	b.n	8002608 <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM3)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a35      	ldr	r2, [pc, #212]	; (8002618 <HAL_TIM_Base_MspInit+0x144>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d10e      	bne.n	8002564 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	4b32      	ldr	r3, [pc, #200]	; (8002614 <HAL_TIM_Base_MspInit+0x140>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	4a31      	ldr	r2, [pc, #196]	; (8002614 <HAL_TIM_Base_MspInit+0x140>)
 8002550:	f043 0302 	orr.w	r3, r3, #2
 8002554:	6413      	str	r3, [r2, #64]	; 0x40
 8002556:	4b2f      	ldr	r3, [pc, #188]	; (8002614 <HAL_TIM_Base_MspInit+0x140>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	693b      	ldr	r3, [r7, #16]
}
 8002562:	e051      	b.n	8002608 <HAL_TIM_Base_MspInit+0x134>
  else if(tim_baseHandle->Instance==TIM8)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a2c      	ldr	r2, [pc, #176]	; (800261c <HAL_TIM_Base_MspInit+0x148>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d14c      	bne.n	8002608 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	4b28      	ldr	r3, [pc, #160]	; (8002614 <HAL_TIM_Base_MspInit+0x140>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	4a27      	ldr	r2, [pc, #156]	; (8002614 <HAL_TIM_Base_MspInit+0x140>)
 8002578:	f043 0302 	orr.w	r3, r3, #2
 800257c:	6453      	str	r3, [r2, #68]	; 0x44
 800257e:	4b25      	ldr	r3, [pc, #148]	; (8002614 <HAL_TIM_Base_MspInit+0x140>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	4b21      	ldr	r3, [pc, #132]	; (8002614 <HAL_TIM_Base_MspInit+0x140>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a20      	ldr	r2, [pc, #128]	; (8002614 <HAL_TIM_Base_MspInit+0x140>)
 8002594:	f043 0304 	orr.w	r3, r3, #4
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b1e      	ldr	r3, [pc, #120]	; (8002614 <HAL_TIM_Base_MspInit+0x140>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80025a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ac:	2302      	movs	r3, #2
 80025ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b4:	2300      	movs	r3, #0
 80025b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80025b8:	2303      	movs	r3, #3
 80025ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025bc:	f107 031c 	add.w	r3, r7, #28
 80025c0:	4619      	mov	r1, r3
 80025c2:	4817      	ldr	r0, [pc, #92]	; (8002620 <HAL_TIM_Base_MspInit+0x14c>)
 80025c4:	f001 fe78 	bl	80042b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80025c8:	2200      	movs	r2, #0
 80025ca:	2100      	movs	r1, #0
 80025cc:	202b      	movs	r0, #43	; 0x2b
 80025ce:	f001 faa4 	bl	8003b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80025d2:	202b      	movs	r0, #43	; 0x2b
 80025d4:	f001 fabd 	bl	8003b52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80025d8:	2200      	movs	r2, #0
 80025da:	2100      	movs	r1, #0
 80025dc:	202c      	movs	r0, #44	; 0x2c
 80025de:	f001 fa9c 	bl	8003b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80025e2:	202c      	movs	r0, #44	; 0x2c
 80025e4:	f001 fab5 	bl	8003b52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80025e8:	2200      	movs	r2, #0
 80025ea:	2100      	movs	r1, #0
 80025ec:	202d      	movs	r0, #45	; 0x2d
 80025ee:	f001 fa94 	bl	8003b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80025f2:	202d      	movs	r0, #45	; 0x2d
 80025f4:	f001 faad 	bl	8003b52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80025f8:	2200      	movs	r2, #0
 80025fa:	2100      	movs	r1, #0
 80025fc:	202e      	movs	r0, #46	; 0x2e
 80025fe:	f001 fa8c 	bl	8003b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002602:	202e      	movs	r0, #46	; 0x2e
 8002604:	f001 faa5 	bl	8003b52 <HAL_NVIC_EnableIRQ>
}
 8002608:	bf00      	nop
 800260a:	3730      	adds	r7, #48	; 0x30
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40010000 	.word	0x40010000
 8002614:	40023800 	.word	0x40023800
 8002618:	40000400 	.word	0x40000400
 800261c:	40010400 	.word	0x40010400
 8002620:	40020800 	.word	0x40020800

08002624 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	; 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a25      	ldr	r2, [pc, #148]	; (80026d8 <HAL_TIM_MspPostInit+0xb4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d11f      	bne.n	8002686 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	4b24      	ldr	r3, [pc, #144]	; (80026dc <HAL_TIM_MspPostInit+0xb8>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a23      	ldr	r2, [pc, #140]	; (80026dc <HAL_TIM_MspPostInit+0xb8>)
 8002650:	f043 0310 	orr.w	r3, r3, #16
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b21      	ldr	r3, [pc, #132]	; (80026dc <HAL_TIM_MspPostInit+0xb8>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f003 0310 	and.w	r3, r3, #16
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 8002662:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002668:	2302      	movs	r3, #2
 800266a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002674:	2301      	movs	r3, #1
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 8002678:	f107 0314 	add.w	r3, r7, #20
 800267c:	4619      	mov	r1, r3
 800267e:	4818      	ldr	r0, [pc, #96]	; (80026e0 <HAL_TIM_MspPostInit+0xbc>)
 8002680:	f001 fe1a 	bl	80042b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002684:	e023      	b.n	80026ce <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM2)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800268e:	d11e      	bne.n	80026ce <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <HAL_TIM_MspPostInit+0xb8>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	4a10      	ldr	r2, [pc, #64]	; (80026dc <HAL_TIM_MspPostInit+0xb8>)
 800269a:	f043 0302 	orr.w	r3, r3, #2
 800269e:	6313      	str	r3, [r2, #48]	; 0x30
 80026a0:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <HAL_TIM_MspPostInit+0xb8>)
 80026a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin;
 80026ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b2:	2302      	movs	r3, #2
 80026b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ba:	2300      	movs	r3, #0
 80026bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026be:	2301      	movs	r3, #1
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ClimbSpeed_TIM2_CH3_GPIO_Port, &GPIO_InitStruct);
 80026c2:	f107 0314 	add.w	r3, r7, #20
 80026c6:	4619      	mov	r1, r3
 80026c8:	4806      	ldr	r0, [pc, #24]	; (80026e4 <HAL_TIM_MspPostInit+0xc0>)
 80026ca:	f001 fdf5 	bl	80042b8 <HAL_GPIO_Init>
}
 80026ce:	bf00      	nop
 80026d0:	3728      	adds	r7, #40	; 0x28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40010000 	.word	0x40010000
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40020400 	.word	0x40020400

080026e8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026ec:	4b11      	ldr	r3, [pc, #68]	; (8002734 <MX_USART1_UART_Init+0x4c>)
 80026ee:	4a12      	ldr	r2, [pc, #72]	; (8002738 <MX_USART1_UART_Init+0x50>)
 80026f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <MX_USART1_UART_Init+0x4c>)
 80026f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026fa:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <MX_USART1_UART_Init+0x4c>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <MX_USART1_UART_Init+0x4c>)
 8002702:	2200      	movs	r2, #0
 8002704:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002706:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <MX_USART1_UART_Init+0x4c>)
 8002708:	2200      	movs	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800270c:	4b09      	ldr	r3, [pc, #36]	; (8002734 <MX_USART1_UART_Init+0x4c>)
 800270e:	220c      	movs	r2, #12
 8002710:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002712:	4b08      	ldr	r3, [pc, #32]	; (8002734 <MX_USART1_UART_Init+0x4c>)
 8002714:	2200      	movs	r2, #0
 8002716:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002718:	4b06      	ldr	r3, [pc, #24]	; (8002734 <MX_USART1_UART_Init+0x4c>)
 800271a:	2200      	movs	r2, #0
 800271c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800271e:	4805      	ldr	r0, [pc, #20]	; (8002734 <MX_USART1_UART_Init+0x4c>)
 8002720:	f004 fc9c 	bl	800705c <HAL_UART_Init>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800272a:	f7ff fce5 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	200006d0 	.word	0x200006d0
 8002738:	40011000 	.word	0x40011000

0800273c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <MX_USART3_UART_Init+0x4c>)
 8002742:	4a12      	ldr	r2, [pc, #72]	; (800278c <MX_USART3_UART_Init+0x50>)
 8002744:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <MX_USART3_UART_Init+0x4c>)
 8002748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800274c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800274e:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <MX_USART3_UART_Init+0x4c>)
 8002750:	2200      	movs	r2, #0
 8002752:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <MX_USART3_UART_Init+0x4c>)
 8002756:	2200      	movs	r2, #0
 8002758:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <MX_USART3_UART_Init+0x4c>)
 800275c:	2200      	movs	r2, #0
 800275e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002760:	4b09      	ldr	r3, [pc, #36]	; (8002788 <MX_USART3_UART_Init+0x4c>)
 8002762:	220c      	movs	r2, #12
 8002764:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002766:	4b08      	ldr	r3, [pc, #32]	; (8002788 <MX_USART3_UART_Init+0x4c>)
 8002768:	2200      	movs	r2, #0
 800276a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <MX_USART3_UART_Init+0x4c>)
 800276e:	2200      	movs	r2, #0
 8002770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002772:	4805      	ldr	r0, [pc, #20]	; (8002788 <MX_USART3_UART_Init+0x4c>)
 8002774:	f004 fc72 	bl	800705c <HAL_UART_Init>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800277e:	f7ff fcbb 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	200005cc 	.word	0x200005cc
 800278c:	40004800 	.word	0x40004800

08002790 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002794:	4b11      	ldr	r3, [pc, #68]	; (80027dc <MX_USART6_UART_Init+0x4c>)
 8002796:	4a12      	ldr	r2, [pc, #72]	; (80027e0 <MX_USART6_UART_Init+0x50>)
 8002798:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <MX_USART6_UART_Init+0x4c>)
 800279c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80027a2:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <MX_USART6_UART_Init+0x4c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <MX_USART6_UART_Init+0x4c>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80027ae:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <MX_USART6_UART_Init+0x4c>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80027b4:	4b09      	ldr	r3, [pc, #36]	; (80027dc <MX_USART6_UART_Init+0x4c>)
 80027b6:	220c      	movs	r2, #12
 80027b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <MX_USART6_UART_Init+0x4c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <MX_USART6_UART_Init+0x4c>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80027c6:	4805      	ldr	r0, [pc, #20]	; (80027dc <MX_USART6_UART_Init+0x4c>)
 80027c8:	f004 fc48 	bl	800705c <HAL_UART_Init>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80027d2:	f7ff fc91 	bl	80020f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000714 	.word	0x20000714
 80027e0:	40011400 	.word	0x40011400

080027e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08e      	sub	sp, #56	; 0x38
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a64      	ldr	r2, [pc, #400]	; (8002994 <HAL_UART_MspInit+0x1b0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d12d      	bne.n	8002862 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	623b      	str	r3, [r7, #32]
 800280a:	4b63      	ldr	r3, [pc, #396]	; (8002998 <HAL_UART_MspInit+0x1b4>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	4a62      	ldr	r2, [pc, #392]	; (8002998 <HAL_UART_MspInit+0x1b4>)
 8002810:	f043 0310 	orr.w	r3, r3, #16
 8002814:	6453      	str	r3, [r2, #68]	; 0x44
 8002816:	4b60      	ldr	r3, [pc, #384]	; (8002998 <HAL_UART_MspInit+0x1b4>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	623b      	str	r3, [r7, #32]
 8002820:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
 8002826:	4b5c      	ldr	r3, [pc, #368]	; (8002998 <HAL_UART_MspInit+0x1b4>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	4a5b      	ldr	r2, [pc, #364]	; (8002998 <HAL_UART_MspInit+0x1b4>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	6313      	str	r3, [r2, #48]	; 0x30
 8002832:	4b59      	ldr	r3, [pc, #356]	; (8002998 <HAL_UART_MspInit+0x1b4>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	61fb      	str	r3, [r7, #28]
 800283c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800283e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002844:	2302      	movs	r3, #2
 8002846:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002848:	2300      	movs	r3, #0
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284c:	2303      	movs	r3, #3
 800284e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002850:	2307      	movs	r3, #7
 8002852:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002858:	4619      	mov	r1, r3
 800285a:	4850      	ldr	r0, [pc, #320]	; (800299c <HAL_UART_MspInit+0x1b8>)
 800285c:	f001 fd2c 	bl	80042b8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002860:	e140      	b.n	8002ae4 <HAL_UART_MspInit+0x300>
  else if(uartHandle->Instance==USART3)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a4e      	ldr	r2, [pc, #312]	; (80029a0 <HAL_UART_MspInit+0x1bc>)
 8002868:	4293      	cmp	r3, r2
 800286a:	f040 80a5 	bne.w	80029b8 <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART3_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	4b49      	ldr	r3, [pc, #292]	; (8002998 <HAL_UART_MspInit+0x1b4>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a48      	ldr	r2, [pc, #288]	; (8002998 <HAL_UART_MspInit+0x1b4>)
 8002878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800287c:	6413      	str	r3, [r2, #64]	; 0x40
 800287e:	4b46      	ldr	r3, [pc, #280]	; (8002998 <HAL_UART_MspInit+0x1b4>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002886:	61bb      	str	r3, [r7, #24]
 8002888:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	4b42      	ldr	r3, [pc, #264]	; (8002998 <HAL_UART_MspInit+0x1b4>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4a41      	ldr	r2, [pc, #260]	; (8002998 <HAL_UART_MspInit+0x1b4>)
 8002894:	f043 0308 	orr.w	r3, r3, #8
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
 800289a:	4b3f      	ldr	r3, [pc, #252]	; (8002998 <HAL_UART_MspInit+0x1b4>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 80028a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b4:	2303      	movs	r3, #3
 80028b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028b8:	2307      	movs	r3, #7
 80028ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c0:	4619      	mov	r1, r3
 80028c2:	4838      	ldr	r0, [pc, #224]	; (80029a4 <HAL_UART_MspInit+0x1c0>)
 80028c4:	f001 fcf8 	bl	80042b8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80028c8:	4b37      	ldr	r3, [pc, #220]	; (80029a8 <HAL_UART_MspInit+0x1c4>)
 80028ca:	4a38      	ldr	r2, [pc, #224]	; (80029ac <HAL_UART_MspInit+0x1c8>)
 80028cc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80028ce:	4b36      	ldr	r3, [pc, #216]	; (80029a8 <HAL_UART_MspInit+0x1c4>)
 80028d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028d4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028d6:	4b34      	ldr	r3, [pc, #208]	; (80029a8 <HAL_UART_MspInit+0x1c4>)
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028dc:	4b32      	ldr	r3, [pc, #200]	; (80029a8 <HAL_UART_MspInit+0x1c4>)
 80028de:	2200      	movs	r2, #0
 80028e0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028e2:	4b31      	ldr	r3, [pc, #196]	; (80029a8 <HAL_UART_MspInit+0x1c4>)
 80028e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028e8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028ea:	4b2f      	ldr	r3, [pc, #188]	; (80029a8 <HAL_UART_MspInit+0x1c4>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028f0:	4b2d      	ldr	r3, [pc, #180]	; (80029a8 <HAL_UART_MspInit+0x1c4>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80028f6:	4b2c      	ldr	r3, [pc, #176]	; (80029a8 <HAL_UART_MspInit+0x1c4>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028fc:	4b2a      	ldr	r3, [pc, #168]	; (80029a8 <HAL_UART_MspInit+0x1c4>)
 80028fe:	2200      	movs	r2, #0
 8002900:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002902:	4b29      	ldr	r3, [pc, #164]	; (80029a8 <HAL_UART_MspInit+0x1c4>)
 8002904:	2200      	movs	r2, #0
 8002906:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002908:	4827      	ldr	r0, [pc, #156]	; (80029a8 <HAL_UART_MspInit+0x1c4>)
 800290a:	f001 f959 	bl	8003bc0 <HAL_DMA_Init>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <HAL_UART_MspInit+0x134>
      Error_Handler();
 8002914:	f7ff fbf0 	bl	80020f8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a23      	ldr	r2, [pc, #140]	; (80029a8 <HAL_UART_MspInit+0x1c4>)
 800291c:	639a      	str	r2, [r3, #56]	; 0x38
 800291e:	4a22      	ldr	r2, [pc, #136]	; (80029a8 <HAL_UART_MspInit+0x1c4>)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002924:	4b22      	ldr	r3, [pc, #136]	; (80029b0 <HAL_UART_MspInit+0x1cc>)
 8002926:	4a23      	ldr	r2, [pc, #140]	; (80029b4 <HAL_UART_MspInit+0x1d0>)
 8002928:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800292a:	4b21      	ldr	r3, [pc, #132]	; (80029b0 <HAL_UART_MspInit+0x1cc>)
 800292c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002930:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002932:	4b1f      	ldr	r3, [pc, #124]	; (80029b0 <HAL_UART_MspInit+0x1cc>)
 8002934:	2240      	movs	r2, #64	; 0x40
 8002936:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002938:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <HAL_UART_MspInit+0x1cc>)
 800293a:	2200      	movs	r2, #0
 800293c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800293e:	4b1c      	ldr	r3, [pc, #112]	; (80029b0 <HAL_UART_MspInit+0x1cc>)
 8002940:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002944:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002946:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <HAL_UART_MspInit+0x1cc>)
 8002948:	2200      	movs	r2, #0
 800294a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800294c:	4b18      	ldr	r3, [pc, #96]	; (80029b0 <HAL_UART_MspInit+0x1cc>)
 800294e:	2200      	movs	r2, #0
 8002950:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002952:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <HAL_UART_MspInit+0x1cc>)
 8002954:	2200      	movs	r2, #0
 8002956:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002958:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <HAL_UART_MspInit+0x1cc>)
 800295a:	2200      	movs	r2, #0
 800295c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800295e:	4b14      	ldr	r3, [pc, #80]	; (80029b0 <HAL_UART_MspInit+0x1cc>)
 8002960:	2200      	movs	r2, #0
 8002962:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002964:	4812      	ldr	r0, [pc, #72]	; (80029b0 <HAL_UART_MspInit+0x1cc>)
 8002966:	f001 f92b 	bl	8003bc0 <HAL_DMA_Init>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <HAL_UART_MspInit+0x190>
      Error_Handler();
 8002970:	f7ff fbc2 	bl	80020f8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a0e      	ldr	r2, [pc, #56]	; (80029b0 <HAL_UART_MspInit+0x1cc>)
 8002978:	635a      	str	r2, [r3, #52]	; 0x34
 800297a:	4a0d      	ldr	r2, [pc, #52]	; (80029b0 <HAL_UART_MspInit+0x1cc>)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002980:	2200      	movs	r2, #0
 8002982:	2100      	movs	r1, #0
 8002984:	2027      	movs	r0, #39	; 0x27
 8002986:	f001 f8c8 	bl	8003b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800298a:	2027      	movs	r0, #39	; 0x27
 800298c:	f001 f8e1 	bl	8003b52 <HAL_NVIC_EnableIRQ>
}
 8002990:	e0a8      	b.n	8002ae4 <HAL_UART_MspInit+0x300>
 8002992:	bf00      	nop
 8002994:	40011000 	.word	0x40011000
 8002998:	40023800 	.word	0x40023800
 800299c:	40020000 	.word	0x40020000
 80029a0:	40004800 	.word	0x40004800
 80029a4:	40020c00 	.word	0x40020c00
 80029a8:	2000056c 	.word	0x2000056c
 80029ac:	40026028 	.word	0x40026028
 80029b0:	20000610 	.word	0x20000610
 80029b4:	40026058 	.word	0x40026058
  else if(uartHandle->Instance==USART6)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a4b      	ldr	r2, [pc, #300]	; (8002aec <HAL_UART_MspInit+0x308>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	f040 8090 	bne.w	8002ae4 <HAL_UART_MspInit+0x300>
    __HAL_RCC_USART6_CLK_ENABLE();
 80029c4:	2300      	movs	r3, #0
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	4b49      	ldr	r3, [pc, #292]	; (8002af0 <HAL_UART_MspInit+0x30c>)
 80029ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029cc:	4a48      	ldr	r2, [pc, #288]	; (8002af0 <HAL_UART_MspInit+0x30c>)
 80029ce:	f043 0320 	orr.w	r3, r3, #32
 80029d2:	6453      	str	r3, [r2, #68]	; 0x44
 80029d4:	4b46      	ldr	r3, [pc, #280]	; (8002af0 <HAL_UART_MspInit+0x30c>)
 80029d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	4b42      	ldr	r3, [pc, #264]	; (8002af0 <HAL_UART_MspInit+0x30c>)
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	4a41      	ldr	r2, [pc, #260]	; (8002af0 <HAL_UART_MspInit+0x30c>)
 80029ea:	f043 0304 	orr.w	r3, r3, #4
 80029ee:	6313      	str	r3, [r2, #48]	; 0x30
 80029f0:	4b3f      	ldr	r3, [pc, #252]	; (8002af0 <HAL_UART_MspInit+0x30c>)
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029fc:	23c0      	movs	r3, #192	; 0xc0
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a00:	2302      	movs	r3, #2
 8002a02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002a0c:	2308      	movs	r3, #8
 8002a0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a14:	4619      	mov	r1, r3
 8002a16:	4837      	ldr	r0, [pc, #220]	; (8002af4 <HAL_UART_MspInit+0x310>)
 8002a18:	f001 fc4e 	bl	80042b8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002a1c:	4b36      	ldr	r3, [pc, #216]	; (8002af8 <HAL_UART_MspInit+0x314>)
 8002a1e:	4a37      	ldr	r2, [pc, #220]	; (8002afc <HAL_UART_MspInit+0x318>)
 8002a20:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002a22:	4b35      	ldr	r3, [pc, #212]	; (8002af8 <HAL_UART_MspInit+0x314>)
 8002a24:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002a28:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a2a:	4b33      	ldr	r3, [pc, #204]	; (8002af8 <HAL_UART_MspInit+0x314>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a30:	4b31      	ldr	r3, [pc, #196]	; (8002af8 <HAL_UART_MspInit+0x314>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a36:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <HAL_UART_MspInit+0x314>)
 8002a38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a3c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a3e:	4b2e      	ldr	r3, [pc, #184]	; (8002af8 <HAL_UART_MspInit+0x314>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a44:	4b2c      	ldr	r3, [pc, #176]	; (8002af8 <HAL_UART_MspInit+0x314>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002a4a:	4b2b      	ldr	r3, [pc, #172]	; (8002af8 <HAL_UART_MspInit+0x314>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a50:	4b29      	ldr	r3, [pc, #164]	; (8002af8 <HAL_UART_MspInit+0x314>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a56:	4b28      	ldr	r3, [pc, #160]	; (8002af8 <HAL_UART_MspInit+0x314>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002a5c:	4826      	ldr	r0, [pc, #152]	; (8002af8 <HAL_UART_MspInit+0x314>)
 8002a5e:	f001 f8af 	bl	8003bc0 <HAL_DMA_Init>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_UART_MspInit+0x288>
      Error_Handler();
 8002a68:	f7ff fb46 	bl	80020f8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a22      	ldr	r2, [pc, #136]	; (8002af8 <HAL_UART_MspInit+0x314>)
 8002a70:	639a      	str	r2, [r3, #56]	; 0x38
 8002a72:	4a21      	ldr	r2, [pc, #132]	; (8002af8 <HAL_UART_MspInit+0x314>)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002a78:	4b21      	ldr	r3, [pc, #132]	; (8002b00 <HAL_UART_MspInit+0x31c>)
 8002a7a:	4a22      	ldr	r2, [pc, #136]	; (8002b04 <HAL_UART_MspInit+0x320>)
 8002a7c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002a7e:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <HAL_UART_MspInit+0x31c>)
 8002a80:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002a84:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a86:	4b1e      	ldr	r3, [pc, #120]	; (8002b00 <HAL_UART_MspInit+0x31c>)
 8002a88:	2240      	movs	r2, #64	; 0x40
 8002a8a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a8c:	4b1c      	ldr	r3, [pc, #112]	; (8002b00 <HAL_UART_MspInit+0x31c>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a92:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <HAL_UART_MspInit+0x31c>)
 8002a94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a98:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a9a:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <HAL_UART_MspInit+0x31c>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aa0:	4b17      	ldr	r3, [pc, #92]	; (8002b00 <HAL_UART_MspInit+0x31c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002aa6:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <HAL_UART_MspInit+0x31c>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002aac:	4b14      	ldr	r3, [pc, #80]	; (8002b00 <HAL_UART_MspInit+0x31c>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ab2:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <HAL_UART_MspInit+0x31c>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002ab8:	4811      	ldr	r0, [pc, #68]	; (8002b00 <HAL_UART_MspInit+0x31c>)
 8002aba:	f001 f881 	bl	8003bc0 <HAL_DMA_Init>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_UART_MspInit+0x2e4>
      Error_Handler();
 8002ac4:	f7ff fb18 	bl	80020f8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a0d      	ldr	r2, [pc, #52]	; (8002b00 <HAL_UART_MspInit+0x31c>)
 8002acc:	635a      	str	r2, [r3, #52]	; 0x34
 8002ace:	4a0c      	ldr	r2, [pc, #48]	; (8002b00 <HAL_UART_MspInit+0x31c>)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	2047      	movs	r0, #71	; 0x47
 8002ada:	f001 f81e 	bl	8003b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002ade:	2047      	movs	r0, #71	; 0x47
 8002ae0:	f001 f837 	bl	8003b52 <HAL_NVIC_EnableIRQ>
}
 8002ae4:	bf00      	nop
 8002ae6:	3738      	adds	r7, #56	; 0x38
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40011400 	.word	0x40011400
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40020800 	.word	0x40020800
 8002af8:	2000050c 	.word	0x2000050c
 8002afc:	40026428 	.word	0x40026428
 8002b00:	20000670 	.word	0x20000670
 8002b04:	400264a0 	.word	0x400264a0

08002b08 <joystick_Init>:
static const float JoyTurnAngleDeadzone = 0.2;

static const float JoyLeftTurnAngle = 3.142;
static const float JoyRightTurnAngle = 0;

void joystick_Init(void){
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  memset(joyPosBuffer, 0, sizeof(joyPosBuffer));
 8002b0c:	2228      	movs	r2, #40	; 0x28
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4802      	ldr	r0, [pc, #8]	; (8002b1c <joystick_Init+0x14>)
 8002b12:	f005 f925 	bl	8007d60 <memset>
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	200000fc 	.word	0x200000fc

08002b20 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler: 



  ldr   sp, =_estack       /* set stack pointer */
 8002b20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b58 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b26:	e003      	b.n	8002b30 <LoopCopyDataInit>

08002b28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b28:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b2e:	3104      	adds	r1, #4

08002b30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b30:	480b      	ldr	r0, [pc, #44]	; (8002b60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b38:	d3f6      	bcc.n	8002b28 <CopyDataInit>
  ldr  r2, =_sbss
 8002b3a:	4a0b      	ldr	r2, [pc, #44]	; (8002b68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b3c:	e002      	b.n	8002b44 <LoopFillZerobss>

08002b3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b40:	f842 3b04 	str.w	r3, [r2], #4

08002b44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b44:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b48:	d3f9      	bcc.n	8002b3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b4a:	f7fe fef7 	bl	800193c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b4e:	f005 f8e3 	bl	8007d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b52:	f7fe ff09 	bl	8001968 <main>
  bx  lr    
 8002b56:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002b58:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002b5c:	08007db8 	.word	0x08007db8
  ldr  r0, =_sdata
 8002b60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b64:	200000b0 	.word	0x200000b0
  ldr  r2, =_sbss
 8002b68:	200000b0 	.word	0x200000b0
  ldr  r3, = _ebss
 8002b6c:	2000075c 	.word	0x2000075c

08002b70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b70:	e7fe      	b.n	8002b70 <ADC_IRQHandler>
	...

08002b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b78:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <HAL_Init+0x40>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a0d      	ldr	r2, [pc, #52]	; (8002bb4 <HAL_Init+0x40>)
 8002b7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b84:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <HAL_Init+0x40>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <HAL_Init+0x40>)
 8002b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b90:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <HAL_Init+0x40>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a07      	ldr	r2, [pc, #28]	; (8002bb4 <HAL_Init+0x40>)
 8002b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b9c:	2003      	movs	r0, #3
 8002b9e:	f000 ffb1 	bl	8003b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f000 f808 	bl	8002bb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ba8:	f7fe fdfc 	bl	80017a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40023c00 	.word	0x40023c00

08002bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bc0:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <HAL_InitTick+0x54>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <HAL_InitTick+0x58>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bce:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 ffc9 	bl	8003b6e <HAL_SYSTICK_Config>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e00e      	b.n	8002c04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b0f      	cmp	r3, #15
 8002bea:	d80a      	bhi.n	8002c02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bec:	2200      	movs	r2, #0
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bf4:	f000 ff91 	bl	8003b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bf8:	4a06      	ldr	r2, [pc, #24]	; (8002c14 <HAL_InitTick+0x5c>)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e000      	b.n	8002c04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20000034 	.word	0x20000034
 8002c10:	200000ac 	.word	0x200000ac
 8002c14:	200000a8 	.word	0x200000a8

08002c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_IncTick+0x20>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <HAL_IncTick+0x24>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4413      	add	r3, r2
 8002c28:	4a04      	ldr	r2, [pc, #16]	; (8002c3c <HAL_IncTick+0x24>)
 8002c2a:	6013      	str	r3, [r2, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	200000ac 	.word	0x200000ac
 8002c3c:	20000758 	.word	0x20000758

08002c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return uwTick;
 8002c44:	4b03      	ldr	r3, [pc, #12]	; (8002c54 <HAL_GetTick+0x14>)
 8002c46:	681b      	ldr	r3, [r3, #0]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	20000758 	.word	0x20000758

08002c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c60:	f7ff ffee 	bl	8002c40 <HAL_GetTick>
 8002c64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c70:	d005      	beq.n	8002c7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <HAL_Delay+0x44>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c7e:	bf00      	nop
 8002c80:	f7ff ffde 	bl	8002c40 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d8f7      	bhi.n	8002c80 <HAL_Delay+0x28>
  {
  }
}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	200000ac 	.word	0x200000ac

08002ca0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e0ed      	b.n	8002e8e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d102      	bne.n	8002cc4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7fe f9de 	bl	8001080 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0201 	orr.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cd4:	f7ff ffb4 	bl	8002c40 <HAL_GetTick>
 8002cd8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002cda:	e012      	b.n	8002d02 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cdc:	f7ff ffb0 	bl	8002c40 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b0a      	cmp	r3, #10
 8002ce8:	d90b      	bls.n	8002d02 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2205      	movs	r2, #5
 8002cfa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e0c5      	b.n	8002e8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0e5      	beq.n	8002cdc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0202 	bic.w	r2, r2, #2
 8002d1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d20:	f7ff ff8e 	bl	8002c40 <HAL_GetTick>
 8002d24:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d26:	e012      	b.n	8002d4e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d28:	f7ff ff8a 	bl	8002c40 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b0a      	cmp	r3, #10
 8002d34:	d90b      	bls.n	8002d4e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2205      	movs	r2, #5
 8002d46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e09f      	b.n	8002e8e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1e5      	bne.n	8002d28 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	7e1b      	ldrb	r3, [r3, #24]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d108      	bne.n	8002d76 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	e007      	b.n	8002d86 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	7e5b      	ldrb	r3, [r3, #25]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d108      	bne.n	8002da0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	e007      	b.n	8002db0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	7e9b      	ldrb	r3, [r3, #26]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d108      	bne.n	8002dca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0220 	orr.w	r2, r2, #32
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	e007      	b.n	8002dda <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0220 	bic.w	r2, r2, #32
 8002dd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	7edb      	ldrb	r3, [r3, #27]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d108      	bne.n	8002df4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0210 	bic.w	r2, r2, #16
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	e007      	b.n	8002e04 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0210 	orr.w	r2, r2, #16
 8002e02:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	7f1b      	ldrb	r3, [r3, #28]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d108      	bne.n	8002e1e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0208 	orr.w	r2, r2, #8
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	e007      	b.n	8002e2e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0208 	bic.w	r2, r2, #8
 8002e2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	7f5b      	ldrb	r3, [r3, #29]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d108      	bne.n	8002e48 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 0204 	orr.w	r2, r2, #4
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	e007      	b.n	8002e58 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0204 	bic.w	r2, r2, #4
 8002e56:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	ea42 0103 	orr.w	r1, r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	1e5a      	subs	r2, r3, #1
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eae:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002eb0:	7cfb      	ldrb	r3, [r7, #19]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d003      	beq.n	8002ebe <HAL_CAN_ConfigFilter+0x26>
 8002eb6:	7cfb      	ldrb	r3, [r7, #19]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	f040 80be 	bne.w	800303a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002ebe:	4b65      	ldr	r3, [pc, #404]	; (8003054 <HAL_CAN_ConfigFilter+0x1bc>)
 8002ec0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ec8:	f043 0201 	orr.w	r2, r3, #1
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ed8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	021b      	lsls	r3, r3, #8
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	f003 031f 	and.w	r3, r3, #31
 8002efe:	2201      	movs	r2, #1
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	401a      	ands	r2, r3
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d123      	bne.n	8002f68 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	401a      	ands	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002f42:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	3248      	adds	r2, #72	; 0x48
 8002f48:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f5c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002f5e:	6979      	ldr	r1, [r7, #20]
 8002f60:	3348      	adds	r3, #72	; 0x48
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	440b      	add	r3, r1
 8002f66:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d122      	bne.n	8002fb6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002f90:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	3248      	adds	r2, #72	; 0x48
 8002f96:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002faa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002fac:	6979      	ldr	r1, [r7, #20]
 8002fae:	3348      	adds	r3, #72	; 0x48
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	440b      	add	r3, r1
 8002fb4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	401a      	ands	r2, r3
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002fd0:	e007      	b.n	8002fe2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d109      	bne.n	8002ffe <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	401a      	ands	r2, r3
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002ffc:	e007      	b.n	800300e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	431a      	orrs	r2, r3
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d107      	bne.n	8003026 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	431a      	orrs	r2, r3
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800302c:	f023 0201 	bic.w	r2, r3, #1
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	e006      	b.n	8003048 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
  }
}
 8003048:	4618      	mov	r0, r3
 800304a:	371c      	adds	r7, #28
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	40006400 	.word	0x40006400

08003058 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b01      	cmp	r3, #1
 800306a:	d12e      	bne.n	80030ca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0201 	bic.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003084:	f7ff fddc 	bl	8002c40 <HAL_GetTick>
 8003088:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800308a:	e012      	b.n	80030b2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800308c:	f7ff fdd8 	bl	8002c40 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b0a      	cmp	r3, #10
 8003098:	d90b      	bls.n	80030b2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2205      	movs	r2, #5
 80030aa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e012      	b.n	80030d8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1e5      	bne.n	800308c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	e006      	b.n	80030d8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
  }
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b089      	sub	sp, #36	; 0x24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030f4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80030fe:	7ffb      	ldrb	r3, [r7, #31]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d003      	beq.n	800310c <HAL_CAN_AddTxMessage+0x2c>
 8003104:	7ffb      	ldrb	r3, [r7, #31]
 8003106:	2b02      	cmp	r3, #2
 8003108:	f040 80b8 	bne.w	800327c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10a      	bne.n	800312c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800311c:	2b00      	cmp	r3, #0
 800311e:	d105      	bne.n	800312c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 80a0 	beq.w	800326c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	0e1b      	lsrs	r3, r3, #24
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d907      	bls.n	800314c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e09e      	b.n	800328a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800314c:	2201      	movs	r2, #1
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	409a      	lsls	r2, r3
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10d      	bne.n	800317a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003168:	68f9      	ldr	r1, [r7, #12]
 800316a:	6809      	ldr	r1, [r1, #0]
 800316c:	431a      	orrs	r2, r3
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	3318      	adds	r3, #24
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	440b      	add	r3, r1
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	e00f      	b.n	800319a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003184:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800318a:	68f9      	ldr	r1, [r7, #12]
 800318c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800318e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	3318      	adds	r3, #24
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	440b      	add	r3, r1
 8003198:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6819      	ldr	r1, [r3, #0]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	691a      	ldr	r2, [r3, #16]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	3318      	adds	r3, #24
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	440b      	add	r3, r1
 80031aa:	3304      	adds	r3, #4
 80031ac:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	7d1b      	ldrb	r3, [r3, #20]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d111      	bne.n	80031da <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	3318      	adds	r3, #24
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	4413      	add	r3, r2
 80031c2:	3304      	adds	r3, #4
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	6811      	ldr	r1, [r2, #0]
 80031ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	3318      	adds	r3, #24
 80031d2:	011b      	lsls	r3, r3, #4
 80031d4:	440b      	add	r3, r1
 80031d6:	3304      	adds	r3, #4
 80031d8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3307      	adds	r3, #7
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	061a      	lsls	r2, r3, #24
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3306      	adds	r3, #6
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	041b      	lsls	r3, r3, #16
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3305      	adds	r3, #5
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	021b      	lsls	r3, r3, #8
 80031f4:	4313      	orrs	r3, r2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	3204      	adds	r2, #4
 80031fa:	7812      	ldrb	r2, [r2, #0]
 80031fc:	4610      	mov	r0, r2
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	6811      	ldr	r1, [r2, #0]
 8003202:	ea43 0200 	orr.w	r2, r3, r0
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	440b      	add	r3, r1
 800320c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003210:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3303      	adds	r3, #3
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	061a      	lsls	r2, r3, #24
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3302      	adds	r3, #2
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	041b      	lsls	r3, r3, #16
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3301      	adds	r3, #1
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	021b      	lsls	r3, r3, #8
 800322c:	4313      	orrs	r3, r2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	7812      	ldrb	r2, [r2, #0]
 8003232:	4610      	mov	r0, r2
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	6811      	ldr	r1, [r2, #0]
 8003238:	ea43 0200 	orr.w	r2, r3, r0
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	440b      	add	r3, r1
 8003242:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003246:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	3318      	adds	r3, #24
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	4413      	add	r3, r2
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	6811      	ldr	r1, [r2, #0]
 800325a:	f043 0201 	orr.w	r2, r3, #1
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	3318      	adds	r3, #24
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	440b      	add	r3, r1
 8003266:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	e00e      	b.n	800328a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e006      	b.n	800328a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
  }
}
 800328a:	4618      	mov	r0, r3
 800328c:	3724      	adds	r7, #36	; 0x24
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003296:	b480      	push	{r7}
 8003298:	b087      	sub	sp, #28
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032aa:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80032ac:	7dfb      	ldrb	r3, [r7, #23]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d003      	beq.n	80032ba <HAL_CAN_GetRxMessage+0x24>
 80032b2:	7dfb      	ldrb	r3, [r7, #23]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	f040 80f3 	bne.w	80034a0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10e      	bne.n	80032de <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d116      	bne.n	80032fc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e0e7      	b.n	80034ae <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d107      	bne.n	80032fc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0d8      	b.n	80034ae <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	331b      	adds	r3, #27
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	4413      	add	r3, r2
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0204 	and.w	r2, r3, #4
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10c      	bne.n	8003334 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	331b      	adds	r3, #27
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	4413      	add	r3, r2
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	0d5b      	lsrs	r3, r3, #21
 800332a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	e00b      	b.n	800334c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	331b      	adds	r3, #27
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	4413      	add	r3, r2
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	08db      	lsrs	r3, r3, #3
 8003344:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	331b      	adds	r3, #27
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	4413      	add	r3, r2
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0202 	and.w	r2, r3, #2
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	331b      	adds	r3, #27
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	4413      	add	r3, r2
 800336e:	3304      	adds	r3, #4
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 020f 	and.w	r2, r3, #15
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	331b      	adds	r3, #27
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	4413      	add	r3, r2
 8003386:	3304      	adds	r3, #4
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	0a1b      	lsrs	r3, r3, #8
 800338c:	b2da      	uxtb	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	331b      	adds	r3, #27
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	4413      	add	r3, r2
 800339e:	3304      	adds	r3, #4
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	0c1b      	lsrs	r3, r3, #16
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	0a1a      	lsrs	r2, r3, #8
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	3301      	adds	r3, #1
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	0c1a      	lsrs	r2, r3, #16
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	3302      	adds	r3, #2
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	0e1a      	lsrs	r2, r3, #24
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	3303      	adds	r3, #3
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	4413      	add	r3, r2
 8003418:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	3304      	adds	r3, #4
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	4413      	add	r3, r2
 8003430:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	0a1a      	lsrs	r2, r3, #8
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	3305      	adds	r3, #5
 800343c:	b2d2      	uxtb	r2, r2
 800343e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	4413      	add	r3, r2
 800344a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	0c1a      	lsrs	r2, r3, #16
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	3306      	adds	r3, #6
 8003456:	b2d2      	uxtb	r2, r2
 8003458:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	4413      	add	r3, r2
 8003464:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	0e1a      	lsrs	r2, r3, #24
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	3307      	adds	r3, #7
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d108      	bne.n	800348c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f042 0220 	orr.w	r2, r2, #32
 8003488:	60da      	str	r2, [r3, #12]
 800348a:	e007      	b.n	800349c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691a      	ldr	r2, [r3, #16]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0220 	orr.w	r2, r2, #32
 800349a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	e006      	b.n	80034ae <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
  }
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b085      	sub	sp, #20
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034ca:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80034cc:	7bfb      	ldrb	r3, [r7, #15]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d002      	beq.n	80034d8 <HAL_CAN_ActivateNotification+0x1e>
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d109      	bne.n	80034ec <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6959      	ldr	r1, [r3, #20]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	e006      	b.n	80034fa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
  }
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b08a      	sub	sp, #40	; 0x28
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800350e:	2300      	movs	r3, #0
 8003510:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d07c      	beq.n	8003646 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d023      	beq.n	800359e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2201      	movs	r2, #1
 800355c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f983 	bl	8003874 <HAL_CAN_TxMailbox0CompleteCallback>
 800356e:	e016      	b.n	800359e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	f003 0304 	and.w	r3, r3, #4
 8003576:	2b00      	cmp	r3, #0
 8003578:	d004      	beq.n	8003584 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
 8003582:	e00c      	b.n	800359e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d004      	beq.n	8003598 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
 8003596:	e002      	b.n	800359e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f989 	bl	80038b0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d024      	beq.n	80035f2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f963 	bl	8003888 <HAL_CAN_TxMailbox1CompleteCallback>
 80035c2:	e016      	b.n	80035f2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d004      	beq.n	80035d8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
 80035d6:	e00c      	b.n	80035f2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d004      	beq.n	80035ec <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ea:	e002      	b.n	80035f2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f969 	bl	80038c4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d024      	beq.n	8003646 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003604:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f943 	bl	800389c <HAL_CAN_TxMailbox2CompleteCallback>
 8003616:	e016      	b.n	8003646 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d004      	beq.n	800362c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
 800362a:	e00c      	b.n	8003646 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d004      	beq.n	8003640 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
 800363e:	e002      	b.n	8003646 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f949 	bl	80038d8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00c      	beq.n	800366a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f003 0310 	and.w	r3, r3, #16
 8003656:	2b00      	cmp	r3, #0
 8003658:	d007      	beq.n	800366a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003660:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2210      	movs	r2, #16
 8003668:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00b      	beq.n	800368c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d006      	beq.n	800368c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2208      	movs	r2, #8
 8003684:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f930 	bl	80038ec <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d009      	beq.n	80036aa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d002      	beq.n	80036aa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7fe fbf7 	bl	8001e98 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00c      	beq.n	80036ce <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f003 0310 	and.w	r3, r3, #16
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2210      	movs	r2, #16
 80036cc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	f003 0320 	and.w	r3, r3, #32
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00b      	beq.n	80036f0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d006      	beq.n	80036f0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2208      	movs	r2, #8
 80036e8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f912 	bl	8003914 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	f003 0310 	and.w	r3, r3, #16
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f8f9 	bl	8003900 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00b      	beq.n	8003730 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	2b00      	cmp	r3, #0
 8003720:	d006      	beq.n	8003730 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2210      	movs	r2, #16
 8003728:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f8fc 	bl	8003928 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00b      	beq.n	8003752 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b00      	cmp	r3, #0
 8003742:	d006      	beq.n	8003752 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2208      	movs	r2, #8
 800374a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f8f5 	bl	800393c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d07b      	beq.n	8003854 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b00      	cmp	r3, #0
 8003764:	d072      	beq.n	800384c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376c:	2b00      	cmp	r3, #0
 800376e:	d008      	beq.n	8003782 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	f043 0302 	orr.w	r3, r3, #2
 800379c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	f043 0304 	orr.w	r3, r3, #4
 80037b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d043      	beq.n	800384c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d03e      	beq.n	800384c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037d4:	2b60      	cmp	r3, #96	; 0x60
 80037d6:	d02b      	beq.n	8003830 <HAL_CAN_IRQHandler+0x32a>
 80037d8:	2b60      	cmp	r3, #96	; 0x60
 80037da:	d82e      	bhi.n	800383a <HAL_CAN_IRQHandler+0x334>
 80037dc:	2b50      	cmp	r3, #80	; 0x50
 80037de:	d022      	beq.n	8003826 <HAL_CAN_IRQHandler+0x320>
 80037e0:	2b50      	cmp	r3, #80	; 0x50
 80037e2:	d82a      	bhi.n	800383a <HAL_CAN_IRQHandler+0x334>
 80037e4:	2b40      	cmp	r3, #64	; 0x40
 80037e6:	d019      	beq.n	800381c <HAL_CAN_IRQHandler+0x316>
 80037e8:	2b40      	cmp	r3, #64	; 0x40
 80037ea:	d826      	bhi.n	800383a <HAL_CAN_IRQHandler+0x334>
 80037ec:	2b30      	cmp	r3, #48	; 0x30
 80037ee:	d010      	beq.n	8003812 <HAL_CAN_IRQHandler+0x30c>
 80037f0:	2b30      	cmp	r3, #48	; 0x30
 80037f2:	d822      	bhi.n	800383a <HAL_CAN_IRQHandler+0x334>
 80037f4:	2b10      	cmp	r3, #16
 80037f6:	d002      	beq.n	80037fe <HAL_CAN_IRQHandler+0x2f8>
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d005      	beq.n	8003808 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80037fc:	e01d      	b.n	800383a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	f043 0308 	orr.w	r3, r3, #8
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003806:	e019      	b.n	800383c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	f043 0310 	orr.w	r3, r3, #16
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003810:	e014      	b.n	800383c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	f043 0320 	orr.w	r3, r3, #32
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800381a:	e00f      	b.n	800383c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003824:	e00a      	b.n	800383c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800382c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800382e:	e005      	b.n	800383c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003836:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003838:	e000      	b.n	800383c <HAL_CAN_IRQHandler+0x336>
            break;
 800383a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699a      	ldr	r2, [r3, #24]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800384a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2204      	movs	r2, #4
 8003852:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	2b00      	cmp	r3, #0
 8003858:	d008      	beq.n	800386c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	431a      	orrs	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f872 	bl	8003950 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800386c:	bf00      	nop
 800386e:	3728      	adds	r7, #40	; 0x28
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003980:	4013      	ands	r3, r2
 8003982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800398c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003996:	4a04      	ldr	r2, [pc, #16]	; (80039a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	60d3      	str	r3, [r2, #12]
}
 800399c:	bf00      	nop
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	e000ed00 	.word	0xe000ed00

080039ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039b0:	4b04      	ldr	r3, [pc, #16]	; (80039c4 <__NVIC_GetPriorityGrouping+0x18>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	0a1b      	lsrs	r3, r3, #8
 80039b6:	f003 0307 	and.w	r3, r3, #7
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	db0b      	blt.n	80039f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	f003 021f 	and.w	r2, r3, #31
 80039e0:	4907      	ldr	r1, [pc, #28]	; (8003a00 <__NVIC_EnableIRQ+0x38>)
 80039e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	2001      	movs	r0, #1
 80039ea:	fa00 f202 	lsl.w	r2, r0, r2
 80039ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	e000e100 	.word	0xe000e100

08003a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	6039      	str	r1, [r7, #0]
 8003a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	db0a      	blt.n	8003a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	490c      	ldr	r1, [pc, #48]	; (8003a50 <__NVIC_SetPriority+0x4c>)
 8003a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a22:	0112      	lsls	r2, r2, #4
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	440b      	add	r3, r1
 8003a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a2c:	e00a      	b.n	8003a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	4908      	ldr	r1, [pc, #32]	; (8003a54 <__NVIC_SetPriority+0x50>)
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	3b04      	subs	r3, #4
 8003a3c:	0112      	lsls	r2, r2, #4
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	440b      	add	r3, r1
 8003a42:	761a      	strb	r2, [r3, #24]
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	e000e100 	.word	0xe000e100
 8003a54:	e000ed00 	.word	0xe000ed00

08003a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b089      	sub	sp, #36	; 0x24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f1c3 0307 	rsb	r3, r3, #7
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	bf28      	it	cs
 8003a76:	2304      	movcs	r3, #4
 8003a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	2b06      	cmp	r3, #6
 8003a80:	d902      	bls.n	8003a88 <NVIC_EncodePriority+0x30>
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	3b03      	subs	r3, #3
 8003a86:	e000      	b.n	8003a8a <NVIC_EncodePriority+0x32>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43da      	mvns	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	401a      	ands	r2, r3
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aaa:	43d9      	mvns	r1, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab0:	4313      	orrs	r3, r2
         );
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3724      	adds	r7, #36	; 0x24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
	...

08003ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ad0:	d301      	bcc.n	8003ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e00f      	b.n	8003af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ad6:	4a0a      	ldr	r2, [pc, #40]	; (8003b00 <SysTick_Config+0x40>)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ade:	210f      	movs	r1, #15
 8003ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ae4:	f7ff ff8e 	bl	8003a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <SysTick_Config+0x40>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aee:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <SysTick_Config+0x40>)
 8003af0:	2207      	movs	r2, #7
 8003af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	e000e010 	.word	0xe000e010

08003b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7ff ff29 	bl	8003964 <__NVIC_SetPriorityGrouping>
}
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b086      	sub	sp, #24
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	4603      	mov	r3, r0
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	607a      	str	r2, [r7, #4]
 8003b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b2c:	f7ff ff3e 	bl	80039ac <__NVIC_GetPriorityGrouping>
 8003b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	68b9      	ldr	r1, [r7, #8]
 8003b36:	6978      	ldr	r0, [r7, #20]
 8003b38:	f7ff ff8e 	bl	8003a58 <NVIC_EncodePriority>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b42:	4611      	mov	r1, r2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff ff5d 	bl	8003a04 <__NVIC_SetPriority>
}
 8003b4a:	bf00      	nop
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	4603      	mov	r3, r0
 8003b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff ff31 	bl	80039c8 <__NVIC_EnableIRQ>
}
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff ffa2 	bl	8003ac0 <SysTick_Config>
 8003b7c:	4603      	mov	r3, r0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
	...

08003b88 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d106      	bne.n	8003ba4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a08      	ldr	r2, [pc, #32]	; (8003bbc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003b9c:	f043 0304 	orr.w	r3, r3, #4
 8003ba0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8003ba2:	e005      	b.n	8003bb0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a04      	ldr	r2, [pc, #16]	; (8003bbc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003baa:	f023 0304 	bic.w	r3, r3, #4
 8003bae:	6013      	str	r3, [r2, #0]
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	e000e010 	.word	0xe000e010

08003bc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003bcc:	f7ff f838 	bl	8002c40 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e099      	b.n	8003d10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0201 	bic.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bfc:	e00f      	b.n	8003c1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bfe:	f7ff f81f 	bl	8002c40 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b05      	cmp	r3, #5
 8003c0a:	d908      	bls.n	8003c1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2203      	movs	r2, #3
 8003c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e078      	b.n	8003d10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e8      	bne.n	8003bfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	4b38      	ldr	r3, [pc, #224]	; (8003d18 <HAL_DMA_Init+0x158>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d107      	bne.n	8003c88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c80:	4313      	orrs	r3, r2
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f023 0307 	bic.w	r3, r3, #7
 8003c9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d117      	bne.n	8003ce2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00e      	beq.n	8003ce2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fa7b 	bl	80041c0 <DMA_CheckFifoParam>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d008      	beq.n	8003ce2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2240      	movs	r2, #64	; 0x40
 8003cd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e016      	b.n	8003d10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fa32 	bl	8004154 <DMA_CalcBaseAndBitshift>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf8:	223f      	movs	r2, #63	; 0x3f
 8003cfa:	409a      	lsls	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	f010803f 	.word	0xf010803f

08003d1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d28:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003d2a:	f7fe ff89 	bl	8002c40 <HAL_GetTick>
 8003d2e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d008      	beq.n	8003d4e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2280      	movs	r2, #128	; 0x80
 8003d40:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e052      	b.n	8003df4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0216 	bic.w	r2, r2, #22
 8003d5c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695a      	ldr	r2, [r3, #20]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d6c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d103      	bne.n	8003d7e <HAL_DMA_Abort+0x62>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d007      	beq.n	8003d8e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0208 	bic.w	r2, r2, #8
 8003d8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0201 	bic.w	r2, r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d9e:	e013      	b.n	8003dc8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003da0:	f7fe ff4e 	bl	8002c40 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b05      	cmp	r3, #5
 8003dac:	d90c      	bls.n	8003dc8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2220      	movs	r2, #32
 8003db2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2203      	movs	r2, #3
 8003db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e015      	b.n	8003df4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1e4      	bne.n	8003da0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dda:	223f      	movs	r2, #63	; 0x3f
 8003ddc:	409a      	lsls	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d004      	beq.n	8003e1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2280      	movs	r2, #128	; 0x80
 8003e14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e00c      	b.n	8003e34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2205      	movs	r2, #5
 8003e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0201 	bic.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e4c:	4b92      	ldr	r3, [pc, #584]	; (8004098 <HAL_DMA_IRQHandler+0x258>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a92      	ldr	r2, [pc, #584]	; (800409c <HAL_DMA_IRQHandler+0x25c>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	0a9b      	lsrs	r3, r3, #10
 8003e58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6a:	2208      	movs	r2, #8
 8003e6c:	409a      	lsls	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4013      	ands	r3, r2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d01a      	beq.n	8003eac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0304 	and.w	r3, r3, #4
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d013      	beq.n	8003eac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0204 	bic.w	r2, r2, #4
 8003e92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e98:	2208      	movs	r2, #8
 8003e9a:	409a      	lsls	r2, r3
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea4:	f043 0201 	orr.w	r2, r3, #1
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d012      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00b      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ece:	2201      	movs	r2, #1
 8003ed0:	409a      	lsls	r2, r3
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eda:	f043 0202 	orr.w	r2, r3, #2
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee6:	2204      	movs	r2, #4
 8003ee8:	409a      	lsls	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4013      	ands	r3, r2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d012      	beq.n	8003f18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00b      	beq.n	8003f18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f04:	2204      	movs	r2, #4
 8003f06:	409a      	lsls	r2, r3
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f10:	f043 0204 	orr.w	r2, r3, #4
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1c:	2210      	movs	r2, #16
 8003f1e:	409a      	lsls	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d043      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d03c      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3a:	2210      	movs	r2, #16
 8003f3c:	409a      	lsls	r2, r3
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d018      	beq.n	8003f82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d108      	bne.n	8003f70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d024      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	4798      	blx	r3
 8003f6e:	e01f      	b.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01b      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	4798      	blx	r3
 8003f80:	e016      	b.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d107      	bne.n	8003fa0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0208 	bic.w	r2, r2, #8
 8003f9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	409a      	lsls	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 808e 	beq.w	80040de <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 8086 	beq.w	80040de <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	409a      	lsls	r2, r3
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b05      	cmp	r3, #5
 8003fe8:	d136      	bne.n	8004058 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0216 	bic.w	r2, r2, #22
 8003ff8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695a      	ldr	r2, [r3, #20]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004008:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	d103      	bne.n	800401a <HAL_DMA_IRQHandler+0x1da>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004016:	2b00      	cmp	r3, #0
 8004018:	d007      	beq.n	800402a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0208 	bic.w	r2, r2, #8
 8004028:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402e:	223f      	movs	r2, #63	; 0x3f
 8004030:	409a      	lsls	r2, r3
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404a:	2b00      	cmp	r3, #0
 800404c:	d07d      	beq.n	800414a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	4798      	blx	r3
        }
        return;
 8004056:	e078      	b.n	800414a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d01c      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d108      	bne.n	8004086 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004078:	2b00      	cmp	r3, #0
 800407a:	d030      	beq.n	80040de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	4798      	blx	r3
 8004084:	e02b      	b.n	80040de <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408a:	2b00      	cmp	r3, #0
 800408c:	d027      	beq.n	80040de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	4798      	blx	r3
 8004096:	e022      	b.n	80040de <HAL_DMA_IRQHandler+0x29e>
 8004098:	20000034 	.word	0x20000034
 800409c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10f      	bne.n	80040ce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0210 	bic.w	r2, r2, #16
 80040bc:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d032      	beq.n	800414c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d022      	beq.n	8004138 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2205      	movs	r2, #5
 80040f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0201 	bic.w	r2, r2, #1
 8004108:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	3301      	adds	r3, #1
 800410e:	60bb      	str	r3, [r7, #8]
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	429a      	cmp	r2, r3
 8004114:	d307      	bcc.n	8004126 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1f2      	bne.n	800410a <HAL_DMA_IRQHandler+0x2ca>
 8004124:	e000      	b.n	8004128 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004126:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	4798      	blx	r3
 8004148:	e000      	b.n	800414c <HAL_DMA_IRQHandler+0x30c>
        return;
 800414a:	bf00      	nop
    }
  }
}
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop

08004154 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	3b10      	subs	r3, #16
 8004164:	4a14      	ldr	r2, [pc, #80]	; (80041b8 <DMA_CalcBaseAndBitshift+0x64>)
 8004166:	fba2 2303 	umull	r2, r3, r2, r3
 800416a:	091b      	lsrs	r3, r3, #4
 800416c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800416e:	4a13      	ldr	r2, [pc, #76]	; (80041bc <DMA_CalcBaseAndBitshift+0x68>)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2b03      	cmp	r3, #3
 8004180:	d909      	bls.n	8004196 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800418a:	f023 0303 	bic.w	r3, r3, #3
 800418e:	1d1a      	adds	r2, r3, #4
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	659a      	str	r2, [r3, #88]	; 0x58
 8004194:	e007      	b.n	80041a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800419e:	f023 0303 	bic.w	r3, r3, #3
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	aaaaaaab 	.word	0xaaaaaaab
 80041bc:	08007da0 	.word	0x08007da0

080041c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d11f      	bne.n	800421a <DMA_CheckFifoParam+0x5a>
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d856      	bhi.n	800428e <DMA_CheckFifoParam+0xce>
 80041e0:	a201      	add	r2, pc, #4	; (adr r2, 80041e8 <DMA_CheckFifoParam+0x28>)
 80041e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e6:	bf00      	nop
 80041e8:	080041f9 	.word	0x080041f9
 80041ec:	0800420b 	.word	0x0800420b
 80041f0:	080041f9 	.word	0x080041f9
 80041f4:	0800428f 	.word	0x0800428f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d046      	beq.n	8004292 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004208:	e043      	b.n	8004292 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004212:	d140      	bne.n	8004296 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004218:	e03d      	b.n	8004296 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004222:	d121      	bne.n	8004268 <DMA_CheckFifoParam+0xa8>
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b03      	cmp	r3, #3
 8004228:	d837      	bhi.n	800429a <DMA_CheckFifoParam+0xda>
 800422a:	a201      	add	r2, pc, #4	; (adr r2, 8004230 <DMA_CheckFifoParam+0x70>)
 800422c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004230:	08004241 	.word	0x08004241
 8004234:	08004247 	.word	0x08004247
 8004238:	08004241 	.word	0x08004241
 800423c:	08004259 	.word	0x08004259
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	73fb      	strb	r3, [r7, #15]
      break;
 8004244:	e030      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d025      	beq.n	800429e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004256:	e022      	b.n	800429e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004260:	d11f      	bne.n	80042a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004266:	e01c      	b.n	80042a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b02      	cmp	r3, #2
 800426c:	d903      	bls.n	8004276 <DMA_CheckFifoParam+0xb6>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b03      	cmp	r3, #3
 8004272:	d003      	beq.n	800427c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004274:	e018      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	73fb      	strb	r3, [r7, #15]
      break;
 800427a:	e015      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00e      	beq.n	80042a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
      break;
 800428c:	e00b      	b.n	80042a6 <DMA_CheckFifoParam+0xe6>
      break;
 800428e:	bf00      	nop
 8004290:	e00a      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
      break;
 8004292:	bf00      	nop
 8004294:	e008      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
      break;
 8004296:	bf00      	nop
 8004298:	e006      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
      break;
 800429a:	bf00      	nop
 800429c:	e004      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
      break;
 800429e:	bf00      	nop
 80042a0:	e002      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80042a2:	bf00      	nop
 80042a4:	e000      	b.n	80042a8 <DMA_CheckFifoParam+0xe8>
      break;
 80042a6:	bf00      	nop
    }
  } 
  
  return status; 
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop

080042b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b089      	sub	sp, #36	; 0x24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042c6:	2300      	movs	r3, #0
 80042c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
 80042d2:	e177      	b.n	80045c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042d4:	2201      	movs	r2, #1
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4013      	ands	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	f040 8166 	bne.w	80045be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d005      	beq.n	800430a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004306:	2b02      	cmp	r3, #2
 8004308:	d130      	bne.n	800436c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	2203      	movs	r2, #3
 8004316:	fa02 f303 	lsl.w	r3, r2, r3
 800431a:	43db      	mvns	r3, r3
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4013      	ands	r3, r2
 8004320:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	4313      	orrs	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004340:	2201      	movs	r2, #1
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	43db      	mvns	r3, r3
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4013      	ands	r3, r2
 800434e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	091b      	lsrs	r3, r3, #4
 8004356:	f003 0201 	and.w	r2, r3, #1
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	4313      	orrs	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f003 0303 	and.w	r3, r3, #3
 8004374:	2b03      	cmp	r3, #3
 8004376:	d017      	beq.n	80043a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	2203      	movs	r2, #3
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	43db      	mvns	r3, r3
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	4013      	ands	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	4313      	orrs	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f003 0303 	and.w	r3, r3, #3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d123      	bne.n	80043fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	08da      	lsrs	r2, r3, #3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3208      	adds	r2, #8
 80043bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	220f      	movs	r2, #15
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	43db      	mvns	r3, r3
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	4013      	ands	r3, r2
 80043d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	fa02 f303 	lsl.w	r3, r2, r3
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	08da      	lsrs	r2, r3, #3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3208      	adds	r2, #8
 80043f6:	69b9      	ldr	r1, [r7, #24]
 80043f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	2203      	movs	r2, #3
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4013      	ands	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 0203 	and.w	r2, r3, #3
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	4313      	orrs	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 80c0 	beq.w	80045be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	4b66      	ldr	r3, [pc, #408]	; (80045dc <HAL_GPIO_Init+0x324>)
 8004444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004446:	4a65      	ldr	r2, [pc, #404]	; (80045dc <HAL_GPIO_Init+0x324>)
 8004448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800444c:	6453      	str	r3, [r2, #68]	; 0x44
 800444e:	4b63      	ldr	r3, [pc, #396]	; (80045dc <HAL_GPIO_Init+0x324>)
 8004450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800445a:	4a61      	ldr	r2, [pc, #388]	; (80045e0 <HAL_GPIO_Init+0x328>)
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	089b      	lsrs	r3, r3, #2
 8004460:	3302      	adds	r3, #2
 8004462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	220f      	movs	r2, #15
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	43db      	mvns	r3, r3
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	4013      	ands	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a58      	ldr	r2, [pc, #352]	; (80045e4 <HAL_GPIO_Init+0x32c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d037      	beq.n	80044f6 <HAL_GPIO_Init+0x23e>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a57      	ldr	r2, [pc, #348]	; (80045e8 <HAL_GPIO_Init+0x330>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d031      	beq.n	80044f2 <HAL_GPIO_Init+0x23a>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a56      	ldr	r2, [pc, #344]	; (80045ec <HAL_GPIO_Init+0x334>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d02b      	beq.n	80044ee <HAL_GPIO_Init+0x236>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a55      	ldr	r2, [pc, #340]	; (80045f0 <HAL_GPIO_Init+0x338>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d025      	beq.n	80044ea <HAL_GPIO_Init+0x232>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a54      	ldr	r2, [pc, #336]	; (80045f4 <HAL_GPIO_Init+0x33c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d01f      	beq.n	80044e6 <HAL_GPIO_Init+0x22e>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a53      	ldr	r2, [pc, #332]	; (80045f8 <HAL_GPIO_Init+0x340>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d019      	beq.n	80044e2 <HAL_GPIO_Init+0x22a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a52      	ldr	r2, [pc, #328]	; (80045fc <HAL_GPIO_Init+0x344>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d013      	beq.n	80044de <HAL_GPIO_Init+0x226>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a51      	ldr	r2, [pc, #324]	; (8004600 <HAL_GPIO_Init+0x348>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00d      	beq.n	80044da <HAL_GPIO_Init+0x222>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a50      	ldr	r2, [pc, #320]	; (8004604 <HAL_GPIO_Init+0x34c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d007      	beq.n	80044d6 <HAL_GPIO_Init+0x21e>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a4f      	ldr	r2, [pc, #316]	; (8004608 <HAL_GPIO_Init+0x350>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d101      	bne.n	80044d2 <HAL_GPIO_Init+0x21a>
 80044ce:	2309      	movs	r3, #9
 80044d0:	e012      	b.n	80044f8 <HAL_GPIO_Init+0x240>
 80044d2:	230a      	movs	r3, #10
 80044d4:	e010      	b.n	80044f8 <HAL_GPIO_Init+0x240>
 80044d6:	2308      	movs	r3, #8
 80044d8:	e00e      	b.n	80044f8 <HAL_GPIO_Init+0x240>
 80044da:	2307      	movs	r3, #7
 80044dc:	e00c      	b.n	80044f8 <HAL_GPIO_Init+0x240>
 80044de:	2306      	movs	r3, #6
 80044e0:	e00a      	b.n	80044f8 <HAL_GPIO_Init+0x240>
 80044e2:	2305      	movs	r3, #5
 80044e4:	e008      	b.n	80044f8 <HAL_GPIO_Init+0x240>
 80044e6:	2304      	movs	r3, #4
 80044e8:	e006      	b.n	80044f8 <HAL_GPIO_Init+0x240>
 80044ea:	2303      	movs	r3, #3
 80044ec:	e004      	b.n	80044f8 <HAL_GPIO_Init+0x240>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e002      	b.n	80044f8 <HAL_GPIO_Init+0x240>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <HAL_GPIO_Init+0x240>
 80044f6:	2300      	movs	r3, #0
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	f002 0203 	and.w	r2, r2, #3
 80044fe:	0092      	lsls	r2, r2, #2
 8004500:	4093      	lsls	r3, r2
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	4313      	orrs	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004508:	4935      	ldr	r1, [pc, #212]	; (80045e0 <HAL_GPIO_Init+0x328>)
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	089b      	lsrs	r3, r3, #2
 800450e:	3302      	adds	r3, #2
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004516:	4b3d      	ldr	r3, [pc, #244]	; (800460c <HAL_GPIO_Init+0x354>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	43db      	mvns	r3, r3
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	4013      	ands	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	4313      	orrs	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800453a:	4a34      	ldr	r2, [pc, #208]	; (800460c <HAL_GPIO_Init+0x354>)
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004540:	4b32      	ldr	r3, [pc, #200]	; (800460c <HAL_GPIO_Init+0x354>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	43db      	mvns	r3, r3
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	4013      	ands	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	4313      	orrs	r3, r2
 8004562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004564:	4a29      	ldr	r2, [pc, #164]	; (800460c <HAL_GPIO_Init+0x354>)
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800456a:	4b28      	ldr	r3, [pc, #160]	; (800460c <HAL_GPIO_Init+0x354>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	43db      	mvns	r3, r3
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	4013      	ands	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800458e:	4a1f      	ldr	r2, [pc, #124]	; (800460c <HAL_GPIO_Init+0x354>)
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004594:	4b1d      	ldr	r3, [pc, #116]	; (800460c <HAL_GPIO_Init+0x354>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	43db      	mvns	r3, r3
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	4013      	ands	r3, r2
 80045a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045b8:	4a14      	ldr	r2, [pc, #80]	; (800460c <HAL_GPIO_Init+0x354>)
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	3301      	adds	r3, #1
 80045c2:	61fb      	str	r3, [r7, #28]
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	2b0f      	cmp	r3, #15
 80045c8:	f67f ae84 	bls.w	80042d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045cc:	bf00      	nop
 80045ce:	bf00      	nop
 80045d0:	3724      	adds	r7, #36	; 0x24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	40023800 	.word	0x40023800
 80045e0:	40013800 	.word	0x40013800
 80045e4:	40020000 	.word	0x40020000
 80045e8:	40020400 	.word	0x40020400
 80045ec:	40020800 	.word	0x40020800
 80045f0:	40020c00 	.word	0x40020c00
 80045f4:	40021000 	.word	0x40021000
 80045f8:	40021400 	.word	0x40021400
 80045fc:	40021800 	.word	0x40021800
 8004600:	40021c00 	.word	0x40021c00
 8004604:	40022000 	.word	0x40022000
 8004608:	40022400 	.word	0x40022400
 800460c:	40013c00 	.word	0x40013c00

08004610 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	887b      	ldrh	r3, [r7, #2]
 8004622:	4013      	ands	r3, r2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004628:	2301      	movs	r3, #1
 800462a:	73fb      	strb	r3, [r7, #15]
 800462c:	e001      	b.n	8004632 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800462e:	2300      	movs	r3, #0
 8004630:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004632:	7bfb      	ldrb	r3, [r7, #15]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	807b      	strh	r3, [r7, #2]
 800464c:	4613      	mov	r3, r2
 800464e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004650:	787b      	ldrb	r3, [r7, #1]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004656:	887a      	ldrh	r2, [r7, #2]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800465c:	e003      	b.n	8004666 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800465e:	887b      	ldrh	r3, [r7, #2]
 8004660:	041a      	lsls	r2, r3, #16
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	619a      	str	r2, [r3, #24]
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
	...

08004674 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	4603      	mov	r3, r0
 800467c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800467e:	4b08      	ldr	r3, [pc, #32]	; (80046a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004680:	695a      	ldr	r2, [r3, #20]
 8004682:	88fb      	ldrh	r3, [r7, #6]
 8004684:	4013      	ands	r3, r2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d006      	beq.n	8004698 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800468a:	4a05      	ldr	r2, [pc, #20]	; (80046a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800468c:	88fb      	ldrh	r3, [r7, #6]
 800468e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004690:	88fb      	ldrh	r3, [r7, #6]
 8004692:	4618      	mov	r0, r3
 8004694:	f7fd fb3e 	bl	8001d14 <HAL_GPIO_EXTI_Callback>
  }
}
 8004698:	bf00      	nop
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40013c00 	.word	0x40013c00

080046a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e12b      	b.n	800490e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d106      	bne.n	80046d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fc ffa2 	bl	8001614 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2224      	movs	r2, #36	; 0x24
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0201 	bic.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004706:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004708:	f000 fe26 	bl	8005358 <HAL_RCC_GetPCLK1Freq>
 800470c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	4a81      	ldr	r2, [pc, #516]	; (8004918 <HAL_I2C_Init+0x274>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d807      	bhi.n	8004728 <HAL_I2C_Init+0x84>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4a80      	ldr	r2, [pc, #512]	; (800491c <HAL_I2C_Init+0x278>)
 800471c:	4293      	cmp	r3, r2
 800471e:	bf94      	ite	ls
 8004720:	2301      	movls	r3, #1
 8004722:	2300      	movhi	r3, #0
 8004724:	b2db      	uxtb	r3, r3
 8004726:	e006      	b.n	8004736 <HAL_I2C_Init+0x92>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4a7d      	ldr	r2, [pc, #500]	; (8004920 <HAL_I2C_Init+0x27c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	bf94      	ite	ls
 8004730:	2301      	movls	r3, #1
 8004732:	2300      	movhi	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e0e7      	b.n	800490e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4a78      	ldr	r2, [pc, #480]	; (8004924 <HAL_I2C_Init+0x280>)
 8004742:	fba2 2303 	umull	r2, r3, r2, r3
 8004746:	0c9b      	lsrs	r3, r3, #18
 8004748:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	430a      	orrs	r2, r1
 800475c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	4a6a      	ldr	r2, [pc, #424]	; (8004918 <HAL_I2C_Init+0x274>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d802      	bhi.n	8004778 <HAL_I2C_Init+0xd4>
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	3301      	adds	r3, #1
 8004776:	e009      	b.n	800478c <HAL_I2C_Init+0xe8>
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800477e:	fb02 f303 	mul.w	r3, r2, r3
 8004782:	4a69      	ldr	r2, [pc, #420]	; (8004928 <HAL_I2C_Init+0x284>)
 8004784:	fba2 2303 	umull	r2, r3, r2, r3
 8004788:	099b      	lsrs	r3, r3, #6
 800478a:	3301      	adds	r3, #1
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6812      	ldr	r2, [r2, #0]
 8004790:	430b      	orrs	r3, r1
 8004792:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800479e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	495c      	ldr	r1, [pc, #368]	; (8004918 <HAL_I2C_Init+0x274>)
 80047a8:	428b      	cmp	r3, r1
 80047aa:	d819      	bhi.n	80047e0 <HAL_I2C_Init+0x13c>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	1e59      	subs	r1, r3, #1
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80047ba:	1c59      	adds	r1, r3, #1
 80047bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80047c0:	400b      	ands	r3, r1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <HAL_I2C_Init+0x138>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	1e59      	subs	r1, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80047d4:	3301      	adds	r3, #1
 80047d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047da:	e051      	b.n	8004880 <HAL_I2C_Init+0x1dc>
 80047dc:	2304      	movs	r3, #4
 80047de:	e04f      	b.n	8004880 <HAL_I2C_Init+0x1dc>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d111      	bne.n	800480c <HAL_I2C_Init+0x168>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	1e58      	subs	r0, r3, #1
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6859      	ldr	r1, [r3, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	440b      	add	r3, r1
 80047f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047fa:	3301      	adds	r3, #1
 80047fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004800:	2b00      	cmp	r3, #0
 8004802:	bf0c      	ite	eq
 8004804:	2301      	moveq	r3, #1
 8004806:	2300      	movne	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	e012      	b.n	8004832 <HAL_I2C_Init+0x18e>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	1e58      	subs	r0, r3, #1
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6859      	ldr	r1, [r3, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	0099      	lsls	r1, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004822:	3301      	adds	r3, #1
 8004824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004828:	2b00      	cmp	r3, #0
 800482a:	bf0c      	ite	eq
 800482c:	2301      	moveq	r3, #1
 800482e:	2300      	movne	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <HAL_I2C_Init+0x196>
 8004836:	2301      	movs	r3, #1
 8004838:	e022      	b.n	8004880 <HAL_I2C_Init+0x1dc>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10e      	bne.n	8004860 <HAL_I2C_Init+0x1bc>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	1e58      	subs	r0, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6859      	ldr	r1, [r3, #4]
 800484a:	460b      	mov	r3, r1
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	440b      	add	r3, r1
 8004850:	fbb0 f3f3 	udiv	r3, r0, r3
 8004854:	3301      	adds	r3, #1
 8004856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800485a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800485e:	e00f      	b.n	8004880 <HAL_I2C_Init+0x1dc>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	1e58      	subs	r0, r3, #1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6859      	ldr	r1, [r3, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	440b      	add	r3, r1
 800486e:	0099      	lsls	r1, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	fbb0 f3f3 	udiv	r3, r0, r3
 8004876:	3301      	adds	r3, #1
 8004878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800487c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004880:	6879      	ldr	r1, [r7, #4]
 8004882:	6809      	ldr	r1, [r1, #0]
 8004884:	4313      	orrs	r3, r2
 8004886:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69da      	ldr	r2, [r3, #28]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6911      	ldr	r1, [r2, #16]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	68d2      	ldr	r2, [r2, #12]
 80048ba:	4311      	orrs	r1, r2
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6812      	ldr	r2, [r2, #0]
 80048c0:	430b      	orrs	r3, r1
 80048c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	695a      	ldr	r2, [r3, #20]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	000186a0 	.word	0x000186a0
 800491c:	001e847f 	.word	0x001e847f
 8004920:	003d08ff 	.word	0x003d08ff
 8004924:	431bde83 	.word	0x431bde83
 8004928:	10624dd3 	.word	0x10624dd3

0800492c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b20      	cmp	r3, #32
 8004940:	d129      	bne.n	8004996 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2224      	movs	r2, #36	; 0x24
 8004946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0201 	bic.w	r2, r2, #1
 8004958:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0210 	bic.w	r2, r2, #16
 8004968:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0201 	orr.w	r2, r2, #1
 8004988:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	e000      	b.n	8004998 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004996:	2302      	movs	r3, #2
  }
}
 8004998:	4618      	mov	r0, r3
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b20      	cmp	r3, #32
 80049bc:	d12a      	bne.n	8004a14 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2224      	movs	r2, #36	; 0x24
 80049c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 0201 	bic.w	r2, r2, #1
 80049d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80049de:	89fb      	ldrh	r3, [r7, #14]
 80049e0:	f023 030f 	bic.w	r3, r3, #15
 80049e4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	89fb      	ldrh	r3, [r7, #14]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	89fa      	ldrh	r2, [r7, #14]
 80049f6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0201 	orr.w	r2, r2, #1
 8004a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	e000      	b.n	8004a16 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004a14:	2302      	movs	r3, #2
  }
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
	...

08004a24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a2e:	2300      	movs	r3, #0
 8004a30:	603b      	str	r3, [r7, #0]
 8004a32:	4b20      	ldr	r3, [pc, #128]	; (8004ab4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	4a1f      	ldr	r2, [pc, #124]	; (8004ab4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a3e:	4b1d      	ldr	r3, [pc, #116]	; (8004ab4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a46:	603b      	str	r3, [r7, #0]
 8004a48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a4a:	4b1b      	ldr	r3, [pc, #108]	; (8004ab8 <HAL_PWREx_EnableOverDrive+0x94>)
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a50:	f7fe f8f6 	bl	8002c40 <HAL_GetTick>
 8004a54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a56:	e009      	b.n	8004a6c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a58:	f7fe f8f2 	bl	8002c40 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a66:	d901      	bls.n	8004a6c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e01f      	b.n	8004aac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a6c:	4b13      	ldr	r3, [pc, #76]	; (8004abc <HAL_PWREx_EnableOverDrive+0x98>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a78:	d1ee      	bne.n	8004a58 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004a7a:	4b11      	ldr	r3, [pc, #68]	; (8004ac0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a80:	f7fe f8de 	bl	8002c40 <HAL_GetTick>
 8004a84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a86:	e009      	b.n	8004a9c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a88:	f7fe f8da 	bl	8002c40 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a96:	d901      	bls.n	8004a9c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e007      	b.n	8004aac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a9c:	4b07      	ldr	r3, [pc, #28]	; (8004abc <HAL_PWREx_EnableOverDrive+0x98>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aa8:	d1ee      	bne.n	8004a88 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	420e0040 	.word	0x420e0040
 8004abc:	40007000 	.word	0x40007000
 8004ac0:	420e0044 	.word	0x420e0044

08004ac4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e264      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d075      	beq.n	8004bce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ae2:	4ba3      	ldr	r3, [pc, #652]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 030c 	and.w	r3, r3, #12
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d00c      	beq.n	8004b08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aee:	4ba0      	ldr	r3, [pc, #640]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d112      	bne.n	8004b20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004afa:	4b9d      	ldr	r3, [pc, #628]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b06:	d10b      	bne.n	8004b20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b08:	4b99      	ldr	r3, [pc, #612]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d05b      	beq.n	8004bcc <HAL_RCC_OscConfig+0x108>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d157      	bne.n	8004bcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e23f      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b28:	d106      	bne.n	8004b38 <HAL_RCC_OscConfig+0x74>
 8004b2a:	4b91      	ldr	r3, [pc, #580]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a90      	ldr	r2, [pc, #576]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	e01d      	b.n	8004b74 <HAL_RCC_OscConfig+0xb0>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b40:	d10c      	bne.n	8004b5c <HAL_RCC_OscConfig+0x98>
 8004b42:	4b8b      	ldr	r3, [pc, #556]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a8a      	ldr	r2, [pc, #552]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	4b88      	ldr	r3, [pc, #544]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a87      	ldr	r2, [pc, #540]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	e00b      	b.n	8004b74 <HAL_RCC_OscConfig+0xb0>
 8004b5c:	4b84      	ldr	r3, [pc, #528]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a83      	ldr	r2, [pc, #524]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	4b81      	ldr	r3, [pc, #516]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a80      	ldr	r2, [pc, #512]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d013      	beq.n	8004ba4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b7c:	f7fe f860 	bl	8002c40 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b84:	f7fe f85c 	bl	8002c40 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b64      	cmp	r3, #100	; 0x64
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e204      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b96:	4b76      	ldr	r3, [pc, #472]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f0      	beq.n	8004b84 <HAL_RCC_OscConfig+0xc0>
 8004ba2:	e014      	b.n	8004bce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba4:	f7fe f84c 	bl	8002c40 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bac:	f7fe f848 	bl	8002c40 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b64      	cmp	r3, #100	; 0x64
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e1f0      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bbe:	4b6c      	ldr	r3, [pc, #432]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1f0      	bne.n	8004bac <HAL_RCC_OscConfig+0xe8>
 8004bca:	e000      	b.n	8004bce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d063      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bda:	4b65      	ldr	r3, [pc, #404]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 030c 	and.w	r3, r3, #12
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00b      	beq.n	8004bfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004be6:	4b62      	ldr	r3, [pc, #392]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d11c      	bne.n	8004c2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bf2:	4b5f      	ldr	r3, [pc, #380]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d116      	bne.n	8004c2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bfe:	4b5c      	ldr	r3, [pc, #368]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d005      	beq.n	8004c16 <HAL_RCC_OscConfig+0x152>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d001      	beq.n	8004c16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e1c4      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c16:	4b56      	ldr	r3, [pc, #344]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	4952      	ldr	r1, [pc, #328]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c2a:	e03a      	b.n	8004ca2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d020      	beq.n	8004c76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c34:	4b4f      	ldr	r3, [pc, #316]	; (8004d74 <HAL_RCC_OscConfig+0x2b0>)
 8004c36:	2201      	movs	r2, #1
 8004c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3a:	f7fe f801 	bl	8002c40 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c42:	f7fd fffd 	bl	8002c40 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e1a5      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c54:	4b46      	ldr	r3, [pc, #280]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0f0      	beq.n	8004c42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c60:	4b43      	ldr	r3, [pc, #268]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	4940      	ldr	r1, [pc, #256]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	600b      	str	r3, [r1, #0]
 8004c74:	e015      	b.n	8004ca2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c76:	4b3f      	ldr	r3, [pc, #252]	; (8004d74 <HAL_RCC_OscConfig+0x2b0>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7c:	f7fd ffe0 	bl	8002c40 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c84:	f7fd ffdc 	bl	8002c40 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e184      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c96:	4b36      	ldr	r3, [pc, #216]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1f0      	bne.n	8004c84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d030      	beq.n	8004d10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d016      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cb6:	4b30      	ldr	r3, [pc, #192]	; (8004d78 <HAL_RCC_OscConfig+0x2b4>)
 8004cb8:	2201      	movs	r2, #1
 8004cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cbc:	f7fd ffc0 	bl	8002c40 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cc4:	f7fd ffbc 	bl	8002c40 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e164      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cd6:	4b26      	ldr	r3, [pc, #152]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f0      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x200>
 8004ce2:	e015      	b.n	8004d10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ce4:	4b24      	ldr	r3, [pc, #144]	; (8004d78 <HAL_RCC_OscConfig+0x2b4>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cea:	f7fd ffa9 	bl	8002c40 <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf0:	e008      	b.n	8004d04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cf2:	f7fd ffa5 	bl	8002c40 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e14d      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d04:	4b1a      	ldr	r3, [pc, #104]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1f0      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 80a0 	beq.w	8004e5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d22:	4b13      	ldr	r3, [pc, #76]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10f      	bne.n	8004d4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	4b0f      	ldr	r3, [pc, #60]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	4a0e      	ldr	r2, [pc, #56]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d3e:	4b0c      	ldr	r3, [pc, #48]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d46:	60bb      	str	r3, [r7, #8]
 8004d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d4e:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <HAL_RCC_OscConfig+0x2b8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d121      	bne.n	8004d9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d5a:	4b08      	ldr	r3, [pc, #32]	; (8004d7c <HAL_RCC_OscConfig+0x2b8>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a07      	ldr	r2, [pc, #28]	; (8004d7c <HAL_RCC_OscConfig+0x2b8>)
 8004d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d66:	f7fd ff6b 	bl	8002c40 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d6c:	e011      	b.n	8004d92 <HAL_RCC_OscConfig+0x2ce>
 8004d6e:	bf00      	nop
 8004d70:	40023800 	.word	0x40023800
 8004d74:	42470000 	.word	0x42470000
 8004d78:	42470e80 	.word	0x42470e80
 8004d7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d80:	f7fd ff5e 	bl	8002c40 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e106      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d92:	4b85      	ldr	r3, [pc, #532]	; (8004fa8 <HAL_RCC_OscConfig+0x4e4>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0f0      	beq.n	8004d80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d106      	bne.n	8004db4 <HAL_RCC_OscConfig+0x2f0>
 8004da6:	4b81      	ldr	r3, [pc, #516]	; (8004fac <HAL_RCC_OscConfig+0x4e8>)
 8004da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004daa:	4a80      	ldr	r2, [pc, #512]	; (8004fac <HAL_RCC_OscConfig+0x4e8>)
 8004dac:	f043 0301 	orr.w	r3, r3, #1
 8004db0:	6713      	str	r3, [r2, #112]	; 0x70
 8004db2:	e01c      	b.n	8004dee <HAL_RCC_OscConfig+0x32a>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	2b05      	cmp	r3, #5
 8004dba:	d10c      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x312>
 8004dbc:	4b7b      	ldr	r3, [pc, #492]	; (8004fac <HAL_RCC_OscConfig+0x4e8>)
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	4a7a      	ldr	r2, [pc, #488]	; (8004fac <HAL_RCC_OscConfig+0x4e8>)
 8004dc2:	f043 0304 	orr.w	r3, r3, #4
 8004dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc8:	4b78      	ldr	r3, [pc, #480]	; (8004fac <HAL_RCC_OscConfig+0x4e8>)
 8004dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dcc:	4a77      	ldr	r2, [pc, #476]	; (8004fac <HAL_RCC_OscConfig+0x4e8>)
 8004dce:	f043 0301 	orr.w	r3, r3, #1
 8004dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8004dd4:	e00b      	b.n	8004dee <HAL_RCC_OscConfig+0x32a>
 8004dd6:	4b75      	ldr	r3, [pc, #468]	; (8004fac <HAL_RCC_OscConfig+0x4e8>)
 8004dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dda:	4a74      	ldr	r2, [pc, #464]	; (8004fac <HAL_RCC_OscConfig+0x4e8>)
 8004ddc:	f023 0301 	bic.w	r3, r3, #1
 8004de0:	6713      	str	r3, [r2, #112]	; 0x70
 8004de2:	4b72      	ldr	r3, [pc, #456]	; (8004fac <HAL_RCC_OscConfig+0x4e8>)
 8004de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de6:	4a71      	ldr	r2, [pc, #452]	; (8004fac <HAL_RCC_OscConfig+0x4e8>)
 8004de8:	f023 0304 	bic.w	r3, r3, #4
 8004dec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d015      	beq.n	8004e22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df6:	f7fd ff23 	bl	8002c40 <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfc:	e00a      	b.n	8004e14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dfe:	f7fd ff1f 	bl	8002c40 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e0c5      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e14:	4b65      	ldr	r3, [pc, #404]	; (8004fac <HAL_RCC_OscConfig+0x4e8>)
 8004e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0ee      	beq.n	8004dfe <HAL_RCC_OscConfig+0x33a>
 8004e20:	e014      	b.n	8004e4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e22:	f7fd ff0d 	bl	8002c40 <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e28:	e00a      	b.n	8004e40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e2a:	f7fd ff09 	bl	8002c40 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d901      	bls.n	8004e40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e0af      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e40:	4b5a      	ldr	r3, [pc, #360]	; (8004fac <HAL_RCC_OscConfig+0x4e8>)
 8004e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1ee      	bne.n	8004e2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e4c:	7dfb      	ldrb	r3, [r7, #23]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d105      	bne.n	8004e5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e52:	4b56      	ldr	r3, [pc, #344]	; (8004fac <HAL_RCC_OscConfig+0x4e8>)
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	4a55      	ldr	r2, [pc, #340]	; (8004fac <HAL_RCC_OscConfig+0x4e8>)
 8004e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 809b 	beq.w	8004f9e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e68:	4b50      	ldr	r3, [pc, #320]	; (8004fac <HAL_RCC_OscConfig+0x4e8>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 030c 	and.w	r3, r3, #12
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d05c      	beq.n	8004f2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d141      	bne.n	8004f00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7c:	4b4c      	ldr	r3, [pc, #304]	; (8004fb0 <HAL_RCC_OscConfig+0x4ec>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e82:	f7fd fedd 	bl	8002c40 <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e8a:	f7fd fed9 	bl	8002c40 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e081      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9c:	4b43      	ldr	r3, [pc, #268]	; (8004fac <HAL_RCC_OscConfig+0x4e8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1f0      	bne.n	8004e8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	69da      	ldr	r2, [r3, #28]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	019b      	lsls	r3, r3, #6
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebe:	085b      	lsrs	r3, r3, #1
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	041b      	lsls	r3, r3, #16
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eca:	061b      	lsls	r3, r3, #24
 8004ecc:	4937      	ldr	r1, [pc, #220]	; (8004fac <HAL_RCC_OscConfig+0x4e8>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ed2:	4b37      	ldr	r3, [pc, #220]	; (8004fb0 <HAL_RCC_OscConfig+0x4ec>)
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed8:	f7fd feb2 	bl	8002c40 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ee0:	f7fd feae 	bl	8002c40 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e056      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef2:	4b2e      	ldr	r3, [pc, #184]	; (8004fac <HAL_RCC_OscConfig+0x4e8>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0f0      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x41c>
 8004efe:	e04e      	b.n	8004f9e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f00:	4b2b      	ldr	r3, [pc, #172]	; (8004fb0 <HAL_RCC_OscConfig+0x4ec>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f06:	f7fd fe9b 	bl	8002c40 <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f0e:	f7fd fe97 	bl	8002c40 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e03f      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f20:	4b22      	ldr	r3, [pc, #136]	; (8004fac <HAL_RCC_OscConfig+0x4e8>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1f0      	bne.n	8004f0e <HAL_RCC_OscConfig+0x44a>
 8004f2c:	e037      	b.n	8004f9e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e032      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f3a:	4b1c      	ldr	r3, [pc, #112]	; (8004fac <HAL_RCC_OscConfig+0x4e8>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d028      	beq.n	8004f9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d121      	bne.n	8004f9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d11a      	bne.n	8004f9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f70:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d111      	bne.n	8004f9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f80:	085b      	lsrs	r3, r3, #1
 8004f82:	3b01      	subs	r3, #1
 8004f84:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d107      	bne.n	8004f9a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f94:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d001      	beq.n	8004f9e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40007000 	.word	0x40007000
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	42470060 	.word	0x42470060

08004fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0cc      	b.n	8005162 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fc8:	4b68      	ldr	r3, [pc, #416]	; (800516c <HAL_RCC_ClockConfig+0x1b8>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d90c      	bls.n	8004ff0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd6:	4b65      	ldr	r3, [pc, #404]	; (800516c <HAL_RCC_ClockConfig+0x1b8>)
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fde:	4b63      	ldr	r3, [pc, #396]	; (800516c <HAL_RCC_ClockConfig+0x1b8>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d001      	beq.n	8004ff0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e0b8      	b.n	8005162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d020      	beq.n	800503e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b00      	cmp	r3, #0
 8005006:	d005      	beq.n	8005014 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005008:	4b59      	ldr	r3, [pc, #356]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	4a58      	ldr	r2, [pc, #352]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005012:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0308 	and.w	r3, r3, #8
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005020:	4b53      	ldr	r3, [pc, #332]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	4a52      	ldr	r2, [pc, #328]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800502a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800502c:	4b50      	ldr	r3, [pc, #320]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	494d      	ldr	r1, [pc, #308]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 800503a:	4313      	orrs	r3, r2
 800503c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d044      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d107      	bne.n	8005062 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005052:	4b47      	ldr	r3, [pc, #284]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d119      	bne.n	8005092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e07f      	b.n	8005162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b02      	cmp	r3, #2
 8005068:	d003      	beq.n	8005072 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800506e:	2b03      	cmp	r3, #3
 8005070:	d107      	bne.n	8005082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005072:	4b3f      	ldr	r3, [pc, #252]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d109      	bne.n	8005092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e06f      	b.n	8005162 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005082:	4b3b      	ldr	r3, [pc, #236]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e067      	b.n	8005162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005092:	4b37      	ldr	r3, [pc, #220]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f023 0203 	bic.w	r2, r3, #3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	4934      	ldr	r1, [pc, #208]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050a4:	f7fd fdcc 	bl	8002c40 <HAL_GetTick>
 80050a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050aa:	e00a      	b.n	80050c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ac:	f7fd fdc8 	bl	8002c40 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e04f      	b.n	8005162 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c2:	4b2b      	ldr	r3, [pc, #172]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 020c 	and.w	r2, r3, #12
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d1eb      	bne.n	80050ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050d4:	4b25      	ldr	r3, [pc, #148]	; (800516c <HAL_RCC_ClockConfig+0x1b8>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 030f 	and.w	r3, r3, #15
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d20c      	bcs.n	80050fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050e2:	4b22      	ldr	r3, [pc, #136]	; (800516c <HAL_RCC_ClockConfig+0x1b8>)
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ea:	4b20      	ldr	r3, [pc, #128]	; (800516c <HAL_RCC_ClockConfig+0x1b8>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 030f 	and.w	r3, r3, #15
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d001      	beq.n	80050fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e032      	b.n	8005162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b00      	cmp	r3, #0
 8005106:	d008      	beq.n	800511a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005108:	4b19      	ldr	r3, [pc, #100]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	4916      	ldr	r1, [pc, #88]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 8005116:	4313      	orrs	r3, r2
 8005118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0308 	and.w	r3, r3, #8
 8005122:	2b00      	cmp	r3, #0
 8005124:	d009      	beq.n	800513a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005126:	4b12      	ldr	r3, [pc, #72]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	490e      	ldr	r1, [pc, #56]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 8005136:	4313      	orrs	r3, r2
 8005138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800513a:	f000 f821 	bl	8005180 <HAL_RCC_GetSysClockFreq>
 800513e:	4602      	mov	r2, r0
 8005140:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	091b      	lsrs	r3, r3, #4
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	490a      	ldr	r1, [pc, #40]	; (8005174 <HAL_RCC_ClockConfig+0x1c0>)
 800514c:	5ccb      	ldrb	r3, [r1, r3]
 800514e:	fa22 f303 	lsr.w	r3, r2, r3
 8005152:	4a09      	ldr	r2, [pc, #36]	; (8005178 <HAL_RCC_ClockConfig+0x1c4>)
 8005154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005156:	4b09      	ldr	r3, [pc, #36]	; (800517c <HAL_RCC_ClockConfig+0x1c8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f7fd fd2c 	bl	8002bb8 <HAL_InitTick>

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	40023c00 	.word	0x40023c00
 8005170:	40023800 	.word	0x40023800
 8005174:	08007d88 	.word	0x08007d88
 8005178:	20000034 	.word	0x20000034
 800517c:	200000a8 	.word	0x200000a8

08005180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005180:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005184:	b084      	sub	sp, #16
 8005186:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	607b      	str	r3, [r7, #4]
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	2300      	movs	r3, #0
 8005192:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005198:	4b67      	ldr	r3, [pc, #412]	; (8005338 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f003 030c 	and.w	r3, r3, #12
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d00d      	beq.n	80051c0 <HAL_RCC_GetSysClockFreq+0x40>
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	f200 80bd 	bhi.w	8005324 <HAL_RCC_GetSysClockFreq+0x1a4>
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <HAL_RCC_GetSysClockFreq+0x34>
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d003      	beq.n	80051ba <HAL_RCC_GetSysClockFreq+0x3a>
 80051b2:	e0b7      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051b4:	4b61      	ldr	r3, [pc, #388]	; (800533c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80051b6:	60bb      	str	r3, [r7, #8]
       break;
 80051b8:	e0b7      	b.n	800532a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051ba:	4b60      	ldr	r3, [pc, #384]	; (800533c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80051bc:	60bb      	str	r3, [r7, #8]
      break;
 80051be:	e0b4      	b.n	800532a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051c0:	4b5d      	ldr	r3, [pc, #372]	; (8005338 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051ca:	4b5b      	ldr	r3, [pc, #364]	; (8005338 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d04d      	beq.n	8005272 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051d6:	4b58      	ldr	r3, [pc, #352]	; (8005338 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	099b      	lsrs	r3, r3, #6
 80051dc:	461a      	mov	r2, r3
 80051de:	f04f 0300 	mov.w	r3, #0
 80051e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051e6:	f04f 0100 	mov.w	r1, #0
 80051ea:	ea02 0800 	and.w	r8, r2, r0
 80051ee:	ea03 0901 	and.w	r9, r3, r1
 80051f2:	4640      	mov	r0, r8
 80051f4:	4649      	mov	r1, r9
 80051f6:	f04f 0200 	mov.w	r2, #0
 80051fa:	f04f 0300 	mov.w	r3, #0
 80051fe:	014b      	lsls	r3, r1, #5
 8005200:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005204:	0142      	lsls	r2, r0, #5
 8005206:	4610      	mov	r0, r2
 8005208:	4619      	mov	r1, r3
 800520a:	ebb0 0008 	subs.w	r0, r0, r8
 800520e:	eb61 0109 	sbc.w	r1, r1, r9
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	f04f 0300 	mov.w	r3, #0
 800521a:	018b      	lsls	r3, r1, #6
 800521c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005220:	0182      	lsls	r2, r0, #6
 8005222:	1a12      	subs	r2, r2, r0
 8005224:	eb63 0301 	sbc.w	r3, r3, r1
 8005228:	f04f 0000 	mov.w	r0, #0
 800522c:	f04f 0100 	mov.w	r1, #0
 8005230:	00d9      	lsls	r1, r3, #3
 8005232:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005236:	00d0      	lsls	r0, r2, #3
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	eb12 0208 	adds.w	r2, r2, r8
 8005240:	eb43 0309 	adc.w	r3, r3, r9
 8005244:	f04f 0000 	mov.w	r0, #0
 8005248:	f04f 0100 	mov.w	r1, #0
 800524c:	0299      	lsls	r1, r3, #10
 800524e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005252:	0290      	lsls	r0, r2, #10
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4610      	mov	r0, r2
 800525a:	4619      	mov	r1, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	461a      	mov	r2, r3
 8005260:	f04f 0300 	mov.w	r3, #0
 8005264:	f7fb fc2a 	bl	8000abc <__aeabi_uldivmod>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4613      	mov	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	e04a      	b.n	8005308 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005272:	4b31      	ldr	r3, [pc, #196]	; (8005338 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	099b      	lsrs	r3, r3, #6
 8005278:	461a      	mov	r2, r3
 800527a:	f04f 0300 	mov.w	r3, #0
 800527e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005282:	f04f 0100 	mov.w	r1, #0
 8005286:	ea02 0400 	and.w	r4, r2, r0
 800528a:	ea03 0501 	and.w	r5, r3, r1
 800528e:	4620      	mov	r0, r4
 8005290:	4629      	mov	r1, r5
 8005292:	f04f 0200 	mov.w	r2, #0
 8005296:	f04f 0300 	mov.w	r3, #0
 800529a:	014b      	lsls	r3, r1, #5
 800529c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80052a0:	0142      	lsls	r2, r0, #5
 80052a2:	4610      	mov	r0, r2
 80052a4:	4619      	mov	r1, r3
 80052a6:	1b00      	subs	r0, r0, r4
 80052a8:	eb61 0105 	sbc.w	r1, r1, r5
 80052ac:	f04f 0200 	mov.w	r2, #0
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	018b      	lsls	r3, r1, #6
 80052b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052ba:	0182      	lsls	r2, r0, #6
 80052bc:	1a12      	subs	r2, r2, r0
 80052be:	eb63 0301 	sbc.w	r3, r3, r1
 80052c2:	f04f 0000 	mov.w	r0, #0
 80052c6:	f04f 0100 	mov.w	r1, #0
 80052ca:	00d9      	lsls	r1, r3, #3
 80052cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052d0:	00d0      	lsls	r0, r2, #3
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	1912      	adds	r2, r2, r4
 80052d8:	eb45 0303 	adc.w	r3, r5, r3
 80052dc:	f04f 0000 	mov.w	r0, #0
 80052e0:	f04f 0100 	mov.w	r1, #0
 80052e4:	0299      	lsls	r1, r3, #10
 80052e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80052ea:	0290      	lsls	r0, r2, #10
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4610      	mov	r0, r2
 80052f2:	4619      	mov	r1, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	461a      	mov	r2, r3
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	f7fb fbde 	bl	8000abc <__aeabi_uldivmod>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	4613      	mov	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005308:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	0c1b      	lsrs	r3, r3, #16
 800530e:	f003 0303 	and.w	r3, r3, #3
 8005312:	3301      	adds	r3, #1
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005320:	60bb      	str	r3, [r7, #8]
      break;
 8005322:	e002      	b.n	800532a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005324:	4b05      	ldr	r3, [pc, #20]	; (800533c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005326:	60bb      	str	r3, [r7, #8]
      break;
 8005328:	bf00      	nop
    }
  }
  return sysclockfreq;
 800532a:	68bb      	ldr	r3, [r7, #8]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005336:	bf00      	nop
 8005338:	40023800 	.word	0x40023800
 800533c:	00f42400 	.word	0x00f42400

08005340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005344:	4b03      	ldr	r3, [pc, #12]	; (8005354 <HAL_RCC_GetHCLKFreq+0x14>)
 8005346:	681b      	ldr	r3, [r3, #0]
}
 8005348:	4618      	mov	r0, r3
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	20000034 	.word	0x20000034

08005358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800535c:	f7ff fff0 	bl	8005340 <HAL_RCC_GetHCLKFreq>
 8005360:	4602      	mov	r2, r0
 8005362:	4b05      	ldr	r3, [pc, #20]	; (8005378 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	0a9b      	lsrs	r3, r3, #10
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	4903      	ldr	r1, [pc, #12]	; (800537c <HAL_RCC_GetPCLK1Freq+0x24>)
 800536e:	5ccb      	ldrb	r3, [r1, r3]
 8005370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005374:	4618      	mov	r0, r3
 8005376:	bd80      	pop	{r7, pc}
 8005378:	40023800 	.word	0x40023800
 800537c:	08007d98 	.word	0x08007d98

08005380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005384:	f7ff ffdc 	bl	8005340 <HAL_RCC_GetHCLKFreq>
 8005388:	4602      	mov	r2, r0
 800538a:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	0b5b      	lsrs	r3, r3, #13
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	4903      	ldr	r1, [pc, #12]	; (80053a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005396:	5ccb      	ldrb	r3, [r1, r3]
 8005398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800539c:	4618      	mov	r0, r3
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	40023800 	.word	0x40023800
 80053a4:	08007d98 	.word	0x08007d98

080053a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e07b      	b.n	80054b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d108      	bne.n	80053d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053ca:	d009      	beq.n	80053e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	61da      	str	r2, [r3, #28]
 80053d2:	e005      	b.n	80053e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7fc f98a 	bl	8001714 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005416:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005428:	431a      	orrs	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005432:	431a      	orrs	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	431a      	orrs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	431a      	orrs	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005450:	431a      	orrs	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005464:	ea42 0103 	orr.w	r1, r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	0c1b      	lsrs	r3, r3, #16
 800547e:	f003 0104 	and.w	r1, r3, #4
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	f003 0210 	and.w	r2, r3, #16
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69da      	ldr	r2, [r3, #28]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b088      	sub	sp, #32
 80054be:	af02      	add	r7, sp, #8
 80054c0:	60f8      	str	r0, [r7, #12]
 80054c2:	60b9      	str	r1, [r7, #8]
 80054c4:	603b      	str	r3, [r7, #0]
 80054c6:	4613      	mov	r3, r2
 80054c8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054d6:	d112      	bne.n	80054fe <HAL_SPI_Receive+0x44>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10e      	bne.n	80054fe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2204      	movs	r2, #4
 80054e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80054e8:	88fa      	ldrh	r2, [r7, #6]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	4613      	mov	r3, r2
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	68b9      	ldr	r1, [r7, #8]
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f000 f8f1 	bl	80056dc <HAL_SPI_TransmitReceive>
 80054fa:	4603      	mov	r3, r0
 80054fc:	e0ea      	b.n	80056d4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <HAL_SPI_Receive+0x52>
 8005508:	2302      	movs	r3, #2
 800550a:	e0e3      	b.n	80056d4 <HAL_SPI_Receive+0x21a>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005514:	f7fd fb94 	bl	8002c40 <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b01      	cmp	r3, #1
 8005524:	d002      	beq.n	800552c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005526:	2302      	movs	r3, #2
 8005528:	75fb      	strb	r3, [r7, #23]
    goto error;
 800552a:	e0ca      	b.n	80056c2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <HAL_SPI_Receive+0x7e>
 8005532:	88fb      	ldrh	r3, [r7, #6]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d102      	bne.n	800553e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800553c:	e0c1      	b.n	80056c2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2204      	movs	r2, #4
 8005542:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	88fa      	ldrh	r2, [r7, #6]
 8005556:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	88fa      	ldrh	r2, [r7, #6]
 800555c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005584:	d10f      	bne.n	80055a6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005594:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80055a4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b0:	2b40      	cmp	r3, #64	; 0x40
 80055b2:	d007      	beq.n	80055c4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055c2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d162      	bne.n	8005692 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80055cc:	e02e      	b.n	800562c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d115      	bne.n	8005608 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f103 020c 	add.w	r2, r3, #12
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e8:	7812      	ldrb	r2, [r2, #0]
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29a      	uxth	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005606:	e011      	b.n	800562c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005608:	f7fd fb1a 	bl	8002c40 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	429a      	cmp	r2, r3
 8005616:	d803      	bhi.n	8005620 <HAL_SPI_Receive+0x166>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800561e:	d102      	bne.n	8005626 <HAL_SPI_Receive+0x16c>
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d102      	bne.n	800562c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	75fb      	strb	r3, [r7, #23]
          goto error;
 800562a:	e04a      	b.n	80056c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1cb      	bne.n	80055ce <HAL_SPI_Receive+0x114>
 8005636:	e031      	b.n	800569c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b01      	cmp	r3, #1
 8005644:	d113      	bne.n	800566e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68da      	ldr	r2, [r3, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005650:	b292      	uxth	r2, r2
 8005652:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005658:	1c9a      	adds	r2, r3, #2
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005662:	b29b      	uxth	r3, r3
 8005664:	3b01      	subs	r3, #1
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800566c:	e011      	b.n	8005692 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800566e:	f7fd fae7 	bl	8002c40 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	429a      	cmp	r2, r3
 800567c:	d803      	bhi.n	8005686 <HAL_SPI_Receive+0x1cc>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005684:	d102      	bne.n	800568c <HAL_SPI_Receive+0x1d2>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d102      	bne.n	8005692 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005690:	e017      	b.n	80056c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005696:	b29b      	uxth	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1cd      	bne.n	8005638 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	6839      	ldr	r1, [r7, #0]
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 fa45 	bl	8005b30 <SPI_EndRxTransaction>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2220      	movs	r2, #32
 80056b0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	75fb      	strb	r3, [r7, #23]
 80056be:	e000      	b.n	80056c2 <HAL_SPI_Receive+0x208>
  }

error :
 80056c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3718      	adds	r7, #24
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08c      	sub	sp, #48	; 0x30
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80056ea:	2301      	movs	r3, #1
 80056ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d101      	bne.n	8005702 <HAL_SPI_TransmitReceive+0x26>
 80056fe:	2302      	movs	r3, #2
 8005700:	e18a      	b.n	8005a18 <HAL_SPI_TransmitReceive+0x33c>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800570a:	f7fd fa99 	bl	8002c40 <HAL_GetTick>
 800570e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005720:	887b      	ldrh	r3, [r7, #2]
 8005722:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005724:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005728:	2b01      	cmp	r3, #1
 800572a:	d00f      	beq.n	800574c <HAL_SPI_TransmitReceive+0x70>
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005732:	d107      	bne.n	8005744 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d103      	bne.n	8005744 <HAL_SPI_TransmitReceive+0x68>
 800573c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005740:	2b04      	cmp	r3, #4
 8005742:	d003      	beq.n	800574c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005744:	2302      	movs	r3, #2
 8005746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800574a:	e15b      	b.n	8005a04 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d005      	beq.n	800575e <HAL_SPI_TransmitReceive+0x82>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d002      	beq.n	800575e <HAL_SPI_TransmitReceive+0x82>
 8005758:	887b      	ldrh	r3, [r7, #2]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d103      	bne.n	8005766 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005764:	e14e      	b.n	8005a04 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b04      	cmp	r3, #4
 8005770:	d003      	beq.n	800577a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2205      	movs	r2, #5
 8005776:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	887a      	ldrh	r2, [r7, #2]
 800578a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	887a      	ldrh	r2, [r7, #2]
 8005790:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	887a      	ldrh	r2, [r7, #2]
 800579c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	887a      	ldrh	r2, [r7, #2]
 80057a2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ba:	2b40      	cmp	r3, #64	; 0x40
 80057bc:	d007      	beq.n	80057ce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057d6:	d178      	bne.n	80058ca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <HAL_SPI_TransmitReceive+0x10a>
 80057e0:	8b7b      	ldrh	r3, [r7, #26]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d166      	bne.n	80058b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ea:	881a      	ldrh	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f6:	1c9a      	adds	r2, r3, #2
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800580a:	e053      	b.n	80058b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b02      	cmp	r3, #2
 8005818:	d11b      	bne.n	8005852 <HAL_SPI_TransmitReceive+0x176>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800581e:	b29b      	uxth	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	d016      	beq.n	8005852 <HAL_SPI_TransmitReceive+0x176>
 8005824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005826:	2b01      	cmp	r3, #1
 8005828:	d113      	bne.n	8005852 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582e:	881a      	ldrh	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583a:	1c9a      	adds	r2, r3, #2
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005844:	b29b      	uxth	r3, r3
 8005846:	3b01      	subs	r3, #1
 8005848:	b29a      	uxth	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800584e:	2300      	movs	r3, #0
 8005850:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b01      	cmp	r3, #1
 800585e:	d119      	bne.n	8005894 <HAL_SPI_TransmitReceive+0x1b8>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005864:	b29b      	uxth	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d014      	beq.n	8005894 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005874:	b292      	uxth	r2, r2
 8005876:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587c:	1c9a      	adds	r2, r3, #2
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005886:	b29b      	uxth	r3, r3
 8005888:	3b01      	subs	r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005890:	2301      	movs	r3, #1
 8005892:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005894:	f7fd f9d4 	bl	8002c40 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d807      	bhi.n	80058b4 <HAL_SPI_TransmitReceive+0x1d8>
 80058a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058aa:	d003      	beq.n	80058b4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80058b2:	e0a7      	b.n	8005a04 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1a6      	bne.n	800580c <HAL_SPI_TransmitReceive+0x130>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1a1      	bne.n	800580c <HAL_SPI_TransmitReceive+0x130>
 80058c8:	e07c      	b.n	80059c4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <HAL_SPI_TransmitReceive+0x1fc>
 80058d2:	8b7b      	ldrh	r3, [r7, #26]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d16b      	bne.n	80059b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	330c      	adds	r3, #12
 80058e2:	7812      	ldrb	r2, [r2, #0]
 80058e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ea:	1c5a      	adds	r2, r3, #1
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	3b01      	subs	r3, #1
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058fe:	e057      	b.n	80059b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b02      	cmp	r3, #2
 800590c:	d11c      	bne.n	8005948 <HAL_SPI_TransmitReceive+0x26c>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005912:	b29b      	uxth	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	d017      	beq.n	8005948 <HAL_SPI_TransmitReceive+0x26c>
 8005918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591a:	2b01      	cmp	r3, #1
 800591c:	d114      	bne.n	8005948 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	330c      	adds	r3, #12
 8005928:	7812      	ldrb	r2, [r2, #0]
 800592a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800593a:	b29b      	uxth	r3, r3
 800593c:	3b01      	subs	r3, #1
 800593e:	b29a      	uxth	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b01      	cmp	r3, #1
 8005954:	d119      	bne.n	800598a <HAL_SPI_TransmitReceive+0x2ae>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800595a:	b29b      	uxth	r3, r3
 800595c:	2b00      	cmp	r3, #0
 800595e:	d014      	beq.n	800598a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005972:	1c5a      	adds	r2, r3, #1
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800597c:	b29b      	uxth	r3, r3
 800597e:	3b01      	subs	r3, #1
 8005980:	b29a      	uxth	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005986:	2301      	movs	r3, #1
 8005988:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800598a:	f7fd f959 	bl	8002c40 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005996:	429a      	cmp	r2, r3
 8005998:	d803      	bhi.n	80059a2 <HAL_SPI_TransmitReceive+0x2c6>
 800599a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059a0:	d102      	bne.n	80059a8 <HAL_SPI_TransmitReceive+0x2cc>
 80059a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d103      	bne.n	80059b0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80059ae:	e029      	b.n	8005a04 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1a2      	bne.n	8005900 <HAL_SPI_TransmitReceive+0x224>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059be:	b29b      	uxth	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d19d      	bne.n	8005900 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 f917 	bl	8005bfc <SPI_EndRxTxTransaction>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d006      	beq.n	80059e2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2220      	movs	r2, #32
 80059de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80059e0:	e010      	b.n	8005a04 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10b      	bne.n	8005a02 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059ea:	2300      	movs	r3, #0
 80059ec:	617b      	str	r3, [r7, #20]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	617b      	str	r3, [r7, #20]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	617b      	str	r3, [r7, #20]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	e000      	b.n	8005a04 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005a02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3730      	adds	r7, #48	; 0x30
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b088      	sub	sp, #32
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	603b      	str	r3, [r7, #0]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a30:	f7fd f906 	bl	8002c40 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a38:	1a9b      	subs	r3, r3, r2
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a40:	f7fd f8fe 	bl	8002c40 <HAL_GetTick>
 8005a44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a46:	4b39      	ldr	r3, [pc, #228]	; (8005b2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	015b      	lsls	r3, r3, #5
 8005a4c:	0d1b      	lsrs	r3, r3, #20
 8005a4e:	69fa      	ldr	r2, [r7, #28]
 8005a50:	fb02 f303 	mul.w	r3, r2, r3
 8005a54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a56:	e054      	b.n	8005b02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a5e:	d050      	beq.n	8005b02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a60:	f7fd f8ee 	bl	8002c40 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	69fa      	ldr	r2, [r7, #28]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d902      	bls.n	8005a76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d13d      	bne.n	8005af2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a8e:	d111      	bne.n	8005ab4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a98:	d004      	beq.n	8005aa4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aa2:	d107      	bne.n	8005ab4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ab2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005abc:	d10f      	bne.n	8005ade <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005adc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e017      	b.n	8005b22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005af8:	2300      	movs	r3, #0
 8005afa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689a      	ldr	r2, [r3, #8]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	bf0c      	ite	eq
 8005b12:	2301      	moveq	r3, #1
 8005b14:	2300      	movne	r3, #0
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	461a      	mov	r2, r3
 8005b1a:	79fb      	ldrb	r3, [r7, #7]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d19b      	bne.n	8005a58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3720      	adds	r7, #32
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	20000034 	.word	0x20000034

08005b30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af02      	add	r7, sp, #8
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b44:	d111      	bne.n	8005b6a <SPI_EndRxTransaction+0x3a>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b4e:	d004      	beq.n	8005b5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b58:	d107      	bne.n	8005b6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b68:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b72:	d12a      	bne.n	8005bca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b7c:	d012      	beq.n	8005ba4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	9300      	str	r3, [sp, #0]
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2200      	movs	r2, #0
 8005b86:	2180      	movs	r1, #128	; 0x80
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f7ff ff49 	bl	8005a20 <SPI_WaitFlagStateUntilTimeout>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d02d      	beq.n	8005bf0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b98:	f043 0220 	orr.w	r2, r3, #32
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e026      	b.n	8005bf2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2200      	movs	r2, #0
 8005bac:	2101      	movs	r1, #1
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f7ff ff36 	bl	8005a20 <SPI_WaitFlagStateUntilTimeout>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d01a      	beq.n	8005bf0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bbe:	f043 0220 	orr.w	r2, r3, #32
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e013      	b.n	8005bf2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f7ff ff23 	bl	8005a20 <SPI_WaitFlagStateUntilTimeout>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d007      	beq.n	8005bf0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be4:	f043 0220 	orr.w	r2, r3, #32
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e000      	b.n	8005bf2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
	...

08005bfc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b088      	sub	sp, #32
 8005c00:	af02      	add	r7, sp, #8
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c08:	4b1b      	ldr	r3, [pc, #108]	; (8005c78 <SPI_EndRxTxTransaction+0x7c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a1b      	ldr	r2, [pc, #108]	; (8005c7c <SPI_EndRxTxTransaction+0x80>)
 8005c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c12:	0d5b      	lsrs	r3, r3, #21
 8005c14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c18:	fb02 f303 	mul.w	r3, r2, r3
 8005c1c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c26:	d112      	bne.n	8005c4e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	2180      	movs	r1, #128	; 0x80
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f7ff fef4 	bl	8005a20 <SPI_WaitFlagStateUntilTimeout>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d016      	beq.n	8005c6c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c42:	f043 0220 	orr.w	r2, r3, #32
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e00f      	b.n	8005c6e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00a      	beq.n	8005c6a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	3b01      	subs	r3, #1
 8005c58:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c64:	2b80      	cmp	r3, #128	; 0x80
 8005c66:	d0f2      	beq.n	8005c4e <SPI_EndRxTxTransaction+0x52>
 8005c68:	e000      	b.n	8005c6c <SPI_EndRxTxTransaction+0x70>
        break;
 8005c6a:	bf00      	nop
  }

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20000034 	.word	0x20000034
 8005c7c:	165e9f81 	.word	0x165e9f81

08005c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e041      	b.n	8005d16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d106      	bne.n	8005cac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7fc fc14 	bl	80024d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3304      	adds	r3, #4
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	f000 fcb0 	bl	8006624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b082      	sub	sp, #8
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e041      	b.n	8005db4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d106      	bne.n	8005d4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f839 	bl	8005dbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	f000 fc61 	bl	8006624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3708      	adds	r7, #8
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2200      	movs	r2, #0
 8005de0:	6839      	ldr	r1, [r7, #0]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f001 f832 	bl	8006e4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a2e      	ldr	r2, [pc, #184]	; (8005ea8 <HAL_TIM_PWM_Stop+0xd8>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d004      	beq.n	8005dfc <HAL_TIM_PWM_Stop+0x2c>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a2d      	ldr	r2, [pc, #180]	; (8005eac <HAL_TIM_PWM_Stop+0xdc>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d101      	bne.n	8005e00 <HAL_TIM_PWM_Stop+0x30>
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e000      	b.n	8005e02 <HAL_TIM_PWM_Stop+0x32>
 8005e00:	2300      	movs	r3, #0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d017      	beq.n	8005e36 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6a1a      	ldr	r2, [r3, #32]
 8005e0c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e10:	4013      	ands	r3, r2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10f      	bne.n	8005e36 <HAL_TIM_PWM_Stop+0x66>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	6a1a      	ldr	r2, [r3, #32]
 8005e1c:	f240 4344 	movw	r3, #1092	; 0x444
 8005e20:	4013      	ands	r3, r2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d107      	bne.n	8005e36 <HAL_TIM_PWM_Stop+0x66>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6a1a      	ldr	r2, [r3, #32]
 8005e3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e40:	4013      	ands	r3, r2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10f      	bne.n	8005e66 <HAL_TIM_PWM_Stop+0x96>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6a1a      	ldr	r2, [r3, #32]
 8005e4c:	f240 4344 	movw	r3, #1092	; 0x444
 8005e50:	4013      	ands	r3, r2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d107      	bne.n	8005e66 <HAL_TIM_PWM_Stop+0x96>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 0201 	bic.w	r2, r2, #1
 8005e64:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d104      	bne.n	8005e76 <HAL_TIM_PWM_Stop+0xa6>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e74:	e013      	b.n	8005e9e <HAL_TIM_PWM_Stop+0xce>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	d104      	bne.n	8005e86 <HAL_TIM_PWM_Stop+0xb6>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e84:	e00b      	b.n	8005e9e <HAL_TIM_PWM_Stop+0xce>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d104      	bne.n	8005e96 <HAL_TIM_PWM_Stop+0xc6>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e94:	e003      	b.n	8005e9e <HAL_TIM_PWM_Stop+0xce>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	40010000 	.word	0x40010000
 8005eac:	40010400 	.word	0x40010400

08005eb0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e041      	b.n	8005f46 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d106      	bne.n	8005edc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f839 	bl	8005f4e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	3304      	adds	r3, #4
 8005eec:	4619      	mov	r1, r3
 8005eee:	4610      	mov	r0, r2
 8005ef0:	f000 fb98 	bl	8006624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b082      	sub	sp, #8
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d122      	bne.n	8005fbe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d11b      	bne.n	8005fbe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f06f 0202 	mvn.w	r2, #2
 8005f8e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	f003 0303 	and.w	r3, r3, #3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 fb1e 	bl	80065e6 <HAL_TIM_IC_CaptureCallback>
 8005faa:	e005      	b.n	8005fb8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fb10 	bl	80065d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fb21 	bl	80065fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	f003 0304 	and.w	r3, r3, #4
 8005fc8:	2b04      	cmp	r3, #4
 8005fca:	d122      	bne.n	8006012 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	f003 0304 	and.w	r3, r3, #4
 8005fd6:	2b04      	cmp	r3, #4
 8005fd8:	d11b      	bne.n	8006012 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f06f 0204 	mvn.w	r2, #4
 8005fe2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d003      	beq.n	8006000 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 faf4 	bl	80065e6 <HAL_TIM_IC_CaptureCallback>
 8005ffe:	e005      	b.n	800600c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 fae6 	bl	80065d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 faf7 	bl	80065fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	f003 0308 	and.w	r3, r3, #8
 800601c:	2b08      	cmp	r3, #8
 800601e:	d122      	bne.n	8006066 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	f003 0308 	and.w	r3, r3, #8
 800602a:	2b08      	cmp	r3, #8
 800602c:	d11b      	bne.n	8006066 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f06f 0208 	mvn.w	r2, #8
 8006036:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2204      	movs	r2, #4
 800603c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	f003 0303 	and.w	r3, r3, #3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d003      	beq.n	8006054 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 faca 	bl	80065e6 <HAL_TIM_IC_CaptureCallback>
 8006052:	e005      	b.n	8006060 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fabc 	bl	80065d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 facd 	bl	80065fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	f003 0310 	and.w	r3, r3, #16
 8006070:	2b10      	cmp	r3, #16
 8006072:	d122      	bne.n	80060ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f003 0310 	and.w	r3, r3, #16
 800607e:	2b10      	cmp	r3, #16
 8006080:	d11b      	bne.n	80060ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f06f 0210 	mvn.w	r2, #16
 800608a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2208      	movs	r2, #8
 8006090:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69db      	ldr	r3, [r3, #28]
 8006098:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800609c:	2b00      	cmp	r3, #0
 800609e:	d003      	beq.n	80060a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 faa0 	bl	80065e6 <HAL_TIM_IC_CaptureCallback>
 80060a6:	e005      	b.n	80060b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fa92 	bl	80065d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 faa3 	bl	80065fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d10e      	bne.n	80060e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d107      	bne.n	80060e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f06f 0201 	mvn.w	r2, #1
 80060de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fa6c 	bl	80065be <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f0:	2b80      	cmp	r3, #128	; 0x80
 80060f2:	d10e      	bne.n	8006112 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060fe:	2b80      	cmp	r3, #128	; 0x80
 8006100:	d107      	bne.n	8006112 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800610a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 ff9b 	bl	8007048 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611c:	2b40      	cmp	r3, #64	; 0x40
 800611e:	d10e      	bne.n	800613e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612a:	2b40      	cmp	r3, #64	; 0x40
 800612c:	d107      	bne.n	800613e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fa68 	bl	800660e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	f003 0320 	and.w	r3, r3, #32
 8006148:	2b20      	cmp	r3, #32
 800614a:	d10e      	bne.n	800616a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b20      	cmp	r3, #32
 8006158:	d107      	bne.n	800616a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f06f 0220 	mvn.w	r2, #32
 8006162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 ff65 	bl	8007034 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800616a:	bf00      	nop
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b086      	sub	sp, #24
 8006176:	af00      	add	r7, sp, #0
 8006178:	60f8      	str	r0, [r7, #12]
 800617a:	60b9      	str	r1, [r7, #8]
 800617c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800617e:	2300      	movs	r3, #0
 8006180:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006188:	2b01      	cmp	r3, #1
 800618a:	d101      	bne.n	8006190 <HAL_TIM_IC_ConfigChannel+0x1e>
 800618c:	2302      	movs	r3, #2
 800618e:	e088      	b.n	80062a2 <HAL_TIM_IC_ConfigChannel+0x130>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d11b      	bne.n	80061d6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6818      	ldr	r0, [r3, #0]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	6819      	ldr	r1, [r3, #0]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f000 fc89 	bl	8006ac4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	699a      	ldr	r2, [r3, #24]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 020c 	bic.w	r2, r2, #12
 80061c0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6999      	ldr	r1, [r3, #24]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	689a      	ldr	r2, [r3, #8]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	430a      	orrs	r2, r1
 80061d2:	619a      	str	r2, [r3, #24]
 80061d4:	e060      	b.n	8006298 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b04      	cmp	r3, #4
 80061da:	d11c      	bne.n	8006216 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6818      	ldr	r0, [r3, #0]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	6819      	ldr	r1, [r3, #0]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f000 fd0d 	bl	8006c0a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699a      	ldr	r2, [r3, #24]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80061fe:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6999      	ldr	r1, [r3, #24]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	021a      	lsls	r2, r3, #8
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	619a      	str	r2, [r3, #24]
 8006214:	e040      	b.n	8006298 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b08      	cmp	r3, #8
 800621a:	d11b      	bne.n	8006254 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6818      	ldr	r0, [r3, #0]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	6819      	ldr	r1, [r3, #0]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f000 fd5a 	bl	8006ce4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	69da      	ldr	r2, [r3, #28]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 020c 	bic.w	r2, r2, #12
 800623e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	69d9      	ldr	r1, [r3, #28]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	689a      	ldr	r2, [r3, #8]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	61da      	str	r2, [r3, #28]
 8006252:	e021      	b.n	8006298 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b0c      	cmp	r3, #12
 8006258:	d11c      	bne.n	8006294 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6818      	ldr	r0, [r3, #0]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	6819      	ldr	r1, [r3, #0]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f000 fd77 	bl	8006d5c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	69da      	ldr	r2, [r3, #28]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800627c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69d9      	ldr	r1, [r3, #28]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	021a      	lsls	r2, r3, #8
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	61da      	str	r2, [r3, #28]
 8006292:	e001      	b.n	8006298 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3718      	adds	r7, #24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
	...

080062ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d101      	bne.n	80062ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062c6:	2302      	movs	r3, #2
 80062c8:	e0ae      	b.n	8006428 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b0c      	cmp	r3, #12
 80062d6:	f200 809f 	bhi.w	8006418 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80062da:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80062dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e0:	08006315 	.word	0x08006315
 80062e4:	08006419 	.word	0x08006419
 80062e8:	08006419 	.word	0x08006419
 80062ec:	08006419 	.word	0x08006419
 80062f0:	08006355 	.word	0x08006355
 80062f4:	08006419 	.word	0x08006419
 80062f8:	08006419 	.word	0x08006419
 80062fc:	08006419 	.word	0x08006419
 8006300:	08006397 	.word	0x08006397
 8006304:	08006419 	.word	0x08006419
 8006308:	08006419 	.word	0x08006419
 800630c:	08006419 	.word	0x08006419
 8006310:	080063d7 	.word	0x080063d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68b9      	ldr	r1, [r7, #8]
 800631a:	4618      	mov	r0, r3
 800631c:	f000 fa22 	bl	8006764 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699a      	ldr	r2, [r3, #24]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0208 	orr.w	r2, r2, #8
 800632e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699a      	ldr	r2, [r3, #24]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0204 	bic.w	r2, r2, #4
 800633e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6999      	ldr	r1, [r3, #24]
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	691a      	ldr	r2, [r3, #16]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	619a      	str	r2, [r3, #24]
      break;
 8006352:	e064      	b.n	800641e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68b9      	ldr	r1, [r7, #8]
 800635a:	4618      	mov	r0, r3
 800635c:	f000 fa72 	bl	8006844 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	699a      	ldr	r2, [r3, #24]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800636e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	699a      	ldr	r2, [r3, #24]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800637e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6999      	ldr	r1, [r3, #24]
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	021a      	lsls	r2, r3, #8
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	619a      	str	r2, [r3, #24]
      break;
 8006394:	e043      	b.n	800641e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68b9      	ldr	r1, [r7, #8]
 800639c:	4618      	mov	r0, r3
 800639e:	f000 fac7 	bl	8006930 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	69da      	ldr	r2, [r3, #28]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f042 0208 	orr.w	r2, r2, #8
 80063b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	69da      	ldr	r2, [r3, #28]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 0204 	bic.w	r2, r2, #4
 80063c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69d9      	ldr	r1, [r3, #28]
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	691a      	ldr	r2, [r3, #16]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	430a      	orrs	r2, r1
 80063d2:	61da      	str	r2, [r3, #28]
      break;
 80063d4:	e023      	b.n	800641e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68b9      	ldr	r1, [r7, #8]
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 fb1b 	bl	8006a18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69da      	ldr	r2, [r3, #28]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	69da      	ldr	r2, [r3, #28]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	69d9      	ldr	r1, [r3, #28]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	021a      	lsls	r2, r3, #8
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	61da      	str	r2, [r3, #28]
      break;
 8006416:	e002      	b.n	800641e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	75fb      	strb	r3, [r7, #23]
      break;
 800641c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006426:	7dfb      	ldrb	r3, [r7, #23]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3718      	adds	r7, #24
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006444:	2b01      	cmp	r3, #1
 8006446:	d101      	bne.n	800644c <HAL_TIM_ConfigClockSource+0x1c>
 8006448:	2302      	movs	r3, #2
 800644a:	e0b4      	b.n	80065b6 <HAL_TIM_ConfigClockSource+0x186>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800646a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006472:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006484:	d03e      	beq.n	8006504 <HAL_TIM_ConfigClockSource+0xd4>
 8006486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800648a:	f200 8087 	bhi.w	800659c <HAL_TIM_ConfigClockSource+0x16c>
 800648e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006492:	f000 8086 	beq.w	80065a2 <HAL_TIM_ConfigClockSource+0x172>
 8006496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800649a:	d87f      	bhi.n	800659c <HAL_TIM_ConfigClockSource+0x16c>
 800649c:	2b70      	cmp	r3, #112	; 0x70
 800649e:	d01a      	beq.n	80064d6 <HAL_TIM_ConfigClockSource+0xa6>
 80064a0:	2b70      	cmp	r3, #112	; 0x70
 80064a2:	d87b      	bhi.n	800659c <HAL_TIM_ConfigClockSource+0x16c>
 80064a4:	2b60      	cmp	r3, #96	; 0x60
 80064a6:	d050      	beq.n	800654a <HAL_TIM_ConfigClockSource+0x11a>
 80064a8:	2b60      	cmp	r3, #96	; 0x60
 80064aa:	d877      	bhi.n	800659c <HAL_TIM_ConfigClockSource+0x16c>
 80064ac:	2b50      	cmp	r3, #80	; 0x50
 80064ae:	d03c      	beq.n	800652a <HAL_TIM_ConfigClockSource+0xfa>
 80064b0:	2b50      	cmp	r3, #80	; 0x50
 80064b2:	d873      	bhi.n	800659c <HAL_TIM_ConfigClockSource+0x16c>
 80064b4:	2b40      	cmp	r3, #64	; 0x40
 80064b6:	d058      	beq.n	800656a <HAL_TIM_ConfigClockSource+0x13a>
 80064b8:	2b40      	cmp	r3, #64	; 0x40
 80064ba:	d86f      	bhi.n	800659c <HAL_TIM_ConfigClockSource+0x16c>
 80064bc:	2b30      	cmp	r3, #48	; 0x30
 80064be:	d064      	beq.n	800658a <HAL_TIM_ConfigClockSource+0x15a>
 80064c0:	2b30      	cmp	r3, #48	; 0x30
 80064c2:	d86b      	bhi.n	800659c <HAL_TIM_ConfigClockSource+0x16c>
 80064c4:	2b20      	cmp	r3, #32
 80064c6:	d060      	beq.n	800658a <HAL_TIM_ConfigClockSource+0x15a>
 80064c8:	2b20      	cmp	r3, #32
 80064ca:	d867      	bhi.n	800659c <HAL_TIM_ConfigClockSource+0x16c>
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d05c      	beq.n	800658a <HAL_TIM_ConfigClockSource+0x15a>
 80064d0:	2b10      	cmp	r3, #16
 80064d2:	d05a      	beq.n	800658a <HAL_TIM_ConfigClockSource+0x15a>
 80064d4:	e062      	b.n	800659c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6818      	ldr	r0, [r3, #0]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	6899      	ldr	r1, [r3, #8]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f000 fc91 	bl	8006e0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	609a      	str	r2, [r3, #8]
      break;
 8006502:	e04f      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6818      	ldr	r0, [r3, #0]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	6899      	ldr	r1, [r3, #8]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	f000 fc7a 	bl	8006e0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	689a      	ldr	r2, [r3, #8]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006526:	609a      	str	r2, [r3, #8]
      break;
 8006528:	e03c      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6818      	ldr	r0, [r3, #0]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	6859      	ldr	r1, [r3, #4]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	461a      	mov	r2, r3
 8006538:	f000 fb38 	bl	8006bac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2150      	movs	r1, #80	; 0x50
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fc47 	bl	8006dd6 <TIM_ITRx_SetConfig>
      break;
 8006548:	e02c      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6818      	ldr	r0, [r3, #0]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	6859      	ldr	r1, [r3, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	461a      	mov	r2, r3
 8006558:	f000 fb94 	bl	8006c84 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2160      	movs	r1, #96	; 0x60
 8006562:	4618      	mov	r0, r3
 8006564:	f000 fc37 	bl	8006dd6 <TIM_ITRx_SetConfig>
      break;
 8006568:	e01c      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6818      	ldr	r0, [r3, #0]
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	6859      	ldr	r1, [r3, #4]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	461a      	mov	r2, r3
 8006578:	f000 fb18 	bl	8006bac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2140      	movs	r1, #64	; 0x40
 8006582:	4618      	mov	r0, r3
 8006584:	f000 fc27 	bl	8006dd6 <TIM_ITRx_SetConfig>
      break;
 8006588:	e00c      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4619      	mov	r1, r3
 8006594:	4610      	mov	r0, r2
 8006596:	f000 fc1e 	bl	8006dd6 <TIM_ITRx_SetConfig>
      break;
 800659a:	e003      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	73fb      	strb	r3, [r7, #15]
      break;
 80065a0:	e000      	b.n	80065a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80065a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3710      	adds	r7, #16
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065be:	b480      	push	{r7}
 80065c0:	b083      	sub	sp, #12
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80065c6:	bf00      	nop
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b083      	sub	sp, #12
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065da:	bf00      	nop
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b083      	sub	sp, #12
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065ee:	bf00      	nop
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b083      	sub	sp, #12
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006602:	bf00      	nop
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800660e:	b480      	push	{r7}
 8006610:	b083      	sub	sp, #12
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006616:	bf00      	nop
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
	...

08006624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a40      	ldr	r2, [pc, #256]	; (8006738 <TIM_Base_SetConfig+0x114>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d013      	beq.n	8006664 <TIM_Base_SetConfig+0x40>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006642:	d00f      	beq.n	8006664 <TIM_Base_SetConfig+0x40>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a3d      	ldr	r2, [pc, #244]	; (800673c <TIM_Base_SetConfig+0x118>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00b      	beq.n	8006664 <TIM_Base_SetConfig+0x40>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a3c      	ldr	r2, [pc, #240]	; (8006740 <TIM_Base_SetConfig+0x11c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d007      	beq.n	8006664 <TIM_Base_SetConfig+0x40>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a3b      	ldr	r2, [pc, #236]	; (8006744 <TIM_Base_SetConfig+0x120>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d003      	beq.n	8006664 <TIM_Base_SetConfig+0x40>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a3a      	ldr	r2, [pc, #232]	; (8006748 <TIM_Base_SetConfig+0x124>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d108      	bne.n	8006676 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800666a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	4313      	orrs	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a2f      	ldr	r2, [pc, #188]	; (8006738 <TIM_Base_SetConfig+0x114>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d02b      	beq.n	80066d6 <TIM_Base_SetConfig+0xb2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006684:	d027      	beq.n	80066d6 <TIM_Base_SetConfig+0xb2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a2c      	ldr	r2, [pc, #176]	; (800673c <TIM_Base_SetConfig+0x118>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d023      	beq.n	80066d6 <TIM_Base_SetConfig+0xb2>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a2b      	ldr	r2, [pc, #172]	; (8006740 <TIM_Base_SetConfig+0x11c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d01f      	beq.n	80066d6 <TIM_Base_SetConfig+0xb2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a2a      	ldr	r2, [pc, #168]	; (8006744 <TIM_Base_SetConfig+0x120>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d01b      	beq.n	80066d6 <TIM_Base_SetConfig+0xb2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a29      	ldr	r2, [pc, #164]	; (8006748 <TIM_Base_SetConfig+0x124>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d017      	beq.n	80066d6 <TIM_Base_SetConfig+0xb2>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a28      	ldr	r2, [pc, #160]	; (800674c <TIM_Base_SetConfig+0x128>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d013      	beq.n	80066d6 <TIM_Base_SetConfig+0xb2>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a27      	ldr	r2, [pc, #156]	; (8006750 <TIM_Base_SetConfig+0x12c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d00f      	beq.n	80066d6 <TIM_Base_SetConfig+0xb2>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a26      	ldr	r2, [pc, #152]	; (8006754 <TIM_Base_SetConfig+0x130>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d00b      	beq.n	80066d6 <TIM_Base_SetConfig+0xb2>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a25      	ldr	r2, [pc, #148]	; (8006758 <TIM_Base_SetConfig+0x134>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d007      	beq.n	80066d6 <TIM_Base_SetConfig+0xb2>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a24      	ldr	r2, [pc, #144]	; (800675c <TIM_Base_SetConfig+0x138>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d003      	beq.n	80066d6 <TIM_Base_SetConfig+0xb2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a23      	ldr	r2, [pc, #140]	; (8006760 <TIM_Base_SetConfig+0x13c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d108      	bne.n	80066e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a0a      	ldr	r2, [pc, #40]	; (8006738 <TIM_Base_SetConfig+0x114>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d003      	beq.n	800671c <TIM_Base_SetConfig+0xf8>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a0c      	ldr	r2, [pc, #48]	; (8006748 <TIM_Base_SetConfig+0x124>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d103      	bne.n	8006724 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	691a      	ldr	r2, [r3, #16]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	615a      	str	r2, [r3, #20]
}
 800672a:	bf00      	nop
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	40010000 	.word	0x40010000
 800673c:	40000400 	.word	0x40000400
 8006740:	40000800 	.word	0x40000800
 8006744:	40000c00 	.word	0x40000c00
 8006748:	40010400 	.word	0x40010400
 800674c:	40014000 	.word	0x40014000
 8006750:	40014400 	.word	0x40014400
 8006754:	40014800 	.word	0x40014800
 8006758:	40001800 	.word	0x40001800
 800675c:	40001c00 	.word	0x40001c00
 8006760:	40002000 	.word	0x40002000

08006764 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a1b      	ldr	r3, [r3, #32]
 8006772:	f023 0201 	bic.w	r2, r3, #1
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f023 0303 	bic.w	r3, r3, #3
 800679a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f023 0302 	bic.w	r3, r3, #2
 80067ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a20      	ldr	r2, [pc, #128]	; (800683c <TIM_OC1_SetConfig+0xd8>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d003      	beq.n	80067c8 <TIM_OC1_SetConfig+0x64>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a1f      	ldr	r2, [pc, #124]	; (8006840 <TIM_OC1_SetConfig+0xdc>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d10c      	bne.n	80067e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f023 0308 	bic.w	r3, r3, #8
 80067ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f023 0304 	bic.w	r3, r3, #4
 80067e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a15      	ldr	r2, [pc, #84]	; (800683c <TIM_OC1_SetConfig+0xd8>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d003      	beq.n	80067f2 <TIM_OC1_SetConfig+0x8e>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a14      	ldr	r2, [pc, #80]	; (8006840 <TIM_OC1_SetConfig+0xdc>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d111      	bne.n	8006816 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	4313      	orrs	r3, r2
 800680a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4313      	orrs	r3, r2
 8006814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	621a      	str	r2, [r3, #32]
}
 8006830:	bf00      	nop
 8006832:	371c      	adds	r7, #28
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	40010000 	.word	0x40010000
 8006840:	40010400 	.word	0x40010400

08006844 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	f023 0210 	bic.w	r2, r3, #16
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800687a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	021b      	lsls	r3, r3, #8
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	4313      	orrs	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	f023 0320 	bic.w	r3, r3, #32
 800688e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	011b      	lsls	r3, r3, #4
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	4313      	orrs	r3, r2
 800689a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a22      	ldr	r2, [pc, #136]	; (8006928 <TIM_OC2_SetConfig+0xe4>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d003      	beq.n	80068ac <TIM_OC2_SetConfig+0x68>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a21      	ldr	r2, [pc, #132]	; (800692c <TIM_OC2_SetConfig+0xe8>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d10d      	bne.n	80068c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	011b      	lsls	r3, r3, #4
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	4313      	orrs	r3, r2
 80068be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a17      	ldr	r2, [pc, #92]	; (8006928 <TIM_OC2_SetConfig+0xe4>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d003      	beq.n	80068d8 <TIM_OC2_SetConfig+0x94>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a16      	ldr	r2, [pc, #88]	; (800692c <TIM_OC2_SetConfig+0xe8>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d113      	bne.n	8006900 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	621a      	str	r2, [r3, #32]
}
 800691a:	bf00      	nop
 800691c:	371c      	adds	r7, #28
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40010000 	.word	0x40010000
 800692c:	40010400 	.word	0x40010400

08006930 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800695e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f023 0303 	bic.w	r3, r3, #3
 8006966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	4313      	orrs	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	021b      	lsls	r3, r3, #8
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	4313      	orrs	r3, r2
 8006984:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a21      	ldr	r2, [pc, #132]	; (8006a10 <TIM_OC3_SetConfig+0xe0>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d003      	beq.n	8006996 <TIM_OC3_SetConfig+0x66>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a20      	ldr	r2, [pc, #128]	; (8006a14 <TIM_OC3_SetConfig+0xe4>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d10d      	bne.n	80069b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800699c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	021b      	lsls	r3, r3, #8
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a16      	ldr	r2, [pc, #88]	; (8006a10 <TIM_OC3_SetConfig+0xe0>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d003      	beq.n	80069c2 <TIM_OC3_SetConfig+0x92>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a15      	ldr	r2, [pc, #84]	; (8006a14 <TIM_OC3_SetConfig+0xe4>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d113      	bne.n	80069ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	011b      	lsls	r3, r3, #4
 80069d8:	693a      	ldr	r2, [r7, #16]
 80069da:	4313      	orrs	r3, r2
 80069dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	011b      	lsls	r3, r3, #4
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	621a      	str	r2, [r3, #32]
}
 8006a04:	bf00      	nop
 8006a06:	371c      	adds	r7, #28
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr
 8006a10:	40010000 	.word	0x40010000
 8006a14:	40010400 	.word	0x40010400

08006a18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b087      	sub	sp, #28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	69db      	ldr	r3, [r3, #28]
 8006a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	021b      	lsls	r3, r3, #8
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	031b      	lsls	r3, r3, #12
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a12      	ldr	r2, [pc, #72]	; (8006abc <TIM_OC4_SetConfig+0xa4>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d003      	beq.n	8006a80 <TIM_OC4_SetConfig+0x68>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a11      	ldr	r2, [pc, #68]	; (8006ac0 <TIM_OC4_SetConfig+0xa8>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d109      	bne.n	8006a94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	019b      	lsls	r3, r3, #6
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	621a      	str	r2, [r3, #32]
}
 8006aae:	bf00      	nop
 8006ab0:	371c      	adds	r7, #28
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	40010000 	.word	0x40010000
 8006ac0:	40010400 	.word	0x40010400

08006ac4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
 8006ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	f023 0201 	bic.w	r2, r3, #1
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4a28      	ldr	r2, [pc, #160]	; (8006b90 <TIM_TI1_SetConfig+0xcc>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d01b      	beq.n	8006b2a <TIM_TI1_SetConfig+0x66>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af8:	d017      	beq.n	8006b2a <TIM_TI1_SetConfig+0x66>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4a25      	ldr	r2, [pc, #148]	; (8006b94 <TIM_TI1_SetConfig+0xd0>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d013      	beq.n	8006b2a <TIM_TI1_SetConfig+0x66>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4a24      	ldr	r2, [pc, #144]	; (8006b98 <TIM_TI1_SetConfig+0xd4>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d00f      	beq.n	8006b2a <TIM_TI1_SetConfig+0x66>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	4a23      	ldr	r2, [pc, #140]	; (8006b9c <TIM_TI1_SetConfig+0xd8>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d00b      	beq.n	8006b2a <TIM_TI1_SetConfig+0x66>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4a22      	ldr	r2, [pc, #136]	; (8006ba0 <TIM_TI1_SetConfig+0xdc>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d007      	beq.n	8006b2a <TIM_TI1_SetConfig+0x66>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	4a21      	ldr	r2, [pc, #132]	; (8006ba4 <TIM_TI1_SetConfig+0xe0>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d003      	beq.n	8006b2a <TIM_TI1_SetConfig+0x66>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	4a20      	ldr	r2, [pc, #128]	; (8006ba8 <TIM_TI1_SetConfig+0xe4>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d101      	bne.n	8006b2e <TIM_TI1_SetConfig+0x6a>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e000      	b.n	8006b30 <TIM_TI1_SetConfig+0x6c>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d008      	beq.n	8006b46 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f023 0303 	bic.w	r3, r3, #3
 8006b3a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	e003      	b.n	8006b4e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f043 0301 	orr.w	r3, r3, #1
 8006b4c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	011b      	lsls	r3, r3, #4
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	f023 030a 	bic.w	r3, r3, #10
 8006b68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f003 030a 	and.w	r3, r3, #10
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	621a      	str	r2, [r3, #32]
}
 8006b82:	bf00      	nop
 8006b84:	371c      	adds	r7, #28
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	40010000 	.word	0x40010000
 8006b94:	40000400 	.word	0x40000400
 8006b98:	40000800 	.word	0x40000800
 8006b9c:	40000c00 	.word	0x40000c00
 8006ba0:	40010400 	.word	0x40010400
 8006ba4:	40014000 	.word	0x40014000
 8006ba8:	40001800 	.word	0x40001800

08006bac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	f023 0201 	bic.w	r2, r3, #1
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	011b      	lsls	r3, r3, #4
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f023 030a 	bic.w	r3, r3, #10
 8006be8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	621a      	str	r2, [r3, #32]
}
 8006bfe:	bf00      	nop
 8006c00:	371c      	adds	r7, #28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b087      	sub	sp, #28
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	60f8      	str	r0, [r7, #12]
 8006c12:	60b9      	str	r1, [r7, #8]
 8006c14:	607a      	str	r2, [r7, #4]
 8006c16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	f023 0210 	bic.w	r2, r3, #16
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	021b      	lsls	r3, r3, #8
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	031b      	lsls	r3, r3, #12
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c5c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	011b      	lsls	r3, r3, #4
 8006c62:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	621a      	str	r2, [r3, #32]
}
 8006c78:	bf00      	nop
 8006c7a:	371c      	adds	r7, #28
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b087      	sub	sp, #28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a1b      	ldr	r3, [r3, #32]
 8006c94:	f023 0210 	bic.w	r2, r3, #16
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	031b      	lsls	r3, r3, #12
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cc0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	011b      	lsls	r3, r3, #4
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	621a      	str	r2, [r3, #32]
}
 8006cd8:	bf00      	nop
 8006cda:	371c      	adds	r7, #28
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
 8006cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f023 0303 	bic.w	r3, r3, #3
 8006d10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d20:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	011b      	lsls	r3, r3, #4
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006d34:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	021b      	lsls	r3, r3, #8
 8006d3a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006d3e:	693a      	ldr	r2, [r7, #16]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	621a      	str	r2, [r3, #32]
}
 8006d50:	bf00      	nop
 8006d52:	371c      	adds	r7, #28
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
 8006d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	69db      	ldr	r3, [r3, #28]
 8006d7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6a1b      	ldr	r3, [r3, #32]
 8006d80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	021b      	lsls	r3, r3, #8
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d9a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	031b      	lsls	r3, r3, #12
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006dae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	031b      	lsls	r3, r3, #12
 8006db4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	621a      	str	r2, [r3, #32]
}
 8006dca:	bf00      	nop
 8006dcc:	371c      	adds	r7, #28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b085      	sub	sp, #20
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	f043 0307 	orr.w	r3, r3, #7
 8006df8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	609a      	str	r2, [r3, #8]
}
 8006e00:	bf00      	nop
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b087      	sub	sp, #28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	021a      	lsls	r2, r3, #8
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	609a      	str	r2, [r3, #8]
}
 8006e40:	bf00      	nop
 8006e42:	371c      	adds	r7, #28
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	f003 031f 	and.w	r3, r3, #31
 8006e5e:	2201      	movs	r2, #1
 8006e60:	fa02 f303 	lsl.w	r3, r2, r3
 8006e64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6a1a      	ldr	r2, [r3, #32]
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	43db      	mvns	r3, r3
 8006e6e:	401a      	ands	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6a1a      	ldr	r2, [r3, #32]
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	f003 031f 	and.w	r3, r3, #31
 8006e7e:	6879      	ldr	r1, [r7, #4]
 8006e80:	fa01 f303 	lsl.w	r3, r1, r3
 8006e84:	431a      	orrs	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	621a      	str	r2, [r3, #32]
}
 8006e8a:	bf00      	nop
 8006e8c:	371c      	adds	r7, #28
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
	...

08006e98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d101      	bne.n	8006eb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006eac:	2302      	movs	r3, #2
 8006eae:	e05a      	b.n	8006f66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a21      	ldr	r2, [pc, #132]	; (8006f74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d022      	beq.n	8006f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006efc:	d01d      	beq.n	8006f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a1d      	ldr	r2, [pc, #116]	; (8006f78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d018      	beq.n	8006f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a1b      	ldr	r2, [pc, #108]	; (8006f7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d013      	beq.n	8006f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a1a      	ldr	r2, [pc, #104]	; (8006f80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d00e      	beq.n	8006f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a18      	ldr	r2, [pc, #96]	; (8006f84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d009      	beq.n	8006f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a17      	ldr	r2, [pc, #92]	; (8006f88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d004      	beq.n	8006f3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a15      	ldr	r2, [pc, #84]	; (8006f8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d10c      	bne.n	8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	40010000 	.word	0x40010000
 8006f78:	40000400 	.word	0x40000400
 8006f7c:	40000800 	.word	0x40000800
 8006f80:	40000c00 	.word	0x40000c00
 8006f84:	40010400 	.word	0x40010400
 8006f88:	40014000 	.word	0x40014000
 8006f8c:	40001800 	.word	0x40001800

08006f90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d101      	bne.n	8006fac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006fa8:	2302      	movs	r3, #2
 8006faa:	e03d      	b.n	8007028 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	4313      	orrs	r3, r2
 8007006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	4313      	orrs	r3, r2
 8007014:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e03f      	b.n	80070ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d106      	bne.n	8007088 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7fb fbae 	bl	80027e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2224      	movs	r2, #36	; 0x24
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68da      	ldr	r2, [r3, #12]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800709e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fc71 	bl	8007988 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	691a      	ldr	r2, [r3, #16]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	695a      	ldr	r2, [r3, #20]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68da      	ldr	r2, [r3, #12]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2220      	movs	r2, #32
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2220      	movs	r2, #32
 80070e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
	...

080070f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b0ba      	sub	sp, #232	; 0xe8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800711e:	2300      	movs	r3, #0
 8007120:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007124:	2300      	movs	r3, #0
 8007126:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800712a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800712e:	f003 030f 	and.w	r3, r3, #15
 8007132:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007136:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10f      	bne.n	800715e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800713e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007142:	f003 0320 	and.w	r3, r3, #32
 8007146:	2b00      	cmp	r3, #0
 8007148:	d009      	beq.n	800715e <HAL_UART_IRQHandler+0x66>
 800714a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800714e:	f003 0320 	and.w	r3, r3, #32
 8007152:	2b00      	cmp	r3, #0
 8007154:	d003      	beq.n	800715e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fb5b 	bl	8007812 <UART_Receive_IT>
      return;
 800715c:	e256      	b.n	800760c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800715e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007162:	2b00      	cmp	r3, #0
 8007164:	f000 80de 	beq.w	8007324 <HAL_UART_IRQHandler+0x22c>
 8007168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800716c:	f003 0301 	and.w	r3, r3, #1
 8007170:	2b00      	cmp	r3, #0
 8007172:	d106      	bne.n	8007182 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007178:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 80d1 	beq.w	8007324 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00b      	beq.n	80071a6 <HAL_UART_IRQHandler+0xae>
 800718e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007196:	2b00      	cmp	r3, #0
 8007198:	d005      	beq.n	80071a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719e:	f043 0201 	orr.w	r2, r3, #1
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071aa:	f003 0304 	and.w	r3, r3, #4
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00b      	beq.n	80071ca <HAL_UART_IRQHandler+0xd2>
 80071b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d005      	beq.n	80071ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c2:	f043 0202 	orr.w	r2, r3, #2
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ce:	f003 0302 	and.w	r3, r3, #2
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00b      	beq.n	80071ee <HAL_UART_IRQHandler+0xf6>
 80071d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d005      	beq.n	80071ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	f043 0204 	orr.w	r2, r3, #4
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80071ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f2:	f003 0308 	and.w	r3, r3, #8
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d011      	beq.n	800721e <HAL_UART_IRQHandler+0x126>
 80071fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071fe:	f003 0320 	and.w	r3, r3, #32
 8007202:	2b00      	cmp	r3, #0
 8007204:	d105      	bne.n	8007212 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007206:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	2b00      	cmp	r3, #0
 8007210:	d005      	beq.n	800721e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007216:	f043 0208 	orr.w	r2, r3, #8
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 81ed 	beq.w	8007602 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800722c:	f003 0320 	and.w	r3, r3, #32
 8007230:	2b00      	cmp	r3, #0
 8007232:	d008      	beq.n	8007246 <HAL_UART_IRQHandler+0x14e>
 8007234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007238:	f003 0320 	and.w	r3, r3, #32
 800723c:	2b00      	cmp	r3, #0
 800723e:	d002      	beq.n	8007246 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fae6 	bl	8007812 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007250:	2b40      	cmp	r3, #64	; 0x40
 8007252:	bf0c      	ite	eq
 8007254:	2301      	moveq	r3, #1
 8007256:	2300      	movne	r3, #0
 8007258:	b2db      	uxtb	r3, r3
 800725a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	f003 0308 	and.w	r3, r3, #8
 8007266:	2b00      	cmp	r3, #0
 8007268:	d103      	bne.n	8007272 <HAL_UART_IRQHandler+0x17a>
 800726a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800726e:	2b00      	cmp	r3, #0
 8007270:	d04f      	beq.n	8007312 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f9ee 	bl	8007654 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007282:	2b40      	cmp	r3, #64	; 0x40
 8007284:	d141      	bne.n	800730a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	3314      	adds	r3, #20
 800728c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007290:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007294:	e853 3f00 	ldrex	r3, [r3]
 8007298:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800729c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3314      	adds	r3, #20
 80072ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80072b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80072b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80072be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80072c2:	e841 2300 	strex	r3, r2, [r1]
 80072c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80072ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1d9      	bne.n	8007286 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d013      	beq.n	8007302 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072de:	4a7d      	ldr	r2, [pc, #500]	; (80074d4 <HAL_UART_IRQHandler+0x3dc>)
 80072e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fc fd88 	bl	8003dfc <HAL_DMA_Abort_IT>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d016      	beq.n	8007320 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072fc:	4610      	mov	r0, r2
 80072fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007300:	e00e      	b.n	8007320 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f990 	bl	8007628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007308:	e00a      	b.n	8007320 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f98c 	bl	8007628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007310:	e006      	b.n	8007320 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f988 	bl	8007628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800731e:	e170      	b.n	8007602 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007320:	bf00      	nop
    return;
 8007322:	e16e      	b.n	8007602 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007328:	2b01      	cmp	r3, #1
 800732a:	f040 814a 	bne.w	80075c2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800732e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007332:	f003 0310 	and.w	r3, r3, #16
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 8143 	beq.w	80075c2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800733c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007340:	f003 0310 	and.w	r3, r3, #16
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 813c 	beq.w	80075c2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800734a:	2300      	movs	r3, #0
 800734c:	60bb      	str	r3, [r7, #8]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	60bb      	str	r3, [r7, #8]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	60bb      	str	r3, [r7, #8]
 800735e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736a:	2b40      	cmp	r3, #64	; 0x40
 800736c:	f040 80b4 	bne.w	80074d8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800737c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 8140 	beq.w	8007606 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800738a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800738e:	429a      	cmp	r2, r3
 8007390:	f080 8139 	bcs.w	8007606 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800739a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a0:	69db      	ldr	r3, [r3, #28]
 80073a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073a6:	f000 8088 	beq.w	80074ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	330c      	adds	r3, #12
 80073b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073b8:	e853 3f00 	ldrex	r3, [r3]
 80073bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80073c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	330c      	adds	r3, #12
 80073d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80073d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80073da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073e6:	e841 2300 	strex	r3, r2, [r1]
 80073ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1d9      	bne.n	80073aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3314      	adds	r3, #20
 80073fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007400:	e853 3f00 	ldrex	r3, [r3]
 8007404:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007406:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007408:	f023 0301 	bic.w	r3, r3, #1
 800740c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	3314      	adds	r3, #20
 8007416:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800741a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800741e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007420:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007422:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007426:	e841 2300 	strex	r3, r2, [r1]
 800742a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800742c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1e1      	bne.n	80073f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3314      	adds	r3, #20
 8007438:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007448:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3314      	adds	r3, #20
 8007452:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007456:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007458:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800745c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800745e:	e841 2300 	strex	r3, r2, [r1]
 8007462:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007464:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007466:	2b00      	cmp	r3, #0
 8007468:	d1e3      	bne.n	8007432 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2220      	movs	r2, #32
 800746e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	330c      	adds	r3, #12
 800747e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007482:	e853 3f00 	ldrex	r3, [r3]
 8007486:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800748a:	f023 0310 	bic.w	r3, r3, #16
 800748e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	330c      	adds	r3, #12
 8007498:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800749c:	65ba      	str	r2, [r7, #88]	; 0x58
 800749e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074a4:	e841 2300 	strex	r3, r2, [r1]
 80074a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80074aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1e3      	bne.n	8007478 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7fc fc31 	bl	8003d1c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	4619      	mov	r1, r3
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f8b6 	bl	800763c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074d0:	e099      	b.n	8007606 <HAL_UART_IRQHandler+0x50e>
 80074d2:	bf00      	nop
 80074d4:	0800771b 	.word	0x0800771b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f000 808b 	beq.w	800760a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80074f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 8086 	beq.w	800760a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	330c      	adds	r3, #12
 8007504:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007508:	e853 3f00 	ldrex	r3, [r3]
 800750c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800750e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007510:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007514:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	330c      	adds	r3, #12
 800751e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007522:	647a      	str	r2, [r7, #68]	; 0x44
 8007524:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007526:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007528:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800752a:	e841 2300 	strex	r3, r2, [r1]
 800752e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1e3      	bne.n	80074fe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	3314      	adds	r3, #20
 800753c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	e853 3f00 	ldrex	r3, [r3]
 8007544:	623b      	str	r3, [r7, #32]
   return(result);
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	f023 0301 	bic.w	r3, r3, #1
 800754c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3314      	adds	r3, #20
 8007556:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800755a:	633a      	str	r2, [r7, #48]	; 0x30
 800755c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007562:	e841 2300 	strex	r3, r2, [r1]
 8007566:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1e3      	bne.n	8007536 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2220      	movs	r2, #32
 8007572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	330c      	adds	r3, #12
 8007582:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	e853 3f00 	ldrex	r3, [r3]
 800758a:	60fb      	str	r3, [r7, #12]
   return(result);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f023 0310 	bic.w	r3, r3, #16
 8007592:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	330c      	adds	r3, #12
 800759c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80075a0:	61fa      	str	r2, [r7, #28]
 80075a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a4:	69b9      	ldr	r1, [r7, #24]
 80075a6:	69fa      	ldr	r2, [r7, #28]
 80075a8:	e841 2300 	strex	r3, r2, [r1]
 80075ac:	617b      	str	r3, [r7, #20]
   return(result);
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1e3      	bne.n	800757c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f83e 	bl	800763c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075c0:	e023      	b.n	800760a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d009      	beq.n	80075e2 <HAL_UART_IRQHandler+0x4ea>
 80075ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f8b1 	bl	8007742 <UART_Transmit_IT>
    return;
 80075e0:	e014      	b.n	800760c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00e      	beq.n	800760c <HAL_UART_IRQHandler+0x514>
 80075ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d008      	beq.n	800760c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f8f1 	bl	80077e2 <UART_EndTransmit_IT>
    return;
 8007600:	e004      	b.n	800760c <HAL_UART_IRQHandler+0x514>
    return;
 8007602:	bf00      	nop
 8007604:	e002      	b.n	800760c <HAL_UART_IRQHandler+0x514>
      return;
 8007606:	bf00      	nop
 8007608:	e000      	b.n	800760c <HAL_UART_IRQHandler+0x514>
      return;
 800760a:	bf00      	nop
  }
}
 800760c:	37e8      	adds	r7, #232	; 0xe8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop

08007614 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	460b      	mov	r3, r1
 8007646:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007654:	b480      	push	{r7}
 8007656:	b095      	sub	sp, #84	; 0x54
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	330c      	adds	r3, #12
 8007662:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007666:	e853 3f00 	ldrex	r3, [r3]
 800766a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800766c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	330c      	adds	r3, #12
 800767a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800767c:	643a      	str	r2, [r7, #64]	; 0x40
 800767e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007680:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007682:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007684:	e841 2300 	strex	r3, r2, [r1]
 8007688:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800768a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1e5      	bne.n	800765c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	3314      	adds	r3, #20
 8007696:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007698:	6a3b      	ldr	r3, [r7, #32]
 800769a:	e853 3f00 	ldrex	r3, [r3]
 800769e:	61fb      	str	r3, [r7, #28]
   return(result);
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	f023 0301 	bic.w	r3, r3, #1
 80076a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	3314      	adds	r3, #20
 80076ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076b8:	e841 2300 	strex	r3, r2, [r1]
 80076bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d1e5      	bne.n	8007690 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d119      	bne.n	8007700 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	330c      	adds	r3, #12
 80076d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	e853 3f00 	ldrex	r3, [r3]
 80076da:	60bb      	str	r3, [r7, #8]
   return(result);
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	f023 0310 	bic.w	r3, r3, #16
 80076e2:	647b      	str	r3, [r7, #68]	; 0x44
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	330c      	adds	r3, #12
 80076ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076ec:	61ba      	str	r2, [r7, #24]
 80076ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f0:	6979      	ldr	r1, [r7, #20]
 80076f2:	69ba      	ldr	r2, [r7, #24]
 80076f4:	e841 2300 	strex	r3, r2, [r1]
 80076f8:	613b      	str	r3, [r7, #16]
   return(result);
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1e5      	bne.n	80076cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2220      	movs	r2, #32
 8007704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800770e:	bf00      	nop
 8007710:	3754      	adds	r7, #84	; 0x54
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b084      	sub	sp, #16
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007726:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f7ff ff77 	bl	8007628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800773a:	bf00      	nop
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007742:	b480      	push	{r7}
 8007744:	b085      	sub	sp, #20
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b21      	cmp	r3, #33	; 0x21
 8007754:	d13e      	bne.n	80077d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800775e:	d114      	bne.n	800778a <UART_Transmit_IT+0x48>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d110      	bne.n	800778a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a1b      	ldr	r3, [r3, #32]
 800776c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	881b      	ldrh	r3, [r3, #0]
 8007772:	461a      	mov	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800777c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	1c9a      	adds	r2, r3, #2
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	621a      	str	r2, [r3, #32]
 8007788:	e008      	b.n	800779c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	1c59      	adds	r1, r3, #1
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	6211      	str	r1, [r2, #32]
 8007794:	781a      	ldrb	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	3b01      	subs	r3, #1
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	4619      	mov	r1, r3
 80077aa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10f      	bne.n	80077d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68da      	ldr	r2, [r3, #12]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68da      	ldr	r2, [r3, #12]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80077d0:	2300      	movs	r3, #0
 80077d2:	e000      	b.n	80077d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80077d4:	2302      	movs	r3, #2
  }
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b082      	sub	sp, #8
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68da      	ldr	r2, [r3, #12]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2220      	movs	r2, #32
 80077fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7ff ff06 	bl	8007614 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b08c      	sub	sp, #48	; 0x30
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b22      	cmp	r3, #34	; 0x22
 8007824:	f040 80ab 	bne.w	800797e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007830:	d117      	bne.n	8007862 <UART_Receive_IT+0x50>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d113      	bne.n	8007862 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800783a:	2300      	movs	r3, #0
 800783c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007842:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	b29b      	uxth	r3, r3
 800784c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007850:	b29a      	uxth	r2, r3
 8007852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007854:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785a:	1c9a      	adds	r2, r3, #2
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	629a      	str	r2, [r3, #40]	; 0x28
 8007860:	e026      	b.n	80078b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007866:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007868:	2300      	movs	r3, #0
 800786a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007874:	d007      	beq.n	8007886 <UART_Receive_IT+0x74>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10a      	bne.n	8007894 <UART_Receive_IT+0x82>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d106      	bne.n	8007894 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	b2da      	uxtb	r2, r3
 800788e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007890:	701a      	strb	r2, [r3, #0]
 8007892:	e008      	b.n	80078a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	b2db      	uxtb	r3, r3
 800789c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078aa:	1c5a      	adds	r2, r3, #1
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	3b01      	subs	r3, #1
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	4619      	mov	r1, r3
 80078be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d15a      	bne.n	800797a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68da      	ldr	r2, [r3, #12]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f022 0220 	bic.w	r2, r2, #32
 80078d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68da      	ldr	r2, [r3, #12]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	695a      	ldr	r2, [r3, #20]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 0201 	bic.w	r2, r2, #1
 80078f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2220      	movs	r2, #32
 80078f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007900:	2b01      	cmp	r3, #1
 8007902:	d135      	bne.n	8007970 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	330c      	adds	r3, #12
 8007910:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	e853 3f00 	ldrex	r3, [r3]
 8007918:	613b      	str	r3, [r7, #16]
   return(result);
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	f023 0310 	bic.w	r3, r3, #16
 8007920:	627b      	str	r3, [r7, #36]	; 0x24
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	330c      	adds	r3, #12
 8007928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800792a:	623a      	str	r2, [r7, #32]
 800792c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792e:	69f9      	ldr	r1, [r7, #28]
 8007930:	6a3a      	ldr	r2, [r7, #32]
 8007932:	e841 2300 	strex	r3, r2, [r1]
 8007936:	61bb      	str	r3, [r7, #24]
   return(result);
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1e5      	bne.n	800790a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0310 	and.w	r3, r3, #16
 8007948:	2b10      	cmp	r3, #16
 800794a:	d10a      	bne.n	8007962 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800794c:	2300      	movs	r3, #0
 800794e:	60fb      	str	r3, [r7, #12]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	60fb      	str	r3, [r7, #12]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	60fb      	str	r3, [r7, #12]
 8007960:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f7ff fe67 	bl	800763c <HAL_UARTEx_RxEventCallback>
 800796e:	e002      	b.n	8007976 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7fa fa03 	bl	8001d7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	e002      	b.n	8007980 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	e000      	b.n	8007980 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800797e:	2302      	movs	r3, #2
  }
}
 8007980:	4618      	mov	r0, r3
 8007982:	3730      	adds	r7, #48	; 0x30
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798c:	b09f      	sub	sp, #124	; 0x7c
 800798e:	af00      	add	r7, sp, #0
 8007990:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800799c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800799e:	68d9      	ldr	r1, [r3, #12]
 80079a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	ea40 0301 	orr.w	r3, r0, r1
 80079a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80079aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ac:	689a      	ldr	r2, [r3, #8]
 80079ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	431a      	orrs	r2, r3
 80079b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	431a      	orrs	r2, r3
 80079ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	4313      	orrs	r3, r2
 80079c0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80079c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80079cc:	f021 010c 	bic.w	r1, r1, #12
 80079d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079d6:	430b      	orrs	r3, r1
 80079d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80079e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079e6:	6999      	ldr	r1, [r3, #24]
 80079e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	ea40 0301 	orr.w	r3, r0, r1
 80079f0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	4bc5      	ldr	r3, [pc, #788]	; (8007d0c <UART_SetConfig+0x384>)
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d004      	beq.n	8007a06 <UART_SetConfig+0x7e>
 80079fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	4bc3      	ldr	r3, [pc, #780]	; (8007d10 <UART_SetConfig+0x388>)
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d103      	bne.n	8007a0e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a06:	f7fd fcbb 	bl	8005380 <HAL_RCC_GetPCLK2Freq>
 8007a0a:	6778      	str	r0, [r7, #116]	; 0x74
 8007a0c:	e002      	b.n	8007a14 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a0e:	f7fd fca3 	bl	8005358 <HAL_RCC_GetPCLK1Freq>
 8007a12:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a16:	69db      	ldr	r3, [r3, #28]
 8007a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a1c:	f040 80b6 	bne.w	8007b8c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a22:	461c      	mov	r4, r3
 8007a24:	f04f 0500 	mov.w	r5, #0
 8007a28:	4622      	mov	r2, r4
 8007a2a:	462b      	mov	r3, r5
 8007a2c:	1891      	adds	r1, r2, r2
 8007a2e:	6439      	str	r1, [r7, #64]	; 0x40
 8007a30:	415b      	adcs	r3, r3
 8007a32:	647b      	str	r3, [r7, #68]	; 0x44
 8007a34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a38:	1912      	adds	r2, r2, r4
 8007a3a:	eb45 0303 	adc.w	r3, r5, r3
 8007a3e:	f04f 0000 	mov.w	r0, #0
 8007a42:	f04f 0100 	mov.w	r1, #0
 8007a46:	00d9      	lsls	r1, r3, #3
 8007a48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a4c:	00d0      	lsls	r0, r2, #3
 8007a4e:	4602      	mov	r2, r0
 8007a50:	460b      	mov	r3, r1
 8007a52:	1911      	adds	r1, r2, r4
 8007a54:	6639      	str	r1, [r7, #96]	; 0x60
 8007a56:	416b      	adcs	r3, r5
 8007a58:	667b      	str	r3, [r7, #100]	; 0x64
 8007a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	f04f 0300 	mov.w	r3, #0
 8007a64:	1891      	adds	r1, r2, r2
 8007a66:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a68:	415b      	adcs	r3, r3
 8007a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a70:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007a74:	f7f9 f822 	bl	8000abc <__aeabi_uldivmod>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	4ba5      	ldr	r3, [pc, #660]	; (8007d14 <UART_SetConfig+0x38c>)
 8007a7e:	fba3 2302 	umull	r2, r3, r3, r2
 8007a82:	095b      	lsrs	r3, r3, #5
 8007a84:	011e      	lsls	r6, r3, #4
 8007a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a88:	461c      	mov	r4, r3
 8007a8a:	f04f 0500 	mov.w	r5, #0
 8007a8e:	4622      	mov	r2, r4
 8007a90:	462b      	mov	r3, r5
 8007a92:	1891      	adds	r1, r2, r2
 8007a94:	6339      	str	r1, [r7, #48]	; 0x30
 8007a96:	415b      	adcs	r3, r3
 8007a98:	637b      	str	r3, [r7, #52]	; 0x34
 8007a9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007a9e:	1912      	adds	r2, r2, r4
 8007aa0:	eb45 0303 	adc.w	r3, r5, r3
 8007aa4:	f04f 0000 	mov.w	r0, #0
 8007aa8:	f04f 0100 	mov.w	r1, #0
 8007aac:	00d9      	lsls	r1, r3, #3
 8007aae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ab2:	00d0      	lsls	r0, r2, #3
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	1911      	adds	r1, r2, r4
 8007aba:	65b9      	str	r1, [r7, #88]	; 0x58
 8007abc:	416b      	adcs	r3, r5
 8007abe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	f04f 0300 	mov.w	r3, #0
 8007aca:	1891      	adds	r1, r2, r2
 8007acc:	62b9      	str	r1, [r7, #40]	; 0x28
 8007ace:	415b      	adcs	r3, r3
 8007ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ad2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ad6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007ada:	f7f8 ffef 	bl	8000abc <__aeabi_uldivmod>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	4b8c      	ldr	r3, [pc, #560]	; (8007d14 <UART_SetConfig+0x38c>)
 8007ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ae8:	095b      	lsrs	r3, r3, #5
 8007aea:	2164      	movs	r1, #100	; 0x64
 8007aec:	fb01 f303 	mul.w	r3, r1, r3
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	00db      	lsls	r3, r3, #3
 8007af4:	3332      	adds	r3, #50	; 0x32
 8007af6:	4a87      	ldr	r2, [pc, #540]	; (8007d14 <UART_SetConfig+0x38c>)
 8007af8:	fba2 2303 	umull	r2, r3, r2, r3
 8007afc:	095b      	lsrs	r3, r3, #5
 8007afe:	005b      	lsls	r3, r3, #1
 8007b00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b04:	441e      	add	r6, r3
 8007b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f04f 0100 	mov.w	r1, #0
 8007b0e:	4602      	mov	r2, r0
 8007b10:	460b      	mov	r3, r1
 8007b12:	1894      	adds	r4, r2, r2
 8007b14:	623c      	str	r4, [r7, #32]
 8007b16:	415b      	adcs	r3, r3
 8007b18:	627b      	str	r3, [r7, #36]	; 0x24
 8007b1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b1e:	1812      	adds	r2, r2, r0
 8007b20:	eb41 0303 	adc.w	r3, r1, r3
 8007b24:	f04f 0400 	mov.w	r4, #0
 8007b28:	f04f 0500 	mov.w	r5, #0
 8007b2c:	00dd      	lsls	r5, r3, #3
 8007b2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b32:	00d4      	lsls	r4, r2, #3
 8007b34:	4622      	mov	r2, r4
 8007b36:	462b      	mov	r3, r5
 8007b38:	1814      	adds	r4, r2, r0
 8007b3a:	653c      	str	r4, [r7, #80]	; 0x50
 8007b3c:	414b      	adcs	r3, r1
 8007b3e:	657b      	str	r3, [r7, #84]	; 0x54
 8007b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	461a      	mov	r2, r3
 8007b46:	f04f 0300 	mov.w	r3, #0
 8007b4a:	1891      	adds	r1, r2, r2
 8007b4c:	61b9      	str	r1, [r7, #24]
 8007b4e:	415b      	adcs	r3, r3
 8007b50:	61fb      	str	r3, [r7, #28]
 8007b52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b56:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007b5a:	f7f8 ffaf 	bl	8000abc <__aeabi_uldivmod>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	460b      	mov	r3, r1
 8007b62:	4b6c      	ldr	r3, [pc, #432]	; (8007d14 <UART_SetConfig+0x38c>)
 8007b64:	fba3 1302 	umull	r1, r3, r3, r2
 8007b68:	095b      	lsrs	r3, r3, #5
 8007b6a:	2164      	movs	r1, #100	; 0x64
 8007b6c:	fb01 f303 	mul.w	r3, r1, r3
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	00db      	lsls	r3, r3, #3
 8007b74:	3332      	adds	r3, #50	; 0x32
 8007b76:	4a67      	ldr	r2, [pc, #412]	; (8007d14 <UART_SetConfig+0x38c>)
 8007b78:	fba2 2303 	umull	r2, r3, r2, r3
 8007b7c:	095b      	lsrs	r3, r3, #5
 8007b7e:	f003 0207 	and.w	r2, r3, #7
 8007b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4432      	add	r2, r6
 8007b88:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b8a:	e0b9      	b.n	8007d00 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b8e:	461c      	mov	r4, r3
 8007b90:	f04f 0500 	mov.w	r5, #0
 8007b94:	4622      	mov	r2, r4
 8007b96:	462b      	mov	r3, r5
 8007b98:	1891      	adds	r1, r2, r2
 8007b9a:	6139      	str	r1, [r7, #16]
 8007b9c:	415b      	adcs	r3, r3
 8007b9e:	617b      	str	r3, [r7, #20]
 8007ba0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007ba4:	1912      	adds	r2, r2, r4
 8007ba6:	eb45 0303 	adc.w	r3, r5, r3
 8007baa:	f04f 0000 	mov.w	r0, #0
 8007bae:	f04f 0100 	mov.w	r1, #0
 8007bb2:	00d9      	lsls	r1, r3, #3
 8007bb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007bb8:	00d0      	lsls	r0, r2, #3
 8007bba:	4602      	mov	r2, r0
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	eb12 0804 	adds.w	r8, r2, r4
 8007bc2:	eb43 0905 	adc.w	r9, r3, r5
 8007bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f04f 0100 	mov.w	r1, #0
 8007bd0:	f04f 0200 	mov.w	r2, #0
 8007bd4:	f04f 0300 	mov.w	r3, #0
 8007bd8:	008b      	lsls	r3, r1, #2
 8007bda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007bde:	0082      	lsls	r2, r0, #2
 8007be0:	4640      	mov	r0, r8
 8007be2:	4649      	mov	r1, r9
 8007be4:	f7f8 ff6a 	bl	8000abc <__aeabi_uldivmod>
 8007be8:	4602      	mov	r2, r0
 8007bea:	460b      	mov	r3, r1
 8007bec:	4b49      	ldr	r3, [pc, #292]	; (8007d14 <UART_SetConfig+0x38c>)
 8007bee:	fba3 2302 	umull	r2, r3, r3, r2
 8007bf2:	095b      	lsrs	r3, r3, #5
 8007bf4:	011e      	lsls	r6, r3, #4
 8007bf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f04f 0100 	mov.w	r1, #0
 8007bfe:	4602      	mov	r2, r0
 8007c00:	460b      	mov	r3, r1
 8007c02:	1894      	adds	r4, r2, r2
 8007c04:	60bc      	str	r4, [r7, #8]
 8007c06:	415b      	adcs	r3, r3
 8007c08:	60fb      	str	r3, [r7, #12]
 8007c0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c0e:	1812      	adds	r2, r2, r0
 8007c10:	eb41 0303 	adc.w	r3, r1, r3
 8007c14:	f04f 0400 	mov.w	r4, #0
 8007c18:	f04f 0500 	mov.w	r5, #0
 8007c1c:	00dd      	lsls	r5, r3, #3
 8007c1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007c22:	00d4      	lsls	r4, r2, #3
 8007c24:	4622      	mov	r2, r4
 8007c26:	462b      	mov	r3, r5
 8007c28:	1814      	adds	r4, r2, r0
 8007c2a:	64bc      	str	r4, [r7, #72]	; 0x48
 8007c2c:	414b      	adcs	r3, r1
 8007c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f04f 0100 	mov.w	r1, #0
 8007c3a:	f04f 0200 	mov.w	r2, #0
 8007c3e:	f04f 0300 	mov.w	r3, #0
 8007c42:	008b      	lsls	r3, r1, #2
 8007c44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007c48:	0082      	lsls	r2, r0, #2
 8007c4a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007c4e:	f7f8 ff35 	bl	8000abc <__aeabi_uldivmod>
 8007c52:	4602      	mov	r2, r0
 8007c54:	460b      	mov	r3, r1
 8007c56:	4b2f      	ldr	r3, [pc, #188]	; (8007d14 <UART_SetConfig+0x38c>)
 8007c58:	fba3 1302 	umull	r1, r3, r3, r2
 8007c5c:	095b      	lsrs	r3, r3, #5
 8007c5e:	2164      	movs	r1, #100	; 0x64
 8007c60:	fb01 f303 	mul.w	r3, r1, r3
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	011b      	lsls	r3, r3, #4
 8007c68:	3332      	adds	r3, #50	; 0x32
 8007c6a:	4a2a      	ldr	r2, [pc, #168]	; (8007d14 <UART_SetConfig+0x38c>)
 8007c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c70:	095b      	lsrs	r3, r3, #5
 8007c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c76:	441e      	add	r6, r3
 8007c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f04f 0100 	mov.w	r1, #0
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	1894      	adds	r4, r2, r2
 8007c86:	603c      	str	r4, [r7, #0]
 8007c88:	415b      	adcs	r3, r3
 8007c8a:	607b      	str	r3, [r7, #4]
 8007c8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c90:	1812      	adds	r2, r2, r0
 8007c92:	eb41 0303 	adc.w	r3, r1, r3
 8007c96:	f04f 0400 	mov.w	r4, #0
 8007c9a:	f04f 0500 	mov.w	r5, #0
 8007c9e:	00dd      	lsls	r5, r3, #3
 8007ca0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ca4:	00d4      	lsls	r4, r2, #3
 8007ca6:	4622      	mov	r2, r4
 8007ca8:	462b      	mov	r3, r5
 8007caa:	eb12 0a00 	adds.w	sl, r2, r0
 8007cae:	eb43 0b01 	adc.w	fp, r3, r1
 8007cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f04f 0100 	mov.w	r1, #0
 8007cbc:	f04f 0200 	mov.w	r2, #0
 8007cc0:	f04f 0300 	mov.w	r3, #0
 8007cc4:	008b      	lsls	r3, r1, #2
 8007cc6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007cca:	0082      	lsls	r2, r0, #2
 8007ccc:	4650      	mov	r0, sl
 8007cce:	4659      	mov	r1, fp
 8007cd0:	f7f8 fef4 	bl	8000abc <__aeabi_uldivmod>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	4b0e      	ldr	r3, [pc, #56]	; (8007d14 <UART_SetConfig+0x38c>)
 8007cda:	fba3 1302 	umull	r1, r3, r3, r2
 8007cde:	095b      	lsrs	r3, r3, #5
 8007ce0:	2164      	movs	r1, #100	; 0x64
 8007ce2:	fb01 f303 	mul.w	r3, r1, r3
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	011b      	lsls	r3, r3, #4
 8007cea:	3332      	adds	r3, #50	; 0x32
 8007cec:	4a09      	ldr	r2, [pc, #36]	; (8007d14 <UART_SetConfig+0x38c>)
 8007cee:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf2:	095b      	lsrs	r3, r3, #5
 8007cf4:	f003 020f 	and.w	r2, r3, #15
 8007cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4432      	add	r2, r6
 8007cfe:	609a      	str	r2, [r3, #8]
}
 8007d00:	bf00      	nop
 8007d02:	377c      	adds	r7, #124	; 0x7c
 8007d04:	46bd      	mov	sp, r7
 8007d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d0a:	bf00      	nop
 8007d0c:	40011000 	.word	0x40011000
 8007d10:	40011400 	.word	0x40011400
 8007d14:	51eb851f 	.word	0x51eb851f

08007d18 <__libc_init_array>:
 8007d18:	b570      	push	{r4, r5, r6, lr}
 8007d1a:	4d0d      	ldr	r5, [pc, #52]	; (8007d50 <__libc_init_array+0x38>)
 8007d1c:	4c0d      	ldr	r4, [pc, #52]	; (8007d54 <__libc_init_array+0x3c>)
 8007d1e:	1b64      	subs	r4, r4, r5
 8007d20:	10a4      	asrs	r4, r4, #2
 8007d22:	2600      	movs	r6, #0
 8007d24:	42a6      	cmp	r6, r4
 8007d26:	d109      	bne.n	8007d3c <__libc_init_array+0x24>
 8007d28:	4d0b      	ldr	r5, [pc, #44]	; (8007d58 <__libc_init_array+0x40>)
 8007d2a:	4c0c      	ldr	r4, [pc, #48]	; (8007d5c <__libc_init_array+0x44>)
 8007d2c:	f000 f820 	bl	8007d70 <_init>
 8007d30:	1b64      	subs	r4, r4, r5
 8007d32:	10a4      	asrs	r4, r4, #2
 8007d34:	2600      	movs	r6, #0
 8007d36:	42a6      	cmp	r6, r4
 8007d38:	d105      	bne.n	8007d46 <__libc_init_array+0x2e>
 8007d3a:	bd70      	pop	{r4, r5, r6, pc}
 8007d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d40:	4798      	blx	r3
 8007d42:	3601      	adds	r6, #1
 8007d44:	e7ee      	b.n	8007d24 <__libc_init_array+0xc>
 8007d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d4a:	4798      	blx	r3
 8007d4c:	3601      	adds	r6, #1
 8007d4e:	e7f2      	b.n	8007d36 <__libc_init_array+0x1e>
 8007d50:	08007db0 	.word	0x08007db0
 8007d54:	08007db0 	.word	0x08007db0
 8007d58:	08007db0 	.word	0x08007db0
 8007d5c:	08007db4 	.word	0x08007db4

08007d60 <memset>:
 8007d60:	4402      	add	r2, r0
 8007d62:	4603      	mov	r3, r0
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d100      	bne.n	8007d6a <memset+0xa>
 8007d68:	4770      	bx	lr
 8007d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d6e:	e7f9      	b.n	8007d64 <memset+0x4>

08007d70 <_init>:
 8007d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d72:	bf00      	nop
 8007d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d76:	bc08      	pop	{r3}
 8007d78:	469e      	mov	lr, r3
 8007d7a:	4770      	bx	lr

08007d7c <_fini>:
 8007d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7e:	bf00      	nop
 8007d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d82:	bc08      	pop	{r3}
 8007d84:	469e      	mov	lr, r3
 8007d86:	4770      	bx	lr
