
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070a0  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007250  08007250  00017250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072b8  080072b8  00020124  2**0
                  CONTENTS
  4 .ARM          00000008  080072b8  080072b8  000172b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072c0  080072c0  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072c0  080072c0  000172c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072c4  080072c4  000172c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  080072c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000728  20000128  080073ec  00020128  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000850  080073ec  00020850  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121b6  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002428  00000000  00000000  0003230a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001178  00000000  00000000  00034738  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001078  00000000  00000000  000358b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024986  00000000  00000000  00036928  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d37f  00000000  00000000  0005b2ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dedf5  00000000  00000000  0006862d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00147422  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dcc  00000000  00000000  001474a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000128 	.word	0x20000128
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007238 	.word	0x08007238

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000012c 	.word	0x2000012c
 80001ec:	08007238 	.word	0x08007238

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_uldivmod>:
 8000b18:	b953      	cbnz	r3, 8000b30 <__aeabi_uldivmod+0x18>
 8000b1a:	b94a      	cbnz	r2, 8000b30 <__aeabi_uldivmod+0x18>
 8000b1c:	2900      	cmp	r1, #0
 8000b1e:	bf08      	it	eq
 8000b20:	2800      	cmpeq	r0, #0
 8000b22:	bf1c      	itt	ne
 8000b24:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b28:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b2c:	f000 b972 	b.w	8000e14 <__aeabi_idiv0>
 8000b30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b38:	f000 f806 	bl	8000b48 <__udivmoddi4>
 8000b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b44:	b004      	add	sp, #16
 8000b46:	4770      	bx	lr

08000b48 <__udivmoddi4>:
 8000b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b4c:	9e08      	ldr	r6, [sp, #32]
 8000b4e:	4604      	mov	r4, r0
 8000b50:	4688      	mov	r8, r1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d14b      	bne.n	8000bee <__udivmoddi4+0xa6>
 8000b56:	428a      	cmp	r2, r1
 8000b58:	4615      	mov	r5, r2
 8000b5a:	d967      	bls.n	8000c2c <__udivmoddi4+0xe4>
 8000b5c:	fab2 f282 	clz	r2, r2
 8000b60:	b14a      	cbz	r2, 8000b76 <__udivmoddi4+0x2e>
 8000b62:	f1c2 0720 	rsb	r7, r2, #32
 8000b66:	fa01 f302 	lsl.w	r3, r1, r2
 8000b6a:	fa20 f707 	lsr.w	r7, r0, r7
 8000b6e:	4095      	lsls	r5, r2
 8000b70:	ea47 0803 	orr.w	r8, r7, r3
 8000b74:	4094      	lsls	r4, r2
 8000b76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b7a:	0c23      	lsrs	r3, r4, #16
 8000b7c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b80:	fa1f fc85 	uxth.w	ip, r5
 8000b84:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b88:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b8c:	fb07 f10c 	mul.w	r1, r7, ip
 8000b90:	4299      	cmp	r1, r3
 8000b92:	d909      	bls.n	8000ba8 <__udivmoddi4+0x60>
 8000b94:	18eb      	adds	r3, r5, r3
 8000b96:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b9a:	f080 811b 	bcs.w	8000dd4 <__udivmoddi4+0x28c>
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	f240 8118 	bls.w	8000dd4 <__udivmoddi4+0x28c>
 8000ba4:	3f02      	subs	r7, #2
 8000ba6:	442b      	add	r3, r5
 8000ba8:	1a5b      	subs	r3, r3, r1
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bb0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bbc:	45a4      	cmp	ip, r4
 8000bbe:	d909      	bls.n	8000bd4 <__udivmoddi4+0x8c>
 8000bc0:	192c      	adds	r4, r5, r4
 8000bc2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bc6:	f080 8107 	bcs.w	8000dd8 <__udivmoddi4+0x290>
 8000bca:	45a4      	cmp	ip, r4
 8000bcc:	f240 8104 	bls.w	8000dd8 <__udivmoddi4+0x290>
 8000bd0:	3802      	subs	r0, #2
 8000bd2:	442c      	add	r4, r5
 8000bd4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bd8:	eba4 040c 	sub.w	r4, r4, ip
 8000bdc:	2700      	movs	r7, #0
 8000bde:	b11e      	cbz	r6, 8000be8 <__udivmoddi4+0xa0>
 8000be0:	40d4      	lsrs	r4, r2
 8000be2:	2300      	movs	r3, #0
 8000be4:	e9c6 4300 	strd	r4, r3, [r6]
 8000be8:	4639      	mov	r1, r7
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	428b      	cmp	r3, r1
 8000bf0:	d909      	bls.n	8000c06 <__udivmoddi4+0xbe>
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	f000 80eb 	beq.w	8000dce <__udivmoddi4+0x286>
 8000bf8:	2700      	movs	r7, #0
 8000bfa:	e9c6 0100 	strd	r0, r1, [r6]
 8000bfe:	4638      	mov	r0, r7
 8000c00:	4639      	mov	r1, r7
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	fab3 f783 	clz	r7, r3
 8000c0a:	2f00      	cmp	r7, #0
 8000c0c:	d147      	bne.n	8000c9e <__udivmoddi4+0x156>
 8000c0e:	428b      	cmp	r3, r1
 8000c10:	d302      	bcc.n	8000c18 <__udivmoddi4+0xd0>
 8000c12:	4282      	cmp	r2, r0
 8000c14:	f200 80fa 	bhi.w	8000e0c <__udivmoddi4+0x2c4>
 8000c18:	1a84      	subs	r4, r0, r2
 8000c1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c1e:	2001      	movs	r0, #1
 8000c20:	4698      	mov	r8, r3
 8000c22:	2e00      	cmp	r6, #0
 8000c24:	d0e0      	beq.n	8000be8 <__udivmoddi4+0xa0>
 8000c26:	e9c6 4800 	strd	r4, r8, [r6]
 8000c2a:	e7dd      	b.n	8000be8 <__udivmoddi4+0xa0>
 8000c2c:	b902      	cbnz	r2, 8000c30 <__udivmoddi4+0xe8>
 8000c2e:	deff      	udf	#255	; 0xff
 8000c30:	fab2 f282 	clz	r2, r2
 8000c34:	2a00      	cmp	r2, #0
 8000c36:	f040 808f 	bne.w	8000d58 <__udivmoddi4+0x210>
 8000c3a:	1b49      	subs	r1, r1, r5
 8000c3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c40:	fa1f f885 	uxth.w	r8, r5
 8000c44:	2701      	movs	r7, #1
 8000c46:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c54:	fb08 f10c 	mul.w	r1, r8, ip
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0x124>
 8000c5c:	18eb      	adds	r3, r5, r3
 8000c5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0x122>
 8000c64:	4299      	cmp	r1, r3
 8000c66:	f200 80cd 	bhi.w	8000e04 <__udivmoddi4+0x2bc>
 8000c6a:	4684      	mov	ip, r0
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	b2a3      	uxth	r3, r4
 8000c70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c74:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c78:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c7c:	fb08 f800 	mul.w	r8, r8, r0
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x14c>
 8000c84:	192c      	adds	r4, r5, r4
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x14a>
 8000c8c:	45a0      	cmp	r8, r4
 8000c8e:	f200 80b6 	bhi.w	8000dfe <__udivmoddi4+0x2b6>
 8000c92:	4618      	mov	r0, r3
 8000c94:	eba4 0408 	sub.w	r4, r4, r8
 8000c98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c9c:	e79f      	b.n	8000bde <__udivmoddi4+0x96>
 8000c9e:	f1c7 0c20 	rsb	ip, r7, #32
 8000ca2:	40bb      	lsls	r3, r7
 8000ca4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ca8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cac:	fa01 f407 	lsl.w	r4, r1, r7
 8000cb0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cb4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cb8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cbc:	4325      	orrs	r5, r4
 8000cbe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cc2:	0c2c      	lsrs	r4, r5, #16
 8000cc4:	fb08 3319 	mls	r3, r8, r9, r3
 8000cc8:	fa1f fa8e 	uxth.w	sl, lr
 8000ccc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cd0:	fb09 f40a 	mul.w	r4, r9, sl
 8000cd4:	429c      	cmp	r4, r3
 8000cd6:	fa02 f207 	lsl.w	r2, r2, r7
 8000cda:	fa00 f107 	lsl.w	r1, r0, r7
 8000cde:	d90b      	bls.n	8000cf8 <__udivmoddi4+0x1b0>
 8000ce0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ce4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ce8:	f080 8087 	bcs.w	8000dfa <__udivmoddi4+0x2b2>
 8000cec:	429c      	cmp	r4, r3
 8000cee:	f240 8084 	bls.w	8000dfa <__udivmoddi4+0x2b2>
 8000cf2:	f1a9 0902 	sub.w	r9, r9, #2
 8000cf6:	4473      	add	r3, lr
 8000cf8:	1b1b      	subs	r3, r3, r4
 8000cfa:	b2ad      	uxth	r5, r5
 8000cfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d00:	fb08 3310 	mls	r3, r8, r0, r3
 8000d04:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d08:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d0c:	45a2      	cmp	sl, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x1da>
 8000d10:	eb1e 0404 	adds.w	r4, lr, r4
 8000d14:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d18:	d26b      	bcs.n	8000df2 <__udivmoddi4+0x2aa>
 8000d1a:	45a2      	cmp	sl, r4
 8000d1c:	d969      	bls.n	8000df2 <__udivmoddi4+0x2aa>
 8000d1e:	3802      	subs	r0, #2
 8000d20:	4474      	add	r4, lr
 8000d22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d26:	fba0 8902 	umull	r8, r9, r0, r2
 8000d2a:	eba4 040a 	sub.w	r4, r4, sl
 8000d2e:	454c      	cmp	r4, r9
 8000d30:	46c2      	mov	sl, r8
 8000d32:	464b      	mov	r3, r9
 8000d34:	d354      	bcc.n	8000de0 <__udivmoddi4+0x298>
 8000d36:	d051      	beq.n	8000ddc <__udivmoddi4+0x294>
 8000d38:	2e00      	cmp	r6, #0
 8000d3a:	d069      	beq.n	8000e10 <__udivmoddi4+0x2c8>
 8000d3c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d40:	eb64 0403 	sbc.w	r4, r4, r3
 8000d44:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d48:	40fd      	lsrs	r5, r7
 8000d4a:	40fc      	lsrs	r4, r7
 8000d4c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d50:	e9c6 5400 	strd	r5, r4, [r6]
 8000d54:	2700      	movs	r7, #0
 8000d56:	e747      	b.n	8000be8 <__udivmoddi4+0xa0>
 8000d58:	f1c2 0320 	rsb	r3, r2, #32
 8000d5c:	fa20 f703 	lsr.w	r7, r0, r3
 8000d60:	4095      	lsls	r5, r2
 8000d62:	fa01 f002 	lsl.w	r0, r1, r2
 8000d66:	fa21 f303 	lsr.w	r3, r1, r3
 8000d6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d6e:	4338      	orrs	r0, r7
 8000d70:	0c01      	lsrs	r1, r0, #16
 8000d72:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d76:	fa1f f885 	uxth.w	r8, r5
 8000d7a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d82:	fb07 f308 	mul.w	r3, r7, r8
 8000d86:	428b      	cmp	r3, r1
 8000d88:	fa04 f402 	lsl.w	r4, r4, r2
 8000d8c:	d907      	bls.n	8000d9e <__udivmoddi4+0x256>
 8000d8e:	1869      	adds	r1, r5, r1
 8000d90:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d94:	d22f      	bcs.n	8000df6 <__udivmoddi4+0x2ae>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d92d      	bls.n	8000df6 <__udivmoddi4+0x2ae>
 8000d9a:	3f02      	subs	r7, #2
 8000d9c:	4429      	add	r1, r5
 8000d9e:	1acb      	subs	r3, r1, r3
 8000da0:	b281      	uxth	r1, r0
 8000da2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000da6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000daa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dae:	fb00 f308 	mul.w	r3, r0, r8
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x27e>
 8000db6:	1869      	adds	r1, r5, r1
 8000db8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dbc:	d217      	bcs.n	8000dee <__udivmoddi4+0x2a6>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d915      	bls.n	8000dee <__udivmoddi4+0x2a6>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	4429      	add	r1, r5
 8000dc6:	1ac9      	subs	r1, r1, r3
 8000dc8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dcc:	e73b      	b.n	8000c46 <__udivmoddi4+0xfe>
 8000dce:	4637      	mov	r7, r6
 8000dd0:	4630      	mov	r0, r6
 8000dd2:	e709      	b.n	8000be8 <__udivmoddi4+0xa0>
 8000dd4:	4607      	mov	r7, r0
 8000dd6:	e6e7      	b.n	8000ba8 <__udivmoddi4+0x60>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6fb      	b.n	8000bd4 <__udivmoddi4+0x8c>
 8000ddc:	4541      	cmp	r1, r8
 8000dde:	d2ab      	bcs.n	8000d38 <__udivmoddi4+0x1f0>
 8000de0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000de4:	eb69 020e 	sbc.w	r2, r9, lr
 8000de8:	3801      	subs	r0, #1
 8000dea:	4613      	mov	r3, r2
 8000dec:	e7a4      	b.n	8000d38 <__udivmoddi4+0x1f0>
 8000dee:	4660      	mov	r0, ip
 8000df0:	e7e9      	b.n	8000dc6 <__udivmoddi4+0x27e>
 8000df2:	4618      	mov	r0, r3
 8000df4:	e795      	b.n	8000d22 <__udivmoddi4+0x1da>
 8000df6:	4667      	mov	r7, ip
 8000df8:	e7d1      	b.n	8000d9e <__udivmoddi4+0x256>
 8000dfa:	4681      	mov	r9, r0
 8000dfc:	e77c      	b.n	8000cf8 <__udivmoddi4+0x1b0>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	442c      	add	r4, r5
 8000e02:	e747      	b.n	8000c94 <__udivmoddi4+0x14c>
 8000e04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e08:	442b      	add	r3, r5
 8000e0a:	e72f      	b.n	8000c6c <__udivmoddi4+0x124>
 8000e0c:	4638      	mov	r0, r7
 8000e0e:	e708      	b.n	8000c22 <__udivmoddi4+0xda>
 8000e10:	4637      	mov	r7, r6
 8000e12:	e6e9      	b.n	8000be8 <__udivmoddi4+0xa0>

08000e14 <__aeabi_idiv0>:
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop

08000e18 <ADC_Read>:
//		      HAL_Delay(5000);
}


void ADC_Read(int16_t *data)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 8000e20:	2200      	movs	r2, #0
 8000e22:	2110      	movs	r1, #16
 8000e24:	4808      	ldr	r0, [pc, #32]	; (8000e48 <ADC_Read+0x30>)
 8000e26:	f002 faf7 	bl	8003418 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	2208      	movs	r2, #8
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	4806      	ldr	r0, [pc, #24]	; (8000e4c <ADC_Read+0x34>)
 8000e32:	f003 fe95 	bl	8004b60 <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 8000e36:	2201      	movs	r2, #1
 8000e38:	2110      	movs	r1, #16
 8000e3a:	4803      	ldr	r0, [pc, #12]	; (8000e48 <ADC_Read+0x30>)
 8000e3c:	f002 faec 	bl	8003418 <HAL_GPIO_WritePin>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	20000148 	.word	0x20000148

08000e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e56:	f001 fc8b 	bl	8002770 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5a:	f000 f877 	bl	8000f4c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 8000e5e:	f003 fde7 	bl	8004a30 <HAL_RCC_GetHCLKFreq>
 8000e62:	4602      	mov	r2, r0
 8000e64:	4b33      	ldr	r3, [pc, #204]	; (8000f34 <main+0xe4>)
 8000e66:	fba3 2302 	umull	r2, r3, r3, r2
 8000e6a:	099b      	lsrs	r3, r3, #6
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 fe18 	bl	8002aa2 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000e72:	2004      	movs	r0, #4
 8000e74:	f001 fe22 	bl	8002abc <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e80:	f001 fde5 	bl	8002a4e <HAL_NVIC_SetPriority>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e84:	f000 fb72 	bl	800156c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e88:	f000 fb50 	bl	800152c <MX_DMA_Init>
  MX_I2C1_Init();
 8000e8c:	f000 f8ce 	bl	800102c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000e90:	f000 f90c 	bl	80010ac <MX_SPI1_Init>
  MX_SPI2_Init();
 8000e94:	f000 f942 	bl	800111c <MX_SPI2_Init>
  MX_TIM1_Init();
 8000e98:	f000 f976 	bl	8001188 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e9c:	f000 fa20 	bl	80012e0 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8000ea0:	f000 fb1a 	bl	80014d8 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000ea4:	f000 fa96 	bl	80013d4 <MX_TIM3_Init>
////  encoder_Init();
////  DWT_Init();
//  while(MPU6050_Init(&hi2c1)==1);

//  //Start wheel pwm pin
  HAL_TIM_Base_Start(&MOTOR_TIM);
 8000ea8:	4823      	ldr	r0, [pc, #140]	; (8000f38 <main+0xe8>)
 8000eaa:	f004 fa40 	bl	800532e <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_1);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4821      	ldr	r0, [pc, #132]	; (8000f38 <main+0xe8>)
 8000eb2:	f004 fa95 	bl	80053e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_2);
 8000eb6:	2104      	movs	r1, #4
 8000eb8:	481f      	ldr	r0, [pc, #124]	; (8000f38 <main+0xe8>)
 8000eba:	f004 fa91 	bl	80053e0 <HAL_TIM_PWM_Start>
  MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = 1500;
 8000ebe:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <main+0xe8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000ec6:	639a      	str	r2, [r3, #56]	; 0x38
    	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = 1500;
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <main+0xe8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000ed0:	635a      	str	r2, [r3, #52]	; 0x34

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t prev_time = HAL_GetTick();
 8000ed2:	f001 fcb3 	bl	800283c <HAL_GetTick>
 8000ed6:	6078      	str	r0, [r7, #4]
  while (1)
  {
      count++;
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <main+0xec>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	4a17      	ldr	r2, [pc, #92]	; (8000f3c <main+0xec>)
 8000ee0:	6013      	str	r3, [r2, #0]
      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2108      	movs	r1, #8
 8000ee6:	4816      	ldr	r0, [pc, #88]	; (8000f40 <main+0xf0>)
 8000ee8:	f002 fa96 	bl	8003418 <HAL_GPIO_WritePin>
      HAL_Delay(500);
 8000eec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ef0:	f001 fcb0 	bl	8002854 <HAL_Delay>
      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2108      	movs	r1, #8
 8000ef8:	4811      	ldr	r0, [pc, #68]	; (8000f40 <main+0xf0>)
 8000efa:	f002 fa8d 	bl	8003418 <HAL_GPIO_WritePin>
      HAL_Delay(500);
 8000efe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f02:	f001 fca7 	bl	8002854 <HAL_Delay>

      //Read joystick value
//      ADC_DataRequest();.

      //Get kamlan filtered angle from MPU6050
      MPU6050_Read_All(&hi2c1, &MPU6050);
 8000f06:	490f      	ldr	r1, [pc, #60]	; (8000f44 <main+0xf4>)
 8000f08:	480f      	ldr	r0, [pc, #60]	; (8000f48 <main+0xf8>)
 8000f0a:	f000 fe0d 	bl	8001b28 <MPU6050_Read_All>
////	  HAL_Delay (50);
//      }
//      prev_time = HAL_GetTick();
//      HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
  	//Send speed commands to motor
  	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL += 50;
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <main+0xe8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <main+0xe8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	3232      	adds	r2, #50	; 0x32
 8000f1a:	639a      	str	r2, [r3, #56]	; 0x38
  	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL += 50;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <main+0xe8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <main+0xe8>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	3232      	adds	r2, #50	; 0x32
 8000f28:	635a      	str	r2, [r3, #52]	; 0x34
  	HAL_Delay(500);
 8000f2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f2e:	f001 fc91 	bl	8002854 <HAL_Delay>
      count++;
 8000f32:	e7d1      	b.n	8000ed8 <main+0x88>
 8000f34:	10624dd3 	.word	0x10624dd3
 8000f38:	200005ec 	.word	0x200005ec
 8000f3c:	20000144 	.word	0x20000144
 8000f40:	40020400 	.word	0x40020400
 8000f44:	20000590 	.word	0x20000590
 8000f48:	20000538 	.word	0x20000538

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b094      	sub	sp, #80	; 0x50
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 0320 	add.w	r3, r7, #32
 8000f56:	2230      	movs	r2, #48	; 0x30
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f005 fdca 	bl	8006af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	4b2b      	ldr	r3, [pc, #172]	; (8001024 <SystemClock_Config+0xd8>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	4a2a      	ldr	r2, [pc, #168]	; (8001024 <SystemClock_Config+0xd8>)
 8000f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f80:	4b28      	ldr	r3, [pc, #160]	; (8001024 <SystemClock_Config+0xd8>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	4b25      	ldr	r3, [pc, #148]	; (8001028 <SystemClock_Config+0xdc>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a24      	ldr	r2, [pc, #144]	; (8001028 <SystemClock_Config+0xdc>)
 8000f96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f9a:	6013      	str	r3, [r2, #0]
 8000f9c:	4b22      	ldr	r3, [pc, #136]	; (8001028 <SystemClock_Config+0xdc>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000fc0:	23b4      	movs	r3, #180	; 0xb4
 8000fc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fc8:	2304      	movs	r3, #4
 8000fca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fcc:	f107 0320 	add.w	r3, r7, #32
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f003 f901 	bl	80041d8 <HAL_RCC_OscConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fdc:	f000 fd9c 	bl	8001b18 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fe0:	f003 f8aa 	bl	8004138 <HAL_PWREx_EnableOverDrive>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000fea:	f000 fd95 	bl	8001b18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fee:	230f      	movs	r3, #15
 8000ff0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ffa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ffe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001004:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	2105      	movs	r1, #5
 800100c:	4618      	mov	r0, r3
 800100e:	f003 fb53 	bl	80046b8 <HAL_RCC_ClockConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001018:	f000 fd7e 	bl	8001b18 <Error_Handler>
  }
}
 800101c:	bf00      	nop
 800101e:	3750      	adds	r7, #80	; 0x50
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40023800 	.word	0x40023800
 8001028:	40007000 	.word	0x40007000

0800102c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <MX_I2C1_Init+0x74>)
 8001032:	4a1c      	ldr	r2, [pc, #112]	; (80010a4 <MX_I2C1_Init+0x78>)
 8001034:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <MX_I2C1_Init+0x74>)
 8001038:	4a1b      	ldr	r2, [pc, #108]	; (80010a8 <MX_I2C1_Init+0x7c>)
 800103a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800103c:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MX_I2C1_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001042:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <MX_I2C1_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001048:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <MX_I2C1_Init+0x74>)
 800104a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800104e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <MX_I2C1_Init+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <MX_I2C1_Init+0x74>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <MX_I2C1_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_I2C1_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001068:	480d      	ldr	r0, [pc, #52]	; (80010a0 <MX_I2C1_Init+0x74>)
 800106a:	f002 fa07 	bl	800347c <HAL_I2C_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001074:	f000 fd50 	bl	8001b18 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001078:	2100      	movs	r1, #0
 800107a:	4809      	ldr	r0, [pc, #36]	; (80010a0 <MX_I2C1_Init+0x74>)
 800107c:	f002 ffe0 	bl	8004040 <HAL_I2CEx_ConfigAnalogFilter>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001086:	f000 fd47 	bl	8001b18 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800108a:	2100      	movs	r1, #0
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <MX_I2C1_Init+0x74>)
 800108e:	f003 f813 	bl	80040b8 <HAL_I2CEx_ConfigDigitalFilter>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001098:	f000 fd3e 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000538 	.word	0x20000538
 80010a4:	40005400 	.word	0x40005400
 80010a8:	00061a80 	.word	0x00061a80

080010ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010b0:	4b18      	ldr	r3, [pc, #96]	; (8001114 <MX_SPI1_Init+0x68>)
 80010b2:	4a19      	ldr	r2, [pc, #100]	; (8001118 <MX_SPI1_Init+0x6c>)
 80010b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <MX_SPI1_Init+0x68>)
 80010b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <MX_SPI1_Init+0x68>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <MX_SPI1_Init+0x68>)
 80010c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010ca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_SPI1_Init+0x68>)
 80010ce:	2202      	movs	r2, #2
 80010d0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <MX_SPI1_Init+0x68>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010d8:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_SPI1_Init+0x68>)
 80010da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010de:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_SPI1_Init+0x68>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <MX_SPI1_Init+0x68>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_SPI1_Init+0x68>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <MX_SPI1_Init+0x68>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_SPI1_Init+0x68>)
 80010fa:	220a      	movs	r2, #10
 80010fc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010fe:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_SPI1_Init+0x68>)
 8001100:	f003 fcca 	bl	8004a98 <HAL_SPI_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800110a:	f000 fd05 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000148 	.word	0x20000148
 8001118:	40013000 	.word	0x40013000

0800111c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001120:	4b17      	ldr	r3, [pc, #92]	; (8001180 <MX_SPI2_Init+0x64>)
 8001122:	4a18      	ldr	r2, [pc, #96]	; (8001184 <MX_SPI2_Init+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001126:	4b16      	ldr	r3, [pc, #88]	; (8001180 <MX_SPI2_Init+0x64>)
 8001128:	f44f 7282 	mov.w	r2, #260	; 0x104
 800112c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <MX_SPI2_Init+0x64>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <MX_SPI2_Init+0x64>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_SPI2_Init+0x64>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <MX_SPI2_Init+0x64>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_SPI2_Init+0x64>)
 8001148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800114c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_SPI2_Init+0x64>)
 8001150:	2200      	movs	r2, #0
 8001152:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <MX_SPI2_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_SPI2_Init+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <MX_SPI2_Init+0x64>)
 8001162:	2200      	movs	r2, #0
 8001164:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_SPI2_Init+0x64>)
 8001168:	220a      	movs	r2, #10
 800116a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800116c:	4804      	ldr	r0, [pc, #16]	; (8001180 <MX_SPI2_Init+0x64>)
 800116e:	f003 fc93 	bl	8004a98 <HAL_SPI_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001178:	f000 fcce 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200002f0 	.word	0x200002f0
 8001184:	40003800 	.word	0x40003800

08001188 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b096      	sub	sp, #88	; 0x58
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]
 80011b6:	615a      	str	r2, [r3, #20]
 80011b8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2220      	movs	r2, #32
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f005 fc97 	bl	8006af4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011c6:	4b44      	ldr	r3, [pc, #272]	; (80012d8 <MX_TIM1_Init+0x150>)
 80011c8:	4a44      	ldr	r2, [pc, #272]	; (80012dc <MX_TIM1_Init+0x154>)
 80011ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180;
 80011cc:	4b42      	ldr	r3, [pc, #264]	; (80012d8 <MX_TIM1_Init+0x150>)
 80011ce:	22b4      	movs	r2, #180	; 0xb4
 80011d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d2:	4b41      	ldr	r3, [pc, #260]	; (80012d8 <MX_TIM1_Init+0x150>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80011d8:	4b3f      	ldr	r3, [pc, #252]	; (80012d8 <MX_TIM1_Init+0x150>)
 80011da:	2264      	movs	r2, #100	; 0x64
 80011dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011de:	4b3e      	ldr	r3, [pc, #248]	; (80012d8 <MX_TIM1_Init+0x150>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011e4:	4b3c      	ldr	r3, [pc, #240]	; (80012d8 <MX_TIM1_Init+0x150>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ea:	4b3b      	ldr	r3, [pc, #236]	; (80012d8 <MX_TIM1_Init+0x150>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011f0:	4839      	ldr	r0, [pc, #228]	; (80012d8 <MX_TIM1_Init+0x150>)
 80011f2:	f004 f871 	bl	80052d8 <HAL_TIM_Base_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80011fc:	f000 fc8c 	bl	8001b18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001204:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001206:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800120a:	4619      	mov	r1, r3
 800120c:	4832      	ldr	r0, [pc, #200]	; (80012d8 <MX_TIM1_Init+0x150>)
 800120e:	f004 fabd 	bl	800578c <HAL_TIM_ConfigClockSource>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001218:	f000 fc7e 	bl	8001b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800121c:	482e      	ldr	r0, [pc, #184]	; (80012d8 <MX_TIM1_Init+0x150>)
 800121e:	f004 f8aa 	bl	8005376 <HAL_TIM_PWM_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001228:	f000 fc76 	bl	8001b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001234:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001238:	4619      	mov	r1, r3
 800123a:	4827      	ldr	r0, [pc, #156]	; (80012d8 <MX_TIM1_Init+0x150>)
 800123c:	f004 ff98 	bl	8006170 <HAL_TIMEx_MasterConfigSynchronization>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001246:	f000 fc67 	bl	8001b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124a:	2360      	movs	r3, #96	; 0x60
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001252:	2300      	movs	r3, #0
 8001254:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001256:	2300      	movs	r3, #0
 8001258:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126a:	2200      	movs	r2, #0
 800126c:	4619      	mov	r1, r3
 800126e:	481a      	ldr	r0, [pc, #104]	; (80012d8 <MX_TIM1_Init+0x150>)
 8001270:	f004 f9c6 	bl	8005600 <HAL_TIM_PWM_ConfigChannel>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800127a:	f000 fc4d 	bl	8001b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800127e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001282:	2204      	movs	r2, #4
 8001284:	4619      	mov	r1, r3
 8001286:	4814      	ldr	r0, [pc, #80]	; (80012d8 <MX_TIM1_Init+0x150>)
 8001288:	f004 f9ba 	bl	8005600 <HAL_TIM_PWM_ConfigChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001292:	f000 fc41 	bl	8001b18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	4619      	mov	r1, r3
 80012b8:	4807      	ldr	r0, [pc, #28]	; (80012d8 <MX_TIM1_Init+0x150>)
 80012ba:	f004 ffd5 	bl	8006268 <HAL_TIMEx_ConfigBreakDeadTime>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80012c4:	f000 fc28 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012c8:	4803      	ldr	r0, [pc, #12]	; (80012d8 <MX_TIM1_Init+0x150>)
 80012ca:	f001 f8f3 	bl	80024b4 <HAL_TIM_MspPostInit>

}
 80012ce:	bf00      	nop
 80012d0:	3758      	adds	r7, #88	; 0x58
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000718 	.word	0x20000718
 80012dc:	40010000 	.word	0x40010000

080012e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e6:	f107 0318 	add.w	r3, r7, #24
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012fe:	463b      	mov	r3, r7
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800130a:	4b31      	ldr	r3, [pc, #196]	; (80013d0 <MX_TIM2_Init+0xf0>)
 800130c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001310:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180;
 8001312:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <MX_TIM2_Init+0xf0>)
 8001314:	22b4      	movs	r2, #180	; 0xb4
 8001316:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001318:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <MX_TIM2_Init+0xf0>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536-1;
 800131e:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <MX_TIM2_Init+0xf0>)
 8001320:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001324:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001326:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <MX_TIM2_Init+0xf0>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132c:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <MX_TIM2_Init+0xf0>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001332:	4827      	ldr	r0, [pc, #156]	; (80013d0 <MX_TIM2_Init+0xf0>)
 8001334:	f003 ffd0 	bl	80052d8 <HAL_TIM_Base_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800133e:	f000 fbeb 	bl	8001b18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001346:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001348:	f107 0318 	add.w	r3, r7, #24
 800134c:	4619      	mov	r1, r3
 800134e:	4820      	ldr	r0, [pc, #128]	; (80013d0 <MX_TIM2_Init+0xf0>)
 8001350:	f004 fa1c 	bl	800578c <HAL_TIM_ConfigClockSource>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800135a:	f000 fbdd 	bl	8001b18 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800135e:	481c      	ldr	r0, [pc, #112]	; (80013d0 <MX_TIM2_Init+0xf0>)
 8001360:	f004 f87c 	bl	800545c <HAL_TIM_IC_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800136a:	f000 fbd5 	bl	8001b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001376:	f107 0310 	add.w	r3, r7, #16
 800137a:	4619      	mov	r1, r3
 800137c:	4814      	ldr	r0, [pc, #80]	; (80013d0 <MX_TIM2_Init+0xf0>)
 800137e:	f004 fef7 	bl	8006170 <HAL_TIMEx_MasterConfigSynchronization>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001388:	f000 fbc6 	bl	8001b18 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800138c:	2300      	movs	r3, #0
 800138e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001390:	2301      	movs	r3, #1
 8001392:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	2208      	movs	r2, #8
 80013a0:	4619      	mov	r1, r3
 80013a2:	480b      	ldr	r0, [pc, #44]	; (80013d0 <MX_TIM2_Init+0xf0>)
 80013a4:	f004 f88f 	bl	80054c6 <HAL_TIM_IC_ConfigChannel>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80013ae:	f000 fbb3 	bl	8001b18 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80013b2:	463b      	mov	r3, r7
 80013b4:	220c      	movs	r2, #12
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_TIM2_Init+0xf0>)
 80013ba:	f004 f884 	bl	80054c6 <HAL_TIM_IC_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80013c4:	f000 fba8 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	; 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000808 	.word	0x20000808

080013d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08e      	sub	sp, #56	; 0x38
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e8:	f107 0320 	add.w	r3, r7, #32
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
 8001400:	615a      	str	r2, [r3, #20]
 8001402:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001404:	4b32      	ldr	r3, [pc, #200]	; (80014d0 <MX_TIM3_Init+0xfc>)
 8001406:	4a33      	ldr	r2, [pc, #204]	; (80014d4 <MX_TIM3_Init+0x100>)
 8001408:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 180-1;
 800140a:	4b31      	ldr	r3, [pc, #196]	; (80014d0 <MX_TIM3_Init+0xfc>)
 800140c:	22b3      	movs	r2, #179	; 0xb3
 800140e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001410:	4b2f      	ldr	r3, [pc, #188]	; (80014d0 <MX_TIM3_Init+0xfc>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001416:	4b2e      	ldr	r3, [pc, #184]	; (80014d0 <MX_TIM3_Init+0xfc>)
 8001418:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800141c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141e:	4b2c      	ldr	r3, [pc, #176]	; (80014d0 <MX_TIM3_Init+0xfc>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001424:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <MX_TIM3_Init+0xfc>)
 8001426:	2200      	movs	r2, #0
 8001428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800142a:	4829      	ldr	r0, [pc, #164]	; (80014d0 <MX_TIM3_Init+0xfc>)
 800142c:	f003 ff54 	bl	80052d8 <HAL_TIM_Base_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001436:	f000 fb6f 	bl	8001b18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001440:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001444:	4619      	mov	r1, r3
 8001446:	4822      	ldr	r0, [pc, #136]	; (80014d0 <MX_TIM3_Init+0xfc>)
 8001448:	f004 f9a0 	bl	800578c <HAL_TIM_ConfigClockSource>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001452:	f000 fb61 	bl	8001b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001456:	481e      	ldr	r0, [pc, #120]	; (80014d0 <MX_TIM3_Init+0xfc>)
 8001458:	f003 ff8d 	bl	8005376 <HAL_TIM_PWM_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001462:	f000 fb59 	bl	8001b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800146e:	f107 0320 	add.w	r3, r7, #32
 8001472:	4619      	mov	r1, r3
 8001474:	4816      	ldr	r0, [pc, #88]	; (80014d0 <MX_TIM3_Init+0xfc>)
 8001476:	f004 fe7b 	bl	8006170 <HAL_TIMEx_MasterConfigSynchronization>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001480:	f000 fb4a 	bl	8001b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001484:	2360      	movs	r3, #96	; 0x60
 8001486:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	2200      	movs	r2, #0
 8001498:	4619      	mov	r1, r3
 800149a:	480d      	ldr	r0, [pc, #52]	; (80014d0 <MX_TIM3_Init+0xfc>)
 800149c:	f004 f8b0 	bl	8005600 <HAL_TIM_PWM_ConfigChannel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80014a6:	f000 fb37 	bl	8001b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	2204      	movs	r2, #4
 80014ae:	4619      	mov	r1, r3
 80014b0:	4807      	ldr	r0, [pc, #28]	; (80014d0 <MX_TIM3_Init+0xfc>)
 80014b2:	f004 f8a5 	bl	8005600 <HAL_TIM_PWM_ConfigChannel>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80014bc:	f000 fb2c 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014c0:	4803      	ldr	r0, [pc, #12]	; (80014d0 <MX_TIM3_Init+0xfc>)
 80014c2:	f000 fff7 	bl	80024b4 <HAL_TIM_MspPostInit>

}
 80014c6:	bf00      	nop
 80014c8:	3738      	adds	r7, #56	; 0x38
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200005ec 	.word	0x200005ec
 80014d4:	40000400 	.word	0x40000400

080014d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_USART3_UART_Init+0x4c>)
 80014de:	4a12      	ldr	r2, [pc, #72]	; (8001528 <MX_USART3_UART_Init+0x50>)
 80014e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <MX_USART3_UART_Init+0x4c>)
 80014e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <MX_USART3_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <MX_USART3_UART_Init+0x4c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <MX_USART3_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <MX_USART3_UART_Init+0x4c>)
 80014fe:	220c      	movs	r2, #12
 8001500:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <MX_USART3_UART_Init+0x4c>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <MX_USART3_UART_Init+0x4c>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800150e:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_USART3_UART_Init+0x4c>)
 8001510:	f004 fefc 	bl	800630c <HAL_UART_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800151a:	f000 fafd 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200004f8 	.word	0x200004f8
 8001528:	40004800 	.word	0x40004800

0800152c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_DMA_Init+0x3c>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <MX_DMA_Init+0x3c>)
 800153c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_DMA_Init+0x3c>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2100      	movs	r1, #0
 8001552:	200c      	movs	r0, #12
 8001554:	f001 fa7b 	bl	8002a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001558:	200c      	movs	r0, #12
 800155a:	f001 fa94 	bl	8002a86 <HAL_NVIC_EnableIRQ>

}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800

0800156c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08c      	sub	sp, #48	; 0x30
 8001570:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
 8001580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
 8001586:	4b6d      	ldr	r3, [pc, #436]	; (800173c <MX_GPIO_Init+0x1d0>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a6c      	ldr	r2, [pc, #432]	; (800173c <MX_GPIO_Init+0x1d0>)
 800158c:	f043 0310 	orr.w	r3, r3, #16
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b6a      	ldr	r3, [pc, #424]	; (800173c <MX_GPIO_Init+0x1d0>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0310 	and.w	r3, r3, #16
 800159a:	61bb      	str	r3, [r7, #24]
 800159c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	4b66      	ldr	r3, [pc, #408]	; (800173c <MX_GPIO_Init+0x1d0>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a65      	ldr	r2, [pc, #404]	; (800173c <MX_GPIO_Init+0x1d0>)
 80015a8:	f043 0304 	orr.w	r3, r3, #4
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b63      	ldr	r3, [pc, #396]	; (800173c <MX_GPIO_Init+0x1d0>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0304 	and.w	r3, r3, #4
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b5f      	ldr	r3, [pc, #380]	; (800173c <MX_GPIO_Init+0x1d0>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a5e      	ldr	r2, [pc, #376]	; (800173c <MX_GPIO_Init+0x1d0>)
 80015c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b5c      	ldr	r3, [pc, #368]	; (800173c <MX_GPIO_Init+0x1d0>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b58      	ldr	r3, [pc, #352]	; (800173c <MX_GPIO_Init+0x1d0>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a57      	ldr	r2, [pc, #348]	; (800173c <MX_GPIO_Init+0x1d0>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b55      	ldr	r3, [pc, #340]	; (800173c <MX_GPIO_Init+0x1d0>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	4b51      	ldr	r3, [pc, #324]	; (800173c <MX_GPIO_Init+0x1d0>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a50      	ldr	r2, [pc, #320]	; (800173c <MX_GPIO_Init+0x1d0>)
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b4e      	ldr	r3, [pc, #312]	; (800173c <MX_GPIO_Init+0x1d0>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	4b4a      	ldr	r3, [pc, #296]	; (800173c <MX_GPIO_Init+0x1d0>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a49      	ldr	r2, [pc, #292]	; (800173c <MX_GPIO_Init+0x1d0>)
 8001618:	f043 0308 	orr.w	r3, r3, #8
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b47      	ldr	r3, [pc, #284]	; (800173c <MX_GPIO_Init+0x1d0>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 800162a:	2200      	movs	r2, #0
 800162c:	213f      	movs	r1, #63	; 0x3f
 800162e:	4844      	ldr	r0, [pc, #272]	; (8001740 <MX_GPIO_Init+0x1d4>)
 8001630:	f001 fef2 	bl	8003418 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	2110      	movs	r1, #16
 8001638:	4842      	ldr	r0, [pc, #264]	; (8001744 <MX_GPIO_Init+0x1d8>)
 800163a:	f001 feed 	bl	8003418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 800163e:	2200      	movs	r2, #0
 8001640:	219b      	movs	r1, #155	; 0x9b
 8001642:	4841      	ldr	r0, [pc, #260]	; (8001748 <MX_GPIO_Init+0x1dc>)
 8001644:	f001 fee8 	bl	8003418 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 800164e:	483f      	ldr	r0, [pc, #252]	; (800174c <MX_GPIO_Init+0x1e0>)
 8001650:	f001 fee2 	bl	8003418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_ALM_Pin|HubM_IO_SON_Pin
 8001654:	2200      	movs	r2, #0
 8001656:	f64f 4108 	movw	r1, #64520	; 0xfc08
 800165a:	483d      	ldr	r0, [pc, #244]	; (8001750 <MX_GPIO_Init+0x1e4>)
 800165c:	f001 fedc 	bl	8003418 <HAL_GPIO_WritePin>
                          |HubM_IO_NOT_Pin|HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button3_Pin LimitSW1_Pin LimitSW2_Pin LimitSW3_Pin
                           LimitSW4_Pin ClimbM_IO_ALM2_Pin ClimbM_IO_ALM1_Pin Button1_Pin
                           Button2_Pin */
  GPIO_InitStruct.Pin = Button3_Pin|LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin
 8001660:	f248 137f 	movw	r3, #33151	; 0x817f
 8001664:	61fb      	str	r3, [r7, #28]
                          |LimitSW4_Pin|ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin|Button1_Pin
                          |Button2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001666:	2300      	movs	r3, #0
 8001668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800166a:	2301      	movs	r3, #1
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800166e:	f107 031c 	add.w	r3, r7, #28
 8001672:	4619      	mov	r1, r3
 8001674:	4835      	ldr	r0, [pc, #212]	; (800174c <MX_GPIO_Init+0x1e0>)
 8001676:	f001 fd25 	bl	80030c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_RANGE_Pin AD_OS2_Pin AD_OS1_Pin AD_OS0_Pin
                           AD_RST_Pin AD_CV_Pin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 800167a:	233f      	movs	r3, #63	; 0x3f
 800167c:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167e:	2301      	movs	r3, #1
 8001680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001682:	2301      	movs	r3, #1
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168a:	f107 031c 	add.w	r3, r7, #28
 800168e:	4619      	mov	r1, r3
 8001690:	482b      	ldr	r0, [pc, #172]	; (8001740 <MX_GPIO_Init+0x1d4>)
 8001692:	f001 fd17 	bl	80030c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : AD_SPI1_CS_Pin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8001696:	2310      	movs	r3, #16
 8001698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169a:	2301      	movs	r3, #1
 800169c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800169e:	2301      	movs	r3, #1
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	2300      	movs	r3, #0
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	4619      	mov	r1, r3
 80016ac:	4825      	ldr	r0, [pc, #148]	; (8001744 <MX_GPIO_Init+0x1d8>)
 80016ae:	f001 fd09 	bl	80030c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : AD_BUSY_Pin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016b6:	4b27      	ldr	r3, [pc, #156]	; (8001754 <MX_GPIO_Init+0x1e8>)
 80016b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 80016be:	f107 031c 	add.w	r3, r7, #28
 80016c2:	4619      	mov	r1, r3
 80016c4:	481f      	ldr	r0, [pc, #124]	; (8001744 <MX_GPIO_Init+0x1d8>)
 80016c6:	f001 fcfd 	bl	80030c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ClimbM_IO_FR2_Pin ClimbM_IO_EN2_Pin LED1_Pin LED2_Pin
                           Buzzer_Pin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 80016ca:	239b      	movs	r3, #155	; 0x9b
 80016cc:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ce:	2301      	movs	r3, #1
 80016d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	4619      	mov	r1, r3
 80016e0:	4819      	ldr	r0, [pc, #100]	; (8001748 <MX_GPIO_Init+0x1dc>)
 80016e2:	f001 fcef 	bl	80030c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ClimbM_IO_BRK2_Pin ClimbM_IO_FR1_Pin ClimbM_IO_EN1_Pin ClimbM_IO_BRK1_Pin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 80016e6:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 80016ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	4619      	mov	r1, r3
 80016fe:	4813      	ldr	r0, [pc, #76]	; (800174c <MX_GPIO_Init+0x1e0>)
 8001700:	f001 fce0 	bl	80030c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CUI_SPI2_CS1_Pin CUI_SPI2_CS2_Pin HubM_IO_ALM_Pin HubM_IO_SON_Pin
                           HubM_IO_NOT_Pin HubM_IO_POT_Pin Brake_Wheel_Pin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_ALM_Pin|HubM_IO_SON_Pin
 8001704:	f64f 4308 	movw	r3, #64520	; 0xfc08
 8001708:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_NOT_Pin|HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170a:	2301      	movs	r3, #1
 800170c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800170e:	2301      	movs	r3, #1
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001716:	f107 031c 	add.w	r3, r7, #28
 800171a:	4619      	mov	r1, r3
 800171c:	480c      	ldr	r0, [pc, #48]	; (8001750 <MX_GPIO_Init+0x1e4>)
 800171e:	f001 fcd1 	bl	80030c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2100      	movs	r1, #0
 8001726:	2017      	movs	r0, #23
 8001728:	f001 f991 	bl	8002a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800172c:	2017      	movs	r0, #23
 800172e:	f001 f9aa 	bl	8002a86 <HAL_NVIC_EnableIRQ>

}
 8001732:	bf00      	nop
 8001734:	3730      	adds	r7, #48	; 0x30
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	40020800 	.word	0x40020800
 8001744:	40020000 	.word	0x40020000
 8001748:	40020400 	.word	0x40020400
 800174c:	40021000 	.word	0x40021000
 8001750:	40020c00 	.word	0x40020c00
 8001754:	10210000 	.word	0x10210000

08001758 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin){
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	2b80      	cmp	r3, #128	; 0x80
 8001768:	d000      	beq.n	800176c <HAL_GPIO_EXTI_Callback+0x14>
      joystick.y = MAX(-1,MIN(joystick.y, 1));
    }

      break;
    default:
      break;
 800176a:	e1c9      	b.n	8001b00 <HAL_GPIO_EXTI_Callback+0x3a8>
      ADC_Read(&adc_rawData[0]);
 800176c:	48ba      	ldr	r0, [pc, #744]	; (8001a58 <HAL_GPIO_EXTI_Callback+0x300>)
 800176e:	f7ff fb53 	bl	8000e18 <ADC_Read>
      adc_rawData[0] = adc_rawData[0] * (1 - ADC_EXPONENTIAL_ALPHA) + adc_rawData_prev[0] * ADC_EXPONENTIAL_ALPHA;
 8001772:	4bb9      	ldr	r3, [pc, #740]	; (8001a58 <HAL_GPIO_EXTI_Callback+0x300>)
 8001774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fe8b 	bl	8000494 <__aeabi_i2d>
 800177e:	a3b2      	add	r3, pc, #712	; (adr r3, 8001a48 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	f7fe fef0 	bl	8000568 <__aeabi_dmul>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4692      	mov	sl, r2
 800178e:	469b      	mov	fp, r3
 8001790:	4bb2      	ldr	r3, [pc, #712]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x304>)
 8001792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fe7c 	bl	8000494 <__aeabi_i2d>
 800179c:	a3ac      	add	r3, pc, #688	; (adr r3, 8001a50 <HAL_GPIO_EXTI_Callback+0x2f8>)
 800179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a2:	f7fe fee1 	bl	8000568 <__aeabi_dmul>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4650      	mov	r0, sl
 80017ac:	4659      	mov	r1, fp
 80017ae:	f7fe fd25 	bl	80001fc <__adddf3>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff f985 	bl	8000ac8 <__aeabi_d2iz>
 80017be:	4603      	mov	r3, r0
 80017c0:	b21a      	sxth	r2, r3
 80017c2:	4ba5      	ldr	r3, [pc, #660]	; (8001a58 <HAL_GPIO_EXTI_Callback+0x300>)
 80017c4:	801a      	strh	r2, [r3, #0]
      adc_rawData[1] = adc_rawData[1] * (1 - ADC_EXPONENTIAL_ALPHA) + adc_rawData_prev[1] * ADC_EXPONENTIAL_ALPHA;
 80017c6:	4ba4      	ldr	r3, [pc, #656]	; (8001a58 <HAL_GPIO_EXTI_Callback+0x300>)
 80017c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fe61 	bl	8000494 <__aeabi_i2d>
 80017d2:	a39d      	add	r3, pc, #628	; (adr r3, 8001a48 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80017d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d8:	f7fe fec6 	bl	8000568 <__aeabi_dmul>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4692      	mov	sl, r2
 80017e2:	469b      	mov	fp, r3
 80017e4:	4b9d      	ldr	r3, [pc, #628]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x304>)
 80017e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe fe52 	bl	8000494 <__aeabi_i2d>
 80017f0:	a397      	add	r3, pc, #604	; (adr r3, 8001a50 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80017f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f6:	f7fe feb7 	bl	8000568 <__aeabi_dmul>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4650      	mov	r0, sl
 8001800:	4659      	mov	r1, fp
 8001802:	f7fe fcfb 	bl	80001fc <__adddf3>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	f7ff f95b 	bl	8000ac8 <__aeabi_d2iz>
 8001812:	4603      	mov	r3, r0
 8001814:	b21a      	sxth	r2, r3
 8001816:	4b90      	ldr	r3, [pc, #576]	; (8001a58 <HAL_GPIO_EXTI_Callback+0x300>)
 8001818:	805a      	strh	r2, [r3, #2]
      adc_rawData_prev[0] = adc_rawData[0];
 800181a:	4b8f      	ldr	r3, [pc, #572]	; (8001a58 <HAL_GPIO_EXTI_Callback+0x300>)
 800181c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001820:	4b8e      	ldr	r3, [pc, #568]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x304>)
 8001822:	801a      	strh	r2, [r3, #0]
      adc_rawData_prev[1] = adc_rawData[1];
 8001824:	4b8c      	ldr	r3, [pc, #560]	; (8001a58 <HAL_GPIO_EXTI_Callback+0x300>)
 8001826:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800182a:	4b8c      	ldr	r3, [pc, #560]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x304>)
 800182c:	805a      	strh	r2, [r3, #2]
      if (adc_rawData[0] >= joystick.MID_X + ADC_TOLERANCE)
 800182e:	4b8a      	ldr	r3, [pc, #552]	; (8001a58 <HAL_GPIO_EXTI_Callback+0x300>)
 8001830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001834:	461a      	mov	r2, r3
 8001836:	4b8a      	ldr	r3, [pc, #552]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x308>)
 8001838:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800183c:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001840:	429a      	cmp	r2, r3
 8001842:	db27      	blt.n	8001894 <HAL_GPIO_EXTI_Callback+0x13c>
	  joystick.x = (double)(adc_rawData[0] - joystick.MID_X - ADC_TOLERANCE)/(joystick.MAX_X - joystick.MID_X- ADC_TOLERANCE);
 8001844:	4b84      	ldr	r3, [pc, #528]	; (8001a58 <HAL_GPIO_EXTI_Callback+0x300>)
 8001846:	f9b3 3000 	ldrsh.w	r3, [r3]
 800184a:	461a      	mov	r2, r3
 800184c:	4b84      	ldr	r3, [pc, #528]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x308>)
 800184e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fe1b 	bl	8000494 <__aeabi_i2d>
 800185e:	4680      	mov	r8, r0
 8001860:	4689      	mov	r9, r1
 8001862:	4b7f      	ldr	r3, [pc, #508]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x308>)
 8001864:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001868:	461a      	mov	r2, r3
 800186a:	4b7d      	ldr	r3, [pc, #500]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x308>)
 800186c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fe0c 	bl	8000494 <__aeabi_i2d>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4640      	mov	r0, r8
 8001882:	4649      	mov	r1, r9
 8001884:	f7fe ff9a 	bl	80007bc <__aeabi_ddiv>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4974      	ldr	r1, [pc, #464]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x308>)
 800188e:	e9c1 2300 	strd	r2, r3, [r1]
 8001892:	e034      	b.n	80018fe <HAL_GPIO_EXTI_Callback+0x1a6>
      else if (adc_rawData[0] <= joystick.MID_X - ADC_TOLERANCE)
 8001894:	4b70      	ldr	r3, [pc, #448]	; (8001a58 <HAL_GPIO_EXTI_Callback+0x300>)
 8001896:	f9b3 3000 	ldrsh.w	r3, [r3]
 800189a:	461a      	mov	r2, r3
 800189c:	4b70      	ldr	r3, [pc, #448]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x308>)
 800189e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80018a2:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 80018a6:	429a      	cmp	r2, r3
 80018a8:	dc29      	bgt.n	80018fe <HAL_GPIO_EXTI_Callback+0x1a6>
      	  joystick.x = -(double)(adc_rawData[0] - joystick.MID_X + ADC_TOLERANCE)/(joystick.MIN_X - joystick.MID_X + ADC_TOLERANCE);
 80018aa:	4b6b      	ldr	r3, [pc, #428]	; (8001a58 <HAL_GPIO_EXTI_Callback+0x300>)
 80018ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b6b      	ldr	r3, [pc, #428]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x308>)
 80018b4:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fde8 	bl	8000494 <__aeabi_i2d>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4690      	mov	r8, r2
 80018ca:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80018ce:	4b64      	ldr	r3, [pc, #400]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x308>)
 80018d0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b62      	ldr	r3, [pc, #392]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x308>)
 80018d8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fdd6 	bl	8000494 <__aeabi_i2d>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4640      	mov	r0, r8
 80018ee:	4649      	mov	r1, r9
 80018f0:	f7fe ff64 	bl	80007bc <__aeabi_ddiv>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4959      	ldr	r1, [pc, #356]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x308>)
 80018fa:	e9c1 2300 	strd	r2, r3, [r1]
      if (adc_rawData[1] >= joystick.MID_Y + ADC_TOLERANCE)
 80018fe:	4b56      	ldr	r3, [pc, #344]	; (8001a58 <HAL_GPIO_EXTI_Callback+0x300>)
 8001900:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001904:	461a      	mov	r2, r3
 8001906:	4b56      	ldr	r3, [pc, #344]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x308>)
 8001908:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800190c:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001910:	429a      	cmp	r2, r3
 8001912:	db27      	blt.n	8001964 <HAL_GPIO_EXTI_Callback+0x20c>
      	  joystick.y = (double)(adc_rawData[1] - joystick.MID_Y - ADC_TOLERANCE)/(joystick.MAX_Y - joystick.MID_Y- ADC_TOLERANCE);
 8001914:	4b50      	ldr	r3, [pc, #320]	; (8001a58 <HAL_GPIO_EXTI_Callback+0x300>)
 8001916:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800191a:	461a      	mov	r2, r3
 800191c:	4b50      	ldr	r3, [pc, #320]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x308>)
 800191e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fdb3 	bl	8000494 <__aeabi_i2d>
 800192e:	4604      	mov	r4, r0
 8001930:	460d      	mov	r5, r1
 8001932:	4b4b      	ldr	r3, [pc, #300]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x308>)
 8001934:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001938:	461a      	mov	r2, r3
 800193a:	4b49      	ldr	r3, [pc, #292]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x308>)
 800193c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fda4 	bl	8000494 <__aeabi_i2d>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4620      	mov	r0, r4
 8001952:	4629      	mov	r1, r5
 8001954:	f7fe ff32 	bl	80007bc <__aeabi_ddiv>
 8001958:	4603      	mov	r3, r0
 800195a:	460c      	mov	r4, r1
 800195c:	4a40      	ldr	r2, [pc, #256]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x308>)
 800195e:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001962:	e034      	b.n	80019ce <HAL_GPIO_EXTI_Callback+0x276>
      else if (adc_rawData[1] <= joystick.MID_Y - ADC_TOLERANCE)
 8001964:	4b3c      	ldr	r3, [pc, #240]	; (8001a58 <HAL_GPIO_EXTI_Callback+0x300>)
 8001966:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800196a:	461a      	mov	r2, r3
 800196c:	4b3c      	ldr	r3, [pc, #240]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x308>)
 800196e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001972:	f2a3 53dc 	subw	r3, r3, #1500	; 0x5dc
 8001976:	429a      	cmp	r2, r3
 8001978:	dc29      	bgt.n	80019ce <HAL_GPIO_EXTI_Callback+0x276>
	    joystick.y = -(double)(adc_rawData[1] - joystick.MID_Y + ADC_TOLERANCE)/(joystick.MIN_Y - joystick.MID_Y + ADC_TOLERANCE);
 800197a:	4b37      	ldr	r3, [pc, #220]	; (8001a58 <HAL_GPIO_EXTI_Callback+0x300>)
 800197c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001980:	461a      	mov	r2, r3
 8001982:	4b37      	ldr	r3, [pc, #220]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x308>)
 8001984:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fd80 	bl	8000494 <__aeabi_i2d>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4614      	mov	r4, r2
 800199a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800199e:	4b30      	ldr	r3, [pc, #192]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x308>)
 80019a0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b2e      	ldr	r3, [pc, #184]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x308>)
 80019a8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fd6e 	bl	8000494 <__aeabi_i2d>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4620      	mov	r0, r4
 80019be:	4629      	mov	r1, r5
 80019c0:	f7fe fefc 	bl	80007bc <__aeabi_ddiv>
 80019c4:	4603      	mov	r3, r0
 80019c6:	460c      	mov	r4, r1
 80019c8:	4a25      	ldr	r2, [pc, #148]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x308>)
 80019ca:	e9c2 3402 	strd	r3, r4, [r2, #8]
      joystick.x = MAX(-1,MIN(joystick.x, 1));
 80019ce:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x308>)
 80019d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019d4:	2301      	movs	r3, #1
 80019d6:	461c      	mov	r4, r3
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <HAL_GPIO_EXTI_Callback+0x30c>)
 80019de:	f7ff f835 	bl	8000a4c <__aeabi_dcmplt>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_GPIO_EXTI_Callback+0x294>
 80019e8:	2300      	movs	r3, #0
 80019ea:	461c      	mov	r4, r3
 80019ec:	b2e3      	uxtb	r3, r4
 80019ee:	f083 0301 	eor.w	r3, r3, #1
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d114      	bne.n	8001a22 <HAL_GPIO_EXTI_Callback+0x2ca>
 80019f8:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x308>)
 80019fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019fe:	2301      	movs	r3, #1
 8001a00:	461c      	mov	r4, r3
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <HAL_GPIO_EXTI_Callback+0x310>)
 8001a08:	f7ff f820 	bl	8000a4c <__aeabi_dcmplt>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_GPIO_EXTI_Callback+0x2be>
 8001a12:	2300      	movs	r3, #0
 8001a14:	461c      	mov	r4, r3
 8001a16:	b2e3      	uxtb	r3, r4
 8001a18:	f083 0301 	eor.w	r3, r3, #1
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d024      	beq.n	8001a6c <HAL_GPIO_EXTI_Callback+0x314>
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x308>)
 8001a24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001a2e:	f7ff f80d 	bl	8000a4c <__aeabi_dcmplt>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_EXTI_Callback+0x2e8>
 8001a38:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x308>)
 8001a3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a3e:	e018      	b.n	8001a72 <HAL_GPIO_EXTI_Callback+0x31a>
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	4c07      	ldr	r4, [pc, #28]	; (8001a64 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001a46:	e014      	b.n	8001a72 <HAL_GPIO_EXTI_Callback+0x31a>
 8001a48:	33333334 	.word	0x33333334
 8001a4c:	3fc33333 	.word	0x3fc33333
 8001a50:	33333333 	.word	0x33333333
 8001a54:	3feb3333 	.word	0x3feb3333
 8001a58:	20000638 	.word	0x20000638
 8001a5c:	20000648 	.word	0x20000648
 8001a60:	20000000 	.word	0x20000000
 8001a64:	3ff00000 	.word	0x3ff00000
 8001a68:	bff00000 	.word	0xbff00000
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	4c26      	ldr	r4, [pc, #152]	; (8001b0c <HAL_GPIO_EXTI_Callback+0x3b4>)
 8001a72:	4a27      	ldr	r2, [pc, #156]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x3b8>)
 8001a74:	e9c2 3400 	strd	r3, r4, [r2]
      joystick.y = MAX(-1,MIN(joystick.y, 1));
 8001a78:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x3b8>)
 8001a7a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a7e:	2301      	movs	r3, #1
 8001a80:	461c      	mov	r4, r3
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <HAL_GPIO_EXTI_Callback+0x3bc>)
 8001a88:	f7fe ffe0 	bl	8000a4c <__aeabi_dcmplt>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_GPIO_EXTI_Callback+0x33e>
 8001a92:	2300      	movs	r3, #0
 8001a94:	461c      	mov	r4, r3
 8001a96:	b2e3      	uxtb	r3, r4
 8001a98:	f083 0301 	eor.w	r3, r3, #1
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d114      	bne.n	8001acc <HAL_GPIO_EXTI_Callback+0x374>
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x3b8>)
 8001aa4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	461c      	mov	r4, r3
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <HAL_GPIO_EXTI_Callback+0x3b4>)
 8001ab2:	f7fe ffcb 	bl	8000a4c <__aeabi_dcmplt>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_GPIO_EXTI_Callback+0x368>
 8001abc:	2300      	movs	r3, #0
 8001abe:	461c      	mov	r4, r3
 8001ac0:	b2e3      	uxtb	r3, r4
 8001ac2:	f083 0301 	eor.w	r3, r3, #1
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d012      	beq.n	8001af2 <HAL_GPIO_EXTI_Callback+0x39a>
 8001acc:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x3b8>)
 8001ace:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <HAL_GPIO_EXTI_Callback+0x3bc>)
 8001ad8:	f7fe ffb8 	bl	8000a4c <__aeabi_dcmplt>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_EXTI_Callback+0x392>
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x3b8>)
 8001ae4:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001ae8:	e006      	b.n	8001af8 <HAL_GPIO_EXTI_Callback+0x3a0>
 8001aea:	f04f 0300 	mov.w	r3, #0
 8001aee:	4c09      	ldr	r4, [pc, #36]	; (8001b14 <HAL_GPIO_EXTI_Callback+0x3bc>)
 8001af0:	e002      	b.n	8001af8 <HAL_GPIO_EXTI_Callback+0x3a0>
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	4c05      	ldr	r4, [pc, #20]	; (8001b0c <HAL_GPIO_EXTI_Callback+0x3b4>)
 8001af8:	4a05      	ldr	r2, [pc, #20]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x3b8>)
 8001afa:	e9c2 3402 	strd	r3, r4, [r2, #8]
      break;
 8001afe:	bf00      	nop
  }

}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b0a:	bf00      	nop
 8001b0c:	bff00000 	.word	0xbff00000
 8001b10:	20000000 	.word	0x20000000
 8001b14:	3ff00000 	.word	0x3ff00000

08001b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b2c:	b094      	sub	sp, #80	; 0x50
 8001b2e:	af04      	add	r7, sp, #16
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001b34:	2364      	movs	r3, #100	; 0x64
 8001b36:	9302      	str	r3, [sp, #8]
 8001b38:	230e      	movs	r3, #14
 8001b3a:	9301      	str	r3, [sp, #4]
 8001b3c:	f107 0308 	add.w	r3, r7, #8
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2301      	movs	r3, #1
 8001b44:	223b      	movs	r2, #59	; 0x3b
 8001b46:	21d0      	movs	r1, #208	; 0xd0
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f001 fdcf 	bl	80036ec <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001b4e:	7a3b      	ldrb	r3, [r7, #8]
 8001b50:	021b      	lsls	r3, r3, #8
 8001b52:	b21a      	sxth	r2, r3
 8001b54:	7a7b      	ldrb	r3, [r7, #9]
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	b21a      	sxth	r2, r3
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001b60:	7abb      	ldrb	r3, [r7, #10]
 8001b62:	021b      	lsls	r3, r3, #8
 8001b64:	b21a      	sxth	r2, r3
 8001b66:	7afb      	ldrb	r3, [r7, #11]
 8001b68:	b21b      	sxth	r3, r3
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	b21a      	sxth	r2, r3
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001b72:	7b3b      	ldrb	r3, [r7, #12]
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	7b7b      	ldrb	r3, [r7, #13]
 8001b7a:	b21b      	sxth	r3, r3
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	b21a      	sxth	r2, r3
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001b84:	7bbb      	ldrb	r3, [r7, #14]
 8001b86:	021b      	lsls	r3, r3, #8
 8001b88:	b21a      	sxth	r2, r3
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	b21b      	sxth	r3, r3
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001b92:	7c3b      	ldrb	r3, [r7, #16]
 8001b94:	021b      	lsls	r3, r3, #8
 8001b96:	b21a      	sxth	r2, r3
 8001b98:	7c7b      	ldrb	r3, [r7, #17]
 8001b9a:	b21b      	sxth	r3, r3
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	b21a      	sxth	r2, r3
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001ba4:	7cbb      	ldrb	r3, [r7, #18]
 8001ba6:	021b      	lsls	r3, r3, #8
 8001ba8:	b21a      	sxth	r2, r3
 8001baa:	7cfb      	ldrb	r3, [r7, #19]
 8001bac:	b21b      	sxth	r3, r3
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	b21a      	sxth	r2, r3
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001bb6:	7d3b      	ldrb	r3, [r7, #20]
 8001bb8:	021b      	lsls	r3, r3, #8
 8001bba:	b21a      	sxth	r2, r3
 8001bbc:	7d7b      	ldrb	r3, [r7, #21]
 8001bbe:	b21b      	sxth	r3, r3
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	b21a      	sxth	r2, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fc60 	bl	8000494 <__aeabi_i2d>
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	4bbd      	ldr	r3, [pc, #756]	; (8001ed0 <MPU6050_Read_All+0x3a8>)
 8001bda:	f7fe fdef 	bl	80007bc <__aeabi_ddiv>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	6839      	ldr	r1, [r7, #0]
 8001be4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fc50 	bl	8000494 <__aeabi_i2d>
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	4bb5      	ldr	r3, [pc, #724]	; (8001ed0 <MPU6050_Read_All+0x3a8>)
 8001bfa:	f7fe fddf 	bl	80007bc <__aeabi_ddiv>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	6839      	ldr	r1, [r7, #0]
 8001c04:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fc40 	bl	8000494 <__aeabi_i2d>
 8001c14:	a3a8      	add	r3, pc, #672	; (adr r3, 8001eb8 <MPU6050_Read_All+0x390>)
 8001c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1a:	f7fe fdcf 	bl	80007bc <__aeabi_ddiv>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	6839      	ldr	r1, [r7, #0]
 8001c24:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001c28:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001c2c:	ee07 3a90 	vmov	s15, r3
 8001c30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c34:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8001ed4 <MPU6050_Read_All+0x3ac>
 8001c38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c3c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001ed8 <MPU6050_Read_All+0x3b0>
 8001c40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fc1f 	bl	8000494 <__aeabi_i2d>
 8001c56:	a39a      	add	r3, pc, #616	; (adr r3, 8001ec0 <MPU6050_Read_All+0x398>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	f7fe fdae 	bl	80007bc <__aeabi_ddiv>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	6839      	ldr	r1, [r7, #0]
 8001c66:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fc0f 	bl	8000494 <__aeabi_i2d>
 8001c76:	a392      	add	r3, pc, #584	; (adr r3, 8001ec0 <MPU6050_Read_All+0x398>)
 8001c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7c:	f7fe fd9e 	bl	80007bc <__aeabi_ddiv>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	6839      	ldr	r1, [r7, #0]
 8001c86:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fbff 	bl	8000494 <__aeabi_i2d>
 8001c96:	a38a      	add	r3, pc, #552	; (adr r3, 8001ec0 <MPU6050_Read_All+0x398>)
 8001c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9c:	f7fe fd8e 	bl	80007bc <__aeabi_ddiv>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	6839      	ldr	r1, [r7, #0]
 8001ca6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8001caa:	f000 fdc7 	bl	800283c <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	4b8a      	ldr	r3, [pc, #552]	; (8001edc <MPU6050_Read_All+0x3b4>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fbdc 	bl	8000474 <__aeabi_ui2d>
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	4b87      	ldr	r3, [pc, #540]	; (8001ee0 <MPU6050_Read_All+0x3b8>)
 8001cc2:	f7fe fd7b 	bl	80007bc <__aeabi_ddiv>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001cce:	f000 fdb5 	bl	800283c <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	4b81      	ldr	r3, [pc, #516]	; (8001edc <MPU6050_Read_All+0x3b4>)
 8001cd6:	601a      	str	r2, [r3, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce6:	fb03 f202 	mul.w	r2, r3, r2
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cf8:	fb03 f301 	mul.w	r3, r3, r1
 8001cfc:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fbc8 	bl	8000494 <__aeabi_i2d>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	ec43 2b10 	vmov	d0, r2, r3
 8001d0c:	f005 f8a8 	bl	8006e60 <sqrt>
 8001d10:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d20:	f7fe fe8a 	bl	8000a38 <__aeabi_dcmpeq>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d11f      	bne.n	8001d6a <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fbaf 	bl	8000494 <__aeabi_i2d>
 8001d36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d3a:	f7fe fd3f 	bl	80007bc <__aeabi_ddiv>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	ec43 2b17 	vmov	d7, r2, r3
 8001d46:	eeb0 0a47 	vmov.f32	s0, s14
 8001d4a:	eef0 0a67 	vmov.f32	s1, s15
 8001d4e:	f004 fedb 	bl	8006b08 <atan>
 8001d52:	ec51 0b10 	vmov	r0, r1, d0
 8001d56:	a35c      	add	r3, pc, #368	; (adr r3, 8001ec8 <MPU6050_Read_All+0x3a0>)
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	f7fe fc04 	bl	8000568 <__aeabi_dmul>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001d68:	e005      	b.n	8001d76 <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d7c:	425b      	negs	r3, r3
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fb88 	bl	8000494 <__aeabi_i2d>
 8001d84:	4682      	mov	sl, r0
 8001d86:	468b      	mov	fp, r1
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fb80 	bl	8000494 <__aeabi_i2d>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	ec43 2b11 	vmov	d1, r2, r3
 8001d9c:	ec4b ab10 	vmov	d0, sl, fp
 8001da0:	f005 f85b 	bl	8006e5a <atan2>
 8001da4:	ec51 0b10 	vmov	r0, r1, d0
 8001da8:	a347      	add	r3, pc, #284	; (adr r3, 8001ec8 <MPU6050_Read_All+0x3a0>)
 8001daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dae:	f7fe fbdb 	bl	8000568 <__aeabi_dmul>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	4b49      	ldr	r3, [pc, #292]	; (8001ee4 <MPU6050_Read_All+0x3bc>)
 8001dc0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dc4:	f7fe fe42 	bl	8000a4c <__aeabi_dcmplt>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00a      	beq.n	8001de4 <MPU6050_Read_All+0x2bc>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	4b43      	ldr	r3, [pc, #268]	; (8001ee8 <MPU6050_Read_All+0x3c0>)
 8001dda:	f7fe fe55 	bl	8000a88 <__aeabi_dcmpgt>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d114      	bne.n	8001e0e <MPU6050_Read_All+0x2e6>
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	4b3f      	ldr	r3, [pc, #252]	; (8001ee8 <MPU6050_Read_All+0x3c0>)
 8001dea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dee:	f7fe fe4b 	bl	8000a88 <__aeabi_dcmpgt>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d015      	beq.n	8001e24 <MPU6050_Read_All+0x2fc>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	4b38      	ldr	r3, [pc, #224]	; (8001ee4 <MPU6050_Read_All+0x3bc>)
 8001e04:	f7fe fe22 	bl	8000a4c <__aeabi_dcmplt>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00a      	beq.n	8001e24 <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 8001e0e:	4937      	ldr	r1, [pc, #220]	; (8001eec <MPU6050_Read_All+0x3c4>)
 8001e10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e14:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001e18:	6839      	ldr	r1, [r7, #0]
 8001e1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e1e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001e22:	e014      	b.n	8001e4e <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001e2a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001e2e:	eeb0 1a47 	vmov.f32	s2, s14
 8001e32:	eef0 1a67 	vmov.f32	s3, s15
 8001e36:	ed97 0b06 	vldr	d0, [r7, #24]
 8001e3a:	482c      	ldr	r0, [pc, #176]	; (8001eec <MPU6050_Read_All+0x3c4>)
 8001e3c:	f000 f85a 	bl	8001ef4 <Kalman_getAngle>
 8001e40:	eeb0 7a40 	vmov.f32	s14, s0
 8001e44:	eef0 7a60 	vmov.f32	s15, s1
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001e54:	4690      	mov	r8, r2
 8001e56:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	4b22      	ldr	r3, [pc, #136]	; (8001ee8 <MPU6050_Read_All+0x3c0>)
 8001e60:	4640      	mov	r0, r8
 8001e62:	4649      	mov	r1, r9
 8001e64:	f7fe fe10 	bl	8000a88 <__aeabi_dcmpgt>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d008      	beq.n	8001e80 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001e74:	4614      	mov	r4, r2
 8001e76:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001e86:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8001e8a:	eeb0 1a47 	vmov.f32	s2, s14
 8001e8e:	eef0 1a67 	vmov.f32	s3, s15
 8001e92:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8001e96:	4816      	ldr	r0, [pc, #88]	; (8001ef0 <MPU6050_Read_All+0x3c8>)
 8001e98:	f000 f82c 	bl	8001ef4 <Kalman_getAngle>
 8001e9c:	eeb0 7a40 	vmov.f32	s14, s0
 8001ea0:	eef0 7a60 	vmov.f32	s15, s1
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 8001eaa:	bf00      	nop
 8001eac:	3740      	adds	r7, #64	; 0x40
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eb4:	f3af 8000 	nop.w
 8001eb8:	00000000 	.word	0x00000000
 8001ebc:	40cc2900 	.word	0x40cc2900
 8001ec0:	00000000 	.word	0x00000000
 8001ec4:	40606000 	.word	0x40606000
 8001ec8:	1a63c1f8 	.word	0x1a63c1f8
 8001ecc:	404ca5dc 	.word	0x404ca5dc
 8001ed0:	40d00000 	.word	0x40d00000
 8001ed4:	43aa0000 	.word	0x43aa0000
 8001ed8:	42121eb8 	.word	0x42121eb8
 8001edc:	20000848 	.word	0x20000848
 8001ee0:	408f4000 	.word	0x408f4000
 8001ee4:	c0568000 	.word	0xc0568000
 8001ee8:	40568000 	.word	0x40568000
 8001eec:	20000068 	.word	0x20000068
 8001ef0:	20000020 	.word	0x20000020

08001ef4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8001ef4:	b5b0      	push	{r4, r5, r7, lr}
 8001ef6:	b096      	sub	sp, #88	; 0x58
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	61f8      	str	r0, [r7, #28]
 8001efc:	ed87 0b04 	vstr	d0, [r7, #16]
 8001f00:	ed87 1b02 	vstr	d1, [r7, #8]
 8001f04:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	4623      	mov	r3, r4
 8001f12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f16:	f7fe f96f 	bl	80001f8 <__aeabi_dsub>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	460c      	mov	r4, r1
 8001f1e:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001f28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f30:	f7fe fb1a 	bl	8000568 <__aeabi_dmul>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4620      	mov	r0, r4
 8001f3a:	4629      	mov	r1, r5
 8001f3c:	f7fe f95e 	bl	80001fc <__adddf3>
 8001f40:	4603      	mov	r3, r0
 8001f42:	460c      	mov	r4, r1
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	e9c2 3406 	strd	r3, r4, [r2, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001f56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f5a:	f7fe fb05 	bl	8000568 <__aeabi_dmul>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001f6c:	f7fe f944 	bl	80001f8 <__aeabi_dsub>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001f7e:	f7fe f93b 	bl	80001f8 <__aeabi_dsub>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f90:	f7fe f934 	bl	80001fc <__adddf3>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4610      	mov	r0, r2
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fa0:	f7fe fae2 	bl	8000568 <__aeabi_dmul>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4620      	mov	r0, r4
 8001faa:	4629      	mov	r1, r5
 8001fac:	f7fe f926 	bl	80001fc <__adddf3>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	460c      	mov	r4, r1
 8001fb4:	69fa      	ldr	r2, [r7, #28]
 8001fb6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001fc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fca:	f7fe facd 	bl	8000568 <__aeabi_dmul>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	4629      	mov	r1, r5
 8001fd6:	f7fe f90f 	bl	80001f8 <__aeabi_dsub>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	460c      	mov	r4, r1
 8001fde:	69fa      	ldr	r2, [r7, #28]
 8001fe0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ff4:	f7fe fab8 	bl	8000568 <__aeabi_dmul>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	4629      	mov	r1, r5
 8002000:	f7fe f8fa 	bl	80001f8 <__aeabi_dsub>
 8002004:	4603      	mov	r3, r0
 8002006:	460c      	mov	r4, r1
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800201a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800201e:	f7fe faa3 	bl	8000568 <__aeabi_dmul>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4620      	mov	r0, r4
 8002028:	4629      	mov	r1, r5
 800202a:	f7fe f8e7 	bl	80001fc <__adddf3>
 800202e:	4603      	mov	r3, r0
 8002030:	460c      	mov	r4, r1
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002044:	461a      	mov	r2, r3
 8002046:	4623      	mov	r3, r4
 8002048:	f7fe f8d8 	bl	80001fc <__adddf3>
 800204c:	4603      	mov	r3, r0
 800204e:	460c      	mov	r4, r1
 8002050:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800205a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800205e:	f7fe fbad 	bl	80007bc <__aeabi_ddiv>
 8002062:	4603      	mov	r3, r0
 8002064:	460c      	mov	r4, r1
 8002066:	e9c7 3408 	strd	r3, r4, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002070:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002074:	f7fe fba2 	bl	80007bc <__aeabi_ddiv>
 8002078:	4603      	mov	r3, r0
 800207a:	460c      	mov	r4, r1
 800207c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8002086:	461a      	mov	r2, r3
 8002088:	4623      	mov	r3, r4
 800208a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800208e:	f7fe f8b3 	bl	80001f8 <__aeabi_dsub>
 8002092:	4603      	mov	r3, r0
 8002094:	460c      	mov	r4, r1
 8002096:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80020a0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80020a8:	f7fe fa5e 	bl	8000568 <__aeabi_dmul>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4620      	mov	r0, r4
 80020b2:	4629      	mov	r1, r5
 80020b4:	f7fe f8a2 	bl	80001fc <__adddf3>
 80020b8:	4603      	mov	r3, r0
 80020ba:	460c      	mov	r4, r1
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	e9c2 3406 	strd	r3, r4, [r2, #24]
    Kalman->bias += K[1] * y;
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80020c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80020d0:	f7fe fa4a 	bl	8000568 <__aeabi_dmul>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4620      	mov	r0, r4
 80020da:	4629      	mov	r1, r5
 80020dc:	f7fe f88e 	bl	80001fc <__adddf3>
 80020e0:	4603      	mov	r3, r0
 80020e2:	460c      	mov	r4, r1
 80020e4:	69fa      	ldr	r2, [r7, #28]
 80020e6:	e9c2 3408 	strd	r3, r4, [r2, #32]

    double P00_temp = Kalman->P[0][0];
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80020f0:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80020fa:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002104:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002108:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800210c:	f7fe fa2c 	bl	8000568 <__aeabi_dmul>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4620      	mov	r0, r4
 8002116:	4629      	mov	r1, r5
 8002118:	f7fe f86e 	bl	80001f8 <__aeabi_dsub>
 800211c:	4603      	mov	r3, r0
 800211e:	460c      	mov	r4, r1
 8002120:	69fa      	ldr	r2, [r7, #28]
 8002122:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800212c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002130:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002134:	f7fe fa18 	bl	8000568 <__aeabi_dmul>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4620      	mov	r0, r4
 800213e:	4629      	mov	r1, r5
 8002140:	f7fe f85a 	bl	80001f8 <__aeabi_dsub>
 8002144:	4603      	mov	r3, r0
 8002146:	460c      	mov	r4, r1
 8002148:	69fa      	ldr	r2, [r7, #28]
 800214a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002154:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002158:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800215c:	f7fe fa04 	bl	8000568 <__aeabi_dmul>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4620      	mov	r0, r4
 8002166:	4629      	mov	r1, r5
 8002168:	f7fe f846 	bl	80001f8 <__aeabi_dsub>
 800216c:	4603      	mov	r3, r0
 800216e:	460c      	mov	r4, r1
 8002170:	69fa      	ldr	r2, [r7, #28]
 8002172:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 800217c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002180:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002184:	f7fe f9f0 	bl	8000568 <__aeabi_dmul>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4620      	mov	r0, r4
 800218e:	4629      	mov	r1, r5
 8002190:	f7fe f832 	bl	80001f8 <__aeabi_dsub>
 8002194:	4603      	mov	r3, r0
 8002196:	460c      	mov	r4, r1
 8002198:	69fa      	ldr	r2, [r7, #28]
 800219a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

    return Kalman->angle;
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80021a4:	ec44 3b17 	vmov	d7, r3, r4
};
 80021a8:	eeb0 0a47 	vmov.f32	s0, s14
 80021ac:	eef0 0a67 	vmov.f32	s1, s15
 80021b0:	3758      	adds	r7, #88	; 0x58
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080021b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <HAL_MspInit+0x4c>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	4a0f      	ldr	r2, [pc, #60]	; (8002204 <HAL_MspInit+0x4c>)
 80021c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021cc:	6453      	str	r3, [r2, #68]	; 0x44
 80021ce:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <HAL_MspInit+0x4c>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_MspInit+0x4c>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	4a08      	ldr	r2, [pc, #32]	; (8002204 <HAL_MspInit+0x4c>)
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_MspInit+0x4c>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800

08002208 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08a      	sub	sp, #40	; 0x28
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a19      	ldr	r2, [pc, #100]	; (800228c <HAL_I2C_MspInit+0x84>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d12c      	bne.n	8002284 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	4b18      	ldr	r3, [pc, #96]	; (8002290 <HAL_I2C_MspInit+0x88>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	4a17      	ldr	r2, [pc, #92]	; (8002290 <HAL_I2C_MspInit+0x88>)
 8002234:	f043 0302 	orr.w	r3, r3, #2
 8002238:	6313      	str	r3, [r2, #48]	; 0x30
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_I2C_MspInit+0x88>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8002246:	f44f 7340 	mov.w	r3, #768	; 0x300
 800224a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800224c:	2312      	movs	r3, #18
 800224e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002250:	2301      	movs	r3, #1
 8002252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002254:	2303      	movs	r3, #3
 8002256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002258:	2304      	movs	r3, #4
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	4619      	mov	r1, r3
 8002262:	480c      	ldr	r0, [pc, #48]	; (8002294 <HAL_I2C_MspInit+0x8c>)
 8002264:	f000 ff2e 	bl	80030c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	4b08      	ldr	r3, [pc, #32]	; (8002290 <HAL_I2C_MspInit+0x88>)
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	4a07      	ldr	r2, [pc, #28]	; (8002290 <HAL_I2C_MspInit+0x88>)
 8002272:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002276:	6413      	str	r3, [r2, #64]	; 0x40
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_I2C_MspInit+0x88>)
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002284:	bf00      	nop
 8002286:	3728      	adds	r7, #40	; 0x28
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40005400 	.word	0x40005400
 8002290:	40023800 	.word	0x40023800
 8002294:	40020400 	.word	0x40020400

08002298 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08c      	sub	sp, #48	; 0x30
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	f107 031c 	add.w	r3, r7, #28
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a41      	ldr	r2, [pc, #260]	; (80023bc <HAL_SPI_MspInit+0x124>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d14a      	bne.n	8002350 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	61bb      	str	r3, [r7, #24]
 80022be:	4b40      	ldr	r3, [pc, #256]	; (80023c0 <HAL_SPI_MspInit+0x128>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	4a3f      	ldr	r2, [pc, #252]	; (80023c0 <HAL_SPI_MspInit+0x128>)
 80022c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022c8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ca:	4b3d      	ldr	r3, [pc, #244]	; (80023c0 <HAL_SPI_MspInit+0x128>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	4b39      	ldr	r3, [pc, #228]	; (80023c0 <HAL_SPI_MspInit+0x128>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a38      	ldr	r2, [pc, #224]	; (80023c0 <HAL_SPI_MspInit+0x128>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b36      	ldr	r3, [pc, #216]	; (80023c0 <HAL_SPI_MspInit+0x128>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	4b32      	ldr	r3, [pc, #200]	; (80023c0 <HAL_SPI_MspInit+0x128>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a31      	ldr	r2, [pc, #196]	; (80023c0 <HAL_SPI_MspInit+0x128>)
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <HAL_SPI_MspInit+0x128>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 800230e:	2360      	movs	r3, #96	; 0x60
 8002310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231a:	2303      	movs	r3, #3
 800231c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800231e:	2305      	movs	r3, #5
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002322:	f107 031c 	add.w	r3, r7, #28
 8002326:	4619      	mov	r1, r3
 8002328:	4826      	ldr	r0, [pc, #152]	; (80023c4 <HAL_SPI_MspInit+0x12c>)
 800232a:	f000 fecb 	bl	80030c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800232e:	2320      	movs	r3, #32
 8002330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002332:	2302      	movs	r3, #2
 8002334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233a:	2303      	movs	r3, #3
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800233e:	2305      	movs	r3, #5
 8002340:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002342:	f107 031c 	add.w	r3, r7, #28
 8002346:	4619      	mov	r1, r3
 8002348:	481f      	ldr	r0, [pc, #124]	; (80023c8 <HAL_SPI_MspInit+0x130>)
 800234a:	f000 febb 	bl	80030c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800234e:	e031      	b.n	80023b4 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a1d      	ldr	r2, [pc, #116]	; (80023cc <HAL_SPI_MspInit+0x134>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d12c      	bne.n	80023b4 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <HAL_SPI_MspInit+0x128>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	4a17      	ldr	r2, [pc, #92]	; (80023c0 <HAL_SPI_MspInit+0x128>)
 8002364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002368:	6413      	str	r3, [r2, #64]	; 0x40
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <HAL_SPI_MspInit+0x128>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <HAL_SPI_MspInit+0x128>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4a10      	ldr	r2, [pc, #64]	; (80023c0 <HAL_SPI_MspInit+0x128>)
 8002380:	f043 0302 	orr.w	r3, r3, #2
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <HAL_SPI_MspInit+0x128>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin|CUI_SPI2_MOSI_Pin;
 8002392:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002398:	2302      	movs	r3, #2
 800239a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a0:	2303      	movs	r3, #3
 80023a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023a4:	2305      	movs	r3, #5
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a8:	f107 031c 	add.w	r3, r7, #28
 80023ac:	4619      	mov	r1, r3
 80023ae:	4806      	ldr	r0, [pc, #24]	; (80023c8 <HAL_SPI_MspInit+0x130>)
 80023b0:	f000 fe88 	bl	80030c4 <HAL_GPIO_Init>
}
 80023b4:	bf00      	nop
 80023b6:	3730      	adds	r7, #48	; 0x30
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40013000 	.word	0x40013000
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40020000 	.word	0x40020000
 80023c8:	40020400 	.word	0x40020400
 80023cc:	40003800 	.word	0x40003800

080023d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08c      	sub	sp, #48	; 0x30
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	f107 031c 	add.w	r3, r7, #28
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a2d      	ldr	r2, [pc, #180]	; (80024a4 <HAL_TIM_Base_MspInit+0xd4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d10e      	bne.n	8002410 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	4b2c      	ldr	r3, [pc, #176]	; (80024a8 <HAL_TIM_Base_MspInit+0xd8>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	4a2b      	ldr	r2, [pc, #172]	; (80024a8 <HAL_TIM_Base_MspInit+0xd8>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6453      	str	r3, [r2, #68]	; 0x44
 8002402:	4b29      	ldr	r3, [pc, #164]	; (80024a8 <HAL_TIM_Base_MspInit+0xd8>)
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	61bb      	str	r3, [r7, #24]
 800240c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800240e:	e045      	b.n	800249c <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM2)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002418:	d12d      	bne.n	8002476 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <HAL_TIM_Base_MspInit+0xd8>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	4a21      	ldr	r2, [pc, #132]	; (80024a8 <HAL_TIM_Base_MspInit+0xd8>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6413      	str	r3, [r2, #64]	; 0x40
 800242a:	4b1f      	ldr	r3, [pc, #124]	; (80024a8 <HAL_TIM_Base_MspInit+0xd8>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <HAL_TIM_Base_MspInit+0xd8>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a1a      	ldr	r2, [pc, #104]	; (80024a8 <HAL_TIM_Base_MspInit+0xd8>)
 8002440:	f043 0302 	orr.w	r3, r3, #2
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <HAL_TIM_Base_MspInit+0xd8>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin|ClimbSpeed_TIM2_CH4_Pin;
 8002452:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002458:	2302      	movs	r3, #2
 800245a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002460:	2300      	movs	r3, #0
 8002462:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002464:	2301      	movs	r3, #1
 8002466:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002468:	f107 031c 	add.w	r3, r7, #28
 800246c:	4619      	mov	r1, r3
 800246e:	480f      	ldr	r0, [pc, #60]	; (80024ac <HAL_TIM_Base_MspInit+0xdc>)
 8002470:	f000 fe28 	bl	80030c4 <HAL_GPIO_Init>
}
 8002474:	e012      	b.n	800249c <HAL_TIM_Base_MspInit+0xcc>
  else if(htim_base->Instance==TIM3)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a0d      	ldr	r2, [pc, #52]	; (80024b0 <HAL_TIM_Base_MspInit+0xe0>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d10d      	bne.n	800249c <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002480:	2300      	movs	r3, #0
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <HAL_TIM_Base_MspInit+0xd8>)
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	4a07      	ldr	r2, [pc, #28]	; (80024a8 <HAL_TIM_Base_MspInit+0xd8>)
 800248a:	f043 0302 	orr.w	r3, r3, #2
 800248e:	6413      	str	r3, [r2, #64]	; 0x40
 8002490:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <HAL_TIM_Base_MspInit+0xd8>)
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
}
 800249c:	bf00      	nop
 800249e:	3730      	adds	r7, #48	; 0x30
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40010000 	.word	0x40010000
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40020400 	.word	0x40020400
 80024b0:	40000400 	.word	0x40000400

080024b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08a      	sub	sp, #40	; 0x28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 0314 	add.w	r3, r7, #20
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a24      	ldr	r2, [pc, #144]	; (8002564 <HAL_TIM_MspPostInit+0xb0>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d11f      	bne.n	8002516 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	4b23      	ldr	r3, [pc, #140]	; (8002568 <HAL_TIM_MspPostInit+0xb4>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	4a22      	ldr	r2, [pc, #136]	; (8002568 <HAL_TIM_MspPostInit+0xb4>)
 80024e0:	f043 0310 	orr.w	r3, r3, #16
 80024e4:	6313      	str	r3, [r2, #48]	; 0x30
 80024e6:	4b20      	ldr	r3, [pc, #128]	; (8002568 <HAL_TIM_MspPostInit+0xb4>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH1_Pin|Climb_TIM1_CH2_Pin;
 80024f2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80024f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f8:	2302      	movs	r3, #2
 80024fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002500:	2300      	movs	r3, #0
 8002502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002504:	2301      	movs	r3, #1
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	4619      	mov	r1, r3
 800250e:	4817      	ldr	r0, [pc, #92]	; (800256c <HAL_TIM_MspPostInit+0xb8>)
 8002510:	f000 fdd8 	bl	80030c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002514:	e022      	b.n	800255c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a15      	ldr	r2, [pc, #84]	; (8002570 <HAL_TIM_MspPostInit+0xbc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d11d      	bne.n	800255c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	4b10      	ldr	r3, [pc, #64]	; (8002568 <HAL_TIM_MspPostInit+0xb4>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	4a0f      	ldr	r2, [pc, #60]	; (8002568 <HAL_TIM_MspPostInit+0xb4>)
 800252a:	f043 0304 	orr.w	r3, r3, #4
 800252e:	6313      	str	r3, [r2, #48]	; 0x30
 8002530:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <HAL_TIM_MspPostInit+0xb4>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 800253c:	23c0      	movs	r3, #192	; 0xc0
 800253e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002540:	2302      	movs	r3, #2
 8002542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002548:	2300      	movs	r3, #0
 800254a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800254c:	2302      	movs	r3, #2
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002550:	f107 0314 	add.w	r3, r7, #20
 8002554:	4619      	mov	r1, r3
 8002556:	4807      	ldr	r0, [pc, #28]	; (8002574 <HAL_TIM_MspPostInit+0xc0>)
 8002558:	f000 fdb4 	bl	80030c4 <HAL_GPIO_Init>
}
 800255c:	bf00      	nop
 800255e:	3728      	adds	r7, #40	; 0x28
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40010000 	.word	0x40010000
 8002568:	40023800 	.word	0x40023800
 800256c:	40021000 	.word	0x40021000
 8002570:	40000400 	.word	0x40000400
 8002574:	40020800 	.word	0x40020800

08002578 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08a      	sub	sp, #40	; 0x28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f107 0314 	add.w	r3, r7, #20
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a31      	ldr	r2, [pc, #196]	; (800265c <HAL_UART_MspInit+0xe4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d15b      	bne.n	8002652 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	4b30      	ldr	r3, [pc, #192]	; (8002660 <HAL_UART_MspInit+0xe8>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	4a2f      	ldr	r2, [pc, #188]	; (8002660 <HAL_UART_MspInit+0xe8>)
 80025a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a8:	6413      	str	r3, [r2, #64]	; 0x40
 80025aa:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <HAL_UART_MspInit+0xe8>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	4b29      	ldr	r3, [pc, #164]	; (8002660 <HAL_UART_MspInit+0xe8>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	4a28      	ldr	r2, [pc, #160]	; (8002660 <HAL_UART_MspInit+0xe8>)
 80025c0:	f043 0308 	orr.w	r3, r3, #8
 80025c4:	6313      	str	r3, [r2, #48]	; 0x30
 80025c6:	4b26      	ldr	r3, [pc, #152]	; (8002660 <HAL_UART_MspInit+0xe8>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 80025d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d8:	2302      	movs	r3, #2
 80025da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e0:	2303      	movs	r3, #3
 80025e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025e4:	2307      	movs	r3, #7
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	4619      	mov	r1, r3
 80025ee:	481d      	ldr	r0, [pc, #116]	; (8002664 <HAL_UART_MspInit+0xec>)
 80025f0:	f000 fd68 	bl	80030c4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80025f4:	4b1c      	ldr	r3, [pc, #112]	; (8002668 <HAL_UART_MspInit+0xf0>)
 80025f6:	4a1d      	ldr	r2, [pc, #116]	; (800266c <HAL_UART_MspInit+0xf4>)
 80025f8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80025fa:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <HAL_UART_MspInit+0xf0>)
 80025fc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002600:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002602:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_UART_MspInit+0xf0>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002608:	4b17      	ldr	r3, [pc, #92]	; (8002668 <HAL_UART_MspInit+0xf0>)
 800260a:	2200      	movs	r2, #0
 800260c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800260e:	4b16      	ldr	r3, [pc, #88]	; (8002668 <HAL_UART_MspInit+0xf0>)
 8002610:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002614:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002616:	4b14      	ldr	r3, [pc, #80]	; (8002668 <HAL_UART_MspInit+0xf0>)
 8002618:	2200      	movs	r2, #0
 800261a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800261c:	4b12      	ldr	r3, [pc, #72]	; (8002668 <HAL_UART_MspInit+0xf0>)
 800261e:	2200      	movs	r2, #0
 8002620:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002622:	4b11      	ldr	r3, [pc, #68]	; (8002668 <HAL_UART_MspInit+0xf0>)
 8002624:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002628:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800262a:	4b0f      	ldr	r3, [pc, #60]	; (8002668 <HAL_UART_MspInit+0xf0>)
 800262c:	2200      	movs	r2, #0
 800262e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002630:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <HAL_UART_MspInit+0xf0>)
 8002632:	2200      	movs	r2, #0
 8002634:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002636:	480c      	ldr	r0, [pc, #48]	; (8002668 <HAL_UART_MspInit+0xf0>)
 8002638:	f000 fa5c 	bl	8002af4 <HAL_DMA_Init>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002642:	f7ff fa69 	bl	8001b18 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a07      	ldr	r2, [pc, #28]	; (8002668 <HAL_UART_MspInit+0xf0>)
 800264a:	635a      	str	r2, [r3, #52]	; 0x34
 800264c:	4a06      	ldr	r2, [pc, #24]	; (8002668 <HAL_UART_MspInit+0xf0>)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002652:	bf00      	nop
 8002654:	3728      	adds	r7, #40	; 0x28
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40004800 	.word	0x40004800
 8002660:	40023800 	.word	0x40023800
 8002664:	40020c00 	.word	0x40020c00
 8002668:	20000498 	.word	0x20000498
 800266c:	40026028 	.word	0x40026028

08002670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002682:	e7fe      	b.n	8002682 <HardFault_Handler+0x4>

08002684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002688:	e7fe      	b.n	8002688 <MemManage_Handler+0x4>

0800268a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800268e:	e7fe      	b.n	800268e <BusFault_Handler+0x4>

08002690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002694:	e7fe      	b.n	8002694 <UsageFault_Handler+0x4>

08002696 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002696:	b480      	push	{r7}
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026b2:	b480      	push	{r7}
 80026b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026c4:	f000 f8a6 	bl	8002814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}

080026cc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80026d0:	4802      	ldr	r0, [pc, #8]	; (80026dc <DMA1_Stream1_IRQHandler+0x10>)
 80026d2:	f000 fabd 	bl	8002c50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000498 	.word	0x20000498

080026e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80026e4:	2080      	movs	r0, #128	; 0x80
 80026e6:	f000 feb1 	bl	800344c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026f4:	4b08      	ldr	r3, [pc, #32]	; (8002718 <SystemInit+0x28>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	4a07      	ldr	r2, [pc, #28]	; (8002718 <SystemInit+0x28>)
 80026fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <SystemInit+0x28>)
 8002706:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800270a:	609a      	str	r2, [r3, #8]
#endif
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800271c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002754 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002720:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002722:	e003      	b.n	800272c <LoopCopyDataInit>

08002724 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002724:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002726:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002728:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800272a:	3104      	adds	r1, #4

0800272c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800272c:	480b      	ldr	r0, [pc, #44]	; (800275c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800272e:	4b0c      	ldr	r3, [pc, #48]	; (8002760 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002730:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002732:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002734:	d3f6      	bcc.n	8002724 <CopyDataInit>
  ldr  r2, =_sbss
 8002736:	4a0b      	ldr	r2, [pc, #44]	; (8002764 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002738:	e002      	b.n	8002740 <LoopFillZerobss>

0800273a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800273a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800273c:	f842 3b04 	str.w	r3, [r2], #4

08002740 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002740:	4b09      	ldr	r3, [pc, #36]	; (8002768 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002742:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002744:	d3f9      	bcc.n	800273a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002746:	f7ff ffd3 	bl	80026f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800274a:	f004 f9af 	bl	8006aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800274e:	f7fe fb7f 	bl	8000e50 <main>
  bx  lr    
 8002752:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002754:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002758:	080072c8 	.word	0x080072c8
  ldr  r0, =_sdata
 800275c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002760:	20000124 	.word	0x20000124
  ldr  r2, =_sbss
 8002764:	20000128 	.word	0x20000128
  ldr  r3, = _ebss
 8002768:	20000850 	.word	0x20000850

0800276c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800276c:	e7fe      	b.n	800276c <ADC_IRQHandler>
	...

08002770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002774:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <HAL_Init+0x40>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0d      	ldr	r2, [pc, #52]	; (80027b0 <HAL_Init+0x40>)
 800277a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800277e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_Init+0x40>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0a      	ldr	r2, [pc, #40]	; (80027b0 <HAL_Init+0x40>)
 8002786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800278a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800278c:	4b08      	ldr	r3, [pc, #32]	; (80027b0 <HAL_Init+0x40>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a07      	ldr	r2, [pc, #28]	; (80027b0 <HAL_Init+0x40>)
 8002792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002796:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002798:	2003      	movs	r0, #3
 800279a:	f000 f94d 	bl	8002a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800279e:	2000      	movs	r0, #0
 80027a0:	f000 f808 	bl	80027b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027a4:	f7ff fd08 	bl	80021b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023c00 	.word	0x40023c00

080027b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027bc:	4b12      	ldr	r3, [pc, #72]	; (8002808 <HAL_InitTick+0x54>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_InitTick+0x58>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	4619      	mov	r1, r3
 80027c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 f965 	bl	8002aa2 <HAL_SYSTICK_Config>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e00e      	b.n	8002800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b0f      	cmp	r3, #15
 80027e6:	d80a      	bhi.n	80027fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027e8:	2200      	movs	r2, #0
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027f0:	f000 f92d 	bl	8002a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027f4:	4a06      	ldr	r2, [pc, #24]	; (8002810 <HAL_InitTick+0x5c>)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	e000      	b.n	8002800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
}
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	200000b0 	.word	0x200000b0
 800280c:	200000b8 	.word	0x200000b8
 8002810:	200000b4 	.word	0x200000b4

08002814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002818:	4b06      	ldr	r3, [pc, #24]	; (8002834 <HAL_IncTick+0x20>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	461a      	mov	r2, r3
 800281e:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_IncTick+0x24>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4413      	add	r3, r2
 8002824:	4a04      	ldr	r2, [pc, #16]	; (8002838 <HAL_IncTick+0x24>)
 8002826:	6013      	str	r3, [r2, #0]
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	200000b8 	.word	0x200000b8
 8002838:	2000084c 	.word	0x2000084c

0800283c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return uwTick;
 8002840:	4b03      	ldr	r3, [pc, #12]	; (8002850 <HAL_GetTick+0x14>)
 8002842:	681b      	ldr	r3, [r3, #0]
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	2000084c 	.word	0x2000084c

08002854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800285c:	f7ff ffee 	bl	800283c <HAL_GetTick>
 8002860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800286c:	d005      	beq.n	800287a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800286e:	4b09      	ldr	r3, [pc, #36]	; (8002894 <HAL_Delay+0x40>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4413      	add	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800287a:	bf00      	nop
 800287c:	f7ff ffde 	bl	800283c <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	429a      	cmp	r2, r3
 800288a:	d8f7      	bhi.n	800287c <HAL_Delay+0x28>
  {
  }
}
 800288c:	bf00      	nop
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	200000b8 	.word	0x200000b8

08002898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <__NVIC_SetPriorityGrouping+0x44>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028b4:	4013      	ands	r3, r2
 80028b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ca:	4a04      	ldr	r2, [pc, #16]	; (80028dc <__NVIC_SetPriorityGrouping+0x44>)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	60d3      	str	r3, [r2, #12]
}
 80028d0:	bf00      	nop
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e4:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <__NVIC_GetPriorityGrouping+0x18>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	0a1b      	lsrs	r3, r3, #8
 80028ea:	f003 0307 	and.w	r3, r3, #7
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	2b00      	cmp	r3, #0
 800290c:	db0b      	blt.n	8002926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	f003 021f 	and.w	r2, r3, #31
 8002914:	4907      	ldr	r1, [pc, #28]	; (8002934 <__NVIC_EnableIRQ+0x38>)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	2001      	movs	r0, #1
 800291e:	fa00 f202 	lsl.w	r2, r0, r2
 8002922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	e000e100 	.word	0xe000e100

08002938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	6039      	str	r1, [r7, #0]
 8002942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002948:	2b00      	cmp	r3, #0
 800294a:	db0a      	blt.n	8002962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	b2da      	uxtb	r2, r3
 8002950:	490c      	ldr	r1, [pc, #48]	; (8002984 <__NVIC_SetPriority+0x4c>)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	0112      	lsls	r2, r2, #4
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	440b      	add	r3, r1
 800295c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002960:	e00a      	b.n	8002978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	4908      	ldr	r1, [pc, #32]	; (8002988 <__NVIC_SetPriority+0x50>)
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	3b04      	subs	r3, #4
 8002970:	0112      	lsls	r2, r2, #4
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	440b      	add	r3, r1
 8002976:	761a      	strb	r2, [r3, #24]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	e000e100 	.word	0xe000e100
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800298c:	b480      	push	{r7}
 800298e:	b089      	sub	sp, #36	; 0x24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f1c3 0307 	rsb	r3, r3, #7
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	bf28      	it	cs
 80029aa:	2304      	movcs	r3, #4
 80029ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3304      	adds	r3, #4
 80029b2:	2b06      	cmp	r3, #6
 80029b4:	d902      	bls.n	80029bc <NVIC_EncodePriority+0x30>
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3b03      	subs	r3, #3
 80029ba:	e000      	b.n	80029be <NVIC_EncodePriority+0x32>
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43da      	mvns	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	401a      	ands	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	fa01 f303 	lsl.w	r3, r1, r3
 80029de:	43d9      	mvns	r1, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e4:	4313      	orrs	r3, r2
         );
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3724      	adds	r7, #36	; 0x24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a04:	d301      	bcc.n	8002a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00f      	b.n	8002a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a0a:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <SysTick_Config+0x40>)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a12:	210f      	movs	r1, #15
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a18:	f7ff ff8e 	bl	8002938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <SysTick_Config+0x40>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a22:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <SysTick_Config+0x40>)
 8002a24:	2207      	movs	r2, #7
 8002a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	e000e010 	.word	0xe000e010

08002a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ff29 	bl	8002898 <__NVIC_SetPriorityGrouping>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a60:	f7ff ff3e 	bl	80028e0 <__NVIC_GetPriorityGrouping>
 8002a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	6978      	ldr	r0, [r7, #20]
 8002a6c:	f7ff ff8e 	bl	800298c <NVIC_EncodePriority>
 8002a70:	4602      	mov	r2, r0
 8002a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff ff5d 	bl	8002938 <__NVIC_SetPriority>
}
 8002a7e:	bf00      	nop
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff31 	bl	80028fc <__NVIC_EnableIRQ>
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff ffa2 	bl	80029f4 <SysTick_Config>
 8002ab0:	4603      	mov	r3, r0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d106      	bne.n	8002ad8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a08      	ldr	r2, [pc, #32]	; (8002af0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002ad0:	f043 0304 	orr.w	r3, r3, #4
 8002ad4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8002ad6:	e005      	b.n	8002ae4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a04      	ldr	r2, [pc, #16]	; (8002af0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8002ade:	f023 0304 	bic.w	r3, r3, #4
 8002ae2:	6013      	str	r3, [r2, #0]
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	e000e010 	.word	0xe000e010

08002af4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b00:	f7ff fe9c 	bl	800283c <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e099      	b.n	8002c44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0201 	bic.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b30:	e00f      	b.n	8002b52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b32:	f7ff fe83 	bl	800283c <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b05      	cmp	r3, #5
 8002b3e:	d908      	bls.n	8002b52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2220      	movs	r2, #32
 8002b44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2203      	movs	r2, #3
 8002b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e078      	b.n	8002c44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1e8      	bne.n	8002b32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	4b38      	ldr	r3, [pc, #224]	; (8002c4c <HAL_DMA_Init+0x158>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d107      	bne.n	8002bbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f023 0307 	bic.w	r3, r3, #7
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d117      	bne.n	8002c16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00e      	beq.n	8002c16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f9e9 	bl	8002fd0 <DMA_CheckFifoParam>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d008      	beq.n	8002c16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2240      	movs	r2, #64	; 0x40
 8002c08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c12:	2301      	movs	r3, #1
 8002c14:	e016      	b.n	8002c44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f9a0 	bl	8002f64 <DMA_CalcBaseAndBitshift>
 8002c24:	4603      	mov	r3, r0
 8002c26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2c:	223f      	movs	r2, #63	; 0x3f
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	f010803f 	.word	0xf010803f

08002c50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c5c:	4b92      	ldr	r3, [pc, #584]	; (8002ea8 <HAL_DMA_IRQHandler+0x258>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a92      	ldr	r2, [pc, #584]	; (8002eac <HAL_DMA_IRQHandler+0x25c>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	0a9b      	lsrs	r3, r3, #10
 8002c68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7a:	2208      	movs	r2, #8
 8002c7c:	409a      	lsls	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d01a      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d013      	beq.n	8002cbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0204 	bic.w	r2, r2, #4
 8002ca2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca8:	2208      	movs	r2, #8
 8002caa:	409a      	lsls	r2, r3
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb4:	f043 0201 	orr.w	r2, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d012      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00b      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cde:	2201      	movs	r2, #1
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cea:	f043 0202 	orr.w	r2, r3, #2
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	409a      	lsls	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d012      	beq.n	8002d28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00b      	beq.n	8002d28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d14:	2204      	movs	r2, #4
 8002d16:	409a      	lsls	r2, r3
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d20:	f043 0204 	orr.w	r2, r3, #4
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2c:	2210      	movs	r2, #16
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4013      	ands	r3, r2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d043      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d03c      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4a:	2210      	movs	r2, #16
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d018      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d108      	bne.n	8002d80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d024      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	4798      	blx	r3
 8002d7e:	e01f      	b.n	8002dc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d01b      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	4798      	blx	r3
 8002d90:	e016      	b.n	8002dc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d107      	bne.n	8002db0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0208 	bic.w	r2, r2, #8
 8002dae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	409a      	lsls	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 808e 	beq.w	8002eee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0310 	and.w	r3, r3, #16
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 8086 	beq.w	8002eee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de6:	2220      	movs	r2, #32
 8002de8:	409a      	lsls	r2, r3
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b05      	cmp	r3, #5
 8002df8:	d136      	bne.n	8002e68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0216 	bic.w	r2, r2, #22
 8002e08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d103      	bne.n	8002e2a <HAL_DMA_IRQHandler+0x1da>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d007      	beq.n	8002e3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0208 	bic.w	r2, r2, #8
 8002e38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3e:	223f      	movs	r2, #63	; 0x3f
 8002e40:	409a      	lsls	r2, r3
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d07d      	beq.n	8002f5a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	4798      	blx	r3
        }
        return;
 8002e66:	e078      	b.n	8002f5a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d01c      	beq.n	8002eb0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d108      	bne.n	8002e96 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d030      	beq.n	8002eee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	4798      	blx	r3
 8002e94:	e02b      	b.n	8002eee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d027      	beq.n	8002eee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	4798      	blx	r3
 8002ea6:	e022      	b.n	8002eee <HAL_DMA_IRQHandler+0x29e>
 8002ea8:	200000b0 	.word	0x200000b0
 8002eac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10f      	bne.n	8002ede <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0210 	bic.w	r2, r2, #16
 8002ecc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d032      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d022      	beq.n	8002f48 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2205      	movs	r2, #5
 8002f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0201 	bic.w	r2, r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	60bb      	str	r3, [r7, #8]
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d307      	bcc.n	8002f36 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1f2      	bne.n	8002f1a <HAL_DMA_IRQHandler+0x2ca>
 8002f34:	e000      	b.n	8002f38 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002f36:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	4798      	blx	r3
 8002f58:	e000      	b.n	8002f5c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002f5a:	bf00      	nop
    }
  }
}
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop

08002f64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	3b10      	subs	r3, #16
 8002f74:	4a14      	ldr	r2, [pc, #80]	; (8002fc8 <DMA_CalcBaseAndBitshift+0x64>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	091b      	lsrs	r3, r3, #4
 8002f7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f7e:	4a13      	ldr	r2, [pc, #76]	; (8002fcc <DMA_CalcBaseAndBitshift+0x68>)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4413      	add	r3, r2
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	461a      	mov	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d909      	bls.n	8002fa6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f9a:	f023 0303 	bic.w	r3, r3, #3
 8002f9e:	1d1a      	adds	r2, r3, #4
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	659a      	str	r2, [r3, #88]	; 0x58
 8002fa4:	e007      	b.n	8002fb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fae:	f023 0303 	bic.w	r3, r3, #3
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	aaaaaaab 	.word	0xaaaaaaab
 8002fcc:	08007268 	.word	0x08007268

08002fd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d11f      	bne.n	800302a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d855      	bhi.n	800309c <DMA_CheckFifoParam+0xcc>
 8002ff0:	a201      	add	r2, pc, #4	; (adr r2, 8002ff8 <DMA_CheckFifoParam+0x28>)
 8002ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff6:	bf00      	nop
 8002ff8:	08003009 	.word	0x08003009
 8002ffc:	0800301b 	.word	0x0800301b
 8003000:	08003009 	.word	0x08003009
 8003004:	0800309d 	.word	0x0800309d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d045      	beq.n	80030a0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003018:	e042      	b.n	80030a0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003022:	d13f      	bne.n	80030a4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003028:	e03c      	b.n	80030a4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003032:	d121      	bne.n	8003078 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2b03      	cmp	r3, #3
 8003038:	d836      	bhi.n	80030a8 <DMA_CheckFifoParam+0xd8>
 800303a:	a201      	add	r2, pc, #4	; (adr r2, 8003040 <DMA_CheckFifoParam+0x70>)
 800303c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003040:	08003051 	.word	0x08003051
 8003044:	08003057 	.word	0x08003057
 8003048:	08003051 	.word	0x08003051
 800304c:	08003069 	.word	0x08003069
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	73fb      	strb	r3, [r7, #15]
      break;
 8003054:	e02f      	b.n	80030b6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d024      	beq.n	80030ac <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003066:	e021      	b.n	80030ac <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003070:	d11e      	bne.n	80030b0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003076:	e01b      	b.n	80030b0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d902      	bls.n	8003084 <DMA_CheckFifoParam+0xb4>
 800307e:	2b03      	cmp	r3, #3
 8003080:	d003      	beq.n	800308a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003082:	e018      	b.n	80030b6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
      break;
 8003088:	e015      	b.n	80030b6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00e      	beq.n	80030b4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	73fb      	strb	r3, [r7, #15]
      break;
 800309a:	e00b      	b.n	80030b4 <DMA_CheckFifoParam+0xe4>
      break;
 800309c:	bf00      	nop
 800309e:	e00a      	b.n	80030b6 <DMA_CheckFifoParam+0xe6>
      break;
 80030a0:	bf00      	nop
 80030a2:	e008      	b.n	80030b6 <DMA_CheckFifoParam+0xe6>
      break;
 80030a4:	bf00      	nop
 80030a6:	e006      	b.n	80030b6 <DMA_CheckFifoParam+0xe6>
      break;
 80030a8:	bf00      	nop
 80030aa:	e004      	b.n	80030b6 <DMA_CheckFifoParam+0xe6>
      break;
 80030ac:	bf00      	nop
 80030ae:	e002      	b.n	80030b6 <DMA_CheckFifoParam+0xe6>
      break;   
 80030b0:	bf00      	nop
 80030b2:	e000      	b.n	80030b6 <DMA_CheckFifoParam+0xe6>
      break;
 80030b4:	bf00      	nop
    }
  } 
  
  return status; 
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b089      	sub	sp, #36	; 0x24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030da:	2300      	movs	r3, #0
 80030dc:	61fb      	str	r3, [r7, #28]
 80030de:	e177      	b.n	80033d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030e0:	2201      	movs	r2, #1
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4013      	ands	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	f040 8166 	bne.w	80033ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d00b      	beq.n	800311e <HAL_GPIO_Init+0x5a>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d007      	beq.n	800311e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003112:	2b11      	cmp	r3, #17
 8003114:	d003      	beq.n	800311e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b12      	cmp	r3, #18
 800311c:	d130      	bne.n	8003180 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	2203      	movs	r2, #3
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4013      	ands	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4313      	orrs	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003154:	2201      	movs	r2, #1
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f003 0201 	and.w	r2, r3, #1
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	2203      	movs	r2, #3
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0xfc>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b12      	cmp	r3, #18
 80031be:	d123      	bne.n	8003208 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	08da      	lsrs	r2, r3, #3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3208      	adds	r2, #8
 80031c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	220f      	movs	r2, #15
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	08da      	lsrs	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3208      	adds	r2, #8
 8003202:	69b9      	ldr	r1, [r7, #24]
 8003204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	2203      	movs	r2, #3
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	43db      	mvns	r3, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4013      	ands	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 0203 	and.w	r2, r3, #3
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4313      	orrs	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80c0 	beq.w	80033ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	4b65      	ldr	r3, [pc, #404]	; (80033e4 <HAL_GPIO_Init+0x320>)
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	4a64      	ldr	r2, [pc, #400]	; (80033e4 <HAL_GPIO_Init+0x320>)
 8003254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003258:	6453      	str	r3, [r2, #68]	; 0x44
 800325a:	4b62      	ldr	r3, [pc, #392]	; (80033e4 <HAL_GPIO_Init+0x320>)
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003266:	4a60      	ldr	r2, [pc, #384]	; (80033e8 <HAL_GPIO_Init+0x324>)
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	089b      	lsrs	r3, r3, #2
 800326c:	3302      	adds	r3, #2
 800326e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	220f      	movs	r2, #15
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43db      	mvns	r3, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4013      	ands	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a57      	ldr	r2, [pc, #348]	; (80033ec <HAL_GPIO_Init+0x328>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d037      	beq.n	8003302 <HAL_GPIO_Init+0x23e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a56      	ldr	r2, [pc, #344]	; (80033f0 <HAL_GPIO_Init+0x32c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d031      	beq.n	80032fe <HAL_GPIO_Init+0x23a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a55      	ldr	r2, [pc, #340]	; (80033f4 <HAL_GPIO_Init+0x330>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d02b      	beq.n	80032fa <HAL_GPIO_Init+0x236>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a54      	ldr	r2, [pc, #336]	; (80033f8 <HAL_GPIO_Init+0x334>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d025      	beq.n	80032f6 <HAL_GPIO_Init+0x232>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a53      	ldr	r2, [pc, #332]	; (80033fc <HAL_GPIO_Init+0x338>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d01f      	beq.n	80032f2 <HAL_GPIO_Init+0x22e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a52      	ldr	r2, [pc, #328]	; (8003400 <HAL_GPIO_Init+0x33c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d019      	beq.n	80032ee <HAL_GPIO_Init+0x22a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a51      	ldr	r2, [pc, #324]	; (8003404 <HAL_GPIO_Init+0x340>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d013      	beq.n	80032ea <HAL_GPIO_Init+0x226>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a50      	ldr	r2, [pc, #320]	; (8003408 <HAL_GPIO_Init+0x344>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00d      	beq.n	80032e6 <HAL_GPIO_Init+0x222>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a4f      	ldr	r2, [pc, #316]	; (800340c <HAL_GPIO_Init+0x348>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d007      	beq.n	80032e2 <HAL_GPIO_Init+0x21e>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a4e      	ldr	r2, [pc, #312]	; (8003410 <HAL_GPIO_Init+0x34c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d101      	bne.n	80032de <HAL_GPIO_Init+0x21a>
 80032da:	2309      	movs	r3, #9
 80032dc:	e012      	b.n	8003304 <HAL_GPIO_Init+0x240>
 80032de:	230a      	movs	r3, #10
 80032e0:	e010      	b.n	8003304 <HAL_GPIO_Init+0x240>
 80032e2:	2308      	movs	r3, #8
 80032e4:	e00e      	b.n	8003304 <HAL_GPIO_Init+0x240>
 80032e6:	2307      	movs	r3, #7
 80032e8:	e00c      	b.n	8003304 <HAL_GPIO_Init+0x240>
 80032ea:	2306      	movs	r3, #6
 80032ec:	e00a      	b.n	8003304 <HAL_GPIO_Init+0x240>
 80032ee:	2305      	movs	r3, #5
 80032f0:	e008      	b.n	8003304 <HAL_GPIO_Init+0x240>
 80032f2:	2304      	movs	r3, #4
 80032f4:	e006      	b.n	8003304 <HAL_GPIO_Init+0x240>
 80032f6:	2303      	movs	r3, #3
 80032f8:	e004      	b.n	8003304 <HAL_GPIO_Init+0x240>
 80032fa:	2302      	movs	r3, #2
 80032fc:	e002      	b.n	8003304 <HAL_GPIO_Init+0x240>
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <HAL_GPIO_Init+0x240>
 8003302:	2300      	movs	r3, #0
 8003304:	69fa      	ldr	r2, [r7, #28]
 8003306:	f002 0203 	and.w	r2, r2, #3
 800330a:	0092      	lsls	r2, r2, #2
 800330c:	4093      	lsls	r3, r2
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4313      	orrs	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003314:	4934      	ldr	r1, [pc, #208]	; (80033e8 <HAL_GPIO_Init+0x324>)
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	089b      	lsrs	r3, r3, #2
 800331a:	3302      	adds	r3, #2
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003322:	4b3c      	ldr	r3, [pc, #240]	; (8003414 <HAL_GPIO_Init+0x350>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	43db      	mvns	r3, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4013      	ands	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003346:	4a33      	ldr	r2, [pc, #204]	; (8003414 <HAL_GPIO_Init+0x350>)
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800334c:	4b31      	ldr	r3, [pc, #196]	; (8003414 <HAL_GPIO_Init+0x350>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	43db      	mvns	r3, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003370:	4a28      	ldr	r2, [pc, #160]	; (8003414 <HAL_GPIO_Init+0x350>)
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003376:	4b27      	ldr	r3, [pc, #156]	; (8003414 <HAL_GPIO_Init+0x350>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	43db      	mvns	r3, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4013      	ands	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800339a:	4a1e      	ldr	r2, [pc, #120]	; (8003414 <HAL_GPIO_Init+0x350>)
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033a0:	4b1c      	ldr	r3, [pc, #112]	; (8003414 <HAL_GPIO_Init+0x350>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	43db      	mvns	r3, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4013      	ands	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033c4:	4a13      	ldr	r2, [pc, #76]	; (8003414 <HAL_GPIO_Init+0x350>)
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	3301      	adds	r3, #1
 80033ce:	61fb      	str	r3, [r7, #28]
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	2b0f      	cmp	r3, #15
 80033d4:	f67f ae84 	bls.w	80030e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033d8:	bf00      	nop
 80033da:	3724      	adds	r7, #36	; 0x24
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	40023800 	.word	0x40023800
 80033e8:	40013800 	.word	0x40013800
 80033ec:	40020000 	.word	0x40020000
 80033f0:	40020400 	.word	0x40020400
 80033f4:	40020800 	.word	0x40020800
 80033f8:	40020c00 	.word	0x40020c00
 80033fc:	40021000 	.word	0x40021000
 8003400:	40021400 	.word	0x40021400
 8003404:	40021800 	.word	0x40021800
 8003408:	40021c00 	.word	0x40021c00
 800340c:	40022000 	.word	0x40022000
 8003410:	40022400 	.word	0x40022400
 8003414:	40013c00 	.word	0x40013c00

08003418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	460b      	mov	r3, r1
 8003422:	807b      	strh	r3, [r7, #2]
 8003424:	4613      	mov	r3, r2
 8003426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003428:	787b      	ldrb	r3, [r7, #1]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800342e:	887a      	ldrh	r2, [r7, #2]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003434:	e003      	b.n	800343e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003436:	887b      	ldrh	r3, [r7, #2]
 8003438:	041a      	lsls	r2, r3, #16
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	619a      	str	r2, [r3, #24]
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
	...

0800344c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003458:	695a      	ldr	r2, [r3, #20]
 800345a:	88fb      	ldrh	r3, [r7, #6]
 800345c:	4013      	ands	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d006      	beq.n	8003470 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003462:	4a05      	ldr	r2, [pc, #20]	; (8003478 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003464:	88fb      	ldrh	r3, [r7, #6]
 8003466:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003468:	88fb      	ldrh	r3, [r7, #6]
 800346a:	4618      	mov	r0, r3
 800346c:	f7fe f974 	bl	8001758 <HAL_GPIO_EXTI_Callback>
  }
}
 8003470:	bf00      	nop
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40013c00 	.word	0x40013c00

0800347c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e11f      	b.n	80036ce <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fe feb0 	bl	8002208 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2224      	movs	r2, #36	; 0x24
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034e0:	f001 fab2 	bl	8004a48 <HAL_RCC_GetPCLK1Freq>
 80034e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	4a7b      	ldr	r2, [pc, #492]	; (80036d8 <HAL_I2C_Init+0x25c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d807      	bhi.n	8003500 <HAL_I2C_Init+0x84>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4a7a      	ldr	r2, [pc, #488]	; (80036dc <HAL_I2C_Init+0x260>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	bf94      	ite	ls
 80034f8:	2301      	movls	r3, #1
 80034fa:	2300      	movhi	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	e006      	b.n	800350e <HAL_I2C_Init+0x92>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4a77      	ldr	r2, [pc, #476]	; (80036e0 <HAL_I2C_Init+0x264>)
 8003504:	4293      	cmp	r3, r2
 8003506:	bf94      	ite	ls
 8003508:	2301      	movls	r3, #1
 800350a:	2300      	movhi	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e0db      	b.n	80036ce <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4a72      	ldr	r2, [pc, #456]	; (80036e4 <HAL_I2C_Init+0x268>)
 800351a:	fba2 2303 	umull	r2, r3, r2, r3
 800351e:	0c9b      	lsrs	r3, r3, #18
 8003520:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	4a64      	ldr	r2, [pc, #400]	; (80036d8 <HAL_I2C_Init+0x25c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d802      	bhi.n	8003550 <HAL_I2C_Init+0xd4>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	3301      	adds	r3, #1
 800354e:	e009      	b.n	8003564 <HAL_I2C_Init+0xe8>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003556:	fb02 f303 	mul.w	r3, r2, r3
 800355a:	4a63      	ldr	r2, [pc, #396]	; (80036e8 <HAL_I2C_Init+0x26c>)
 800355c:	fba2 2303 	umull	r2, r3, r2, r3
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	3301      	adds	r3, #1
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	430b      	orrs	r3, r1
 800356a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003576:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	4956      	ldr	r1, [pc, #344]	; (80036d8 <HAL_I2C_Init+0x25c>)
 8003580:	428b      	cmp	r3, r1
 8003582:	d80d      	bhi.n	80035a0 <HAL_I2C_Init+0x124>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1e59      	subs	r1, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003592:	3301      	adds	r3, #1
 8003594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003598:	2b04      	cmp	r3, #4
 800359a:	bf38      	it	cc
 800359c:	2304      	movcc	r3, #4
 800359e:	e04f      	b.n	8003640 <HAL_I2C_Init+0x1c4>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d111      	bne.n	80035cc <HAL_I2C_Init+0x150>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1e58      	subs	r0, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	440b      	add	r3, r1
 80035b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ba:	3301      	adds	r3, #1
 80035bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bf0c      	ite	eq
 80035c4:	2301      	moveq	r3, #1
 80035c6:	2300      	movne	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	e012      	b.n	80035f2 <HAL_I2C_Init+0x176>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1e58      	subs	r0, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6859      	ldr	r1, [r3, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	0099      	lsls	r1, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e2:	3301      	adds	r3, #1
 80035e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bf0c      	ite	eq
 80035ec:	2301      	moveq	r3, #1
 80035ee:	2300      	movne	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <HAL_I2C_Init+0x17e>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e022      	b.n	8003640 <HAL_I2C_Init+0x1c4>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10e      	bne.n	8003620 <HAL_I2C_Init+0x1a4>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1e58      	subs	r0, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6859      	ldr	r1, [r3, #4]
 800360a:	460b      	mov	r3, r1
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	440b      	add	r3, r1
 8003610:	fbb0 f3f3 	udiv	r3, r0, r3
 8003614:	3301      	adds	r3, #1
 8003616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800361a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800361e:	e00f      	b.n	8003640 <HAL_I2C_Init+0x1c4>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	1e58      	subs	r0, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	0099      	lsls	r1, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	fbb0 f3f3 	udiv	r3, r0, r3
 8003636:	3301      	adds	r3, #1
 8003638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800363c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	6809      	ldr	r1, [r1, #0]
 8003644:	4313      	orrs	r3, r2
 8003646:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69da      	ldr	r2, [r3, #28]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800366e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6911      	ldr	r1, [r2, #16]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68d2      	ldr	r2, [r2, #12]
 800367a:	4311      	orrs	r1, r2
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	430b      	orrs	r3, r1
 8003682:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695a      	ldr	r2, [r3, #20]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0201 	orr.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	000186a0 	.word	0x000186a0
 80036dc:	001e847f 	.word	0x001e847f
 80036e0:	003d08ff 	.word	0x003d08ff
 80036e4:	431bde83 	.word	0x431bde83
 80036e8:	10624dd3 	.word	0x10624dd3

080036ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08c      	sub	sp, #48	; 0x30
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	4608      	mov	r0, r1
 80036f6:	4611      	mov	r1, r2
 80036f8:	461a      	mov	r2, r3
 80036fa:	4603      	mov	r3, r0
 80036fc:	817b      	strh	r3, [r7, #10]
 80036fe:	460b      	mov	r3, r1
 8003700:	813b      	strh	r3, [r7, #8]
 8003702:	4613      	mov	r3, r2
 8003704:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003706:	f7ff f899 	bl	800283c <HAL_GetTick>
 800370a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b20      	cmp	r3, #32
 8003716:	f040 8208 	bne.w	8003b2a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	2319      	movs	r3, #25
 8003720:	2201      	movs	r2, #1
 8003722:	497b      	ldr	r1, [pc, #492]	; (8003910 <HAL_I2C_Mem_Read+0x224>)
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 faef 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003730:	2302      	movs	r3, #2
 8003732:	e1fb      	b.n	8003b2c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_I2C_Mem_Read+0x56>
 800373e:	2302      	movs	r3, #2
 8003740:	e1f4      	b.n	8003b2c <HAL_I2C_Mem_Read+0x440>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b01      	cmp	r3, #1
 8003756:	d007      	beq.n	8003768 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0201 	orr.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003776:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2222      	movs	r2, #34	; 0x22
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2240      	movs	r2, #64	; 0x40
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003792:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003798:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379e:	b29a      	uxth	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4a5b      	ldr	r2, [pc, #364]	; (8003914 <HAL_I2C_Mem_Read+0x228>)
 80037a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037aa:	88f8      	ldrh	r0, [r7, #6]
 80037ac:	893a      	ldrh	r2, [r7, #8]
 80037ae:	8979      	ldrh	r1, [r7, #10]
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	9301      	str	r3, [sp, #4]
 80037b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	4603      	mov	r3, r0
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f9bc 	bl	8003b38 <I2C_RequestMemoryRead>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e1b0      	b.n	8003b2c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d113      	bne.n	80037fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d2:	2300      	movs	r3, #0
 80037d4:	623b      	str	r3, [r7, #32]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	623b      	str	r3, [r7, #32]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	623b      	str	r3, [r7, #32]
 80037e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	e184      	b.n	8003b04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d11b      	bne.n	800383a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003810:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003812:	2300      	movs	r3, #0
 8003814:	61fb      	str	r3, [r7, #28]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	61fb      	str	r3, [r7, #28]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	61fb      	str	r3, [r7, #28]
 8003826:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	e164      	b.n	8003b04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383e:	2b02      	cmp	r3, #2
 8003840:	d11b      	bne.n	800387a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003850:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003860:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003862:	2300      	movs	r3, #0
 8003864:	61bb      	str	r3, [r7, #24]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	e144      	b.n	8003b04 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	617b      	str	r3, [r7, #20]
 800388e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003890:	e138      	b.n	8003b04 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003896:	2b03      	cmp	r3, #3
 8003898:	f200 80f1 	bhi.w	8003a7e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d123      	bne.n	80038ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 fb44 	bl	8003f36 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e139      	b.n	8003b2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691a      	ldr	r2, [r3, #16]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038ea:	e10b      	b.n	8003b04 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d14e      	bne.n	8003992 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fa:	2200      	movs	r2, #0
 80038fc:	4906      	ldr	r1, [pc, #24]	; (8003918 <HAL_I2C_Mem_Read+0x22c>)
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 fa02 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d008      	beq.n	800391c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e10e      	b.n	8003b2c <HAL_I2C_Mem_Read+0x440>
 800390e:	bf00      	nop
 8003910:	00100002 	.word	0x00100002
 8003914:	ffff0000 	.word	0xffff0000
 8003918:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800392a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691a      	ldr	r2, [r3, #16]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003990:	e0b8      	b.n	8003b04 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003998:	2200      	movs	r2, #0
 800399a:	4966      	ldr	r1, [pc, #408]	; (8003b34 <HAL_I2C_Mem_Read+0x448>)
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f9b3 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e0bf      	b.n	8003b2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f4:	2200      	movs	r2, #0
 80039f6:	494f      	ldr	r1, [pc, #316]	; (8003b34 <HAL_I2C_Mem_Read+0x448>)
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f985 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 80039fe:	4603      	mov	r3, r0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e091      	b.n	8003b2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691a      	ldr	r2, [r3, #16]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	3b01      	subs	r3, #1
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a7c:	e042      	b.n	8003b04 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 fa57 	bl	8003f36 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e04c      	b.n	8003b2c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d118      	bne.n	8003b04 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f47f aec2 	bne.w	8003892 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	e000      	b.n	8003b2c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b2a:	2302      	movs	r3, #2
  }
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3728      	adds	r7, #40	; 0x28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	00010004 	.word	0x00010004

08003b38 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	4608      	mov	r0, r1
 8003b42:	4611      	mov	r1, r2
 8003b44:	461a      	mov	r2, r3
 8003b46:	4603      	mov	r3, r0
 8003b48:	817b      	strh	r3, [r7, #10]
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	813b      	strh	r3, [r7, #8]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b60:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 f8c2 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00d      	beq.n	8003ba6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b98:	d103      	bne.n	8003ba2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ba0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e0aa      	b.n	8003cfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ba6:	897b      	ldrh	r3, [r7, #10]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	461a      	mov	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bb4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	6a3a      	ldr	r2, [r7, #32]
 8003bba:	4952      	ldr	r1, [pc, #328]	; (8003d04 <I2C_RequestMemoryRead+0x1cc>)
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 f8fa 	bl	8003db6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e097      	b.n	8003cfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bcc:	2300      	movs	r3, #0
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	617b      	str	r3, [r7, #20]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be4:	6a39      	ldr	r1, [r7, #32]
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 f964 	bl	8003eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00d      	beq.n	8003c0e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d107      	bne.n	8003c0a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e076      	b.n	8003cfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d105      	bne.n	8003c20 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c14:	893b      	ldrh	r3, [r7, #8]
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	611a      	str	r2, [r3, #16]
 8003c1e:	e021      	b.n	8003c64 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c20:	893b      	ldrh	r3, [r7, #8]
 8003c22:	0a1b      	lsrs	r3, r3, #8
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c30:	6a39      	ldr	r1, [r7, #32]
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 f93e 	bl	8003eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00d      	beq.n	8003c5a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d107      	bne.n	8003c56 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e050      	b.n	8003cfc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c5a:	893b      	ldrh	r3, [r7, #8]
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c66:	6a39      	ldr	r1, [r7, #32]
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f923 	bl	8003eb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00d      	beq.n	8003c90 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d107      	bne.n	8003c8c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c8a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e035      	b.n	8003cfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c9e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 f82b 	bl	8003d08 <I2C_WaitOnFlagUntilTimeout>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00d      	beq.n	8003cd4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc6:	d103      	bne.n	8003cd0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e013      	b.n	8003cfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003cd4:	897b      	ldrh	r3, [r7, #10]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	6a3a      	ldr	r2, [r7, #32]
 8003ce8:	4906      	ldr	r1, [pc, #24]	; (8003d04 <I2C_RequestMemoryRead+0x1cc>)
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f863 	bl	8003db6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	00010002 	.word	0x00010002

08003d08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	4613      	mov	r3, r2
 8003d16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d18:	e025      	b.n	8003d66 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d20:	d021      	beq.n	8003d66 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d22:	f7fe fd8b 	bl	800283c <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d302      	bcc.n	8003d38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d116      	bne.n	8003d66 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f043 0220 	orr.w	r2, r3, #32
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e023      	b.n	8003dae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	0c1b      	lsrs	r3, r3, #16
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d10d      	bne.n	8003d8c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	43da      	mvns	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	bf0c      	ite	eq
 8003d82:	2301      	moveq	r3, #1
 8003d84:	2300      	movne	r3, #0
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	461a      	mov	r2, r3
 8003d8a:	e00c      	b.n	8003da6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	43da      	mvns	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4013      	ands	r3, r2
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	bf0c      	ite	eq
 8003d9e:	2301      	moveq	r3, #1
 8003da0:	2300      	movne	r3, #0
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	461a      	mov	r2, r3
 8003da6:	79fb      	ldrb	r3, [r7, #7]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d0b6      	beq.n	8003d1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b084      	sub	sp, #16
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
 8003dc2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dc4:	e051      	b.n	8003e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd4:	d123      	bne.n	8003e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	f043 0204 	orr.w	r2, r3, #4
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e046      	b.n	8003eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e24:	d021      	beq.n	8003e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e26:	f7fe fd09 	bl	800283c <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d302      	bcc.n	8003e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d116      	bne.n	8003e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f043 0220 	orr.w	r2, r3, #32
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e020      	b.n	8003eac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	0c1b      	lsrs	r3, r3, #16
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d10c      	bne.n	8003e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	43da      	mvns	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	bf14      	ite	ne
 8003e86:	2301      	movne	r3, #1
 8003e88:	2300      	moveq	r3, #0
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	e00b      	b.n	8003ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	43da      	mvns	r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	bf14      	ite	ne
 8003ea0:	2301      	movne	r3, #1
 8003ea2:	2300      	moveq	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d18d      	bne.n	8003dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ec0:	e02d      	b.n	8003f1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 f88d 	bl	8003fe2 <I2C_IsAcknowledgeFailed>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e02d      	b.n	8003f2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ed8:	d021      	beq.n	8003f1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eda:	f7fe fcaf 	bl	800283c <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d302      	bcc.n	8003ef0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d116      	bne.n	8003f1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f043 0220 	orr.w	r2, r3, #32
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e007      	b.n	8003f2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f28:	2b80      	cmp	r3, #128	; 0x80
 8003f2a:	d1ca      	bne.n	8003ec2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b084      	sub	sp, #16
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f42:	e042      	b.n	8003fca <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b10      	cmp	r3, #16
 8003f50:	d119      	bne.n	8003f86 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f06f 0210 	mvn.w	r2, #16
 8003f5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e029      	b.n	8003fda <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f86:	f7fe fc59 	bl	800283c <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d302      	bcc.n	8003f9c <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d116      	bne.n	8003fca <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f043 0220 	orr.w	r2, r3, #32
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e007      	b.n	8003fda <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd4:	2b40      	cmp	r3, #64	; 0x40
 8003fd6:	d1b5      	bne.n	8003f44 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff8:	d11b      	bne.n	8004032 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004002:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	f043 0204 	orr.w	r2, r3, #4
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b20      	cmp	r3, #32
 8004054:	d129      	bne.n	80040aa <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2224      	movs	r2, #36	; 0x24
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0201 	bic.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0210 	bic.w	r2, r2, #16
 800407c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0201 	orr.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	e000      	b.n	80040ac <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80040aa:	2302      	movs	r3, #2
  }
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b20      	cmp	r3, #32
 80040d0:	d12a      	bne.n	8004128 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2224      	movs	r2, #36	; 0x24
 80040d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0201 	bic.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80040f2:	89fb      	ldrh	r3, [r7, #14]
 80040f4:	f023 030f 	bic.w	r3, r3, #15
 80040f8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	89fb      	ldrh	r3, [r7, #14]
 8004100:	4313      	orrs	r3, r2
 8004102:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	89fa      	ldrh	r2, [r7, #14]
 800410a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	e000      	b.n	800412a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004128:	2302      	movs	r3, #2
  }
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
	...

08004138 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800413e:	2300      	movs	r3, #0
 8004140:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004142:	2300      	movs	r3, #0
 8004144:	603b      	str	r3, [r7, #0]
 8004146:	4b20      	ldr	r3, [pc, #128]	; (80041c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	4a1f      	ldr	r2, [pc, #124]	; (80041c8 <HAL_PWREx_EnableOverDrive+0x90>)
 800414c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004150:	6413      	str	r3, [r2, #64]	; 0x40
 8004152:	4b1d      	ldr	r3, [pc, #116]	; (80041c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800415a:	603b      	str	r3, [r7, #0]
 800415c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800415e:	4b1b      	ldr	r3, [pc, #108]	; (80041cc <HAL_PWREx_EnableOverDrive+0x94>)
 8004160:	2201      	movs	r2, #1
 8004162:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004164:	f7fe fb6a 	bl	800283c <HAL_GetTick>
 8004168:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800416a:	e009      	b.n	8004180 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800416c:	f7fe fb66 	bl	800283c <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800417a:	d901      	bls.n	8004180 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e01f      	b.n	80041c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004180:	4b13      	ldr	r3, [pc, #76]	; (80041d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800418c:	d1ee      	bne.n	800416c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800418e:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004190:	2201      	movs	r2, #1
 8004192:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004194:	f7fe fb52 	bl	800283c <HAL_GetTick>
 8004198:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800419a:	e009      	b.n	80041b0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800419c:	f7fe fb4e 	bl	800283c <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041aa:	d901      	bls.n	80041b0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e007      	b.n	80041c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80041b0:	4b07      	ldr	r3, [pc, #28]	; (80041d0 <HAL_PWREx_EnableOverDrive+0x98>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041bc:	d1ee      	bne.n	800419c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40023800 	.word	0x40023800
 80041cc:	420e0040 	.word	0x420e0040
 80041d0:	40007000 	.word	0x40007000
 80041d4:	420e0044 	.word	0x420e0044

080041d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e25b      	b.n	80046a2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d075      	beq.n	80042e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041f6:	4ba3      	ldr	r3, [pc, #652]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d00c      	beq.n	800421c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004202:	4ba0      	ldr	r3, [pc, #640]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800420a:	2b08      	cmp	r3, #8
 800420c:	d112      	bne.n	8004234 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800420e:	4b9d      	ldr	r3, [pc, #628]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800421a:	d10b      	bne.n	8004234 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800421c:	4b99      	ldr	r3, [pc, #612]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d05b      	beq.n	80042e0 <HAL_RCC_OscConfig+0x108>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d157      	bne.n	80042e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e236      	b.n	80046a2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800423c:	d106      	bne.n	800424c <HAL_RCC_OscConfig+0x74>
 800423e:	4b91      	ldr	r3, [pc, #580]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a90      	ldr	r2, [pc, #576]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	e01d      	b.n	8004288 <HAL_RCC_OscConfig+0xb0>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004254:	d10c      	bne.n	8004270 <HAL_RCC_OscConfig+0x98>
 8004256:	4b8b      	ldr	r3, [pc, #556]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a8a      	ldr	r2, [pc, #552]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800425c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	4b88      	ldr	r3, [pc, #544]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a87      	ldr	r2, [pc, #540]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	e00b      	b.n	8004288 <HAL_RCC_OscConfig+0xb0>
 8004270:	4b84      	ldr	r3, [pc, #528]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a83      	ldr	r2, [pc, #524]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	4b81      	ldr	r3, [pc, #516]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a80      	ldr	r2, [pc, #512]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d013      	beq.n	80042b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004290:	f7fe fad4 	bl	800283c <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004298:	f7fe fad0 	bl	800283c <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b64      	cmp	r3, #100	; 0x64
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e1fb      	b.n	80046a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042aa:	4b76      	ldr	r3, [pc, #472]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCC_OscConfig+0xc0>
 80042b6:	e014      	b.n	80042e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b8:	f7fe fac0 	bl	800283c <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042c0:	f7fe fabc 	bl	800283c <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b64      	cmp	r3, #100	; 0x64
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e1e7      	b.n	80046a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042d2:	4b6c      	ldr	r3, [pc, #432]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f0      	bne.n	80042c0 <HAL_RCC_OscConfig+0xe8>
 80042de:	e000      	b.n	80042e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d063      	beq.n	80043b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ee:	4b65      	ldr	r3, [pc, #404]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00b      	beq.n	8004312 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042fa:	4b62      	ldr	r3, [pc, #392]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004302:	2b08      	cmp	r3, #8
 8004304:	d11c      	bne.n	8004340 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004306:	4b5f      	ldr	r3, [pc, #380]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d116      	bne.n	8004340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004312:	4b5c      	ldr	r3, [pc, #368]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d005      	beq.n	800432a <HAL_RCC_OscConfig+0x152>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d001      	beq.n	800432a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e1bb      	b.n	80046a2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432a:	4b56      	ldr	r3, [pc, #344]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	4952      	ldr	r1, [pc, #328]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800433a:	4313      	orrs	r3, r2
 800433c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800433e:	e03a      	b.n	80043b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d020      	beq.n	800438a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004348:	4b4f      	ldr	r3, [pc, #316]	; (8004488 <HAL_RCC_OscConfig+0x2b0>)
 800434a:	2201      	movs	r2, #1
 800434c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434e:	f7fe fa75 	bl	800283c <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004356:	f7fe fa71 	bl	800283c <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e19c      	b.n	80046a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004368:	4b46      	ldr	r3, [pc, #280]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004374:	4b43      	ldr	r3, [pc, #268]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	4940      	ldr	r1, [pc, #256]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004384:	4313      	orrs	r3, r2
 8004386:	600b      	str	r3, [r1, #0]
 8004388:	e015      	b.n	80043b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800438a:	4b3f      	ldr	r3, [pc, #252]	; (8004488 <HAL_RCC_OscConfig+0x2b0>)
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004390:	f7fe fa54 	bl	800283c <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004398:	f7fe fa50 	bl	800283c <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e17b      	b.n	80046a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043aa:	4b36      	ldr	r3, [pc, #216]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d030      	beq.n	8004424 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d016      	beq.n	80043f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ca:	4b30      	ldr	r3, [pc, #192]	; (800448c <HAL_RCC_OscConfig+0x2b4>)
 80043cc:	2201      	movs	r2, #1
 80043ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d0:	f7fe fa34 	bl	800283c <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043d8:	f7fe fa30 	bl	800283c <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e15b      	b.n	80046a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ea:	4b26      	ldr	r3, [pc, #152]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80043ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f0      	beq.n	80043d8 <HAL_RCC_OscConfig+0x200>
 80043f6:	e015      	b.n	8004424 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043f8:	4b24      	ldr	r3, [pc, #144]	; (800448c <HAL_RCC_OscConfig+0x2b4>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043fe:	f7fe fa1d 	bl	800283c <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004406:	f7fe fa19 	bl	800283c <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e144      	b.n	80046a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004418:	4b1a      	ldr	r3, [pc, #104]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800441a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1f0      	bne.n	8004406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 80a0 	beq.w	8004572 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004432:	2300      	movs	r3, #0
 8004434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004436:	4b13      	ldr	r3, [pc, #76]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10f      	bne.n	8004462 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004442:	2300      	movs	r3, #0
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	4a0e      	ldr	r2, [pc, #56]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800444c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004450:	6413      	str	r3, [r2, #64]	; 0x40
 8004452:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445a:	60bb      	str	r3, [r7, #8]
 800445c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800445e:	2301      	movs	r3, #1
 8004460:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004462:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <HAL_RCC_OscConfig+0x2b8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d121      	bne.n	80044b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800446e:	4b08      	ldr	r3, [pc, #32]	; (8004490 <HAL_RCC_OscConfig+0x2b8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a07      	ldr	r2, [pc, #28]	; (8004490 <HAL_RCC_OscConfig+0x2b8>)
 8004474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800447a:	f7fe f9df 	bl	800283c <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004480:	e011      	b.n	80044a6 <HAL_RCC_OscConfig+0x2ce>
 8004482:	bf00      	nop
 8004484:	40023800 	.word	0x40023800
 8004488:	42470000 	.word	0x42470000
 800448c:	42470e80 	.word	0x42470e80
 8004490:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004494:	f7fe f9d2 	bl	800283c <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e0fd      	b.n	80046a2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a6:	4b81      	ldr	r3, [pc, #516]	; (80046ac <HAL_RCC_OscConfig+0x4d4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f0      	beq.n	8004494 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d106      	bne.n	80044c8 <HAL_RCC_OscConfig+0x2f0>
 80044ba:	4b7d      	ldr	r3, [pc, #500]	; (80046b0 <HAL_RCC_OscConfig+0x4d8>)
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	4a7c      	ldr	r2, [pc, #496]	; (80046b0 <HAL_RCC_OscConfig+0x4d8>)
 80044c0:	f043 0301 	orr.w	r3, r3, #1
 80044c4:	6713      	str	r3, [r2, #112]	; 0x70
 80044c6:	e01c      	b.n	8004502 <HAL_RCC_OscConfig+0x32a>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b05      	cmp	r3, #5
 80044ce:	d10c      	bne.n	80044ea <HAL_RCC_OscConfig+0x312>
 80044d0:	4b77      	ldr	r3, [pc, #476]	; (80046b0 <HAL_RCC_OscConfig+0x4d8>)
 80044d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d4:	4a76      	ldr	r2, [pc, #472]	; (80046b0 <HAL_RCC_OscConfig+0x4d8>)
 80044d6:	f043 0304 	orr.w	r3, r3, #4
 80044da:	6713      	str	r3, [r2, #112]	; 0x70
 80044dc:	4b74      	ldr	r3, [pc, #464]	; (80046b0 <HAL_RCC_OscConfig+0x4d8>)
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	4a73      	ldr	r2, [pc, #460]	; (80046b0 <HAL_RCC_OscConfig+0x4d8>)
 80044e2:	f043 0301 	orr.w	r3, r3, #1
 80044e6:	6713      	str	r3, [r2, #112]	; 0x70
 80044e8:	e00b      	b.n	8004502 <HAL_RCC_OscConfig+0x32a>
 80044ea:	4b71      	ldr	r3, [pc, #452]	; (80046b0 <HAL_RCC_OscConfig+0x4d8>)
 80044ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ee:	4a70      	ldr	r2, [pc, #448]	; (80046b0 <HAL_RCC_OscConfig+0x4d8>)
 80044f0:	f023 0301 	bic.w	r3, r3, #1
 80044f4:	6713      	str	r3, [r2, #112]	; 0x70
 80044f6:	4b6e      	ldr	r3, [pc, #440]	; (80046b0 <HAL_RCC_OscConfig+0x4d8>)
 80044f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fa:	4a6d      	ldr	r2, [pc, #436]	; (80046b0 <HAL_RCC_OscConfig+0x4d8>)
 80044fc:	f023 0304 	bic.w	r3, r3, #4
 8004500:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d015      	beq.n	8004536 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450a:	f7fe f997 	bl	800283c <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004510:	e00a      	b.n	8004528 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004512:	f7fe f993 	bl	800283c <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004520:	4293      	cmp	r3, r2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e0bc      	b.n	80046a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004528:	4b61      	ldr	r3, [pc, #388]	; (80046b0 <HAL_RCC_OscConfig+0x4d8>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0ee      	beq.n	8004512 <HAL_RCC_OscConfig+0x33a>
 8004534:	e014      	b.n	8004560 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004536:	f7fe f981 	bl	800283c <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800453c:	e00a      	b.n	8004554 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800453e:	f7fe f97d 	bl	800283c <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f241 3288 	movw	r2, #5000	; 0x1388
 800454c:	4293      	cmp	r3, r2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e0a6      	b.n	80046a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004554:	4b56      	ldr	r3, [pc, #344]	; (80046b0 <HAL_RCC_OscConfig+0x4d8>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1ee      	bne.n	800453e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004560:	7dfb      	ldrb	r3, [r7, #23]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d105      	bne.n	8004572 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004566:	4b52      	ldr	r3, [pc, #328]	; (80046b0 <HAL_RCC_OscConfig+0x4d8>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	4a51      	ldr	r2, [pc, #324]	; (80046b0 <HAL_RCC_OscConfig+0x4d8>)
 800456c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004570:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 8092 	beq.w	80046a0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800457c:	4b4c      	ldr	r3, [pc, #304]	; (80046b0 <HAL_RCC_OscConfig+0x4d8>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f003 030c 	and.w	r3, r3, #12
 8004584:	2b08      	cmp	r3, #8
 8004586:	d05c      	beq.n	8004642 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	2b02      	cmp	r3, #2
 800458e:	d141      	bne.n	8004614 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004590:	4b48      	ldr	r3, [pc, #288]	; (80046b4 <HAL_RCC_OscConfig+0x4dc>)
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004596:	f7fe f951 	bl	800283c <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800459e:	f7fe f94d 	bl	800283c <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e078      	b.n	80046a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b0:	4b3f      	ldr	r3, [pc, #252]	; (80046b0 <HAL_RCC_OscConfig+0x4d8>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1f0      	bne.n	800459e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	69da      	ldr	r2, [r3, #28]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	019b      	lsls	r3, r3, #6
 80045cc:	431a      	orrs	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d2:	085b      	lsrs	r3, r3, #1
 80045d4:	3b01      	subs	r3, #1
 80045d6:	041b      	lsls	r3, r3, #16
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045de:	061b      	lsls	r3, r3, #24
 80045e0:	4933      	ldr	r1, [pc, #204]	; (80046b0 <HAL_RCC_OscConfig+0x4d8>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045e6:	4b33      	ldr	r3, [pc, #204]	; (80046b4 <HAL_RCC_OscConfig+0x4dc>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ec:	f7fe f926 	bl	800283c <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f4:	f7fe f922 	bl	800283c <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e04d      	b.n	80046a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004606:	4b2a      	ldr	r3, [pc, #168]	; (80046b0 <HAL_RCC_OscConfig+0x4d8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCC_OscConfig+0x41c>
 8004612:	e045      	b.n	80046a0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004614:	4b27      	ldr	r3, [pc, #156]	; (80046b4 <HAL_RCC_OscConfig+0x4dc>)
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461a:	f7fe f90f 	bl	800283c <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004622:	f7fe f90b 	bl	800283c <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e036      	b.n	80046a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004634:	4b1e      	ldr	r3, [pc, #120]	; (80046b0 <HAL_RCC_OscConfig+0x4d8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1f0      	bne.n	8004622 <HAL_RCC_OscConfig+0x44a>
 8004640:	e02e      	b.n	80046a0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e029      	b.n	80046a2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800464e:	4b18      	ldr	r3, [pc, #96]	; (80046b0 <HAL_RCC_OscConfig+0x4d8>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	429a      	cmp	r2, r3
 8004660:	d11c      	bne.n	800469c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466c:	429a      	cmp	r2, r3
 800466e:	d115      	bne.n	800469c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004676:	4013      	ands	r3, r2
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800467c:	4293      	cmp	r3, r2
 800467e:	d10d      	bne.n	800469c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d106      	bne.n	800469c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004698:	429a      	cmp	r2, r3
 800469a:	d001      	beq.n	80046a0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e000      	b.n	80046a2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40007000 	.word	0x40007000
 80046b0:	40023800 	.word	0x40023800
 80046b4:	42470060 	.word	0x42470060

080046b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e0cc      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046cc:	4b68      	ldr	r3, [pc, #416]	; (8004870 <HAL_RCC_ClockConfig+0x1b8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 030f 	and.w	r3, r3, #15
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d90c      	bls.n	80046f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046da:	4b65      	ldr	r3, [pc, #404]	; (8004870 <HAL_RCC_ClockConfig+0x1b8>)
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e2:	4b63      	ldr	r3, [pc, #396]	; (8004870 <HAL_RCC_ClockConfig+0x1b8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d001      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e0b8      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d020      	beq.n	8004742 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800470c:	4b59      	ldr	r3, [pc, #356]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	4a58      	ldr	r2, [pc, #352]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004716:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0308 	and.w	r3, r3, #8
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004724:	4b53      	ldr	r3, [pc, #332]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	4a52      	ldr	r2, [pc, #328]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800472e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004730:	4b50      	ldr	r3, [pc, #320]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	494d      	ldr	r1, [pc, #308]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800473e:	4313      	orrs	r3, r2
 8004740:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d044      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d107      	bne.n	8004766 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004756:	4b47      	ldr	r3, [pc, #284]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d119      	bne.n	8004796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e07f      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b02      	cmp	r3, #2
 800476c:	d003      	beq.n	8004776 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004772:	2b03      	cmp	r3, #3
 8004774:	d107      	bne.n	8004786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004776:	4b3f      	ldr	r3, [pc, #252]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d109      	bne.n	8004796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e06f      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004786:	4b3b      	ldr	r3, [pc, #236]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e067      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004796:	4b37      	ldr	r3, [pc, #220]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f023 0203 	bic.w	r2, r3, #3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	4934      	ldr	r1, [pc, #208]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047a8:	f7fe f848 	bl	800283c <HAL_GetTick>
 80047ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ae:	e00a      	b.n	80047c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b0:	f7fe f844 	bl	800283c <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80047be:	4293      	cmp	r3, r2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e04f      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c6:	4b2b      	ldr	r3, [pc, #172]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 020c 	and.w	r2, r3, #12
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d1eb      	bne.n	80047b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047d8:	4b25      	ldr	r3, [pc, #148]	; (8004870 <HAL_RCC_ClockConfig+0x1b8>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 030f 	and.w	r3, r3, #15
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d20c      	bcs.n	8004800 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e6:	4b22      	ldr	r3, [pc, #136]	; (8004870 <HAL_RCC_ClockConfig+0x1b8>)
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ee:	4b20      	ldr	r3, [pc, #128]	; (8004870 <HAL_RCC_ClockConfig+0x1b8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d001      	beq.n	8004800 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e032      	b.n	8004866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b00      	cmp	r3, #0
 800480a:	d008      	beq.n	800481e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800480c:	4b19      	ldr	r3, [pc, #100]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	4916      	ldr	r1, [pc, #88]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d009      	beq.n	800483e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800482a:	4b12      	ldr	r3, [pc, #72]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	490e      	ldr	r1, [pc, #56]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	4313      	orrs	r3, r2
 800483c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800483e:	f000 f821 	bl	8004884 <HAL_RCC_GetSysClockFreq>
 8004842:	4601      	mov	r1, r0
 8004844:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <HAL_RCC_ClockConfig+0x1bc>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	091b      	lsrs	r3, r3, #4
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	4a0a      	ldr	r2, [pc, #40]	; (8004878 <HAL_RCC_ClockConfig+0x1c0>)
 8004850:	5cd3      	ldrb	r3, [r2, r3]
 8004852:	fa21 f303 	lsr.w	r3, r1, r3
 8004856:	4a09      	ldr	r2, [pc, #36]	; (800487c <HAL_RCC_ClockConfig+0x1c4>)
 8004858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800485a:	4b09      	ldr	r3, [pc, #36]	; (8004880 <HAL_RCC_ClockConfig+0x1c8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f7fd ffa8 	bl	80027b4 <HAL_InitTick>

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	40023c00 	.word	0x40023c00
 8004874:	40023800 	.word	0x40023800
 8004878:	08007250 	.word	0x08007250
 800487c:	200000b0 	.word	0x200000b0
 8004880:	200000b4 	.word	0x200000b4

08004884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	607b      	str	r3, [r7, #4]
 800488e:	2300      	movs	r3, #0
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	2300      	movs	r3, #0
 8004894:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004896:	2300      	movs	r3, #0
 8004898:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800489a:	4b63      	ldr	r3, [pc, #396]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 030c 	and.w	r3, r3, #12
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	d007      	beq.n	80048b6 <HAL_RCC_GetSysClockFreq+0x32>
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d008      	beq.n	80048bc <HAL_RCC_GetSysClockFreq+0x38>
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f040 80b4 	bne.w	8004a18 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048b0:	4b5e      	ldr	r3, [pc, #376]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80048b2:	60bb      	str	r3, [r7, #8]
       break;
 80048b4:	e0b3      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048b6:	4b5d      	ldr	r3, [pc, #372]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80048b8:	60bb      	str	r3, [r7, #8]
      break;
 80048ba:	e0b0      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048bc:	4b5a      	ldr	r3, [pc, #360]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048c6:	4b58      	ldr	r3, [pc, #352]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d04a      	beq.n	8004968 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048d2:	4b55      	ldr	r3, [pc, #340]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	099b      	lsrs	r3, r3, #6
 80048d8:	f04f 0400 	mov.w	r4, #0
 80048dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	ea03 0501 	and.w	r5, r3, r1
 80048e8:	ea04 0602 	and.w	r6, r4, r2
 80048ec:	4629      	mov	r1, r5
 80048ee:	4632      	mov	r2, r6
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	f04f 0400 	mov.w	r4, #0
 80048f8:	0154      	lsls	r4, r2, #5
 80048fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80048fe:	014b      	lsls	r3, r1, #5
 8004900:	4619      	mov	r1, r3
 8004902:	4622      	mov	r2, r4
 8004904:	1b49      	subs	r1, r1, r5
 8004906:	eb62 0206 	sbc.w	r2, r2, r6
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	f04f 0400 	mov.w	r4, #0
 8004912:	0194      	lsls	r4, r2, #6
 8004914:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004918:	018b      	lsls	r3, r1, #6
 800491a:	1a5b      	subs	r3, r3, r1
 800491c:	eb64 0402 	sbc.w	r4, r4, r2
 8004920:	f04f 0100 	mov.w	r1, #0
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	00e2      	lsls	r2, r4, #3
 800492a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800492e:	00d9      	lsls	r1, r3, #3
 8004930:	460b      	mov	r3, r1
 8004932:	4614      	mov	r4, r2
 8004934:	195b      	adds	r3, r3, r5
 8004936:	eb44 0406 	adc.w	r4, r4, r6
 800493a:	f04f 0100 	mov.w	r1, #0
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	02a2      	lsls	r2, r4, #10
 8004944:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004948:	0299      	lsls	r1, r3, #10
 800494a:	460b      	mov	r3, r1
 800494c:	4614      	mov	r4, r2
 800494e:	4618      	mov	r0, r3
 8004950:	4621      	mov	r1, r4
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f04f 0400 	mov.w	r4, #0
 8004958:	461a      	mov	r2, r3
 800495a:	4623      	mov	r3, r4
 800495c:	f7fc f8dc 	bl	8000b18 <__aeabi_uldivmod>
 8004960:	4603      	mov	r3, r0
 8004962:	460c      	mov	r4, r1
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	e049      	b.n	80049fc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004968:	4b2f      	ldr	r3, [pc, #188]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	099b      	lsrs	r3, r3, #6
 800496e:	f04f 0400 	mov.w	r4, #0
 8004972:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	ea03 0501 	and.w	r5, r3, r1
 800497e:	ea04 0602 	and.w	r6, r4, r2
 8004982:	4629      	mov	r1, r5
 8004984:	4632      	mov	r2, r6
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	f04f 0400 	mov.w	r4, #0
 800498e:	0154      	lsls	r4, r2, #5
 8004990:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004994:	014b      	lsls	r3, r1, #5
 8004996:	4619      	mov	r1, r3
 8004998:	4622      	mov	r2, r4
 800499a:	1b49      	subs	r1, r1, r5
 800499c:	eb62 0206 	sbc.w	r2, r2, r6
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	f04f 0400 	mov.w	r4, #0
 80049a8:	0194      	lsls	r4, r2, #6
 80049aa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049ae:	018b      	lsls	r3, r1, #6
 80049b0:	1a5b      	subs	r3, r3, r1
 80049b2:	eb64 0402 	sbc.w	r4, r4, r2
 80049b6:	f04f 0100 	mov.w	r1, #0
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	00e2      	lsls	r2, r4, #3
 80049c0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049c4:	00d9      	lsls	r1, r3, #3
 80049c6:	460b      	mov	r3, r1
 80049c8:	4614      	mov	r4, r2
 80049ca:	195b      	adds	r3, r3, r5
 80049cc:	eb44 0406 	adc.w	r4, r4, r6
 80049d0:	f04f 0100 	mov.w	r1, #0
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	02a2      	lsls	r2, r4, #10
 80049da:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80049de:	0299      	lsls	r1, r3, #10
 80049e0:	460b      	mov	r3, r1
 80049e2:	4614      	mov	r4, r2
 80049e4:	4618      	mov	r0, r3
 80049e6:	4621      	mov	r1, r4
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f04f 0400 	mov.w	r4, #0
 80049ee:	461a      	mov	r2, r3
 80049f0:	4623      	mov	r3, r4
 80049f2:	f7fc f891 	bl	8000b18 <__aeabi_uldivmod>
 80049f6:	4603      	mov	r3, r0
 80049f8:	460c      	mov	r4, r1
 80049fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049fc:	4b0a      	ldr	r3, [pc, #40]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	0c1b      	lsrs	r3, r3, #16
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	3301      	adds	r3, #1
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a14:	60bb      	str	r3, [r7, #8]
      break;
 8004a16:	e002      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a18:	4b04      	ldr	r3, [pc, #16]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a1a:	60bb      	str	r3, [r7, #8]
      break;
 8004a1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a1e:	68bb      	ldr	r3, [r7, #8]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	00f42400 	.word	0x00f42400

08004a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a34:	4b03      	ldr	r3, [pc, #12]	; (8004a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a36:	681b      	ldr	r3, [r3, #0]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	200000b0 	.word	0x200000b0

08004a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a4c:	f7ff fff0 	bl	8004a30 <HAL_RCC_GetHCLKFreq>
 8004a50:	4601      	mov	r1, r0
 8004a52:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	0a9b      	lsrs	r3, r3, #10
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	4a03      	ldr	r2, [pc, #12]	; (8004a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a5e:	5cd3      	ldrb	r3, [r2, r3]
 8004a60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	08007260 	.word	0x08007260

08004a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a74:	f7ff ffdc 	bl	8004a30 <HAL_RCC_GetHCLKFreq>
 8004a78:	4601      	mov	r1, r0
 8004a7a:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	0b5b      	lsrs	r3, r3, #13
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	4a03      	ldr	r2, [pc, #12]	; (8004a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a86:	5cd3      	ldrb	r3, [r2, r3]
 8004a88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40023800 	.word	0x40023800
 8004a94:	08007260 	.word	0x08007260

08004a98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e056      	b.n	8004b58 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d106      	bne.n	8004aca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7fd fbe7 	bl	8002298 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2202      	movs	r2, #2
 8004ace:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ae0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	ea42 0103 	orr.w	r1, r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	0c1b      	lsrs	r3, r3, #16
 8004b28:	f003 0104 	and.w	r1, r3, #4
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	69da      	ldr	r2, [r3, #28]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b46:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af02      	add	r7, sp, #8
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	603b      	str	r3, [r7, #0]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b70:	2300      	movs	r3, #0
 8004b72:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b7c:	d112      	bne.n	8004ba4 <HAL_SPI_Receive+0x44>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10e      	bne.n	8004ba4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2204      	movs	r2, #4
 8004b8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b8e:	88fa      	ldrh	r2, [r7, #6]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	4613      	mov	r3, r2
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	68b9      	ldr	r1, [r7, #8]
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 f8e9 	bl	8004d72 <HAL_SPI_TransmitReceive>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	e0e2      	b.n	8004d6a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <HAL_SPI_Receive+0x52>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e0db      	b.n	8004d6a <HAL_SPI_Receive+0x20a>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bba:	f7fd fe3f 	bl	800283c <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d002      	beq.n	8004bd2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004bcc:	2302      	movs	r3, #2
 8004bce:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bd0:	e0c2      	b.n	8004d58 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <HAL_SPI_Receive+0x7e>
 8004bd8:	88fb      	ldrh	r3, [r7, #6]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d102      	bne.n	8004be4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004be2:	e0b9      	b.n	8004d58 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2204      	movs	r2, #4
 8004be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	88fa      	ldrh	r2, [r7, #6]
 8004bfc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	88fa      	ldrh	r2, [r7, #6]
 8004c02:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c2a:	d107      	bne.n	8004c3c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c3a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c46:	2b40      	cmp	r3, #64	; 0x40
 8004c48:	d007      	beq.n	8004c5a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c58:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d162      	bne.n	8004d28 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c62:	e02e      	b.n	8004cc2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d115      	bne.n	8004c9e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f103 020c 	add.w	r2, r3, #12
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	7812      	ldrb	r2, [r2, #0]
 8004c80:	b2d2      	uxtb	r2, r2
 8004c82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c9c:	e011      	b.n	8004cc2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c9e:	f7fd fdcd 	bl	800283c <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d803      	bhi.n	8004cb6 <HAL_SPI_Receive+0x156>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cb4:	d102      	bne.n	8004cbc <HAL_SPI_Receive+0x15c>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d102      	bne.n	8004cc2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004cc0:	e04a      	b.n	8004d58 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1cb      	bne.n	8004c64 <HAL_SPI_Receive+0x104>
 8004ccc:	e031      	b.n	8004d32 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d113      	bne.n	8004d04 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce6:	b292      	uxth	r2, r2
 8004ce8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	1c9a      	adds	r2, r3, #2
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d02:	e011      	b.n	8004d28 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d04:	f7fd fd9a 	bl	800283c <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d803      	bhi.n	8004d1c <HAL_SPI_Receive+0x1bc>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d1a:	d102      	bne.n	8004d22 <HAL_SPI_Receive+0x1c2>
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d102      	bne.n	8004d28 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d26:	e017      	b.n	8004d58 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1cd      	bne.n	8004cce <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	6839      	ldr	r1, [r7, #0]
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 fa27 	bl	800518a <SPI_EndRxTransaction>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d002      	beq.n	8004d48 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2220      	movs	r2, #32
 8004d46:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	75fb      	strb	r3, [r7, #23]
 8004d54:	e000      	b.n	8004d58 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004d56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b08c      	sub	sp, #48	; 0x30
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	60f8      	str	r0, [r7, #12]
 8004d7a:	60b9      	str	r1, [r7, #8]
 8004d7c:	607a      	str	r2, [r7, #4]
 8004d7e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d80:	2301      	movs	r3, #1
 8004d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <HAL_SPI_TransmitReceive+0x26>
 8004d94:	2302      	movs	r3, #2
 8004d96:	e18a      	b.n	80050ae <HAL_SPI_TransmitReceive+0x33c>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004da0:	f7fd fd4c 	bl	800283c <HAL_GetTick>
 8004da4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004db6:	887b      	ldrh	r3, [r7, #2]
 8004db8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004dba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d00f      	beq.n	8004de2 <HAL_SPI_TransmitReceive+0x70>
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dc8:	d107      	bne.n	8004dda <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d103      	bne.n	8004dda <HAL_SPI_TransmitReceive+0x68>
 8004dd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d003      	beq.n	8004de2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004dda:	2302      	movs	r3, #2
 8004ddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004de0:	e15b      	b.n	800509a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <HAL_SPI_TransmitReceive+0x82>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <HAL_SPI_TransmitReceive+0x82>
 8004dee:	887b      	ldrh	r3, [r7, #2]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d103      	bne.n	8004dfc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004dfa:	e14e      	b.n	800509a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d003      	beq.n	8004e10 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2205      	movs	r2, #5
 8004e0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	887a      	ldrh	r2, [r7, #2]
 8004e20:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	887a      	ldrh	r2, [r7, #2]
 8004e26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	887a      	ldrh	r2, [r7, #2]
 8004e32:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	887a      	ldrh	r2, [r7, #2]
 8004e38:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e50:	2b40      	cmp	r3, #64	; 0x40
 8004e52:	d007      	beq.n	8004e64 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e6c:	d178      	bne.n	8004f60 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <HAL_SPI_TransmitReceive+0x10a>
 8004e76:	8b7b      	ldrh	r3, [r7, #26]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d166      	bne.n	8004f4a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e80:	881a      	ldrh	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8c:	1c9a      	adds	r2, r3, #2
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ea0:	e053      	b.n	8004f4a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d11b      	bne.n	8004ee8 <HAL_SPI_TransmitReceive+0x176>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d016      	beq.n	8004ee8 <HAL_SPI_TransmitReceive+0x176>
 8004eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d113      	bne.n	8004ee8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec4:	881a      	ldrh	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed0:	1c9a      	adds	r2, r3, #2
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d119      	bne.n	8004f2a <HAL_SPI_TransmitReceive+0x1b8>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d014      	beq.n	8004f2a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0a:	b292      	uxth	r2, r2
 8004f0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	1c9a      	adds	r2, r3, #2
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f26:	2301      	movs	r3, #1
 8004f28:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f2a:	f7fd fc87 	bl	800283c <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d807      	bhi.n	8004f4a <HAL_SPI_TransmitReceive+0x1d8>
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f40:	d003      	beq.n	8004f4a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f48:	e0a7      	b.n	800509a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1a6      	bne.n	8004ea2 <HAL_SPI_TransmitReceive+0x130>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1a1      	bne.n	8004ea2 <HAL_SPI_TransmitReceive+0x130>
 8004f5e:	e07c      	b.n	800505a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <HAL_SPI_TransmitReceive+0x1fc>
 8004f68:	8b7b      	ldrh	r3, [r7, #26]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d16b      	bne.n	8005046 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	330c      	adds	r3, #12
 8004f78:	7812      	ldrb	r2, [r2, #0]
 8004f7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f94:	e057      	b.n	8005046 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d11c      	bne.n	8004fde <HAL_SPI_TransmitReceive+0x26c>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d017      	beq.n	8004fde <HAL_SPI_TransmitReceive+0x26c>
 8004fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d114      	bne.n	8004fde <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	330c      	adds	r3, #12
 8004fbe:	7812      	ldrb	r2, [r2, #0]
 8004fc0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d119      	bne.n	8005020 <HAL_SPI_TransmitReceive+0x2ae>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d014      	beq.n	8005020 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005012:	b29b      	uxth	r3, r3
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800501c:	2301      	movs	r3, #1
 800501e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005020:	f7fd fc0c 	bl	800283c <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800502c:	429a      	cmp	r2, r3
 800502e:	d803      	bhi.n	8005038 <HAL_SPI_TransmitReceive+0x2c6>
 8005030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005036:	d102      	bne.n	800503e <HAL_SPI_TransmitReceive+0x2cc>
 8005038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503a:	2b00      	cmp	r3, #0
 800503c:	d103      	bne.n	8005046 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005044:	e029      	b.n	800509a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800504a:	b29b      	uxth	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1a2      	bne.n	8004f96 <HAL_SPI_TransmitReceive+0x224>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d19d      	bne.n	8004f96 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800505a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800505c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 f8f8 	bl	8005254 <SPI_EndRxTxTransaction>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d006      	beq.n	8005078 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2220      	movs	r2, #32
 8005074:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005076:	e010      	b.n	800509a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10b      	bne.n	8005098 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005080:	2300      	movs	r3, #0
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	617b      	str	r3, [r7, #20]
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	e000      	b.n	800509a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005098:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3730      	adds	r7, #48	; 0x30
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b084      	sub	sp, #16
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	603b      	str	r3, [r7, #0]
 80050c2:	4613      	mov	r3, r2
 80050c4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050c6:	e04c      	b.n	8005162 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050ce:	d048      	beq.n	8005162 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80050d0:	f7fd fbb4 	bl	800283c <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d902      	bls.n	80050e6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d13d      	bne.n	8005162 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050fe:	d111      	bne.n	8005124 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005108:	d004      	beq.n	8005114 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005112:	d107      	bne.n	8005124 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005122:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800512c:	d10f      	bne.n	800514e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800514c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e00f      	b.n	8005182 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4013      	ands	r3, r2
 800516c:	68ba      	ldr	r2, [r7, #8]
 800516e:	429a      	cmp	r2, r3
 8005170:	bf0c      	ite	eq
 8005172:	2301      	moveq	r3, #1
 8005174:	2300      	movne	r3, #0
 8005176:	b2db      	uxtb	r3, r3
 8005178:	461a      	mov	r2, r3
 800517a:	79fb      	ldrb	r3, [r7, #7]
 800517c:	429a      	cmp	r2, r3
 800517e:	d1a3      	bne.n	80050c8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b086      	sub	sp, #24
 800518e:	af02      	add	r7, sp, #8
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800519e:	d111      	bne.n	80051c4 <SPI_EndRxTransaction+0x3a>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a8:	d004      	beq.n	80051b4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b2:	d107      	bne.n	80051c4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051cc:	d12a      	bne.n	8005224 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d6:	d012      	beq.n	80051fe <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2200      	movs	r2, #0
 80051e0:	2180      	movs	r1, #128	; 0x80
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f7ff ff67 	bl	80050b6 <SPI_WaitFlagStateUntilTimeout>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d02d      	beq.n	800524a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f2:	f043 0220 	orr.w	r2, r3, #32
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e026      	b.n	800524c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2200      	movs	r2, #0
 8005206:	2101      	movs	r1, #1
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f7ff ff54 	bl	80050b6 <SPI_WaitFlagStateUntilTimeout>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01a      	beq.n	800524a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005218:	f043 0220 	orr.w	r2, r3, #32
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e013      	b.n	800524c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2200      	movs	r2, #0
 800522c:	2101      	movs	r1, #1
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f7ff ff41 	bl	80050b6 <SPI_WaitFlagStateUntilTimeout>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d007      	beq.n	800524a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800523e:	f043 0220 	orr.w	r2, r3, #32
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e000      	b.n	800524c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af02      	add	r7, sp, #8
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005260:	4b1b      	ldr	r3, [pc, #108]	; (80052d0 <SPI_EndRxTxTransaction+0x7c>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a1b      	ldr	r2, [pc, #108]	; (80052d4 <SPI_EndRxTxTransaction+0x80>)
 8005266:	fba2 2303 	umull	r2, r3, r2, r3
 800526a:	0d5b      	lsrs	r3, r3, #21
 800526c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005270:	fb02 f303 	mul.w	r3, r2, r3
 8005274:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800527e:	d112      	bne.n	80052a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2200      	movs	r2, #0
 8005288:	2180      	movs	r1, #128	; 0x80
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f7ff ff13 	bl	80050b6 <SPI_WaitFlagStateUntilTimeout>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d016      	beq.n	80052c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529a:	f043 0220 	orr.w	r2, r3, #32
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e00f      	b.n	80052c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00a      	beq.n	80052c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052bc:	2b80      	cmp	r3, #128	; 0x80
 80052be:	d0f2      	beq.n	80052a6 <SPI_EndRxTxTransaction+0x52>
 80052c0:	e000      	b.n	80052c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80052c2:	bf00      	nop
  }

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	200000b0 	.word	0x200000b0
 80052d4:	165e9f81 	.word	0x165e9f81

080052d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e01d      	b.n	8005326 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d106      	bne.n	8005304 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7fd f866 	bl	80023d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	3304      	adds	r3, #4
 8005314:	4619      	mov	r1, r3
 8005316:	4610      	mov	r0, r2
 8005318:	f000 faf0 	bl	80058fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800532e:	b480      	push	{r7}
 8005330:	b085      	sub	sp, #20
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2202      	movs	r2, #2
 800533a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f003 0307 	and.w	r3, r3, #7
 8005348:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2b06      	cmp	r3, #6
 800534e:	d007      	beq.n	8005360 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0201 	orr.w	r2, r2, #1
 800535e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b082      	sub	sp, #8
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e01d      	b.n	80053c4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d106      	bne.n	80053a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f815 	bl	80053cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2202      	movs	r2, #2
 80053a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3304      	adds	r3, #4
 80053b2:	4619      	mov	r1, r3
 80053b4:	4610      	mov	r0, r2
 80053b6:	f000 faa1 	bl	80058fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2201      	movs	r2, #1
 80053f0:	6839      	ldr	r1, [r7, #0]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fe96 	bl	8006124 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a15      	ldr	r2, [pc, #84]	; (8005454 <HAL_TIM_PWM_Start+0x74>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d004      	beq.n	800540c <HAL_TIM_PWM_Start+0x2c>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a14      	ldr	r2, [pc, #80]	; (8005458 <HAL_TIM_PWM_Start+0x78>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d101      	bne.n	8005410 <HAL_TIM_PWM_Start+0x30>
 800540c:	2301      	movs	r3, #1
 800540e:	e000      	b.n	8005412 <HAL_TIM_PWM_Start+0x32>
 8005410:	2300      	movs	r3, #0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d007      	beq.n	8005426 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005424:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b06      	cmp	r3, #6
 8005436:	d007      	beq.n	8005448 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0201 	orr.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	40010000 	.word	0x40010000
 8005458:	40010400 	.word	0x40010400

0800545c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e01d      	b.n	80054aa <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f815 	bl	80054b2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3304      	adds	r3, #4
 8005498:	4619      	mov	r1, r3
 800549a:	4610      	mov	r0, r2
 800549c:	f000 fa2e 	bl	80058fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b084      	sub	sp, #16
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d101      	bne.n	80054e0 <HAL_TIM_IC_ConfigChannel+0x1a>
 80054dc:	2302      	movs	r3, #2
 80054de:	e08a      	b.n	80055f6 <HAL_TIM_IC_ConfigChannel+0x130>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d11b      	bne.n	800552e <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6818      	ldr	r0, [r3, #0]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	6819      	ldr	r1, [r3, #0]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f000 fc49 	bl	8005d9c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	699a      	ldr	r2, [r3, #24]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 020c 	bic.w	r2, r2, #12
 8005518:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6999      	ldr	r1, [r3, #24]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	619a      	str	r2, [r3, #24]
 800552c:	e05a      	b.n	80055e4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b04      	cmp	r3, #4
 8005532:	d11c      	bne.n	800556e <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6818      	ldr	r0, [r3, #0]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	6819      	ldr	r1, [r3, #0]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f000 fccd 	bl	8005ee2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005556:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6999      	ldr	r1, [r3, #24]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	021a      	lsls	r2, r3, #8
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	619a      	str	r2, [r3, #24]
 800556c:	e03a      	b.n	80055e4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b08      	cmp	r3, #8
 8005572:	d11b      	bne.n	80055ac <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6818      	ldr	r0, [r3, #0]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	6819      	ldr	r1, [r3, #0]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f000 fd1a 	bl	8005fbc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	69da      	ldr	r2, [r3, #28]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 020c 	bic.w	r2, r2, #12
 8005596:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	69d9      	ldr	r1, [r3, #28]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	61da      	str	r2, [r3, #28]
 80055aa:	e01b      	b.n	80055e4 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6818      	ldr	r0, [r3, #0]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	6819      	ldr	r1, [r3, #0]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f000 fd3a 	bl	8006034 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	69da      	ldr	r2, [r3, #28]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80055ce:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	69d9      	ldr	r1, [r3, #28]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	021a      	lsls	r2, r3, #8
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005612:	2b01      	cmp	r3, #1
 8005614:	d101      	bne.n	800561a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005616:	2302      	movs	r3, #2
 8005618:	e0b4      	b.n	8005784 <HAL_TIM_PWM_ConfigChannel+0x184>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2202      	movs	r2, #2
 8005626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b0c      	cmp	r3, #12
 800562e:	f200 809f 	bhi.w	8005770 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005632:	a201      	add	r2, pc, #4	; (adr r2, 8005638 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005638:	0800566d 	.word	0x0800566d
 800563c:	08005771 	.word	0x08005771
 8005640:	08005771 	.word	0x08005771
 8005644:	08005771 	.word	0x08005771
 8005648:	080056ad 	.word	0x080056ad
 800564c:	08005771 	.word	0x08005771
 8005650:	08005771 	.word	0x08005771
 8005654:	08005771 	.word	0x08005771
 8005658:	080056ef 	.word	0x080056ef
 800565c:	08005771 	.word	0x08005771
 8005660:	08005771 	.word	0x08005771
 8005664:	08005771 	.word	0x08005771
 8005668:	0800572f 	.word	0x0800572f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68b9      	ldr	r1, [r7, #8]
 8005672:	4618      	mov	r0, r3
 8005674:	f000 f9e2 	bl	8005a3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699a      	ldr	r2, [r3, #24]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0208 	orr.w	r2, r2, #8
 8005686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699a      	ldr	r2, [r3, #24]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0204 	bic.w	r2, r2, #4
 8005696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6999      	ldr	r1, [r3, #24]
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	691a      	ldr	r2, [r3, #16]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	619a      	str	r2, [r3, #24]
      break;
 80056aa:	e062      	b.n	8005772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fa32 	bl	8005b1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6999      	ldr	r1, [r3, #24]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	021a      	lsls	r2, r3, #8
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	619a      	str	r2, [r3, #24]
      break;
 80056ec:	e041      	b.n	8005772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68b9      	ldr	r1, [r7, #8]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 fa87 	bl	8005c08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69da      	ldr	r2, [r3, #28]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f042 0208 	orr.w	r2, r2, #8
 8005708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69da      	ldr	r2, [r3, #28]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0204 	bic.w	r2, r2, #4
 8005718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69d9      	ldr	r1, [r3, #28]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	691a      	ldr	r2, [r3, #16]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	61da      	str	r2, [r3, #28]
      break;
 800572c:	e021      	b.n	8005772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68b9      	ldr	r1, [r7, #8]
 8005734:	4618      	mov	r0, r3
 8005736:	f000 fadb 	bl	8005cf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69da      	ldr	r2, [r3, #28]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69da      	ldr	r2, [r3, #28]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69d9      	ldr	r1, [r3, #28]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	021a      	lsls	r2, r3, #8
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	61da      	str	r2, [r3, #28]
      break;
 800576e:	e000      	b.n	8005772 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005770:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800579c:	2b01      	cmp	r3, #1
 800579e:	d101      	bne.n	80057a4 <HAL_TIM_ConfigClockSource+0x18>
 80057a0:	2302      	movs	r3, #2
 80057a2:	e0a6      	b.n	80058f2 <HAL_TIM_ConfigClockSource+0x166>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b40      	cmp	r3, #64	; 0x40
 80057da:	d067      	beq.n	80058ac <HAL_TIM_ConfigClockSource+0x120>
 80057dc:	2b40      	cmp	r3, #64	; 0x40
 80057de:	d80b      	bhi.n	80057f8 <HAL_TIM_ConfigClockSource+0x6c>
 80057e0:	2b10      	cmp	r3, #16
 80057e2:	d073      	beq.n	80058cc <HAL_TIM_ConfigClockSource+0x140>
 80057e4:	2b10      	cmp	r3, #16
 80057e6:	d802      	bhi.n	80057ee <HAL_TIM_ConfigClockSource+0x62>
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d06f      	beq.n	80058cc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80057ec:	e078      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80057ee:	2b20      	cmp	r3, #32
 80057f0:	d06c      	beq.n	80058cc <HAL_TIM_ConfigClockSource+0x140>
 80057f2:	2b30      	cmp	r3, #48	; 0x30
 80057f4:	d06a      	beq.n	80058cc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80057f6:	e073      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80057f8:	2b70      	cmp	r3, #112	; 0x70
 80057fa:	d00d      	beq.n	8005818 <HAL_TIM_ConfigClockSource+0x8c>
 80057fc:	2b70      	cmp	r3, #112	; 0x70
 80057fe:	d804      	bhi.n	800580a <HAL_TIM_ConfigClockSource+0x7e>
 8005800:	2b50      	cmp	r3, #80	; 0x50
 8005802:	d033      	beq.n	800586c <HAL_TIM_ConfigClockSource+0xe0>
 8005804:	2b60      	cmp	r3, #96	; 0x60
 8005806:	d041      	beq.n	800588c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005808:	e06a      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800580a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580e:	d066      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x152>
 8005810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005814:	d017      	beq.n	8005846 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005816:	e063      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6818      	ldr	r0, [r3, #0]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	6899      	ldr	r1, [r3, #8]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f000 fc5c 	bl	80060e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800583a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	609a      	str	r2, [r3, #8]
      break;
 8005844:	e04c      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6818      	ldr	r0, [r3, #0]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	6899      	ldr	r1, [r3, #8]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f000 fc45 	bl	80060e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005868:	609a      	str	r2, [r3, #8]
      break;
 800586a:	e039      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6818      	ldr	r0, [r3, #0]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	6859      	ldr	r1, [r3, #4]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	461a      	mov	r2, r3
 800587a:	f000 fb03 	bl	8005e84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2150      	movs	r1, #80	; 0x50
 8005884:	4618      	mov	r0, r3
 8005886:	f000 fc12 	bl	80060ae <TIM_ITRx_SetConfig>
      break;
 800588a:	e029      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6818      	ldr	r0, [r3, #0]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	6859      	ldr	r1, [r3, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	461a      	mov	r2, r3
 800589a:	f000 fb5f 	bl	8005f5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2160      	movs	r1, #96	; 0x60
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 fc02 	bl	80060ae <TIM_ITRx_SetConfig>
      break;
 80058aa:	e019      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	6859      	ldr	r1, [r3, #4]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	461a      	mov	r2, r3
 80058ba:	f000 fae3 	bl	8005e84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2140      	movs	r1, #64	; 0x40
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 fbf2 	bl	80060ae <TIM_ITRx_SetConfig>
      break;
 80058ca:	e009      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4619      	mov	r1, r3
 80058d6:	4610      	mov	r0, r2
 80058d8:	f000 fbe9 	bl	80060ae <TIM_ITRx_SetConfig>
      break;
 80058dc:	e000      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80058de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a40      	ldr	r2, [pc, #256]	; (8005a10 <TIM_Base_SetConfig+0x114>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d013      	beq.n	800593c <TIM_Base_SetConfig+0x40>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591a:	d00f      	beq.n	800593c <TIM_Base_SetConfig+0x40>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a3d      	ldr	r2, [pc, #244]	; (8005a14 <TIM_Base_SetConfig+0x118>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00b      	beq.n	800593c <TIM_Base_SetConfig+0x40>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a3c      	ldr	r2, [pc, #240]	; (8005a18 <TIM_Base_SetConfig+0x11c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d007      	beq.n	800593c <TIM_Base_SetConfig+0x40>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a3b      	ldr	r2, [pc, #236]	; (8005a1c <TIM_Base_SetConfig+0x120>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d003      	beq.n	800593c <TIM_Base_SetConfig+0x40>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a3a      	ldr	r2, [pc, #232]	; (8005a20 <TIM_Base_SetConfig+0x124>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d108      	bne.n	800594e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a2f      	ldr	r2, [pc, #188]	; (8005a10 <TIM_Base_SetConfig+0x114>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d02b      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800595c:	d027      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a2c      	ldr	r2, [pc, #176]	; (8005a14 <TIM_Base_SetConfig+0x118>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d023      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a2b      	ldr	r2, [pc, #172]	; (8005a18 <TIM_Base_SetConfig+0x11c>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d01f      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a2a      	ldr	r2, [pc, #168]	; (8005a1c <TIM_Base_SetConfig+0x120>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d01b      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a29      	ldr	r2, [pc, #164]	; (8005a20 <TIM_Base_SetConfig+0x124>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d017      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a28      	ldr	r2, [pc, #160]	; (8005a24 <TIM_Base_SetConfig+0x128>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d013      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a27      	ldr	r2, [pc, #156]	; (8005a28 <TIM_Base_SetConfig+0x12c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d00f      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a26      	ldr	r2, [pc, #152]	; (8005a2c <TIM_Base_SetConfig+0x130>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d00b      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a25      	ldr	r2, [pc, #148]	; (8005a30 <TIM_Base_SetConfig+0x134>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d007      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a24      	ldr	r2, [pc, #144]	; (8005a34 <TIM_Base_SetConfig+0x138>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d003      	beq.n	80059ae <TIM_Base_SetConfig+0xb2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a23      	ldr	r2, [pc, #140]	; (8005a38 <TIM_Base_SetConfig+0x13c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d108      	bne.n	80059c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4313      	orrs	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a0a      	ldr	r2, [pc, #40]	; (8005a10 <TIM_Base_SetConfig+0x114>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d003      	beq.n	80059f4 <TIM_Base_SetConfig+0xf8>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a0c      	ldr	r2, [pc, #48]	; (8005a20 <TIM_Base_SetConfig+0x124>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d103      	bne.n	80059fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	691a      	ldr	r2, [r3, #16]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	615a      	str	r2, [r3, #20]
}
 8005a02:	bf00      	nop
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	40010000 	.word	0x40010000
 8005a14:	40000400 	.word	0x40000400
 8005a18:	40000800 	.word	0x40000800
 8005a1c:	40000c00 	.word	0x40000c00
 8005a20:	40010400 	.word	0x40010400
 8005a24:	40014000 	.word	0x40014000
 8005a28:	40014400 	.word	0x40014400
 8005a2c:	40014800 	.word	0x40014800
 8005a30:	40001800 	.word	0x40001800
 8005a34:	40001c00 	.word	0x40001c00
 8005a38:	40002000 	.word	0x40002000

08005a3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	f023 0201 	bic.w	r2, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0303 	bic.w	r3, r3, #3
 8005a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f023 0302 	bic.w	r3, r3, #2
 8005a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a20      	ldr	r2, [pc, #128]	; (8005b14 <TIM_OC1_SetConfig+0xd8>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d003      	beq.n	8005aa0 <TIM_OC1_SetConfig+0x64>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a1f      	ldr	r2, [pc, #124]	; (8005b18 <TIM_OC1_SetConfig+0xdc>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d10c      	bne.n	8005aba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f023 0308 	bic.w	r3, r3, #8
 8005aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f023 0304 	bic.w	r3, r3, #4
 8005ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a15      	ldr	r2, [pc, #84]	; (8005b14 <TIM_OC1_SetConfig+0xd8>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d003      	beq.n	8005aca <TIM_OC1_SetConfig+0x8e>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a14      	ldr	r2, [pc, #80]	; (8005b18 <TIM_OC1_SetConfig+0xdc>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d111      	bne.n	8005aee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	621a      	str	r2, [r3, #32]
}
 8005b08:	bf00      	nop
 8005b0a:	371c      	adds	r7, #28
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	40010000 	.word	0x40010000
 8005b18:	40010400 	.word	0x40010400

08005b1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f023 0210 	bic.w	r2, r3, #16
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	021b      	lsls	r3, r3, #8
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f023 0320 	bic.w	r3, r3, #32
 8005b66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a22      	ldr	r2, [pc, #136]	; (8005c00 <TIM_OC2_SetConfig+0xe4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d003      	beq.n	8005b84 <TIM_OC2_SetConfig+0x68>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a21      	ldr	r2, [pc, #132]	; (8005c04 <TIM_OC2_SetConfig+0xe8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d10d      	bne.n	8005ba0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	011b      	lsls	r3, r3, #4
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a17      	ldr	r2, [pc, #92]	; (8005c00 <TIM_OC2_SetConfig+0xe4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d003      	beq.n	8005bb0 <TIM_OC2_SetConfig+0x94>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a16      	ldr	r2, [pc, #88]	; (8005c04 <TIM_OC2_SetConfig+0xe8>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d113      	bne.n	8005bd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	621a      	str	r2, [r3, #32]
}
 8005bf2:	bf00      	nop
 8005bf4:	371c      	adds	r7, #28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	40010000 	.word	0x40010000
 8005c04:	40010400 	.word	0x40010400

08005c08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0303 	bic.w	r3, r3, #3
 8005c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	021b      	lsls	r3, r3, #8
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a21      	ldr	r2, [pc, #132]	; (8005ce8 <TIM_OC3_SetConfig+0xe0>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d003      	beq.n	8005c6e <TIM_OC3_SetConfig+0x66>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a20      	ldr	r2, [pc, #128]	; (8005cec <TIM_OC3_SetConfig+0xe4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d10d      	bne.n	8005c8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	021b      	lsls	r3, r3, #8
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a16      	ldr	r2, [pc, #88]	; (8005ce8 <TIM_OC3_SetConfig+0xe0>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d003      	beq.n	8005c9a <TIM_OC3_SetConfig+0x92>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a15      	ldr	r2, [pc, #84]	; (8005cec <TIM_OC3_SetConfig+0xe4>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d113      	bne.n	8005cc2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ca0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	011b      	lsls	r3, r3, #4
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	011b      	lsls	r3, r3, #4
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	621a      	str	r2, [r3, #32]
}
 8005cdc:	bf00      	nop
 8005cde:	371c      	adds	r7, #28
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	40010000 	.word	0x40010000
 8005cec:	40010400 	.word	0x40010400

08005cf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a1b      	ldr	r3, [r3, #32]
 8005cfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	021b      	lsls	r3, r3, #8
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	031b      	lsls	r3, r3, #12
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a12      	ldr	r2, [pc, #72]	; (8005d94 <TIM_OC4_SetConfig+0xa4>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d003      	beq.n	8005d58 <TIM_OC4_SetConfig+0x68>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a11      	ldr	r2, [pc, #68]	; (8005d98 <TIM_OC4_SetConfig+0xa8>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d109      	bne.n	8005d6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	019b      	lsls	r3, r3, #6
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	621a      	str	r2, [r3, #32]
}
 8005d86:	bf00      	nop
 8005d88:	371c      	adds	r7, #28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	40010000 	.word	0x40010000
 8005d98:	40010400 	.word	0x40010400

08005d9c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f023 0201 	bic.w	r2, r3, #1
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4a28      	ldr	r2, [pc, #160]	; (8005e68 <TIM_TI1_SetConfig+0xcc>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d01b      	beq.n	8005e02 <TIM_TI1_SetConfig+0x66>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd0:	d017      	beq.n	8005e02 <TIM_TI1_SetConfig+0x66>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4a25      	ldr	r2, [pc, #148]	; (8005e6c <TIM_TI1_SetConfig+0xd0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d013      	beq.n	8005e02 <TIM_TI1_SetConfig+0x66>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4a24      	ldr	r2, [pc, #144]	; (8005e70 <TIM_TI1_SetConfig+0xd4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00f      	beq.n	8005e02 <TIM_TI1_SetConfig+0x66>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4a23      	ldr	r2, [pc, #140]	; (8005e74 <TIM_TI1_SetConfig+0xd8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d00b      	beq.n	8005e02 <TIM_TI1_SetConfig+0x66>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	4a22      	ldr	r2, [pc, #136]	; (8005e78 <TIM_TI1_SetConfig+0xdc>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d007      	beq.n	8005e02 <TIM_TI1_SetConfig+0x66>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	4a21      	ldr	r2, [pc, #132]	; (8005e7c <TIM_TI1_SetConfig+0xe0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d003      	beq.n	8005e02 <TIM_TI1_SetConfig+0x66>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4a20      	ldr	r2, [pc, #128]	; (8005e80 <TIM_TI1_SetConfig+0xe4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d101      	bne.n	8005e06 <TIM_TI1_SetConfig+0x6a>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <TIM_TI1_SetConfig+0x6c>
 8005e06:	2300      	movs	r3, #0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d008      	beq.n	8005e1e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f023 0303 	bic.w	r3, r3, #3
 8005e12:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	e003      	b.n	8005e26 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f043 0301 	orr.w	r3, r3, #1
 8005e24:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f023 030a 	bic.w	r3, r3, #10
 8005e40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	f003 030a 	and.w	r3, r3, #10
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	621a      	str	r2, [r3, #32]
}
 8005e5a:	bf00      	nop
 8005e5c:	371c      	adds	r7, #28
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	40010000 	.word	0x40010000
 8005e6c:	40000400 	.word	0x40000400
 8005e70:	40000800 	.word	0x40000800
 8005e74:	40000c00 	.word	0x40000c00
 8005e78:	40010400 	.word	0x40010400
 8005e7c:	40014000 	.word	0x40014000
 8005e80:	40001800 	.word	0x40001800

08005e84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	f023 0201 	bic.w	r2, r3, #1
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	011b      	lsls	r3, r3, #4
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f023 030a 	bic.w	r3, r3, #10
 8005ec0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	621a      	str	r2, [r3, #32]
}
 8005ed6:	bf00      	nop
 8005ed8:	371c      	adds	r7, #28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b087      	sub	sp, #28
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	60f8      	str	r0, [r7, #12]
 8005eea:	60b9      	str	r1, [r7, #8]
 8005eec:	607a      	str	r2, [r7, #4]
 8005eee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	f023 0210 	bic.w	r2, r3, #16
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	021b      	lsls	r3, r3, #8
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	031b      	lsls	r3, r3, #12
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f34:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	011b      	lsls	r3, r3, #4
 8005f3a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	621a      	str	r2, [r3, #32]
}
 8005f50:	bf00      	nop
 8005f52:	371c      	adds	r7, #28
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	f023 0210 	bic.w	r2, r3, #16
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	031b      	lsls	r3, r3, #12
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	011b      	lsls	r3, r3, #4
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	621a      	str	r2, [r3, #32]
}
 8005fb0:	bf00      	nop
 8005fb2:	371c      	adds	r7, #28
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f023 0303 	bic.w	r3, r3, #3
 8005fe8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ff8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	011b      	lsls	r3, r3, #4
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	4313      	orrs	r3, r2
 8006004:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800600c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	021b      	lsls	r3, r3, #8
 8006012:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	4313      	orrs	r3, r2
 800601a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	697a      	ldr	r2, [r7, #20]
 8006020:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	621a      	str	r2, [r3, #32]
}
 8006028:	bf00      	nop
 800602a:	371c      	adds	r7, #28
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
 8006040:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006060:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	021b      	lsls	r3, r3, #8
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4313      	orrs	r3, r2
 800606a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006072:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	031b      	lsls	r3, r3, #12
 8006078:	b29b      	uxth	r3, r3
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	4313      	orrs	r3, r2
 800607e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006086:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	031b      	lsls	r3, r3, #12
 800608c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	4313      	orrs	r3, r2
 8006094:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	621a      	str	r2, [r3, #32]
}
 80060a2:	bf00      	nop
 80060a4:	371c      	adds	r7, #28
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b085      	sub	sp, #20
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	f043 0307 	orr.w	r3, r3, #7
 80060d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	609a      	str	r2, [r3, #8]
}
 80060d8:	bf00      	nop
 80060da:	3714      	adds	r7, #20
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
 80060f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	021a      	lsls	r2, r3, #8
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	431a      	orrs	r2, r3
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	4313      	orrs	r3, r2
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	4313      	orrs	r3, r2
 8006110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	609a      	str	r2, [r3, #8]
}
 8006118:	bf00      	nop
 800611a:	371c      	adds	r7, #28
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f003 031f 	and.w	r3, r3, #31
 8006136:	2201      	movs	r2, #1
 8006138:	fa02 f303 	lsl.w	r3, r2, r3
 800613c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6a1a      	ldr	r2, [r3, #32]
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	43db      	mvns	r3, r3
 8006146:	401a      	ands	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6a1a      	ldr	r2, [r3, #32]
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f003 031f 	and.w	r3, r3, #31
 8006156:	6879      	ldr	r1, [r7, #4]
 8006158:	fa01 f303 	lsl.w	r3, r1, r3
 800615c:	431a      	orrs	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	621a      	str	r2, [r3, #32]
}
 8006162:	bf00      	nop
 8006164:	371c      	adds	r7, #28
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
	...

08006170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006180:	2b01      	cmp	r3, #1
 8006182:	d101      	bne.n	8006188 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006184:	2302      	movs	r3, #2
 8006186:	e05a      	b.n	800623e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2202      	movs	r2, #2
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a21      	ldr	r2, [pc, #132]	; (800624c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d022      	beq.n	8006212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d4:	d01d      	beq.n	8006212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a1d      	ldr	r2, [pc, #116]	; (8006250 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d018      	beq.n	8006212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a1b      	ldr	r2, [pc, #108]	; (8006254 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d013      	beq.n	8006212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a1a      	ldr	r2, [pc, #104]	; (8006258 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d00e      	beq.n	8006212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a18      	ldr	r2, [pc, #96]	; (800625c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d009      	beq.n	8006212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a17      	ldr	r2, [pc, #92]	; (8006260 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d004      	beq.n	8006212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a15      	ldr	r2, [pc, #84]	; (8006264 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d10c      	bne.n	800622c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006218:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	4313      	orrs	r3, r2
 8006222:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	40010000 	.word	0x40010000
 8006250:	40000400 	.word	0x40000400
 8006254:	40000800 	.word	0x40000800
 8006258:	40000c00 	.word	0x40000c00
 800625c:	40010400 	.word	0x40010400
 8006260:	40014000 	.word	0x40014000
 8006264:	40001800 	.word	0x40001800

08006268 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006272:	2300      	movs	r3, #0
 8006274:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800627c:	2b01      	cmp	r3, #1
 800627e:	d101      	bne.n	8006284 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006280:	2302      	movs	r3, #2
 8006282:	e03d      	b.n	8006300 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	4313      	orrs	r3, r2
 8006298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	4313      	orrs	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e03f      	b.n	800639e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	d106      	bne.n	8006338 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f7fc f920 	bl	8002578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2224      	movs	r2, #36	; 0x24
 800633c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800634e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f829 	bl	80063a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	691a      	ldr	r2, [r3, #16]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006364:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	695a      	ldr	r2, [r3, #20]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006374:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68da      	ldr	r2, [r3, #12]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006384:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2220      	movs	r2, #32
 8006390:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2220      	movs	r2, #32
 8006398:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
	...

080063a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ac:	b085      	sub	sp, #20
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68da      	ldr	r2, [r3, #12]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	431a      	orrs	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	431a      	orrs	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	4313      	orrs	r3, r2
 80063de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80063ea:	f023 030c 	bic.w	r3, r3, #12
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	6812      	ldr	r2, [r2, #0]
 80063f2:	68f9      	ldr	r1, [r7, #12]
 80063f4:	430b      	orrs	r3, r1
 80063f6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	699a      	ldr	r2, [r3, #24]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006416:	f040 818b 	bne.w	8006730 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4ac1      	ldr	r2, [pc, #772]	; (8006724 <UART_SetConfig+0x37c>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d005      	beq.n	8006430 <UART_SetConfig+0x88>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4abf      	ldr	r2, [pc, #764]	; (8006728 <UART_SetConfig+0x380>)
 800642a:	4293      	cmp	r3, r2
 800642c:	f040 80bd 	bne.w	80065aa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006430:	f7fe fb1e 	bl	8004a70 <HAL_RCC_GetPCLK2Freq>
 8006434:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	461d      	mov	r5, r3
 800643a:	f04f 0600 	mov.w	r6, #0
 800643e:	46a8      	mov	r8, r5
 8006440:	46b1      	mov	r9, r6
 8006442:	eb18 0308 	adds.w	r3, r8, r8
 8006446:	eb49 0409 	adc.w	r4, r9, r9
 800644a:	4698      	mov	r8, r3
 800644c:	46a1      	mov	r9, r4
 800644e:	eb18 0805 	adds.w	r8, r8, r5
 8006452:	eb49 0906 	adc.w	r9, r9, r6
 8006456:	f04f 0100 	mov.w	r1, #0
 800645a:	f04f 0200 	mov.w	r2, #0
 800645e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006462:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006466:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800646a:	4688      	mov	r8, r1
 800646c:	4691      	mov	r9, r2
 800646e:	eb18 0005 	adds.w	r0, r8, r5
 8006472:	eb49 0106 	adc.w	r1, r9, r6
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	461d      	mov	r5, r3
 800647c:	f04f 0600 	mov.w	r6, #0
 8006480:	196b      	adds	r3, r5, r5
 8006482:	eb46 0406 	adc.w	r4, r6, r6
 8006486:	461a      	mov	r2, r3
 8006488:	4623      	mov	r3, r4
 800648a:	f7fa fb45 	bl	8000b18 <__aeabi_uldivmod>
 800648e:	4603      	mov	r3, r0
 8006490:	460c      	mov	r4, r1
 8006492:	461a      	mov	r2, r3
 8006494:	4ba5      	ldr	r3, [pc, #660]	; (800672c <UART_SetConfig+0x384>)
 8006496:	fba3 2302 	umull	r2, r3, r3, r2
 800649a:	095b      	lsrs	r3, r3, #5
 800649c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	461d      	mov	r5, r3
 80064a4:	f04f 0600 	mov.w	r6, #0
 80064a8:	46a9      	mov	r9, r5
 80064aa:	46b2      	mov	sl, r6
 80064ac:	eb19 0309 	adds.w	r3, r9, r9
 80064b0:	eb4a 040a 	adc.w	r4, sl, sl
 80064b4:	4699      	mov	r9, r3
 80064b6:	46a2      	mov	sl, r4
 80064b8:	eb19 0905 	adds.w	r9, r9, r5
 80064bc:	eb4a 0a06 	adc.w	sl, sl, r6
 80064c0:	f04f 0100 	mov.w	r1, #0
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064d4:	4689      	mov	r9, r1
 80064d6:	4692      	mov	sl, r2
 80064d8:	eb19 0005 	adds.w	r0, r9, r5
 80064dc:	eb4a 0106 	adc.w	r1, sl, r6
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	461d      	mov	r5, r3
 80064e6:	f04f 0600 	mov.w	r6, #0
 80064ea:	196b      	adds	r3, r5, r5
 80064ec:	eb46 0406 	adc.w	r4, r6, r6
 80064f0:	461a      	mov	r2, r3
 80064f2:	4623      	mov	r3, r4
 80064f4:	f7fa fb10 	bl	8000b18 <__aeabi_uldivmod>
 80064f8:	4603      	mov	r3, r0
 80064fa:	460c      	mov	r4, r1
 80064fc:	461a      	mov	r2, r3
 80064fe:	4b8b      	ldr	r3, [pc, #556]	; (800672c <UART_SetConfig+0x384>)
 8006500:	fba3 1302 	umull	r1, r3, r3, r2
 8006504:	095b      	lsrs	r3, r3, #5
 8006506:	2164      	movs	r1, #100	; 0x64
 8006508:	fb01 f303 	mul.w	r3, r1, r3
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	00db      	lsls	r3, r3, #3
 8006510:	3332      	adds	r3, #50	; 0x32
 8006512:	4a86      	ldr	r2, [pc, #536]	; (800672c <UART_SetConfig+0x384>)
 8006514:	fba2 2303 	umull	r2, r3, r2, r3
 8006518:	095b      	lsrs	r3, r3, #5
 800651a:	005b      	lsls	r3, r3, #1
 800651c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006520:	4498      	add	r8, r3
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	461d      	mov	r5, r3
 8006526:	f04f 0600 	mov.w	r6, #0
 800652a:	46a9      	mov	r9, r5
 800652c:	46b2      	mov	sl, r6
 800652e:	eb19 0309 	adds.w	r3, r9, r9
 8006532:	eb4a 040a 	adc.w	r4, sl, sl
 8006536:	4699      	mov	r9, r3
 8006538:	46a2      	mov	sl, r4
 800653a:	eb19 0905 	adds.w	r9, r9, r5
 800653e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006542:	f04f 0100 	mov.w	r1, #0
 8006546:	f04f 0200 	mov.w	r2, #0
 800654a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800654e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006552:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006556:	4689      	mov	r9, r1
 8006558:	4692      	mov	sl, r2
 800655a:	eb19 0005 	adds.w	r0, r9, r5
 800655e:	eb4a 0106 	adc.w	r1, sl, r6
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	461d      	mov	r5, r3
 8006568:	f04f 0600 	mov.w	r6, #0
 800656c:	196b      	adds	r3, r5, r5
 800656e:	eb46 0406 	adc.w	r4, r6, r6
 8006572:	461a      	mov	r2, r3
 8006574:	4623      	mov	r3, r4
 8006576:	f7fa facf 	bl	8000b18 <__aeabi_uldivmod>
 800657a:	4603      	mov	r3, r0
 800657c:	460c      	mov	r4, r1
 800657e:	461a      	mov	r2, r3
 8006580:	4b6a      	ldr	r3, [pc, #424]	; (800672c <UART_SetConfig+0x384>)
 8006582:	fba3 1302 	umull	r1, r3, r3, r2
 8006586:	095b      	lsrs	r3, r3, #5
 8006588:	2164      	movs	r1, #100	; 0x64
 800658a:	fb01 f303 	mul.w	r3, r1, r3
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	00db      	lsls	r3, r3, #3
 8006592:	3332      	adds	r3, #50	; 0x32
 8006594:	4a65      	ldr	r2, [pc, #404]	; (800672c <UART_SetConfig+0x384>)
 8006596:	fba2 2303 	umull	r2, r3, r2, r3
 800659a:	095b      	lsrs	r3, r3, #5
 800659c:	f003 0207 	and.w	r2, r3, #7
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4442      	add	r2, r8
 80065a6:	609a      	str	r2, [r3, #8]
 80065a8:	e26f      	b.n	8006a8a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065aa:	f7fe fa4d 	bl	8004a48 <HAL_RCC_GetPCLK1Freq>
 80065ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	461d      	mov	r5, r3
 80065b4:	f04f 0600 	mov.w	r6, #0
 80065b8:	46a8      	mov	r8, r5
 80065ba:	46b1      	mov	r9, r6
 80065bc:	eb18 0308 	adds.w	r3, r8, r8
 80065c0:	eb49 0409 	adc.w	r4, r9, r9
 80065c4:	4698      	mov	r8, r3
 80065c6:	46a1      	mov	r9, r4
 80065c8:	eb18 0805 	adds.w	r8, r8, r5
 80065cc:	eb49 0906 	adc.w	r9, r9, r6
 80065d0:	f04f 0100 	mov.w	r1, #0
 80065d4:	f04f 0200 	mov.w	r2, #0
 80065d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80065dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80065e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80065e4:	4688      	mov	r8, r1
 80065e6:	4691      	mov	r9, r2
 80065e8:	eb18 0005 	adds.w	r0, r8, r5
 80065ec:	eb49 0106 	adc.w	r1, r9, r6
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	461d      	mov	r5, r3
 80065f6:	f04f 0600 	mov.w	r6, #0
 80065fa:	196b      	adds	r3, r5, r5
 80065fc:	eb46 0406 	adc.w	r4, r6, r6
 8006600:	461a      	mov	r2, r3
 8006602:	4623      	mov	r3, r4
 8006604:	f7fa fa88 	bl	8000b18 <__aeabi_uldivmod>
 8006608:	4603      	mov	r3, r0
 800660a:	460c      	mov	r4, r1
 800660c:	461a      	mov	r2, r3
 800660e:	4b47      	ldr	r3, [pc, #284]	; (800672c <UART_SetConfig+0x384>)
 8006610:	fba3 2302 	umull	r2, r3, r3, r2
 8006614:	095b      	lsrs	r3, r3, #5
 8006616:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	461d      	mov	r5, r3
 800661e:	f04f 0600 	mov.w	r6, #0
 8006622:	46a9      	mov	r9, r5
 8006624:	46b2      	mov	sl, r6
 8006626:	eb19 0309 	adds.w	r3, r9, r9
 800662a:	eb4a 040a 	adc.w	r4, sl, sl
 800662e:	4699      	mov	r9, r3
 8006630:	46a2      	mov	sl, r4
 8006632:	eb19 0905 	adds.w	r9, r9, r5
 8006636:	eb4a 0a06 	adc.w	sl, sl, r6
 800663a:	f04f 0100 	mov.w	r1, #0
 800663e:	f04f 0200 	mov.w	r2, #0
 8006642:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006646:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800664a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800664e:	4689      	mov	r9, r1
 8006650:	4692      	mov	sl, r2
 8006652:	eb19 0005 	adds.w	r0, r9, r5
 8006656:	eb4a 0106 	adc.w	r1, sl, r6
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	461d      	mov	r5, r3
 8006660:	f04f 0600 	mov.w	r6, #0
 8006664:	196b      	adds	r3, r5, r5
 8006666:	eb46 0406 	adc.w	r4, r6, r6
 800666a:	461a      	mov	r2, r3
 800666c:	4623      	mov	r3, r4
 800666e:	f7fa fa53 	bl	8000b18 <__aeabi_uldivmod>
 8006672:	4603      	mov	r3, r0
 8006674:	460c      	mov	r4, r1
 8006676:	461a      	mov	r2, r3
 8006678:	4b2c      	ldr	r3, [pc, #176]	; (800672c <UART_SetConfig+0x384>)
 800667a:	fba3 1302 	umull	r1, r3, r3, r2
 800667e:	095b      	lsrs	r3, r3, #5
 8006680:	2164      	movs	r1, #100	; 0x64
 8006682:	fb01 f303 	mul.w	r3, r1, r3
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	00db      	lsls	r3, r3, #3
 800668a:	3332      	adds	r3, #50	; 0x32
 800668c:	4a27      	ldr	r2, [pc, #156]	; (800672c <UART_SetConfig+0x384>)
 800668e:	fba2 2303 	umull	r2, r3, r2, r3
 8006692:	095b      	lsrs	r3, r3, #5
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800669a:	4498      	add	r8, r3
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	461d      	mov	r5, r3
 80066a0:	f04f 0600 	mov.w	r6, #0
 80066a4:	46a9      	mov	r9, r5
 80066a6:	46b2      	mov	sl, r6
 80066a8:	eb19 0309 	adds.w	r3, r9, r9
 80066ac:	eb4a 040a 	adc.w	r4, sl, sl
 80066b0:	4699      	mov	r9, r3
 80066b2:	46a2      	mov	sl, r4
 80066b4:	eb19 0905 	adds.w	r9, r9, r5
 80066b8:	eb4a 0a06 	adc.w	sl, sl, r6
 80066bc:	f04f 0100 	mov.w	r1, #0
 80066c0:	f04f 0200 	mov.w	r2, #0
 80066c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066d0:	4689      	mov	r9, r1
 80066d2:	4692      	mov	sl, r2
 80066d4:	eb19 0005 	adds.w	r0, r9, r5
 80066d8:	eb4a 0106 	adc.w	r1, sl, r6
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	461d      	mov	r5, r3
 80066e2:	f04f 0600 	mov.w	r6, #0
 80066e6:	196b      	adds	r3, r5, r5
 80066e8:	eb46 0406 	adc.w	r4, r6, r6
 80066ec:	461a      	mov	r2, r3
 80066ee:	4623      	mov	r3, r4
 80066f0:	f7fa fa12 	bl	8000b18 <__aeabi_uldivmod>
 80066f4:	4603      	mov	r3, r0
 80066f6:	460c      	mov	r4, r1
 80066f8:	461a      	mov	r2, r3
 80066fa:	4b0c      	ldr	r3, [pc, #48]	; (800672c <UART_SetConfig+0x384>)
 80066fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006700:	095b      	lsrs	r3, r3, #5
 8006702:	2164      	movs	r1, #100	; 0x64
 8006704:	fb01 f303 	mul.w	r3, r1, r3
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	00db      	lsls	r3, r3, #3
 800670c:	3332      	adds	r3, #50	; 0x32
 800670e:	4a07      	ldr	r2, [pc, #28]	; (800672c <UART_SetConfig+0x384>)
 8006710:	fba2 2303 	umull	r2, r3, r2, r3
 8006714:	095b      	lsrs	r3, r3, #5
 8006716:	f003 0207 	and.w	r2, r3, #7
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4442      	add	r2, r8
 8006720:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006722:	e1b2      	b.n	8006a8a <UART_SetConfig+0x6e2>
 8006724:	40011000 	.word	0x40011000
 8006728:	40011400 	.word	0x40011400
 800672c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4ad7      	ldr	r2, [pc, #860]	; (8006a94 <UART_SetConfig+0x6ec>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d005      	beq.n	8006746 <UART_SetConfig+0x39e>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4ad6      	ldr	r2, [pc, #856]	; (8006a98 <UART_SetConfig+0x6f0>)
 8006740:	4293      	cmp	r3, r2
 8006742:	f040 80d1 	bne.w	80068e8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006746:	f7fe f993 	bl	8004a70 <HAL_RCC_GetPCLK2Freq>
 800674a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	469a      	mov	sl, r3
 8006750:	f04f 0b00 	mov.w	fp, #0
 8006754:	46d0      	mov	r8, sl
 8006756:	46d9      	mov	r9, fp
 8006758:	eb18 0308 	adds.w	r3, r8, r8
 800675c:	eb49 0409 	adc.w	r4, r9, r9
 8006760:	4698      	mov	r8, r3
 8006762:	46a1      	mov	r9, r4
 8006764:	eb18 080a 	adds.w	r8, r8, sl
 8006768:	eb49 090b 	adc.w	r9, r9, fp
 800676c:	f04f 0100 	mov.w	r1, #0
 8006770:	f04f 0200 	mov.w	r2, #0
 8006774:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006778:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800677c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006780:	4688      	mov	r8, r1
 8006782:	4691      	mov	r9, r2
 8006784:	eb1a 0508 	adds.w	r5, sl, r8
 8006788:	eb4b 0609 	adc.w	r6, fp, r9
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	4619      	mov	r1, r3
 8006792:	f04f 0200 	mov.w	r2, #0
 8006796:	f04f 0300 	mov.w	r3, #0
 800679a:	f04f 0400 	mov.w	r4, #0
 800679e:	0094      	lsls	r4, r2, #2
 80067a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067a4:	008b      	lsls	r3, r1, #2
 80067a6:	461a      	mov	r2, r3
 80067a8:	4623      	mov	r3, r4
 80067aa:	4628      	mov	r0, r5
 80067ac:	4631      	mov	r1, r6
 80067ae:	f7fa f9b3 	bl	8000b18 <__aeabi_uldivmod>
 80067b2:	4603      	mov	r3, r0
 80067b4:	460c      	mov	r4, r1
 80067b6:	461a      	mov	r2, r3
 80067b8:	4bb8      	ldr	r3, [pc, #736]	; (8006a9c <UART_SetConfig+0x6f4>)
 80067ba:	fba3 2302 	umull	r2, r3, r3, r2
 80067be:	095b      	lsrs	r3, r3, #5
 80067c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	469b      	mov	fp, r3
 80067c8:	f04f 0c00 	mov.w	ip, #0
 80067cc:	46d9      	mov	r9, fp
 80067ce:	46e2      	mov	sl, ip
 80067d0:	eb19 0309 	adds.w	r3, r9, r9
 80067d4:	eb4a 040a 	adc.w	r4, sl, sl
 80067d8:	4699      	mov	r9, r3
 80067da:	46a2      	mov	sl, r4
 80067dc:	eb19 090b 	adds.w	r9, r9, fp
 80067e0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80067e4:	f04f 0100 	mov.w	r1, #0
 80067e8:	f04f 0200 	mov.w	r2, #0
 80067ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067f8:	4689      	mov	r9, r1
 80067fa:	4692      	mov	sl, r2
 80067fc:	eb1b 0509 	adds.w	r5, fp, r9
 8006800:	eb4c 060a 	adc.w	r6, ip, sl
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	4619      	mov	r1, r3
 800680a:	f04f 0200 	mov.w	r2, #0
 800680e:	f04f 0300 	mov.w	r3, #0
 8006812:	f04f 0400 	mov.w	r4, #0
 8006816:	0094      	lsls	r4, r2, #2
 8006818:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800681c:	008b      	lsls	r3, r1, #2
 800681e:	461a      	mov	r2, r3
 8006820:	4623      	mov	r3, r4
 8006822:	4628      	mov	r0, r5
 8006824:	4631      	mov	r1, r6
 8006826:	f7fa f977 	bl	8000b18 <__aeabi_uldivmod>
 800682a:	4603      	mov	r3, r0
 800682c:	460c      	mov	r4, r1
 800682e:	461a      	mov	r2, r3
 8006830:	4b9a      	ldr	r3, [pc, #616]	; (8006a9c <UART_SetConfig+0x6f4>)
 8006832:	fba3 1302 	umull	r1, r3, r3, r2
 8006836:	095b      	lsrs	r3, r3, #5
 8006838:	2164      	movs	r1, #100	; 0x64
 800683a:	fb01 f303 	mul.w	r3, r1, r3
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	011b      	lsls	r3, r3, #4
 8006842:	3332      	adds	r3, #50	; 0x32
 8006844:	4a95      	ldr	r2, [pc, #596]	; (8006a9c <UART_SetConfig+0x6f4>)
 8006846:	fba2 2303 	umull	r2, r3, r2, r3
 800684a:	095b      	lsrs	r3, r3, #5
 800684c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006850:	4498      	add	r8, r3
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	469b      	mov	fp, r3
 8006856:	f04f 0c00 	mov.w	ip, #0
 800685a:	46d9      	mov	r9, fp
 800685c:	46e2      	mov	sl, ip
 800685e:	eb19 0309 	adds.w	r3, r9, r9
 8006862:	eb4a 040a 	adc.w	r4, sl, sl
 8006866:	4699      	mov	r9, r3
 8006868:	46a2      	mov	sl, r4
 800686a:	eb19 090b 	adds.w	r9, r9, fp
 800686e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006872:	f04f 0100 	mov.w	r1, #0
 8006876:	f04f 0200 	mov.w	r2, #0
 800687a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800687e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006882:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006886:	4689      	mov	r9, r1
 8006888:	4692      	mov	sl, r2
 800688a:	eb1b 0509 	adds.w	r5, fp, r9
 800688e:	eb4c 060a 	adc.w	r6, ip, sl
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	4619      	mov	r1, r3
 8006898:	f04f 0200 	mov.w	r2, #0
 800689c:	f04f 0300 	mov.w	r3, #0
 80068a0:	f04f 0400 	mov.w	r4, #0
 80068a4:	0094      	lsls	r4, r2, #2
 80068a6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068aa:	008b      	lsls	r3, r1, #2
 80068ac:	461a      	mov	r2, r3
 80068ae:	4623      	mov	r3, r4
 80068b0:	4628      	mov	r0, r5
 80068b2:	4631      	mov	r1, r6
 80068b4:	f7fa f930 	bl	8000b18 <__aeabi_uldivmod>
 80068b8:	4603      	mov	r3, r0
 80068ba:	460c      	mov	r4, r1
 80068bc:	461a      	mov	r2, r3
 80068be:	4b77      	ldr	r3, [pc, #476]	; (8006a9c <UART_SetConfig+0x6f4>)
 80068c0:	fba3 1302 	umull	r1, r3, r3, r2
 80068c4:	095b      	lsrs	r3, r3, #5
 80068c6:	2164      	movs	r1, #100	; 0x64
 80068c8:	fb01 f303 	mul.w	r3, r1, r3
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	011b      	lsls	r3, r3, #4
 80068d0:	3332      	adds	r3, #50	; 0x32
 80068d2:	4a72      	ldr	r2, [pc, #456]	; (8006a9c <UART_SetConfig+0x6f4>)
 80068d4:	fba2 2303 	umull	r2, r3, r2, r3
 80068d8:	095b      	lsrs	r3, r3, #5
 80068da:	f003 020f 	and.w	r2, r3, #15
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4442      	add	r2, r8
 80068e4:	609a      	str	r2, [r3, #8]
 80068e6:	e0d0      	b.n	8006a8a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80068e8:	f7fe f8ae 	bl	8004a48 <HAL_RCC_GetPCLK1Freq>
 80068ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	469a      	mov	sl, r3
 80068f2:	f04f 0b00 	mov.w	fp, #0
 80068f6:	46d0      	mov	r8, sl
 80068f8:	46d9      	mov	r9, fp
 80068fa:	eb18 0308 	adds.w	r3, r8, r8
 80068fe:	eb49 0409 	adc.w	r4, r9, r9
 8006902:	4698      	mov	r8, r3
 8006904:	46a1      	mov	r9, r4
 8006906:	eb18 080a 	adds.w	r8, r8, sl
 800690a:	eb49 090b 	adc.w	r9, r9, fp
 800690e:	f04f 0100 	mov.w	r1, #0
 8006912:	f04f 0200 	mov.w	r2, #0
 8006916:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800691a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800691e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006922:	4688      	mov	r8, r1
 8006924:	4691      	mov	r9, r2
 8006926:	eb1a 0508 	adds.w	r5, sl, r8
 800692a:	eb4b 0609 	adc.w	r6, fp, r9
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	4619      	mov	r1, r3
 8006934:	f04f 0200 	mov.w	r2, #0
 8006938:	f04f 0300 	mov.w	r3, #0
 800693c:	f04f 0400 	mov.w	r4, #0
 8006940:	0094      	lsls	r4, r2, #2
 8006942:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006946:	008b      	lsls	r3, r1, #2
 8006948:	461a      	mov	r2, r3
 800694a:	4623      	mov	r3, r4
 800694c:	4628      	mov	r0, r5
 800694e:	4631      	mov	r1, r6
 8006950:	f7fa f8e2 	bl	8000b18 <__aeabi_uldivmod>
 8006954:	4603      	mov	r3, r0
 8006956:	460c      	mov	r4, r1
 8006958:	461a      	mov	r2, r3
 800695a:	4b50      	ldr	r3, [pc, #320]	; (8006a9c <UART_SetConfig+0x6f4>)
 800695c:	fba3 2302 	umull	r2, r3, r3, r2
 8006960:	095b      	lsrs	r3, r3, #5
 8006962:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	469b      	mov	fp, r3
 800696a:	f04f 0c00 	mov.w	ip, #0
 800696e:	46d9      	mov	r9, fp
 8006970:	46e2      	mov	sl, ip
 8006972:	eb19 0309 	adds.w	r3, r9, r9
 8006976:	eb4a 040a 	adc.w	r4, sl, sl
 800697a:	4699      	mov	r9, r3
 800697c:	46a2      	mov	sl, r4
 800697e:	eb19 090b 	adds.w	r9, r9, fp
 8006982:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006986:	f04f 0100 	mov.w	r1, #0
 800698a:	f04f 0200 	mov.w	r2, #0
 800698e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006992:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006996:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800699a:	4689      	mov	r9, r1
 800699c:	4692      	mov	sl, r2
 800699e:	eb1b 0509 	adds.w	r5, fp, r9
 80069a2:	eb4c 060a 	adc.w	r6, ip, sl
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	4619      	mov	r1, r3
 80069ac:	f04f 0200 	mov.w	r2, #0
 80069b0:	f04f 0300 	mov.w	r3, #0
 80069b4:	f04f 0400 	mov.w	r4, #0
 80069b8:	0094      	lsls	r4, r2, #2
 80069ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069be:	008b      	lsls	r3, r1, #2
 80069c0:	461a      	mov	r2, r3
 80069c2:	4623      	mov	r3, r4
 80069c4:	4628      	mov	r0, r5
 80069c6:	4631      	mov	r1, r6
 80069c8:	f7fa f8a6 	bl	8000b18 <__aeabi_uldivmod>
 80069cc:	4603      	mov	r3, r0
 80069ce:	460c      	mov	r4, r1
 80069d0:	461a      	mov	r2, r3
 80069d2:	4b32      	ldr	r3, [pc, #200]	; (8006a9c <UART_SetConfig+0x6f4>)
 80069d4:	fba3 1302 	umull	r1, r3, r3, r2
 80069d8:	095b      	lsrs	r3, r3, #5
 80069da:	2164      	movs	r1, #100	; 0x64
 80069dc:	fb01 f303 	mul.w	r3, r1, r3
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	011b      	lsls	r3, r3, #4
 80069e4:	3332      	adds	r3, #50	; 0x32
 80069e6:	4a2d      	ldr	r2, [pc, #180]	; (8006a9c <UART_SetConfig+0x6f4>)
 80069e8:	fba2 2303 	umull	r2, r3, r2, r3
 80069ec:	095b      	lsrs	r3, r3, #5
 80069ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069f2:	4498      	add	r8, r3
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	469b      	mov	fp, r3
 80069f8:	f04f 0c00 	mov.w	ip, #0
 80069fc:	46d9      	mov	r9, fp
 80069fe:	46e2      	mov	sl, ip
 8006a00:	eb19 0309 	adds.w	r3, r9, r9
 8006a04:	eb4a 040a 	adc.w	r4, sl, sl
 8006a08:	4699      	mov	r9, r3
 8006a0a:	46a2      	mov	sl, r4
 8006a0c:	eb19 090b 	adds.w	r9, r9, fp
 8006a10:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a14:	f04f 0100 	mov.w	r1, #0
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a28:	4689      	mov	r9, r1
 8006a2a:	4692      	mov	sl, r2
 8006a2c:	eb1b 0509 	adds.w	r5, fp, r9
 8006a30:	eb4c 060a 	adc.w	r6, ip, sl
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	4619      	mov	r1, r3
 8006a3a:	f04f 0200 	mov.w	r2, #0
 8006a3e:	f04f 0300 	mov.w	r3, #0
 8006a42:	f04f 0400 	mov.w	r4, #0
 8006a46:	0094      	lsls	r4, r2, #2
 8006a48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a4c:	008b      	lsls	r3, r1, #2
 8006a4e:	461a      	mov	r2, r3
 8006a50:	4623      	mov	r3, r4
 8006a52:	4628      	mov	r0, r5
 8006a54:	4631      	mov	r1, r6
 8006a56:	f7fa f85f 	bl	8000b18 <__aeabi_uldivmod>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	460c      	mov	r4, r1
 8006a5e:	461a      	mov	r2, r3
 8006a60:	4b0e      	ldr	r3, [pc, #56]	; (8006a9c <UART_SetConfig+0x6f4>)
 8006a62:	fba3 1302 	umull	r1, r3, r3, r2
 8006a66:	095b      	lsrs	r3, r3, #5
 8006a68:	2164      	movs	r1, #100	; 0x64
 8006a6a:	fb01 f303 	mul.w	r3, r1, r3
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	011b      	lsls	r3, r3, #4
 8006a72:	3332      	adds	r3, #50	; 0x32
 8006a74:	4a09      	ldr	r2, [pc, #36]	; (8006a9c <UART_SetConfig+0x6f4>)
 8006a76:	fba2 2303 	umull	r2, r3, r2, r3
 8006a7a:	095b      	lsrs	r3, r3, #5
 8006a7c:	f003 020f 	and.w	r2, r3, #15
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4442      	add	r2, r8
 8006a86:	609a      	str	r2, [r3, #8]
}
 8006a88:	e7ff      	b.n	8006a8a <UART_SetConfig+0x6e2>
 8006a8a:	bf00      	nop
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a94:	40011000 	.word	0x40011000
 8006a98:	40011400 	.word	0x40011400
 8006a9c:	51eb851f 	.word	0x51eb851f

08006aa0 <__errno>:
 8006aa0:	4b01      	ldr	r3, [pc, #4]	; (8006aa8 <__errno+0x8>)
 8006aa2:	6818      	ldr	r0, [r3, #0]
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	200000bc 	.word	0x200000bc

08006aac <__libc_init_array>:
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	4e0d      	ldr	r6, [pc, #52]	; (8006ae4 <__libc_init_array+0x38>)
 8006ab0:	4c0d      	ldr	r4, [pc, #52]	; (8006ae8 <__libc_init_array+0x3c>)
 8006ab2:	1ba4      	subs	r4, r4, r6
 8006ab4:	10a4      	asrs	r4, r4, #2
 8006ab6:	2500      	movs	r5, #0
 8006ab8:	42a5      	cmp	r5, r4
 8006aba:	d109      	bne.n	8006ad0 <__libc_init_array+0x24>
 8006abc:	4e0b      	ldr	r6, [pc, #44]	; (8006aec <__libc_init_array+0x40>)
 8006abe:	4c0c      	ldr	r4, [pc, #48]	; (8006af0 <__libc_init_array+0x44>)
 8006ac0:	f000 fbba 	bl	8007238 <_init>
 8006ac4:	1ba4      	subs	r4, r4, r6
 8006ac6:	10a4      	asrs	r4, r4, #2
 8006ac8:	2500      	movs	r5, #0
 8006aca:	42a5      	cmp	r5, r4
 8006acc:	d105      	bne.n	8006ada <__libc_init_array+0x2e>
 8006ace:	bd70      	pop	{r4, r5, r6, pc}
 8006ad0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ad4:	4798      	blx	r3
 8006ad6:	3501      	adds	r5, #1
 8006ad8:	e7ee      	b.n	8006ab8 <__libc_init_array+0xc>
 8006ada:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ade:	4798      	blx	r3
 8006ae0:	3501      	adds	r5, #1
 8006ae2:	e7f2      	b.n	8006aca <__libc_init_array+0x1e>
 8006ae4:	080072c0 	.word	0x080072c0
 8006ae8:	080072c0 	.word	0x080072c0
 8006aec:	080072c0 	.word	0x080072c0
 8006af0:	080072c4 	.word	0x080072c4

08006af4 <memset>:
 8006af4:	4402      	add	r2, r0
 8006af6:	4603      	mov	r3, r0
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d100      	bne.n	8006afe <memset+0xa>
 8006afc:	4770      	bx	lr
 8006afe:	f803 1b01 	strb.w	r1, [r3], #1
 8006b02:	e7f9      	b.n	8006af8 <memset+0x4>
 8006b04:	0000      	movs	r0, r0
	...

08006b08 <atan>:
 8006b08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0c:	ec55 4b10 	vmov	r4, r5, d0
 8006b10:	4bc3      	ldr	r3, [pc, #780]	; (8006e20 <atan+0x318>)
 8006b12:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006b16:	429e      	cmp	r6, r3
 8006b18:	46ab      	mov	fp, r5
 8006b1a:	dd18      	ble.n	8006b4e <atan+0x46>
 8006b1c:	4bc1      	ldr	r3, [pc, #772]	; (8006e24 <atan+0x31c>)
 8006b1e:	429e      	cmp	r6, r3
 8006b20:	dc01      	bgt.n	8006b26 <atan+0x1e>
 8006b22:	d109      	bne.n	8006b38 <atan+0x30>
 8006b24:	b144      	cbz	r4, 8006b38 <atan+0x30>
 8006b26:	4622      	mov	r2, r4
 8006b28:	462b      	mov	r3, r5
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	f7f9 fb65 	bl	80001fc <__adddf3>
 8006b32:	4604      	mov	r4, r0
 8006b34:	460d      	mov	r5, r1
 8006b36:	e006      	b.n	8006b46 <atan+0x3e>
 8006b38:	f1bb 0f00 	cmp.w	fp, #0
 8006b3c:	f340 8131 	ble.w	8006da2 <atan+0x29a>
 8006b40:	a59b      	add	r5, pc, #620	; (adr r5, 8006db0 <atan+0x2a8>)
 8006b42:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006b46:	ec45 4b10 	vmov	d0, r4, r5
 8006b4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b4e:	4bb6      	ldr	r3, [pc, #728]	; (8006e28 <atan+0x320>)
 8006b50:	429e      	cmp	r6, r3
 8006b52:	dc14      	bgt.n	8006b7e <atan+0x76>
 8006b54:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006b58:	429e      	cmp	r6, r3
 8006b5a:	dc0d      	bgt.n	8006b78 <atan+0x70>
 8006b5c:	a396      	add	r3, pc, #600	; (adr r3, 8006db8 <atan+0x2b0>)
 8006b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b62:	ee10 0a10 	vmov	r0, s0
 8006b66:	4629      	mov	r1, r5
 8006b68:	f7f9 fb48 	bl	80001fc <__adddf3>
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	4baf      	ldr	r3, [pc, #700]	; (8006e2c <atan+0x324>)
 8006b70:	f7f9 ff8a 	bl	8000a88 <__aeabi_dcmpgt>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	d1e6      	bne.n	8006b46 <atan+0x3e>
 8006b78:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006b7c:	e02b      	b.n	8006bd6 <atan+0xce>
 8006b7e:	f000 f963 	bl	8006e48 <fabs>
 8006b82:	4bab      	ldr	r3, [pc, #684]	; (8006e30 <atan+0x328>)
 8006b84:	429e      	cmp	r6, r3
 8006b86:	ec55 4b10 	vmov	r4, r5, d0
 8006b8a:	f300 80bf 	bgt.w	8006d0c <atan+0x204>
 8006b8e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006b92:	429e      	cmp	r6, r3
 8006b94:	f300 80a0 	bgt.w	8006cd8 <atan+0x1d0>
 8006b98:	ee10 2a10 	vmov	r2, s0
 8006b9c:	ee10 0a10 	vmov	r0, s0
 8006ba0:	462b      	mov	r3, r5
 8006ba2:	4629      	mov	r1, r5
 8006ba4:	f7f9 fb2a 	bl	80001fc <__adddf3>
 8006ba8:	2200      	movs	r2, #0
 8006baa:	4ba0      	ldr	r3, [pc, #640]	; (8006e2c <atan+0x324>)
 8006bac:	f7f9 fb24 	bl	80001f8 <__aeabi_dsub>
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	4606      	mov	r6, r0
 8006bb4:	460f      	mov	r7, r1
 8006bb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006bba:	4620      	mov	r0, r4
 8006bbc:	4629      	mov	r1, r5
 8006bbe:	f7f9 fb1d 	bl	80001fc <__adddf3>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	4639      	mov	r1, r7
 8006bca:	f7f9 fdf7 	bl	80007bc <__aeabi_ddiv>
 8006bce:	f04f 0a00 	mov.w	sl, #0
 8006bd2:	4604      	mov	r4, r0
 8006bd4:	460d      	mov	r5, r1
 8006bd6:	4622      	mov	r2, r4
 8006bd8:	462b      	mov	r3, r5
 8006bda:	4620      	mov	r0, r4
 8006bdc:	4629      	mov	r1, r5
 8006bde:	f7f9 fcc3 	bl	8000568 <__aeabi_dmul>
 8006be2:	4602      	mov	r2, r0
 8006be4:	460b      	mov	r3, r1
 8006be6:	4680      	mov	r8, r0
 8006be8:	4689      	mov	r9, r1
 8006bea:	f7f9 fcbd 	bl	8000568 <__aeabi_dmul>
 8006bee:	a374      	add	r3, pc, #464	; (adr r3, 8006dc0 <atan+0x2b8>)
 8006bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf4:	4606      	mov	r6, r0
 8006bf6:	460f      	mov	r7, r1
 8006bf8:	f7f9 fcb6 	bl	8000568 <__aeabi_dmul>
 8006bfc:	a372      	add	r3, pc, #456	; (adr r3, 8006dc8 <atan+0x2c0>)
 8006bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c02:	f7f9 fafb 	bl	80001fc <__adddf3>
 8006c06:	4632      	mov	r2, r6
 8006c08:	463b      	mov	r3, r7
 8006c0a:	f7f9 fcad 	bl	8000568 <__aeabi_dmul>
 8006c0e:	a370      	add	r3, pc, #448	; (adr r3, 8006dd0 <atan+0x2c8>)
 8006c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c14:	f7f9 faf2 	bl	80001fc <__adddf3>
 8006c18:	4632      	mov	r2, r6
 8006c1a:	463b      	mov	r3, r7
 8006c1c:	f7f9 fca4 	bl	8000568 <__aeabi_dmul>
 8006c20:	a36d      	add	r3, pc, #436	; (adr r3, 8006dd8 <atan+0x2d0>)
 8006c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c26:	f7f9 fae9 	bl	80001fc <__adddf3>
 8006c2a:	4632      	mov	r2, r6
 8006c2c:	463b      	mov	r3, r7
 8006c2e:	f7f9 fc9b 	bl	8000568 <__aeabi_dmul>
 8006c32:	a36b      	add	r3, pc, #428	; (adr r3, 8006de0 <atan+0x2d8>)
 8006c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c38:	f7f9 fae0 	bl	80001fc <__adddf3>
 8006c3c:	4632      	mov	r2, r6
 8006c3e:	463b      	mov	r3, r7
 8006c40:	f7f9 fc92 	bl	8000568 <__aeabi_dmul>
 8006c44:	a368      	add	r3, pc, #416	; (adr r3, 8006de8 <atan+0x2e0>)
 8006c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4a:	f7f9 fad7 	bl	80001fc <__adddf3>
 8006c4e:	4642      	mov	r2, r8
 8006c50:	464b      	mov	r3, r9
 8006c52:	f7f9 fc89 	bl	8000568 <__aeabi_dmul>
 8006c56:	a366      	add	r3, pc, #408	; (adr r3, 8006df0 <atan+0x2e8>)
 8006c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5c:	4680      	mov	r8, r0
 8006c5e:	4689      	mov	r9, r1
 8006c60:	4630      	mov	r0, r6
 8006c62:	4639      	mov	r1, r7
 8006c64:	f7f9 fc80 	bl	8000568 <__aeabi_dmul>
 8006c68:	a363      	add	r3, pc, #396	; (adr r3, 8006df8 <atan+0x2f0>)
 8006c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6e:	f7f9 fac3 	bl	80001f8 <__aeabi_dsub>
 8006c72:	4632      	mov	r2, r6
 8006c74:	463b      	mov	r3, r7
 8006c76:	f7f9 fc77 	bl	8000568 <__aeabi_dmul>
 8006c7a:	a361      	add	r3, pc, #388	; (adr r3, 8006e00 <atan+0x2f8>)
 8006c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c80:	f7f9 faba 	bl	80001f8 <__aeabi_dsub>
 8006c84:	4632      	mov	r2, r6
 8006c86:	463b      	mov	r3, r7
 8006c88:	f7f9 fc6e 	bl	8000568 <__aeabi_dmul>
 8006c8c:	a35e      	add	r3, pc, #376	; (adr r3, 8006e08 <atan+0x300>)
 8006c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c92:	f7f9 fab1 	bl	80001f8 <__aeabi_dsub>
 8006c96:	4632      	mov	r2, r6
 8006c98:	463b      	mov	r3, r7
 8006c9a:	f7f9 fc65 	bl	8000568 <__aeabi_dmul>
 8006c9e:	a35c      	add	r3, pc, #368	; (adr r3, 8006e10 <atan+0x308>)
 8006ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca4:	f7f9 faa8 	bl	80001f8 <__aeabi_dsub>
 8006ca8:	4632      	mov	r2, r6
 8006caa:	463b      	mov	r3, r7
 8006cac:	f7f9 fc5c 	bl	8000568 <__aeabi_dmul>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4640      	mov	r0, r8
 8006cb6:	4649      	mov	r1, r9
 8006cb8:	f7f9 faa0 	bl	80001fc <__adddf3>
 8006cbc:	4622      	mov	r2, r4
 8006cbe:	462b      	mov	r3, r5
 8006cc0:	f7f9 fc52 	bl	8000568 <__aeabi_dmul>
 8006cc4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	d14b      	bne.n	8006d66 <atan+0x25e>
 8006cce:	4620      	mov	r0, r4
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	f7f9 fa91 	bl	80001f8 <__aeabi_dsub>
 8006cd6:	e72c      	b.n	8006b32 <atan+0x2a>
 8006cd8:	ee10 0a10 	vmov	r0, s0
 8006cdc:	2200      	movs	r2, #0
 8006cde:	4b53      	ldr	r3, [pc, #332]	; (8006e2c <atan+0x324>)
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	f7f9 fa89 	bl	80001f8 <__aeabi_dsub>
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	4606      	mov	r6, r0
 8006cea:	460f      	mov	r7, r1
 8006cec:	4b4f      	ldr	r3, [pc, #316]	; (8006e2c <atan+0x324>)
 8006cee:	4620      	mov	r0, r4
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	f7f9 fa83 	bl	80001fc <__adddf3>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	4639      	mov	r1, r7
 8006cfe:	f7f9 fd5d 	bl	80007bc <__aeabi_ddiv>
 8006d02:	f04f 0a01 	mov.w	sl, #1
 8006d06:	4604      	mov	r4, r0
 8006d08:	460d      	mov	r5, r1
 8006d0a:	e764      	b.n	8006bd6 <atan+0xce>
 8006d0c:	4b49      	ldr	r3, [pc, #292]	; (8006e34 <atan+0x32c>)
 8006d0e:	429e      	cmp	r6, r3
 8006d10:	dc1d      	bgt.n	8006d4e <atan+0x246>
 8006d12:	ee10 0a10 	vmov	r0, s0
 8006d16:	2200      	movs	r2, #0
 8006d18:	4b47      	ldr	r3, [pc, #284]	; (8006e38 <atan+0x330>)
 8006d1a:	4629      	mov	r1, r5
 8006d1c:	f7f9 fa6c 	bl	80001f8 <__aeabi_dsub>
 8006d20:	2200      	movs	r2, #0
 8006d22:	4606      	mov	r6, r0
 8006d24:	460f      	mov	r7, r1
 8006d26:	4b44      	ldr	r3, [pc, #272]	; (8006e38 <atan+0x330>)
 8006d28:	4620      	mov	r0, r4
 8006d2a:	4629      	mov	r1, r5
 8006d2c:	f7f9 fc1c 	bl	8000568 <__aeabi_dmul>
 8006d30:	2200      	movs	r2, #0
 8006d32:	4b3e      	ldr	r3, [pc, #248]	; (8006e2c <atan+0x324>)
 8006d34:	f7f9 fa62 	bl	80001fc <__adddf3>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	4639      	mov	r1, r7
 8006d40:	f7f9 fd3c 	bl	80007bc <__aeabi_ddiv>
 8006d44:	f04f 0a02 	mov.w	sl, #2
 8006d48:	4604      	mov	r4, r0
 8006d4a:	460d      	mov	r5, r1
 8006d4c:	e743      	b.n	8006bd6 <atan+0xce>
 8006d4e:	462b      	mov	r3, r5
 8006d50:	ee10 2a10 	vmov	r2, s0
 8006d54:	2000      	movs	r0, #0
 8006d56:	4939      	ldr	r1, [pc, #228]	; (8006e3c <atan+0x334>)
 8006d58:	f7f9 fd30 	bl	80007bc <__aeabi_ddiv>
 8006d5c:	f04f 0a03 	mov.w	sl, #3
 8006d60:	4604      	mov	r4, r0
 8006d62:	460d      	mov	r5, r1
 8006d64:	e737      	b.n	8006bd6 <atan+0xce>
 8006d66:	4b36      	ldr	r3, [pc, #216]	; (8006e40 <atan+0x338>)
 8006d68:	4e36      	ldr	r6, [pc, #216]	; (8006e44 <atan+0x33c>)
 8006d6a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8006d6e:	4456      	add	r6, sl
 8006d70:	449a      	add	sl, r3
 8006d72:	e9da 2300 	ldrd	r2, r3, [sl]
 8006d76:	f7f9 fa3f 	bl	80001f8 <__aeabi_dsub>
 8006d7a:	4622      	mov	r2, r4
 8006d7c:	462b      	mov	r3, r5
 8006d7e:	f7f9 fa3b 	bl	80001f8 <__aeabi_dsub>
 8006d82:	4602      	mov	r2, r0
 8006d84:	460b      	mov	r3, r1
 8006d86:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006d8a:	f7f9 fa35 	bl	80001f8 <__aeabi_dsub>
 8006d8e:	f1bb 0f00 	cmp.w	fp, #0
 8006d92:	4604      	mov	r4, r0
 8006d94:	460d      	mov	r5, r1
 8006d96:	f6bf aed6 	bge.w	8006b46 <atan+0x3e>
 8006d9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d9e:	461d      	mov	r5, r3
 8006da0:	e6d1      	b.n	8006b46 <atan+0x3e>
 8006da2:	a51d      	add	r5, pc, #116	; (adr r5, 8006e18 <atan+0x310>)
 8006da4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006da8:	e6cd      	b.n	8006b46 <atan+0x3e>
 8006daa:	bf00      	nop
 8006dac:	f3af 8000 	nop.w
 8006db0:	54442d18 	.word	0x54442d18
 8006db4:	3ff921fb 	.word	0x3ff921fb
 8006db8:	8800759c 	.word	0x8800759c
 8006dbc:	7e37e43c 	.word	0x7e37e43c
 8006dc0:	e322da11 	.word	0xe322da11
 8006dc4:	3f90ad3a 	.word	0x3f90ad3a
 8006dc8:	24760deb 	.word	0x24760deb
 8006dcc:	3fa97b4b 	.word	0x3fa97b4b
 8006dd0:	a0d03d51 	.word	0xa0d03d51
 8006dd4:	3fb10d66 	.word	0x3fb10d66
 8006dd8:	c54c206e 	.word	0xc54c206e
 8006ddc:	3fb745cd 	.word	0x3fb745cd
 8006de0:	920083ff 	.word	0x920083ff
 8006de4:	3fc24924 	.word	0x3fc24924
 8006de8:	5555550d 	.word	0x5555550d
 8006dec:	3fd55555 	.word	0x3fd55555
 8006df0:	2c6a6c2f 	.word	0x2c6a6c2f
 8006df4:	bfa2b444 	.word	0xbfa2b444
 8006df8:	52defd9a 	.word	0x52defd9a
 8006dfc:	3fadde2d 	.word	0x3fadde2d
 8006e00:	af749a6d 	.word	0xaf749a6d
 8006e04:	3fb3b0f2 	.word	0x3fb3b0f2
 8006e08:	fe231671 	.word	0xfe231671
 8006e0c:	3fbc71c6 	.word	0x3fbc71c6
 8006e10:	9998ebc4 	.word	0x9998ebc4
 8006e14:	3fc99999 	.word	0x3fc99999
 8006e18:	54442d18 	.word	0x54442d18
 8006e1c:	bff921fb 	.word	0xbff921fb
 8006e20:	440fffff 	.word	0x440fffff
 8006e24:	7ff00000 	.word	0x7ff00000
 8006e28:	3fdbffff 	.word	0x3fdbffff
 8006e2c:	3ff00000 	.word	0x3ff00000
 8006e30:	3ff2ffff 	.word	0x3ff2ffff
 8006e34:	40037fff 	.word	0x40037fff
 8006e38:	3ff80000 	.word	0x3ff80000
 8006e3c:	bff00000 	.word	0xbff00000
 8006e40:	08007290 	.word	0x08007290
 8006e44:	08007270 	.word	0x08007270

08006e48 <fabs>:
 8006e48:	ec51 0b10 	vmov	r0, r1, d0
 8006e4c:	ee10 2a10 	vmov	r2, s0
 8006e50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006e54:	ec43 2b10 	vmov	d0, r2, r3
 8006e58:	4770      	bx	lr

08006e5a <atan2>:
 8006e5a:	f000 b85d 	b.w	8006f18 <__ieee754_atan2>
	...

08006e60 <sqrt>:
 8006e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006e64:	ed2d 8b02 	vpush	{d8}
 8006e68:	b08b      	sub	sp, #44	; 0x2c
 8006e6a:	ec55 4b10 	vmov	r4, r5, d0
 8006e6e:	f000 f931 	bl	80070d4 <__ieee754_sqrt>
 8006e72:	4b26      	ldr	r3, [pc, #152]	; (8006f0c <sqrt+0xac>)
 8006e74:	eeb0 8a40 	vmov.f32	s16, s0
 8006e78:	eef0 8a60 	vmov.f32	s17, s1
 8006e7c:	f993 6000 	ldrsb.w	r6, [r3]
 8006e80:	1c73      	adds	r3, r6, #1
 8006e82:	d02a      	beq.n	8006eda <sqrt+0x7a>
 8006e84:	4622      	mov	r2, r4
 8006e86:	462b      	mov	r3, r5
 8006e88:	4620      	mov	r0, r4
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	f7f9 fe06 	bl	8000a9c <__aeabi_dcmpun>
 8006e90:	4607      	mov	r7, r0
 8006e92:	bb10      	cbnz	r0, 8006eda <sqrt+0x7a>
 8006e94:	f04f 0800 	mov.w	r8, #0
 8006e98:	f04f 0900 	mov.w	r9, #0
 8006e9c:	4642      	mov	r2, r8
 8006e9e:	464b      	mov	r3, r9
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	4629      	mov	r1, r5
 8006ea4:	f7f9 fdd2 	bl	8000a4c <__aeabi_dcmplt>
 8006ea8:	b1b8      	cbz	r0, 8006eda <sqrt+0x7a>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	4b18      	ldr	r3, [pc, #96]	; (8006f10 <sqrt+0xb0>)
 8006eb0:	9301      	str	r3, [sp, #4]
 8006eb2:	9708      	str	r7, [sp, #32]
 8006eb4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006eb8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006ebc:	b9b6      	cbnz	r6, 8006eec <sqrt+0x8c>
 8006ebe:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8006ec2:	4668      	mov	r0, sp
 8006ec4:	f000 f9b6 	bl	8007234 <matherr>
 8006ec8:	b1d0      	cbz	r0, 8006f00 <sqrt+0xa0>
 8006eca:	9b08      	ldr	r3, [sp, #32]
 8006ecc:	b11b      	cbz	r3, 8006ed6 <sqrt+0x76>
 8006ece:	f7ff fde7 	bl	8006aa0 <__errno>
 8006ed2:	9b08      	ldr	r3, [sp, #32]
 8006ed4:	6003      	str	r3, [r0, #0]
 8006ed6:	ed9d 8b06 	vldr	d8, [sp, #24]
 8006eda:	eeb0 0a48 	vmov.f32	s0, s16
 8006ede:	eef0 0a68 	vmov.f32	s1, s17
 8006ee2:	b00b      	add	sp, #44	; 0x2c
 8006ee4:	ecbd 8b02 	vpop	{d8}
 8006ee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006eec:	4642      	mov	r2, r8
 8006eee:	464b      	mov	r3, r9
 8006ef0:	4640      	mov	r0, r8
 8006ef2:	4649      	mov	r1, r9
 8006ef4:	f7f9 fc62 	bl	80007bc <__aeabi_ddiv>
 8006ef8:	2e02      	cmp	r6, #2
 8006efa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006efe:	d1e0      	bne.n	8006ec2 <sqrt+0x62>
 8006f00:	f7ff fdce 	bl	8006aa0 <__errno>
 8006f04:	2321      	movs	r3, #33	; 0x21
 8006f06:	6003      	str	r3, [r0, #0]
 8006f08:	e7df      	b.n	8006eca <sqrt+0x6a>
 8006f0a:	bf00      	nop
 8006f0c:	20000120 	.word	0x20000120
 8006f10:	080072b0 	.word	0x080072b0
 8006f14:	00000000 	.word	0x00000000

08006f18 <__ieee754_atan2>:
 8006f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f1c:	ec57 6b11 	vmov	r6, r7, d1
 8006f20:	4273      	negs	r3, r6
 8006f22:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8006f26:	4333      	orrs	r3, r6
 8006f28:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80070d0 <__ieee754_atan2+0x1b8>
 8006f2c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006f30:	4573      	cmp	r3, lr
 8006f32:	ec51 0b10 	vmov	r0, r1, d0
 8006f36:	ee11 8a10 	vmov	r8, s2
 8006f3a:	d80a      	bhi.n	8006f52 <__ieee754_atan2+0x3a>
 8006f3c:	4244      	negs	r4, r0
 8006f3e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006f42:	4304      	orrs	r4, r0
 8006f44:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006f48:	4574      	cmp	r4, lr
 8006f4a:	468c      	mov	ip, r1
 8006f4c:	ee10 9a10 	vmov	r9, s0
 8006f50:	d907      	bls.n	8006f62 <__ieee754_atan2+0x4a>
 8006f52:	4632      	mov	r2, r6
 8006f54:	463b      	mov	r3, r7
 8006f56:	f7f9 f951 	bl	80001fc <__adddf3>
 8006f5a:	ec41 0b10 	vmov	d0, r0, r1
 8006f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f62:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8006f66:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006f6a:	4334      	orrs	r4, r6
 8006f6c:	d103      	bne.n	8006f76 <__ieee754_atan2+0x5e>
 8006f6e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f72:	f7ff bdc9 	b.w	8006b08 <atan>
 8006f76:	17bc      	asrs	r4, r7, #30
 8006f78:	f004 0402 	and.w	r4, r4, #2
 8006f7c:	ea53 0909 	orrs.w	r9, r3, r9
 8006f80:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006f84:	d107      	bne.n	8006f96 <__ieee754_atan2+0x7e>
 8006f86:	2c02      	cmp	r4, #2
 8006f88:	d073      	beq.n	8007072 <__ieee754_atan2+0x15a>
 8006f8a:	2c03      	cmp	r4, #3
 8006f8c:	d1e5      	bne.n	8006f5a <__ieee754_atan2+0x42>
 8006f8e:	a13e      	add	r1, pc, #248	; (adr r1, 8007088 <__ieee754_atan2+0x170>)
 8006f90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f94:	e7e1      	b.n	8006f5a <__ieee754_atan2+0x42>
 8006f96:	ea52 0808 	orrs.w	r8, r2, r8
 8006f9a:	d106      	bne.n	8006faa <__ieee754_atan2+0x92>
 8006f9c:	f1bc 0f00 	cmp.w	ip, #0
 8006fa0:	da6b      	bge.n	800707a <__ieee754_atan2+0x162>
 8006fa2:	a13b      	add	r1, pc, #236	; (adr r1, 8007090 <__ieee754_atan2+0x178>)
 8006fa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fa8:	e7d7      	b.n	8006f5a <__ieee754_atan2+0x42>
 8006faa:	4572      	cmp	r2, lr
 8006fac:	d120      	bne.n	8006ff0 <__ieee754_atan2+0xd8>
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d111      	bne.n	8006fd6 <__ieee754_atan2+0xbe>
 8006fb2:	2c02      	cmp	r4, #2
 8006fb4:	d007      	beq.n	8006fc6 <__ieee754_atan2+0xae>
 8006fb6:	2c03      	cmp	r4, #3
 8006fb8:	d009      	beq.n	8006fce <__ieee754_atan2+0xb6>
 8006fba:	2c01      	cmp	r4, #1
 8006fbc:	d155      	bne.n	800706a <__ieee754_atan2+0x152>
 8006fbe:	a136      	add	r1, pc, #216	; (adr r1, 8007098 <__ieee754_atan2+0x180>)
 8006fc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fc4:	e7c9      	b.n	8006f5a <__ieee754_atan2+0x42>
 8006fc6:	a136      	add	r1, pc, #216	; (adr r1, 80070a0 <__ieee754_atan2+0x188>)
 8006fc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fcc:	e7c5      	b.n	8006f5a <__ieee754_atan2+0x42>
 8006fce:	a136      	add	r1, pc, #216	; (adr r1, 80070a8 <__ieee754_atan2+0x190>)
 8006fd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fd4:	e7c1      	b.n	8006f5a <__ieee754_atan2+0x42>
 8006fd6:	2c02      	cmp	r4, #2
 8006fd8:	d04b      	beq.n	8007072 <__ieee754_atan2+0x15a>
 8006fda:	2c03      	cmp	r4, #3
 8006fdc:	d0d7      	beq.n	8006f8e <__ieee754_atan2+0x76>
 8006fde:	2c01      	cmp	r4, #1
 8006fe0:	f04f 0000 	mov.w	r0, #0
 8006fe4:	d102      	bne.n	8006fec <__ieee754_atan2+0xd4>
 8006fe6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006fea:	e7b6      	b.n	8006f5a <__ieee754_atan2+0x42>
 8006fec:	2100      	movs	r1, #0
 8006fee:	e7b4      	b.n	8006f5a <__ieee754_atan2+0x42>
 8006ff0:	4573      	cmp	r3, lr
 8006ff2:	d0d3      	beq.n	8006f9c <__ieee754_atan2+0x84>
 8006ff4:	1a9b      	subs	r3, r3, r2
 8006ff6:	151b      	asrs	r3, r3, #20
 8006ff8:	2b3c      	cmp	r3, #60	; 0x3c
 8006ffa:	dc1e      	bgt.n	800703a <__ieee754_atan2+0x122>
 8006ffc:	2f00      	cmp	r7, #0
 8006ffe:	da01      	bge.n	8007004 <__ieee754_atan2+0xec>
 8007000:	333c      	adds	r3, #60	; 0x3c
 8007002:	db1e      	blt.n	8007042 <__ieee754_atan2+0x12a>
 8007004:	4632      	mov	r2, r6
 8007006:	463b      	mov	r3, r7
 8007008:	f7f9 fbd8 	bl	80007bc <__aeabi_ddiv>
 800700c:	ec41 0b10 	vmov	d0, r0, r1
 8007010:	f7ff ff1a 	bl	8006e48 <fabs>
 8007014:	f7ff fd78 	bl	8006b08 <atan>
 8007018:	ec51 0b10 	vmov	r0, r1, d0
 800701c:	2c01      	cmp	r4, #1
 800701e:	d013      	beq.n	8007048 <__ieee754_atan2+0x130>
 8007020:	2c02      	cmp	r4, #2
 8007022:	d015      	beq.n	8007050 <__ieee754_atan2+0x138>
 8007024:	2c00      	cmp	r4, #0
 8007026:	d098      	beq.n	8006f5a <__ieee754_atan2+0x42>
 8007028:	a321      	add	r3, pc, #132	; (adr r3, 80070b0 <__ieee754_atan2+0x198>)
 800702a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702e:	f7f9 f8e3 	bl	80001f8 <__aeabi_dsub>
 8007032:	a321      	add	r3, pc, #132	; (adr r3, 80070b8 <__ieee754_atan2+0x1a0>)
 8007034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007038:	e014      	b.n	8007064 <__ieee754_atan2+0x14c>
 800703a:	a121      	add	r1, pc, #132	; (adr r1, 80070c0 <__ieee754_atan2+0x1a8>)
 800703c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007040:	e7ec      	b.n	800701c <__ieee754_atan2+0x104>
 8007042:	2000      	movs	r0, #0
 8007044:	2100      	movs	r1, #0
 8007046:	e7e9      	b.n	800701c <__ieee754_atan2+0x104>
 8007048:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800704c:	4619      	mov	r1, r3
 800704e:	e784      	b.n	8006f5a <__ieee754_atan2+0x42>
 8007050:	a317      	add	r3, pc, #92	; (adr r3, 80070b0 <__ieee754_atan2+0x198>)
 8007052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007056:	f7f9 f8cf 	bl	80001f8 <__aeabi_dsub>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	a116      	add	r1, pc, #88	; (adr r1, 80070b8 <__ieee754_atan2+0x1a0>)
 8007060:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007064:	f7f9 f8c8 	bl	80001f8 <__aeabi_dsub>
 8007068:	e777      	b.n	8006f5a <__ieee754_atan2+0x42>
 800706a:	a117      	add	r1, pc, #92	; (adr r1, 80070c8 <__ieee754_atan2+0x1b0>)
 800706c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007070:	e773      	b.n	8006f5a <__ieee754_atan2+0x42>
 8007072:	a111      	add	r1, pc, #68	; (adr r1, 80070b8 <__ieee754_atan2+0x1a0>)
 8007074:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007078:	e76f      	b.n	8006f5a <__ieee754_atan2+0x42>
 800707a:	a111      	add	r1, pc, #68	; (adr r1, 80070c0 <__ieee754_atan2+0x1a8>)
 800707c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007080:	e76b      	b.n	8006f5a <__ieee754_atan2+0x42>
 8007082:	bf00      	nop
 8007084:	f3af 8000 	nop.w
 8007088:	54442d18 	.word	0x54442d18
 800708c:	c00921fb 	.word	0xc00921fb
 8007090:	54442d18 	.word	0x54442d18
 8007094:	bff921fb 	.word	0xbff921fb
 8007098:	54442d18 	.word	0x54442d18
 800709c:	bfe921fb 	.word	0xbfe921fb
 80070a0:	7f3321d2 	.word	0x7f3321d2
 80070a4:	4002d97c 	.word	0x4002d97c
 80070a8:	7f3321d2 	.word	0x7f3321d2
 80070ac:	c002d97c 	.word	0xc002d97c
 80070b0:	33145c07 	.word	0x33145c07
 80070b4:	3ca1a626 	.word	0x3ca1a626
 80070b8:	54442d18 	.word	0x54442d18
 80070bc:	400921fb 	.word	0x400921fb
 80070c0:	54442d18 	.word	0x54442d18
 80070c4:	3ff921fb 	.word	0x3ff921fb
 80070c8:	54442d18 	.word	0x54442d18
 80070cc:	3fe921fb 	.word	0x3fe921fb
 80070d0:	7ff00000 	.word	0x7ff00000

080070d4 <__ieee754_sqrt>:
 80070d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070d8:	4955      	ldr	r1, [pc, #340]	; (8007230 <__ieee754_sqrt+0x15c>)
 80070da:	ec55 4b10 	vmov	r4, r5, d0
 80070de:	43a9      	bics	r1, r5
 80070e0:	462b      	mov	r3, r5
 80070e2:	462a      	mov	r2, r5
 80070e4:	d112      	bne.n	800710c <__ieee754_sqrt+0x38>
 80070e6:	ee10 2a10 	vmov	r2, s0
 80070ea:	ee10 0a10 	vmov	r0, s0
 80070ee:	4629      	mov	r1, r5
 80070f0:	f7f9 fa3a 	bl	8000568 <__aeabi_dmul>
 80070f4:	4602      	mov	r2, r0
 80070f6:	460b      	mov	r3, r1
 80070f8:	4620      	mov	r0, r4
 80070fa:	4629      	mov	r1, r5
 80070fc:	f7f9 f87e 	bl	80001fc <__adddf3>
 8007100:	4604      	mov	r4, r0
 8007102:	460d      	mov	r5, r1
 8007104:	ec45 4b10 	vmov	d0, r4, r5
 8007108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800710c:	2d00      	cmp	r5, #0
 800710e:	ee10 0a10 	vmov	r0, s0
 8007112:	4621      	mov	r1, r4
 8007114:	dc0f      	bgt.n	8007136 <__ieee754_sqrt+0x62>
 8007116:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800711a:	4330      	orrs	r0, r6
 800711c:	d0f2      	beq.n	8007104 <__ieee754_sqrt+0x30>
 800711e:	b155      	cbz	r5, 8007136 <__ieee754_sqrt+0x62>
 8007120:	ee10 2a10 	vmov	r2, s0
 8007124:	4620      	mov	r0, r4
 8007126:	4629      	mov	r1, r5
 8007128:	f7f9 f866 	bl	80001f8 <__aeabi_dsub>
 800712c:	4602      	mov	r2, r0
 800712e:	460b      	mov	r3, r1
 8007130:	f7f9 fb44 	bl	80007bc <__aeabi_ddiv>
 8007134:	e7e4      	b.n	8007100 <__ieee754_sqrt+0x2c>
 8007136:	151b      	asrs	r3, r3, #20
 8007138:	d073      	beq.n	8007222 <__ieee754_sqrt+0x14e>
 800713a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800713e:	07dd      	lsls	r5, r3, #31
 8007140:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007144:	bf48      	it	mi
 8007146:	0fc8      	lsrmi	r0, r1, #31
 8007148:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800714c:	bf44      	itt	mi
 800714e:	0049      	lslmi	r1, r1, #1
 8007150:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8007154:	2500      	movs	r5, #0
 8007156:	1058      	asrs	r0, r3, #1
 8007158:	0fcb      	lsrs	r3, r1, #31
 800715a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800715e:	0049      	lsls	r1, r1, #1
 8007160:	2316      	movs	r3, #22
 8007162:	462c      	mov	r4, r5
 8007164:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007168:	19a7      	adds	r7, r4, r6
 800716a:	4297      	cmp	r7, r2
 800716c:	bfde      	ittt	le
 800716e:	19bc      	addle	r4, r7, r6
 8007170:	1bd2      	suble	r2, r2, r7
 8007172:	19ad      	addle	r5, r5, r6
 8007174:	0fcf      	lsrs	r7, r1, #31
 8007176:	3b01      	subs	r3, #1
 8007178:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800717c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007180:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007184:	d1f0      	bne.n	8007168 <__ieee754_sqrt+0x94>
 8007186:	f04f 0c20 	mov.w	ip, #32
 800718a:	469e      	mov	lr, r3
 800718c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007190:	42a2      	cmp	r2, r4
 8007192:	eb06 070e 	add.w	r7, r6, lr
 8007196:	dc02      	bgt.n	800719e <__ieee754_sqrt+0xca>
 8007198:	d112      	bne.n	80071c0 <__ieee754_sqrt+0xec>
 800719a:	428f      	cmp	r7, r1
 800719c:	d810      	bhi.n	80071c0 <__ieee754_sqrt+0xec>
 800719e:	2f00      	cmp	r7, #0
 80071a0:	eb07 0e06 	add.w	lr, r7, r6
 80071a4:	da42      	bge.n	800722c <__ieee754_sqrt+0x158>
 80071a6:	f1be 0f00 	cmp.w	lr, #0
 80071aa:	db3f      	blt.n	800722c <__ieee754_sqrt+0x158>
 80071ac:	f104 0801 	add.w	r8, r4, #1
 80071b0:	1b12      	subs	r2, r2, r4
 80071b2:	428f      	cmp	r7, r1
 80071b4:	bf88      	it	hi
 80071b6:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80071ba:	1bc9      	subs	r1, r1, r7
 80071bc:	4433      	add	r3, r6
 80071be:	4644      	mov	r4, r8
 80071c0:	0052      	lsls	r2, r2, #1
 80071c2:	f1bc 0c01 	subs.w	ip, ip, #1
 80071c6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80071ca:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80071ce:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80071d2:	d1dd      	bne.n	8007190 <__ieee754_sqrt+0xbc>
 80071d4:	430a      	orrs	r2, r1
 80071d6:	d006      	beq.n	80071e6 <__ieee754_sqrt+0x112>
 80071d8:	1c5c      	adds	r4, r3, #1
 80071da:	bf13      	iteet	ne
 80071dc:	3301      	addne	r3, #1
 80071de:	3501      	addeq	r5, #1
 80071e0:	4663      	moveq	r3, ip
 80071e2:	f023 0301 	bicne.w	r3, r3, #1
 80071e6:	106a      	asrs	r2, r5, #1
 80071e8:	085b      	lsrs	r3, r3, #1
 80071ea:	07e9      	lsls	r1, r5, #31
 80071ec:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80071f0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80071f4:	bf48      	it	mi
 80071f6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80071fa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80071fe:	461c      	mov	r4, r3
 8007200:	e780      	b.n	8007104 <__ieee754_sqrt+0x30>
 8007202:	0aca      	lsrs	r2, r1, #11
 8007204:	3815      	subs	r0, #21
 8007206:	0549      	lsls	r1, r1, #21
 8007208:	2a00      	cmp	r2, #0
 800720a:	d0fa      	beq.n	8007202 <__ieee754_sqrt+0x12e>
 800720c:	02d6      	lsls	r6, r2, #11
 800720e:	d50a      	bpl.n	8007226 <__ieee754_sqrt+0x152>
 8007210:	f1c3 0420 	rsb	r4, r3, #32
 8007214:	fa21 f404 	lsr.w	r4, r1, r4
 8007218:	1e5d      	subs	r5, r3, #1
 800721a:	4099      	lsls	r1, r3
 800721c:	4322      	orrs	r2, r4
 800721e:	1b43      	subs	r3, r0, r5
 8007220:	e78b      	b.n	800713a <__ieee754_sqrt+0x66>
 8007222:	4618      	mov	r0, r3
 8007224:	e7f0      	b.n	8007208 <__ieee754_sqrt+0x134>
 8007226:	0052      	lsls	r2, r2, #1
 8007228:	3301      	adds	r3, #1
 800722a:	e7ef      	b.n	800720c <__ieee754_sqrt+0x138>
 800722c:	46a0      	mov	r8, r4
 800722e:	e7bf      	b.n	80071b0 <__ieee754_sqrt+0xdc>
 8007230:	7ff00000 	.word	0x7ff00000

08007234 <matherr>:
 8007234:	2000      	movs	r0, #0
 8007236:	4770      	bx	lr

08007238 <_init>:
 8007238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723a:	bf00      	nop
 800723c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800723e:	bc08      	pop	{r3}
 8007240:	469e      	mov	lr, r3
 8007242:	4770      	bx	lr

08007244 <_fini>:
 8007244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007246:	bf00      	nop
 8007248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800724a:	bc08      	pop	{r3}
 800724c:	469e      	mov	lr, r3
 800724e:	4770      	bx	lr
