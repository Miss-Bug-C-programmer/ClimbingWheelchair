
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b444  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  0800b5f8  0800b5f8  0001b5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8d8  0800b8d8  00020254  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8d8  0800b8d8  0001b8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8e0  0800b8e0  00020254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8e0  0800b8e0  0001b8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8e4  0800b8e4  0001b8e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  0800b8e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  20000258  0800bb3c  00020258  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000654  0800bb3c  00020654  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bbc6  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003deb  00000000  00000000  0003be4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  0003fc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001318  00000000  00000000  00041120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000277ad  00000000  00000000  00042438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a55d  00000000  00000000  00069be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1dc3  00000000  00000000  00084142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00165f05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c70  00000000  00000000  00165f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000258 	.word	0x20000258
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b5dc 	.word	0x0800b5dc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000025c 	.word	0x2000025c
 80001ec:	0800b5dc 	.word	0x0800b5dc

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <pid_create>:
	Author e-mail: ruben at geekfactory dot mx
 */
#include "PID.h"

PID_t pid_create(PID_t pid, float* in, float* out, float* set, float kp, float ki, float kd)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	61f8      	str	r0, [r7, #28]
 8000ef8:	61b9      	str	r1, [r7, #24]
 8000efa:	617a      	str	r2, [r7, #20]
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f02:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f06:	ed87 1a01 	vstr	s2, [r7, #4]
	pid->input = in;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	601a      	str	r2, [r3, #0]
	pid->output = out;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	605a      	str	r2, [r3, #4]
	pid->setpoint = set;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	609a      	str	r2, [r3, #8]
	pid->automode = false;
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	pid_limits(pid, 0, 255);
 8000f24:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000f6c <pid_create+0x7c>
 8000f28:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000f70 <pid_create+0x80>
 8000f2c:	69f8      	ldr	r0, [r7, #28]
 8000f2e:	f000 f8c3 	bl	80010b8 <pid_limits>

	// Set default sample time to 100 ms
	pid->sampletime = 100 * (FREQUENCY / 1000);
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	2264      	movs	r2, #100	; 0x64
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c

	pid_direction(pid, E_PID_DIRECT);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	69f8      	ldr	r0, [r7, #28]
 8000f3c:	f000 f95e 	bl	80011fc <pid_direction>
	PID_tune(pid, kp, ki, kd);
 8000f40:	ed97 1a01 	vldr	s2, [r7, #4]
 8000f44:	edd7 0a02 	vldr	s1, [r7, #8]
 8000f48:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f4c:	69f8      	ldr	r0, [r7, #28]
 8000f4e:	f000 f811 	bl	8000f74 <PID_tune>

	pid->lasttime = HAL_GetTick() - pid->sampletime;
 8000f52:	f002 ff6b 	bl	8003e2c <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5c:	1ad2      	subs	r2, r2, r3
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28

	return pid;
 8000f62:	69fb      	ldr	r3, [r7, #28]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	437f0000 	.word	0x437f0000
 8000f70:	00000000 	.word	0x00000000

08000f74 <PID_tune>:
	pid->lastin = in;
	pid->lasttime = HAL_GetTick();
}

void PID_tune(PID_t pid, float kp, float ki, float kd)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b087      	sub	sp, #28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f80:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f84:	ed87 1a00 	vstr	s2, [r7]
	// Check for validity
	if (kp < 0 || ki < 0 || kd < 0)
 8000f88:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f94:	d452      	bmi.n	800103c <PID_tune+0xc8>
 8000f96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa2:	d44b      	bmi.n	800103c <PID_tune+0xc8>
 8000fa4:	edd7 7a00 	vldr	s15, [r7]
 8000fa8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb0:	d444      	bmi.n	800103c <PID_tune+0xc8>
		return;
	
	//Compute sample time in seconds
	float ssec = ((float) pid->sampletime) / ((float) FREQUENCY);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb6:	ee07 3a90 	vmov	s15, r3
 8000fba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fbe:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001048 <PID_tune+0xd4>
 8000fc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc6:	edc7 7a05 	vstr	s15, [r7, #20]

	pid->Kp = kp;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	60da      	str	r2, [r3, #12]
	pid->Ki = ki * ssec;
 8000fd0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->Kd = kd / ssec;
 8000fe2:	edd7 6a00 	vldr	s13, [r7]
 8000fe6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	edc3 7a05 	vstr	s15, [r3, #20]

	if (pid->direction == E_PID_REVERSE) {
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d11f      	bne.n	800103e <PID_tune+0xca>
		pid->Kp = 0 - pid->Kp;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	edd3 7a03 	vldr	s15, [r3, #12]
 8001004:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800104c <PID_tune+0xd8>
 8001008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = 0 - pid->Ki;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	edd3 7a04 	vldr	s15, [r3, #16]
 8001018:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800104c <PID_tune+0xd8>
 800101c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = 0 - pid->Kd;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	edd3 7a05 	vldr	s15, [r3, #20]
 800102c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800104c <PID_tune+0xd8>
 8001030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	edc3 7a05 	vstr	s15, [r3, #20]
 800103a:	e000      	b.n	800103e <PID_tune+0xca>
		return;
 800103c:	bf00      	nop
	}
}
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	447a0000 	.word	0x447a0000
 800104c:	00000000 	.word	0x00000000

08001050 <pid_sample>:

void pid_sample(PID_t pid, uint32_t time)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
	if (time > 0) {
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d025      	beq.n	80010ac <pid_sample+0x5c>
		float ratio = (float) (time * (FREQUENCY / 1000)) / (float) pid->sampletime;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106e:	ee07 3a90 	vmov	s15, r3
 8001072:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800107a:	edc7 7a03 	vstr	s15, [r7, #12]
		pid->Ki *= ratio;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	ed93 7a04 	vldr	s14, [r3, #16]
 8001084:	edd7 7a03 	vldr	s15, [r7, #12]
 8001088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd /= ratio;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	edd3 6a05 	vldr	s13, [r3, #20]
 8001098:	ed97 7a03 	vldr	s14, [r7, #12]
 800109c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	edc3 7a05 	vstr	s15, [r3, #20]
		pid->sampletime = time * (FREQUENCY / 1000);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <pid_limits>:

void pid_limits(PID_t pid, float min, float max)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80010c4:	edc7 0a01 	vstr	s1, [r7, #4]
	if (min >= max) return;
 80010c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80010cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d8:	da4d      	bge.n	8001176 <pid_limits+0xbe>
	pid->omin = min;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	619a      	str	r2, [r3, #24]
	pid->omax = max;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	61da      	str	r2, [r3, #28]
	//Adjust output to new limits
	if (pid->automode) {
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d043      	beq.n	8001178 <pid_limits+0xc0>
		if (*(pid->output) > pid->omax)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	ed93 7a00 	vldr	s14, [r3]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	edd3 7a07 	vldr	s15, [r3, #28]
 80010fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001106:	dd05      	ble.n	8001114 <pid_limits+0x5c>
			*(pid->output) = pid->omax;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	69d2      	ldr	r2, [r2, #28]
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	e010      	b.n	8001136 <pid_limits+0x7e>
		else if (*(pid->output) < pid->omin)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	ed93 7a00 	vldr	s14, [r3]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001122:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112a:	d504      	bpl.n	8001136 <pid_limits+0x7e>
			*(pid->output) = pid->omin;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	6992      	ldr	r2, [r2, #24]
 8001134:	601a      	str	r2, [r3, #0]

		if (pid->iterm > pid->omax)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	ed93 7a08 	vldr	s14, [r3, #32]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001142:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114a:	dd04      	ble.n	8001156 <pid_limits+0x9e>
			pid->iterm = pid->omax;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	69da      	ldr	r2, [r3, #28]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	621a      	str	r2, [r3, #32]
 8001154:	e010      	b.n	8001178 <pid_limits+0xc0>
		else if (pid->iterm < pid->omin)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	ed93 7a08 	vldr	s14, [r3, #32]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116a:	d505      	bpl.n	8001178 <pid_limits+0xc0>
			pid->iterm = pid->omin;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	699a      	ldr	r2, [r3, #24]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	621a      	str	r2, [r3, #32]
 8001174:	e000      	b.n	8001178 <pid_limits+0xc0>
	if (min >= max) return;
 8001176:	bf00      	nop
	}
}
 8001178:	3714      	adds	r7, #20
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <pid_auto>:

void pid_auto(PID_t pid)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
	// If going from manual to auto
	if (!pid->automode) {
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001190:	2b00      	cmp	r3, #0
 8001192:	d12c      	bne.n	80011ee <pid_auto+0x6c>
		pid->iterm = *(pid->output);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	621a      	str	r2, [r3, #32]
		pid->lastin = *(pid->input);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	625a      	str	r2, [r3, #36]	; 0x24
		if (pid->iterm > pid->omax)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	ed93 7a08 	vldr	s14, [r3, #32]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	edd3 7a07 	vldr	s15, [r3, #28]
 80011b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011bc:	dd04      	ble.n	80011c8 <pid_auto+0x46>
			pid->iterm = pid->omax;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69da      	ldr	r2, [r3, #28]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	621a      	str	r2, [r3, #32]
 80011c6:	e00e      	b.n	80011e6 <pid_auto+0x64>
		else if (pid->iterm < pid->omin)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	ed93 7a08 	vldr	s14, [r3, #32]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	edd3 7a06 	vldr	s15, [r3, #24]
 80011d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011dc:	d503      	bpl.n	80011e6 <pid_auto+0x64>
			pid->iterm = pid->omin;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	699a      	ldr	r2, [r3, #24]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	621a      	str	r2, [r3, #32]
		pid->automode = true;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2201      	movs	r2, #1
 80011ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <pid_direction>:
{
	pid->automode = false;
}

void pid_direction(PID_t pid, enum pid_control_directions dir)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	70fb      	strb	r3, [r7, #3]
	if (pid->automode && pid->direction != dir) {
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800120e:	2b00      	cmp	r3, #0
 8001210:	d023      	beq.n	800125a <pid_direction+0x5e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001218:	78fa      	ldrb	r2, [r7, #3]
 800121a:	429a      	cmp	r2, r3
 800121c:	d01d      	beq.n	800125a <pid_direction+0x5e>
		pid->Kp = (0 - pid->Kp);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	edd3 7a03 	vldr	s15, [r3, #12]
 8001224:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001270 <pid_direction+0x74>
 8001228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = (0 - pid->Ki);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	edd3 7a04 	vldr	s15, [r3, #16]
 8001238:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001270 <pid_direction+0x74>
 800123c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = (0 - pid->Kd);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	edd3 7a05 	vldr	s15, [r3, #20]
 800124c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001270 <pid_direction+0x74>
 8001250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	pid->direction = dir;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	78fa      	ldrb	r2, [r7, #3]
 800125e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	00000000 	.word	0x00000000

08001274 <hubMotor_Init>:
 */

#include "X2_6010S.h"
extern uint8_t receive_buf[15];

void hubMotor_Init(){
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HubM_IO_SON_GPIO_Port, HubM_IO_SON_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127e:	4808      	ldr	r0, [pc, #32]	; (80012a0 <hubMotor_Init+0x2c>)
 8001280:	f003 ff9a 	bl	80051b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_NOT_GPIO_Port, HubM_IO_NOT_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <hubMotor_Init+0x2c>)
 800128c:	f003 ff94 	bl	80051b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_POT_GPIO_Port, HubM_IO_POT_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001296:	4802      	ldr	r0, [pc, #8]	; (80012a0 <hubMotor_Init+0x2c>)
 8001298:	f003 ff8e 	bl	80051b8 <HAL_GPIO_WritePin>
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40020c00 	.word	0x40020c00

080012a4 <send_HubMotor>:

void send_HubMotor(float m1_speed, float m2_speed){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80012ae:	edc7 0a00 	vstr	s1, [r7]
	int16_t motor1_speed, motor2_speed;
//	motor1_speed = -(int16_t)(m1_speed * 4096.0);
//	motor2_speed = (int16_t)(m2_speed * 4096.0);
	motor1_speed = -(int16_t)(m1_speed);
 80012b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ba:	ee17 3a90 	vmov	r3, s15
 80012be:	b21b      	sxth	r3, r3
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	425b      	negs	r3, r3
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	motor2_speed = (int16_t)(m2_speed);
 80012c8:	edd7 7a00 	vldr	s15, [r7]
 80012cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d0:	ee17 3a90 	vmov	r3, s15
 80012d4:	85bb      	strh	r3, [r7, #44]	; 0x2c

	uint8_t send_buf[15];
	send_buf[0] = 0xAA;
 80012d6:	23aa      	movs	r3, #170	; 0xaa
 80012d8:	733b      	strb	r3, [r7, #12]
	send_buf[1] = 0xA4;
 80012da:	23a4      	movs	r3, #164	; 0xa4
 80012dc:	737b      	strb	r3, [r7, #13]
	send_buf[2] = 0x0E;
 80012de:	230e      	movs	r3, #14
 80012e0:	73bb      	strb	r3, [r7, #14]
	send_buf[3] = 0x00;
 80012e2:	2300      	movs	r3, #0
 80012e4:	73fb      	strb	r3, [r7, #15]
	send_buf[4] = MOTOR_ENABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	743b      	strb	r3, [r7, #16]
	send_buf[5] = MOTOR_ENCODER_FEEDBACK;
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	747b      	strb	r3, [r7, #17]

	//Set acceleration to constant by default
	//time taken from 0 to 1000rpm
	uint16_t acceleration = 200;
 80012ee:	23c8      	movs	r3, #200	; 0xc8
 80012f0:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t msb_acce = (uint8_t)((acceleration & 0xFF00) >> 8);
 80012f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80012f4:	0a1b      	lsrs	r3, r3, #8
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t lsb_acce = (uint8_t)(acceleration & 0x00FF);
 80012fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80012fe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	send_buf[6] = lsb_acce;
 8001302:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001306:	74bb      	strb	r3, [r7, #18]
	send_buf[7] = msb_acce;
 8001308:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800130c:	74fb      	strb	r3, [r7, #19]

	//Set maximum torque
	//Value: 0 - 450 (300 by default)
	uint16_t max_torque = 300;
 800130e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001312:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t msb_max_torque = (uint8_t)((max_torque & 0xFF00) >> 8);
 8001314:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001316:	0a1b      	lsrs	r3, r3, #8
 8001318:	b29b      	uxth	r3, r3
 800131a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t lsb_max_torque = (uint8_t)(max_torque & 0x00FF);
 800131e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001320:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	send_buf[8] = lsb_max_torque;
 8001324:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001328:	753b      	strb	r3, [r7, #20]
	send_buf[9] = msb_max_torque;
 800132a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800132e:	757b      	strb	r3, [r7, #21]

	//Set motor1 speed
	uint8_t msb_motor1_speed = (uint8_t)((motor1_speed & 0xFF00) >> 8);
 8001330:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001334:	121b      	asrs	r3, r3, #8
 8001336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t lsb_motor1_speed = (uint8_t)(motor1_speed & 0x00FF);
 800133a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800133c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	send_buf[10] = lsb_motor1_speed;
 8001340:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001344:	75bb      	strb	r3, [r7, #22]
	send_buf[11] = msb_motor1_speed;
 8001346:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800134a:	75fb      	strb	r3, [r7, #23]

	//Set motor2 speed
	uint8_t msb_motor2_speed = (uint8_t)((motor2_speed & 0xFF00) >> 8);
 800134c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001350:	121b      	asrs	r3, r3, #8
 8001352:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t lsb_motor2_speed = (uint8_t)(motor2_speed & 0x00FF);
 8001356:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001358:	f887 3020 	strb.w	r3, [r7, #32]
	send_buf[12] = lsb_motor2_speed;
 800135c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001360:	763b      	strb	r3, [r7, #24]
	send_buf[13] = msb_motor2_speed;
 8001362:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001366:	767b      	strb	r3, [r7, #25]

	//checksum byte
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 8001368:	7b3b      	ldrb	r3, [r7, #12]
 800136a:	b29a      	uxth	r2, r3
 800136c:	7b7b      	ldrb	r3, [r7, #13]
 800136e:	b29b      	uxth	r3, r3
 8001370:	4413      	add	r3, r2
 8001372:	b29a      	uxth	r2, r3
 8001374:	7bbb      	ldrb	r3, [r7, #14]
 8001376:	b29b      	uxth	r3, r3
 8001378:	4413      	add	r3, r2
 800137a:	b29a      	uxth	r2, r3
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	b29b      	uxth	r3, r3
 8001380:	4413      	add	r3, r2
 8001382:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[4] + (uint16_t)send_buf[5] + (uint16_t)send_buf[6]
 8001384:	7c3b      	ldrb	r3, [r7, #16]
 8001386:	b29b      	uxth	r3, r3
 8001388:	4413      	add	r3, r2
 800138a:	b29a      	uxth	r2, r3
 800138c:	7c7b      	ldrb	r3, [r7, #17]
 800138e:	b29b      	uxth	r3, r3
 8001390:	4413      	add	r3, r2
 8001392:	b29a      	uxth	r2, r3
 8001394:	7cbb      	ldrb	r3, [r7, #18]
 8001396:	b29b      	uxth	r3, r3
 8001398:	4413      	add	r3, r2
 800139a:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[7] + (uint16_t)send_buf[8] + (uint16_t)send_buf[9]
 800139c:	7cfb      	ldrb	r3, [r7, #19]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	4413      	add	r3, r2
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	7d3b      	ldrb	r3, [r7, #20]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	4413      	add	r3, r2
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	7d7b      	ldrb	r3, [r7, #21]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	4413      	add	r3, r2
 80013b2:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[10] + (uint16_t)send_buf[11] + (uint16_t)send_buf[12]
 80013b4:	7dbb      	ldrb	r3, [r7, #22]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	4413      	add	r3, r2
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	4413      	add	r3, r2
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	7e3b      	ldrb	r3, [r7, #24]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	4413      	add	r3, r2
 80013ca:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[13];
 80013cc:	7e7b      	ldrb	r3, [r7, #25]
 80013ce:	b29b      	uxth	r3, r3
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 80013d0:	4413      	add	r3, r2
 80013d2:	83fb      	strh	r3, [r7, #30]

	send_buf[14] = (uint8_t)(sum & 0x00FF);
 80013d4:	8bfb      	ldrh	r3, [r7, #30]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	76bb      	strb	r3, [r7, #26]

	HAL_UART_Transmit(&huart3, send_buf, 15, 50);
 80013da:	f107 010c 	add.w	r1, r7, #12
 80013de:	2332      	movs	r3, #50	; 0x32
 80013e0:	220f      	movs	r2, #15
 80013e2:	4806      	ldr	r0, [pc, #24]	; (80013fc <send_HubMotor+0x158>)
 80013e4:	f007 f8a1 	bl	800852a <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart3, receive_buf, 15);
 80013e8:	220f      	movs	r2, #15
 80013ea:	4905      	ldr	r1, [pc, #20]	; (8001400 <send_HubMotor+0x15c>)
 80013ec:	4803      	ldr	r0, [pc, #12]	; (80013fc <send_HubMotor+0x158>)
 80013ee:	f007 f935 	bl	800865c <HAL_UART_Receive_DMA>
}
 80013f2:	bf00      	nop
 80013f4:	3730      	adds	r7, #48	; 0x30
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200005fc 	.word	0x200005fc
 8001400:	20000484 	.word	0x20000484

08001404 <ADC_Init>:
SPI_HandleTypeDef hspi1;

//ADCHandle         hADC;

void ADC_Init()
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0

	//Delay for SPI encoder to startup
//	HAL_Delay(100);

	/*Reset AD7606*/
	AD7606_CS_HIGH;
 8001408:	2201      	movs	r2, #1
 800140a:	2110      	movs	r1, #16
 800140c:	481c      	ldr	r0, [pc, #112]	; (8001480 <ADC_Init+0x7c>)
 800140e:	f003 fed3 	bl	80051b8 <HAL_GPIO_WritePin>
	AD7606_CV_LOW;
 8001412:	2200      	movs	r2, #0
 8001414:	2120      	movs	r1, #32
 8001416:	481b      	ldr	r0, [pc, #108]	; (8001484 <ADC_Init+0x80>)
 8001418:	f003 fece 	bl	80051b8 <HAL_GPIO_WritePin>

	AD7606_RST_LOW;
 800141c:	2200      	movs	r2, #0
 800141e:	2110      	movs	r1, #16
 8001420:	4818      	ldr	r0, [pc, #96]	; (8001484 <ADC_Init+0x80>)
 8001422:	f003 fec9 	bl	80051b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001426:	2001      	movs	r0, #1
 8001428:	f002 fd0c 	bl	8003e44 <HAL_Delay>
	AD7606_RST_HIGH;
 800142c:	2201      	movs	r2, #1
 800142e:	2110      	movs	r1, #16
 8001430:	4814      	ldr	r0, [pc, #80]	; (8001484 <ADC_Init+0x80>)
 8001432:	f003 fec1 	bl	80051b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001436:	2001      	movs	r0, #1
 8001438:	f002 fd04 	bl	8003e44 <HAL_Delay>
	AD7606_RST_LOW;
 800143c:	2200      	movs	r2, #0
 800143e:	2110      	movs	r1, #16
 8001440:	4810      	ldr	r0, [pc, #64]	; (8001484 <ADC_Init+0x80>)
 8001442:	f003 feb9 	bl	80051b8 <HAL_GPIO_WritePin>

	/*Set analog input range*/
	AD7606_RANGE_LOW_5V;
 8001446:	2200      	movs	r2, #0
 8001448:	2101      	movs	r1, #1
 800144a:	480e      	ldr	r0, [pc, #56]	; (8001484 <ADC_Init+0x80>)
 800144c:	f003 feb4 	bl	80051b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001450:	2001      	movs	r0, #1
 8001452:	f002 fcf7 	bl	8003e44 <HAL_Delay>

	/*Set oversampling ratio to 32*/
	HAL_GPIO_WritePin(AD7606_OS2_PIN_Port, AD7606_OS2_PIN, GPIO_PIN_SET);
 8001456:	2201      	movs	r2, #1
 8001458:	2102      	movs	r1, #2
 800145a:	480a      	ldr	r0, [pc, #40]	; (8001484 <ADC_Init+0x80>)
 800145c:	f003 feac 	bl	80051b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS1_PIN_Port, AD7606_OS1_PIN, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	2104      	movs	r1, #4
 8001464:	4807      	ldr	r0, [pc, #28]	; (8001484 <ADC_Init+0x80>)
 8001466:	f003 fea7 	bl	80051b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS0_PIN_Port, AD7606_OS0_PIN, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	2108      	movs	r1, #8
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <ADC_Init+0x80>)
 8001470:	f003 fea2 	bl	80051b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001474:	2001      	movs	r0, #1
 8001476:	f002 fce5 	bl	8003e44 <HAL_Delay>

//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
//	HAL_Delay(500);
//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40020000 	.word	0x40020000
 8001484:	40020800 	.word	0x40020800

08001488 <ADC_DataRequest>:

void ADC_DataRequest(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	AD7606_CV_LOW;
 800148c:	2200      	movs	r2, #0
 800148e:	2120      	movs	r1, #32
 8001490:	4804      	ldr	r0, [pc, #16]	; (80014a4 <ADC_DataRequest+0x1c>)
 8001492:	f003 fe91 	bl	80051b8 <HAL_GPIO_WritePin>
	AD7606_CV_HIGH;
 8001496:	2201      	movs	r2, #1
 8001498:	2120      	movs	r1, #32
 800149a:	4802      	ldr	r0, [pc, #8]	; (80014a4 <ADC_DataRequest+0x1c>)
 800149c:	f003 fe8c 	bl	80051b8 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
//		HAL_Delay(500);
//		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
//		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
//		      HAL_Delay(5000);
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40020800 	.word	0x40020800

080014a8 <ADC_Read>:


void ADC_Read(int16_t *data)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 80014b0:	2200      	movs	r2, #0
 80014b2:	2110      	movs	r1, #16
 80014b4:	4808      	ldr	r0, [pc, #32]	; (80014d8 <ADC_Read+0x30>)
 80014b6:	f003 fe7f 	bl	80051b8 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 80014ba:	2302      	movs	r3, #2
 80014bc:	2208      	movs	r2, #8
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4806      	ldr	r0, [pc, #24]	; (80014dc <ADC_Read+0x34>)
 80014c2:	f005 fc03 	bl	8006ccc <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 80014c6:	2201      	movs	r2, #1
 80014c8:	2110      	movs	r1, #16
 80014ca:	4803      	ldr	r0, [pc, #12]	; (80014d8 <ADC_Read+0x30>)
 80014cc:	f003 fe74 	bl	80051b8 <HAL_GPIO_WritePin>
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40020000 	.word	0x40020000
 80014dc:	200002c0 	.word	0x200002c0

080014e0 <bd25l_Init>:
	.DIR_pin	= ClimbM_IO_FR2_Pin,
	.pole		= 4,
	.ID		= 2,
};

void bd25l_Init(Motor_TypeDef* motor){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	enableMotor(motor, 0);
 80014e8:	2100      	movs	r1, #0
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 f808 	bl	8001500 <enableMotor>
	brakeMotor(motor, 0);
 80014f0:	2100      	movs	r1, #0
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f828 	bl	8001548 <brakeMotor>
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <enableMotor>:
	brakeMotor(motor, 1);
	enableMotor(motor, 0);

}

void enableMotor(Motor_TypeDef* motor, uint8_t state){
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->EN_port, motor->EN_pin, state);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001514:	78fa      	ldrb	r2, [r7, #3]
 8001516:	4619      	mov	r1, r3
 8001518:	f003 fe4e 	bl	80051b8 <HAL_GPIO_WritePin>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <emBrakeMotor>:

void emBrakeMotor(uint8_t state){
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Brake_Wheel_GPIO_Port, Brake_Wheel_Pin, state);
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	461a      	mov	r2, r3
 8001532:	2108      	movs	r1, #8
 8001534:	4803      	ldr	r0, [pc, #12]	; (8001544 <emBrakeMotor+0x20>)
 8001536:	f003 fe3f 	bl	80051b8 <HAL_GPIO_WritePin>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40020c00 	.word	0x40020c00

08001548 <brakeMotor>:

void brakeMotor(Motor_TypeDef* motor, uint8_t state){
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->BRK_port, motor->BRK_pin, state);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69d8      	ldr	r0, [r3, #28]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	8c1b      	ldrh	r3, [r3, #32]
 800155c:	78fa      	ldrb	r2, [r7, #3]
 800155e:	4619      	mov	r1, r3
 8001560:	f003 fe2a 	bl	80051b8 <HAL_GPIO_WritePin>
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <setMotorDir>:

void setMotorDir(Motor_TypeDef* motor, uint8_t dir){
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin, dir);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001580:	78fa      	ldrb	r2, [r7, #3]
 8001582:	4619      	mov	r1, r3
 8001584:	f003 fe18 	bl	80051b8 <HAL_GPIO_WritePin>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <setMotorSpeed>:

void setMotorSpeed(Motor_TypeDef* motor, float speed){
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	ed87 0a00 	vstr	s0, [r7]

	float frequency = 0;
 800159c:	f04f 0300 	mov.w	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
	uint16_t period;
	uint32_t duty_cycle; //50%

	if (speed > 100) speed = 100.0;
 80015a2:	edd7 7a00 	vldr	s15, [r7]
 80015a6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80016d8 <setMotorSpeed+0x148>
 80015aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b2:	dd01      	ble.n	80015b8 <setMotorSpeed+0x28>
 80015b4:	4b49      	ldr	r3, [pc, #292]	; (80016dc <setMotorSpeed+0x14c>)
 80015b6:	603b      	str	r3, [r7, #0]
	//Frequency equation derived from data sheet
	frequency = (uint16_t)((speed - 0.2597)/0.02494);
 80015b8:	6838      	ldr	r0, [r7, #0]
 80015ba:	f7fe ff7d 	bl	80004b8 <__aeabi_f2d>
 80015be:	a340      	add	r3, pc, #256	; (adr r3, 80016c0 <setMotorSpeed+0x130>)
 80015c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c4:	f7fe fe18 	bl	80001f8 <__aeabi_dsub>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	a33d      	add	r3, pc, #244	; (adr r3, 80016c8 <setMotorSpeed+0x138>)
 80015d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d6:	f7ff f8f1 	bl	80007bc <__aeabi_ddiv>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	f7ff fa99 	bl	8000b18 <__aeabi_d2uiz>
 80015e6:	4603      	mov	r3, r0
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	ee07 3a90 	vmov	s15, r3
 80015ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015f2:	edc7 7a05 	vstr	s15, [r7, #20]
	period = (int)(1e6/frequency)+1;
 80015f6:	6978      	ldr	r0, [r7, #20]
 80015f8:	f7fe ff5e 	bl	80004b8 <__aeabi_f2d>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	a133      	add	r1, pc, #204	; (adr r1, 80016d0 <setMotorSpeed+0x140>)
 8001602:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001606:	f7ff f8d9 	bl	80007bc <__aeabi_ddiv>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	f7ff fa59 	bl	8000ac8 <__aeabi_d2iz>
 8001616:	4603      	mov	r3, r0
 8001618:	b29b      	uxth	r3, r3
 800161a:	3301      	adds	r3, #1
 800161c:	827b      	strh	r3, [r7, #18]
	duty_cycle = period / 2;
 800161e:	8a7b      	ldrh	r3, [r7, #18]
 8001620:	085b      	lsrs	r3, r3, #1
 8001622:	b29b      	uxth	r3, r3
 8001624:	60fb      	str	r3, [r7, #12]
//	      motor->outputPWM->Instance->CCR4 = duty_cycle;
//
//	    HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
//	}

	if (speed<4){
 8001626:	edd7 7a00 	vldr	s15, [r7]
 800162a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800162e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001636:	d503      	bpl.n	8001640 <setMotorSpeed+0xb0>
		brakeMotor(motor, 1);
 8001638:	2101      	movs	r1, #1
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ff84 	bl	8001548 <brakeMotor>
	}



	motor->outputPWM->Instance->ARR = period;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	8a7a      	ldrh	r2, [r7, #18]
 8001648:	62da      	str	r2, [r3, #44]	; 0x2c
	if(motor->PWM_channel == TIM_CHANNEL_1)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	8b1b      	ldrh	r3, [r3, #24]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d105      	bne.n	800165e <setMotorSpeed+0xce>
	  motor->outputPWM->Instance->CCR1 = duty_cycle;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	635a      	str	r2, [r3, #52]	; 0x34
 800165c:	e01c      	b.n	8001698 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_2)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	8b1b      	ldrh	r3, [r3, #24]
 8001662:	2b04      	cmp	r3, #4
 8001664:	d105      	bne.n	8001672 <setMotorSpeed+0xe2>
		  motor->outputPWM->Instance->CCR2 = duty_cycle;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	639a      	str	r2, [r3, #56]	; 0x38
 8001670:	e012      	b.n	8001698 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_3)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	8b1b      	ldrh	r3, [r3, #24]
 8001676:	2b08      	cmp	r3, #8
 8001678:	d105      	bne.n	8001686 <setMotorSpeed+0xf6>
		  motor->outputPWM->Instance->CCR3 = duty_cycle;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	63da      	str	r2, [r3, #60]	; 0x3c
 8001684:	e008      	b.n	8001698 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_4)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	8b1b      	ldrh	r3, [r3, #24]
 800168a:	2b0c      	cmp	r3, #12
 800168c:	d104      	bne.n	8001698 <setMotorSpeed+0x108>
	  motor->outputPWM->Instance->CCR4 = duty_cycle;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	695a      	ldr	r2, [r3, #20]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	8b1b      	ldrh	r3, [r3, #24]
 80016a0:	4619      	mov	r1, r3
 80016a2:	4610      	mov	r0, r2
 80016a4:	f005 ff52 	bl	800754c <HAL_TIM_PWM_Start>



	motor->outputPWM->Instance->CNT = 0;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80016b2:	bf00      	nop
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	f3af 8000 	nop.w
 80016c0:	bfb15b57 	.word	0xbfb15b57
 80016c4:	3fd09eec 	.word	0x3fd09eec
 80016c8:	1172ef0b 	.word	0x1172ef0b
 80016cc:	3f9989df 	.word	0x3f9989df
 80016d0:	00000000 	.word	0x00000000
 80016d4:	412e8480 	.word	0x412e8480
 80016d8:	42c80000 	.word	0x42c80000
 80016dc:	42c80000 	.word	0x42c80000

080016e0 <runMotor>:
		return -1;
	}
	else return 1;
}

void runMotor(Motor_TypeDef* motor, float speed){
 80016e0:	b5b0      	push	{r4, r5, r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	ed87 0a00 	vstr	s0, [r7]
  //	    - positive speed Lift DOWN
  //	    - negative speed lift UP
    if (motor->ID == 1){
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d129      	bne.n	800174a <runMotor+0x6a>
	if (fabs(speed)/speed  >= 0)
 80016f6:	edd7 7a00 	vldr	s15, [r7]
 80016fa:	eef0 7ae7 	vabs.f32	s15, s15
 80016fe:	ee17 0a90 	vmov	r0, s15
 8001702:	f7fe fed9 	bl	80004b8 <__aeabi_f2d>
 8001706:	4604      	mov	r4, r0
 8001708:	460d      	mov	r5, r1
 800170a:	6838      	ldr	r0, [r7, #0]
 800170c:	f7fe fed4 	bl	80004b8 <__aeabi_f2d>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4620      	mov	r0, r4
 8001716:	4629      	mov	r1, r5
 8001718:	f7ff f850 	bl	80007bc <__aeabi_ddiv>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	f7ff f9a2 	bl	8000a74 <__aeabi_dcmpge>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d004      	beq.n	8001740 <runMotor+0x60>
	      setMotorDir(motor, 0);
 8001736:	2100      	movs	r1, #0
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff17 	bl	800156c <setMotorDir>
 800173e:	e032      	b.n	80017a6 <runMotor+0xc6>
	else
	  setMotorDir(motor, 1);
 8001740:	2101      	movs	r1, #1
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ff12 	bl	800156c <setMotorDir>
 8001748:	e02d      	b.n	80017a6 <runMotor+0xc6>
    }
    else if (motor->ID == 2){
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001750:	2b02      	cmp	r3, #2
 8001752:	d128      	bne.n	80017a6 <runMotor+0xc6>
	if (fabs(speed)/speed  >= 0)
 8001754:	edd7 7a00 	vldr	s15, [r7]
 8001758:	eef0 7ae7 	vabs.f32	s15, s15
 800175c:	ee17 0a90 	vmov	r0, s15
 8001760:	f7fe feaa 	bl	80004b8 <__aeabi_f2d>
 8001764:	4604      	mov	r4, r0
 8001766:	460d      	mov	r5, r1
 8001768:	6838      	ldr	r0, [r7, #0]
 800176a:	f7fe fea5 	bl	80004b8 <__aeabi_f2d>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	4620      	mov	r0, r4
 8001774:	4629      	mov	r1, r5
 8001776:	f7ff f821 	bl	80007bc <__aeabi_ddiv>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	f7ff f973 	bl	8000a74 <__aeabi_dcmpge>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d004      	beq.n	800179e <runMotor+0xbe>
	  setMotorDir(motor, 1);
 8001794:	2101      	movs	r1, #1
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff fee8 	bl	800156c <setMotorDir>
 800179c:	e003      	b.n	80017a6 <runMotor+0xc6>
	else
	  setMotorDir(motor, 0);
 800179e:	2100      	movs	r1, #0
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff fee3 	bl	800156c <setMotorDir>
    }

    HAL_Delay(50);
 80017a6:	2032      	movs	r0, #50	; 0x32
 80017a8:	f002 fb4c 	bl	8003e44 <HAL_Delay>
    brakeMotor(motor, 0);
 80017ac:	2100      	movs	r1, #0
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff feca 	bl	8001548 <brakeMotor>
    setMotorSpeed(motor, fabs(speed));
 80017b4:	edd7 7a00 	vldr	s15, [r7]
 80017b8:	eef0 7ae7 	vabs.f32	s15, s15
 80017bc:	eeb0 0a67 	vmov.f32	s0, s15
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff fee5 	bl	8001590 <setMotorSpeed>

}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bdb0      	pop	{r4, r5, r7, pc}

080017ce <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	889b      	ldrh	r3, [r3, #4]
 80017e0:	4619      	mov	r1, r3
 80017e2:	4610      	mov	r0, r2
 80017e4:	f003 fcd0 	bl	8005188 <HAL_GPIO_ReadPin>
 80017e8:	4603      	mov	r3, r0
 80017ea:	461a      	mov	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	799a      	ldrb	r2, [r3, #6]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	79db      	ldrb	r3, [r3, #7]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d004      	beq.n	8001806 <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 80017fc:	f002 fb16 	bl	8003e2c <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 8001806:	f002 fb11 	bl	8003e2c <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d209      	bcs.n	800182c <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	799a      	ldrb	r2, [r3, #6]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7a1b      	ldrb	r3, [r3, #8]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d101      	bne.n	800182c <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 8001828:	2301      	movs	r3, #1
 800182a:	e004      	b.n	8001836 <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	799a      	ldrb	r2, [r3, #6]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001846:	4a18      	ldr	r2, [pc, #96]	; (80018a8 <MX_CAN1_Init+0x68>)
 8001848:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <MX_CAN1_Init+0x64>)
 800184c:	2209      	movs	r2, #9
 800184e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <MX_CAN1_Init+0x64>)
 800185e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001862:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001866:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800186a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800186c:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <MX_CAN1_Init+0x64>)
 800186e:	2200      	movs	r2, #0
 8001870:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001874:	2200      	movs	r2, #0
 8001876:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <MX_CAN1_Init+0x64>)
 800187a:	2200      	movs	r2, #0
 800187c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001880:	2200      	movs	r2, #0
 8001882:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001886:	2200      	movs	r2, #0
 8001888:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <MX_CAN1_Init+0x64>)
 800188c:	2200      	movs	r2, #0
 800188e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001890:	4804      	ldr	r0, [pc, #16]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001892:	f002 fafb 	bl	8003e8c <HAL_CAN_Init>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800189c:	f000 fd8c 	bl	80023b8 <Error_Handler>
  }

}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000340 	.word	0x20000340
 80018a8:	40006400 	.word	0x40006400

080018ac <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 80018b0:	4b17      	ldr	r3, [pc, #92]	; (8001910 <MX_CAN2_Init+0x64>)
 80018b2:	4a18      	ldr	r2, [pc, #96]	; (8001914 <MX_CAN2_Init+0x68>)
 80018b4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 80018b6:	4b16      	ldr	r3, [pc, #88]	; (8001910 <MX_CAN2_Init+0x64>)
 80018b8:	2209      	movs	r2, #9
 80018ba:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80018bc:	4b14      	ldr	r3, [pc, #80]	; (8001910 <MX_CAN2_Init+0x64>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80018c2:	4b13      	ldr	r3, [pc, #76]	; (8001910 <MX_CAN2_Init+0x64>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_5TQ;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_CAN2_Init+0x64>)
 80018ca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80018ce:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <MX_CAN2_Init+0x64>)
 80018d2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80018d6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80018d8:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <MX_CAN2_Init+0x64>)
 80018da:	2200      	movs	r2, #0
 80018dc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_CAN2_Init+0x64>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80018e4:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <MX_CAN2_Init+0x64>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_CAN2_Init+0x64>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80018f0:	4b07      	ldr	r3, [pc, #28]	; (8001910 <MX_CAN2_Init+0x64>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_CAN2_Init+0x64>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80018fc:	4804      	ldr	r0, [pc, #16]	; (8001910 <MX_CAN2_Init+0x64>)
 80018fe:	f002 fac5 	bl	8003e8c <HAL_CAN_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001908:	f000 fd56 	bl	80023b8 <Error_Handler>
  }

}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000318 	.word	0x20000318
 8001914:	40006800 	.word	0x40006800

08001918 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08c      	sub	sp, #48	; 0x30
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a4a      	ldr	r2, [pc, #296]	; (8001a60 <HAL_CAN_MspInit+0x148>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d13d      	bne.n	80019b6 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800193a:	4b4a      	ldr	r3, [pc, #296]	; (8001a64 <HAL_CAN_MspInit+0x14c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	3301      	adds	r3, #1
 8001940:	4a48      	ldr	r2, [pc, #288]	; (8001a64 <HAL_CAN_MspInit+0x14c>)
 8001942:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001944:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <HAL_CAN_MspInit+0x14c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d10d      	bne.n	8001968 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800194c:	2300      	movs	r3, #0
 800194e:	61bb      	str	r3, [r7, #24]
 8001950:	4b45      	ldr	r3, [pc, #276]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	4a44      	ldr	r2, [pc, #272]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 8001956:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800195a:	6413      	str	r3, [r2, #64]	; 0x40
 800195c:	4b42      	ldr	r3, [pc, #264]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	4b3e      	ldr	r3, [pc, #248]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	4a3d      	ldr	r2, [pc, #244]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 8001972:	f043 0308 	orr.w	r3, r3, #8
 8001976:	6313      	str	r3, [r2, #48]	; 0x30
 8001978:	4b3b      	ldr	r3, [pc, #236]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001984:	2303      	movs	r3, #3
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001994:	2309      	movs	r3, #9
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001998:	f107 031c 	add.w	r3, r7, #28
 800199c:	4619      	mov	r1, r3
 800199e:	4833      	ldr	r0, [pc, #204]	; (8001a6c <HAL_CAN_MspInit+0x154>)
 80019a0:	f003 fa46 	bl	8004e30 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2100      	movs	r1, #0
 80019a8:	2014      	movs	r0, #20
 80019aa:	f002 fe7e 	bl	80046aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80019ae:	2014      	movs	r0, #20
 80019b0:	f002 fe97 	bl	80046e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80019b4:	e04f      	b.n	8001a56 <HAL_CAN_MspInit+0x13e>
  else if(canHandle->Instance==CAN2)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a2d      	ldr	r2, [pc, #180]	; (8001a70 <HAL_CAN_MspInit+0x158>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d14a      	bne.n	8001a56 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80019c0:	2300      	movs	r3, #0
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	4a27      	ldr	r2, [pc, #156]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 80019ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019ce:	6413      	str	r3, [r2, #64]	; 0x40
 80019d0:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 80019d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80019dc:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <HAL_CAN_MspInit+0x14c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	3301      	adds	r3, #1
 80019e2:	4a20      	ldr	r2, [pc, #128]	; (8001a64 <HAL_CAN_MspInit+0x14c>)
 80019e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80019e6:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <HAL_CAN_MspInit+0x14c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d10d      	bne.n	8001a0a <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	4a1c      	ldr	r2, [pc, #112]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 80019f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019fc:	6413      	str	r3, [r2, #64]	; 0x40
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a15      	ldr	r2, [pc, #84]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <HAL_CAN_MspInit+0x150>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001a26:	2360      	movs	r3, #96	; 0x60
 8001a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a32:	2303      	movs	r3, #3
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001a36:	2309      	movs	r3, #9
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3a:	f107 031c 	add.w	r3, r7, #28
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480c      	ldr	r0, [pc, #48]	; (8001a74 <HAL_CAN_MspInit+0x15c>)
 8001a42:	f003 f9f5 	bl	8004e30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2041      	movs	r0, #65	; 0x41
 8001a4c:	f002 fe2d 	bl	80046aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001a50:	2041      	movs	r0, #65	; 0x41
 8001a52:	f002 fe46 	bl	80046e2 <HAL_NVIC_EnableIRQ>
}
 8001a56:	bf00      	nop
 8001a58:	3730      	adds	r7, #48	; 0x30
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40006400 	.word	0x40006400
 8001a64:	20000274 	.word	0x20000274
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40020c00 	.word	0x40020c00
 8001a70:	40006800 	.word	0x40006800
 8001a74:	40020400 	.word	0x40020400

08001a78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_DMA_Init+0x3c>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a0b      	ldr	r2, [pc, #44]	; (8001ab4 <MX_DMA_Init+0x3c>)
 8001a88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_DMA_Init+0x3c>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	200c      	movs	r0, #12
 8001aa0:	f002 fe03 	bl	80046aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001aa4:	200c      	movs	r0, #12
 8001aa6:	f002 fe1c 	bl	80046e2 <HAL_NVIC_EnableIRQ>

}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800

08001ab8 <MX_GPIO_Init>:
     PB13   ------> SPI2_SCK
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08c      	sub	sp, #48	; 0x30
 8001abc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abe:	f107 031c 	add.w	r3, r7, #28
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
 8001ad2:	4b82      	ldr	r3, [pc, #520]	; (8001cdc <MX_GPIO_Init+0x224>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a81      	ldr	r2, [pc, #516]	; (8001cdc <MX_GPIO_Init+0x224>)
 8001ad8:	f043 0310 	orr.w	r3, r3, #16
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b7f      	ldr	r3, [pc, #508]	; (8001cdc <MX_GPIO_Init+0x224>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0310 	and.w	r3, r3, #16
 8001ae6:	61bb      	str	r3, [r7, #24]
 8001ae8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	4b7b      	ldr	r3, [pc, #492]	; (8001cdc <MX_GPIO_Init+0x224>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a7a      	ldr	r2, [pc, #488]	; (8001cdc <MX_GPIO_Init+0x224>)
 8001af4:	f043 0304 	orr.w	r3, r3, #4
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b78      	ldr	r3, [pc, #480]	; (8001cdc <MX_GPIO_Init+0x224>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	4b74      	ldr	r3, [pc, #464]	; (8001cdc <MX_GPIO_Init+0x224>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a73      	ldr	r2, [pc, #460]	; (8001cdc <MX_GPIO_Init+0x224>)
 8001b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b71      	ldr	r3, [pc, #452]	; (8001cdc <MX_GPIO_Init+0x224>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b6d      	ldr	r3, [pc, #436]	; (8001cdc <MX_GPIO_Init+0x224>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a6c      	ldr	r2, [pc, #432]	; (8001cdc <MX_GPIO_Init+0x224>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b6a      	ldr	r3, [pc, #424]	; (8001cdc <MX_GPIO_Init+0x224>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	4b66      	ldr	r3, [pc, #408]	; (8001cdc <MX_GPIO_Init+0x224>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a65      	ldr	r2, [pc, #404]	; (8001cdc <MX_GPIO_Init+0x224>)
 8001b48:	f043 0302 	orr.w	r3, r3, #2
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b63      	ldr	r3, [pc, #396]	; (8001cdc <MX_GPIO_Init+0x224>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	4b5f      	ldr	r3, [pc, #380]	; (8001cdc <MX_GPIO_Init+0x224>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a5e      	ldr	r2, [pc, #376]	; (8001cdc <MX_GPIO_Init+0x224>)
 8001b64:	f043 0308 	orr.w	r3, r3, #8
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b5c      	ldr	r3, [pc, #368]	; (8001cdc <MX_GPIO_Init+0x224>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001b76:	2200      	movs	r2, #0
 8001b78:	213f      	movs	r1, #63	; 0x3f
 8001b7a:	4859      	ldr	r0, [pc, #356]	; (8001ce0 <MX_GPIO_Init+0x228>)
 8001b7c:	f003 fb1c 	bl	80051b8 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2110      	movs	r1, #16
 8001b84:	4857      	ldr	r0, [pc, #348]	; (8001ce4 <MX_GPIO_Init+0x22c>)
 8001b86:	f003 fb17 	bl	80051b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	219b      	movs	r1, #155	; 0x9b
 8001b8e:	4856      	ldr	r0, [pc, #344]	; (8001ce8 <MX_GPIO_Init+0x230>)
 8001b90:	f003 fb12 	bl	80051b8 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8001b94:	2200      	movs	r2, #0
 8001b96:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8001b9a:	4854      	ldr	r0, [pc, #336]	; (8001cec <MX_GPIO_Init+0x234>)
 8001b9c:	f003 fb0c 	bl	80051b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f64e 4108 	movw	r1, #60424	; 0xec08
 8001ba6:	4852      	ldr	r0, [pc, #328]	; (8001cf0 <MX_GPIO_Init+0x238>)
 8001ba8:	f003 fb06 	bl	80051b8 <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8001bac:	2307      	movs	r3, #7
 8001bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	484b      	ldr	r0, [pc, #300]	; (8001cec <MX_GPIO_Init+0x234>)
 8001bc0:	f003 f936 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 8001bc4:	f248 1378 	movw	r3, #33144	; 0x8178
 8001bc8:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bd2:	f107 031c 	add.w	r3, r7, #28
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4844      	ldr	r0, [pc, #272]	; (8001cec <MX_GPIO_Init+0x234>)
 8001bda:	f003 f929 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001bde:	233f      	movs	r3, #63	; 0x3f
 8001be0:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be2:	2301      	movs	r3, #1
 8001be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001be6:	2301      	movs	r3, #1
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bee:	f107 031c 	add.w	r3, r7, #28
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	483a      	ldr	r0, [pc, #232]	; (8001ce0 <MX_GPIO_Init+0x228>)
 8001bf6:	f003 f91b 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8001bfa:	2310      	movs	r3, #16
 8001bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c02:	2301      	movs	r3, #1
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4834      	ldr	r0, [pc, #208]	; (8001ce4 <MX_GPIO_Init+0x22c>)
 8001c12:	f003 f90d 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c1a:	4b36      	ldr	r3, [pc, #216]	; (8001cf4 <MX_GPIO_Init+0x23c>)
 8001c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	4619      	mov	r1, r3
 8001c28:	482e      	ldr	r0, [pc, #184]	; (8001ce4 <MX_GPIO_Init+0x22c>)
 8001c2a:	f003 f901 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001c2e:	239b      	movs	r3, #155	; 0x9b
 8001c30:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c32:	2301      	movs	r3, #1
 8001c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c36:	2301      	movs	r3, #1
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3e:	f107 031c 	add.w	r3, r7, #28
 8001c42:	4619      	mov	r1, r3
 8001c44:	4828      	ldr	r0, [pc, #160]	; (8001ce8 <MX_GPIO_Init+0x230>)
 8001c46:	f003 f8f3 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 8001c4a:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8001c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c50:	2301      	movs	r3, #1
 8001c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c54:	2301      	movs	r3, #1
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c5c:	f107 031c 	add.w	r3, r7, #28
 8001c60:	4619      	mov	r1, r3
 8001c62:	4822      	ldr	r0, [pc, #136]	; (8001cec <MX_GPIO_Init+0x234>)
 8001c64:	f003 f8e4 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin|CUI_SPI2_MOSI_Pin;
 8001c68:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c76:	2303      	movs	r3, #3
 8001c78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c7a:	2305      	movs	r3, #5
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7e:	f107 031c 	add.w	r3, r7, #28
 8001c82:	4619      	mov	r1, r3
 8001c84:	4818      	ldr	r0, [pc, #96]	; (8001ce8 <MX_GPIO_Init+0x230>)
 8001c86:	f003 f8d3 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001c8a:	f64e 4308 	movw	r3, #60424	; 0xec08
 8001c8e:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c94:	2301      	movs	r3, #1
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c9c:	f107 031c 	add.w	r3, r7, #28
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4813      	ldr	r0, [pc, #76]	; (8001cf0 <MX_GPIO_Init+0x238>)
 8001ca4:	f003 f8c4 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 8001ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 8001cb6:	f107 031c 	add.w	r3, r7, #28
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480c      	ldr	r0, [pc, #48]	; (8001cf0 <MX_GPIO_Init+0x238>)
 8001cbe:	f003 f8b7 	bl	8004e30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	2017      	movs	r0, #23
 8001cc8:	f002 fcef 	bl	80046aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ccc:	2017      	movs	r0, #23
 8001cce:	f002 fd08 	bl	80046e2 <HAL_NVIC_EnableIRQ>

}
 8001cd2:	bf00      	nop
 8001cd4:	3730      	adds	r7, #48	; 0x30
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40020800 	.word	0x40020800
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	40020400 	.word	0x40020400
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40020c00 	.word	0x40020c00
 8001cf4:	10210000 	.word	0x10210000

08001cf8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001cfe:	4a1c      	ldr	r2, [pc, #112]	; (8001d70 <MX_I2C1_Init+0x78>)
 8001d00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d02:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d04:	4a1b      	ldr	r2, [pc, #108]	; (8001d74 <MX_I2C1_Init+0x7c>)
 8001d06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d0e:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d1c:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d22:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d28:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d2e:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d34:	480d      	ldr	r0, [pc, #52]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d36:	f003 fa71 	bl	800521c <HAL_I2C_Init>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d40:	f000 fb3a 	bl	80023b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d44:	2100      	movs	r1, #0
 8001d46:	4809      	ldr	r0, [pc, #36]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d48:	f004 fa27 	bl	800619a <HAL_I2CEx_ConfigAnalogFilter>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001d52:	f000 fb31 	bl	80023b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d56:	2100      	movs	r1, #0
 8001d58:	4804      	ldr	r0, [pc, #16]	; (8001d6c <MX_I2C1_Init+0x74>)
 8001d5a:	f004 fa5a 	bl	8006212 <HAL_I2CEx_ConfigDigitalFilter>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001d64:	f000 fb28 	bl	80023b8 <Error_Handler>
  }

}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000368 	.word	0x20000368
 8001d70:	40005400 	.word	0x40005400
 8001d74:	00061a80 	.word	0x00061a80

08001d78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a19      	ldr	r2, [pc, #100]	; (8001dfc <HAL_I2C_MspInit+0x84>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d12c      	bne.n	8001df4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <HAL_I2C_MspInit+0x88>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a17      	ldr	r2, [pc, #92]	; (8001e00 <HAL_I2C_MspInit+0x88>)
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <HAL_I2C_MspInit+0x88>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8001db6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dbc:	2312      	movs	r3, #18
 8001dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dc8:	2304      	movs	r3, #4
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	480c      	ldr	r0, [pc, #48]	; (8001e04 <HAL_I2C_MspInit+0x8c>)
 8001dd4:	f003 f82c 	bl	8004e30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <HAL_I2C_MspInit+0x88>)
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	4a07      	ldr	r2, [pc, #28]	; (8001e00 <HAL_I2C_MspInit+0x88>)
 8001de2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001de6:	6413      	str	r3, [r2, #64]	; 0x40
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_I2C_MspInit+0x88>)
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001df4:	bf00      	nop
 8001df6:	3728      	adds	r7, #40	; 0x28
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40005400 	.word	0x40005400
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40020400 	.word	0x40020400

08001e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e0e:	f001 ffa7 	bl	8003d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e12:	f000 f98d 	bl	8002130 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 8001e16:	f004 fec1 	bl	8006b9c <HAL_RCC_GetHCLKFreq>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4aa3      	ldr	r2, [pc, #652]	; (80020ac <main+0x2a4>)
 8001e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e22:	099b      	lsrs	r3, r3, #6
 8001e24:	4618      	mov	r0, r3
 8001e26:	f002 fc6a 	bl	80046fe <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e2a:	2004      	movs	r0, #4
 8001e2c:	f002 fc74 	bl	8004718 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001e30:	2200      	movs	r2, #0
 8001e32:	2100      	movs	r1, #0
 8001e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e38:	f002 fc37 	bl	80046aa <HAL_NVIC_SetPriority>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e3c:	f7ff fe3c 	bl	8001ab8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e40:	f7ff fe1a 	bl	8001a78 <MX_DMA_Init>
  MX_I2C1_Init();
 8001e44:	f7ff ff58 	bl	8001cf8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001e48:	f000 ff6a 	bl	8002d20 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001e4c:	f001 f808 	bl	8002e60 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001e50:	f001 fab2 	bl	80033b8 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001e54:	f001 f87e 	bl	8002f54 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001e58:	f001 f8fe 	bl	8003058 <MX_TIM8_Init>
  MX_CAN1_Init();
 8001e5c:	f7ff fcf0 	bl	8001840 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001e60:	f7ff fd24 	bl	80018ac <MX_CAN2_Init>
  MX_SPI1_Init();
 8001e64:	f000 fe4a 	bl	8002afc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //Initialize hardware communication
  joystick_Init();
 8001e68:	f001 fb4a 	bl	8003500 <joystick_Init>
  ADC_Init();
 8001e6c:	f7ff faca 	bl	8001404 <ADC_Init>
  ADC_DataRequest();
 8001e70:	f7ff fb0a 	bl	8001488 <ADC_DataRequest>
//  encoder_Init();
//  DWT_Init();
  while(MPU6050_Init(&hi2c1)==1);
 8001e74:	bf00      	nop
 8001e76:	488e      	ldr	r0, [pc, #568]	; (80020b0 <main+0x2a8>)
 8001e78:	f000 faa5 	bl	80023c6 <MPU6050_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d0f9      	beq.n	8001e76 <main+0x6e>
  HAL_Delay(100);
 8001e82:	2064      	movs	r0, #100	; 0x64
 8001e84:	f001 ffde 	bl	8003e44 <HAL_Delay>

  //Start base wheel pwm pin
  wheelSpeedControl_Init(&baseWheelSpeed, base_linSpeedLevel[base_speedLevel], base_angSpeedLevel[base_speedLevel]);
 8001e88:	4b8a      	ldr	r3, [pc, #552]	; (80020b4 <main+0x2ac>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a8a      	ldr	r2, [pc, #552]	; (80020b8 <main+0x2b0>)
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	edd3 7a00 	vldr	s15, [r3]
 8001e96:	4b87      	ldr	r3, [pc, #540]	; (80020b4 <main+0x2ac>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a88      	ldr	r2, [pc, #544]	; (80020bc <main+0x2b4>)
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	ed93 7a00 	vldr	s14, [r3]
 8001ea4:	eef0 0a47 	vmov.f32	s1, s14
 8001ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8001eac:	4884      	ldr	r0, [pc, #528]	; (80020c0 <main+0x2b8>)
 8001eae:	f001 fccd 	bl	800384c <wheelSpeedControl_Init>
  HAL_TIM_Base_Start(&MOTOR_TIM);
 8001eb2:	4884      	ldr	r0, [pc, #528]	; (80020c4 <main+0x2bc>)
 8001eb4:	f005 faf1 	bl	800749a <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_1);
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4882      	ldr	r0, [pc, #520]	; (80020c4 <main+0x2bc>)
 8001ebc:	f005 fb46 	bl	800754c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_2);
 8001ec0:	2104      	movs	r1, #4
 8001ec2:	4880      	ldr	r0, [pc, #512]	; (80020c4 <main+0x2bc>)
 8001ec4:	f005 fb42 	bl	800754c <HAL_TIM_PWM_Start>
  MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = 1500;
 8001ec8:	4b7e      	ldr	r3, [pc, #504]	; (80020c4 <main+0x2bc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001ed0:	635a      	str	r2, [r3, #52]	; 0x34
  MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = 1500;
 8001ed2:	4b7c      	ldr	r3, [pc, #496]	; (80020c4 <main+0x2bc>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001eda:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(100);
 8001edc:	2064      	movs	r0, #100	; 0x64
 8001ede:	f001 ffb1 	bl	8003e44 <HAL_Delay>

  //Initialize rear and back motor
  bd25l_Init(&rearMotor);
 8001ee2:	4879      	ldr	r0, [pc, #484]	; (80020c8 <main+0x2c0>)
 8001ee4:	f7ff fafc 	bl	80014e0 <bd25l_Init>
  bd25l_Init(&backMotor);
 8001ee8:	4878      	ldr	r0, [pc, #480]	; (80020cc <main+0x2c4>)
 8001eea:	f7ff faf9 	bl	80014e0 <bd25l_Init>
  runMotor(&rearMotor, 0);
 8001eee:	ed9f 0a78 	vldr	s0, [pc, #480]	; 80020d0 <main+0x2c8>
 8001ef2:	4875      	ldr	r0, [pc, #468]	; (80020c8 <main+0x2c0>)
 8001ef4:	f7ff fbf4 	bl	80016e0 <runMotor>
  runMotor(&backMotor, 0);
 8001ef8:	ed9f 0a75 	vldr	s0, [pc, #468]	; 80020d0 <main+0x2c8>
 8001efc:	4873      	ldr	r0, [pc, #460]	; (80020cc <main+0x2c4>)
 8001efe:	f7ff fbef 	bl	80016e0 <runMotor>
  emBrakeMotor(1);
 8001f02:	2001      	movs	r0, #1
 8001f04:	f7ff fb0e 	bl	8001524 <emBrakeMotor>

  //Initialize hub motor provdided joystick control
  hubMotor_Init();
 8001f08:	f7ff f9b4 	bl	8001274 <hubMotor_Init>
  wheelSpeedControl_Init(&climbWheelSpeed, climb_linSpeedLevel[climb_speedLevel], climb_angSpeedLevel[climb_speedLevel]);
 8001f0c:	4b71      	ldr	r3, [pc, #452]	; (80020d4 <main+0x2cc>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a71      	ldr	r2, [pc, #452]	; (80020d8 <main+0x2d0>)
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	edd3 7a00 	vldr	s15, [r3]
 8001f1a:	4b6e      	ldr	r3, [pc, #440]	; (80020d4 <main+0x2cc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a6f      	ldr	r2, [pc, #444]	; (80020dc <main+0x2d4>)
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	ed93 7a00 	vldr	s14, [r3]
 8001f28:	eef0 0a47 	vmov.f32	s1, s14
 8001f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f30:	486b      	ldr	r0, [pc, #428]	; (80020e0 <main+0x2d8>)
 8001f32:	f001 fc8b 	bl	800384c <wheelSpeedControl_Init>

  //Initialize balance controller
  // Prepare PID controller for operation
  balance_pid = pid_create(&balance_ctrl, &climbUp_input, &climbUp_output, &climbUp_setpoint, climbUp_kp, climbUp_ki, climbUp_kd);
 8001f36:	4b6b      	ldr	r3, [pc, #428]	; (80020e4 <main+0x2dc>)
 8001f38:	edd3 7a00 	vldr	s15, [r3]
 8001f3c:	4b6a      	ldr	r3, [pc, #424]	; (80020e8 <main+0x2e0>)
 8001f3e:	ed93 7a00 	vldr	s14, [r3]
 8001f42:	4b6a      	ldr	r3, [pc, #424]	; (80020ec <main+0x2e4>)
 8001f44:	edd3 6a00 	vldr	s13, [r3]
 8001f48:	eeb0 1a66 	vmov.f32	s2, s13
 8001f4c:	eef0 0a47 	vmov.f32	s1, s14
 8001f50:	eeb0 0a67 	vmov.f32	s0, s15
 8001f54:	4b66      	ldr	r3, [pc, #408]	; (80020f0 <main+0x2e8>)
 8001f56:	4a67      	ldr	r2, [pc, #412]	; (80020f4 <main+0x2ec>)
 8001f58:	4967      	ldr	r1, [pc, #412]	; (80020f8 <main+0x2f0>)
 8001f5a:	4868      	ldr	r0, [pc, #416]	; (80020fc <main+0x2f4>)
 8001f5c:	f7fe ffc8 	bl	8000ef0 <pid_create>
 8001f60:	4603      	mov	r3, r0
 8001f62:	4a67      	ldr	r2, [pc, #412]	; (8002100 <main+0x2f8>)
 8001f64:	6013      	str	r3, [r2, #0]
  // Set controler output limits from 0 to 200
  pid_limits(balance_pid, -30, 30);
 8001f66:	4b66      	ldr	r3, [pc, #408]	; (8002100 <main+0x2f8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8001f6e:	eebb 0a0e 	vmov.f32	s0, #190	; 0xc1f00000 -30.0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff f8a0 	bl	80010b8 <pid_limits>
  //Sample time is 1ms
  pid_sample(balance_pid, 1);
 8001f78:	4b61      	ldr	r3, [pc, #388]	; (8002100 <main+0x2f8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff f866 	bl	8001050 <pid_sample>
  // Allow PID to compute and change output
  pid_auto(balance_pid);
 8001f84:	4b5e      	ldr	r3, [pc, #376]	; (8002100 <main+0x2f8>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff f8fa 	bl	8001182 <pid_auto>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t prev_time = HAL_GetTick();
 8001f8e:	f001 ff4d 	bl	8003e2c <HAL_GetTick>
 8001f92:	6078      	str	r0, [r7, #4]
//      runMotor(&backMotor, 100, 1);

//      runMotor(&backMotor, speed++, 1);

    //Loop should execute once every 1 tick
    if(HAL_GetTick() - prev_time >= 1)
 8001f94:	f001 ff4a 	bl	8003e2c <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d0f9      	beq.n	8001f94 <main+0x18c>
    {
	ADC_DataRequest();
 8001fa0:	f7ff fa72 	bl	8001488 <ADC_DataRequest>

	//Get kamlan filtered angle from MPU6050
	MPU6050_Read_All(&hi2c1, &MPU6050);
 8001fa4:	4957      	ldr	r1, [pc, #348]	; (8002104 <main+0x2fc>)
 8001fa6:	4842      	ldr	r0, [pc, #264]	; (80020b0 <main+0x2a8>)
 8001fa8:	f000 fa66 	bl	8002478 <MPU6050_Read_All>


	GPIO_Digital_Filtered_Input(&button1, 30);
 8001fac:	211e      	movs	r1, #30
 8001fae:	4856      	ldr	r0, [pc, #344]	; (8002108 <main+0x300>)
 8001fb0:	f7ff fc0d 	bl	80017ce <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&button2, 30);
 8001fb4:	211e      	movs	r1, #30
 8001fb6:	4855      	ldr	r0, [pc, #340]	; (800210c <main+0x304>)
 8001fb8:	f7ff fc09 	bl	80017ce <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&button3, 30);
 8001fbc:	211e      	movs	r1, #30
 8001fbe:	4854      	ldr	r0, [pc, #336]	; (8002110 <main+0x308>)
 8001fc0:	f7ff fc05 	bl	80017ce <GPIO_Digital_Filtered_Input>

	GPIO_Digital_Filtered_Input(&rearLS1, 5);
 8001fc4:	2105      	movs	r1, #5
 8001fc6:	4853      	ldr	r0, [pc, #332]	; (8002114 <main+0x30c>)
 8001fc8:	f7ff fc01 	bl	80017ce <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&rearLS2, 5);
 8001fcc:	2105      	movs	r1, #5
 8001fce:	4852      	ldr	r0, [pc, #328]	; (8002118 <main+0x310>)
 8001fd0:	f7ff fbfd 	bl	80017ce <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&backLS1, 5);
 8001fd4:	2105      	movs	r1, #5
 8001fd6:	4851      	ldr	r0, [pc, #324]	; (800211c <main+0x314>)
 8001fd8:	f7ff fbf9 	bl	80017ce <GPIO_Digital_Filtered_Input>
	GPIO_Digital_Filtered_Input(&backLS2, 5);
 8001fdc:	2105      	movs	r1, #5
 8001fde:	4850      	ldr	r0, [pc, #320]	; (8002120 <main+0x318>)
 8001fe0:	f7ff fbf5 	bl	80017ce <GPIO_Digital_Filtered_Input>

//---------------------------------------------------------------------------------------------------
//3-button control climbing mechanism
//---------------------------------------------------------------------------------------------------
	if (button1.state == GPIO_PIN_SET && button3.state == GPIO_PIN_RESET)
 8001fe4:	4b48      	ldr	r3, [pc, #288]	; (8002108 <main+0x300>)
 8001fe6:	7a1b      	ldrb	r3, [r3, #8]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d107      	bne.n	8001ffc <main+0x1f4>
 8001fec:	4b48      	ldr	r3, [pc, #288]	; (8002110 <main+0x308>)
 8001fee:	7a1b      	ldrb	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d103      	bne.n	8001ffc <main+0x1f4>
	    speed[FRONT_INDEX] = 30;
 8001ff4:	4b4b      	ldr	r3, [pc, #300]	; (8002124 <main+0x31c>)
 8001ff6:	4a4c      	ldr	r2, [pc, #304]	; (8002128 <main+0x320>)
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	e013      	b.n	8002024 <main+0x21c>
	else if(button1.state == GPIO_PIN_SET && button3.state == GPIO_PIN_SET)
 8001ffc:	4b42      	ldr	r3, [pc, #264]	; (8002108 <main+0x300>)
 8001ffe:	7a1b      	ldrb	r3, [r3, #8]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d107      	bne.n	8002014 <main+0x20c>
 8002004:	4b42      	ldr	r3, [pc, #264]	; (8002110 <main+0x308>)
 8002006:	7a1b      	ldrb	r3, [r3, #8]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d103      	bne.n	8002014 <main+0x20c>
	    speed[FRONT_INDEX] = -30;
 800200c:	4b45      	ldr	r3, [pc, #276]	; (8002124 <main+0x31c>)
 800200e:	4a47      	ldr	r2, [pc, #284]	; (800212c <main+0x324>)
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	e007      	b.n	8002024 <main+0x21c>
	else if (button1.state == GPIO_PIN_RESET)
 8002014:	4b3c      	ldr	r3, [pc, #240]	; (8002108 <main+0x300>)
 8002016:	7a1b      	ldrb	r3, [r3, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d103      	bne.n	8002024 <main+0x21c>
	    speed[FRONT_INDEX] = 0;
 800201c:	4b41      	ldr	r3, [pc, #260]	; (8002124 <main+0x31c>)
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	601a      	str	r2, [r3, #0]

	if(button2.state == GPIO_PIN_SET && button3.state == GPIO_PIN_RESET)
 8002024:	4b39      	ldr	r3, [pc, #228]	; (800210c <main+0x304>)
 8002026:	7a1b      	ldrb	r3, [r3, #8]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d107      	bne.n	800203c <main+0x234>
 800202c:	4b38      	ldr	r3, [pc, #224]	; (8002110 <main+0x308>)
 800202e:	7a1b      	ldrb	r3, [r3, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d103      	bne.n	800203c <main+0x234>
	    speed[BACK_INDEX] = 30;
 8002034:	4b3b      	ldr	r3, [pc, #236]	; (8002124 <main+0x31c>)
 8002036:	4a3c      	ldr	r2, [pc, #240]	; (8002128 <main+0x320>)
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	e013      	b.n	8002064 <main+0x25c>
	else if(button2.state == GPIO_PIN_SET && button3.state == GPIO_PIN_SET)
 800203c:	4b33      	ldr	r3, [pc, #204]	; (800210c <main+0x304>)
 800203e:	7a1b      	ldrb	r3, [r3, #8]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d107      	bne.n	8002054 <main+0x24c>
 8002044:	4b32      	ldr	r3, [pc, #200]	; (8002110 <main+0x308>)
 8002046:	7a1b      	ldrb	r3, [r3, #8]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d103      	bne.n	8002054 <main+0x24c>
	    speed[BACK_INDEX] = -30;
 800204c:	4b35      	ldr	r3, [pc, #212]	; (8002124 <main+0x31c>)
 800204e:	4a37      	ldr	r2, [pc, #220]	; (800212c <main+0x324>)
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	e007      	b.n	8002064 <main+0x25c>
	else if (button2.state == GPIO_PIN_RESET)
 8002054:	4b2d      	ldr	r3, [pc, #180]	; (800210c <main+0x304>)
 8002056:	7a1b      	ldrb	r3, [r3, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d103      	bne.n	8002064 <main+0x25c>
	    speed[BACK_INDEX] = 0;
 800205c:	4b31      	ldr	r3, [pc, #196]	; (8002124 <main+0x31c>)
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	605a      	str	r2, [r3, #4]
//
	runMotor(&rearMotor, speed[FRONT_INDEX]);
 8002064:	4b2f      	ldr	r3, [pc, #188]	; (8002124 <main+0x31c>)
 8002066:	edd3 7a00 	vldr	s15, [r3]
 800206a:	eeb0 0a67 	vmov.f32	s0, s15
 800206e:	4816      	ldr	r0, [pc, #88]	; (80020c8 <main+0x2c0>)
 8002070:	f7ff fb36 	bl	80016e0 <runMotor>
	runMotor(&backMotor, speed[BACK_INDEX]);
 8002074:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <main+0x31c>)
 8002076:	edd3 7a01 	vldr	s15, [r3, #4]
 800207a:	eeb0 0a67 	vmov.f32	s0, s15
 800207e:	4813      	ldr	r0, [pc, #76]	; (80020cc <main+0x2c4>)
 8002080:	f7ff fb2e 	bl	80016e0 <runMotor>
//	else
//		emBrakeMotor(1);
//	runMotor(&rearMotor, speed[FRONT_INDEX]);
//	runMotor(&backMotor, speed[BACK_INDEX]);

	wheel_Control(&climbWheelSpeed);
 8002084:	4816      	ldr	r0, [pc, #88]	; (80020e0 <main+0x2d8>)
 8002086:	f001 fc0b 	bl	80038a0 <wheel_Control>
	send_HubMotor(climbWheelSpeed.cur_l, climbWheelSpeed.cur_r);
 800208a:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <main+0x2d8>)
 800208c:	edd3 7a00 	vldr	s15, [r3]
 8002090:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <main+0x2d8>)
 8002092:	ed93 7a01 	vldr	s14, [r3, #4]
 8002096:	eef0 0a47 	vmov.f32	s1, s14
 800209a:	eeb0 0a67 	vmov.f32	s0, s15
 800209e:	f7ff f901 	bl	80012a4 <send_HubMotor>
//
//	//Climbing phase start



	prev_time = HAL_GetTick();
 80020a2:	f001 fec3 	bl	8003e2c <HAL_GetTick>
 80020a6:	6078      	str	r0, [r7, #4]
    if(HAL_GetTick() - prev_time >= 1)
 80020a8:	e774      	b.n	8001f94 <main+0x18c>
 80020aa:	bf00      	nop
 80020ac:	10624dd3 	.word	0x10624dd3
 80020b0:	20000368 	.word	0x20000368
 80020b4:	20000098 	.word	0x20000098
 80020b8:	0800b5f8 	.word	0x0800b5f8
 80020bc:	0800b604 	.word	0x0800b604
 80020c0:	20000068 	.word	0x20000068
 80020c4:	200004dc 	.word	0x200004dc
 80020c8:	20000000 	.word	0x20000000
 80020cc:	20000034 	.word	0x20000034
 80020d0:	00000000 	.word	0x00000000
 80020d4:	20000284 	.word	0x20000284
 80020d8:	0800b610 	.word	0x0800b610
 80020dc:	0800b61c 	.word	0x0800b61c
 80020e0:	200000a0 	.word	0x200000a0
 80020e4:	20000140 	.word	0x20000140
 80020e8:	20000144 	.word	0x20000144
 80020ec:	20000148 	.word	0x20000148
 80020f0:	20000290 	.word	0x20000290
 80020f4:	2000028c 	.word	0x2000028c
 80020f8:	20000288 	.word	0x20000288
 80020fc:	20000448 	.word	0x20000448
 8002100:	20000430 	.word	0x20000430
 8002104:	200003d0 	.word	0x200003d0
 8002108:	20000110 	.word	0x20000110
 800210c:	20000120 	.word	0x20000120
 8002110:	20000130 	.word	0x20000130
 8002114:	200000d0 	.word	0x200000d0
 8002118:	200000e0 	.word	0x200000e0
 800211c:	200000f0 	.word	0x200000f0
 8002120:	20000100 	.word	0x20000100
 8002124:	2000027c 	.word	0x2000027c
 8002128:	41f00000 	.word	0x41f00000
 800212c:	c1f00000 	.word	0xc1f00000

08002130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b094      	sub	sp, #80	; 0x50
 8002134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002136:	f107 0320 	add.w	r3, r7, #32
 800213a:	2230      	movs	r2, #48	; 0x30
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f006 fff0 	bl	8009124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002144:	f107 030c 	add.w	r3, r7, #12
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	605a      	str	r2, [r3, #4]
 800214e:	609a      	str	r2, [r3, #8]
 8002150:	60da      	str	r2, [r3, #12]
 8002152:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	4b2b      	ldr	r3, [pc, #172]	; (8002208 <SystemClock_Config+0xd8>)
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	4a2a      	ldr	r2, [pc, #168]	; (8002208 <SystemClock_Config+0xd8>)
 800215e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002162:	6413      	str	r3, [r2, #64]	; 0x40
 8002164:	4b28      	ldr	r3, [pc, #160]	; (8002208 <SystemClock_Config+0xd8>)
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002170:	2300      	movs	r3, #0
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	4b25      	ldr	r3, [pc, #148]	; (800220c <SystemClock_Config+0xdc>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a24      	ldr	r2, [pc, #144]	; (800220c <SystemClock_Config+0xdc>)
 800217a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	4b22      	ldr	r3, [pc, #136]	; (800220c <SystemClock_Config+0xdc>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800218c:	2301      	movs	r3, #1
 800218e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002190:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002196:	2302      	movs	r3, #2
 8002198:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800219a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800219e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021a0:	2308      	movs	r3, #8
 80021a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80021a4:	23b4      	movs	r3, #180	; 0xb4
 80021a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021a8:	2302      	movs	r3, #2
 80021aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021ac:	2304      	movs	r3, #4
 80021ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021b0:	f107 0320 	add.w	r3, r7, #32
 80021b4:	4618      	mov	r0, r3
 80021b6:	f004 f8bb 	bl	8006330 <HAL_RCC_OscConfig>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021c0:	f000 f8fa 	bl	80023b8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80021c4:	f004 f864 	bl	8006290 <HAL_PWREx_EnableOverDrive>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80021ce:	f000 f8f3 	bl	80023b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021d2:	230f      	movs	r3, #15
 80021d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021d6:	2302      	movs	r3, #2
 80021d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021ea:	f107 030c 	add.w	r3, r7, #12
 80021ee:	2105      	movs	r1, #5
 80021f0:	4618      	mov	r0, r3
 80021f2:	f004 fb0d 	bl	8006810 <HAL_RCC_ClockConfig>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80021fc:	f000 f8dc 	bl	80023b8 <Error_Handler>
  }
}
 8002200:	bf00      	nop
 8002202:	3750      	adds	r7, #80	; 0x50
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40023800 	.word	0x40023800
 800220c:	40007000 	.word	0x40007000

08002210 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin){
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	2b80      	cmp	r3, #128	; 0x80
 800221e:	d11c      	bne.n	800225a <HAL_GPIO_EXTI_Callback+0x4a>
    case AD_BUSY_Pin:{
      if (HAL_GetTick()-prev_adc_time > 1){
 8002220:	f001 fe04 	bl	8003e2c <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	4b10      	ldr	r3, [pc, #64]	; (8002268 <HAL_GPIO_EXTI_Callback+0x58>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b01      	cmp	r3, #1
 800222e:	d916      	bls.n	800225e <HAL_GPIO_EXTI_Callback+0x4e>
	  ADC_Read(&adc_rawData[0]);
 8002230:	480e      	ldr	r0, [pc, #56]	; (800226c <HAL_GPIO_EXTI_Callback+0x5c>)
 8002232:	f7ff f939 	bl	80014a8 <ADC_Read>
	  tempJoyRawDataX = adc_rawData[0];
 8002236:	4b0d      	ldr	r3, [pc, #52]	; (800226c <HAL_GPIO_EXTI_Callback+0x5c>)
 8002238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800223c:	461a      	mov	r2, r3
 800223e:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <HAL_GPIO_EXTI_Callback+0x60>)
 8002240:	601a      	str	r2, [r3, #0]
	  tempJoyRawDataY = adc_rawData[1];
 8002242:	4b0a      	ldr	r3, [pc, #40]	; (800226c <HAL_GPIO_EXTI_Callback+0x5c>)
 8002244:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002248:	461a      	mov	r2, r3
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <HAL_GPIO_EXTI_Callback+0x64>)
 800224c:	601a      	str	r2, [r3, #0]
	  prev_adc_time = HAL_GetTick();
 800224e:	f001 fded 	bl	8003e2c <HAL_GetTick>
 8002252:	4603      	mov	r3, r0
 8002254:	4a04      	ldr	r2, [pc, #16]	; (8002268 <HAL_GPIO_EXTI_Callback+0x58>)
 8002256:	6013      	str	r3, [r2, #0]
      }
    }

      break;
 8002258:	e001      	b.n	800225e <HAL_GPIO_EXTI_Callback+0x4e>
    default:
      break;
 800225a:	bf00      	nop
 800225c:	e000      	b.n	8002260 <HAL_GPIO_EXTI_Callback+0x50>
      break;
 800225e:	bf00      	nop
  }
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000278 	.word	0x20000278
 800226c:	20000438 	.word	0x20000438
 8002270:	20000494 	.word	0x20000494
 8002274:	200003c0 	.word	0x200003c0

08002278 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3){
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a47      	ldr	r2, [pc, #284]	; (80023a4 <HAL_UART_RxCpltCallback+0x12c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	f040 8085 	bne.w	8002396 <HAL_UART_RxCpltCallback+0x11e>
		//Checksum, make sure that response is correct
		  uint16_t sum = (uint16_t)receive_buf[0] + (uint16_t)receive_buf[1] + (uint16_t)receive_buf[2] + (uint16_t)receive_buf[3]
 800228c:	4b46      	ldr	r3, [pc, #280]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	b29a      	uxth	r2, r3
 8002292:	4b45      	ldr	r3, [pc, #276]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 8002294:	785b      	ldrb	r3, [r3, #1]
 8002296:	b29b      	uxth	r3, r3
 8002298:	4413      	add	r3, r2
 800229a:	b29a      	uxth	r2, r3
 800229c:	4b42      	ldr	r3, [pc, #264]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 800229e:	789b      	ldrb	r3, [r3, #2]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	4b40      	ldr	r3, [pc, #256]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 80022a8:	78db      	ldrb	r3, [r3, #3]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	4413      	add	r3, r2
 80022ae:	b29a      	uxth	r2, r3
		  		+ (uint16_t)receive_buf[4] + (uint16_t)receive_buf[5] + (uint16_t)receive_buf[6]
 80022b0:	4b3d      	ldr	r3, [pc, #244]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 80022b2:	791b      	ldrb	r3, [r3, #4]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	4b3b      	ldr	r3, [pc, #236]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 80022bc:	795b      	ldrb	r3, [r3, #5]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	4413      	add	r3, r2
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	4b38      	ldr	r3, [pc, #224]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 80022c6:	799b      	ldrb	r3, [r3, #6]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	4413      	add	r3, r2
 80022cc:	b29a      	uxth	r2, r3
		  		+ (uint16_t)receive_buf[7] + (uint16_t)receive_buf[8] + (uint16_t)receive_buf[9]
 80022ce:	4b36      	ldr	r3, [pc, #216]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 80022d0:	79db      	ldrb	r3, [r3, #7]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	4413      	add	r3, r2
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	4b33      	ldr	r3, [pc, #204]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 80022da:	7a1b      	ldrb	r3, [r3, #8]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	4413      	add	r3, r2
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	4b31      	ldr	r3, [pc, #196]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 80022e4:	7a5b      	ldrb	r3, [r3, #9]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	b29a      	uxth	r2, r3
		  		+ (uint16_t)receive_buf[10] + (uint16_t)receive_buf[11] + (uint16_t)receive_buf[12]
 80022ec:	4b2e      	ldr	r3, [pc, #184]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 80022ee:	7a9b      	ldrb	r3, [r3, #10]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 80022f8:	7adb      	ldrb	r3, [r3, #11]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	b29a      	uxth	r2, r3
 8002300:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 8002302:	7b1b      	ldrb	r3, [r3, #12]
 8002304:	b29b      	uxth	r3, r3
 8002306:	4413      	add	r3, r2
 8002308:	b29a      	uxth	r2, r3
		  		+ (uint16_t)receive_buf[13];
 800230a:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 800230c:	7b5b      	ldrb	r3, [r3, #13]
 800230e:	b29b      	uxth	r3, r3
		  uint16_t sum = (uint16_t)receive_buf[0] + (uint16_t)receive_buf[1] + (uint16_t)receive_buf[2] + (uint16_t)receive_buf[3]
 8002310:	4413      	add	r3, r2
 8002312:	81fb      	strh	r3, [r7, #14]
		  if ((uint8_t)sum == receive_buf[14]){
 8002314:	89fb      	ldrh	r3, [r7, #14]
 8002316:	b2da      	uxtb	r2, r3
 8002318:	4b23      	ldr	r3, [pc, #140]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 800231a:	7b9b      	ldrb	r3, [r3, #14]
 800231c:	429a      	cmp	r2, r3
 800231e:	d13a      	bne.n	8002396 <HAL_UART_RxCpltCallback+0x11e>
		//      && receive_buf[4] == 0x00
			  //Encoder Feedback
		      if (receive_buf[0] == 0xAA && receive_buf[1] == 0xA4 && receive_buf[3] == 0x00 ){
 8002320:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2baa      	cmp	r3, #170	; 0xaa
 8002326:	d136      	bne.n	8002396 <HAL_UART_RxCpltCallback+0x11e>
 8002328:	4b1f      	ldr	r3, [pc, #124]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 800232a:	785b      	ldrb	r3, [r3, #1]
 800232c:	2ba4      	cmp	r3, #164	; 0xa4
 800232e:	d132      	bne.n	8002396 <HAL_UART_RxCpltCallback+0x11e>
 8002330:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 8002332:	78db      	ldrb	r3, [r3, #3]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d12e      	bne.n	8002396 <HAL_UART_RxCpltCallback+0x11e>
		    	  hub_encoder_feedback.encoder_1 = 	(receive_buf[9] << 24) + (receive_buf[8] << 16) +
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 800233a:	7a5b      	ldrb	r3, [r3, #9]
 800233c:	061a      	lsls	r2, r3, #24
 800233e:	4b1a      	ldr	r3, [pc, #104]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 8002340:	7a1b      	ldrb	r3, [r3, #8]
 8002342:	041b      	lsls	r3, r3, #16
 8002344:	441a      	add	r2, r3
		    	  			      	  	  	  	  	  (receive_buf[7] << 8)+ (receive_buf[6] );
 8002346:	4b18      	ldr	r3, [pc, #96]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 8002348:	79db      	ldrb	r3, [r3, #7]
 800234a:	021b      	lsls	r3, r3, #8
		    	  hub_encoder_feedback.encoder_1 = 	(receive_buf[9] << 24) + (receive_buf[8] << 16) +
 800234c:	4413      	add	r3, r2
		    	  			      	  	  	  	  	  (receive_buf[7] << 8)+ (receive_buf[6] );
 800234e:	4a16      	ldr	r2, [pc, #88]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 8002350:	7992      	ldrb	r2, [r2, #6]
 8002352:	4413      	add	r3, r2
		    	  hub_encoder_feedback.encoder_1 = 	(receive_buf[9] << 24) + (receive_buf[8] << 16) +
 8002354:	4a15      	ldr	r2, [pc, #84]	; (80023ac <HAL_UART_RxCpltCallback+0x134>)
 8002356:	6013      	str	r3, [r2, #0]
		    	  hub_encoder_feedback.encoder_2 = 	(receive_buf[13] << 24) + (receive_buf[12] << 16) +
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 800235a:	7b5b      	ldrb	r3, [r3, #13]
 800235c:	061a      	lsls	r2, r3, #24
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 8002360:	7b1b      	ldrb	r3, [r3, #12]
 8002362:	041b      	lsls	r3, r3, #16
 8002364:	441a      	add	r2, r3
		    	  				      	  	  	  	  (receive_buf[11] << 8) + (receive_buf[10] );
 8002366:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 8002368:	7adb      	ldrb	r3, [r3, #11]
 800236a:	021b      	lsls	r3, r3, #8
		    	  hub_encoder_feedback.encoder_2 = 	(receive_buf[13] << 24) + (receive_buf[12] << 16) +
 800236c:	4413      	add	r3, r2
		    	  				      	  	  	  	  (receive_buf[11] << 8) + (receive_buf[10] );
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <HAL_UART_RxCpltCallback+0x130>)
 8002370:	7a92      	ldrb	r2, [r2, #10]
 8002372:	4413      	add	r3, r2
		    	  hub_encoder_feedback.encoder_2 = 	(receive_buf[13] << 24) + (receive_buf[12] << 16) +
 8002374:	4a0d      	ldr	r2, [pc, #52]	; (80023ac <HAL_UART_RxCpltCallback+0x134>)
 8002376:	6053      	str	r3, [r2, #4]
		    	  if(first_encoder_callback){
 8002378:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <HAL_UART_RxCpltCallback+0x138>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00a      	beq.n	8002396 <HAL_UART_RxCpltCallback+0x11e>
		    		  prev_hub_encoder_feedback.encoder_1 = hub_encoder_feedback.encoder_1;
 8002380:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_UART_RxCpltCallback+0x134>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0b      	ldr	r2, [pc, #44]	; (80023b4 <HAL_UART_RxCpltCallback+0x13c>)
 8002386:	6013      	str	r3, [r2, #0]
		    		  prev_hub_encoder_feedback.encoder_2 = hub_encoder_feedback.encoder_2;
 8002388:	4b08      	ldr	r3, [pc, #32]	; (80023ac <HAL_UART_RxCpltCallback+0x134>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	4a09      	ldr	r2, [pc, #36]	; (80023b4 <HAL_UART_RxCpltCallback+0x13c>)
 800238e:	6053      	str	r3, [r2, #4]
		    		  first_encoder_callback = false;
 8002390:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <HAL_UART_RxCpltCallback+0x138>)
 8002392:	2200      	movs	r2, #0
 8002394:	701a      	strb	r2, [r3, #0]
//		      if (receive_buf[0] == 0xAA && receive_buf[1] == 0xA4 && receive_buf[3] == 0x83 ){
//				}
		  }
	}

}
 8002396:	bf00      	nop
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40004800 	.word	0x40004800
 80023a8:	20000484 	.word	0x20000484
 80023ac:	200003c4 	.word	0x200003c4
 80023b0:	2000009c 	.word	0x2000009c
 80023b4:	2000047c 	.word	0x2000047c

080023b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b088      	sub	sp, #32
 80023ca:	af04      	add	r7, sp, #16
 80023cc:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80023ce:	2364      	movs	r3, #100	; 0x64
 80023d0:	9302      	str	r3, [sp, #8]
 80023d2:	2301      	movs	r3, #1
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	f107 030f 	add.w	r3, r7, #15
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2301      	movs	r3, #1
 80023de:	2275      	movs	r2, #117	; 0x75
 80023e0:	21d0      	movs	r1, #208	; 0xd0
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f003 f958 	bl	8005698 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	2b68      	cmp	r3, #104	; 0x68
 80023ec:	d13d      	bne.n	800246a <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80023f2:	2364      	movs	r3, #100	; 0x64
 80023f4:	9302      	str	r3, [sp, #8]
 80023f6:	2301      	movs	r3, #1
 80023f8:	9301      	str	r3, [sp, #4]
 80023fa:	f107 030e 	add.w	r3, r7, #14
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	2301      	movs	r3, #1
 8002402:	226b      	movs	r2, #107	; 0x6b
 8002404:	21d0      	movs	r1, #208	; 0xd0
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f003 f84c 	bl	80054a4 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800240c:	2307      	movs	r3, #7
 800240e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8002410:	2364      	movs	r3, #100	; 0x64
 8002412:	9302      	str	r3, [sp, #8]
 8002414:	2301      	movs	r3, #1
 8002416:	9301      	str	r3, [sp, #4]
 8002418:	f107 030e 	add.w	r3, r7, #14
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	2301      	movs	r3, #1
 8002420:	2219      	movs	r2, #25
 8002422:	21d0      	movs	r1, #208	; 0xd0
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f003 f83d 	bl	80054a4 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800242a:	2300      	movs	r3, #0
 800242c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800242e:	2364      	movs	r3, #100	; 0x64
 8002430:	9302      	str	r3, [sp, #8]
 8002432:	2301      	movs	r3, #1
 8002434:	9301      	str	r3, [sp, #4]
 8002436:	f107 030e 	add.w	r3, r7, #14
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2301      	movs	r3, #1
 800243e:	221c      	movs	r2, #28
 8002440:	21d0      	movs	r1, #208	; 0xd0
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f003 f82e 	bl	80054a4 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8002448:	2300      	movs	r3, #0
 800244a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800244c:	2364      	movs	r3, #100	; 0x64
 800244e:	9302      	str	r3, [sp, #8]
 8002450:	2301      	movs	r3, #1
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	f107 030e 	add.w	r3, r7, #14
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	2301      	movs	r3, #1
 800245c:	221b      	movs	r2, #27
 800245e:	21d0      	movs	r1, #208	; 0xd0
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f003 f81f 	bl	80054a4 <HAL_I2C_Mem_Write>
        return 0;
 8002466:	2300      	movs	r3, #0
 8002468:	e000      	b.n	800246c <MPU6050_Init+0xa6>
    }
    return 1;
 800246a:	2301      	movs	r3, #1
}
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	0000      	movs	r0, r0
	...

08002478 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8002478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800247c:	b094      	sub	sp, #80	; 0x50
 800247e:	af04      	add	r7, sp, #16
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8002484:	2364      	movs	r3, #100	; 0x64
 8002486:	9302      	str	r3, [sp, #8]
 8002488:	230e      	movs	r3, #14
 800248a:	9301      	str	r3, [sp, #4]
 800248c:	f107 0308 	add.w	r3, r7, #8
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	2301      	movs	r3, #1
 8002494:	223b      	movs	r2, #59	; 0x3b
 8002496:	21d0      	movs	r1, #208	; 0xd0
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f003 f8fd 	bl	8005698 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800249e:	7a3b      	ldrb	r3, [r7, #8]
 80024a0:	021b      	lsls	r3, r3, #8
 80024a2:	b21a      	sxth	r2, r3
 80024a4:	7a7b      	ldrb	r3, [r7, #9]
 80024a6:	b21b      	sxth	r3, r3
 80024a8:	4313      	orrs	r3, r2
 80024aa:	b21a      	sxth	r2, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80024b0:	7abb      	ldrb	r3, [r7, #10]
 80024b2:	021b      	lsls	r3, r3, #8
 80024b4:	b21a      	sxth	r2, r3
 80024b6:	7afb      	ldrb	r3, [r7, #11]
 80024b8:	b21b      	sxth	r3, r3
 80024ba:	4313      	orrs	r3, r2
 80024bc:	b21a      	sxth	r2, r3
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80024c2:	7b3b      	ldrb	r3, [r7, #12]
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	b21a      	sxth	r2, r3
 80024c8:	7b7b      	ldrb	r3, [r7, #13]
 80024ca:	b21b      	sxth	r3, r3
 80024cc:	4313      	orrs	r3, r2
 80024ce:	b21a      	sxth	r2, r3
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80024d4:	7bbb      	ldrb	r3, [r7, #14]
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	b21a      	sxth	r2, r3
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	b21b      	sxth	r3, r3
 80024de:	4313      	orrs	r3, r2
 80024e0:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80024e2:	7c3b      	ldrb	r3, [r7, #16]
 80024e4:	021b      	lsls	r3, r3, #8
 80024e6:	b21a      	sxth	r2, r3
 80024e8:	7c7b      	ldrb	r3, [r7, #17]
 80024ea:	b21b      	sxth	r3, r3
 80024ec:	4313      	orrs	r3, r2
 80024ee:	b21a      	sxth	r2, r3
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80024f4:	7cbb      	ldrb	r3, [r7, #18]
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	b21a      	sxth	r2, r3
 80024fa:	7cfb      	ldrb	r3, [r7, #19]
 80024fc:	b21b      	sxth	r3, r3
 80024fe:	4313      	orrs	r3, r2
 8002500:	b21a      	sxth	r2, r3
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8002506:	7d3b      	ldrb	r3, [r7, #20]
 8002508:	021b      	lsls	r3, r3, #8
 800250a:	b21a      	sxth	r2, r3
 800250c:	7d7b      	ldrb	r3, [r7, #21]
 800250e:	b21b      	sxth	r3, r3
 8002510:	4313      	orrs	r3, r2
 8002512:	b21a      	sxth	r2, r3
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800251e:	4618      	mov	r0, r3
 8002520:	f7fd ffb8 	bl	8000494 <__aeabi_i2d>
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	4bbd      	ldr	r3, [pc, #756]	; (8002820 <MPU6050_Read_All+0x3a8>)
 800252a:	f7fe f947 	bl	80007bc <__aeabi_ddiv>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	6839      	ldr	r1, [r7, #0]
 8002534:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800253e:	4618      	mov	r0, r3
 8002540:	f7fd ffa8 	bl	8000494 <__aeabi_i2d>
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	4bb5      	ldr	r3, [pc, #724]	; (8002820 <MPU6050_Read_All+0x3a8>)
 800254a:	f7fe f937 	bl	80007bc <__aeabi_ddiv>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	6839      	ldr	r1, [r7, #0]
 8002554:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fd ff98 	bl	8000494 <__aeabi_i2d>
 8002564:	a3a8      	add	r3, pc, #672	; (adr r3, 8002808 <MPU6050_Read_All+0x390>)
 8002566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256a:	f7fe f927 	bl	80007bc <__aeabi_ddiv>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	6839      	ldr	r1, [r7, #0]
 8002574:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8002578:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800257c:	ee07 3a90 	vmov	s15, r3
 8002580:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002584:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8002824 <MPU6050_Read_All+0x3ac>
 8002588:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800258c:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002828 <MPU6050_Read_All+0x3b0>
 8002590:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fd ff77 	bl	8000494 <__aeabi_i2d>
 80025a6:	a39a      	add	r3, pc, #616	; (adr r3, 8002810 <MPU6050_Read_All+0x398>)
 80025a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ac:	f7fe f906 	bl	80007bc <__aeabi_ddiv>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	6839      	ldr	r1, [r7, #0]
 80025b6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fd ff67 	bl	8000494 <__aeabi_i2d>
 80025c6:	a392      	add	r3, pc, #584	; (adr r3, 8002810 <MPU6050_Read_All+0x398>)
 80025c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025cc:	f7fe f8f6 	bl	80007bc <__aeabi_ddiv>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	6839      	ldr	r1, [r7, #0]
 80025d6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fd ff57 	bl	8000494 <__aeabi_i2d>
 80025e6:	a38a      	add	r3, pc, #552	; (adr r3, 8002810 <MPU6050_Read_All+0x398>)
 80025e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ec:	f7fe f8e6 	bl	80007bc <__aeabi_ddiv>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	6839      	ldr	r1, [r7, #0]
 80025f6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 80025fa:	f001 fc17 	bl	8003e2c <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	4b8a      	ldr	r3, [pc, #552]	; (800282c <MPU6050_Read_All+0x3b4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	4618      	mov	r0, r3
 8002608:	f7fd ff34 	bl	8000474 <__aeabi_ui2d>
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	4b87      	ldr	r3, [pc, #540]	; (8002830 <MPU6050_Read_All+0x3b8>)
 8002612:	f7fe f8d3 	bl	80007bc <__aeabi_ddiv>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 800261e:	f001 fc05 	bl	8003e2c <HAL_GetTick>
 8002622:	4603      	mov	r3, r0
 8002624:	4a81      	ldr	r2, [pc, #516]	; (800282c <MPU6050_Read_All+0x3b4>)
 8002626:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800262e:	461a      	mov	r2, r3
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002636:	fb03 f202 	mul.w	r2, r3, r2
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002640:	4619      	mov	r1, r3
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002648:	fb03 f301 	mul.w	r3, r3, r1
 800264c:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 800264e:	4618      	mov	r0, r3
 8002650:	f7fd ff20 	bl	8000494 <__aeabi_i2d>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	ec43 2b10 	vmov	d0, r2, r3
 800265c:	f007 f86c 	bl	8009738 <sqrt>
 8002660:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002670:	f7fe f9e2 	bl	8000a38 <__aeabi_dcmpeq>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d11f      	bne.n	80026ba <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002680:	4618      	mov	r0, r3
 8002682:	f7fd ff07 	bl	8000494 <__aeabi_i2d>
 8002686:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800268a:	f7fe f897 	bl	80007bc <__aeabi_ddiv>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	ec43 2b17 	vmov	d7, r2, r3
 8002696:	eeb0 0a47 	vmov.f32	s0, s14
 800269a:	eef0 0a67 	vmov.f32	s1, s15
 800269e:	f006 fd4b 	bl	8009138 <atan>
 80026a2:	ec51 0b10 	vmov	r0, r1, d0
 80026a6:	a35c      	add	r3, pc, #368	; (adr r3, 8002818 <MPU6050_Read_All+0x3a0>)
 80026a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ac:	f7fd ff5c 	bl	8000568 <__aeabi_dmul>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80026b8:	e005      	b.n	80026c6 <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026cc:	425b      	negs	r3, r3
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fd fee0 	bl	8000494 <__aeabi_i2d>
 80026d4:	4682      	mov	sl, r0
 80026d6:	468b      	mov	fp, r1
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fd fed8 	bl	8000494 <__aeabi_i2d>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	ec43 2b11 	vmov	d1, r2, r3
 80026ec:	ec4b ab10 	vmov	d0, sl, fp
 80026f0:	f006 ff72 	bl	80095d8 <atan2>
 80026f4:	ec51 0b10 	vmov	r0, r1, d0
 80026f8:	a347      	add	r3, pc, #284	; (adr r3, 8002818 <MPU6050_Read_All+0x3a0>)
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	f7fd ff33 	bl	8000568 <__aeabi_dmul>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	4b49      	ldr	r3, [pc, #292]	; (8002834 <MPU6050_Read_All+0x3bc>)
 8002710:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002714:	f7fe f99a 	bl	8000a4c <__aeabi_dcmplt>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <MPU6050_Read_All+0x2bc>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	4b43      	ldr	r3, [pc, #268]	; (8002838 <MPU6050_Read_All+0x3c0>)
 800272a:	f7fe f9ad 	bl	8000a88 <__aeabi_dcmpgt>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d114      	bne.n	800275e <MPU6050_Read_All+0x2e6>
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	4b3f      	ldr	r3, [pc, #252]	; (8002838 <MPU6050_Read_All+0x3c0>)
 800273a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800273e:	f7fe f9a3 	bl	8000a88 <__aeabi_dcmpgt>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d015      	beq.n	8002774 <MPU6050_Read_All+0x2fc>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	4b38      	ldr	r3, [pc, #224]	; (8002834 <MPU6050_Read_All+0x3bc>)
 8002754:	f7fe f97a 	bl	8000a4c <__aeabi_dcmplt>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00a      	beq.n	8002774 <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 800275e:	4937      	ldr	r1, [pc, #220]	; (800283c <MPU6050_Read_All+0x3c4>)
 8002760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002764:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002768:	6839      	ldr	r1, [r7, #0]
 800276a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800276e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8002772:	e014      	b.n	800279e <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800277a:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800277e:	eeb0 1a47 	vmov.f32	s2, s14
 8002782:	eef0 1a67 	vmov.f32	s3, s15
 8002786:	ed97 0b06 	vldr	d0, [r7, #24]
 800278a:	482c      	ldr	r0, [pc, #176]	; (800283c <MPU6050_Read_All+0x3c4>)
 800278c:	f000 f85a 	bl	8002844 <Kalman_getAngle>
 8002790:	eeb0 7a40 	vmov.f32	s14, s0
 8002794:	eef0 7a60 	vmov.f32	s15, s1
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80027a4:	4690      	mov	r8, r2
 80027a6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	4b22      	ldr	r3, [pc, #136]	; (8002838 <MPU6050_Read_All+0x3c0>)
 80027b0:	4640      	mov	r0, r8
 80027b2:	4649      	mov	r1, r9
 80027b4:	f7fe f968 	bl	8000a88 <__aeabi_dcmpgt>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d008      	beq.n	80027d0 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80027c4:	4614      	mov	r4, r2
 80027c6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80027d6:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80027da:	eeb0 1a47 	vmov.f32	s2, s14
 80027de:	eef0 1a67 	vmov.f32	s3, s15
 80027e2:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80027e6:	4816      	ldr	r0, [pc, #88]	; (8002840 <MPU6050_Read_All+0x3c8>)
 80027e8:	f000 f82c 	bl	8002844 <Kalman_getAngle>
 80027ec:	eeb0 7a40 	vmov.f32	s14, s0
 80027f0:	eef0 7a60 	vmov.f32	s15, s1
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 80027fa:	bf00      	nop
 80027fc:	3740      	adds	r7, #64	; 0x40
 80027fe:	46bd      	mov	sp, r7
 8002800:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002804:	f3af 8000 	nop.w
 8002808:	00000000 	.word	0x00000000
 800280c:	40cc2900 	.word	0x40cc2900
 8002810:	00000000 	.word	0x00000000
 8002814:	40606000 	.word	0x40606000
 8002818:	1a63c1f8 	.word	0x1a63c1f8
 800281c:	404ca5dc 	.word	0x404ca5dc
 8002820:	40d00000 	.word	0x40d00000
 8002824:	43aa0000 	.word	0x43aa0000
 8002828:	42121eb8 	.word	0x42121eb8
 800282c:	20000498 	.word	0x20000498
 8002830:	408f4000 	.word	0x408f4000
 8002834:	c0568000 	.word	0xc0568000
 8002838:	40568000 	.word	0x40568000
 800283c:	20000198 	.word	0x20000198
 8002840:	20000150 	.word	0x20000150

08002844 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8002844:	b5b0      	push	{r4, r5, r7, lr}
 8002846:	b096      	sub	sp, #88	; 0x58
 8002848:	af00      	add	r7, sp, #0
 800284a:	61f8      	str	r0, [r7, #28]
 800284c:	ed87 0b04 	vstr	d0, [r7, #16]
 8002850:	ed87 1b02 	vstr	d1, [r7, #8]
 8002854:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800285e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002862:	f7fd fcc9 	bl	80001f8 <__aeabi_dsub>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002874:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002878:	e9d7 0100 	ldrd	r0, r1, [r7]
 800287c:	f7fd fe74 	bl	8000568 <__aeabi_dmul>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4620      	mov	r0, r4
 8002886:	4629      	mov	r1, r5
 8002888:	f7fd fcb8 	bl	80001fc <__adddf3>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	69f9      	ldr	r1, [r7, #28]
 8002892:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80028a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028a6:	f7fd fe5f 	bl	8000568 <__aeabi_dmul>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4610      	mov	r0, r2
 80028b0:	4619      	mov	r1, r3
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80028b8:	f7fd fc9e 	bl	80001f8 <__aeabi_dsub>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4610      	mov	r0, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80028ca:	f7fd fc95 	bl	80001f8 <__aeabi_dsub>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4610      	mov	r0, r2
 80028d4:	4619      	mov	r1, r3
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028dc:	f7fd fc8e 	bl	80001fc <__adddf3>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028ec:	f7fd fe3c 	bl	8000568 <__aeabi_dmul>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4620      	mov	r0, r4
 80028f6:	4629      	mov	r1, r5
 80028f8:	f7fd fc80 	bl	80001fc <__adddf3>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	69f9      	ldr	r1, [r7, #28]
 8002902:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002912:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002916:	f7fd fe27 	bl	8000568 <__aeabi_dmul>
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	4620      	mov	r0, r4
 8002920:	4629      	mov	r1, r5
 8002922:	f7fd fc69 	bl	80001f8 <__aeabi_dsub>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	69f9      	ldr	r1, [r7, #28]
 800292c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800293c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002940:	f7fd fe12 	bl	8000568 <__aeabi_dmul>
 8002944:	4602      	mov	r2, r0
 8002946:	460b      	mov	r3, r1
 8002948:	4620      	mov	r0, r4
 800294a:	4629      	mov	r1, r5
 800294c:	f7fd fc54 	bl	80001f8 <__aeabi_dsub>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	69f9      	ldr	r1, [r7, #28]
 8002956:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002966:	e9d7 2300 	ldrd	r2, r3, [r7]
 800296a:	f7fd fdfd 	bl	8000568 <__aeabi_dmul>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4620      	mov	r0, r4
 8002974:	4629      	mov	r1, r5
 8002976:	f7fd fc41 	bl	80001fc <__adddf3>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	69f9      	ldr	r1, [r7, #28]
 8002980:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002990:	f7fd fc34 	bl	80001fc <__adddf3>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80029a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029a6:	f7fd ff09 	bl	80007bc <__aeabi_ddiv>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80029b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029bc:	f7fd fefe 	bl	80007bc <__aeabi_ddiv>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80029ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80029d2:	f7fd fc11 	bl	80001f8 <__aeabi_dsub>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80029e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80029e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80029ec:	f7fd fdbc 	bl	8000568 <__aeabi_dmul>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4620      	mov	r0, r4
 80029f6:	4629      	mov	r1, r5
 80029f8:	f7fd fc00 	bl	80001fc <__adddf3>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	69f9      	ldr	r1, [r7, #28]
 8002a02:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002a0c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a10:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a14:	f7fd fda8 	bl	8000568 <__aeabi_dmul>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	4629      	mov	r1, r5
 8002a20:	f7fd fbec 	bl	80001fc <__adddf3>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	69f9      	ldr	r1, [r7, #28]
 8002a2a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002a34:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002a3e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002a48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002a4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a50:	f7fd fd8a 	bl	8000568 <__aeabi_dmul>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4620      	mov	r0, r4
 8002a5a:	4629      	mov	r1, r5
 8002a5c:	f7fd fbcc 	bl	80001f8 <__aeabi_dsub>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	69f9      	ldr	r1, [r7, #28]
 8002a66:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002a70:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002a74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a78:	f7fd fd76 	bl	8000568 <__aeabi_dmul>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4620      	mov	r0, r4
 8002a82:	4629      	mov	r1, r5
 8002a84:	f7fd fbb8 	bl	80001f8 <__aeabi_dsub>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	69f9      	ldr	r1, [r7, #28]
 8002a8e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002a98:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002aa0:	f7fd fd62 	bl	8000568 <__aeabi_dmul>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	4629      	mov	r1, r5
 8002aac:	f7fd fba4 	bl	80001f8 <__aeabi_dsub>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	69f9      	ldr	r1, [r7, #28]
 8002ab6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002ac0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002ac4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ac8:	f7fd fd4e 	bl	8000568 <__aeabi_dmul>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	f7fd fb90 	bl	80001f8 <__aeabi_dsub>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	69f9      	ldr	r1, [r7, #28]
 8002ade:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002ae8:	ec43 2b17 	vmov	d7, r2, r3
};
 8002aec:	eeb0 0a47 	vmov.f32	s0, s14
 8002af0:	eef0 0a67 	vmov.f32	s1, s15
 8002af4:	3758      	adds	r7, #88	; 0x58
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002afc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002b00:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <MX_SPI1_Init+0x68>)
 8002b02:	4a19      	ldr	r2, [pc, #100]	; (8002b68 <MX_SPI1_Init+0x6c>)
 8002b04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b06:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <MX_SPI1_Init+0x68>)
 8002b08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002b0e:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <MX_SPI1_Init+0x68>)
 8002b10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b14:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002b16:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <MX_SPI1_Init+0x68>)
 8002b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002b1e:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <MX_SPI1_Init+0x68>)
 8002b20:	2202      	movs	r2, #2
 8002b22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b24:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <MX_SPI1_Init+0x68>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b2a:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <MX_SPI1_Init+0x68>)
 8002b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002b32:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <MX_SPI1_Init+0x68>)
 8002b34:	2228      	movs	r2, #40	; 0x28
 8002b36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b38:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <MX_SPI1_Init+0x68>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <MX_SPI1_Init+0x68>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b44:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <MX_SPI1_Init+0x68>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b4a:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <MX_SPI1_Init+0x68>)
 8002b4c:	220a      	movs	r2, #10
 8002b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b50:	4804      	ldr	r0, [pc, #16]	; (8002b64 <MX_SPI1_Init+0x68>)
 8002b52:	f004 f857 	bl	8006c04 <HAL_SPI_Init>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8002b5c:	f7ff fc2c 	bl	80023b8 <Error_Handler>
  }

}
 8002b60:	bf00      	nop
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	200002c0 	.word	0x200002c0
 8002b68:	40013000 	.word	0x40013000

08002b6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08a      	sub	sp, #40	; 0x28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b74:	f107 0314 	add.w	r3, r7, #20
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a19      	ldr	r2, [pc, #100]	; (8002bf0 <HAL_SPI_MspInit+0x84>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d12b      	bne.n	8002be6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <HAL_SPI_MspInit+0x88>)
 8002b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b96:	4a17      	ldr	r2, [pc, #92]	; (8002bf4 <HAL_SPI_MspInit+0x88>)
 8002b98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b9e:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <HAL_SPI_MspInit+0x88>)
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <HAL_SPI_MspInit+0x88>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	4a10      	ldr	r2, [pc, #64]	; (8002bf4 <HAL_SPI_MspInit+0x88>)
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bba:	4b0e      	ldr	r3, [pc, #56]	; (8002bf4 <HAL_SPI_MspInit+0x88>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 8002bc6:	2360      	movs	r3, #96	; 0x60
 8002bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bd6:	2305      	movs	r3, #5
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bda:	f107 0314 	add.w	r3, r7, #20
 8002bde:	4619      	mov	r1, r3
 8002be0:	4805      	ldr	r0, [pc, #20]	; (8002bf8 <HAL_SPI_MspInit+0x8c>)
 8002be2:	f002 f925 	bl	8004e30 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002be6:	bf00      	nop
 8002be8:	3728      	adds	r7, #40	; 0x28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40013000 	.word	0x40013000
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40020000 	.word	0x40020000

08002bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	607b      	str	r3, [r7, #4]
 8002c06:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <HAL_MspInit+0x4c>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	4a0f      	ldr	r2, [pc, #60]	; (8002c48 <HAL_MspInit+0x4c>)
 8002c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c10:	6453      	str	r3, [r2, #68]	; 0x44
 8002c12:	4b0d      	ldr	r3, [pc, #52]	; (8002c48 <HAL_MspInit+0x4c>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1a:	607b      	str	r3, [r7, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	603b      	str	r3, [r7, #0]
 8002c22:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <HAL_MspInit+0x4c>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	4a08      	ldr	r2, [pc, #32]	; (8002c48 <HAL_MspInit+0x4c>)
 8002c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_MspInit+0x4c>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c36:	603b      	str	r3, [r7, #0]
 8002c38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800

08002c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c50:	bf00      	nop
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c5e:	e7fe      	b.n	8002c5e <HardFault_Handler+0x4>

08002c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c64:	e7fe      	b.n	8002c64 <MemManage_Handler+0x4>

08002c66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c66:	b480      	push	{r7}
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c6a:	e7fe      	b.n	8002c6a <BusFault_Handler+0x4>

08002c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c70:	e7fe      	b.n	8002c70 <UsageFault_Handler+0x4>

08002c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c72:	b480      	push	{r7}
 8002c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c84:	bf00      	nop
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ca0:	f001 f8b0 	bl	8003e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ca4:	bf00      	nop
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002cac:	4802      	ldr	r0, [pc, #8]	; (8002cb8 <DMA1_Stream1_IRQHandler+0x10>)
 8002cae:	f001 fe55 	bl	800495c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	2000059c 	.word	0x2000059c

08002cbc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002cc0:	4802      	ldr	r0, [pc, #8]	; (8002ccc <CAN1_RX0_IRQHandler+0x10>)
 8002cc2:	f001 f9de 	bl	8004082 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000340 	.word	0x20000340

08002cd0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002cd4:	2080      	movs	r0, #128	; 0x80
 8002cd6:	f002 fa89 	bl	80051ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002ce4:	4802      	ldr	r0, [pc, #8]	; (8002cf0 <CAN2_RX1_IRQHandler+0x10>)
 8002ce6:	f001 f9cc 	bl	8004082 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000318 	.word	0x20000318

08002cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cf8:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <SystemInit+0x28>)
 8002cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfe:	4a07      	ldr	r2, [pc, #28]	; (8002d1c <SystemInit+0x28>)
 8002d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d08:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <SystemInit+0x28>)
 8002d0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d0e:	609a      	str	r2, [r3, #8]
#endif
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b096      	sub	sp, #88	; 0x58
 8002d24:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	605a      	str	r2, [r3, #4]
 8002d48:	609a      	str	r2, [r3, #8]
 8002d4a:	60da      	str	r2, [r3, #12]
 8002d4c:	611a      	str	r2, [r3, #16]
 8002d4e:	615a      	str	r2, [r3, #20]
 8002d50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d52:	1d3b      	adds	r3, r7, #4
 8002d54:	2220      	movs	r2, #32
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f006 f9e3 	bl	8009124 <memset>

  htim1.Instance = TIM1;
 8002d5e:	4b3e      	ldr	r3, [pc, #248]	; (8002e58 <MX_TIM1_Init+0x138>)
 8002d60:	4a3e      	ldr	r2, [pc, #248]	; (8002e5c <MX_TIM1_Init+0x13c>)
 8002d62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8002d64:	4b3c      	ldr	r3, [pc, #240]	; (8002e58 <MX_TIM1_Init+0x138>)
 8002d66:	22b3      	movs	r2, #179	; 0xb3
 8002d68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d6a:	4b3b      	ldr	r3, [pc, #236]	; (8002e58 <MX_TIM1_Init+0x138>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8002d70:	4b39      	ldr	r3, [pc, #228]	; (8002e58 <MX_TIM1_Init+0x138>)
 8002d72:	2263      	movs	r2, #99	; 0x63
 8002d74:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d76:	4b38      	ldr	r3, [pc, #224]	; (8002e58 <MX_TIM1_Init+0x138>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d7c:	4b36      	ldr	r3, [pc, #216]	; (8002e58 <MX_TIM1_Init+0x138>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d82:	4b35      	ldr	r3, [pc, #212]	; (8002e58 <MX_TIM1_Init+0x138>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d88:	4833      	ldr	r0, [pc, #204]	; (8002e58 <MX_TIM1_Init+0x138>)
 8002d8a:	f004 fb5b 	bl	8007444 <HAL_TIM_Base_Init>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002d94:	f7ff fb10 	bl	80023b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d9c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002da2:	4619      	mov	r1, r3
 8002da4:	482c      	ldr	r0, [pc, #176]	; (8002e58 <MX_TIM1_Init+0x138>)
 8002da6:	f004 fda7 	bl	80078f8 <HAL_TIM_ConfigClockSource>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002db0:	f7ff fb02 	bl	80023b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002db4:	4828      	ldr	r0, [pc, #160]	; (8002e58 <MX_TIM1_Init+0x138>)
 8002db6:	f004 fb94 	bl	80074e2 <HAL_TIM_PWM_Init>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002dc0:	f7ff fafa 	bl	80023b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002dcc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4821      	ldr	r0, [pc, #132]	; (8002e58 <MX_TIM1_Init+0x138>)
 8002dd4:	f005 fa8e 	bl	80082f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002dde:	f7ff faeb 	bl	80023b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002de2:	2360      	movs	r3, #96	; 0x60
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dea:	2300      	movs	r3, #0
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002dee:	2300      	movs	r3, #0
 8002df0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002df2:	2300      	movs	r3, #0
 8002df4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002df6:	2300      	movs	r3, #0
 8002df8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e02:	2204      	movs	r2, #4
 8002e04:	4619      	mov	r1, r3
 8002e06:	4814      	ldr	r0, [pc, #80]	; (8002e58 <MX_TIM1_Init+0x138>)
 8002e08:	f004 fcb0 	bl	800776c <HAL_TIM_PWM_ConfigChannel>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8002e12:	f7ff fad1 	bl	80023b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e16:	2300      	movs	r3, #0
 8002e18:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e2e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e30:	2300      	movs	r3, #0
 8002e32:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e34:	1d3b      	adds	r3, r7, #4
 8002e36:	4619      	mov	r1, r3
 8002e38:	4807      	ldr	r0, [pc, #28]	; (8002e58 <MX_TIM1_Init+0x138>)
 8002e3a:	f005 fad7 	bl	80083ec <HAL_TIMEx_ConfigBreakDeadTime>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002e44:	f7ff fab8 	bl	80023b8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8002e48:	4803      	ldr	r0, [pc, #12]	; (8002e58 <MX_TIM1_Init+0x138>)
 8002e4a:	f000 fa2b 	bl	80032a4 <HAL_TIM_MspPostInit>

}
 8002e4e:	bf00      	nop
 8002e50:	3758      	adds	r7, #88	; 0x58
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	2000051c 	.word	0x2000051c
 8002e5c:	40010000 	.word	0x40010000

08002e60 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08a      	sub	sp, #40	; 0x28
 8002e64:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e66:	f107 0318 	add.w	r3, r7, #24
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	605a      	str	r2, [r3, #4]
 8002e70:	609a      	str	r2, [r3, #8]
 8002e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e74:	f107 0310 	add.w	r3, r7, #16
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002e7e:	463b      	mov	r3, r7
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8002e8a:	4b31      	ldr	r3, [pc, #196]	; (8002f50 <MX_TIM2_Init+0xf0>)
 8002e8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8002e92:	4b2f      	ldr	r3, [pc, #188]	; (8002f50 <MX_TIM2_Init+0xf0>)
 8002e94:	22b3      	movs	r2, #179	; 0xb3
 8002e96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e98:	4b2d      	ldr	r3, [pc, #180]	; (8002f50 <MX_TIM2_Init+0xf0>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65536-1;
 8002e9e:	4b2c      	ldr	r3, [pc, #176]	; (8002f50 <MX_TIM2_Init+0xf0>)
 8002ea0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ea4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ea6:	4b2a      	ldr	r3, [pc, #168]	; (8002f50 <MX_TIM2_Init+0xf0>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eac:	4b28      	ldr	r3, [pc, #160]	; (8002f50 <MX_TIM2_Init+0xf0>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002eb2:	4827      	ldr	r0, [pc, #156]	; (8002f50 <MX_TIM2_Init+0xf0>)
 8002eb4:	f004 fac6 	bl	8007444 <HAL_TIM_Base_Init>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8002ebe:	f7ff fa7b 	bl	80023b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ec6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ec8:	f107 0318 	add.w	r3, r7, #24
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4820      	ldr	r0, [pc, #128]	; (8002f50 <MX_TIM2_Init+0xf0>)
 8002ed0:	f004 fd12 	bl	80078f8 <HAL_TIM_ConfigClockSource>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002eda:	f7ff fa6d 	bl	80023b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002ede:	481c      	ldr	r0, [pc, #112]	; (8002f50 <MX_TIM2_Init+0xf0>)
 8002ee0:	f004 fb72 	bl	80075c8 <HAL_TIM_IC_Init>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002eea:	f7ff fa65 	bl	80023b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ef6:	f107 0310 	add.w	r3, r7, #16
 8002efa:	4619      	mov	r1, r3
 8002efc:	4814      	ldr	r0, [pc, #80]	; (8002f50 <MX_TIM2_Init+0xf0>)
 8002efe:	f005 f9f9 	bl	80082f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8002f08:	f7ff fa56 	bl	80023b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002f10:	2301      	movs	r3, #1
 8002f12:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002f1c:	463b      	mov	r3, r7
 8002f1e:	2208      	movs	r2, #8
 8002f20:	4619      	mov	r1, r3
 8002f22:	480b      	ldr	r0, [pc, #44]	; (8002f50 <MX_TIM2_Init+0xf0>)
 8002f24:	f004 fb85 	bl	8007632 <HAL_TIM_IC_ConfigChannel>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8002f2e:	f7ff fa43 	bl	80023b8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002f32:	463b      	mov	r3, r7
 8002f34:	220c      	movs	r2, #12
 8002f36:	4619      	mov	r1, r3
 8002f38:	4805      	ldr	r0, [pc, #20]	; (8002f50 <MX_TIM2_Init+0xf0>)
 8002f3a:	f004 fb7a 	bl	8007632 <HAL_TIM_IC_ConfigChannel>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8002f44:	f7ff fa38 	bl	80023b8 <Error_Handler>
  }

}
 8002f48:	bf00      	nop
 8002f4a:	3728      	adds	r7, #40	; 0x28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	2000055c 	.word	0x2000055c

08002f54 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08e      	sub	sp, #56	; 0x38
 8002f58:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	605a      	str	r2, [r3, #4]
 8002f64:	609a      	str	r2, [r3, #8]
 8002f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f68:	f107 0320 	add.w	r3, r7, #32
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f72:	1d3b      	adds	r3, r7, #4
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	611a      	str	r2, [r3, #16]
 8002f80:	615a      	str	r2, [r3, #20]
 8002f82:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8002f84:	4b32      	ldr	r3, [pc, #200]	; (8003050 <MX_TIM3_Init+0xfc>)
 8002f86:	4a33      	ldr	r2, [pc, #204]	; (8003054 <MX_TIM3_Init+0x100>)
 8002f88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8002f8a:	4b31      	ldr	r3, [pc, #196]	; (8003050 <MX_TIM3_Init+0xfc>)
 8002f8c:	2259      	movs	r2, #89	; 0x59
 8002f8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f90:	4b2f      	ldr	r3, [pc, #188]	; (8003050 <MX_TIM3_Init+0xfc>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8002f96:	4b2e      	ldr	r3, [pc, #184]	; (8003050 <MX_TIM3_Init+0xfc>)
 8002f98:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002f9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f9e:	4b2c      	ldr	r3, [pc, #176]	; (8003050 <MX_TIM3_Init+0xfc>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fa4:	4b2a      	ldr	r3, [pc, #168]	; (8003050 <MX_TIM3_Init+0xfc>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002faa:	4829      	ldr	r0, [pc, #164]	; (8003050 <MX_TIM3_Init+0xfc>)
 8002fac:	f004 fa4a 	bl	8007444 <HAL_TIM_Base_Init>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002fb6:	f7ff f9ff 	bl	80023b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002fc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4822      	ldr	r0, [pc, #136]	; (8003050 <MX_TIM3_Init+0xfc>)
 8002fc8:	f004 fc96 	bl	80078f8 <HAL_TIM_ConfigClockSource>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002fd2:	f7ff f9f1 	bl	80023b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002fd6:	481e      	ldr	r0, [pc, #120]	; (8003050 <MX_TIM3_Init+0xfc>)
 8002fd8:	f004 fa83 	bl	80074e2 <HAL_TIM_PWM_Init>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002fe2:	f7ff f9e9 	bl	80023b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fea:	2300      	movs	r3, #0
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fee:	f107 0320 	add.w	r3, r7, #32
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4816      	ldr	r0, [pc, #88]	; (8003050 <MX_TIM3_Init+0xfc>)
 8002ff6:	f005 f97d 	bl	80082f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003000:	f7ff f9da 	bl	80023b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003004:	2360      	movs	r3, #96	; 0x60
 8003006:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8003008:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800300c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003016:	1d3b      	adds	r3, r7, #4
 8003018:	2200      	movs	r2, #0
 800301a:	4619      	mov	r1, r3
 800301c:	480c      	ldr	r0, [pc, #48]	; (8003050 <MX_TIM3_Init+0xfc>)
 800301e:	f004 fba5 	bl	800776c <HAL_TIM_PWM_ConfigChannel>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003028:	f7ff f9c6 	bl	80023b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800302c:	1d3b      	adds	r3, r7, #4
 800302e:	2204      	movs	r2, #4
 8003030:	4619      	mov	r1, r3
 8003032:	4807      	ldr	r0, [pc, #28]	; (8003050 <MX_TIM3_Init+0xfc>)
 8003034:	f004 fb9a 	bl	800776c <HAL_TIM_PWM_ConfigChannel>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800303e:	f7ff f9bb 	bl	80023b8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8003042:	4803      	ldr	r0, [pc, #12]	; (8003050 <MX_TIM3_Init+0xfc>)
 8003044:	f000 f92e 	bl	80032a4 <HAL_TIM_MspPostInit>

}
 8003048:	bf00      	nop
 800304a:	3738      	adds	r7, #56	; 0x38
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	200004dc 	.word	0x200004dc
 8003054:	40000400 	.word	0x40000400

08003058 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b096      	sub	sp, #88	; 0x58
 800305c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800305e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	605a      	str	r2, [r3, #4]
 8003068:	609a      	str	r2, [r3, #8]
 800306a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800306c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003076:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	605a      	str	r2, [r3, #4]
 8003080:	609a      	str	r2, [r3, #8]
 8003082:	60da      	str	r2, [r3, #12]
 8003084:	611a      	str	r2, [r3, #16]
 8003086:	615a      	str	r2, [r3, #20]
 8003088:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800308a:	1d3b      	adds	r3, r7, #4
 800308c:	2220      	movs	r2, #32
 800308e:	2100      	movs	r1, #0
 8003090:	4618      	mov	r0, r3
 8003092:	f006 f847 	bl	8009124 <memset>

  htim8.Instance = TIM8;
 8003096:	4b3d      	ldr	r3, [pc, #244]	; (800318c <MX_TIM8_Init+0x134>)
 8003098:	4a3d      	ldr	r2, [pc, #244]	; (8003190 <MX_TIM8_Init+0x138>)
 800309a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 800309c:	4b3b      	ldr	r3, [pc, #236]	; (800318c <MX_TIM8_Init+0x134>)
 800309e:	22b3      	movs	r2, #179	; 0xb3
 80030a0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030a2:	4b3a      	ldr	r3, [pc, #232]	; (800318c <MX_TIM8_Init+0x134>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 80030a8:	4b38      	ldr	r3, [pc, #224]	; (800318c <MX_TIM8_Init+0x134>)
 80030aa:	2263      	movs	r2, #99	; 0x63
 80030ac:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030ae:	4b37      	ldr	r3, [pc, #220]	; (800318c <MX_TIM8_Init+0x134>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80030b4:	4b35      	ldr	r3, [pc, #212]	; (800318c <MX_TIM8_Init+0x134>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ba:	4b34      	ldr	r3, [pc, #208]	; (800318c <MX_TIM8_Init+0x134>)
 80030bc:	2200      	movs	r2, #0
 80030be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80030c0:	4832      	ldr	r0, [pc, #200]	; (800318c <MX_TIM8_Init+0x134>)
 80030c2:	f004 f9bf 	bl	8007444 <HAL_TIM_Base_Init>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80030cc:	f7ff f974 	bl	80023b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80030d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80030da:	4619      	mov	r1, r3
 80030dc:	482b      	ldr	r0, [pc, #172]	; (800318c <MX_TIM8_Init+0x134>)
 80030de:	f004 fc0b 	bl	80078f8 <HAL_TIM_ConfigClockSource>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80030e8:	f7ff f966 	bl	80023b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80030ec:	4827      	ldr	r0, [pc, #156]	; (800318c <MX_TIM8_Init+0x134>)
 80030ee:	f004 f9f8 	bl	80074e2 <HAL_TIM_PWM_Init>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80030f8:	f7ff f95e 	bl	80023b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030fc:	2300      	movs	r3, #0
 80030fe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003100:	2300      	movs	r3, #0
 8003102:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003104:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003108:	4619      	mov	r1, r3
 800310a:	4820      	ldr	r0, [pc, #128]	; (800318c <MX_TIM8_Init+0x134>)
 800310c:	f005 f8f2 	bl	80082f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8003116:	f7ff f94f 	bl	80023b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800311a:	2360      	movs	r3, #96	; 0x60
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003122:	2300      	movs	r3, #0
 8003124:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003126:	2300      	movs	r3, #0
 8003128:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800312a:	2300      	movs	r3, #0
 800312c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800312e:	2300      	movs	r3, #0
 8003130:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003136:	220c      	movs	r2, #12
 8003138:	4619      	mov	r1, r3
 800313a:	4814      	ldr	r0, [pc, #80]	; (800318c <MX_TIM8_Init+0x134>)
 800313c:	f004 fb16 	bl	800776c <HAL_TIM_PWM_ConfigChannel>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 8003146:	f7ff f937 	bl	80023b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800314a:	2300      	movs	r3, #0
 800314c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800314e:	2300      	movs	r3, #0
 8003150:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800315e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003162:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003164:	2300      	movs	r3, #0
 8003166:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003168:	1d3b      	adds	r3, r7, #4
 800316a:	4619      	mov	r1, r3
 800316c:	4807      	ldr	r0, [pc, #28]	; (800318c <MX_TIM8_Init+0x134>)
 800316e:	f005 f93d 	bl	80083ec <HAL_TIMEx_ConfigBreakDeadTime>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <MX_TIM8_Init+0x124>
  {
    Error_Handler();
 8003178:	f7ff f91e 	bl	80023b8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 800317c:	4803      	ldr	r0, [pc, #12]	; (800318c <MX_TIM8_Init+0x134>)
 800317e:	f000 f891 	bl	80032a4 <HAL_TIM_MspPostInit>

}
 8003182:	bf00      	nop
 8003184:	3758      	adds	r7, #88	; 0x58
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	2000049c 	.word	0x2000049c
 8003190:	40010400 	.word	0x40010400

08003194 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08c      	sub	sp, #48	; 0x30
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800319c:	f107 031c 	add.w	r3, r7, #28
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	609a      	str	r2, [r3, #8]
 80031a8:	60da      	str	r2, [r3, #12]
 80031aa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a37      	ldr	r2, [pc, #220]	; (8003290 <HAL_TIM_Base_MspInit+0xfc>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d10e      	bne.n	80031d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	61bb      	str	r3, [r7, #24]
 80031ba:	4b36      	ldr	r3, [pc, #216]	; (8003294 <HAL_TIM_Base_MspInit+0x100>)
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	4a35      	ldr	r2, [pc, #212]	; (8003294 <HAL_TIM_Base_MspInit+0x100>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	6453      	str	r3, [r2, #68]	; 0x44
 80031c6:	4b33      	ldr	r3, [pc, #204]	; (8003294 <HAL_TIM_Base_MspInit+0x100>)
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	61bb      	str	r3, [r7, #24]
 80031d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80031d2:	e059      	b.n	8003288 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM2)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031dc:	d12d      	bne.n	800323a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	4b2c      	ldr	r3, [pc, #176]	; (8003294 <HAL_TIM_Base_MspInit+0x100>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	4a2b      	ldr	r2, [pc, #172]	; (8003294 <HAL_TIM_Base_MspInit+0x100>)
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	6413      	str	r3, [r2, #64]	; 0x40
 80031ee:	4b29      	ldr	r3, [pc, #164]	; (8003294 <HAL_TIM_Base_MspInit+0x100>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	4b25      	ldr	r3, [pc, #148]	; (8003294 <HAL_TIM_Base_MspInit+0x100>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	4a24      	ldr	r2, [pc, #144]	; (8003294 <HAL_TIM_Base_MspInit+0x100>)
 8003204:	f043 0302 	orr.w	r3, r3, #2
 8003208:	6313      	str	r3, [r2, #48]	; 0x30
 800320a:	4b22      	ldr	r3, [pc, #136]	; (8003294 <HAL_TIM_Base_MspInit+0x100>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	613b      	str	r3, [r7, #16]
 8003214:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin|ClimbSpeed_TIM2_CH4_Pin;
 8003216:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800321a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321c:	2302      	movs	r3, #2
 800321e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003220:	2300      	movs	r3, #0
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003224:	2300      	movs	r3, #0
 8003226:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003228:	2301      	movs	r3, #1
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322c:	f107 031c 	add.w	r3, r7, #28
 8003230:	4619      	mov	r1, r3
 8003232:	4819      	ldr	r0, [pc, #100]	; (8003298 <HAL_TIM_Base_MspInit+0x104>)
 8003234:	f001 fdfc 	bl	8004e30 <HAL_GPIO_Init>
}
 8003238:	e026      	b.n	8003288 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM3)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a17      	ldr	r2, [pc, #92]	; (800329c <HAL_TIM_Base_MspInit+0x108>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d10e      	bne.n	8003262 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003244:	2300      	movs	r3, #0
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	4b12      	ldr	r3, [pc, #72]	; (8003294 <HAL_TIM_Base_MspInit+0x100>)
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	4a11      	ldr	r2, [pc, #68]	; (8003294 <HAL_TIM_Base_MspInit+0x100>)
 800324e:	f043 0302 	orr.w	r3, r3, #2
 8003252:	6413      	str	r3, [r2, #64]	; 0x40
 8003254:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <HAL_TIM_Base_MspInit+0x100>)
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	68fb      	ldr	r3, [r7, #12]
}
 8003260:	e012      	b.n	8003288 <HAL_TIM_Base_MspInit+0xf4>
  else if(tim_baseHandle->Instance==TIM8)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a0e      	ldr	r2, [pc, #56]	; (80032a0 <HAL_TIM_Base_MspInit+0x10c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d10d      	bne.n	8003288 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800326c:	2300      	movs	r3, #0
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	4b08      	ldr	r3, [pc, #32]	; (8003294 <HAL_TIM_Base_MspInit+0x100>)
 8003272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003274:	4a07      	ldr	r2, [pc, #28]	; (8003294 <HAL_TIM_Base_MspInit+0x100>)
 8003276:	f043 0302 	orr.w	r3, r3, #2
 800327a:	6453      	str	r3, [r2, #68]	; 0x44
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <HAL_TIM_Base_MspInit+0x100>)
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	68bb      	ldr	r3, [r7, #8]
}
 8003288:	bf00      	nop
 800328a:	3730      	adds	r7, #48	; 0x30
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40010000 	.word	0x40010000
 8003294:	40023800 	.word	0x40023800
 8003298:	40020400 	.word	0x40020400
 800329c:	40000400 	.word	0x40000400
 80032a0:	40010400 	.word	0x40010400

080032a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08a      	sub	sp, #40	; 0x28
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ac:	f107 0314 	add.w	r3, r7, #20
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	609a      	str	r2, [r3, #8]
 80032b8:	60da      	str	r2, [r3, #12]
 80032ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a37      	ldr	r2, [pc, #220]	; (80033a0 <HAL_TIM_MspPostInit+0xfc>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d11f      	bne.n	8003306 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	4b36      	ldr	r3, [pc, #216]	; (80033a4 <HAL_TIM_MspPostInit+0x100>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	4a35      	ldr	r2, [pc, #212]	; (80033a4 <HAL_TIM_MspPostInit+0x100>)
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	6313      	str	r3, [r2, #48]	; 0x30
 80032d6:	4b33      	ldr	r3, [pc, #204]	; (80033a4 <HAL_TIM_MspPostInit+0x100>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 80032e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e8:	2302      	movs	r3, #2
 80032ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f0:	2300      	movs	r3, #0
 80032f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80032f4:	2301      	movs	r3, #1
 80032f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	4619      	mov	r1, r3
 80032fe:	482a      	ldr	r0, [pc, #168]	; (80033a8 <HAL_TIM_MspPostInit+0x104>)
 8003300:	f001 fd96 	bl	8004e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003304:	e047      	b.n	8003396 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a28      	ldr	r2, [pc, #160]	; (80033ac <HAL_TIM_MspPostInit+0x108>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d11e      	bne.n	800334e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	4b23      	ldr	r3, [pc, #140]	; (80033a4 <HAL_TIM_MspPostInit+0x100>)
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	4a22      	ldr	r2, [pc, #136]	; (80033a4 <HAL_TIM_MspPostInit+0x100>)
 800331a:	f043 0304 	orr.w	r3, r3, #4
 800331e:	6313      	str	r3, [r2, #48]	; 0x30
 8003320:	4b20      	ldr	r3, [pc, #128]	; (80033a4 <HAL_TIM_MspPostInit+0x100>)
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 800332c:	23c0      	movs	r3, #192	; 0xc0
 800332e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003330:	2302      	movs	r3, #2
 8003332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003334:	2300      	movs	r3, #0
 8003336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003338:	2300      	movs	r3, #0
 800333a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800333c:	2302      	movs	r3, #2
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003340:	f107 0314 	add.w	r3, r7, #20
 8003344:	4619      	mov	r1, r3
 8003346:	481a      	ldr	r0, [pc, #104]	; (80033b0 <HAL_TIM_MspPostInit+0x10c>)
 8003348:	f001 fd72 	bl	8004e30 <HAL_GPIO_Init>
}
 800334c:	e023      	b.n	8003396 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM8)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a18      	ldr	r2, [pc, #96]	; (80033b4 <HAL_TIM_MspPostInit+0x110>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d11e      	bne.n	8003396 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003358:	2300      	movs	r3, #0
 800335a:	60bb      	str	r3, [r7, #8]
 800335c:	4b11      	ldr	r3, [pc, #68]	; (80033a4 <HAL_TIM_MspPostInit+0x100>)
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	4a10      	ldr	r2, [pc, #64]	; (80033a4 <HAL_TIM_MspPostInit+0x100>)
 8003362:	f043 0304 	orr.w	r3, r3, #4
 8003366:	6313      	str	r3, [r2, #48]	; 0x30
 8003368:	4b0e      	ldr	r3, [pc, #56]	; (80033a4 <HAL_TIM_MspPostInit+0x100>)
 800336a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Climb_TIM8_CH4_Pin;
 8003374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337a:	2302      	movs	r3, #2
 800337c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003382:	2300      	movs	r3, #0
 8003384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003386:	2303      	movs	r3, #3
 8003388:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Climb_TIM8_CH4_GPIO_Port, &GPIO_InitStruct);
 800338a:	f107 0314 	add.w	r3, r7, #20
 800338e:	4619      	mov	r1, r3
 8003390:	4807      	ldr	r0, [pc, #28]	; (80033b0 <HAL_TIM_MspPostInit+0x10c>)
 8003392:	f001 fd4d 	bl	8004e30 <HAL_GPIO_Init>
}
 8003396:	bf00      	nop
 8003398:	3728      	adds	r7, #40	; 0x28
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40010000 	.word	0x40010000
 80033a4:	40023800 	.word	0x40023800
 80033a8:	40020000 	.word	0x40020000
 80033ac:	40000400 	.word	0x40000400
 80033b0:	40020800 	.word	0x40020800
 80033b4:	40010400 	.word	0x40010400

080033b8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80033bc:	4b11      	ldr	r3, [pc, #68]	; (8003404 <MX_USART3_UART_Init+0x4c>)
 80033be:	4a12      	ldr	r2, [pc, #72]	; (8003408 <MX_USART3_UART_Init+0x50>)
 80033c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80033c2:	4b10      	ldr	r3, [pc, #64]	; (8003404 <MX_USART3_UART_Init+0x4c>)
 80033c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80033ca:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <MX_USART3_UART_Init+0x4c>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033d0:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <MX_USART3_UART_Init+0x4c>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033d6:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <MX_USART3_UART_Init+0x4c>)
 80033d8:	2200      	movs	r2, #0
 80033da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033dc:	4b09      	ldr	r3, [pc, #36]	; (8003404 <MX_USART3_UART_Init+0x4c>)
 80033de:	220c      	movs	r2, #12
 80033e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033e2:	4b08      	ldr	r3, [pc, #32]	; (8003404 <MX_USART3_UART_Init+0x4c>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033e8:	4b06      	ldr	r3, [pc, #24]	; (8003404 <MX_USART3_UART_Init+0x4c>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80033ee:	4805      	ldr	r0, [pc, #20]	; (8003404 <MX_USART3_UART_Init+0x4c>)
 80033f0:	f005 f84e 	bl	8008490 <HAL_UART_Init>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80033fa:	f7fe ffdd 	bl	80023b8 <Error_Handler>
  }

}
 80033fe:	bf00      	nop
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	200005fc 	.word	0x200005fc
 8003408:	40004800 	.word	0x40004800

0800340c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b08a      	sub	sp, #40	; 0x28
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003414:	f107 0314 	add.w	r3, r7, #20
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a30      	ldr	r2, [pc, #192]	; (80034ec <HAL_UART_MspInit+0xe0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d15a      	bne.n	80034e4 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	4b2f      	ldr	r3, [pc, #188]	; (80034f0 <HAL_UART_MspInit+0xe4>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	4a2e      	ldr	r2, [pc, #184]	; (80034f0 <HAL_UART_MspInit+0xe4>)
 8003438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800343c:	6413      	str	r3, [r2, #64]	; 0x40
 800343e:	4b2c      	ldr	r3, [pc, #176]	; (80034f0 <HAL_UART_MspInit+0xe4>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	4b28      	ldr	r3, [pc, #160]	; (80034f0 <HAL_UART_MspInit+0xe4>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	4a27      	ldr	r2, [pc, #156]	; (80034f0 <HAL_UART_MspInit+0xe4>)
 8003454:	f043 0308 	orr.w	r3, r3, #8
 8003458:	6313      	str	r3, [r2, #48]	; 0x30
 800345a:	4b25      	ldr	r3, [pc, #148]	; (80034f0 <HAL_UART_MspInit+0xe4>)
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 8003466:	f44f 7340 	mov.w	r3, #768	; 0x300
 800346a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346c:	2302      	movs	r3, #2
 800346e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003470:	2300      	movs	r3, #0
 8003472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003474:	2303      	movs	r3, #3
 8003476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003478:	2307      	movs	r3, #7
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800347c:	f107 0314 	add.w	r3, r7, #20
 8003480:	4619      	mov	r1, r3
 8003482:	481c      	ldr	r0, [pc, #112]	; (80034f4 <HAL_UART_MspInit+0xe8>)
 8003484:	f001 fcd4 	bl	8004e30 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003488:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <HAL_UART_MspInit+0xec>)
 800348a:	4a1c      	ldr	r2, [pc, #112]	; (80034fc <HAL_UART_MspInit+0xf0>)
 800348c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800348e:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <HAL_UART_MspInit+0xec>)
 8003490:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003494:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003496:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <HAL_UART_MspInit+0xec>)
 8003498:	2200      	movs	r2, #0
 800349a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800349c:	4b16      	ldr	r3, [pc, #88]	; (80034f8 <HAL_UART_MspInit+0xec>)
 800349e:	2200      	movs	r2, #0
 80034a0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034a2:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <HAL_UART_MspInit+0xec>)
 80034a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034a8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034aa:	4b13      	ldr	r3, [pc, #76]	; (80034f8 <HAL_UART_MspInit+0xec>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034b0:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <HAL_UART_MspInit+0xec>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80034b6:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <HAL_UART_MspInit+0xec>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034bc:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <HAL_UART_MspInit+0xec>)
 80034be:	2200      	movs	r2, #0
 80034c0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034c2:	4b0d      	ldr	r3, [pc, #52]	; (80034f8 <HAL_UART_MspInit+0xec>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80034c8:	480b      	ldr	r0, [pc, #44]	; (80034f8 <HAL_UART_MspInit+0xec>)
 80034ca:	f001 f941 	bl	8004750 <HAL_DMA_Init>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80034d4:	f7fe ff70 	bl	80023b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a07      	ldr	r2, [pc, #28]	; (80034f8 <HAL_UART_MspInit+0xec>)
 80034dc:	635a      	str	r2, [r3, #52]	; 0x34
 80034de:	4a06      	ldr	r2, [pc, #24]	; (80034f8 <HAL_UART_MspInit+0xec>)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80034e4:	bf00      	nop
 80034e6:	3728      	adds	r7, #40	; 0x28
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40004800 	.word	0x40004800
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40020c00 	.word	0x40020c00
 80034f8:	2000059c 	.word	0x2000059c
 80034fc:	40026028 	.word	0x40026028

08003500 <joystick_Init>:
static int joyPosBuffer[2][5] = {0};
static int joy_pos_buffer_cnt = 0;
static const float JoyForwardAngle = 1.57;
static const float JoyForwardAngleDeadzone = 0.1;

void joystick_Init(void){
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  memset(joyPosBuffer, 0, sizeof(joyPosBuffer));
 8003504:	2228      	movs	r2, #40	; 0x28
 8003506:	2100      	movs	r1, #0
 8003508:	4802      	ldr	r0, [pc, #8]	; (8003514 <joystick_Init+0x14>)
 800350a:	f005 fe0b 	bl	8009124 <memset>
}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000294 	.word	0x20000294

08003518 <joystickCalculatePos>:

void joystickCalculatePos(void)
{
 8003518:	b5b0      	push	{r4, r5, r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
  // update joystick reading into buffer array
  if (joy_pos_buffer_cnt == JoyPosBufferSize)
 800351e:	4bc2      	ldr	r3, [pc, #776]	; (8003828 <joystickCalculatePos+0x310>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2205      	movs	r2, #5
 8003524:	4293      	cmp	r3, r2
 8003526:	d102      	bne.n	800352e <joystickCalculatePos+0x16>
    joy_pos_buffer_cnt = 0;
 8003528:	4bbf      	ldr	r3, [pc, #764]	; (8003828 <joystickCalculatePos+0x310>)
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]

  joyPosBuffer[0][joy_pos_buffer_cnt] = tempJoyRawDataX - JoystickCenterX;
 800352e:	4bbf      	ldr	r3, [pc, #764]	; (800382c <joystickCalculatePos+0x314>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	f643 7148 	movw	r1, #16200	; 0x3f48
 8003536:	4bbc      	ldr	r3, [pc, #752]	; (8003828 <joystickCalculatePos+0x310>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	1a52      	subs	r2, r2, r1
 800353c:	49bc      	ldr	r1, [pc, #752]	; (8003830 <joystickCalculatePos+0x318>)
 800353e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  joyPosBuffer[1][joy_pos_buffer_cnt] = tempJoyRawDataY - JoystickCenterY;
 8003542:	4bbc      	ldr	r3, [pc, #752]	; (8003834 <joystickCalculatePos+0x31c>)
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 800354a:	4bb7      	ldr	r3, [pc, #732]	; (8003828 <joystickCalculatePos+0x310>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	1a52      	subs	r2, r2, r1
 8003550:	49b7      	ldr	r1, [pc, #732]	; (8003830 <joystickCalculatePos+0x318>)
 8003552:	3305      	adds	r3, #5
 8003554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  // calculate joystick position average from the buffer
  int sum_x = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	60fb      	str	r3, [r7, #12]
  int sum_y = 0;
 800355c:	2300      	movs	r3, #0
 800355e:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < JoyPosBufferSize; i++)
 8003560:	2300      	movs	r3, #0
 8003562:	607b      	str	r3, [r7, #4]
 8003564:	e011      	b.n	800358a <joystickCalculatePos+0x72>
  {
    sum_x += joyPosBuffer[0][i];
 8003566:	4ab2      	ldr	r2, [pc, #712]	; (8003830 <joystickCalculatePos+0x318>)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4413      	add	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
    sum_y += joyPosBuffer[1][i];
 8003574:	4aae      	ldr	r2, [pc, #696]	; (8003830 <joystickCalculatePos+0x318>)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3305      	adds	r3, #5
 800357a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	4413      	add	r3, r2
 8003582:	60bb      	str	r3, [r7, #8]
  for (int i = 0; i < JoyPosBufferSize; i++)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3301      	adds	r3, #1
 8003588:	607b      	str	r3, [r7, #4]
 800358a:	2205      	movs	r2, #5
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4293      	cmp	r3, r2
 8003590:	dbe9      	blt.n	8003566 <joystickCalculatePos+0x4e>
  }

  hJoystick.x = sum_x / JoyPosBufferSize;
 8003592:	2205      	movs	r2, #5
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	fb93 f3f2 	sdiv	r3, r3, r2
 800359a:	b21a      	sxth	r2, r3
 800359c:	4ba6      	ldr	r3, [pc, #664]	; (8003838 <joystickCalculatePos+0x320>)
 800359e:	801a      	strh	r2, [r3, #0]
  hJoystick.y = sum_y / JoyPosBufferSize;
 80035a0:	2205      	movs	r2, #5
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80035a8:	b21a      	sxth	r2, r3
 80035aa:	4ba3      	ldr	r3, [pc, #652]	; (8003838 <joystickCalculatePos+0x320>)
 80035ac:	805a      	strh	r2, [r3, #2]

  // calculate magnitude and angle
  hJoystick.magnitude = sqrt(pow(hJoystick.x, 2) + pow(hJoystick.y,2));
 80035ae:	4ba2      	ldr	r3, [pc, #648]	; (8003838 <joystickCalculatePos+0x320>)
 80035b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fc ff6d 	bl	8000494 <__aeabi_i2d>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	ed9f 1b96 	vldr	d1, [pc, #600]	; 8003818 <joystickCalculatePos+0x300>
 80035c2:	ec43 2b10 	vmov	d0, r2, r3
 80035c6:	f006 f809 	bl	80095dc <pow>
 80035ca:	ec55 4b10 	vmov	r4, r5, d0
 80035ce:	4b9a      	ldr	r3, [pc, #616]	; (8003838 <joystickCalculatePos+0x320>)
 80035d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fc ff5d 	bl	8000494 <__aeabi_i2d>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	ed9f 1b8e 	vldr	d1, [pc, #568]	; 8003818 <joystickCalculatePos+0x300>
 80035e2:	ec43 2b10 	vmov	d0, r2, r3
 80035e6:	f005 fff9 	bl	80095dc <pow>
 80035ea:	ec53 2b10 	vmov	r2, r3, d0
 80035ee:	4620      	mov	r0, r4
 80035f0:	4629      	mov	r1, r5
 80035f2:	f7fc fe03 	bl	80001fc <__adddf3>
 80035f6:	4602      	mov	r2, r0
 80035f8:	460b      	mov	r3, r1
 80035fa:	ec43 2b17 	vmov	d7, r2, r3
 80035fe:	eeb0 0a47 	vmov.f32	s0, s14
 8003602:	eef0 0a67 	vmov.f32	s1, s15
 8003606:	f006 f897 	bl	8009738 <sqrt>
 800360a:	ec53 2b10 	vmov	r2, r3, d0
 800360e:	4610      	mov	r0, r2
 8003610:	4619      	mov	r1, r3
 8003612:	f7fd faa1 	bl	8000b58 <__aeabi_d2f>
 8003616:	4603      	mov	r3, r0
 8003618:	4a87      	ldr	r2, [pc, #540]	; (8003838 <joystickCalculatePos+0x320>)
 800361a:	6053      	str	r3, [r2, #4]
  hJoystick.angle = atan2(hJoystick.y, hJoystick.x);
 800361c:	4b86      	ldr	r3, [pc, #536]	; (8003838 <joystickCalculatePos+0x320>)
 800361e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003622:	4618      	mov	r0, r3
 8003624:	f7fc ff36 	bl	8000494 <__aeabi_i2d>
 8003628:	4604      	mov	r4, r0
 800362a:	460d      	mov	r5, r1
 800362c:	4b82      	ldr	r3, [pc, #520]	; (8003838 <joystickCalculatePos+0x320>)
 800362e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003632:	4618      	mov	r0, r3
 8003634:	f7fc ff2e 	bl	8000494 <__aeabi_i2d>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	ec43 2b11 	vmov	d1, r2, r3
 8003640:	ec45 4b10 	vmov	d0, r4, r5
 8003644:	f005 ffc8 	bl	80095d8 <atan2>
 8003648:	ec53 2b10 	vmov	r2, r3, d0
 800364c:	4610      	mov	r0, r2
 800364e:	4619      	mov	r1, r3
 8003650:	f7fd fa82 	bl	8000b58 <__aeabi_d2f>
 8003654:	4603      	mov	r3, r0
 8003656:	4a78      	ldr	r2, [pc, #480]	; (8003838 <joystickCalculatePos+0x320>)
 8003658:	6093      	str	r3, [r2, #8]

  // limit magnitude
  if (hJoystick.magnitude > JoystickMagnitudeMax)
 800365a:	4b77      	ldr	r3, [pc, #476]	; (8003838 <joystickCalculatePos+0x320>)
 800365c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003660:	eddf 7a76 	vldr	s15, [pc, #472]	; 800383c <joystickCalculatePos+0x324>
 8003664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003668:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800366c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003670:	dd06      	ble.n	8003680 <joystickCalculatePos+0x168>
    hJoystick.magnitude = JoystickMagnitudeMax;
 8003672:	eddf 7a72 	vldr	s15, [pc, #456]	; 800383c <joystickCalculatePos+0x324>
 8003676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800367a:	4b6f      	ldr	r3, [pc, #444]	; (8003838 <joystickCalculatePos+0x320>)
 800367c:	edc3 7a01 	vstr	s15, [r3, #4]

  // filter joystick forward deadzone
  if (hJoystick.angle > JoyForwardAngle - JoyForwardAngleDeadzone &&
 8003680:	4b6d      	ldr	r3, [pc, #436]	; (8003838 <joystickCalculatePos+0x320>)
 8003682:	ed93 7a02 	vldr	s14, [r3, #8]
 8003686:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8003840 <joystickCalculatePos+0x328>
 800368a:	eddf 7a6e 	vldr	s15, [pc, #440]	; 8003844 <joystickCalculatePos+0x32c>
 800368e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003692:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369a:	dd10      	ble.n	80036be <joystickCalculatePos+0x1a6>
      hJoystick.angle < JoyForwardAngle + JoyForwardAngleDeadzone)
 800369c:	4b66      	ldr	r3, [pc, #408]	; (8003838 <joystickCalculatePos+0x320>)
 800369e:	ed93 7a02 	vldr	s14, [r3, #8]
 80036a2:	eddf 6a67 	vldr	s13, [pc, #412]	; 8003840 <joystickCalculatePos+0x328>
 80036a6:	eddf 7a67 	vldr	s15, [pc, #412]	; 8003844 <joystickCalculatePos+0x32c>
 80036aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
  if (hJoystick.angle > JoyForwardAngle - JoyForwardAngleDeadzone &&
 80036ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b6:	d502      	bpl.n	80036be <joystickCalculatePos+0x1a6>
    hJoystick.angle = JoyForwardAngle;
 80036b8:	4a63      	ldr	r2, [pc, #396]	; (8003848 <joystickCalculatePos+0x330>)
 80036ba:	4b5f      	ldr	r3, [pc, #380]	; (8003838 <joystickCalculatePos+0x320>)
 80036bc:	609a      	str	r2, [r3, #8]

  // filter joystick backward deadzone
  if (hJoystick.angle > -(JoyForwardAngle + JoyForwardAngleDeadzone) &&
 80036be:	4b5e      	ldr	r3, [pc, #376]	; (8003838 <joystickCalculatePos+0x320>)
 80036c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80036c4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8003840 <joystickCalculatePos+0x328>
 80036c8:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8003844 <joystickCalculatePos+0x32c>
 80036cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036d0:	eef1 7a67 	vneg.f32	s15, s15
 80036d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036dc:	dd16      	ble.n	800370c <joystickCalculatePos+0x1f4>
      hJoystick.angle < -(JoyForwardAngle - JoyForwardAngleDeadzone))
 80036de:	4b56      	ldr	r3, [pc, #344]	; (8003838 <joystickCalculatePos+0x320>)
 80036e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80036e4:	eddf 6a56 	vldr	s13, [pc, #344]	; 8003840 <joystickCalculatePos+0x328>
 80036e8:	eddf 7a56 	vldr	s15, [pc, #344]	; 8003844 <joystickCalculatePos+0x32c>
 80036ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80036f0:	eef1 7a67 	vneg.f32	s15, s15
  if (hJoystick.angle > -(JoyForwardAngle + JoyForwardAngleDeadzone) &&
 80036f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036fc:	d506      	bpl.n	800370c <joystickCalculatePos+0x1f4>
    hJoystick.angle = -JoyForwardAngle;
 80036fe:	eddf 7a50 	vldr	s15, [pc, #320]	; 8003840 <joystickCalculatePos+0x328>
 8003702:	eef1 7a67 	vneg.f32	s15, s15
 8003706:	4b4c      	ldr	r3, [pc, #304]	; (8003838 <joystickCalculatePos+0x320>)
 8003708:	edc3 7a02 	vstr	s15, [r3, #8]

  // normalize joystick reading
  hJoystick.linear = hJoystick.magnitude/JoystickMagnitudeMax * sin(hJoystick.angle);
 800370c:	4b4a      	ldr	r3, [pc, #296]	; (8003838 <joystickCalculatePos+0x320>)
 800370e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003712:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800383c <joystickCalculatePos+0x324>
 8003716:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800371a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800371e:	ee16 0a90 	vmov	r0, s13
 8003722:	f7fc fec9 	bl	80004b8 <__aeabi_f2d>
 8003726:	4604      	mov	r4, r0
 8003728:	460d      	mov	r5, r1
 800372a:	4b43      	ldr	r3, [pc, #268]	; (8003838 <joystickCalculatePos+0x320>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	4618      	mov	r0, r3
 8003730:	f7fc fec2 	bl	80004b8 <__aeabi_f2d>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	ec43 2b10 	vmov	d0, r2, r3
 800373c:	f005 fef8 	bl	8009530 <sin>
 8003740:	ec53 2b10 	vmov	r2, r3, d0
 8003744:	4620      	mov	r0, r4
 8003746:	4629      	mov	r1, r5
 8003748:	f7fc ff0e 	bl	8000568 <__aeabi_dmul>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4610      	mov	r0, r2
 8003752:	4619      	mov	r1, r3
 8003754:	f7fd fa00 	bl	8000b58 <__aeabi_d2f>
 8003758:	4603      	mov	r3, r0
 800375a:	4a37      	ldr	r2, [pc, #220]	; (8003838 <joystickCalculatePos+0x320>)
 800375c:	60d3      	str	r3, [r2, #12]
  hJoystick.angular = hJoystick.magnitude/JoystickMagnitudeMax * cos(hJoystick.angle);
 800375e:	4b36      	ldr	r3, [pc, #216]	; (8003838 <joystickCalculatePos+0x320>)
 8003760:	ed93 7a01 	vldr	s14, [r3, #4]
 8003764:	eddf 7a35 	vldr	s15, [pc, #212]	; 800383c <joystickCalculatePos+0x324>
 8003768:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800376c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003770:	ee16 0a90 	vmov	r0, s13
 8003774:	f7fc fea0 	bl	80004b8 <__aeabi_f2d>
 8003778:	4604      	mov	r4, r0
 800377a:	460d      	mov	r5, r1
 800377c:	4b2e      	ldr	r3, [pc, #184]	; (8003838 <joystickCalculatePos+0x320>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	4618      	mov	r0, r3
 8003782:	f7fc fe99 	bl	80004b8 <__aeabi_f2d>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	ec43 2b10 	vmov	d0, r2, r3
 800378e:	f005 fe73 	bl	8009478 <cos>
 8003792:	ec53 2b10 	vmov	r2, r3, d0
 8003796:	4620      	mov	r0, r4
 8003798:	4629      	mov	r1, r5
 800379a:	f7fc fee5 	bl	8000568 <__aeabi_dmul>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4610      	mov	r0, r2
 80037a4:	4619      	mov	r1, r3
 80037a6:	f7fd f9d7 	bl	8000b58 <__aeabi_d2f>
 80037aa:	4603      	mov	r3, r0
 80037ac:	4a22      	ldr	r2, [pc, #136]	; (8003838 <joystickCalculatePos+0x320>)
 80037ae:	6113      	str	r3, [r2, #16]

  if (fabs(hJoystick.linear) < 0.05)
 80037b0:	4b21      	ldr	r3, [pc, #132]	; (8003838 <joystickCalculatePos+0x320>)
 80037b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80037b6:	eef0 7ae7 	vabs.f32	s15, s15
 80037ba:	ee17 0a90 	vmov	r0, s15
 80037be:	f7fc fe7b 	bl	80004b8 <__aeabi_f2d>
 80037c2:	a317      	add	r3, pc, #92	; (adr r3, 8003820 <joystickCalculatePos+0x308>)
 80037c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c8:	f7fd f940 	bl	8000a4c <__aeabi_dcmplt>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <joystickCalculatePos+0x2c2>
    hJoystick.linear = 0;
 80037d2:	4b19      	ldr	r3, [pc, #100]	; (8003838 <joystickCalculatePos+0x320>)
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	60da      	str	r2, [r3, #12]
  if (fabs(hJoystick.angular) < 0.05)
 80037da:	4b17      	ldr	r3, [pc, #92]	; (8003838 <joystickCalculatePos+0x320>)
 80037dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80037e0:	eef0 7ae7 	vabs.f32	s15, s15
 80037e4:	ee17 0a90 	vmov	r0, s15
 80037e8:	f7fc fe66 	bl	80004b8 <__aeabi_f2d>
 80037ec:	a30c      	add	r3, pc, #48	; (adr r3, 8003820 <joystickCalculatePos+0x308>)
 80037ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f2:	f7fd f92b 	bl	8000a4c <__aeabi_dcmplt>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <joystickCalculatePos+0x2ec>
    hJoystick.angular = 0;
 80037fc:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <joystickCalculatePos+0x320>)
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	611a      	str	r2, [r3, #16]

  joy_pos_buffer_cnt++;
 8003804:	4b08      	ldr	r3, [pc, #32]	; (8003828 <joystickCalculatePos+0x310>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3301      	adds	r3, #1
 800380a:	4a07      	ldr	r2, [pc, #28]	; (8003828 <joystickCalculatePos+0x310>)
 800380c:	6013      	str	r3, [r2, #0]
}
 800380e:	bf00      	nop
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bdb0      	pop	{r4, r5, r7, pc}
 8003816:	bf00      	nop
 8003818:	00000000 	.word	0x00000000
 800381c:	40000000 	.word	0x40000000
 8003820:	9999999a 	.word	0x9999999a
 8003824:	3fa99999 	.word	0x3fa99999
 8003828:	200002bc 	.word	0x200002bc
 800382c:	20000494 	.word	0x20000494
 8003830:	20000294 	.word	0x20000294
 8003834:	200003c0 	.word	0x200003c0
 8003838:	2000063c 	.word	0x2000063c
 800383c:	00002af8 	.word	0x00002af8
 8003840:	3fc8f5c3 	.word	0x3fc8f5c3
 8003844:	3dcccccd 	.word	0x3dcccccd
 8003848:	3fc8f5c3 	.word	0x3fc8f5c3

0800384c <wheelSpeedControl_Init>:

void wheelSpeedControl_Init(WheelSpeed* wheel, float max_lin_speed, float max_ang_speed)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	ed87 0a02 	vstr	s0, [r7, #8]
 8003858:	edc7 0a01 	vstr	s1, [r7, #4]
  wheel->stable_cnt = 0;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	611a      	str	r2, [r3, #16]
  wheel->cur_r = 0.0f;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	605a      	str	r2, [r3, #4]
  wheel->cur_l = 0.0f;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	601a      	str	r2, [r3, #0]
  wheel->pre_l= 0.0f;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f04f 0200 	mov.w	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
  wheel->pre_r = 0.0f;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	60da      	str	r2, [r3, #12]
  wheel->max_angular_speed = max_ang_speed;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	619a      	str	r2, [r3, #24]
  wheel->max_linear_speed = max_lin_speed;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	615a      	str	r2, [r3, #20]
  wheel->start_from_stationary = false;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	771a      	strb	r2, [r3, #28]
}
 8003894:	bf00      	nop
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <wheel_Control>:

void wheel_Control(WheelSpeed* wheel)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  if (wheel->stable_cnt < 100)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	2b63      	cmp	r3, #99	; 0x63
 80038ae:	dc05      	bgt.n	80038bc <wheel_Control+0x1c>
  {
      wheel->stable_cnt++;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	611a      	str	r2, [r3, #16]
    return;
 80038ba:	e1cd      	b.n	8003c58 <wheel_Control+0x3b8>
  }

  joystickCalculatePos();
 80038bc:	f7ff fe2c 	bl	8003518 <joystickCalculatePos>
  wheelCalculateSpeed(wheel);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 f9cd 	bl	8003c60 <wheelCalculateSpeed>

  if (wheel->pre_l == 0 && wheel->pre_r == 0)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80038cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80038d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d4:	d10a      	bne.n	80038ec <wheel_Control+0x4c>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80038dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80038e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038e4:	d102      	bne.n	80038ec <wheel_Control+0x4c>
    wheel->start_from_stationary = true;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	771a      	strb	r2, [r3, #28]

  if (hJoystick.magnitude > JoystickMagnitudeMin)
 80038ec:	4bae      	ldr	r3, [pc, #696]	; (8003ba8 <wheel_Control+0x308>)
 80038ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80038f2:	eddf 7aae 	vldr	s15, [pc, #696]	; 8003bac <wheel_Control+0x30c>
 80038f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003902:	f340 80b3 	ble.w	8003a6c <wheel_Control+0x1cc>
  {
    float left_speed_step = wheel->left_speed_step;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	61fb      	str	r3, [r7, #28]
    float right_speed_step = wheel->right_speed_step;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	61bb      	str	r3, [r7, #24]

    if (wheel->start_from_stationary)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	7f1b      	ldrb	r3, [r3, #28]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d03c      	beq.n	8003994 <wheel_Control+0xf4>
    {
//      float accel_loop = 100.0f;
      left_speed_step = fabs( wheel->cur_l) / wheel->accel_loop;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	edd3 7a00 	vldr	s15, [r3]
 8003920:	eef0 6ae7 	vabs.f32	s13, s15
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	ed93 7a08 	vldr	s14, [r3, #32]
 800392a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800392e:	edc7 7a07 	vstr	s15, [r7, #28]
      right_speed_step = fabs( wheel->cur_l) / wheel->accel_loop;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	edd3 7a00 	vldr	s15, [r3]
 8003938:	eef0 6ae7 	vabs.f32	s13, s15
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	ed93 7a08 	vldr	s14, [r3, #32]
 8003942:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003946:	edc7 7a06 	vstr	s15, [r7, #24]

      if (fabs(wheel->pre_l) > 0.5f * wheel->max_angular_speed &&
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003950:	eeb0 7ae7 	vabs.f32	s14, s15
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	edd3 7a06 	vldr	s15, [r3, #24]
 800395a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800395e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003962:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800396a:	dd13      	ble.n	8003994 <wheel_Control+0xf4>
          fabs(wheel->pre_r) > 0.5f * wheel->max_angular_speed)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003972:	eeb0 7ae7 	vabs.f32	s14, s15
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	edd3 7a06 	vldr	s15, [r3, #24]
 800397c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003980:	ee67 7aa6 	vmul.f32	s15, s15, s13
      if (fabs(wheel->pre_l) > 0.5f * wheel->max_angular_speed &&
 8003984:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800398c:	dd02      	ble.n	8003994 <wheel_Control+0xf4>
      {
	  wheel->start_from_stationary = false;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	771a      	strb	r2, [r3, #28]
      }
    }

    if (( wheel->cur_l - wheel->pre_l) > left_speed_step)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	ed93 7a00 	vldr	s14, [r3]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	edd3 7a02 	vldr	s15, [r3, #8]
 80039a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039a4:	ed97 7a07 	vldr	s14, [r7, #28]
 80039a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b0:	d50a      	bpl.n	80039c8 <wheel_Control+0x128>
      wheel->cur_l = wheel->pre_l + left_speed_step;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	ed93 7a02 	vldr	s14, [r3, #8]
 80039b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80039bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	edc3 7a00 	vstr	s15, [r3]
 80039c6:	e01a      	b.n	80039fe <wheel_Control+0x15e>
    else if ((wheel->cur_l - wheel->pre_l) < -left_speed_step)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	ed93 7a00 	vldr	s14, [r3]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80039d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80039dc:	eef1 7a67 	vneg.f32	s15, s15
 80039e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e8:	d509      	bpl.n	80039fe <wheel_Control+0x15e>
      wheel->cur_l = wheel->pre_l - left_speed_step;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	ed93 7a02 	vldr	s14, [r3, #8]
 80039f0:	edd7 7a07 	vldr	s15, [r7, #28]
 80039f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	edc3 7a00 	vstr	s15, [r3]

    if ((wheel->cur_r - wheel->pre_r) > right_speed_step)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a0e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003a12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a1a:	d50a      	bpl.n	8003a32 <wheel_Control+0x192>
      wheel->cur_r = wheel->pre_r + right_speed_step;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003a22:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	edc3 7a01 	vstr	s15, [r3, #4]
 8003a30:	e0c2      	b.n	8003bb8 <wheel_Control+0x318>
    else if ((wheel->cur_r - wheel->pre_r) < -right_speed_step)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a42:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a46:	eef1 7a67 	vneg.f32	s15, s15
 8003a4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a52:	f140 80b1 	bpl.w	8003bb8 <wheel_Control+0x318>
      wheel->cur_r = wheel->pre_r - right_speed_step;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	ed93 7a03 	vldr	s14, [r3, #12]
 8003a5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	edc3 7a01 	vstr	s15, [r3, #4]
 8003a6a:	e0a5      	b.n	8003bb8 <wheel_Control+0x318>
  }
  else
  {
//    float decel_loop = 150.0f;

    float zero_speed = wheel->max_linear_speed / wheel->decel_loop;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	edd3 6a05 	vldr	s13, [r3, #20]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a7c:	edc7 7a05 	vstr	s15, [r7, #20]
    if (fabs(wheel->cur_l) < zero_speed)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	edd3 7a00 	vldr	s15, [r3]
 8003a86:	eef0 7ae7 	vabs.f32	s15, s15
 8003a8a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a96:	dd03      	ble.n	8003aa0 <wheel_Control+0x200>
      wheel->cur_l = 0;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
    if (fabs(wheel->cur_r) < zero_speed)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	edd3 7a01 	vldr	s15, [r3, #4]
 8003aa6:	eef0 7ae7 	vabs.f32	s15, s15
 8003aaa:	ed97 7a05 	vldr	s14, [r7, #20]
 8003aae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab6:	dd03      	ble.n	8003ac0 <wheel_Control+0x220>
      wheel->cur_r = 0;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	605a      	str	r2, [r3, #4]

    float left_speed_step = fabs(wheel->cur_l) / wheel->decel_loop;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	edd3 7a00 	vldr	s15, [r3]
 8003ac6:	eef0 6ae7 	vabs.f32	s13, s15
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ad4:	edc7 7a04 	vstr	s15, [r7, #16]
    float right_speed_step = fabs(wheel->cur_r) / wheel->decel_loop;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ade:	eef0 6ae7 	vabs.f32	s13, s15
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aec:	edc7 7a03 	vstr	s15, [r7, #12]
    
    if (wheel->cur_l > left_speed_step)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	edd3 7a00 	vldr	s15, [r3]
 8003af6:	ed97 7a04 	vldr	s14, [r7, #16]
 8003afa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b02:	d50a      	bpl.n	8003b1a <wheel_Control+0x27a>
      wheel->cur_l = wheel->pre_r - left_speed_step;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	edc3 7a00 	vstr	s15, [r3]
 8003b18:	e01a      	b.n	8003b50 <wheel_Control+0x2b0>
    else if (wheel->cur_l < -left_speed_step)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	ed93 7a00 	vldr	s14, [r3]
 8003b20:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b24:	eef1 7a67 	vneg.f32	s15, s15
 8003b28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b30:	d50a      	bpl.n	8003b48 <wheel_Control+0x2a8>
      wheel->cur_l = wheel->pre_r + left_speed_step;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b38:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	edc3 7a00 	vstr	s15, [r3]
 8003b46:	e003      	b.n	8003b50 <wheel_Control+0x2b0>
    else
      wheel->cur_l = 0;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
    
    if (wheel->cur_r > right_speed_step)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b56:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b62:	d50a      	bpl.n	8003b7a <wheel_Control+0x2da>
      wheel->cur_r = wheel->pre_r - right_speed_step;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	edc3 7a01 	vstr	s15, [r3, #4]
 8003b78:	e01e      	b.n	8003bb8 <wheel_Control+0x318>
    else if (wheel->cur_r < -right_speed_step)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003b80:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b84:	eef1 7a67 	vneg.f32	s15, s15
 8003b88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b90:	d50e      	bpl.n	8003bb0 <wheel_Control+0x310>
      wheel->cur_r = wheel->pre_r + right_speed_step;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b98:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	edc3 7a01 	vstr	s15, [r3, #4]
 8003ba6:	e007      	b.n	8003bb8 <wheel_Control+0x318>
 8003ba8:	2000063c 	.word	0x2000063c
 8003bac:	00000bb8 	.word	0x00000bb8
    else
      wheel->cur_r = 0;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	605a      	str	r2, [r3, #4]
  }

  if (wheel->cur_l > wheel->max_linear_speed)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	ed93 7a00 	vldr	s14, [r3]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	edd3 7a05 	vldr	s15, [r3, #20]
 8003bc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bcc:	dd03      	ble.n	8003bd6 <wheel_Control+0x336>
    wheel->cur_l = wheel->max_linear_speed;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695a      	ldr	r2, [r3, #20]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	601a      	str	r2, [r3, #0]
  if (wheel->cur_r > wheel->max_linear_speed)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	ed93 7a01 	vldr	s14, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	edd3 7a05 	vldr	s15, [r3, #20]
 8003be2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bea:	dd03      	ble.n	8003bf4 <wheel_Control+0x354>
    wheel->cur_r = wheel->max_linear_speed;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	695a      	ldr	r2, [r3, #20]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	605a      	str	r2, [r3, #4]

  if (wheel->cur_l < -wheel->max_linear_speed)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	ed93 7a00 	vldr	s14, [r3]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c00:	eef1 7a67 	vneg.f32	s15, s15
 8003c04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c0c:	d507      	bpl.n	8003c1e <wheel_Control+0x37e>
    wheel->cur_l = -wheel->max_linear_speed;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c14:	eef1 7a67 	vneg.f32	s15, s15
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	edc3 7a00 	vstr	s15, [r3]
  if (wheel->cur_r < -wheel->max_linear_speed)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	ed93 7a01 	vldr	s14, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c2a:	eef1 7a67 	vneg.f32	s15, s15
 8003c2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c36:	d507      	bpl.n	8003c48 <wheel_Control+0x3a8>
    wheel->cur_r = -wheel->max_linear_speed;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c3e:	eef1 7a67 	vneg.f32	s15, s15
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	edc3 7a01 	vstr	s15, [r3, #4]

  wheel->pre_l = wheel->cur_l;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	609a      	str	r2, [r3, #8]
  wheel->pre_r = wheel->cur_r;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	60da      	str	r2, [r3, #12]
  
}
 8003c58:	3720      	adds	r7, #32
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop

08003c60 <wheelCalculateSpeed>:



void wheelCalculateSpeed(WheelSpeed* wheel)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  float linearSpeed = wheel->max_linear_speed * hJoystick.linear;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	ed93 7a05 	vldr	s14, [r3, #20]
 8003c6e:	4b25      	ldr	r3, [pc, #148]	; (8003d04 <wheelCalculateSpeed+0xa4>)
 8003c70:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c78:	edc7 7a03 	vstr	s15, [r7, #12]
  float angularSpeed = wheel->max_angular_speed *  hJoystick.angular;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003c82:	4b20      	ldr	r3, [pc, #128]	; (8003d04 <wheelCalculateSpeed+0xa4>)
 8003c84:	edd3 7a04 	vldr	s15, [r3, #16]
 8003c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c8c:	edc7 7a02 	vstr	s15, [r7, #8]

  wheel->cur_l = linearSpeed + angularSpeed;
 8003c90:	ed97 7a03 	vldr	s14, [r7, #12]
 8003c94:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	edc3 7a00 	vstr	s15, [r3]
  wheel->cur_r = linearSpeed - angularSpeed;
 8003ca2:	ed97 7a03 	vldr	s14, [r7, #12]
 8003ca6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	edc3 7a01 	vstr	s15, [r3, #4]

  // direct step to 0 if speed is small enough
  if(fabs(wheel->cur_l) < 50)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	edd3 7a00 	vldr	s15, [r3]
 8003cba:	eef0 7ae7 	vabs.f32	s15, s15
 8003cbe:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003d08 <wheelCalculateSpeed+0xa8>
 8003cc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cca:	d503      	bpl.n	8003cd4 <wheelCalculateSpeed+0x74>
    wheel->cur_l = 0;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
  if(fabs(  wheel->cur_r) < 50)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	edd3 7a01 	vldr	s15, [r3, #4]
 8003cda:	eef0 7ae7 	vabs.f32	s15, s15
 8003cde:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8003d08 <wheelCalculateSpeed+0xa8>
 8003ce2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cea:	d400      	bmi.n	8003cee <wheelCalculateSpeed+0x8e>
    wheel->cur_r = 0;
}
 8003cec:	e003      	b.n	8003cf6 <wheelCalculateSpeed+0x96>
    wheel->cur_r = 0;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	605a      	str	r2, [r3, #4]
}
 8003cf6:	bf00      	nop
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	2000063c 	.word	0x2000063c
 8003d08:	42480000 	.word	0x42480000

08003d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d44 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d12:	e003      	b.n	8003d1c <LoopCopyDataInit>

08003d14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d14:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d1a:	3104      	adds	r1, #4

08003d1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d1c:	480b      	ldr	r0, [pc, #44]	; (8003d4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d1e:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d24:	d3f6      	bcc.n	8003d14 <CopyDataInit>
  ldr  r2, =_sbss
 8003d26:	4a0b      	ldr	r2, [pc, #44]	; (8003d54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d28:	e002      	b.n	8003d30 <LoopFillZerobss>

08003d2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d2c:	f842 3b04 	str.w	r3, [r2], #4

08003d30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d30:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d34:	d3f9      	bcc.n	8003d2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d36:	f7fe ffdd 	bl	8002cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d3a:	f005 f9cf 	bl	80090dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d3e:	f7fe f863 	bl	8001e08 <main>
  bx  lr    
 8003d42:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003d44:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003d48:	0800b8e8 	.word	0x0800b8e8
  ldr  r0, =_sdata
 8003d4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d50:	20000254 	.word	0x20000254
  ldr  r2, =_sbss
 8003d54:	20000258 	.word	0x20000258
  ldr  r3, = _ebss
 8003d58:	20000654 	.word	0x20000654

08003d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d5c:	e7fe      	b.n	8003d5c <ADC_IRQHandler>
	...

08003d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d64:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <HAL_Init+0x40>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a0d      	ldr	r2, [pc, #52]	; (8003da0 <HAL_Init+0x40>)
 8003d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d70:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <HAL_Init+0x40>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a0a      	ldr	r2, [pc, #40]	; (8003da0 <HAL_Init+0x40>)
 8003d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d7c:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <HAL_Init+0x40>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a07      	ldr	r2, [pc, #28]	; (8003da0 <HAL_Init+0x40>)
 8003d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d88:	2003      	movs	r0, #3
 8003d8a:	f000 fc83 	bl	8004694 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d8e:	2000      	movs	r0, #0
 8003d90:	f000 f808 	bl	8003da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d94:	f7fe ff32 	bl	8002bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40023c00 	.word	0x40023c00

08003da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dac:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <HAL_InitTick+0x54>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	4b12      	ldr	r3, [pc, #72]	; (8003dfc <HAL_InitTick+0x58>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	4619      	mov	r1, r3
 8003db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fc9b 	bl	80046fe <HAL_SYSTICK_Config>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e00e      	b.n	8003df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b0f      	cmp	r3, #15
 8003dd6:	d80a      	bhi.n	8003dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dd8:	2200      	movs	r2, #0
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003de0:	f000 fc63 	bl	80046aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003de4:	4a06      	ldr	r2, [pc, #24]	; (8003e00 <HAL_InitTick+0x5c>)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
 8003dec:	e000      	b.n	8003df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	200001e0 	.word	0x200001e0
 8003dfc:	200001e8 	.word	0x200001e8
 8003e00:	200001e4 	.word	0x200001e4

08003e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e08:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <HAL_IncTick+0x20>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <HAL_IncTick+0x24>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4413      	add	r3, r2
 8003e14:	4a04      	ldr	r2, [pc, #16]	; (8003e28 <HAL_IncTick+0x24>)
 8003e16:	6013      	str	r3, [r2, #0]
}
 8003e18:	bf00      	nop
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	200001e8 	.word	0x200001e8
 8003e28:	20000650 	.word	0x20000650

08003e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e30:	4b03      	ldr	r3, [pc, #12]	; (8003e40 <HAL_GetTick+0x14>)
 8003e32:	681b      	ldr	r3, [r3, #0]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20000650 	.word	0x20000650

08003e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e4c:	f7ff ffee 	bl	8003e2c <HAL_GetTick>
 8003e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e5c:	d005      	beq.n	8003e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e5e:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <HAL_Delay+0x44>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4413      	add	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e6a:	bf00      	nop
 8003e6c:	f7ff ffde 	bl	8003e2c <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d8f7      	bhi.n	8003e6c <HAL_Delay+0x28>
  {
  }
}
 8003e7c:	bf00      	nop
 8003e7e:	bf00      	nop
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	200001e8 	.word	0x200001e8

08003e8c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e0ed      	b.n	800407a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d102      	bne.n	8003eb0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fd fd34 	bl	8001918 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0202 	bic.w	r2, r2, #2
 8003ebe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ec0:	f7ff ffb4 	bl	8003e2c <HAL_GetTick>
 8003ec4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ec6:	e012      	b.n	8003eee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ec8:	f7ff ffb0 	bl	8003e2c <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b0a      	cmp	r3, #10
 8003ed4:	d90b      	bls.n	8003eee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2205      	movs	r2, #5
 8003ee6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e0c5      	b.n	800407a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1e5      	bne.n	8003ec8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f0c:	f7ff ff8e 	bl	8003e2c <HAL_GetTick>
 8003f10:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f12:	e012      	b.n	8003f3a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f14:	f7ff ff8a 	bl	8003e2c <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b0a      	cmp	r3, #10
 8003f20:	d90b      	bls.n	8003f3a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2205      	movs	r2, #5
 8003f32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e09f      	b.n	800407a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0e5      	beq.n	8003f14 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	7e1b      	ldrb	r3, [r3, #24]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d108      	bne.n	8003f62 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	e007      	b.n	8003f72 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	7e5b      	ldrb	r3, [r3, #25]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d108      	bne.n	8003f8c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	e007      	b.n	8003f9c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	7e9b      	ldrb	r3, [r3, #26]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d108      	bne.n	8003fb6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0220 	orr.w	r2, r2, #32
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	e007      	b.n	8003fc6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0220 	bic.w	r2, r2, #32
 8003fc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	7edb      	ldrb	r3, [r3, #27]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d108      	bne.n	8003fe0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0210 	bic.w	r2, r2, #16
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	e007      	b.n	8003ff0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0210 	orr.w	r2, r2, #16
 8003fee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	7f1b      	ldrb	r3, [r3, #28]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d108      	bne.n	800400a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0208 	orr.w	r2, r2, #8
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	e007      	b.n	800401a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0208 	bic.w	r2, r2, #8
 8004018:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	7f5b      	ldrb	r3, [r3, #29]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d108      	bne.n	8004034 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0204 	orr.w	r2, r2, #4
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	e007      	b.n	8004044 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0204 	bic.w	r2, r2, #4
 8004042:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	ea42 0103 	orr.w	r1, r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	1e5a      	subs	r2, r3, #1
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b08a      	sub	sp, #40	; 0x28
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800408a:	2300      	movs	r3, #0
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d07c      	beq.n	80041c2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d023      	beq.n	800411a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2201      	movs	r2, #1
 80040d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f983 	bl	80043f0 <HAL_CAN_TxMailbox0CompleteCallback>
 80040ea:	e016      	b.n	800411a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d004      	beq.n	8004100 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
 80040fe:	e00c      	b.n	800411a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d004      	beq.n	8004114 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
 8004112:	e002      	b.n	800411a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 f989 	bl	800442c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004120:	2b00      	cmp	r3, #0
 8004122:	d024      	beq.n	800416e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f44f 7280 	mov.w	r2, #256	; 0x100
 800412c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f963 	bl	8004404 <HAL_CAN_TxMailbox1CompleteCallback>
 800413e:	e016      	b.n	800416e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004146:	2b00      	cmp	r3, #0
 8004148:	d004      	beq.n	8004154 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004150:	627b      	str	r3, [r7, #36]	; 0x24
 8004152:	e00c      	b.n	800416e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800415a:	2b00      	cmp	r3, #0
 800415c:	d004      	beq.n	8004168 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004164:	627b      	str	r3, [r7, #36]	; 0x24
 8004166:	e002      	b.n	800416e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f969 	bl	8004440 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d024      	beq.n	80041c2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004180:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f943 	bl	8004418 <HAL_CAN_TxMailbox2CompleteCallback>
 8004192:	e016      	b.n	80041c2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d004      	beq.n	80041a8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a4:	627b      	str	r3, [r7, #36]	; 0x24
 80041a6:	e00c      	b.n	80041c2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d004      	beq.n	80041bc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ba:	e002      	b.n	80041c2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f949 	bl	8004454 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	f003 0308 	and.w	r3, r3, #8
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00c      	beq.n	80041e6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f003 0310 	and.w	r3, r3, #16
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d007      	beq.n	80041e6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2210      	movs	r2, #16
 80041e4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00b      	beq.n	8004208 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d006      	beq.n	8004208 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2208      	movs	r2, #8
 8004200:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f93a 	bl	800447c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d009      	beq.n	8004226 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0303 	and.w	r3, r3, #3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f921 	bl	8004468 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00c      	beq.n	800424a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f003 0310 	and.w	r3, r3, #16
 8004236:	2b00      	cmp	r3, #0
 8004238:	d007      	beq.n	800424a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004240:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2210      	movs	r2, #16
 8004248:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00b      	beq.n	800426c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d006      	beq.n	800426c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2208      	movs	r2, #8
 8004264:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f91c 	bl	80044a4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b00      	cmp	r3, #0
 8004274:	d009      	beq.n	800428a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	f003 0303 	and.w	r3, r3, #3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f903 	bl	8004490 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00b      	beq.n	80042ac <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f003 0310 	and.w	r3, r3, #16
 800429a:	2b00      	cmp	r3, #0
 800429c:	d006      	beq.n	80042ac <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2210      	movs	r2, #16
 80042a4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f906 	bl	80044b8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00b      	beq.n	80042ce <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d006      	beq.n	80042ce <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2208      	movs	r2, #8
 80042c6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f8ff 	bl	80044cc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d07b      	beq.n	80043d0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d072      	beq.n	80043c8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	f043 0302 	orr.w	r3, r3, #2
 8004318:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004320:	2b00      	cmp	r3, #0
 8004322:	d008      	beq.n	8004336 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	f043 0304 	orr.w	r3, r3, #4
 8004334:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800433c:	2b00      	cmp	r3, #0
 800433e:	d043      	beq.n	80043c8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004346:	2b00      	cmp	r3, #0
 8004348:	d03e      	beq.n	80043c8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004350:	2b60      	cmp	r3, #96	; 0x60
 8004352:	d02b      	beq.n	80043ac <HAL_CAN_IRQHandler+0x32a>
 8004354:	2b60      	cmp	r3, #96	; 0x60
 8004356:	d82e      	bhi.n	80043b6 <HAL_CAN_IRQHandler+0x334>
 8004358:	2b50      	cmp	r3, #80	; 0x50
 800435a:	d022      	beq.n	80043a2 <HAL_CAN_IRQHandler+0x320>
 800435c:	2b50      	cmp	r3, #80	; 0x50
 800435e:	d82a      	bhi.n	80043b6 <HAL_CAN_IRQHandler+0x334>
 8004360:	2b40      	cmp	r3, #64	; 0x40
 8004362:	d019      	beq.n	8004398 <HAL_CAN_IRQHandler+0x316>
 8004364:	2b40      	cmp	r3, #64	; 0x40
 8004366:	d826      	bhi.n	80043b6 <HAL_CAN_IRQHandler+0x334>
 8004368:	2b30      	cmp	r3, #48	; 0x30
 800436a:	d010      	beq.n	800438e <HAL_CAN_IRQHandler+0x30c>
 800436c:	2b30      	cmp	r3, #48	; 0x30
 800436e:	d822      	bhi.n	80043b6 <HAL_CAN_IRQHandler+0x334>
 8004370:	2b10      	cmp	r3, #16
 8004372:	d002      	beq.n	800437a <HAL_CAN_IRQHandler+0x2f8>
 8004374:	2b20      	cmp	r3, #32
 8004376:	d005      	beq.n	8004384 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004378:	e01d      	b.n	80043b6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	f043 0308 	orr.w	r3, r3, #8
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004382:	e019      	b.n	80043b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	f043 0310 	orr.w	r3, r3, #16
 800438a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800438c:	e014      	b.n	80043b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	f043 0320 	orr.w	r3, r3, #32
 8004394:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004396:	e00f      	b.n	80043b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800439e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80043a0:	e00a      	b.n	80043b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80043aa:	e005      	b.n	80043b8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80043b4:	e000      	b.n	80043b8 <HAL_CAN_IRQHandler+0x336>
            break;
 80043b6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80043c6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2204      	movs	r2, #4
 80043ce:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d008      	beq.n	80043e8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f87c 	bl	80044e0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80043e8:	bf00      	nop
 80043ea:	3728      	adds	r7, #40	; 0x28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004504:	4b0c      	ldr	r3, [pc, #48]	; (8004538 <__NVIC_SetPriorityGrouping+0x44>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004510:	4013      	ands	r3, r2
 8004512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800451c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004526:	4a04      	ldr	r2, [pc, #16]	; (8004538 <__NVIC_SetPriorityGrouping+0x44>)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	60d3      	str	r3, [r2, #12]
}
 800452c:	bf00      	nop
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004540:	4b04      	ldr	r3, [pc, #16]	; (8004554 <__NVIC_GetPriorityGrouping+0x18>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	0a1b      	lsrs	r3, r3, #8
 8004546:	f003 0307 	and.w	r3, r3, #7
}
 800454a:	4618      	mov	r0, r3
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	e000ed00 	.word	0xe000ed00

08004558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	4603      	mov	r3, r0
 8004560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004566:	2b00      	cmp	r3, #0
 8004568:	db0b      	blt.n	8004582 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	f003 021f 	and.w	r2, r3, #31
 8004570:	4907      	ldr	r1, [pc, #28]	; (8004590 <__NVIC_EnableIRQ+0x38>)
 8004572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	2001      	movs	r0, #1
 800457a:	fa00 f202 	lsl.w	r2, r0, r2
 800457e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	e000e100 	.word	0xe000e100

08004594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	4603      	mov	r3, r0
 800459c:	6039      	str	r1, [r7, #0]
 800459e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	db0a      	blt.n	80045be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	490c      	ldr	r1, [pc, #48]	; (80045e0 <__NVIC_SetPriority+0x4c>)
 80045ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b2:	0112      	lsls	r2, r2, #4
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	440b      	add	r3, r1
 80045b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045bc:	e00a      	b.n	80045d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	4908      	ldr	r1, [pc, #32]	; (80045e4 <__NVIC_SetPriority+0x50>)
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	3b04      	subs	r3, #4
 80045cc:	0112      	lsls	r2, r2, #4
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	440b      	add	r3, r1
 80045d2:	761a      	strb	r2, [r3, #24]
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	e000e100 	.word	0xe000e100
 80045e4:	e000ed00 	.word	0xe000ed00

080045e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b089      	sub	sp, #36	; 0x24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	f1c3 0307 	rsb	r3, r3, #7
 8004602:	2b04      	cmp	r3, #4
 8004604:	bf28      	it	cs
 8004606:	2304      	movcs	r3, #4
 8004608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	3304      	adds	r3, #4
 800460e:	2b06      	cmp	r3, #6
 8004610:	d902      	bls.n	8004618 <NVIC_EncodePriority+0x30>
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	3b03      	subs	r3, #3
 8004616:	e000      	b.n	800461a <NVIC_EncodePriority+0x32>
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800461c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	43da      	mvns	r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	401a      	ands	r2, r3
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004630:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	fa01 f303 	lsl.w	r3, r1, r3
 800463a:	43d9      	mvns	r1, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004640:	4313      	orrs	r3, r2
         );
}
 8004642:	4618      	mov	r0, r3
 8004644:	3724      	adds	r7, #36	; 0x24
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
	...

08004650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3b01      	subs	r3, #1
 800465c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004660:	d301      	bcc.n	8004666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004662:	2301      	movs	r3, #1
 8004664:	e00f      	b.n	8004686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004666:	4a0a      	ldr	r2, [pc, #40]	; (8004690 <SysTick_Config+0x40>)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3b01      	subs	r3, #1
 800466c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800466e:	210f      	movs	r1, #15
 8004670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004674:	f7ff ff8e 	bl	8004594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004678:	4b05      	ldr	r3, [pc, #20]	; (8004690 <SysTick_Config+0x40>)
 800467a:	2200      	movs	r2, #0
 800467c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800467e:	4b04      	ldr	r3, [pc, #16]	; (8004690 <SysTick_Config+0x40>)
 8004680:	2207      	movs	r2, #7
 8004682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	e000e010 	.word	0xe000e010

08004694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7ff ff29 	bl	80044f4 <__NVIC_SetPriorityGrouping>
}
 80046a2:	bf00      	nop
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b086      	sub	sp, #24
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	4603      	mov	r3, r0
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	607a      	str	r2, [r7, #4]
 80046b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046bc:	f7ff ff3e 	bl	800453c <__NVIC_GetPriorityGrouping>
 80046c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	68b9      	ldr	r1, [r7, #8]
 80046c6:	6978      	ldr	r0, [r7, #20]
 80046c8:	f7ff ff8e 	bl	80045e8 <NVIC_EncodePriority>
 80046cc:	4602      	mov	r2, r0
 80046ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046d2:	4611      	mov	r1, r2
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff ff5d 	bl	8004594 <__NVIC_SetPriority>
}
 80046da:	bf00      	nop
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b082      	sub	sp, #8
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	4603      	mov	r3, r0
 80046ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff ff31 	bl	8004558 <__NVIC_EnableIRQ>
}
 80046f6:	bf00      	nop
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b082      	sub	sp, #8
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7ff ffa2 	bl	8004650 <SysTick_Config>
 800470c:	4603      	mov	r3, r0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b04      	cmp	r3, #4
 8004724:	d106      	bne.n	8004734 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8004726:	4b09      	ldr	r3, [pc, #36]	; (800474c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a08      	ldr	r2, [pc, #32]	; (800474c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800472c:	f043 0304 	orr.w	r3, r3, #4
 8004730:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8004732:	e005      	b.n	8004740 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8004734:	4b05      	ldr	r3, [pc, #20]	; (800474c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a04      	ldr	r2, [pc, #16]	; (800474c <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800473a:	f023 0304 	bic.w	r3, r3, #4
 800473e:	6013      	str	r3, [r2, #0]
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	e000e010 	.word	0xe000e010

08004750 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004758:	2300      	movs	r3, #0
 800475a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800475c:	f7ff fb66 	bl	8003e2c <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e099      	b.n	80048a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0201 	bic.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800478c:	e00f      	b.n	80047ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800478e:	f7ff fb4d 	bl	8003e2c <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b05      	cmp	r3, #5
 800479a:	d908      	bls.n	80047ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2220      	movs	r2, #32
 80047a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2203      	movs	r2, #3
 80047a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e078      	b.n	80048a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1e8      	bne.n	800478e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	4b38      	ldr	r3, [pc, #224]	; (80048a8 <HAL_DMA_Init+0x158>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	2b04      	cmp	r3, #4
 8004806:	d107      	bne.n	8004818 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004810:	4313      	orrs	r3, r2
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	4313      	orrs	r3, r2
 8004816:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f023 0307 	bic.w	r3, r3, #7
 800482e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	2b04      	cmp	r3, #4
 8004840:	d117      	bne.n	8004872 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	4313      	orrs	r3, r2
 800484a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00e      	beq.n	8004872 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 fa6f 	bl	8004d38 <DMA_CheckFifoParam>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d008      	beq.n	8004872 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2240      	movs	r2, #64	; 0x40
 8004864:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800486e:	2301      	movs	r3, #1
 8004870:	e016      	b.n	80048a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fa26 	bl	8004ccc <DMA_CalcBaseAndBitshift>
 8004880:	4603      	mov	r3, r0
 8004882:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004888:	223f      	movs	r2, #63	; 0x3f
 800488a:	409a      	lsls	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	f010803f 	.word	0xf010803f

080048ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
 80048b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d101      	bne.n	80048d2 <HAL_DMA_Start_IT+0x26>
 80048ce:	2302      	movs	r3, #2
 80048d0:	e040      	b.n	8004954 <HAL_DMA_Start_IT+0xa8>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d12f      	bne.n	8004946 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2202      	movs	r2, #2
 80048ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	68b9      	ldr	r1, [r7, #8]
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 f9b8 	bl	8004c70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004904:	223f      	movs	r2, #63	; 0x3f
 8004906:	409a      	lsls	r2, r3
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0216 	orr.w	r2, r2, #22
 800491a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004920:	2b00      	cmp	r3, #0
 8004922:	d007      	beq.n	8004934 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0208 	orr.w	r2, r2, #8
 8004932:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	e005      	b.n	8004952 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800494e:	2302      	movs	r3, #2
 8004950:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004952:	7dfb      	ldrb	r3, [r7, #23]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004968:	4b92      	ldr	r3, [pc, #584]	; (8004bb4 <HAL_DMA_IRQHandler+0x258>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a92      	ldr	r2, [pc, #584]	; (8004bb8 <HAL_DMA_IRQHandler+0x25c>)
 800496e:	fba2 2303 	umull	r2, r3, r2, r3
 8004972:	0a9b      	lsrs	r3, r3, #10
 8004974:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004986:	2208      	movs	r2, #8
 8004988:	409a      	lsls	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4013      	ands	r3, r2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d01a      	beq.n	80049c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b00      	cmp	r3, #0
 800499e:	d013      	beq.n	80049c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0204 	bic.w	r2, r2, #4
 80049ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b4:	2208      	movs	r2, #8
 80049b6:	409a      	lsls	r2, r3
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c0:	f043 0201 	orr.w	r2, r3, #1
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049cc:	2201      	movs	r2, #1
 80049ce:	409a      	lsls	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d012      	beq.n	80049fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00b      	beq.n	80049fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ea:	2201      	movs	r2, #1
 80049ec:	409a      	lsls	r2, r3
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f6:	f043 0202 	orr.w	r2, r3, #2
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a02:	2204      	movs	r2, #4
 8004a04:	409a      	lsls	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d012      	beq.n	8004a34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00b      	beq.n	8004a34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a20:	2204      	movs	r2, #4
 8004a22:	409a      	lsls	r2, r3
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2c:	f043 0204 	orr.w	r2, r3, #4
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a38:	2210      	movs	r2, #16
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d043      	beq.n	8004acc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0308 	and.w	r3, r3, #8
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d03c      	beq.n	8004acc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a56:	2210      	movs	r2, #16
 8004a58:	409a      	lsls	r2, r3
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d018      	beq.n	8004a9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d108      	bne.n	8004a8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d024      	beq.n	8004acc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	4798      	blx	r3
 8004a8a:	e01f      	b.n	8004acc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d01b      	beq.n	8004acc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	4798      	blx	r3
 8004a9c:	e016      	b.n	8004acc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d107      	bne.n	8004abc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0208 	bic.w	r2, r2, #8
 8004aba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	409a      	lsls	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 808e 	beq.w	8004bfa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0310 	and.w	r3, r3, #16
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 8086 	beq.w	8004bfa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af2:	2220      	movs	r2, #32
 8004af4:	409a      	lsls	r2, r3
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b05      	cmp	r3, #5
 8004b04:	d136      	bne.n	8004b74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0216 	bic.w	r2, r2, #22
 8004b14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695a      	ldr	r2, [r3, #20]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d103      	bne.n	8004b36 <HAL_DMA_IRQHandler+0x1da>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d007      	beq.n	8004b46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0208 	bic.w	r2, r2, #8
 8004b44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b4a:	223f      	movs	r2, #63	; 0x3f
 8004b4c:	409a      	lsls	r2, r3
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d07d      	beq.n	8004c66 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	4798      	blx	r3
        }
        return;
 8004b72:	e078      	b.n	8004c66 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d01c      	beq.n	8004bbc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d108      	bne.n	8004ba2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d030      	beq.n	8004bfa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	4798      	blx	r3
 8004ba0:	e02b      	b.n	8004bfa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d027      	beq.n	8004bfa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	4798      	blx	r3
 8004bb2:	e022      	b.n	8004bfa <HAL_DMA_IRQHandler+0x29e>
 8004bb4:	200001e0 	.word	0x200001e0
 8004bb8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10f      	bne.n	8004bea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0210 	bic.w	r2, r2, #16
 8004bd8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d032      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d022      	beq.n	8004c54 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2205      	movs	r2, #5
 8004c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0201 	bic.w	r2, r2, #1
 8004c24:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	60bb      	str	r3, [r7, #8]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d307      	bcc.n	8004c42 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1f2      	bne.n	8004c26 <HAL_DMA_IRQHandler+0x2ca>
 8004c40:	e000      	b.n	8004c44 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004c42:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	4798      	blx	r3
 8004c64:	e000      	b.n	8004c68 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004c66:	bf00      	nop
    }
  }
}
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop

08004c70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2b40      	cmp	r3, #64	; 0x40
 8004c9c:	d108      	bne.n	8004cb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004cae:	e007      	b.n	8004cc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	60da      	str	r2, [r3, #12]
}
 8004cc0:	bf00      	nop
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	3b10      	subs	r3, #16
 8004cdc:	4a14      	ldr	r2, [pc, #80]	; (8004d30 <DMA_CalcBaseAndBitshift+0x64>)
 8004cde:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce2:	091b      	lsrs	r3, r3, #4
 8004ce4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ce6:	4a13      	ldr	r2, [pc, #76]	; (8004d34 <DMA_CalcBaseAndBitshift+0x68>)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4413      	add	r3, r2
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d909      	bls.n	8004d0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d02:	f023 0303 	bic.w	r3, r3, #3
 8004d06:	1d1a      	adds	r2, r3, #4
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	659a      	str	r2, [r3, #88]	; 0x58
 8004d0c:	e007      	b.n	8004d1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d16:	f023 0303 	bic.w	r3, r3, #3
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	aaaaaaab 	.word	0xaaaaaaab
 8004d34:	0800b640 	.word	0x0800b640

08004d38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d40:	2300      	movs	r3, #0
 8004d42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d11f      	bne.n	8004d92 <DMA_CheckFifoParam+0x5a>
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d856      	bhi.n	8004e06 <DMA_CheckFifoParam+0xce>
 8004d58:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <DMA_CheckFifoParam+0x28>)
 8004d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5e:	bf00      	nop
 8004d60:	08004d71 	.word	0x08004d71
 8004d64:	08004d83 	.word	0x08004d83
 8004d68:	08004d71 	.word	0x08004d71
 8004d6c:	08004e07 	.word	0x08004e07
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d046      	beq.n	8004e0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d80:	e043      	b.n	8004e0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d8a:	d140      	bne.n	8004e0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d90:	e03d      	b.n	8004e0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d9a:	d121      	bne.n	8004de0 <DMA_CheckFifoParam+0xa8>
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d837      	bhi.n	8004e12 <DMA_CheckFifoParam+0xda>
 8004da2:	a201      	add	r2, pc, #4	; (adr r2, 8004da8 <DMA_CheckFifoParam+0x70>)
 8004da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da8:	08004db9 	.word	0x08004db9
 8004dac:	08004dbf 	.word	0x08004dbf
 8004db0:	08004db9 	.word	0x08004db9
 8004db4:	08004dd1 	.word	0x08004dd1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	73fb      	strb	r3, [r7, #15]
      break;
 8004dbc:	e030      	b.n	8004e20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d025      	beq.n	8004e16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dce:	e022      	b.n	8004e16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004dd8:	d11f      	bne.n	8004e1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004dde:	e01c      	b.n	8004e1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d903      	bls.n	8004dee <DMA_CheckFifoParam+0xb6>
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	2b03      	cmp	r3, #3
 8004dea:	d003      	beq.n	8004df4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004dec:	e018      	b.n	8004e20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	73fb      	strb	r3, [r7, #15]
      break;
 8004df2:	e015      	b.n	8004e20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00e      	beq.n	8004e1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	73fb      	strb	r3, [r7, #15]
      break;
 8004e04:	e00b      	b.n	8004e1e <DMA_CheckFifoParam+0xe6>
      break;
 8004e06:	bf00      	nop
 8004e08:	e00a      	b.n	8004e20 <DMA_CheckFifoParam+0xe8>
      break;
 8004e0a:	bf00      	nop
 8004e0c:	e008      	b.n	8004e20 <DMA_CheckFifoParam+0xe8>
      break;
 8004e0e:	bf00      	nop
 8004e10:	e006      	b.n	8004e20 <DMA_CheckFifoParam+0xe8>
      break;
 8004e12:	bf00      	nop
 8004e14:	e004      	b.n	8004e20 <DMA_CheckFifoParam+0xe8>
      break;
 8004e16:	bf00      	nop
 8004e18:	e002      	b.n	8004e20 <DMA_CheckFifoParam+0xe8>
      break;   
 8004e1a:	bf00      	nop
 8004e1c:	e000      	b.n	8004e20 <DMA_CheckFifoParam+0xe8>
      break;
 8004e1e:	bf00      	nop
    }
  } 
  
  return status; 
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop

08004e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b089      	sub	sp, #36	; 0x24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e46:	2300      	movs	r3, #0
 8004e48:	61fb      	str	r3, [r7, #28]
 8004e4a:	e177      	b.n	800513c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	f040 8166 	bne.w	8005136 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d00b      	beq.n	8004e8a <HAL_GPIO_Init+0x5a>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d007      	beq.n	8004e8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e7e:	2b11      	cmp	r3, #17
 8004e80:	d003      	beq.n	8004e8a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b12      	cmp	r3, #18
 8004e88:	d130      	bne.n	8004eec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	2203      	movs	r2, #3
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43db      	mvns	r3, r3
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	091b      	lsrs	r3, r3, #4
 8004ed6:	f003 0201 	and.w	r2, r3, #1
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	2203      	movs	r2, #3
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	43db      	mvns	r3, r3
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	4013      	ands	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d003      	beq.n	8004f2c <HAL_GPIO_Init+0xfc>
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2b12      	cmp	r3, #18
 8004f2a:	d123      	bne.n	8004f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	08da      	lsrs	r2, r3, #3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3208      	adds	r2, #8
 8004f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	220f      	movs	r2, #15
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	691a      	ldr	r2, [r3, #16]
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	08da      	lsrs	r2, r3, #3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3208      	adds	r2, #8
 8004f6e:	69b9      	ldr	r1, [r7, #24]
 8004f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	2203      	movs	r2, #3
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	43db      	mvns	r3, r3
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f003 0203 	and.w	r2, r3, #3
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 80c0 	beq.w	8005136 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	4b66      	ldr	r3, [pc, #408]	; (8005154 <HAL_GPIO_Init+0x324>)
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbe:	4a65      	ldr	r2, [pc, #404]	; (8005154 <HAL_GPIO_Init+0x324>)
 8004fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8004fc6:	4b63      	ldr	r3, [pc, #396]	; (8005154 <HAL_GPIO_Init+0x324>)
 8004fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fd2:	4a61      	ldr	r2, [pc, #388]	; (8005158 <HAL_GPIO_Init+0x328>)
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	089b      	lsrs	r3, r3, #2
 8004fd8:	3302      	adds	r3, #2
 8004fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	220f      	movs	r2, #15
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a58      	ldr	r2, [pc, #352]	; (800515c <HAL_GPIO_Init+0x32c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d037      	beq.n	800506e <HAL_GPIO_Init+0x23e>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a57      	ldr	r2, [pc, #348]	; (8005160 <HAL_GPIO_Init+0x330>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d031      	beq.n	800506a <HAL_GPIO_Init+0x23a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a56      	ldr	r2, [pc, #344]	; (8005164 <HAL_GPIO_Init+0x334>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d02b      	beq.n	8005066 <HAL_GPIO_Init+0x236>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a55      	ldr	r2, [pc, #340]	; (8005168 <HAL_GPIO_Init+0x338>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d025      	beq.n	8005062 <HAL_GPIO_Init+0x232>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a54      	ldr	r2, [pc, #336]	; (800516c <HAL_GPIO_Init+0x33c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d01f      	beq.n	800505e <HAL_GPIO_Init+0x22e>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a53      	ldr	r2, [pc, #332]	; (8005170 <HAL_GPIO_Init+0x340>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d019      	beq.n	800505a <HAL_GPIO_Init+0x22a>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a52      	ldr	r2, [pc, #328]	; (8005174 <HAL_GPIO_Init+0x344>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d013      	beq.n	8005056 <HAL_GPIO_Init+0x226>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a51      	ldr	r2, [pc, #324]	; (8005178 <HAL_GPIO_Init+0x348>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00d      	beq.n	8005052 <HAL_GPIO_Init+0x222>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a50      	ldr	r2, [pc, #320]	; (800517c <HAL_GPIO_Init+0x34c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d007      	beq.n	800504e <HAL_GPIO_Init+0x21e>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a4f      	ldr	r2, [pc, #316]	; (8005180 <HAL_GPIO_Init+0x350>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d101      	bne.n	800504a <HAL_GPIO_Init+0x21a>
 8005046:	2309      	movs	r3, #9
 8005048:	e012      	b.n	8005070 <HAL_GPIO_Init+0x240>
 800504a:	230a      	movs	r3, #10
 800504c:	e010      	b.n	8005070 <HAL_GPIO_Init+0x240>
 800504e:	2308      	movs	r3, #8
 8005050:	e00e      	b.n	8005070 <HAL_GPIO_Init+0x240>
 8005052:	2307      	movs	r3, #7
 8005054:	e00c      	b.n	8005070 <HAL_GPIO_Init+0x240>
 8005056:	2306      	movs	r3, #6
 8005058:	e00a      	b.n	8005070 <HAL_GPIO_Init+0x240>
 800505a:	2305      	movs	r3, #5
 800505c:	e008      	b.n	8005070 <HAL_GPIO_Init+0x240>
 800505e:	2304      	movs	r3, #4
 8005060:	e006      	b.n	8005070 <HAL_GPIO_Init+0x240>
 8005062:	2303      	movs	r3, #3
 8005064:	e004      	b.n	8005070 <HAL_GPIO_Init+0x240>
 8005066:	2302      	movs	r3, #2
 8005068:	e002      	b.n	8005070 <HAL_GPIO_Init+0x240>
 800506a:	2301      	movs	r3, #1
 800506c:	e000      	b.n	8005070 <HAL_GPIO_Init+0x240>
 800506e:	2300      	movs	r3, #0
 8005070:	69fa      	ldr	r2, [r7, #28]
 8005072:	f002 0203 	and.w	r2, r2, #3
 8005076:	0092      	lsls	r2, r2, #2
 8005078:	4093      	lsls	r3, r2
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	4313      	orrs	r3, r2
 800507e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005080:	4935      	ldr	r1, [pc, #212]	; (8005158 <HAL_GPIO_Init+0x328>)
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	089b      	lsrs	r3, r3, #2
 8005086:	3302      	adds	r3, #2
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800508e:	4b3d      	ldr	r3, [pc, #244]	; (8005184 <HAL_GPIO_Init+0x354>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	43db      	mvns	r3, r3
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	4013      	ands	r3, r2
 800509c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80050b2:	4a34      	ldr	r2, [pc, #208]	; (8005184 <HAL_GPIO_Init+0x354>)
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80050b8:	4b32      	ldr	r3, [pc, #200]	; (8005184 <HAL_GPIO_Init+0x354>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	43db      	mvns	r3, r3
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	4013      	ands	r3, r2
 80050c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	4313      	orrs	r3, r2
 80050da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80050dc:	4a29      	ldr	r2, [pc, #164]	; (8005184 <HAL_GPIO_Init+0x354>)
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050e2:	4b28      	ldr	r3, [pc, #160]	; (8005184 <HAL_GPIO_Init+0x354>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	43db      	mvns	r3, r3
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	4013      	ands	r3, r2
 80050f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005106:	4a1f      	ldr	r2, [pc, #124]	; (8005184 <HAL_GPIO_Init+0x354>)
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800510c:	4b1d      	ldr	r3, [pc, #116]	; (8005184 <HAL_GPIO_Init+0x354>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	43db      	mvns	r3, r3
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	4013      	ands	r3, r2
 800511a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005130:	4a14      	ldr	r2, [pc, #80]	; (8005184 <HAL_GPIO_Init+0x354>)
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	3301      	adds	r3, #1
 800513a:	61fb      	str	r3, [r7, #28]
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	2b0f      	cmp	r3, #15
 8005140:	f67f ae84 	bls.w	8004e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop
 8005148:	3724      	adds	r7, #36	; 0x24
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40023800 	.word	0x40023800
 8005158:	40013800 	.word	0x40013800
 800515c:	40020000 	.word	0x40020000
 8005160:	40020400 	.word	0x40020400
 8005164:	40020800 	.word	0x40020800
 8005168:	40020c00 	.word	0x40020c00
 800516c:	40021000 	.word	0x40021000
 8005170:	40021400 	.word	0x40021400
 8005174:	40021800 	.word	0x40021800
 8005178:	40021c00 	.word	0x40021c00
 800517c:	40022000 	.word	0x40022000
 8005180:	40022400 	.word	0x40022400
 8005184:	40013c00 	.word	0x40013c00

08005188 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	460b      	mov	r3, r1
 8005192:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691a      	ldr	r2, [r3, #16]
 8005198:	887b      	ldrh	r3, [r7, #2]
 800519a:	4013      	ands	r3, r2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051a0:	2301      	movs	r3, #1
 80051a2:	73fb      	strb	r3, [r7, #15]
 80051a4:	e001      	b.n	80051aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051a6:	2300      	movs	r3, #0
 80051a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	460b      	mov	r3, r1
 80051c2:	807b      	strh	r3, [r7, #2]
 80051c4:	4613      	mov	r3, r2
 80051c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051c8:	787b      	ldrb	r3, [r7, #1]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051ce:	887a      	ldrh	r2, [r7, #2]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80051d4:	e003      	b.n	80051de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051d6:	887b      	ldrh	r3, [r7, #2]
 80051d8:	041a      	lsls	r2, r3, #16
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	619a      	str	r2, [r3, #24]
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
	...

080051ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	4603      	mov	r3, r0
 80051f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80051f6:	4b08      	ldr	r3, [pc, #32]	; (8005218 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051f8:	695a      	ldr	r2, [r3, #20]
 80051fa:	88fb      	ldrh	r3, [r7, #6]
 80051fc:	4013      	ands	r3, r2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d006      	beq.n	8005210 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005202:	4a05      	ldr	r2, [pc, #20]	; (8005218 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005204:	88fb      	ldrh	r3, [r7, #6]
 8005206:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005208:	88fb      	ldrh	r3, [r7, #6]
 800520a:	4618      	mov	r0, r3
 800520c:	f7fd f800 	bl	8002210 <HAL_GPIO_EXTI_Callback>
  }
}
 8005210:	bf00      	nop
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40013c00 	.word	0x40013c00

0800521c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e12b      	b.n	8005486 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fc fd98 	bl	8001d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2224      	movs	r2, #36	; 0x24
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0201 	bic.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800526e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800527e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005280:	f001 fc98 	bl	8006bb4 <HAL_RCC_GetPCLK1Freq>
 8005284:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	4a81      	ldr	r2, [pc, #516]	; (8005490 <HAL_I2C_Init+0x274>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d807      	bhi.n	80052a0 <HAL_I2C_Init+0x84>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4a80      	ldr	r2, [pc, #512]	; (8005494 <HAL_I2C_Init+0x278>)
 8005294:	4293      	cmp	r3, r2
 8005296:	bf94      	ite	ls
 8005298:	2301      	movls	r3, #1
 800529a:	2300      	movhi	r3, #0
 800529c:	b2db      	uxtb	r3, r3
 800529e:	e006      	b.n	80052ae <HAL_I2C_Init+0x92>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4a7d      	ldr	r2, [pc, #500]	; (8005498 <HAL_I2C_Init+0x27c>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	bf94      	ite	ls
 80052a8:	2301      	movls	r3, #1
 80052aa:	2300      	movhi	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e0e7      	b.n	8005486 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4a78      	ldr	r2, [pc, #480]	; (800549c <HAL_I2C_Init+0x280>)
 80052ba:	fba2 2303 	umull	r2, r3, r2, r3
 80052be:	0c9b      	lsrs	r3, r3, #18
 80052c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	4a6a      	ldr	r2, [pc, #424]	; (8005490 <HAL_I2C_Init+0x274>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d802      	bhi.n	80052f0 <HAL_I2C_Init+0xd4>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	3301      	adds	r3, #1
 80052ee:	e009      	b.n	8005304 <HAL_I2C_Init+0xe8>
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80052f6:	fb02 f303 	mul.w	r3, r2, r3
 80052fa:	4a69      	ldr	r2, [pc, #420]	; (80054a0 <HAL_I2C_Init+0x284>)
 80052fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005300:	099b      	lsrs	r3, r3, #6
 8005302:	3301      	adds	r3, #1
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6812      	ldr	r2, [r2, #0]
 8005308:	430b      	orrs	r3, r1
 800530a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005316:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	495c      	ldr	r1, [pc, #368]	; (8005490 <HAL_I2C_Init+0x274>)
 8005320:	428b      	cmp	r3, r1
 8005322:	d819      	bhi.n	8005358 <HAL_I2C_Init+0x13c>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	1e59      	subs	r1, r3, #1
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005332:	1c59      	adds	r1, r3, #1
 8005334:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005338:	400b      	ands	r3, r1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <HAL_I2C_Init+0x138>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	1e59      	subs	r1, r3, #1
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	fbb1 f3f3 	udiv	r3, r1, r3
 800534c:	3301      	adds	r3, #1
 800534e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005352:	e051      	b.n	80053f8 <HAL_I2C_Init+0x1dc>
 8005354:	2304      	movs	r3, #4
 8005356:	e04f      	b.n	80053f8 <HAL_I2C_Init+0x1dc>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d111      	bne.n	8005384 <HAL_I2C_Init+0x168>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	1e58      	subs	r0, r3, #1
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6859      	ldr	r1, [r3, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	440b      	add	r3, r1
 800536e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005372:	3301      	adds	r3, #1
 8005374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005378:	2b00      	cmp	r3, #0
 800537a:	bf0c      	ite	eq
 800537c:	2301      	moveq	r3, #1
 800537e:	2300      	movne	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	e012      	b.n	80053aa <HAL_I2C_Init+0x18e>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	1e58      	subs	r0, r3, #1
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6859      	ldr	r1, [r3, #4]
 800538c:	460b      	mov	r3, r1
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	0099      	lsls	r1, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	fbb0 f3f3 	udiv	r3, r0, r3
 800539a:	3301      	adds	r3, #1
 800539c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	bf0c      	ite	eq
 80053a4:	2301      	moveq	r3, #1
 80053a6:	2300      	movne	r3, #0
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <HAL_I2C_Init+0x196>
 80053ae:	2301      	movs	r3, #1
 80053b0:	e022      	b.n	80053f8 <HAL_I2C_Init+0x1dc>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10e      	bne.n	80053d8 <HAL_I2C_Init+0x1bc>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	1e58      	subs	r0, r3, #1
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6859      	ldr	r1, [r3, #4]
 80053c2:	460b      	mov	r3, r1
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	440b      	add	r3, r1
 80053c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80053cc:	3301      	adds	r3, #1
 80053ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053d6:	e00f      	b.n	80053f8 <HAL_I2C_Init+0x1dc>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	1e58      	subs	r0, r3, #1
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6859      	ldr	r1, [r3, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	0099      	lsls	r1, r3, #2
 80053e8:	440b      	add	r3, r1
 80053ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ee:	3301      	adds	r3, #1
 80053f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053f8:	6879      	ldr	r1, [r7, #4]
 80053fa:	6809      	ldr	r1, [r1, #0]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	69da      	ldr	r2, [r3, #28]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005426:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6911      	ldr	r1, [r2, #16]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	68d2      	ldr	r2, [r2, #12]
 8005432:	4311      	orrs	r1, r2
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6812      	ldr	r2, [r2, #0]
 8005438:	430b      	orrs	r3, r1
 800543a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695a      	ldr	r2, [r3, #20]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2220      	movs	r2, #32
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	000186a0 	.word	0x000186a0
 8005494:	001e847f 	.word	0x001e847f
 8005498:	003d08ff 	.word	0x003d08ff
 800549c:	431bde83 	.word	0x431bde83
 80054a0:	10624dd3 	.word	0x10624dd3

080054a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af02      	add	r7, sp, #8
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	4608      	mov	r0, r1
 80054ae:	4611      	mov	r1, r2
 80054b0:	461a      	mov	r2, r3
 80054b2:	4603      	mov	r3, r0
 80054b4:	817b      	strh	r3, [r7, #10]
 80054b6:	460b      	mov	r3, r1
 80054b8:	813b      	strh	r3, [r7, #8]
 80054ba:	4613      	mov	r3, r2
 80054bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054be:	f7fe fcb5 	bl	8003e2c <HAL_GetTick>
 80054c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	f040 80d9 	bne.w	8005684 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	2319      	movs	r3, #25
 80054d8:	2201      	movs	r2, #1
 80054da:	496d      	ldr	r1, [pc, #436]	; (8005690 <HAL_I2C_Mem_Write+0x1ec>)
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 fc7f 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80054e8:	2302      	movs	r3, #2
 80054ea:	e0cc      	b.n	8005686 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d101      	bne.n	80054fa <HAL_I2C_Mem_Write+0x56>
 80054f6:	2302      	movs	r3, #2
 80054f8:	e0c5      	b.n	8005686 <HAL_I2C_Mem_Write+0x1e2>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b01      	cmp	r3, #1
 800550e:	d007      	beq.n	8005520 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800552e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2221      	movs	r2, #33	; 0x21
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2240      	movs	r2, #64	; 0x40
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6a3a      	ldr	r2, [r7, #32]
 800554a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005550:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005556:	b29a      	uxth	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4a4d      	ldr	r2, [pc, #308]	; (8005694 <HAL_I2C_Mem_Write+0x1f0>)
 8005560:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005562:	88f8      	ldrh	r0, [r7, #6]
 8005564:	893a      	ldrh	r2, [r7, #8]
 8005566:	8979      	ldrh	r1, [r7, #10]
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	9301      	str	r3, [sp, #4]
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	4603      	mov	r3, r0
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 fab6 	bl	8005ae4 <I2C_RequestMemoryWrite>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d052      	beq.n	8005624 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e081      	b.n	8005686 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 fd00 	bl	8005f8c <I2C_WaitOnTXEFlagUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00d      	beq.n	80055ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005596:	2b04      	cmp	r3, #4
 8005598:	d107      	bne.n	80055aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e06b      	b.n	8005686 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	781a      	ldrb	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	1c5a      	adds	r2, r3, #1
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055c8:	3b01      	subs	r3, #1
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d11b      	bne.n	8005624 <HAL_I2C_Mem_Write+0x180>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d017      	beq.n	8005624 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	781a      	ldrb	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	1c5a      	adds	r2, r3, #1
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800560e:	3b01      	subs	r3, #1
 8005610:	b29a      	uxth	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800561a:	b29b      	uxth	r3, r3
 800561c:	3b01      	subs	r3, #1
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1aa      	bne.n	8005582 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 fcec 	bl	800600e <I2C_WaitOnBTFFlagUntilTimeout>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00d      	beq.n	8005658 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005640:	2b04      	cmp	r3, #4
 8005642:	d107      	bne.n	8005654 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005652:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e016      	b.n	8005686 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005666:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005680:	2300      	movs	r3, #0
 8005682:	e000      	b.n	8005686 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005684:	2302      	movs	r3, #2
  }
}
 8005686:	4618      	mov	r0, r3
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	00100002 	.word	0x00100002
 8005694:	ffff0000 	.word	0xffff0000

08005698 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b08c      	sub	sp, #48	; 0x30
 800569c:	af02      	add	r7, sp, #8
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	4608      	mov	r0, r1
 80056a2:	4611      	mov	r1, r2
 80056a4:	461a      	mov	r2, r3
 80056a6:	4603      	mov	r3, r0
 80056a8:	817b      	strh	r3, [r7, #10]
 80056aa:	460b      	mov	r3, r1
 80056ac:	813b      	strh	r3, [r7, #8]
 80056ae:	4613      	mov	r3, r2
 80056b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056b2:	f7fe fbbb 	bl	8003e2c <HAL_GetTick>
 80056b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b20      	cmp	r3, #32
 80056c2:	f040 8208 	bne.w	8005ad6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	2319      	movs	r3, #25
 80056cc:	2201      	movs	r2, #1
 80056ce:	497b      	ldr	r1, [pc, #492]	; (80058bc <HAL_I2C_Mem_Read+0x224>)
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 fb85 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80056dc:	2302      	movs	r3, #2
 80056de:	e1fb      	b.n	8005ad8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <HAL_I2C_Mem_Read+0x56>
 80056ea:	2302      	movs	r3, #2
 80056ec:	e1f4      	b.n	8005ad8 <HAL_I2C_Mem_Read+0x440>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b01      	cmp	r3, #1
 8005702:	d007      	beq.n	8005714 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0201 	orr.w	r2, r2, #1
 8005712:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005722:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2222      	movs	r2, #34	; 0x22
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2240      	movs	r2, #64	; 0x40
 8005730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800573e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005744:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4a5b      	ldr	r2, [pc, #364]	; (80058c0 <HAL_I2C_Mem_Read+0x228>)
 8005754:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005756:	88f8      	ldrh	r0, [r7, #6]
 8005758:	893a      	ldrh	r2, [r7, #8]
 800575a:	8979      	ldrh	r1, [r7, #10]
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	9301      	str	r3, [sp, #4]
 8005760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	4603      	mov	r3, r0
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 fa52 	bl	8005c10 <I2C_RequestMemoryRead>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e1b0      	b.n	8005ad8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800577a:	2b00      	cmp	r3, #0
 800577c:	d113      	bne.n	80057a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800577e:	2300      	movs	r3, #0
 8005780:	623b      	str	r3, [r7, #32]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	623b      	str	r3, [r7, #32]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	623b      	str	r3, [r7, #32]
 8005792:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	e184      	b.n	8005ab0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d11b      	bne.n	80057e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057be:	2300      	movs	r3, #0
 80057c0:	61fb      	str	r3, [r7, #28]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	61fb      	str	r3, [r7, #28]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	61fb      	str	r3, [r7, #28]
 80057d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	e164      	b.n	8005ab0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d11b      	bne.n	8005826 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800580c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800580e:	2300      	movs	r3, #0
 8005810:	61bb      	str	r3, [r7, #24]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	61bb      	str	r3, [r7, #24]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	61bb      	str	r3, [r7, #24]
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	e144      	b.n	8005ab0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005826:	2300      	movs	r3, #0
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	617b      	str	r3, [r7, #20]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	617b      	str	r3, [r7, #20]
 800583a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800583c:	e138      	b.n	8005ab0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005842:	2b03      	cmp	r3, #3
 8005844:	f200 80f1 	bhi.w	8005a2a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800584c:	2b01      	cmp	r3, #1
 800584e:	d123      	bne.n	8005898 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005852:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 fc1b 	bl	8006090 <I2C_WaitOnRXNEFlagUntilTimeout>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e139      	b.n	8005ad8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	691a      	ldr	r2, [r3, #16]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	b2d2      	uxtb	r2, r2
 8005870:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	1c5a      	adds	r2, r3, #1
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588c:	b29b      	uxth	r3, r3
 800588e:	3b01      	subs	r3, #1
 8005890:	b29a      	uxth	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005896:	e10b      	b.n	8005ab0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800589c:	2b02      	cmp	r3, #2
 800589e:	d14e      	bne.n	800593e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a6:	2200      	movs	r2, #0
 80058a8:	4906      	ldr	r1, [pc, #24]	; (80058c4 <HAL_I2C_Mem_Read+0x22c>)
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 fa98 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d008      	beq.n	80058c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e10e      	b.n	8005ad8 <HAL_I2C_Mem_Read+0x440>
 80058ba:	bf00      	nop
 80058bc:	00100002 	.word	0x00100002
 80058c0:	ffff0000 	.word	0xffff0000
 80058c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	691a      	ldr	r2, [r3, #16]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	1c5a      	adds	r2, r3, #1
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f4:	3b01      	subs	r3, #1
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005900:	b29b      	uxth	r3, r3
 8005902:	3b01      	subs	r3, #1
 8005904:	b29a      	uxth	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	b2d2      	uxtb	r2, r2
 8005916:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	1c5a      	adds	r2, r3, #1
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005926:	3b01      	subs	r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005932:	b29b      	uxth	r3, r3
 8005934:	3b01      	subs	r3, #1
 8005936:	b29a      	uxth	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800593c:	e0b8      	b.n	8005ab0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005944:	2200      	movs	r2, #0
 8005946:	4966      	ldr	r1, [pc, #408]	; (8005ae0 <HAL_I2C_Mem_Read+0x448>)
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 fa49 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e0bf      	b.n	8005ad8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005966:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	691a      	ldr	r2, [r3, #16]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005984:	3b01      	subs	r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005990:	b29b      	uxth	r3, r3
 8005992:	3b01      	subs	r3, #1
 8005994:	b29a      	uxth	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a0:	2200      	movs	r2, #0
 80059a2:	494f      	ldr	r1, [pc, #316]	; (8005ae0 <HAL_I2C_Mem_Read+0x448>)
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 fa1b 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d001      	beq.n	80059b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e091      	b.n	8005ad8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	691a      	ldr	r2, [r3, #16]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ce:	b2d2      	uxtb	r2, r2
 80059d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d6:	1c5a      	adds	r2, r3, #1
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	3b01      	subs	r3, #1
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	691a      	ldr	r2, [r3, #16]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	b2d2      	uxtb	r2, r2
 8005a02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	1c5a      	adds	r2, r3, #1
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	3b01      	subs	r3, #1
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a28:	e042      	b.n	8005ab0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 fb2e 	bl	8006090 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e04c      	b.n	8005ad8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	691a      	ldr	r2, [r3, #16]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	b2d2      	uxtb	r2, r2
 8005a4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	1c5a      	adds	r2, r3, #1
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	f003 0304 	and.w	r3, r3, #4
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d118      	bne.n	8005ab0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	691a      	ldr	r2, [r3, #16]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a88:	b2d2      	uxtb	r2, r2
 8005a8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f47f aec2 	bne.w	800583e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	e000      	b.n	8005ad8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005ad6:	2302      	movs	r3, #2
  }
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3728      	adds	r7, #40	; 0x28
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	00010004 	.word	0x00010004

08005ae4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b088      	sub	sp, #32
 8005ae8:	af02      	add	r7, sp, #8
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	4608      	mov	r0, r1
 8005aee:	4611      	mov	r1, r2
 8005af0:	461a      	mov	r2, r3
 8005af2:	4603      	mov	r3, r0
 8005af4:	817b      	strh	r3, [r7, #10]
 8005af6:	460b      	mov	r3, r1
 8005af8:	813b      	strh	r3, [r7, #8]
 8005afa:	4613      	mov	r3, r2
 8005afc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 f960 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00d      	beq.n	8005b42 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b34:	d103      	bne.n	8005b3e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e05f      	b.n	8005c02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b42:	897b      	ldrh	r3, [r7, #10]
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	461a      	mov	r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	6a3a      	ldr	r2, [r7, #32]
 8005b56:	492d      	ldr	r1, [pc, #180]	; (8005c0c <I2C_RequestMemoryWrite+0x128>)
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 f998 	bl	8005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e04c      	b.n	8005c02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b68:	2300      	movs	r3, #0
 8005b6a:	617b      	str	r3, [r7, #20]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	617b      	str	r3, [r7, #20]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b80:	6a39      	ldr	r1, [r7, #32]
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f000 fa02 	bl	8005f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00d      	beq.n	8005baa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	d107      	bne.n	8005ba6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ba4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e02b      	b.n	8005c02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005baa:	88fb      	ldrh	r3, [r7, #6]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d105      	bne.n	8005bbc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bb0:	893b      	ldrh	r3, [r7, #8]
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	611a      	str	r2, [r3, #16]
 8005bba:	e021      	b.n	8005c00 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005bbc:	893b      	ldrh	r3, [r7, #8]
 8005bbe:	0a1b      	lsrs	r3, r3, #8
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bcc:	6a39      	ldr	r1, [r7, #32]
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 f9dc 	bl	8005f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00d      	beq.n	8005bf6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d107      	bne.n	8005bf2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bf0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e005      	b.n	8005c02 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bf6:	893b      	ldrh	r3, [r7, #8]
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3718      	adds	r7, #24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	00010002 	.word	0x00010002

08005c10 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b088      	sub	sp, #32
 8005c14:	af02      	add	r7, sp, #8
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	4608      	mov	r0, r1
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	4603      	mov	r3, r0
 8005c20:	817b      	strh	r3, [r7, #10]
 8005c22:	460b      	mov	r3, r1
 8005c24:	813b      	strh	r3, [r7, #8]
 8005c26:	4613      	mov	r3, r2
 8005c28:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c38:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f000 f8c2 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00d      	beq.n	8005c7e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c70:	d103      	bne.n	8005c7a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e0aa      	b.n	8005dd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c7e:	897b      	ldrh	r3, [r7, #10]
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	461a      	mov	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	6a3a      	ldr	r2, [r7, #32]
 8005c92:	4952      	ldr	r1, [pc, #328]	; (8005ddc <I2C_RequestMemoryRead+0x1cc>)
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 f8fa 	bl	8005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e097      	b.n	8005dd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	617b      	str	r3, [r7, #20]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	617b      	str	r3, [r7, #20]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cbc:	6a39      	ldr	r1, [r7, #32]
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 f964 	bl	8005f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00d      	beq.n	8005ce6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d107      	bne.n	8005ce2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e076      	b.n	8005dd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ce6:	88fb      	ldrh	r3, [r7, #6]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d105      	bne.n	8005cf8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cec:	893b      	ldrh	r3, [r7, #8]
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	611a      	str	r2, [r3, #16]
 8005cf6:	e021      	b.n	8005d3c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005cf8:	893b      	ldrh	r3, [r7, #8]
 8005cfa:	0a1b      	lsrs	r3, r3, #8
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d08:	6a39      	ldr	r1, [r7, #32]
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 f93e 	bl	8005f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00d      	beq.n	8005d32 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	d107      	bne.n	8005d2e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e050      	b.n	8005dd4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d32:	893b      	ldrh	r3, [r7, #8]
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3e:	6a39      	ldr	r1, [r7, #32]
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 f923 	bl	8005f8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00d      	beq.n	8005d68 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	d107      	bne.n	8005d64 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d62:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e035      	b.n	8005dd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d76:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 f82b 	bl	8005de0 <I2C_WaitOnFlagUntilTimeout>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00d      	beq.n	8005dac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d9e:	d103      	bne.n	8005da8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005da6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e013      	b.n	8005dd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005dac:	897b      	ldrh	r3, [r7, #10]
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	f043 0301 	orr.w	r3, r3, #1
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	6a3a      	ldr	r2, [r7, #32]
 8005dc0:	4906      	ldr	r1, [pc, #24]	; (8005ddc <I2C_RequestMemoryRead+0x1cc>)
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 f863 	bl	8005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e000      	b.n	8005dd4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3718      	adds	r7, #24
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	00010002 	.word	0x00010002

08005de0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	4613      	mov	r3, r2
 8005dee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005df0:	e025      	b.n	8005e3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005df8:	d021      	beq.n	8005e3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dfa:	f7fe f817 	bl	8003e2c <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d302      	bcc.n	8005e10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d116      	bne.n	8005e3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	f043 0220 	orr.w	r2, r3, #32
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e023      	b.n	8005e86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	0c1b      	lsrs	r3, r3, #16
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d10d      	bne.n	8005e64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	43da      	mvns	r2, r3
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4013      	ands	r3, r2
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	bf0c      	ite	eq
 8005e5a:	2301      	moveq	r3, #1
 8005e5c:	2300      	movne	r3, #0
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	461a      	mov	r2, r3
 8005e62:	e00c      	b.n	8005e7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	43da      	mvns	r2, r3
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	bf0c      	ite	eq
 8005e76:	2301      	moveq	r3, #1
 8005e78:	2300      	movne	r3, #0
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	79fb      	ldrb	r3, [r7, #7]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d0b6      	beq.n	8005df2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	607a      	str	r2, [r7, #4]
 8005e9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e9c:	e051      	b.n	8005f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eac:	d123      	bne.n	8005ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ebc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ec6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	f043 0204 	orr.w	r2, r3, #4
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e046      	b.n	8005f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005efc:	d021      	beq.n	8005f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005efe:	f7fd ff95 	bl	8003e2c <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d302      	bcc.n	8005f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d116      	bne.n	8005f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	f043 0220 	orr.w	r2, r3, #32
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e020      	b.n	8005f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	0c1b      	lsrs	r3, r3, #16
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d10c      	bne.n	8005f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	43da      	mvns	r2, r3
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	4013      	ands	r3, r2
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	bf14      	ite	ne
 8005f5e:	2301      	movne	r3, #1
 8005f60:	2300      	moveq	r3, #0
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	e00b      	b.n	8005f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	43da      	mvns	r2, r3
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	4013      	ands	r3, r2
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	bf14      	ite	ne
 8005f78:	2301      	movne	r3, #1
 8005f7a:	2300      	moveq	r3, #0
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d18d      	bne.n	8005e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f98:	e02d      	b.n	8005ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 f8ce 	bl	800613c <I2C_IsAcknowledgeFailed>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e02d      	b.n	8006006 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fb0:	d021      	beq.n	8005ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fb2:	f7fd ff3b 	bl	8003e2c <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d302      	bcc.n	8005fc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d116      	bne.n	8005ff6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe2:	f043 0220 	orr.w	r2, r3, #32
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e007      	b.n	8006006 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006000:	2b80      	cmp	r3, #128	; 0x80
 8006002:	d1ca      	bne.n	8005f9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b084      	sub	sp, #16
 8006012:	af00      	add	r7, sp, #0
 8006014:	60f8      	str	r0, [r7, #12]
 8006016:	60b9      	str	r1, [r7, #8]
 8006018:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800601a:	e02d      	b.n	8006078 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f000 f88d 	bl	800613c <I2C_IsAcknowledgeFailed>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e02d      	b.n	8006088 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006032:	d021      	beq.n	8006078 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006034:	f7fd fefa 	bl	8003e2c <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	429a      	cmp	r2, r3
 8006042:	d302      	bcc.n	800604a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d116      	bne.n	8006078 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006064:	f043 0220 	orr.w	r2, r3, #32
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e007      	b.n	8006088 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	f003 0304 	and.w	r3, r3, #4
 8006082:	2b04      	cmp	r3, #4
 8006084:	d1ca      	bne.n	800601c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800609c:	e042      	b.n	8006124 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	f003 0310 	and.w	r3, r3, #16
 80060a8:	2b10      	cmp	r3, #16
 80060aa:	d119      	bne.n	80060e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f06f 0210 	mvn.w	r2, #16
 80060b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2220      	movs	r2, #32
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e029      	b.n	8006134 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060e0:	f7fd fea4 	bl	8003e2c <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d302      	bcc.n	80060f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d116      	bne.n	8006124 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2220      	movs	r2, #32
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006110:	f043 0220 	orr.w	r2, r3, #32
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e007      	b.n	8006134 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612e:	2b40      	cmp	r3, #64	; 0x40
 8006130:	d1b5      	bne.n	800609e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800614e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006152:	d11b      	bne.n	800618c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800615c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2220      	movs	r2, #32
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006178:	f043 0204 	orr.w	r2, r3, #4
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e000      	b.n	800618e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	d129      	bne.n	8006204 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2224      	movs	r2, #36	; 0x24
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 0201 	bic.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f022 0210 	bic.w	r2, r2, #16
 80061d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f042 0201 	orr.w	r2, r2, #1
 80061f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2220      	movs	r2, #32
 80061fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006200:	2300      	movs	r3, #0
 8006202:	e000      	b.n	8006206 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006204:	2302      	movs	r3, #2
  }
}
 8006206:	4618      	mov	r0, r3
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006212:	b480      	push	{r7}
 8006214:	b085      	sub	sp, #20
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
 800621a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800621c:	2300      	movs	r3, #0
 800621e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b20      	cmp	r3, #32
 800622a:	d12a      	bne.n	8006282 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2224      	movs	r2, #36	; 0x24
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0201 	bic.w	r2, r2, #1
 8006242:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800624c:	89fb      	ldrh	r3, [r7, #14]
 800624e:	f023 030f 	bic.w	r3, r3, #15
 8006252:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	b29a      	uxth	r2, r3
 8006258:	89fb      	ldrh	r3, [r7, #14]
 800625a:	4313      	orrs	r3, r2
 800625c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	89fa      	ldrh	r2, [r7, #14]
 8006264:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f042 0201 	orr.w	r2, r2, #1
 8006274:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2220      	movs	r2, #32
 800627a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	e000      	b.n	8006284 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006282:	2302      	movs	r3, #2
  }
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006296:	2300      	movs	r3, #0
 8006298:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800629a:	2300      	movs	r3, #0
 800629c:	603b      	str	r3, [r7, #0]
 800629e:	4b20      	ldr	r3, [pc, #128]	; (8006320 <HAL_PWREx_EnableOverDrive+0x90>)
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	4a1f      	ldr	r2, [pc, #124]	; (8006320 <HAL_PWREx_EnableOverDrive+0x90>)
 80062a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062a8:	6413      	str	r3, [r2, #64]	; 0x40
 80062aa:	4b1d      	ldr	r3, [pc, #116]	; (8006320 <HAL_PWREx_EnableOverDrive+0x90>)
 80062ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062b2:	603b      	str	r3, [r7, #0]
 80062b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80062b6:	4b1b      	ldr	r3, [pc, #108]	; (8006324 <HAL_PWREx_EnableOverDrive+0x94>)
 80062b8:	2201      	movs	r2, #1
 80062ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062bc:	f7fd fdb6 	bl	8003e2c <HAL_GetTick>
 80062c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80062c2:	e009      	b.n	80062d8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80062c4:	f7fd fdb2 	bl	8003e2c <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062d2:	d901      	bls.n	80062d8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e01f      	b.n	8006318 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80062d8:	4b13      	ldr	r3, [pc, #76]	; (8006328 <HAL_PWREx_EnableOverDrive+0x98>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e4:	d1ee      	bne.n	80062c4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80062e6:	4b11      	ldr	r3, [pc, #68]	; (800632c <HAL_PWREx_EnableOverDrive+0x9c>)
 80062e8:	2201      	movs	r2, #1
 80062ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062ec:	f7fd fd9e 	bl	8003e2c <HAL_GetTick>
 80062f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80062f2:	e009      	b.n	8006308 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80062f4:	f7fd fd9a 	bl	8003e2c <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006302:	d901      	bls.n	8006308 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e007      	b.n	8006318 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006308:	4b07      	ldr	r3, [pc, #28]	; (8006328 <HAL_PWREx_EnableOverDrive+0x98>)
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006310:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006314:	d1ee      	bne.n	80062f4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3708      	adds	r7, #8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	40023800 	.word	0x40023800
 8006324:	420e0040 	.word	0x420e0040
 8006328:	40007000 	.word	0x40007000
 800632c:	420e0044 	.word	0x420e0044

08006330 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e25b      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b00      	cmp	r3, #0
 800634c:	d075      	beq.n	800643a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800634e:	4ba3      	ldr	r3, [pc, #652]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f003 030c 	and.w	r3, r3, #12
 8006356:	2b04      	cmp	r3, #4
 8006358:	d00c      	beq.n	8006374 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800635a:	4ba0      	ldr	r3, [pc, #640]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006362:	2b08      	cmp	r3, #8
 8006364:	d112      	bne.n	800638c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006366:	4b9d      	ldr	r3, [pc, #628]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800636e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006372:	d10b      	bne.n	800638c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006374:	4b99      	ldr	r3, [pc, #612]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d05b      	beq.n	8006438 <HAL_RCC_OscConfig+0x108>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d157      	bne.n	8006438 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e236      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006394:	d106      	bne.n	80063a4 <HAL_RCC_OscConfig+0x74>
 8006396:	4b91      	ldr	r3, [pc, #580]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a90      	ldr	r2, [pc, #576]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 800639c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063a0:	6013      	str	r3, [r2, #0]
 80063a2:	e01d      	b.n	80063e0 <HAL_RCC_OscConfig+0xb0>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063ac:	d10c      	bne.n	80063c8 <HAL_RCC_OscConfig+0x98>
 80063ae:	4b8b      	ldr	r3, [pc, #556]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a8a      	ldr	r2, [pc, #552]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80063b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	4b88      	ldr	r3, [pc, #544]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a87      	ldr	r2, [pc, #540]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80063c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063c4:	6013      	str	r3, [r2, #0]
 80063c6:	e00b      	b.n	80063e0 <HAL_RCC_OscConfig+0xb0>
 80063c8:	4b84      	ldr	r3, [pc, #528]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a83      	ldr	r2, [pc, #524]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80063ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063d2:	6013      	str	r3, [r2, #0]
 80063d4:	4b81      	ldr	r3, [pc, #516]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a80      	ldr	r2, [pc, #512]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80063da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d013      	beq.n	8006410 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063e8:	f7fd fd20 	bl	8003e2c <HAL_GetTick>
 80063ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ee:	e008      	b.n	8006402 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063f0:	f7fd fd1c 	bl	8003e2c <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b64      	cmp	r3, #100	; 0x64
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e1fb      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006402:	4b76      	ldr	r3, [pc, #472]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d0f0      	beq.n	80063f0 <HAL_RCC_OscConfig+0xc0>
 800640e:	e014      	b.n	800643a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006410:	f7fd fd0c 	bl	8003e2c <HAL_GetTick>
 8006414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006416:	e008      	b.n	800642a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006418:	f7fd fd08 	bl	8003e2c <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b64      	cmp	r3, #100	; 0x64
 8006424:	d901      	bls.n	800642a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e1e7      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800642a:	4b6c      	ldr	r3, [pc, #432]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1f0      	bne.n	8006418 <HAL_RCC_OscConfig+0xe8>
 8006436:	e000      	b.n	800643a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d063      	beq.n	800650e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006446:	4b65      	ldr	r3, [pc, #404]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f003 030c 	and.w	r3, r3, #12
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00b      	beq.n	800646a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006452:	4b62      	ldr	r3, [pc, #392]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800645a:	2b08      	cmp	r3, #8
 800645c:	d11c      	bne.n	8006498 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800645e:	4b5f      	ldr	r3, [pc, #380]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d116      	bne.n	8006498 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800646a:	4b5c      	ldr	r3, [pc, #368]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b00      	cmp	r3, #0
 8006474:	d005      	beq.n	8006482 <HAL_RCC_OscConfig+0x152>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d001      	beq.n	8006482 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e1bb      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006482:	4b56      	ldr	r3, [pc, #344]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	4952      	ldr	r1, [pc, #328]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006492:	4313      	orrs	r3, r2
 8006494:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006496:	e03a      	b.n	800650e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d020      	beq.n	80064e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064a0:	4b4f      	ldr	r3, [pc, #316]	; (80065e0 <HAL_RCC_OscConfig+0x2b0>)
 80064a2:	2201      	movs	r2, #1
 80064a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a6:	f7fd fcc1 	bl	8003e2c <HAL_GetTick>
 80064aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ac:	e008      	b.n	80064c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064ae:	f7fd fcbd 	bl	8003e2c <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d901      	bls.n	80064c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e19c      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064c0:	4b46      	ldr	r3, [pc, #280]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0f0      	beq.n	80064ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064cc:	4b43      	ldr	r3, [pc, #268]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	00db      	lsls	r3, r3, #3
 80064da:	4940      	ldr	r1, [pc, #256]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	600b      	str	r3, [r1, #0]
 80064e0:	e015      	b.n	800650e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064e2:	4b3f      	ldr	r3, [pc, #252]	; (80065e0 <HAL_RCC_OscConfig+0x2b0>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064e8:	f7fd fca0 	bl	8003e2c <HAL_GetTick>
 80064ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ee:	e008      	b.n	8006502 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064f0:	f7fd fc9c 	bl	8003e2c <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d901      	bls.n	8006502 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80064fe:	2303      	movs	r3, #3
 8006500:	e17b      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006502:	4b36      	ldr	r3, [pc, #216]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1f0      	bne.n	80064f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0308 	and.w	r3, r3, #8
 8006516:	2b00      	cmp	r3, #0
 8006518:	d030      	beq.n	800657c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d016      	beq.n	8006550 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006522:	4b30      	ldr	r3, [pc, #192]	; (80065e4 <HAL_RCC_OscConfig+0x2b4>)
 8006524:	2201      	movs	r2, #1
 8006526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006528:	f7fd fc80 	bl	8003e2c <HAL_GetTick>
 800652c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800652e:	e008      	b.n	8006542 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006530:	f7fd fc7c 	bl	8003e2c <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e15b      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006542:	4b26      	ldr	r3, [pc, #152]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d0f0      	beq.n	8006530 <HAL_RCC_OscConfig+0x200>
 800654e:	e015      	b.n	800657c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006550:	4b24      	ldr	r3, [pc, #144]	; (80065e4 <HAL_RCC_OscConfig+0x2b4>)
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006556:	f7fd fc69 	bl	8003e2c <HAL_GetTick>
 800655a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800655c:	e008      	b.n	8006570 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800655e:	f7fd fc65 	bl	8003e2c <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b02      	cmp	r3, #2
 800656a:	d901      	bls.n	8006570 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e144      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006570:	4b1a      	ldr	r3, [pc, #104]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006574:	f003 0302 	and.w	r3, r3, #2
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1f0      	bne.n	800655e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0304 	and.w	r3, r3, #4
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 80a0 	beq.w	80066ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800658a:	2300      	movs	r3, #0
 800658c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800658e:	4b13      	ldr	r3, [pc, #76]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10f      	bne.n	80065ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800659a:	2300      	movs	r3, #0
 800659c:	60bb      	str	r3, [r7, #8]
 800659e:	4b0f      	ldr	r3, [pc, #60]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80065a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a2:	4a0e      	ldr	r2, [pc, #56]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80065a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065a8:	6413      	str	r3, [r2, #64]	; 0x40
 80065aa:	4b0c      	ldr	r3, [pc, #48]	; (80065dc <HAL_RCC_OscConfig+0x2ac>)
 80065ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065b2:	60bb      	str	r3, [r7, #8]
 80065b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065b6:	2301      	movs	r3, #1
 80065b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ba:	4b0b      	ldr	r3, [pc, #44]	; (80065e8 <HAL_RCC_OscConfig+0x2b8>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d121      	bne.n	800660a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065c6:	4b08      	ldr	r3, [pc, #32]	; (80065e8 <HAL_RCC_OscConfig+0x2b8>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a07      	ldr	r2, [pc, #28]	; (80065e8 <HAL_RCC_OscConfig+0x2b8>)
 80065cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065d2:	f7fd fc2b 	bl	8003e2c <HAL_GetTick>
 80065d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065d8:	e011      	b.n	80065fe <HAL_RCC_OscConfig+0x2ce>
 80065da:	bf00      	nop
 80065dc:	40023800 	.word	0x40023800
 80065e0:	42470000 	.word	0x42470000
 80065e4:	42470e80 	.word	0x42470e80
 80065e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ec:	f7fd fc1e 	bl	8003e2c <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d901      	bls.n	80065fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e0fd      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065fe:	4b81      	ldr	r3, [pc, #516]	; (8006804 <HAL_RCC_OscConfig+0x4d4>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006606:	2b00      	cmp	r3, #0
 8006608:	d0f0      	beq.n	80065ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d106      	bne.n	8006620 <HAL_RCC_OscConfig+0x2f0>
 8006612:	4b7d      	ldr	r3, [pc, #500]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 8006614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006616:	4a7c      	ldr	r2, [pc, #496]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 8006618:	f043 0301 	orr.w	r3, r3, #1
 800661c:	6713      	str	r3, [r2, #112]	; 0x70
 800661e:	e01c      	b.n	800665a <HAL_RCC_OscConfig+0x32a>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	2b05      	cmp	r3, #5
 8006626:	d10c      	bne.n	8006642 <HAL_RCC_OscConfig+0x312>
 8006628:	4b77      	ldr	r3, [pc, #476]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 800662a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662c:	4a76      	ldr	r2, [pc, #472]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 800662e:	f043 0304 	orr.w	r3, r3, #4
 8006632:	6713      	str	r3, [r2, #112]	; 0x70
 8006634:	4b74      	ldr	r3, [pc, #464]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 8006636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006638:	4a73      	ldr	r2, [pc, #460]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 800663a:	f043 0301 	orr.w	r3, r3, #1
 800663e:	6713      	str	r3, [r2, #112]	; 0x70
 8006640:	e00b      	b.n	800665a <HAL_RCC_OscConfig+0x32a>
 8006642:	4b71      	ldr	r3, [pc, #452]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 8006644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006646:	4a70      	ldr	r2, [pc, #448]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 8006648:	f023 0301 	bic.w	r3, r3, #1
 800664c:	6713      	str	r3, [r2, #112]	; 0x70
 800664e:	4b6e      	ldr	r3, [pc, #440]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 8006650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006652:	4a6d      	ldr	r2, [pc, #436]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 8006654:	f023 0304 	bic.w	r3, r3, #4
 8006658:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d015      	beq.n	800668e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006662:	f7fd fbe3 	bl	8003e2c <HAL_GetTick>
 8006666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006668:	e00a      	b.n	8006680 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800666a:	f7fd fbdf 	bl	8003e2c <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	f241 3288 	movw	r2, #5000	; 0x1388
 8006678:	4293      	cmp	r3, r2
 800667a:	d901      	bls.n	8006680 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800667c:	2303      	movs	r3, #3
 800667e:	e0bc      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006680:	4b61      	ldr	r3, [pc, #388]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 8006682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006684:	f003 0302 	and.w	r3, r3, #2
 8006688:	2b00      	cmp	r3, #0
 800668a:	d0ee      	beq.n	800666a <HAL_RCC_OscConfig+0x33a>
 800668c:	e014      	b.n	80066b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800668e:	f7fd fbcd 	bl	8003e2c <HAL_GetTick>
 8006692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006694:	e00a      	b.n	80066ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006696:	f7fd fbc9 	bl	8003e2c <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d901      	bls.n	80066ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e0a6      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066ac:	4b56      	ldr	r3, [pc, #344]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 80066ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1ee      	bne.n	8006696 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066b8:	7dfb      	ldrb	r3, [r7, #23]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d105      	bne.n	80066ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066be:	4b52      	ldr	r3, [pc, #328]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 80066c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c2:	4a51      	ldr	r2, [pc, #324]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 80066c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 8092 	beq.w	80067f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066d4:	4b4c      	ldr	r3, [pc, #304]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f003 030c 	and.w	r3, r3, #12
 80066dc:	2b08      	cmp	r3, #8
 80066de:	d05c      	beq.n	800679a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d141      	bne.n	800676c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066e8:	4b48      	ldr	r3, [pc, #288]	; (800680c <HAL_RCC_OscConfig+0x4dc>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066ee:	f7fd fb9d 	bl	8003e2c <HAL_GetTick>
 80066f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066f4:	e008      	b.n	8006708 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066f6:	f7fd fb99 	bl	8003e2c <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	2b02      	cmp	r3, #2
 8006702:	d901      	bls.n	8006708 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e078      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006708:	4b3f      	ldr	r3, [pc, #252]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1f0      	bne.n	80066f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	69da      	ldr	r2, [r3, #28]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	431a      	orrs	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006722:	019b      	lsls	r3, r3, #6
 8006724:	431a      	orrs	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672a:	085b      	lsrs	r3, r3, #1
 800672c:	3b01      	subs	r3, #1
 800672e:	041b      	lsls	r3, r3, #16
 8006730:	431a      	orrs	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006736:	061b      	lsls	r3, r3, #24
 8006738:	4933      	ldr	r1, [pc, #204]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 800673a:	4313      	orrs	r3, r2
 800673c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800673e:	4b33      	ldr	r3, [pc, #204]	; (800680c <HAL_RCC_OscConfig+0x4dc>)
 8006740:	2201      	movs	r2, #1
 8006742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006744:	f7fd fb72 	bl	8003e2c <HAL_GetTick>
 8006748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800674a:	e008      	b.n	800675e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800674c:	f7fd fb6e 	bl	8003e2c <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	2b02      	cmp	r3, #2
 8006758:	d901      	bls.n	800675e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e04d      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800675e:	4b2a      	ldr	r3, [pc, #168]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d0f0      	beq.n	800674c <HAL_RCC_OscConfig+0x41c>
 800676a:	e045      	b.n	80067f8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800676c:	4b27      	ldr	r3, [pc, #156]	; (800680c <HAL_RCC_OscConfig+0x4dc>)
 800676e:	2200      	movs	r2, #0
 8006770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006772:	f7fd fb5b 	bl	8003e2c <HAL_GetTick>
 8006776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006778:	e008      	b.n	800678c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800677a:	f7fd fb57 	bl	8003e2c <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	2b02      	cmp	r3, #2
 8006786:	d901      	bls.n	800678c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e036      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800678c:	4b1e      	ldr	r3, [pc, #120]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1f0      	bne.n	800677a <HAL_RCC_OscConfig+0x44a>
 8006798:	e02e      	b.n	80067f8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d101      	bne.n	80067a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e029      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067a6:	4b18      	ldr	r3, [pc, #96]	; (8006808 <HAL_RCC_OscConfig+0x4d8>)
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d11c      	bne.n	80067f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d115      	bne.n	80067f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80067ce:	4013      	ands	r3, r2
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d10d      	bne.n	80067f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d106      	bne.n	80067f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d001      	beq.n	80067f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e000      	b.n	80067fa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	40007000 	.word	0x40007000
 8006808:	40023800 	.word	0x40023800
 800680c:	42470060 	.word	0x42470060

08006810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e0cc      	b.n	80069be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006824:	4b68      	ldr	r3, [pc, #416]	; (80069c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 030f 	and.w	r3, r3, #15
 800682c:	683a      	ldr	r2, [r7, #0]
 800682e:	429a      	cmp	r2, r3
 8006830:	d90c      	bls.n	800684c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006832:	4b65      	ldr	r3, [pc, #404]	; (80069c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	b2d2      	uxtb	r2, r2
 8006838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800683a:	4b63      	ldr	r3, [pc, #396]	; (80069c8 <HAL_RCC_ClockConfig+0x1b8>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 030f 	and.w	r3, r3, #15
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	429a      	cmp	r2, r3
 8006846:	d001      	beq.n	800684c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e0b8      	b.n	80069be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d020      	beq.n	800689a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	2b00      	cmp	r3, #0
 8006862:	d005      	beq.n	8006870 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006864:	4b59      	ldr	r3, [pc, #356]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	4a58      	ldr	r2, [pc, #352]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 800686a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800686e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0308 	and.w	r3, r3, #8
 8006878:	2b00      	cmp	r3, #0
 800687a:	d005      	beq.n	8006888 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800687c:	4b53      	ldr	r3, [pc, #332]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	4a52      	ldr	r2, [pc, #328]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 8006882:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006886:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006888:	4b50      	ldr	r3, [pc, #320]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	494d      	ldr	r1, [pc, #308]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 8006896:	4313      	orrs	r3, r2
 8006898:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d044      	beq.n	8006930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d107      	bne.n	80068be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ae:	4b47      	ldr	r3, [pc, #284]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d119      	bne.n	80068ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e07f      	b.n	80069be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d003      	beq.n	80068ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d107      	bne.n	80068de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068ce:	4b3f      	ldr	r3, [pc, #252]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d109      	bne.n	80068ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e06f      	b.n	80069be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068de:	4b3b      	ldr	r3, [pc, #236]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e067      	b.n	80069be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068ee:	4b37      	ldr	r3, [pc, #220]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f023 0203 	bic.w	r2, r3, #3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	4934      	ldr	r1, [pc, #208]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006900:	f7fd fa94 	bl	8003e2c <HAL_GetTick>
 8006904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006906:	e00a      	b.n	800691e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006908:	f7fd fa90 	bl	8003e2c <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	f241 3288 	movw	r2, #5000	; 0x1388
 8006916:	4293      	cmp	r3, r2
 8006918:	d901      	bls.n	800691e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e04f      	b.n	80069be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800691e:	4b2b      	ldr	r3, [pc, #172]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f003 020c 	and.w	r2, r3, #12
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	429a      	cmp	r2, r3
 800692e:	d1eb      	bne.n	8006908 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006930:	4b25      	ldr	r3, [pc, #148]	; (80069c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 030f 	and.w	r3, r3, #15
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	429a      	cmp	r2, r3
 800693c:	d20c      	bcs.n	8006958 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800693e:	4b22      	ldr	r3, [pc, #136]	; (80069c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	b2d2      	uxtb	r2, r2
 8006944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006946:	4b20      	ldr	r3, [pc, #128]	; (80069c8 <HAL_RCC_ClockConfig+0x1b8>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 030f 	and.w	r3, r3, #15
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	429a      	cmp	r2, r3
 8006952:	d001      	beq.n	8006958 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e032      	b.n	80069be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	2b00      	cmp	r3, #0
 8006962:	d008      	beq.n	8006976 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006964:	4b19      	ldr	r3, [pc, #100]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	4916      	ldr	r1, [pc, #88]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 8006972:	4313      	orrs	r3, r2
 8006974:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0308 	and.w	r3, r3, #8
 800697e:	2b00      	cmp	r3, #0
 8006980:	d009      	beq.n	8006996 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006982:	4b12      	ldr	r3, [pc, #72]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	00db      	lsls	r3, r3, #3
 8006990:	490e      	ldr	r1, [pc, #56]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 8006992:	4313      	orrs	r3, r2
 8006994:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006996:	f000 f821 	bl	80069dc <HAL_RCC_GetSysClockFreq>
 800699a:	4602      	mov	r2, r0
 800699c:	4b0b      	ldr	r3, [pc, #44]	; (80069cc <HAL_RCC_ClockConfig+0x1bc>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	091b      	lsrs	r3, r3, #4
 80069a2:	f003 030f 	and.w	r3, r3, #15
 80069a6:	490a      	ldr	r1, [pc, #40]	; (80069d0 <HAL_RCC_ClockConfig+0x1c0>)
 80069a8:	5ccb      	ldrb	r3, [r1, r3]
 80069aa:	fa22 f303 	lsr.w	r3, r2, r3
 80069ae:	4a09      	ldr	r2, [pc, #36]	; (80069d4 <HAL_RCC_ClockConfig+0x1c4>)
 80069b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80069b2:	4b09      	ldr	r3, [pc, #36]	; (80069d8 <HAL_RCC_ClockConfig+0x1c8>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7fd f9f4 	bl	8003da4 <HAL_InitTick>

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	40023c00 	.word	0x40023c00
 80069cc:	40023800 	.word	0x40023800
 80069d0:	0800b628 	.word	0x0800b628
 80069d4:	200001e0 	.word	0x200001e0
 80069d8:	200001e4 	.word	0x200001e4

080069dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	607b      	str	r3, [r7, #4]
 80069e8:	2300      	movs	r3, #0
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	2300      	movs	r3, #0
 80069ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80069f0:	2300      	movs	r3, #0
 80069f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069f4:	4b67      	ldr	r3, [pc, #412]	; (8006b94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f003 030c 	and.w	r3, r3, #12
 80069fc:	2b08      	cmp	r3, #8
 80069fe:	d00d      	beq.n	8006a1c <HAL_RCC_GetSysClockFreq+0x40>
 8006a00:	2b08      	cmp	r3, #8
 8006a02:	f200 80bd 	bhi.w	8006b80 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d002      	beq.n	8006a10 <HAL_RCC_GetSysClockFreq+0x34>
 8006a0a:	2b04      	cmp	r3, #4
 8006a0c:	d003      	beq.n	8006a16 <HAL_RCC_GetSysClockFreq+0x3a>
 8006a0e:	e0b7      	b.n	8006b80 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a10:	4b61      	ldr	r3, [pc, #388]	; (8006b98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006a12:	60bb      	str	r3, [r7, #8]
       break;
 8006a14:	e0b7      	b.n	8006b86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a16:	4b60      	ldr	r3, [pc, #384]	; (8006b98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006a18:	60bb      	str	r3, [r7, #8]
      break;
 8006a1a:	e0b4      	b.n	8006b86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a1c:	4b5d      	ldr	r3, [pc, #372]	; (8006b94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a24:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a26:	4b5b      	ldr	r3, [pc, #364]	; (8006b94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d04d      	beq.n	8006ace <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a32:	4b58      	ldr	r3, [pc, #352]	; (8006b94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	099b      	lsrs	r3, r3, #6
 8006a38:	461a      	mov	r2, r3
 8006a3a:	f04f 0300 	mov.w	r3, #0
 8006a3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006a42:	f04f 0100 	mov.w	r1, #0
 8006a46:	ea02 0800 	and.w	r8, r2, r0
 8006a4a:	ea03 0901 	and.w	r9, r3, r1
 8006a4e:	4640      	mov	r0, r8
 8006a50:	4649      	mov	r1, r9
 8006a52:	f04f 0200 	mov.w	r2, #0
 8006a56:	f04f 0300 	mov.w	r3, #0
 8006a5a:	014b      	lsls	r3, r1, #5
 8006a5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006a60:	0142      	lsls	r2, r0, #5
 8006a62:	4610      	mov	r0, r2
 8006a64:	4619      	mov	r1, r3
 8006a66:	ebb0 0008 	subs.w	r0, r0, r8
 8006a6a:	eb61 0109 	sbc.w	r1, r1, r9
 8006a6e:	f04f 0200 	mov.w	r2, #0
 8006a72:	f04f 0300 	mov.w	r3, #0
 8006a76:	018b      	lsls	r3, r1, #6
 8006a78:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006a7c:	0182      	lsls	r2, r0, #6
 8006a7e:	1a12      	subs	r2, r2, r0
 8006a80:	eb63 0301 	sbc.w	r3, r3, r1
 8006a84:	f04f 0000 	mov.w	r0, #0
 8006a88:	f04f 0100 	mov.w	r1, #0
 8006a8c:	00d9      	lsls	r1, r3, #3
 8006a8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a92:	00d0      	lsls	r0, r2, #3
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	eb12 0208 	adds.w	r2, r2, r8
 8006a9c:	eb43 0309 	adc.w	r3, r3, r9
 8006aa0:	f04f 0000 	mov.w	r0, #0
 8006aa4:	f04f 0100 	mov.w	r1, #0
 8006aa8:	0299      	lsls	r1, r3, #10
 8006aaa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006aae:	0290      	lsls	r0, r2, #10
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	461a      	mov	r2, r3
 8006abc:	f04f 0300 	mov.w	r3, #0
 8006ac0:	f7fa f89a 	bl	8000bf8 <__aeabi_uldivmod>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	4613      	mov	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	e04a      	b.n	8006b64 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ace:	4b31      	ldr	r3, [pc, #196]	; (8006b94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	099b      	lsrs	r3, r3, #6
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	f04f 0300 	mov.w	r3, #0
 8006ada:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006ade:	f04f 0100 	mov.w	r1, #0
 8006ae2:	ea02 0400 	and.w	r4, r2, r0
 8006ae6:	ea03 0501 	and.w	r5, r3, r1
 8006aea:	4620      	mov	r0, r4
 8006aec:	4629      	mov	r1, r5
 8006aee:	f04f 0200 	mov.w	r2, #0
 8006af2:	f04f 0300 	mov.w	r3, #0
 8006af6:	014b      	lsls	r3, r1, #5
 8006af8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006afc:	0142      	lsls	r2, r0, #5
 8006afe:	4610      	mov	r0, r2
 8006b00:	4619      	mov	r1, r3
 8006b02:	1b00      	subs	r0, r0, r4
 8006b04:	eb61 0105 	sbc.w	r1, r1, r5
 8006b08:	f04f 0200 	mov.w	r2, #0
 8006b0c:	f04f 0300 	mov.w	r3, #0
 8006b10:	018b      	lsls	r3, r1, #6
 8006b12:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006b16:	0182      	lsls	r2, r0, #6
 8006b18:	1a12      	subs	r2, r2, r0
 8006b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8006b1e:	f04f 0000 	mov.w	r0, #0
 8006b22:	f04f 0100 	mov.w	r1, #0
 8006b26:	00d9      	lsls	r1, r3, #3
 8006b28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b2c:	00d0      	lsls	r0, r2, #3
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	1912      	adds	r2, r2, r4
 8006b34:	eb45 0303 	adc.w	r3, r5, r3
 8006b38:	f04f 0000 	mov.w	r0, #0
 8006b3c:	f04f 0100 	mov.w	r1, #0
 8006b40:	0299      	lsls	r1, r3, #10
 8006b42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006b46:	0290      	lsls	r0, r2, #10
 8006b48:	4602      	mov	r2, r0
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	4619      	mov	r1, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	461a      	mov	r2, r3
 8006b54:	f04f 0300 	mov.w	r3, #0
 8006b58:	f7fa f84e 	bl	8000bf8 <__aeabi_uldivmod>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	4613      	mov	r3, r2
 8006b62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b64:	4b0b      	ldr	r3, [pc, #44]	; (8006b94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	0c1b      	lsrs	r3, r3, #16
 8006b6a:	f003 0303 	and.w	r3, r3, #3
 8006b6e:	3301      	adds	r3, #1
 8006b70:	005b      	lsls	r3, r3, #1
 8006b72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b7c:	60bb      	str	r3, [r7, #8]
      break;
 8006b7e:	e002      	b.n	8006b86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b80:	4b05      	ldr	r3, [pc, #20]	; (8006b98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006b82:	60bb      	str	r3, [r7, #8]
      break;
 8006b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b86:	68bb      	ldr	r3, [r7, #8]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006b92:	bf00      	nop
 8006b94:	40023800 	.word	0x40023800
 8006b98:	00f42400 	.word	0x00f42400

08006b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ba0:	4b03      	ldr	r3, [pc, #12]	; (8006bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr
 8006bae:	bf00      	nop
 8006bb0:	200001e0 	.word	0x200001e0

08006bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006bb8:	f7ff fff0 	bl	8006b9c <HAL_RCC_GetHCLKFreq>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	0a9b      	lsrs	r3, r3, #10
 8006bc4:	f003 0307 	and.w	r3, r3, #7
 8006bc8:	4903      	ldr	r1, [pc, #12]	; (8006bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bca:	5ccb      	ldrb	r3, [r1, r3]
 8006bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	40023800 	.word	0x40023800
 8006bd8:	0800b638 	.word	0x0800b638

08006bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006be0:	f7ff ffdc 	bl	8006b9c <HAL_RCC_GetHCLKFreq>
 8006be4:	4602      	mov	r2, r0
 8006be6:	4b05      	ldr	r3, [pc, #20]	; (8006bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	0b5b      	lsrs	r3, r3, #13
 8006bec:	f003 0307 	and.w	r3, r3, #7
 8006bf0:	4903      	ldr	r1, [pc, #12]	; (8006c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bf2:	5ccb      	ldrb	r3, [r1, r3]
 8006bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	40023800 	.word	0x40023800
 8006c00:	0800b638 	.word	0x0800b638

08006c04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e056      	b.n	8006cc4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d106      	bne.n	8006c36 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f7fb ff9b 	bl	8002b6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2202      	movs	r2, #2
 8006c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c4c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	431a      	orrs	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	431a      	orrs	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	431a      	orrs	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c72:	431a      	orrs	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	431a      	orrs	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	ea42 0103 	orr.w	r1, r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	0c1b      	lsrs	r3, r3, #16
 8006c94:	f003 0104 	and.w	r1, r3, #4
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	69da      	ldr	r2, [r3, #28]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cb2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b088      	sub	sp, #32
 8006cd0:	af02      	add	r7, sp, #8
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	603b      	str	r3, [r7, #0]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ce8:	d112      	bne.n	8006d10 <HAL_SPI_Receive+0x44>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10e      	bne.n	8006d10 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2204      	movs	r2, #4
 8006cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006cfa:	88fa      	ldrh	r2, [r7, #6]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	4613      	mov	r3, r2
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	68b9      	ldr	r1, [r7, #8]
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f000 f8e9 	bl	8006ede <HAL_SPI_TransmitReceive>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	e0e2      	b.n	8006ed6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d101      	bne.n	8006d1e <HAL_SPI_Receive+0x52>
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	e0db      	b.n	8006ed6 <HAL_SPI_Receive+0x20a>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d26:	f7fd f881 	bl	8003e2c <HAL_GetTick>
 8006d2a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d002      	beq.n	8006d3e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006d38:	2302      	movs	r3, #2
 8006d3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d3c:	e0c2      	b.n	8006ec4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d002      	beq.n	8006d4a <HAL_SPI_Receive+0x7e>
 8006d44:	88fb      	ldrh	r3, [r7, #6]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d102      	bne.n	8006d50 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006d4e:	e0b9      	b.n	8006ec4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2204      	movs	r2, #4
 8006d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	88fa      	ldrh	r2, [r7, #6]
 8006d68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	88fa      	ldrh	r2, [r7, #6]
 8006d6e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d96:	d107      	bne.n	8006da8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006da6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db2:	2b40      	cmp	r3, #64	; 0x40
 8006db4:	d007      	beq.n	8006dc6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dc4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d162      	bne.n	8006e94 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006dce:	e02e      	b.n	8006e2e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d115      	bne.n	8006e0a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f103 020c 	add.w	r2, r3, #12
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dea:	7812      	ldrb	r2, [r2, #0]
 8006dec:	b2d2      	uxtb	r2, r2
 8006dee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df4:	1c5a      	adds	r2, r3, #1
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	3b01      	subs	r3, #1
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e08:	e011      	b.n	8006e2e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e0a:	f7fd f80f 	bl	8003e2c <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d803      	bhi.n	8006e22 <HAL_SPI_Receive+0x156>
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e20:	d102      	bne.n	8006e28 <HAL_SPI_Receive+0x15c>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d102      	bne.n	8006e2e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006e2c:	e04a      	b.n	8006ec4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1cb      	bne.n	8006dd0 <HAL_SPI_Receive+0x104>
 8006e38:	e031      	b.n	8006e9e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d113      	bne.n	8006e70 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e52:	b292      	uxth	r2, r2
 8006e54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5a:	1c9a      	adds	r2, r3, #2
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	3b01      	subs	r3, #1
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e6e:	e011      	b.n	8006e94 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e70:	f7fc ffdc 	bl	8003e2c <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d803      	bhi.n	8006e88 <HAL_SPI_Receive+0x1bc>
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e86:	d102      	bne.n	8006e8e <HAL_SPI_Receive+0x1c2>
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d102      	bne.n	8006e94 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006e92:	e017      	b.n	8006ec4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1cd      	bne.n	8006e3a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	6839      	ldr	r1, [r7, #0]
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 fa27 	bl	80072f6 <SPI_EndRxTransaction>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d002      	beq.n	8006eb4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	75fb      	strb	r3, [r7, #23]
 8006ec0:	e000      	b.n	8006ec4 <HAL_SPI_Receive+0x1f8>
  }

error :
 8006ec2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3718      	adds	r7, #24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b08c      	sub	sp, #48	; 0x30
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	60f8      	str	r0, [r7, #12]
 8006ee6:	60b9      	str	r1, [r7, #8]
 8006ee8:	607a      	str	r2, [r7, #4]
 8006eea:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006eec:	2301      	movs	r3, #1
 8006eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d101      	bne.n	8006f04 <HAL_SPI_TransmitReceive+0x26>
 8006f00:	2302      	movs	r3, #2
 8006f02:	e18a      	b.n	800721a <HAL_SPI_TransmitReceive+0x33c>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f0c:	f7fc ff8e 	bl	8003e2c <HAL_GetTick>
 8006f10:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006f22:	887b      	ldrh	r3, [r7, #2]
 8006f24:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006f26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d00f      	beq.n	8006f4e <HAL_SPI_TransmitReceive+0x70>
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f34:	d107      	bne.n	8006f46 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d103      	bne.n	8006f46 <HAL_SPI_TransmitReceive+0x68>
 8006f3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f42:	2b04      	cmp	r3, #4
 8006f44:	d003      	beq.n	8006f4e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006f46:	2302      	movs	r3, #2
 8006f48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006f4c:	e15b      	b.n	8007206 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d005      	beq.n	8006f60 <HAL_SPI_TransmitReceive+0x82>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d002      	beq.n	8006f60 <HAL_SPI_TransmitReceive+0x82>
 8006f5a:	887b      	ldrh	r3, [r7, #2]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d103      	bne.n	8006f68 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006f66:	e14e      	b.n	8007206 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b04      	cmp	r3, #4
 8006f72:	d003      	beq.n	8006f7c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2205      	movs	r2, #5
 8006f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	887a      	ldrh	r2, [r7, #2]
 8006f8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	887a      	ldrh	r2, [r7, #2]
 8006f92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	887a      	ldrh	r2, [r7, #2]
 8006f9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	887a      	ldrh	r2, [r7, #2]
 8006fa4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fbc:	2b40      	cmp	r3, #64	; 0x40
 8006fbe:	d007      	beq.n	8006fd0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fd8:	d178      	bne.n	80070cc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d002      	beq.n	8006fe8 <HAL_SPI_TransmitReceive+0x10a>
 8006fe2:	8b7b      	ldrh	r3, [r7, #26]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d166      	bne.n	80070b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fec:	881a      	ldrh	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff8:	1c9a      	adds	r2, r3, #2
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007002:	b29b      	uxth	r3, r3
 8007004:	3b01      	subs	r3, #1
 8007006:	b29a      	uxth	r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800700c:	e053      	b.n	80070b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f003 0302 	and.w	r3, r3, #2
 8007018:	2b02      	cmp	r3, #2
 800701a:	d11b      	bne.n	8007054 <HAL_SPI_TransmitReceive+0x176>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007020:	b29b      	uxth	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d016      	beq.n	8007054 <HAL_SPI_TransmitReceive+0x176>
 8007026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007028:	2b01      	cmp	r3, #1
 800702a:	d113      	bne.n	8007054 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007030:	881a      	ldrh	r2, [r3, #0]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800703c:	1c9a      	adds	r2, r3, #2
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007046:	b29b      	uxth	r3, r3
 8007048:	3b01      	subs	r3, #1
 800704a:	b29a      	uxth	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007050:	2300      	movs	r3, #0
 8007052:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b01      	cmp	r3, #1
 8007060:	d119      	bne.n	8007096 <HAL_SPI_TransmitReceive+0x1b8>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007066:	b29b      	uxth	r3, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	d014      	beq.n	8007096 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68da      	ldr	r2, [r3, #12]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007076:	b292      	uxth	r2, r2
 8007078:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707e:	1c9a      	adds	r2, r3, #2
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007088:	b29b      	uxth	r3, r3
 800708a:	3b01      	subs	r3, #1
 800708c:	b29a      	uxth	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007092:	2301      	movs	r3, #1
 8007094:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007096:	f7fc fec9 	bl	8003e2c <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d807      	bhi.n	80070b6 <HAL_SPI_TransmitReceive+0x1d8>
 80070a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070ac:	d003      	beq.n	80070b6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80070b4:	e0a7      	b.n	8007206 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1a6      	bne.n	800700e <HAL_SPI_TransmitReceive+0x130>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1a1      	bne.n	800700e <HAL_SPI_TransmitReceive+0x130>
 80070ca:	e07c      	b.n	80071c6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d002      	beq.n	80070da <HAL_SPI_TransmitReceive+0x1fc>
 80070d4:	8b7b      	ldrh	r3, [r7, #26]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d16b      	bne.n	80071b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	330c      	adds	r3, #12
 80070e4:	7812      	ldrb	r2, [r2, #0]
 80070e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ec:	1c5a      	adds	r2, r3, #1
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	3b01      	subs	r3, #1
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007100:	e057      	b.n	80071b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f003 0302 	and.w	r3, r3, #2
 800710c:	2b02      	cmp	r3, #2
 800710e:	d11c      	bne.n	800714a <HAL_SPI_TransmitReceive+0x26c>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007114:	b29b      	uxth	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d017      	beq.n	800714a <HAL_SPI_TransmitReceive+0x26c>
 800711a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711c:	2b01      	cmp	r3, #1
 800711e:	d114      	bne.n	800714a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	330c      	adds	r3, #12
 800712a:	7812      	ldrb	r2, [r2, #0]
 800712c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007132:	1c5a      	adds	r2, r3, #1
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800713c:	b29b      	uxth	r3, r3
 800713e:	3b01      	subs	r3, #1
 8007140:	b29a      	uxth	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	2b01      	cmp	r3, #1
 8007156:	d119      	bne.n	800718c <HAL_SPI_TransmitReceive+0x2ae>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800715c:	b29b      	uxth	r3, r3
 800715e:	2b00      	cmp	r3, #0
 8007160:	d014      	beq.n	800718c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716c:	b2d2      	uxtb	r2, r2
 800716e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007174:	1c5a      	adds	r2, r3, #1
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800717e:	b29b      	uxth	r3, r3
 8007180:	3b01      	subs	r3, #1
 8007182:	b29a      	uxth	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007188:	2301      	movs	r3, #1
 800718a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800718c:	f7fc fe4e 	bl	8003e2c <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007198:	429a      	cmp	r2, r3
 800719a:	d803      	bhi.n	80071a4 <HAL_SPI_TransmitReceive+0x2c6>
 800719c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071a2:	d102      	bne.n	80071aa <HAL_SPI_TransmitReceive+0x2cc>
 80071a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d103      	bne.n	80071b2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80071b0:	e029      	b.n	8007206 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1a2      	bne.n	8007102 <HAL_SPI_TransmitReceive+0x224>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d19d      	bne.n	8007102 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f000 f8f8 	bl	80073c0 <SPI_EndRxTxTransaction>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d006      	beq.n	80071e4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2220      	movs	r2, #32
 80071e0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80071e2:	e010      	b.n	8007206 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10b      	bne.n	8007204 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071ec:	2300      	movs	r3, #0
 80071ee:	617b      	str	r3, [r7, #20]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	617b      	str	r3, [r7, #20]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	617b      	str	r3, [r7, #20]
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	e000      	b.n	8007206 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007204:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007216:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800721a:	4618      	mov	r0, r3
 800721c:	3730      	adds	r7, #48	; 0x30
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	60f8      	str	r0, [r7, #12]
 800722a:	60b9      	str	r1, [r7, #8]
 800722c:	603b      	str	r3, [r7, #0]
 800722e:	4613      	mov	r3, r2
 8007230:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007232:	e04c      	b.n	80072ce <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800723a:	d048      	beq.n	80072ce <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800723c:	f7fc fdf6 	bl	8003e2c <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	429a      	cmp	r2, r3
 800724a:	d902      	bls.n	8007252 <SPI_WaitFlagStateUntilTimeout+0x30>
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d13d      	bne.n	80072ce <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007260:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800726a:	d111      	bne.n	8007290 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007274:	d004      	beq.n	8007280 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800727e:	d107      	bne.n	8007290 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800728e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007298:	d10f      	bne.n	80072ba <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e00f      	b.n	80072ee <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689a      	ldr	r2, [r3, #8]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	4013      	ands	r3, r2
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	429a      	cmp	r2, r3
 80072dc:	bf0c      	ite	eq
 80072de:	2301      	moveq	r3, #1
 80072e0:	2300      	movne	r3, #0
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	461a      	mov	r2, r3
 80072e6:	79fb      	ldrb	r3, [r7, #7]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d1a3      	bne.n	8007234 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b086      	sub	sp, #24
 80072fa:	af02      	add	r7, sp, #8
 80072fc:	60f8      	str	r0, [r7, #12]
 80072fe:	60b9      	str	r1, [r7, #8]
 8007300:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800730a:	d111      	bne.n	8007330 <SPI_EndRxTransaction+0x3a>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007314:	d004      	beq.n	8007320 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800731e:	d107      	bne.n	8007330 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800732e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007338:	d12a      	bne.n	8007390 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007342:	d012      	beq.n	800736a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2200      	movs	r2, #0
 800734c:	2180      	movs	r1, #128	; 0x80
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f7ff ff67 	bl	8007222 <SPI_WaitFlagStateUntilTimeout>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d02d      	beq.n	80073b6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800735e:	f043 0220 	orr.w	r2, r3, #32
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e026      	b.n	80073b8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	2200      	movs	r2, #0
 8007372:	2101      	movs	r1, #1
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f7ff ff54 	bl	8007222 <SPI_WaitFlagStateUntilTimeout>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d01a      	beq.n	80073b6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007384:	f043 0220 	orr.w	r2, r3, #32
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	e013      	b.n	80073b8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2200      	movs	r2, #0
 8007398:	2101      	movs	r1, #1
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f7ff ff41 	bl	8007222 <SPI_WaitFlagStateUntilTimeout>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d007      	beq.n	80073b6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073aa:	f043 0220 	orr.w	r2, r3, #32
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e000      	b.n	80073b8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b088      	sub	sp, #32
 80073c4:	af02      	add	r7, sp, #8
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80073cc:	4b1b      	ldr	r3, [pc, #108]	; (800743c <SPI_EndRxTxTransaction+0x7c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a1b      	ldr	r2, [pc, #108]	; (8007440 <SPI_EndRxTxTransaction+0x80>)
 80073d2:	fba2 2303 	umull	r2, r3, r2, r3
 80073d6:	0d5b      	lsrs	r3, r3, #21
 80073d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073dc:	fb02 f303 	mul.w	r3, r2, r3
 80073e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073ea:	d112      	bne.n	8007412 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2200      	movs	r2, #0
 80073f4:	2180      	movs	r1, #128	; 0x80
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f7ff ff13 	bl	8007222 <SPI_WaitFlagStateUntilTimeout>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d016      	beq.n	8007430 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007406:	f043 0220 	orr.w	r2, r3, #32
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e00f      	b.n	8007432 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00a      	beq.n	800742e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	3b01      	subs	r3, #1
 800741c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007428:	2b80      	cmp	r3, #128	; 0x80
 800742a:	d0f2      	beq.n	8007412 <SPI_EndRxTxTransaction+0x52>
 800742c:	e000      	b.n	8007430 <SPI_EndRxTxTransaction+0x70>
        break;
 800742e:	bf00      	nop
  }

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	200001e0 	.word	0x200001e0
 8007440:	165e9f81 	.word	0x165e9f81

08007444 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e01d      	b.n	8007492 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	d106      	bne.n	8007470 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7fb fe92 	bl	8003194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2202      	movs	r2, #2
 8007474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	3304      	adds	r3, #4
 8007480:	4619      	mov	r1, r3
 8007482:	4610      	mov	r0, r2
 8007484:	f000 fafc 	bl	8007a80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800749a:	b480      	push	{r7}
 800749c:	b085      	sub	sp, #20
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2202      	movs	r2, #2
 80074a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f003 0307 	and.w	r3, r3, #7
 80074b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2b06      	cmp	r3, #6
 80074ba:	d007      	beq.n	80074cc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f042 0201 	orr.w	r2, r2, #1
 80074ca:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b082      	sub	sp, #8
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e01d      	b.n	8007530 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d106      	bne.n	800750e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f815 	bl	8007538 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2202      	movs	r2, #2
 8007512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	3304      	adds	r3, #4
 800751e:	4619      	mov	r1, r3
 8007520:	4610      	mov	r0, r2
 8007522:	f000 faad 	bl	8007a80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2201      	movs	r2, #1
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	4618      	mov	r0, r3
 8007560:	f000 fea2 	bl	80082a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a15      	ldr	r2, [pc, #84]	; (80075c0 <HAL_TIM_PWM_Start+0x74>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d004      	beq.n	8007578 <HAL_TIM_PWM_Start+0x2c>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a14      	ldr	r2, [pc, #80]	; (80075c4 <HAL_TIM_PWM_Start+0x78>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d101      	bne.n	800757c <HAL_TIM_PWM_Start+0x30>
 8007578:	2301      	movs	r3, #1
 800757a:	e000      	b.n	800757e <HAL_TIM_PWM_Start+0x32>
 800757c:	2300      	movs	r3, #0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d007      	beq.n	8007592 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007590:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f003 0307 	and.w	r3, r3, #7
 800759c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2b06      	cmp	r3, #6
 80075a2:	d007      	beq.n	80075b4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f042 0201 	orr.w	r2, r2, #1
 80075b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	40010000 	.word	0x40010000
 80075c4:	40010400 	.word	0x40010400

080075c8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e01d      	b.n	8007616 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d106      	bne.n	80075f4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f815 	bl	800761e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	3304      	adds	r3, #4
 8007604:	4619      	mov	r1, r3
 8007606:	4610      	mov	r0, r2
 8007608:	f000 fa3a 	bl	8007a80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800761e:	b480      	push	{r7}
 8007620:	b083      	sub	sp, #12
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007626:	bf00      	nop
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	60f8      	str	r0, [r7, #12]
 800763a:	60b9      	str	r1, [r7, #8]
 800763c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007644:	2b01      	cmp	r3, #1
 8007646:	d101      	bne.n	800764c <HAL_TIM_IC_ConfigChannel+0x1a>
 8007648:	2302      	movs	r3, #2
 800764a:	e08a      	b.n	8007762 <HAL_TIM_IC_ConfigChannel+0x130>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2202      	movs	r2, #2
 8007658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d11b      	bne.n	800769a <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6818      	ldr	r0, [r3, #0]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	6819      	ldr	r1, [r3, #0]
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	f000 fc55 	bl	8007f20 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	699a      	ldr	r2, [r3, #24]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f022 020c 	bic.w	r2, r2, #12
 8007684:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	6999      	ldr	r1, [r3, #24]
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	689a      	ldr	r2, [r3, #8]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	430a      	orrs	r2, r1
 8007696:	619a      	str	r2, [r3, #24]
 8007698:	e05a      	b.n	8007750 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2b04      	cmp	r3, #4
 800769e:	d11c      	bne.n	80076da <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6818      	ldr	r0, [r3, #0]
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	6819      	ldr	r1, [r3, #0]
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	f000 fcd9 	bl	8008066 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	699a      	ldr	r2, [r3, #24]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80076c2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	6999      	ldr	r1, [r3, #24]
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	021a      	lsls	r2, r3, #8
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	430a      	orrs	r2, r1
 80076d6:	619a      	str	r2, [r3, #24]
 80076d8:	e03a      	b.n	8007750 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b08      	cmp	r3, #8
 80076de:	d11b      	bne.n	8007718 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6818      	ldr	r0, [r3, #0]
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	6819      	ldr	r1, [r3, #0]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	f000 fd26 	bl	8008140 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	69da      	ldr	r2, [r3, #28]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f022 020c 	bic.w	r2, r2, #12
 8007702:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	69d9      	ldr	r1, [r3, #28]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	689a      	ldr	r2, [r3, #8]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	430a      	orrs	r2, r1
 8007714:	61da      	str	r2, [r3, #28]
 8007716:	e01b      	b.n	8007750 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6818      	ldr	r0, [r3, #0]
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	6819      	ldr	r1, [r3, #0]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	f000 fd46 	bl	80081b8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	69da      	ldr	r2, [r3, #28]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800773a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	69d9      	ldr	r1, [r3, #28]
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	021a      	lsls	r2, r3, #8
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	430a      	orrs	r2, r1
 800774e:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
	...

0800776c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800777e:	2b01      	cmp	r3, #1
 8007780:	d101      	bne.n	8007786 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007782:	2302      	movs	r3, #2
 8007784:	e0b4      	b.n	80078f0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2202      	movs	r2, #2
 8007792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2b0c      	cmp	r3, #12
 800779a:	f200 809f 	bhi.w	80078dc <HAL_TIM_PWM_ConfigChannel+0x170>
 800779e:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80077a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a4:	080077d9 	.word	0x080077d9
 80077a8:	080078dd 	.word	0x080078dd
 80077ac:	080078dd 	.word	0x080078dd
 80077b0:	080078dd 	.word	0x080078dd
 80077b4:	08007819 	.word	0x08007819
 80077b8:	080078dd 	.word	0x080078dd
 80077bc:	080078dd 	.word	0x080078dd
 80077c0:	080078dd 	.word	0x080078dd
 80077c4:	0800785b 	.word	0x0800785b
 80077c8:	080078dd 	.word	0x080078dd
 80077cc:	080078dd 	.word	0x080078dd
 80077d0:	080078dd 	.word	0x080078dd
 80077d4:	0800789b 	.word	0x0800789b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68b9      	ldr	r1, [r7, #8]
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 f9ee 	bl	8007bc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	699a      	ldr	r2, [r3, #24]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f042 0208 	orr.w	r2, r2, #8
 80077f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	699a      	ldr	r2, [r3, #24]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f022 0204 	bic.w	r2, r2, #4
 8007802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6999      	ldr	r1, [r3, #24]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	691a      	ldr	r2, [r3, #16]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	619a      	str	r2, [r3, #24]
      break;
 8007816:	e062      	b.n	80078de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68b9      	ldr	r1, [r7, #8]
 800781e:	4618      	mov	r0, r3
 8007820:	f000 fa3e 	bl	8007ca0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	699a      	ldr	r2, [r3, #24]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	699a      	ldr	r2, [r3, #24]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	6999      	ldr	r1, [r3, #24]
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	021a      	lsls	r2, r3, #8
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	430a      	orrs	r2, r1
 8007856:	619a      	str	r2, [r3, #24]
      break;
 8007858:	e041      	b.n	80078de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68b9      	ldr	r1, [r7, #8]
 8007860:	4618      	mov	r0, r3
 8007862:	f000 fa93 	bl	8007d8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	69da      	ldr	r2, [r3, #28]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f042 0208 	orr.w	r2, r2, #8
 8007874:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	69da      	ldr	r2, [r3, #28]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f022 0204 	bic.w	r2, r2, #4
 8007884:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	69d9      	ldr	r1, [r3, #28]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	691a      	ldr	r2, [r3, #16]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	430a      	orrs	r2, r1
 8007896:	61da      	str	r2, [r3, #28]
      break;
 8007898:	e021      	b.n	80078de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68b9      	ldr	r1, [r7, #8]
 80078a0:	4618      	mov	r0, r3
 80078a2:	f000 fae7 	bl	8007e74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	69da      	ldr	r2, [r3, #28]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	69da      	ldr	r2, [r3, #28]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	69d9      	ldr	r1, [r3, #28]
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	021a      	lsls	r2, r3, #8
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	61da      	str	r2, [r3, #28]
      break;
 80078da:	e000      	b.n	80078de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80078dc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007908:	2b01      	cmp	r3, #1
 800790a:	d101      	bne.n	8007910 <HAL_TIM_ConfigClockSource+0x18>
 800790c:	2302      	movs	r3, #2
 800790e:	e0b3      	b.n	8007a78 <HAL_TIM_ConfigClockSource+0x180>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2202      	movs	r2, #2
 800791c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800792e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007936:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007948:	d03e      	beq.n	80079c8 <HAL_TIM_ConfigClockSource+0xd0>
 800794a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800794e:	f200 8087 	bhi.w	8007a60 <HAL_TIM_ConfigClockSource+0x168>
 8007952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007956:	f000 8085 	beq.w	8007a64 <HAL_TIM_ConfigClockSource+0x16c>
 800795a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800795e:	d87f      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x168>
 8007960:	2b70      	cmp	r3, #112	; 0x70
 8007962:	d01a      	beq.n	800799a <HAL_TIM_ConfigClockSource+0xa2>
 8007964:	2b70      	cmp	r3, #112	; 0x70
 8007966:	d87b      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x168>
 8007968:	2b60      	cmp	r3, #96	; 0x60
 800796a:	d050      	beq.n	8007a0e <HAL_TIM_ConfigClockSource+0x116>
 800796c:	2b60      	cmp	r3, #96	; 0x60
 800796e:	d877      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x168>
 8007970:	2b50      	cmp	r3, #80	; 0x50
 8007972:	d03c      	beq.n	80079ee <HAL_TIM_ConfigClockSource+0xf6>
 8007974:	2b50      	cmp	r3, #80	; 0x50
 8007976:	d873      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x168>
 8007978:	2b40      	cmp	r3, #64	; 0x40
 800797a:	d058      	beq.n	8007a2e <HAL_TIM_ConfigClockSource+0x136>
 800797c:	2b40      	cmp	r3, #64	; 0x40
 800797e:	d86f      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x168>
 8007980:	2b30      	cmp	r3, #48	; 0x30
 8007982:	d064      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x156>
 8007984:	2b30      	cmp	r3, #48	; 0x30
 8007986:	d86b      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x168>
 8007988:	2b20      	cmp	r3, #32
 800798a:	d060      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x156>
 800798c:	2b20      	cmp	r3, #32
 800798e:	d867      	bhi.n	8007a60 <HAL_TIM_ConfigClockSource+0x168>
 8007990:	2b00      	cmp	r3, #0
 8007992:	d05c      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x156>
 8007994:	2b10      	cmp	r3, #16
 8007996:	d05a      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007998:	e062      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6818      	ldr	r0, [r3, #0]
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	6899      	ldr	r1, [r3, #8]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	f000 fc5d 	bl	8008268 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80079bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	609a      	str	r2, [r3, #8]
      break;
 80079c6:	e04e      	b.n	8007a66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6818      	ldr	r0, [r3, #0]
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	6899      	ldr	r1, [r3, #8]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	f000 fc46 	bl	8008268 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	689a      	ldr	r2, [r3, #8]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079ea:	609a      	str	r2, [r3, #8]
      break;
 80079ec:	e03b      	b.n	8007a66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6818      	ldr	r0, [r3, #0]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	6859      	ldr	r1, [r3, #4]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	461a      	mov	r2, r3
 80079fc:	f000 fb04 	bl	8008008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2150      	movs	r1, #80	; 0x50
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 fc13 	bl	8008232 <TIM_ITRx_SetConfig>
      break;
 8007a0c:	e02b      	b.n	8007a66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6818      	ldr	r0, [r3, #0]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	6859      	ldr	r1, [r3, #4]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	f000 fb60 	bl	80080e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2160      	movs	r1, #96	; 0x60
 8007a26:	4618      	mov	r0, r3
 8007a28:	f000 fc03 	bl	8008232 <TIM_ITRx_SetConfig>
      break;
 8007a2c:	e01b      	b.n	8007a66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6818      	ldr	r0, [r3, #0]
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	6859      	ldr	r1, [r3, #4]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	f000 fae4 	bl	8008008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2140      	movs	r1, #64	; 0x40
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 fbf3 	bl	8008232 <TIM_ITRx_SetConfig>
      break;
 8007a4c:	e00b      	b.n	8007a66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4619      	mov	r1, r3
 8007a58:	4610      	mov	r0, r2
 8007a5a:	f000 fbea 	bl	8008232 <TIM_ITRx_SetConfig>
      break;
 8007a5e:	e002      	b.n	8007a66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007a60:	bf00      	nop
 8007a62:	e000      	b.n	8007a66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007a64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a40      	ldr	r2, [pc, #256]	; (8007b94 <TIM_Base_SetConfig+0x114>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d013      	beq.n	8007ac0 <TIM_Base_SetConfig+0x40>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a9e:	d00f      	beq.n	8007ac0 <TIM_Base_SetConfig+0x40>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a3d      	ldr	r2, [pc, #244]	; (8007b98 <TIM_Base_SetConfig+0x118>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d00b      	beq.n	8007ac0 <TIM_Base_SetConfig+0x40>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a3c      	ldr	r2, [pc, #240]	; (8007b9c <TIM_Base_SetConfig+0x11c>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d007      	beq.n	8007ac0 <TIM_Base_SetConfig+0x40>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a3b      	ldr	r2, [pc, #236]	; (8007ba0 <TIM_Base_SetConfig+0x120>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d003      	beq.n	8007ac0 <TIM_Base_SetConfig+0x40>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a3a      	ldr	r2, [pc, #232]	; (8007ba4 <TIM_Base_SetConfig+0x124>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d108      	bne.n	8007ad2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a2f      	ldr	r2, [pc, #188]	; (8007b94 <TIM_Base_SetConfig+0x114>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d02b      	beq.n	8007b32 <TIM_Base_SetConfig+0xb2>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae0:	d027      	beq.n	8007b32 <TIM_Base_SetConfig+0xb2>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a2c      	ldr	r2, [pc, #176]	; (8007b98 <TIM_Base_SetConfig+0x118>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d023      	beq.n	8007b32 <TIM_Base_SetConfig+0xb2>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a2b      	ldr	r2, [pc, #172]	; (8007b9c <TIM_Base_SetConfig+0x11c>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d01f      	beq.n	8007b32 <TIM_Base_SetConfig+0xb2>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a2a      	ldr	r2, [pc, #168]	; (8007ba0 <TIM_Base_SetConfig+0x120>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d01b      	beq.n	8007b32 <TIM_Base_SetConfig+0xb2>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a29      	ldr	r2, [pc, #164]	; (8007ba4 <TIM_Base_SetConfig+0x124>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d017      	beq.n	8007b32 <TIM_Base_SetConfig+0xb2>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a28      	ldr	r2, [pc, #160]	; (8007ba8 <TIM_Base_SetConfig+0x128>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d013      	beq.n	8007b32 <TIM_Base_SetConfig+0xb2>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a27      	ldr	r2, [pc, #156]	; (8007bac <TIM_Base_SetConfig+0x12c>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d00f      	beq.n	8007b32 <TIM_Base_SetConfig+0xb2>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a26      	ldr	r2, [pc, #152]	; (8007bb0 <TIM_Base_SetConfig+0x130>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d00b      	beq.n	8007b32 <TIM_Base_SetConfig+0xb2>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a25      	ldr	r2, [pc, #148]	; (8007bb4 <TIM_Base_SetConfig+0x134>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d007      	beq.n	8007b32 <TIM_Base_SetConfig+0xb2>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a24      	ldr	r2, [pc, #144]	; (8007bb8 <TIM_Base_SetConfig+0x138>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d003      	beq.n	8007b32 <TIM_Base_SetConfig+0xb2>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a23      	ldr	r2, [pc, #140]	; (8007bbc <TIM_Base_SetConfig+0x13c>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d108      	bne.n	8007b44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	689a      	ldr	r2, [r3, #8]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a0a      	ldr	r2, [pc, #40]	; (8007b94 <TIM_Base_SetConfig+0x114>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d003      	beq.n	8007b78 <TIM_Base_SetConfig+0xf8>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a0c      	ldr	r2, [pc, #48]	; (8007ba4 <TIM_Base_SetConfig+0x124>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d103      	bne.n	8007b80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	691a      	ldr	r2, [r3, #16]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	615a      	str	r2, [r3, #20]
}
 8007b86:	bf00      	nop
 8007b88:	3714      	adds	r7, #20
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	40010000 	.word	0x40010000
 8007b98:	40000400 	.word	0x40000400
 8007b9c:	40000800 	.word	0x40000800
 8007ba0:	40000c00 	.word	0x40000c00
 8007ba4:	40010400 	.word	0x40010400
 8007ba8:	40014000 	.word	0x40014000
 8007bac:	40014400 	.word	0x40014400
 8007bb0:	40014800 	.word	0x40014800
 8007bb4:	40001800 	.word	0x40001800
 8007bb8:	40001c00 	.word	0x40001c00
 8007bbc:	40002000 	.word	0x40002000

08007bc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b087      	sub	sp, #28
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	f023 0201 	bic.w	r2, r3, #1
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f023 0303 	bic.w	r3, r3, #3
 8007bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	f023 0302 	bic.w	r3, r3, #2
 8007c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a20      	ldr	r2, [pc, #128]	; (8007c98 <TIM_OC1_SetConfig+0xd8>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d003      	beq.n	8007c24 <TIM_OC1_SetConfig+0x64>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a1f      	ldr	r2, [pc, #124]	; (8007c9c <TIM_OC1_SetConfig+0xdc>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d10c      	bne.n	8007c3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	f023 0308 	bic.w	r3, r3, #8
 8007c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	f023 0304 	bic.w	r3, r3, #4
 8007c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a15      	ldr	r2, [pc, #84]	; (8007c98 <TIM_OC1_SetConfig+0xd8>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d003      	beq.n	8007c4e <TIM_OC1_SetConfig+0x8e>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	4a14      	ldr	r2, [pc, #80]	; (8007c9c <TIM_OC1_SetConfig+0xdc>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d111      	bne.n	8007c72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	693a      	ldr	r2, [r7, #16]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	693a      	ldr	r2, [r7, #16]
 8007c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	685a      	ldr	r2, [r3, #4]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	621a      	str	r2, [r3, #32]
}
 8007c8c:	bf00      	nop
 8007c8e:	371c      	adds	r7, #28
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	40010000 	.word	0x40010000
 8007c9c:	40010400 	.word	0x40010400

08007ca0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	f023 0210 	bic.w	r2, r3, #16
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	021b      	lsls	r3, r3, #8
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	f023 0320 	bic.w	r3, r3, #32
 8007cea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	011b      	lsls	r3, r3, #4
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a22      	ldr	r2, [pc, #136]	; (8007d84 <TIM_OC2_SetConfig+0xe4>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d003      	beq.n	8007d08 <TIM_OC2_SetConfig+0x68>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a21      	ldr	r2, [pc, #132]	; (8007d88 <TIM_OC2_SetConfig+0xe8>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d10d      	bne.n	8007d24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	011b      	lsls	r3, r3, #4
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a17      	ldr	r2, [pc, #92]	; (8007d84 <TIM_OC2_SetConfig+0xe4>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d003      	beq.n	8007d34 <TIM_OC2_SetConfig+0x94>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a16      	ldr	r2, [pc, #88]	; (8007d88 <TIM_OC2_SetConfig+0xe8>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d113      	bne.n	8007d5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	695b      	ldr	r3, [r3, #20]
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	693a      	ldr	r2, [r7, #16]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	621a      	str	r2, [r3, #32]
}
 8007d76:	bf00      	nop
 8007d78:	371c      	adds	r7, #28
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	40010000 	.word	0x40010000
 8007d88:	40010400 	.word	0x40010400

08007d8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b087      	sub	sp, #28
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	69db      	ldr	r3, [r3, #28]
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f023 0303 	bic.w	r3, r3, #3
 8007dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	021b      	lsls	r3, r3, #8
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a21      	ldr	r2, [pc, #132]	; (8007e6c <TIM_OC3_SetConfig+0xe0>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d003      	beq.n	8007df2 <TIM_OC3_SetConfig+0x66>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a20      	ldr	r2, [pc, #128]	; (8007e70 <TIM_OC3_SetConfig+0xe4>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d10d      	bne.n	8007e0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007df8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	021b      	lsls	r3, r3, #8
 8007e00:	697a      	ldr	r2, [r7, #20]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a16      	ldr	r2, [pc, #88]	; (8007e6c <TIM_OC3_SetConfig+0xe0>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d003      	beq.n	8007e1e <TIM_OC3_SetConfig+0x92>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a15      	ldr	r2, [pc, #84]	; (8007e70 <TIM_OC3_SetConfig+0xe4>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d113      	bne.n	8007e46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	011b      	lsls	r3, r3, #4
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	011b      	lsls	r3, r3, #4
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	693a      	ldr	r2, [r7, #16]
 8007e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	697a      	ldr	r2, [r7, #20]
 8007e5e:	621a      	str	r2, [r3, #32]
}
 8007e60:	bf00      	nop
 8007e62:	371c      	adds	r7, #28
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	40010000 	.word	0x40010000
 8007e70:	40010400 	.word	0x40010400

08007e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b087      	sub	sp, #28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	69db      	ldr	r3, [r3, #28]
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	021b      	lsls	r3, r3, #8
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	031b      	lsls	r3, r3, #12
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a12      	ldr	r2, [pc, #72]	; (8007f18 <TIM_OC4_SetConfig+0xa4>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d003      	beq.n	8007edc <TIM_OC4_SetConfig+0x68>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a11      	ldr	r2, [pc, #68]	; (8007f1c <TIM_OC4_SetConfig+0xa8>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d109      	bne.n	8007ef0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ee2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	019b      	lsls	r3, r3, #6
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	621a      	str	r2, [r3, #32]
}
 8007f0a:	bf00      	nop
 8007f0c:	371c      	adds	r7, #28
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	40010000 	.word	0x40010000
 8007f1c:	40010400 	.word	0x40010400

08007f20 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b087      	sub	sp, #28
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
 8007f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	f023 0201 	bic.w	r2, r3, #1
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6a1b      	ldr	r3, [r3, #32]
 8007f44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	4a28      	ldr	r2, [pc, #160]	; (8007fec <TIM_TI1_SetConfig+0xcc>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d01b      	beq.n	8007f86 <TIM_TI1_SetConfig+0x66>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f54:	d017      	beq.n	8007f86 <TIM_TI1_SetConfig+0x66>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	4a25      	ldr	r2, [pc, #148]	; (8007ff0 <TIM_TI1_SetConfig+0xd0>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d013      	beq.n	8007f86 <TIM_TI1_SetConfig+0x66>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	4a24      	ldr	r2, [pc, #144]	; (8007ff4 <TIM_TI1_SetConfig+0xd4>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d00f      	beq.n	8007f86 <TIM_TI1_SetConfig+0x66>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	4a23      	ldr	r2, [pc, #140]	; (8007ff8 <TIM_TI1_SetConfig+0xd8>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d00b      	beq.n	8007f86 <TIM_TI1_SetConfig+0x66>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	4a22      	ldr	r2, [pc, #136]	; (8007ffc <TIM_TI1_SetConfig+0xdc>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d007      	beq.n	8007f86 <TIM_TI1_SetConfig+0x66>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	4a21      	ldr	r2, [pc, #132]	; (8008000 <TIM_TI1_SetConfig+0xe0>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d003      	beq.n	8007f86 <TIM_TI1_SetConfig+0x66>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	4a20      	ldr	r2, [pc, #128]	; (8008004 <TIM_TI1_SetConfig+0xe4>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d101      	bne.n	8007f8a <TIM_TI1_SetConfig+0x6a>
 8007f86:	2301      	movs	r3, #1
 8007f88:	e000      	b.n	8007f8c <TIM_TI1_SetConfig+0x6c>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d008      	beq.n	8007fa2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f023 0303 	bic.w	r3, r3, #3
 8007f96:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	617b      	str	r3, [r7, #20]
 8007fa0:	e003      	b.n	8007faa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f043 0301 	orr.w	r3, r3, #1
 8007fa8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	011b      	lsls	r3, r3, #4
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	f023 030a 	bic.w	r3, r3, #10
 8007fc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	f003 030a 	and.w	r3, r3, #10
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	621a      	str	r2, [r3, #32]
}
 8007fde:	bf00      	nop
 8007fe0:	371c      	adds	r7, #28
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	40010000 	.word	0x40010000
 8007ff0:	40000400 	.word	0x40000400
 8007ff4:	40000800 	.word	0x40000800
 8007ff8:	40000c00 	.word	0x40000c00
 8007ffc:	40010400 	.word	0x40010400
 8008000:	40014000 	.word	0x40014000
 8008004:	40001800 	.word	0x40001800

08008008 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008008:	b480      	push	{r7}
 800800a:	b087      	sub	sp, #28
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6a1b      	ldr	r3, [r3, #32]
 8008018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	f023 0201 	bic.w	r2, r3, #1
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	011b      	lsls	r3, r3, #4
 8008038:	693a      	ldr	r2, [r7, #16]
 800803a:	4313      	orrs	r3, r2
 800803c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	f023 030a 	bic.w	r3, r3, #10
 8008044:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008046:	697a      	ldr	r2, [r7, #20]
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	4313      	orrs	r3, r2
 800804c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	621a      	str	r2, [r3, #32]
}
 800805a:	bf00      	nop
 800805c:	371c      	adds	r7, #28
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008066:	b480      	push	{r7}
 8008068:	b087      	sub	sp, #28
 800806a:	af00      	add	r7, sp, #0
 800806c:	60f8      	str	r0, [r7, #12]
 800806e:	60b9      	str	r1, [r7, #8]
 8008070:	607a      	str	r2, [r7, #4]
 8008072:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6a1b      	ldr	r3, [r3, #32]
 8008078:	f023 0210 	bic.w	r2, r3, #16
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6a1b      	ldr	r3, [r3, #32]
 800808a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008092:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	021b      	lsls	r3, r3, #8
 8008098:	697a      	ldr	r2, [r7, #20]
 800809a:	4313      	orrs	r3, r2
 800809c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	031b      	lsls	r3, r3, #12
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	011b      	lsls	r3, r3, #4
 80080be:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	621a      	str	r2, [r3, #32]
}
 80080d4:	bf00      	nop
 80080d6:	371c      	adds	r7, #28
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b087      	sub	sp, #28
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6a1b      	ldr	r3, [r3, #32]
 80080f0:	f023 0210 	bic.w	r2, r3, #16
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6a1b      	ldr	r3, [r3, #32]
 8008102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800810a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	031b      	lsls	r3, r3, #12
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	4313      	orrs	r3, r2
 8008114:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800811c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	011b      	lsls	r3, r3, #4
 8008122:	693a      	ldr	r2, [r7, #16]
 8008124:	4313      	orrs	r3, r2
 8008126:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	621a      	str	r2, [r3, #32]
}
 8008134:	bf00      	nop
 8008136:	371c      	adds	r7, #28
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008140:	b480      	push	{r7}
 8008142:	b087      	sub	sp, #28
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
 800814c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6a1b      	ldr	r3, [r3, #32]
 8008152:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	69db      	ldr	r3, [r3, #28]
 800815e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6a1b      	ldr	r3, [r3, #32]
 8008164:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	f023 0303 	bic.w	r3, r3, #3
 800816c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4313      	orrs	r3, r2
 8008174:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800817c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	011b      	lsls	r3, r3, #4
 8008182:	b2db      	uxtb	r3, r3
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	4313      	orrs	r3, r2
 8008188:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008190:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	021b      	lsls	r3, r3, #8
 8008196:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	4313      	orrs	r3, r2
 800819e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	621a      	str	r2, [r3, #32]
}
 80081ac:	bf00      	nop
 80081ae:	371c      	adds	r7, #28
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b087      	sub	sp, #28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
 80081c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6a1b      	ldr	r3, [r3, #32]
 80081ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	69db      	ldr	r3, [r3, #28]
 80081d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6a1b      	ldr	r3, [r3, #32]
 80081dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	021b      	lsls	r3, r3, #8
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	031b      	lsls	r3, r3, #12
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	4313      	orrs	r3, r2
 8008202:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800820a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	031b      	lsls	r3, r3, #12
 8008210:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	4313      	orrs	r3, r2
 8008218:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	621a      	str	r2, [r3, #32]
}
 8008226:	bf00      	nop
 8008228:	371c      	adds	r7, #28
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr

08008232 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008232:	b480      	push	{r7}
 8008234:	b085      	sub	sp, #20
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008248:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	4313      	orrs	r3, r2
 8008250:	f043 0307 	orr.w	r3, r3, #7
 8008254:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	609a      	str	r2, [r3, #8]
}
 800825c:	bf00      	nop
 800825e:	3714      	adds	r7, #20
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008268:	b480      	push	{r7}
 800826a:	b087      	sub	sp, #28
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
 8008274:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008282:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	021a      	lsls	r2, r3, #8
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	431a      	orrs	r2, r3
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	4313      	orrs	r3, r2
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	4313      	orrs	r3, r2
 8008294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	609a      	str	r2, [r3, #8]
}
 800829c:	bf00      	nop
 800829e:	371c      	adds	r7, #28
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b087      	sub	sp, #28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	f003 031f 	and.w	r3, r3, #31
 80082ba:	2201      	movs	r2, #1
 80082bc:	fa02 f303 	lsl.w	r3, r2, r3
 80082c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6a1a      	ldr	r2, [r3, #32]
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	43db      	mvns	r3, r3
 80082ca:	401a      	ands	r2, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6a1a      	ldr	r2, [r3, #32]
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	f003 031f 	and.w	r3, r3, #31
 80082da:	6879      	ldr	r1, [r7, #4]
 80082dc:	fa01 f303 	lsl.w	r3, r1, r3
 80082e0:	431a      	orrs	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	621a      	str	r2, [r3, #32]
}
 80082e6:	bf00      	nop
 80082e8:	371c      	adds	r7, #28
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
	...

080082f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008304:	2b01      	cmp	r3, #1
 8008306:	d101      	bne.n	800830c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008308:	2302      	movs	r3, #2
 800830a:	e05a      	b.n	80083c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008332:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	4313      	orrs	r3, r2
 800833c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a21      	ldr	r2, [pc, #132]	; (80083d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d022      	beq.n	8008396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008358:	d01d      	beq.n	8008396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a1d      	ldr	r2, [pc, #116]	; (80083d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d018      	beq.n	8008396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a1b      	ldr	r2, [pc, #108]	; (80083d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d013      	beq.n	8008396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a1a      	ldr	r2, [pc, #104]	; (80083dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d00e      	beq.n	8008396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a18      	ldr	r2, [pc, #96]	; (80083e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d009      	beq.n	8008396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a17      	ldr	r2, [pc, #92]	; (80083e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d004      	beq.n	8008396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a15      	ldr	r2, [pc, #84]	; (80083e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d10c      	bne.n	80083b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800839c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	40010000 	.word	0x40010000
 80083d4:	40000400 	.word	0x40000400
 80083d8:	40000800 	.word	0x40000800
 80083dc:	40000c00 	.word	0x40000c00
 80083e0:	40010400 	.word	0x40010400
 80083e4:	40014000 	.word	0x40014000
 80083e8:	40001800 	.word	0x40001800

080083ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80083f6:	2300      	movs	r3, #0
 80083f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008400:	2b01      	cmp	r3, #1
 8008402:	d101      	bne.n	8008408 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008404:	2302      	movs	r3, #2
 8008406:	e03d      	b.n	8008484 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	4313      	orrs	r3, r2
 800841c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	4313      	orrs	r3, r2
 800842a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	4313      	orrs	r3, r2
 8008438:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4313      	orrs	r3, r2
 8008446:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	4313      	orrs	r3, r2
 8008454:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	4313      	orrs	r3, r2
 8008462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	69db      	ldr	r3, [r3, #28]
 800846e:	4313      	orrs	r3, r2
 8008470:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3714      	adds	r7, #20
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e03f      	b.n	8008522 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d106      	bne.n	80084bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7fa ffa8 	bl	800340c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2224      	movs	r2, #36	; 0x24
 80084c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68da      	ldr	r2, [r3, #12]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fa5f 	bl	8008998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	691a      	ldr	r2, [r3, #16]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	695a      	ldr	r2, [r3, #20]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68da      	ldr	r2, [r3, #12]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008508:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2220      	movs	r2, #32
 8008514:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2220      	movs	r2, #32
 800851c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b088      	sub	sp, #32
 800852e:	af02      	add	r7, sp, #8
 8008530:	60f8      	str	r0, [r7, #12]
 8008532:	60b9      	str	r1, [r7, #8]
 8008534:	603b      	str	r3, [r7, #0]
 8008536:	4613      	mov	r3, r2
 8008538:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800853a:	2300      	movs	r3, #0
 800853c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b20      	cmp	r3, #32
 8008548:	f040 8083 	bne.w	8008652 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d002      	beq.n	8008558 <HAL_UART_Transmit+0x2e>
 8008552:	88fb      	ldrh	r3, [r7, #6]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d101      	bne.n	800855c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	e07b      	b.n	8008654 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008562:	2b01      	cmp	r3, #1
 8008564:	d101      	bne.n	800856a <HAL_UART_Transmit+0x40>
 8008566:	2302      	movs	r3, #2
 8008568:	e074      	b.n	8008654 <HAL_UART_Transmit+0x12a>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2201      	movs	r2, #1
 800856e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2200      	movs	r2, #0
 8008576:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2221      	movs	r2, #33	; 0x21
 800857c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008580:	f7fb fc54 	bl	8003e2c <HAL_GetTick>
 8008584:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	88fa      	ldrh	r2, [r7, #6]
 800858a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	88fa      	ldrh	r2, [r7, #6]
 8008590:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800859a:	e042      	b.n	8008622 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	3b01      	subs	r3, #1
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085b2:	d122      	bne.n	80085fa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	2200      	movs	r2, #0
 80085bc:	2180      	movs	r1, #128	; 0x80
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f000 f96c 	bl	800889c <UART_WaitOnFlagUntilTimeout>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80085ca:	2303      	movs	r3, #3
 80085cc:	e042      	b.n	8008654 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	881b      	ldrh	r3, [r3, #0]
 80085d6:	461a      	mov	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085e0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	691b      	ldr	r3, [r3, #16]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d103      	bne.n	80085f2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	3302      	adds	r3, #2
 80085ee:	60bb      	str	r3, [r7, #8]
 80085f0:	e017      	b.n	8008622 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	3301      	adds	r3, #1
 80085f6:	60bb      	str	r3, [r7, #8]
 80085f8:	e013      	b.n	8008622 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	2200      	movs	r2, #0
 8008602:	2180      	movs	r1, #128	; 0x80
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f000 f949 	bl	800889c <UART_WaitOnFlagUntilTimeout>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d001      	beq.n	8008614 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e01f      	b.n	8008654 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	1c5a      	adds	r2, r3, #1
 8008618:	60ba      	str	r2, [r7, #8]
 800861a:	781a      	ldrb	r2, [r3, #0]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008626:	b29b      	uxth	r3, r3
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1b7      	bne.n	800859c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	2200      	movs	r2, #0
 8008634:	2140      	movs	r1, #64	; 0x40
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f000 f930 	bl	800889c <UART_WaitOnFlagUntilTimeout>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d001      	beq.n	8008646 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e006      	b.n	8008654 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2220      	movs	r2, #32
 800864a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800864e:	2300      	movs	r3, #0
 8008650:	e000      	b.n	8008654 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008652:	2302      	movs	r3, #2
  }
}
 8008654:	4618      	mov	r0, r3
 8008656:	3718      	adds	r7, #24
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b086      	sub	sp, #24
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	4613      	mov	r3, r2
 8008668:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b20      	cmp	r3, #32
 8008674:	d166      	bne.n	8008744 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d002      	beq.n	8008682 <HAL_UART_Receive_DMA+0x26>
 800867c:	88fb      	ldrh	r3, [r7, #6]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d101      	bne.n	8008686 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e05f      	b.n	8008746 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800868c:	2b01      	cmp	r3, #1
 800868e:	d101      	bne.n	8008694 <HAL_UART_Receive_DMA+0x38>
 8008690:	2302      	movs	r3, #2
 8008692:	e058      	b.n	8008746 <HAL_UART_Receive_DMA+0xea>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	88fa      	ldrh	r2, [r7, #6]
 80086a6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2200      	movs	r2, #0
 80086ac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2222      	movs	r2, #34	; 0x22
 80086b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ba:	4a25      	ldr	r2, [pc, #148]	; (8008750 <HAL_UART_Receive_DMA+0xf4>)
 80086bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c2:	4a24      	ldr	r2, [pc, #144]	; (8008754 <HAL_UART_Receive_DMA+0xf8>)
 80086c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ca:	4a23      	ldr	r2, [pc, #140]	; (8008758 <HAL_UART_Receive_DMA+0xfc>)
 80086cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d2:	2200      	movs	r2, #0
 80086d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80086d6:	f107 0308 	add.w	r3, r7, #8
 80086da:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3304      	adds	r3, #4
 80086e6:	4619      	mov	r1, r3
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	88fb      	ldrh	r3, [r7, #6]
 80086ee:	f7fc f8dd 	bl	80048ac <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80086f2:	2300      	movs	r3, #0
 80086f4:	613b      	str	r3, [r7, #16]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	613b      	str	r3, [r7, #16]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	613b      	str	r3, [r7, #16]
 8008706:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68da      	ldr	r2, [r3, #12]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800871e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	695a      	ldr	r2, [r3, #20]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f042 0201 	orr.w	r2, r2, #1
 800872e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	695a      	ldr	r2, [r3, #20]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800873e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008740:	2300      	movs	r3, #0
 8008742:	e000      	b.n	8008746 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008744:	2302      	movs	r3, #2
  }
}
 8008746:	4618      	mov	r0, r3
 8008748:	3718      	adds	r7, #24
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	08008785 	.word	0x08008785
 8008754:	080087ed 	.word	0x080087ed
 8008758:	08008809 	.word	0x08008809

0800875c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008790:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800879c:	2b00      	cmp	r3, #0
 800879e:	d11e      	bne.n	80087de <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68da      	ldr	r2, [r3, #12]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087b4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	695a      	ldr	r2, [r3, #20]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f022 0201 	bic.w	r2, r2, #1
 80087c4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	695a      	ldr	r2, [r3, #20]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087d4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2220      	movs	r2, #32
 80087da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f7f9 fd4a 	bl	8002278 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087e4:	bf00      	nop
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f7ff ffae 	bl	800875c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008800:	bf00      	nop
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008810:	2300      	movs	r3, #0
 8008812:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008818:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	695b      	ldr	r3, [r3, #20]
 8008820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008824:	2b80      	cmp	r3, #128	; 0x80
 8008826:	bf0c      	ite	eq
 8008828:	2301      	moveq	r3, #1
 800882a:	2300      	movne	r3, #0
 800882c:	b2db      	uxtb	r3, r3
 800882e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b21      	cmp	r3, #33	; 0x21
 800883a:	d108      	bne.n	800884e <UART_DMAError+0x46>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d005      	beq.n	800884e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2200      	movs	r2, #0
 8008846:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008848:	68b8      	ldr	r0, [r7, #8]
 800884a:	f000 f871 	bl	8008930 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	695b      	ldr	r3, [r3, #20]
 8008854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008858:	2b40      	cmp	r3, #64	; 0x40
 800885a:	bf0c      	ite	eq
 800885c:	2301      	moveq	r3, #1
 800885e:	2300      	movne	r3, #0
 8008860:	b2db      	uxtb	r3, r3
 8008862:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800886a:	b2db      	uxtb	r3, r3
 800886c:	2b22      	cmp	r3, #34	; 0x22
 800886e:	d108      	bne.n	8008882 <UART_DMAError+0x7a>
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d005      	beq.n	8008882 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	2200      	movs	r2, #0
 800887a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800887c:	68b8      	ldr	r0, [r7, #8]
 800887e:	f000 f86d 	bl	800895c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008886:	f043 0210 	orr.w	r2, r3, #16
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800888e:	68b8      	ldr	r0, [r7, #8]
 8008890:	f7ff ff6e 	bl	8008770 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008894:	bf00      	nop
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	603b      	str	r3, [r7, #0]
 80088a8:	4613      	mov	r3, r2
 80088aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088ac:	e02c      	b.n	8008908 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088b4:	d028      	beq.n	8008908 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d007      	beq.n	80088cc <UART_WaitOnFlagUntilTimeout+0x30>
 80088bc:	f7fb fab6 	bl	8003e2c <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	69ba      	ldr	r2, [r7, #24]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d21d      	bcs.n	8008908 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68da      	ldr	r2, [r3, #12]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80088da:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	695a      	ldr	r2, [r3, #20]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f022 0201 	bic.w	r2, r2, #1
 80088ea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2220      	movs	r2, #32
 80088f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2220      	movs	r2, #32
 80088f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008904:	2303      	movs	r3, #3
 8008906:	e00f      	b.n	8008928 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	4013      	ands	r3, r2
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	429a      	cmp	r2, r3
 8008916:	bf0c      	ite	eq
 8008918:	2301      	moveq	r3, #1
 800891a:	2300      	movne	r3, #0
 800891c:	b2db      	uxtb	r3, r3
 800891e:	461a      	mov	r2, r3
 8008920:	79fb      	ldrb	r3, [r7, #7]
 8008922:	429a      	cmp	r2, r3
 8008924:	d0c3      	beq.n	80088ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68da      	ldr	r2, [r3, #12]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008946:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2220      	movs	r2, #32
 800894c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	68da      	ldr	r2, [r3, #12]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008972:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	695a      	ldr	r2, [r3, #20]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f022 0201 	bic.w	r2, r2, #1
 8008982:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2220      	movs	r2, #32
 8008988:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899c:	b0bd      	sub	sp, #244	; 0xf4
 800899e:	af00      	add	r7, sp, #0
 80089a0:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80089b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089b4:	68d9      	ldr	r1, [r3, #12]
 80089b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	ea40 0301 	orr.w	r3, r0, r1
 80089c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80089c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089c6:	689a      	ldr	r2, [r3, #8]
 80089c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	431a      	orrs	r2, r3
 80089d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	431a      	orrs	r2, r3
 80089d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089dc:	69db      	ldr	r3, [r3, #28]
 80089de:	4313      	orrs	r3, r2
 80089e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80089e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80089f0:	f021 010c 	bic.w	r1, r1, #12
 80089f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80089fe:	430b      	orrs	r3, r1
 8008a00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	695b      	ldr	r3, [r3, #20]
 8008a0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a12:	6999      	ldr	r1, [r3, #24]
 8008a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	ea40 0301 	orr.w	r3, r0, r1
 8008a1e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a24:	69db      	ldr	r3, [r3, #28]
 8008a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a2a:	f040 81a5 	bne.w	8008d78 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	4bcd      	ldr	r3, [pc, #820]	; (8008d6c <UART_SetConfig+0x3d4>)
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d006      	beq.n	8008a48 <UART_SetConfig+0xb0>
 8008a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	4bcb      	ldr	r3, [pc, #812]	; (8008d70 <UART_SetConfig+0x3d8>)
 8008a42:	429a      	cmp	r2, r3
 8008a44:	f040 80cb 	bne.w	8008bde <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a48:	f7fe f8c8 	bl	8006bdc <HAL_RCC_GetPCLK2Freq>
 8008a4c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008a54:	461c      	mov	r4, r3
 8008a56:	f04f 0500 	mov.w	r5, #0
 8008a5a:	4622      	mov	r2, r4
 8008a5c:	462b      	mov	r3, r5
 8008a5e:	1891      	adds	r1, r2, r2
 8008a60:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8008a64:	415b      	adcs	r3, r3
 8008a66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008a6a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008a6e:	1912      	adds	r2, r2, r4
 8008a70:	eb45 0303 	adc.w	r3, r5, r3
 8008a74:	f04f 0000 	mov.w	r0, #0
 8008a78:	f04f 0100 	mov.w	r1, #0
 8008a7c:	00d9      	lsls	r1, r3, #3
 8008a7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a82:	00d0      	lsls	r0, r2, #3
 8008a84:	4602      	mov	r2, r0
 8008a86:	460b      	mov	r3, r1
 8008a88:	1911      	adds	r1, r2, r4
 8008a8a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8008a8e:	416b      	adcs	r3, r5
 8008a90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	f04f 0300 	mov.w	r3, #0
 8008aa0:	1891      	adds	r1, r2, r2
 8008aa2:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8008aa6:	415b      	adcs	r3, r3
 8008aa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008aac:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008ab0:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008ab4:	f7f8 f8a0 	bl	8000bf8 <__aeabi_uldivmod>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	460b      	mov	r3, r1
 8008abc:	4bad      	ldr	r3, [pc, #692]	; (8008d74 <UART_SetConfig+0x3dc>)
 8008abe:	fba3 2302 	umull	r2, r3, r3, r2
 8008ac2:	095b      	lsrs	r3, r3, #5
 8008ac4:	011e      	lsls	r6, r3, #4
 8008ac6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008aca:	461c      	mov	r4, r3
 8008acc:	f04f 0500 	mov.w	r5, #0
 8008ad0:	4622      	mov	r2, r4
 8008ad2:	462b      	mov	r3, r5
 8008ad4:	1891      	adds	r1, r2, r2
 8008ad6:	67b9      	str	r1, [r7, #120]	; 0x78
 8008ad8:	415b      	adcs	r3, r3
 8008ada:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008adc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008ae0:	1912      	adds	r2, r2, r4
 8008ae2:	eb45 0303 	adc.w	r3, r5, r3
 8008ae6:	f04f 0000 	mov.w	r0, #0
 8008aea:	f04f 0100 	mov.w	r1, #0
 8008aee:	00d9      	lsls	r1, r3, #3
 8008af0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008af4:	00d0      	lsls	r0, r2, #3
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	1911      	adds	r1, r2, r4
 8008afc:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008b00:	416b      	adcs	r3, r5
 8008b02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	f04f 0300 	mov.w	r3, #0
 8008b12:	1891      	adds	r1, r2, r2
 8008b14:	6739      	str	r1, [r7, #112]	; 0x70
 8008b16:	415b      	adcs	r3, r3
 8008b18:	677b      	str	r3, [r7, #116]	; 0x74
 8008b1a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008b1e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8008b22:	f7f8 f869 	bl	8000bf8 <__aeabi_uldivmod>
 8008b26:	4602      	mov	r2, r0
 8008b28:	460b      	mov	r3, r1
 8008b2a:	4b92      	ldr	r3, [pc, #584]	; (8008d74 <UART_SetConfig+0x3dc>)
 8008b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8008b30:	095b      	lsrs	r3, r3, #5
 8008b32:	2164      	movs	r1, #100	; 0x64
 8008b34:	fb01 f303 	mul.w	r3, r1, r3
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	00db      	lsls	r3, r3, #3
 8008b3c:	3332      	adds	r3, #50	; 0x32
 8008b3e:	4a8d      	ldr	r2, [pc, #564]	; (8008d74 <UART_SetConfig+0x3dc>)
 8008b40:	fba2 2303 	umull	r2, r3, r2, r3
 8008b44:	095b      	lsrs	r3, r3, #5
 8008b46:	005b      	lsls	r3, r3, #1
 8008b48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008b4c:	441e      	add	r6, r3
 8008b4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008b52:	4618      	mov	r0, r3
 8008b54:	f04f 0100 	mov.w	r1, #0
 8008b58:	4602      	mov	r2, r0
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	1894      	adds	r4, r2, r2
 8008b5e:	66bc      	str	r4, [r7, #104]	; 0x68
 8008b60:	415b      	adcs	r3, r3
 8008b62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b64:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008b68:	1812      	adds	r2, r2, r0
 8008b6a:	eb41 0303 	adc.w	r3, r1, r3
 8008b6e:	f04f 0400 	mov.w	r4, #0
 8008b72:	f04f 0500 	mov.w	r5, #0
 8008b76:	00dd      	lsls	r5, r3, #3
 8008b78:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008b7c:	00d4      	lsls	r4, r2, #3
 8008b7e:	4622      	mov	r2, r4
 8008b80:	462b      	mov	r3, r5
 8008b82:	1814      	adds	r4, r2, r0
 8008b84:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8008b88:	414b      	adcs	r3, r1
 8008b8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	461a      	mov	r2, r3
 8008b96:	f04f 0300 	mov.w	r3, #0
 8008b9a:	1891      	adds	r1, r2, r2
 8008b9c:	6639      	str	r1, [r7, #96]	; 0x60
 8008b9e:	415b      	adcs	r3, r3
 8008ba0:	667b      	str	r3, [r7, #100]	; 0x64
 8008ba2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8008ba6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008baa:	f7f8 f825 	bl	8000bf8 <__aeabi_uldivmod>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	4b70      	ldr	r3, [pc, #448]	; (8008d74 <UART_SetConfig+0x3dc>)
 8008bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8008bb8:	095b      	lsrs	r3, r3, #5
 8008bba:	2164      	movs	r1, #100	; 0x64
 8008bbc:	fb01 f303 	mul.w	r3, r1, r3
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	00db      	lsls	r3, r3, #3
 8008bc4:	3332      	adds	r3, #50	; 0x32
 8008bc6:	4a6b      	ldr	r2, [pc, #428]	; (8008d74 <UART_SetConfig+0x3dc>)
 8008bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8008bcc:	095b      	lsrs	r3, r3, #5
 8008bce:	f003 0207 	and.w	r2, r3, #7
 8008bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4432      	add	r2, r6
 8008bda:	609a      	str	r2, [r3, #8]
 8008bdc:	e26d      	b.n	80090ba <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008bde:	f7fd ffe9 	bl	8006bb4 <HAL_RCC_GetPCLK1Freq>
 8008be2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008be6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008bea:	461c      	mov	r4, r3
 8008bec:	f04f 0500 	mov.w	r5, #0
 8008bf0:	4622      	mov	r2, r4
 8008bf2:	462b      	mov	r3, r5
 8008bf4:	1891      	adds	r1, r2, r2
 8008bf6:	65b9      	str	r1, [r7, #88]	; 0x58
 8008bf8:	415b      	adcs	r3, r3
 8008bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008bfc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c00:	1912      	adds	r2, r2, r4
 8008c02:	eb45 0303 	adc.w	r3, r5, r3
 8008c06:	f04f 0000 	mov.w	r0, #0
 8008c0a:	f04f 0100 	mov.w	r1, #0
 8008c0e:	00d9      	lsls	r1, r3, #3
 8008c10:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c14:	00d0      	lsls	r0, r2, #3
 8008c16:	4602      	mov	r2, r0
 8008c18:	460b      	mov	r3, r1
 8008c1a:	1911      	adds	r1, r2, r4
 8008c1c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8008c20:	416b      	adcs	r3, r5
 8008c22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	f04f 0300 	mov.w	r3, #0
 8008c32:	1891      	adds	r1, r2, r2
 8008c34:	6539      	str	r1, [r7, #80]	; 0x50
 8008c36:	415b      	adcs	r3, r3
 8008c38:	657b      	str	r3, [r7, #84]	; 0x54
 8008c3a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008c3e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8008c42:	f7f7 ffd9 	bl	8000bf8 <__aeabi_uldivmod>
 8008c46:	4602      	mov	r2, r0
 8008c48:	460b      	mov	r3, r1
 8008c4a:	4b4a      	ldr	r3, [pc, #296]	; (8008d74 <UART_SetConfig+0x3dc>)
 8008c4c:	fba3 2302 	umull	r2, r3, r3, r2
 8008c50:	095b      	lsrs	r3, r3, #5
 8008c52:	011e      	lsls	r6, r3, #4
 8008c54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008c58:	461c      	mov	r4, r3
 8008c5a:	f04f 0500 	mov.w	r5, #0
 8008c5e:	4622      	mov	r2, r4
 8008c60:	462b      	mov	r3, r5
 8008c62:	1891      	adds	r1, r2, r2
 8008c64:	64b9      	str	r1, [r7, #72]	; 0x48
 8008c66:	415b      	adcs	r3, r3
 8008c68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c6a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c6e:	1912      	adds	r2, r2, r4
 8008c70:	eb45 0303 	adc.w	r3, r5, r3
 8008c74:	f04f 0000 	mov.w	r0, #0
 8008c78:	f04f 0100 	mov.w	r1, #0
 8008c7c:	00d9      	lsls	r1, r3, #3
 8008c7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008c82:	00d0      	lsls	r0, r2, #3
 8008c84:	4602      	mov	r2, r0
 8008c86:	460b      	mov	r3, r1
 8008c88:	1911      	adds	r1, r2, r4
 8008c8a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8008c8e:	416b      	adcs	r3, r5
 8008c90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	f04f 0300 	mov.w	r3, #0
 8008ca0:	1891      	adds	r1, r2, r2
 8008ca2:	6439      	str	r1, [r7, #64]	; 0x40
 8008ca4:	415b      	adcs	r3, r3
 8008ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8008ca8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008cac:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8008cb0:	f7f7 ffa2 	bl	8000bf8 <__aeabi_uldivmod>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	4b2e      	ldr	r3, [pc, #184]	; (8008d74 <UART_SetConfig+0x3dc>)
 8008cba:	fba3 1302 	umull	r1, r3, r3, r2
 8008cbe:	095b      	lsrs	r3, r3, #5
 8008cc0:	2164      	movs	r1, #100	; 0x64
 8008cc2:	fb01 f303 	mul.w	r3, r1, r3
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	00db      	lsls	r3, r3, #3
 8008cca:	3332      	adds	r3, #50	; 0x32
 8008ccc:	4a29      	ldr	r2, [pc, #164]	; (8008d74 <UART_SetConfig+0x3dc>)
 8008cce:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd2:	095b      	lsrs	r3, r3, #5
 8008cd4:	005b      	lsls	r3, r3, #1
 8008cd6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008cda:	441e      	add	r6, r3
 8008cdc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f04f 0100 	mov.w	r1, #0
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	460b      	mov	r3, r1
 8008cea:	1894      	adds	r4, r2, r2
 8008cec:	63bc      	str	r4, [r7, #56]	; 0x38
 8008cee:	415b      	adcs	r3, r3
 8008cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cf2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008cf6:	1812      	adds	r2, r2, r0
 8008cf8:	eb41 0303 	adc.w	r3, r1, r3
 8008cfc:	f04f 0400 	mov.w	r4, #0
 8008d00:	f04f 0500 	mov.w	r5, #0
 8008d04:	00dd      	lsls	r5, r3, #3
 8008d06:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008d0a:	00d4      	lsls	r4, r2, #3
 8008d0c:	4622      	mov	r2, r4
 8008d0e:	462b      	mov	r3, r5
 8008d10:	1814      	adds	r4, r2, r0
 8008d12:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8008d16:	414b      	adcs	r3, r1
 8008d18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	461a      	mov	r2, r3
 8008d24:	f04f 0300 	mov.w	r3, #0
 8008d28:	1891      	adds	r1, r2, r2
 8008d2a:	6339      	str	r1, [r7, #48]	; 0x30
 8008d2c:	415b      	adcs	r3, r3
 8008d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8008d30:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008d34:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008d38:	f7f7 ff5e 	bl	8000bf8 <__aeabi_uldivmod>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	460b      	mov	r3, r1
 8008d40:	4b0c      	ldr	r3, [pc, #48]	; (8008d74 <UART_SetConfig+0x3dc>)
 8008d42:	fba3 1302 	umull	r1, r3, r3, r2
 8008d46:	095b      	lsrs	r3, r3, #5
 8008d48:	2164      	movs	r1, #100	; 0x64
 8008d4a:	fb01 f303 	mul.w	r3, r1, r3
 8008d4e:	1ad3      	subs	r3, r2, r3
 8008d50:	00db      	lsls	r3, r3, #3
 8008d52:	3332      	adds	r3, #50	; 0x32
 8008d54:	4a07      	ldr	r2, [pc, #28]	; (8008d74 <UART_SetConfig+0x3dc>)
 8008d56:	fba2 2303 	umull	r2, r3, r2, r3
 8008d5a:	095b      	lsrs	r3, r3, #5
 8008d5c:	f003 0207 	and.w	r2, r3, #7
 8008d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4432      	add	r2, r6
 8008d68:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008d6a:	e1a6      	b.n	80090ba <UART_SetConfig+0x722>
 8008d6c:	40011000 	.word	0x40011000
 8008d70:	40011400 	.word	0x40011400
 8008d74:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	4bd1      	ldr	r3, [pc, #836]	; (80090c4 <UART_SetConfig+0x72c>)
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d006      	beq.n	8008d92 <UART_SetConfig+0x3fa>
 8008d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	4bcf      	ldr	r3, [pc, #828]	; (80090c8 <UART_SetConfig+0x730>)
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	f040 80ca 	bne.w	8008f26 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d92:	f7fd ff23 	bl	8006bdc <HAL_RCC_GetPCLK2Freq>
 8008d96:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008d9e:	461c      	mov	r4, r3
 8008da0:	f04f 0500 	mov.w	r5, #0
 8008da4:	4622      	mov	r2, r4
 8008da6:	462b      	mov	r3, r5
 8008da8:	1891      	adds	r1, r2, r2
 8008daa:	62b9      	str	r1, [r7, #40]	; 0x28
 8008dac:	415b      	adcs	r3, r3
 8008dae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008db0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008db4:	1912      	adds	r2, r2, r4
 8008db6:	eb45 0303 	adc.w	r3, r5, r3
 8008dba:	f04f 0000 	mov.w	r0, #0
 8008dbe:	f04f 0100 	mov.w	r1, #0
 8008dc2:	00d9      	lsls	r1, r3, #3
 8008dc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008dc8:	00d0      	lsls	r0, r2, #3
 8008dca:	4602      	mov	r2, r0
 8008dcc:	460b      	mov	r3, r1
 8008dce:	eb12 0a04 	adds.w	sl, r2, r4
 8008dd2:	eb43 0b05 	adc.w	fp, r3, r5
 8008dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f04f 0100 	mov.w	r1, #0
 8008de2:	f04f 0200 	mov.w	r2, #0
 8008de6:	f04f 0300 	mov.w	r3, #0
 8008dea:	008b      	lsls	r3, r1, #2
 8008dec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008df0:	0082      	lsls	r2, r0, #2
 8008df2:	4650      	mov	r0, sl
 8008df4:	4659      	mov	r1, fp
 8008df6:	f7f7 feff 	bl	8000bf8 <__aeabi_uldivmod>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	4bb3      	ldr	r3, [pc, #716]	; (80090cc <UART_SetConfig+0x734>)
 8008e00:	fba3 2302 	umull	r2, r3, r3, r2
 8008e04:	095b      	lsrs	r3, r3, #5
 8008e06:	011e      	lsls	r6, r3, #4
 8008e08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f04f 0100 	mov.w	r1, #0
 8008e12:	4602      	mov	r2, r0
 8008e14:	460b      	mov	r3, r1
 8008e16:	1894      	adds	r4, r2, r2
 8008e18:	623c      	str	r4, [r7, #32]
 8008e1a:	415b      	adcs	r3, r3
 8008e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e22:	1812      	adds	r2, r2, r0
 8008e24:	eb41 0303 	adc.w	r3, r1, r3
 8008e28:	f04f 0400 	mov.w	r4, #0
 8008e2c:	f04f 0500 	mov.w	r5, #0
 8008e30:	00dd      	lsls	r5, r3, #3
 8008e32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008e36:	00d4      	lsls	r4, r2, #3
 8008e38:	4622      	mov	r2, r4
 8008e3a:	462b      	mov	r3, r5
 8008e3c:	1814      	adds	r4, r2, r0
 8008e3e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8008e42:	414b      	adcs	r3, r1
 8008e44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f04f 0100 	mov.w	r1, #0
 8008e54:	f04f 0200 	mov.w	r2, #0
 8008e58:	f04f 0300 	mov.w	r3, #0
 8008e5c:	008b      	lsls	r3, r1, #2
 8008e5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008e62:	0082      	lsls	r2, r0, #2
 8008e64:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8008e68:	f7f7 fec6 	bl	8000bf8 <__aeabi_uldivmod>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	460b      	mov	r3, r1
 8008e70:	4b96      	ldr	r3, [pc, #600]	; (80090cc <UART_SetConfig+0x734>)
 8008e72:	fba3 1302 	umull	r1, r3, r3, r2
 8008e76:	095b      	lsrs	r3, r3, #5
 8008e78:	2164      	movs	r1, #100	; 0x64
 8008e7a:	fb01 f303 	mul.w	r3, r1, r3
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	011b      	lsls	r3, r3, #4
 8008e82:	3332      	adds	r3, #50	; 0x32
 8008e84:	4a91      	ldr	r2, [pc, #580]	; (80090cc <UART_SetConfig+0x734>)
 8008e86:	fba2 2303 	umull	r2, r3, r2, r3
 8008e8a:	095b      	lsrs	r3, r3, #5
 8008e8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e90:	441e      	add	r6, r3
 8008e92:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008e96:	4618      	mov	r0, r3
 8008e98:	f04f 0100 	mov.w	r1, #0
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	1894      	adds	r4, r2, r2
 8008ea2:	61bc      	str	r4, [r7, #24]
 8008ea4:	415b      	adcs	r3, r3
 8008ea6:	61fb      	str	r3, [r7, #28]
 8008ea8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008eac:	1812      	adds	r2, r2, r0
 8008eae:	eb41 0303 	adc.w	r3, r1, r3
 8008eb2:	f04f 0400 	mov.w	r4, #0
 8008eb6:	f04f 0500 	mov.w	r5, #0
 8008eba:	00dd      	lsls	r5, r3, #3
 8008ebc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008ec0:	00d4      	lsls	r4, r2, #3
 8008ec2:	4622      	mov	r2, r4
 8008ec4:	462b      	mov	r3, r5
 8008ec6:	1814      	adds	r4, r2, r0
 8008ec8:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8008ecc:	414b      	adcs	r3, r1
 8008ece:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f04f 0100 	mov.w	r1, #0
 8008ede:	f04f 0200 	mov.w	r2, #0
 8008ee2:	f04f 0300 	mov.w	r3, #0
 8008ee6:	008b      	lsls	r3, r1, #2
 8008ee8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008eec:	0082      	lsls	r2, r0, #2
 8008eee:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008ef2:	f7f7 fe81 	bl	8000bf8 <__aeabi_uldivmod>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	460b      	mov	r3, r1
 8008efa:	4b74      	ldr	r3, [pc, #464]	; (80090cc <UART_SetConfig+0x734>)
 8008efc:	fba3 1302 	umull	r1, r3, r3, r2
 8008f00:	095b      	lsrs	r3, r3, #5
 8008f02:	2164      	movs	r1, #100	; 0x64
 8008f04:	fb01 f303 	mul.w	r3, r1, r3
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	011b      	lsls	r3, r3, #4
 8008f0c:	3332      	adds	r3, #50	; 0x32
 8008f0e:	4a6f      	ldr	r2, [pc, #444]	; (80090cc <UART_SetConfig+0x734>)
 8008f10:	fba2 2303 	umull	r2, r3, r2, r3
 8008f14:	095b      	lsrs	r3, r3, #5
 8008f16:	f003 020f 	and.w	r2, r3, #15
 8008f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4432      	add	r2, r6
 8008f22:	609a      	str	r2, [r3, #8]
 8008f24:	e0c9      	b.n	80090ba <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f26:	f7fd fe45 	bl	8006bb4 <HAL_RCC_GetPCLK1Freq>
 8008f2a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f32:	461c      	mov	r4, r3
 8008f34:	f04f 0500 	mov.w	r5, #0
 8008f38:	4622      	mov	r2, r4
 8008f3a:	462b      	mov	r3, r5
 8008f3c:	1891      	adds	r1, r2, r2
 8008f3e:	6139      	str	r1, [r7, #16]
 8008f40:	415b      	adcs	r3, r3
 8008f42:	617b      	str	r3, [r7, #20]
 8008f44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008f48:	1912      	adds	r2, r2, r4
 8008f4a:	eb45 0303 	adc.w	r3, r5, r3
 8008f4e:	f04f 0000 	mov.w	r0, #0
 8008f52:	f04f 0100 	mov.w	r1, #0
 8008f56:	00d9      	lsls	r1, r3, #3
 8008f58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f5c:	00d0      	lsls	r0, r2, #3
 8008f5e:	4602      	mov	r2, r0
 8008f60:	460b      	mov	r3, r1
 8008f62:	eb12 0804 	adds.w	r8, r2, r4
 8008f66:	eb43 0905 	adc.w	r9, r3, r5
 8008f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f04f 0100 	mov.w	r1, #0
 8008f76:	f04f 0200 	mov.w	r2, #0
 8008f7a:	f04f 0300 	mov.w	r3, #0
 8008f7e:	008b      	lsls	r3, r1, #2
 8008f80:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008f84:	0082      	lsls	r2, r0, #2
 8008f86:	4640      	mov	r0, r8
 8008f88:	4649      	mov	r1, r9
 8008f8a:	f7f7 fe35 	bl	8000bf8 <__aeabi_uldivmod>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	460b      	mov	r3, r1
 8008f92:	4b4e      	ldr	r3, [pc, #312]	; (80090cc <UART_SetConfig+0x734>)
 8008f94:	fba3 2302 	umull	r2, r3, r3, r2
 8008f98:	095b      	lsrs	r3, r3, #5
 8008f9a:	011e      	lsls	r6, r3, #4
 8008f9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f04f 0100 	mov.w	r1, #0
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	460b      	mov	r3, r1
 8008faa:	1894      	adds	r4, r2, r2
 8008fac:	60bc      	str	r4, [r7, #8]
 8008fae:	415b      	adcs	r3, r3
 8008fb0:	60fb      	str	r3, [r7, #12]
 8008fb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008fb6:	1812      	adds	r2, r2, r0
 8008fb8:	eb41 0303 	adc.w	r3, r1, r3
 8008fbc:	f04f 0400 	mov.w	r4, #0
 8008fc0:	f04f 0500 	mov.w	r5, #0
 8008fc4:	00dd      	lsls	r5, r3, #3
 8008fc6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008fca:	00d4      	lsls	r4, r2, #3
 8008fcc:	4622      	mov	r2, r4
 8008fce:	462b      	mov	r3, r5
 8008fd0:	1814      	adds	r4, r2, r0
 8008fd2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8008fd6:	414b      	adcs	r3, r1
 8008fd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f04f 0100 	mov.w	r1, #0
 8008fe8:	f04f 0200 	mov.w	r2, #0
 8008fec:	f04f 0300 	mov.w	r3, #0
 8008ff0:	008b      	lsls	r3, r1, #2
 8008ff2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008ff6:	0082      	lsls	r2, r0, #2
 8008ff8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008ffc:	f7f7 fdfc 	bl	8000bf8 <__aeabi_uldivmod>
 8009000:	4602      	mov	r2, r0
 8009002:	460b      	mov	r3, r1
 8009004:	4b31      	ldr	r3, [pc, #196]	; (80090cc <UART_SetConfig+0x734>)
 8009006:	fba3 1302 	umull	r1, r3, r3, r2
 800900a:	095b      	lsrs	r3, r3, #5
 800900c:	2164      	movs	r1, #100	; 0x64
 800900e:	fb01 f303 	mul.w	r3, r1, r3
 8009012:	1ad3      	subs	r3, r2, r3
 8009014:	011b      	lsls	r3, r3, #4
 8009016:	3332      	adds	r3, #50	; 0x32
 8009018:	4a2c      	ldr	r2, [pc, #176]	; (80090cc <UART_SetConfig+0x734>)
 800901a:	fba2 2303 	umull	r2, r3, r2, r3
 800901e:	095b      	lsrs	r3, r3, #5
 8009020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009024:	441e      	add	r6, r3
 8009026:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800902a:	4618      	mov	r0, r3
 800902c:	f04f 0100 	mov.w	r1, #0
 8009030:	4602      	mov	r2, r0
 8009032:	460b      	mov	r3, r1
 8009034:	1894      	adds	r4, r2, r2
 8009036:	603c      	str	r4, [r7, #0]
 8009038:	415b      	adcs	r3, r3
 800903a:	607b      	str	r3, [r7, #4]
 800903c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009040:	1812      	adds	r2, r2, r0
 8009042:	eb41 0303 	adc.w	r3, r1, r3
 8009046:	f04f 0400 	mov.w	r4, #0
 800904a:	f04f 0500 	mov.w	r5, #0
 800904e:	00dd      	lsls	r5, r3, #3
 8009050:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009054:	00d4      	lsls	r4, r2, #3
 8009056:	4622      	mov	r2, r4
 8009058:	462b      	mov	r3, r5
 800905a:	1814      	adds	r4, r2, r0
 800905c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8009060:	414b      	adcs	r3, r1
 8009062:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	4618      	mov	r0, r3
 800906e:	f04f 0100 	mov.w	r1, #0
 8009072:	f04f 0200 	mov.w	r2, #0
 8009076:	f04f 0300 	mov.w	r3, #0
 800907a:	008b      	lsls	r3, r1, #2
 800907c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009080:	0082      	lsls	r2, r0, #2
 8009082:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009086:	f7f7 fdb7 	bl	8000bf8 <__aeabi_uldivmod>
 800908a:	4602      	mov	r2, r0
 800908c:	460b      	mov	r3, r1
 800908e:	4b0f      	ldr	r3, [pc, #60]	; (80090cc <UART_SetConfig+0x734>)
 8009090:	fba3 1302 	umull	r1, r3, r3, r2
 8009094:	095b      	lsrs	r3, r3, #5
 8009096:	2164      	movs	r1, #100	; 0x64
 8009098:	fb01 f303 	mul.w	r3, r1, r3
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	011b      	lsls	r3, r3, #4
 80090a0:	3332      	adds	r3, #50	; 0x32
 80090a2:	4a0a      	ldr	r2, [pc, #40]	; (80090cc <UART_SetConfig+0x734>)
 80090a4:	fba2 2303 	umull	r2, r3, r2, r3
 80090a8:	095b      	lsrs	r3, r3, #5
 80090aa:	f003 020f 	and.w	r2, r3, #15
 80090ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4432      	add	r2, r6
 80090b6:	609a      	str	r2, [r3, #8]
}
 80090b8:	e7ff      	b.n	80090ba <UART_SetConfig+0x722>
 80090ba:	bf00      	nop
 80090bc:	37f4      	adds	r7, #244	; 0xf4
 80090be:	46bd      	mov	sp, r7
 80090c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c4:	40011000 	.word	0x40011000
 80090c8:	40011400 	.word	0x40011400
 80090cc:	51eb851f 	.word	0x51eb851f

080090d0 <__errno>:
 80090d0:	4b01      	ldr	r3, [pc, #4]	; (80090d8 <__errno+0x8>)
 80090d2:	6818      	ldr	r0, [r3, #0]
 80090d4:	4770      	bx	lr
 80090d6:	bf00      	nop
 80090d8:	200001ec 	.word	0x200001ec

080090dc <__libc_init_array>:
 80090dc:	b570      	push	{r4, r5, r6, lr}
 80090de:	4d0d      	ldr	r5, [pc, #52]	; (8009114 <__libc_init_array+0x38>)
 80090e0:	4c0d      	ldr	r4, [pc, #52]	; (8009118 <__libc_init_array+0x3c>)
 80090e2:	1b64      	subs	r4, r4, r5
 80090e4:	10a4      	asrs	r4, r4, #2
 80090e6:	2600      	movs	r6, #0
 80090e8:	42a6      	cmp	r6, r4
 80090ea:	d109      	bne.n	8009100 <__libc_init_array+0x24>
 80090ec:	4d0b      	ldr	r5, [pc, #44]	; (800911c <__libc_init_array+0x40>)
 80090ee:	4c0c      	ldr	r4, [pc, #48]	; (8009120 <__libc_init_array+0x44>)
 80090f0:	f002 fa74 	bl	800b5dc <_init>
 80090f4:	1b64      	subs	r4, r4, r5
 80090f6:	10a4      	asrs	r4, r4, #2
 80090f8:	2600      	movs	r6, #0
 80090fa:	42a6      	cmp	r6, r4
 80090fc:	d105      	bne.n	800910a <__libc_init_array+0x2e>
 80090fe:	bd70      	pop	{r4, r5, r6, pc}
 8009100:	f855 3b04 	ldr.w	r3, [r5], #4
 8009104:	4798      	blx	r3
 8009106:	3601      	adds	r6, #1
 8009108:	e7ee      	b.n	80090e8 <__libc_init_array+0xc>
 800910a:	f855 3b04 	ldr.w	r3, [r5], #4
 800910e:	4798      	blx	r3
 8009110:	3601      	adds	r6, #1
 8009112:	e7f2      	b.n	80090fa <__libc_init_array+0x1e>
 8009114:	0800b8e0 	.word	0x0800b8e0
 8009118:	0800b8e0 	.word	0x0800b8e0
 800911c:	0800b8e0 	.word	0x0800b8e0
 8009120:	0800b8e4 	.word	0x0800b8e4

08009124 <memset>:
 8009124:	4402      	add	r2, r0
 8009126:	4603      	mov	r3, r0
 8009128:	4293      	cmp	r3, r2
 800912a:	d100      	bne.n	800912e <memset+0xa>
 800912c:	4770      	bx	lr
 800912e:	f803 1b01 	strb.w	r1, [r3], #1
 8009132:	e7f9      	b.n	8009128 <memset+0x4>
 8009134:	0000      	movs	r0, r0
	...

08009138 <atan>:
 8009138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800913c:	ec55 4b10 	vmov	r4, r5, d0
 8009140:	4bc3      	ldr	r3, [pc, #780]	; (8009450 <atan+0x318>)
 8009142:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009146:	429e      	cmp	r6, r3
 8009148:	46ab      	mov	fp, r5
 800914a:	dd18      	ble.n	800917e <atan+0x46>
 800914c:	4bc1      	ldr	r3, [pc, #772]	; (8009454 <atan+0x31c>)
 800914e:	429e      	cmp	r6, r3
 8009150:	dc01      	bgt.n	8009156 <atan+0x1e>
 8009152:	d109      	bne.n	8009168 <atan+0x30>
 8009154:	b144      	cbz	r4, 8009168 <atan+0x30>
 8009156:	4622      	mov	r2, r4
 8009158:	462b      	mov	r3, r5
 800915a:	4620      	mov	r0, r4
 800915c:	4629      	mov	r1, r5
 800915e:	f7f7 f84d 	bl	80001fc <__adddf3>
 8009162:	4604      	mov	r4, r0
 8009164:	460d      	mov	r5, r1
 8009166:	e006      	b.n	8009176 <atan+0x3e>
 8009168:	f1bb 0f00 	cmp.w	fp, #0
 800916c:	f300 8131 	bgt.w	80093d2 <atan+0x29a>
 8009170:	a59b      	add	r5, pc, #620	; (adr r5, 80093e0 <atan+0x2a8>)
 8009172:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009176:	ec45 4b10 	vmov	d0, r4, r5
 800917a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800917e:	4bb6      	ldr	r3, [pc, #728]	; (8009458 <atan+0x320>)
 8009180:	429e      	cmp	r6, r3
 8009182:	dc14      	bgt.n	80091ae <atan+0x76>
 8009184:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009188:	429e      	cmp	r6, r3
 800918a:	dc0d      	bgt.n	80091a8 <atan+0x70>
 800918c:	a396      	add	r3, pc, #600	; (adr r3, 80093e8 <atan+0x2b0>)
 800918e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009192:	ee10 0a10 	vmov	r0, s0
 8009196:	4629      	mov	r1, r5
 8009198:	f7f7 f830 	bl	80001fc <__adddf3>
 800919c:	4baf      	ldr	r3, [pc, #700]	; (800945c <atan+0x324>)
 800919e:	2200      	movs	r2, #0
 80091a0:	f7f7 fc72 	bl	8000a88 <__aeabi_dcmpgt>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	d1e6      	bne.n	8009176 <atan+0x3e>
 80091a8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80091ac:	e02b      	b.n	8009206 <atan+0xce>
 80091ae:	f000 f9b3 	bl	8009518 <fabs>
 80091b2:	4bab      	ldr	r3, [pc, #684]	; (8009460 <atan+0x328>)
 80091b4:	429e      	cmp	r6, r3
 80091b6:	ec55 4b10 	vmov	r4, r5, d0
 80091ba:	f300 80bf 	bgt.w	800933c <atan+0x204>
 80091be:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80091c2:	429e      	cmp	r6, r3
 80091c4:	f300 80a0 	bgt.w	8009308 <atan+0x1d0>
 80091c8:	ee10 2a10 	vmov	r2, s0
 80091cc:	ee10 0a10 	vmov	r0, s0
 80091d0:	462b      	mov	r3, r5
 80091d2:	4629      	mov	r1, r5
 80091d4:	f7f7 f812 	bl	80001fc <__adddf3>
 80091d8:	4ba0      	ldr	r3, [pc, #640]	; (800945c <atan+0x324>)
 80091da:	2200      	movs	r2, #0
 80091dc:	f7f7 f80c 	bl	80001f8 <__aeabi_dsub>
 80091e0:	2200      	movs	r2, #0
 80091e2:	4606      	mov	r6, r0
 80091e4:	460f      	mov	r7, r1
 80091e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80091ea:	4620      	mov	r0, r4
 80091ec:	4629      	mov	r1, r5
 80091ee:	f7f7 f805 	bl	80001fc <__adddf3>
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	4630      	mov	r0, r6
 80091f8:	4639      	mov	r1, r7
 80091fa:	f7f7 fadf 	bl	80007bc <__aeabi_ddiv>
 80091fe:	f04f 0a00 	mov.w	sl, #0
 8009202:	4604      	mov	r4, r0
 8009204:	460d      	mov	r5, r1
 8009206:	4622      	mov	r2, r4
 8009208:	462b      	mov	r3, r5
 800920a:	4620      	mov	r0, r4
 800920c:	4629      	mov	r1, r5
 800920e:	f7f7 f9ab 	bl	8000568 <__aeabi_dmul>
 8009212:	4602      	mov	r2, r0
 8009214:	460b      	mov	r3, r1
 8009216:	4680      	mov	r8, r0
 8009218:	4689      	mov	r9, r1
 800921a:	f7f7 f9a5 	bl	8000568 <__aeabi_dmul>
 800921e:	a374      	add	r3, pc, #464	; (adr r3, 80093f0 <atan+0x2b8>)
 8009220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009224:	4606      	mov	r6, r0
 8009226:	460f      	mov	r7, r1
 8009228:	f7f7 f99e 	bl	8000568 <__aeabi_dmul>
 800922c:	a372      	add	r3, pc, #456	; (adr r3, 80093f8 <atan+0x2c0>)
 800922e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009232:	f7f6 ffe3 	bl	80001fc <__adddf3>
 8009236:	4632      	mov	r2, r6
 8009238:	463b      	mov	r3, r7
 800923a:	f7f7 f995 	bl	8000568 <__aeabi_dmul>
 800923e:	a370      	add	r3, pc, #448	; (adr r3, 8009400 <atan+0x2c8>)
 8009240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009244:	f7f6 ffda 	bl	80001fc <__adddf3>
 8009248:	4632      	mov	r2, r6
 800924a:	463b      	mov	r3, r7
 800924c:	f7f7 f98c 	bl	8000568 <__aeabi_dmul>
 8009250:	a36d      	add	r3, pc, #436	; (adr r3, 8009408 <atan+0x2d0>)
 8009252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009256:	f7f6 ffd1 	bl	80001fc <__adddf3>
 800925a:	4632      	mov	r2, r6
 800925c:	463b      	mov	r3, r7
 800925e:	f7f7 f983 	bl	8000568 <__aeabi_dmul>
 8009262:	a36b      	add	r3, pc, #428	; (adr r3, 8009410 <atan+0x2d8>)
 8009264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009268:	f7f6 ffc8 	bl	80001fc <__adddf3>
 800926c:	4632      	mov	r2, r6
 800926e:	463b      	mov	r3, r7
 8009270:	f7f7 f97a 	bl	8000568 <__aeabi_dmul>
 8009274:	a368      	add	r3, pc, #416	; (adr r3, 8009418 <atan+0x2e0>)
 8009276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927a:	f7f6 ffbf 	bl	80001fc <__adddf3>
 800927e:	4642      	mov	r2, r8
 8009280:	464b      	mov	r3, r9
 8009282:	f7f7 f971 	bl	8000568 <__aeabi_dmul>
 8009286:	a366      	add	r3, pc, #408	; (adr r3, 8009420 <atan+0x2e8>)
 8009288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928c:	4680      	mov	r8, r0
 800928e:	4689      	mov	r9, r1
 8009290:	4630      	mov	r0, r6
 8009292:	4639      	mov	r1, r7
 8009294:	f7f7 f968 	bl	8000568 <__aeabi_dmul>
 8009298:	a363      	add	r3, pc, #396	; (adr r3, 8009428 <atan+0x2f0>)
 800929a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929e:	f7f6 ffab 	bl	80001f8 <__aeabi_dsub>
 80092a2:	4632      	mov	r2, r6
 80092a4:	463b      	mov	r3, r7
 80092a6:	f7f7 f95f 	bl	8000568 <__aeabi_dmul>
 80092aa:	a361      	add	r3, pc, #388	; (adr r3, 8009430 <atan+0x2f8>)
 80092ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b0:	f7f6 ffa2 	bl	80001f8 <__aeabi_dsub>
 80092b4:	4632      	mov	r2, r6
 80092b6:	463b      	mov	r3, r7
 80092b8:	f7f7 f956 	bl	8000568 <__aeabi_dmul>
 80092bc:	a35e      	add	r3, pc, #376	; (adr r3, 8009438 <atan+0x300>)
 80092be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c2:	f7f6 ff99 	bl	80001f8 <__aeabi_dsub>
 80092c6:	4632      	mov	r2, r6
 80092c8:	463b      	mov	r3, r7
 80092ca:	f7f7 f94d 	bl	8000568 <__aeabi_dmul>
 80092ce:	a35c      	add	r3, pc, #368	; (adr r3, 8009440 <atan+0x308>)
 80092d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d4:	f7f6 ff90 	bl	80001f8 <__aeabi_dsub>
 80092d8:	4632      	mov	r2, r6
 80092da:	463b      	mov	r3, r7
 80092dc:	f7f7 f944 	bl	8000568 <__aeabi_dmul>
 80092e0:	4602      	mov	r2, r0
 80092e2:	460b      	mov	r3, r1
 80092e4:	4640      	mov	r0, r8
 80092e6:	4649      	mov	r1, r9
 80092e8:	f7f6 ff88 	bl	80001fc <__adddf3>
 80092ec:	4622      	mov	r2, r4
 80092ee:	462b      	mov	r3, r5
 80092f0:	f7f7 f93a 	bl	8000568 <__aeabi_dmul>
 80092f4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80092f8:	4602      	mov	r2, r0
 80092fa:	460b      	mov	r3, r1
 80092fc:	d14b      	bne.n	8009396 <atan+0x25e>
 80092fe:	4620      	mov	r0, r4
 8009300:	4629      	mov	r1, r5
 8009302:	f7f6 ff79 	bl	80001f8 <__aeabi_dsub>
 8009306:	e72c      	b.n	8009162 <atan+0x2a>
 8009308:	ee10 0a10 	vmov	r0, s0
 800930c:	4b53      	ldr	r3, [pc, #332]	; (800945c <atan+0x324>)
 800930e:	2200      	movs	r2, #0
 8009310:	4629      	mov	r1, r5
 8009312:	f7f6 ff71 	bl	80001f8 <__aeabi_dsub>
 8009316:	4b51      	ldr	r3, [pc, #324]	; (800945c <atan+0x324>)
 8009318:	4606      	mov	r6, r0
 800931a:	460f      	mov	r7, r1
 800931c:	2200      	movs	r2, #0
 800931e:	4620      	mov	r0, r4
 8009320:	4629      	mov	r1, r5
 8009322:	f7f6 ff6b 	bl	80001fc <__adddf3>
 8009326:	4602      	mov	r2, r0
 8009328:	460b      	mov	r3, r1
 800932a:	4630      	mov	r0, r6
 800932c:	4639      	mov	r1, r7
 800932e:	f7f7 fa45 	bl	80007bc <__aeabi_ddiv>
 8009332:	f04f 0a01 	mov.w	sl, #1
 8009336:	4604      	mov	r4, r0
 8009338:	460d      	mov	r5, r1
 800933a:	e764      	b.n	8009206 <atan+0xce>
 800933c:	4b49      	ldr	r3, [pc, #292]	; (8009464 <atan+0x32c>)
 800933e:	429e      	cmp	r6, r3
 8009340:	da1d      	bge.n	800937e <atan+0x246>
 8009342:	ee10 0a10 	vmov	r0, s0
 8009346:	4b48      	ldr	r3, [pc, #288]	; (8009468 <atan+0x330>)
 8009348:	2200      	movs	r2, #0
 800934a:	4629      	mov	r1, r5
 800934c:	f7f6 ff54 	bl	80001f8 <__aeabi_dsub>
 8009350:	4b45      	ldr	r3, [pc, #276]	; (8009468 <atan+0x330>)
 8009352:	4606      	mov	r6, r0
 8009354:	460f      	mov	r7, r1
 8009356:	2200      	movs	r2, #0
 8009358:	4620      	mov	r0, r4
 800935a:	4629      	mov	r1, r5
 800935c:	f7f7 f904 	bl	8000568 <__aeabi_dmul>
 8009360:	4b3e      	ldr	r3, [pc, #248]	; (800945c <atan+0x324>)
 8009362:	2200      	movs	r2, #0
 8009364:	f7f6 ff4a 	bl	80001fc <__adddf3>
 8009368:	4602      	mov	r2, r0
 800936a:	460b      	mov	r3, r1
 800936c:	4630      	mov	r0, r6
 800936e:	4639      	mov	r1, r7
 8009370:	f7f7 fa24 	bl	80007bc <__aeabi_ddiv>
 8009374:	f04f 0a02 	mov.w	sl, #2
 8009378:	4604      	mov	r4, r0
 800937a:	460d      	mov	r5, r1
 800937c:	e743      	b.n	8009206 <atan+0xce>
 800937e:	462b      	mov	r3, r5
 8009380:	ee10 2a10 	vmov	r2, s0
 8009384:	4939      	ldr	r1, [pc, #228]	; (800946c <atan+0x334>)
 8009386:	2000      	movs	r0, #0
 8009388:	f7f7 fa18 	bl	80007bc <__aeabi_ddiv>
 800938c:	f04f 0a03 	mov.w	sl, #3
 8009390:	4604      	mov	r4, r0
 8009392:	460d      	mov	r5, r1
 8009394:	e737      	b.n	8009206 <atan+0xce>
 8009396:	4b36      	ldr	r3, [pc, #216]	; (8009470 <atan+0x338>)
 8009398:	4e36      	ldr	r6, [pc, #216]	; (8009474 <atan+0x33c>)
 800939a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800939e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80093a2:	e9da 2300 	ldrd	r2, r3, [sl]
 80093a6:	f7f6 ff27 	bl	80001f8 <__aeabi_dsub>
 80093aa:	4622      	mov	r2, r4
 80093ac:	462b      	mov	r3, r5
 80093ae:	f7f6 ff23 	bl	80001f8 <__aeabi_dsub>
 80093b2:	4602      	mov	r2, r0
 80093b4:	460b      	mov	r3, r1
 80093b6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80093ba:	f7f6 ff1d 	bl	80001f8 <__aeabi_dsub>
 80093be:	f1bb 0f00 	cmp.w	fp, #0
 80093c2:	4604      	mov	r4, r0
 80093c4:	460d      	mov	r5, r1
 80093c6:	f6bf aed6 	bge.w	8009176 <atan+0x3e>
 80093ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093ce:	461d      	mov	r5, r3
 80093d0:	e6d1      	b.n	8009176 <atan+0x3e>
 80093d2:	a51d      	add	r5, pc, #116	; (adr r5, 8009448 <atan+0x310>)
 80093d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80093d8:	e6cd      	b.n	8009176 <atan+0x3e>
 80093da:	bf00      	nop
 80093dc:	f3af 8000 	nop.w
 80093e0:	54442d18 	.word	0x54442d18
 80093e4:	bff921fb 	.word	0xbff921fb
 80093e8:	8800759c 	.word	0x8800759c
 80093ec:	7e37e43c 	.word	0x7e37e43c
 80093f0:	e322da11 	.word	0xe322da11
 80093f4:	3f90ad3a 	.word	0x3f90ad3a
 80093f8:	24760deb 	.word	0x24760deb
 80093fc:	3fa97b4b 	.word	0x3fa97b4b
 8009400:	a0d03d51 	.word	0xa0d03d51
 8009404:	3fb10d66 	.word	0x3fb10d66
 8009408:	c54c206e 	.word	0xc54c206e
 800940c:	3fb745cd 	.word	0x3fb745cd
 8009410:	920083ff 	.word	0x920083ff
 8009414:	3fc24924 	.word	0x3fc24924
 8009418:	5555550d 	.word	0x5555550d
 800941c:	3fd55555 	.word	0x3fd55555
 8009420:	2c6a6c2f 	.word	0x2c6a6c2f
 8009424:	bfa2b444 	.word	0xbfa2b444
 8009428:	52defd9a 	.word	0x52defd9a
 800942c:	3fadde2d 	.word	0x3fadde2d
 8009430:	af749a6d 	.word	0xaf749a6d
 8009434:	3fb3b0f2 	.word	0x3fb3b0f2
 8009438:	fe231671 	.word	0xfe231671
 800943c:	3fbc71c6 	.word	0x3fbc71c6
 8009440:	9998ebc4 	.word	0x9998ebc4
 8009444:	3fc99999 	.word	0x3fc99999
 8009448:	54442d18 	.word	0x54442d18
 800944c:	3ff921fb 	.word	0x3ff921fb
 8009450:	440fffff 	.word	0x440fffff
 8009454:	7ff00000 	.word	0x7ff00000
 8009458:	3fdbffff 	.word	0x3fdbffff
 800945c:	3ff00000 	.word	0x3ff00000
 8009460:	3ff2ffff 	.word	0x3ff2ffff
 8009464:	40038000 	.word	0x40038000
 8009468:	3ff80000 	.word	0x3ff80000
 800946c:	bff00000 	.word	0xbff00000
 8009470:	0800b668 	.word	0x0800b668
 8009474:	0800b648 	.word	0x0800b648

08009478 <cos>:
 8009478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800947a:	ec53 2b10 	vmov	r2, r3, d0
 800947e:	4824      	ldr	r0, [pc, #144]	; (8009510 <cos+0x98>)
 8009480:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009484:	4281      	cmp	r1, r0
 8009486:	dc06      	bgt.n	8009496 <cos+0x1e>
 8009488:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8009508 <cos+0x90>
 800948c:	f001 fa38 	bl	800a900 <__kernel_cos>
 8009490:	ec51 0b10 	vmov	r0, r1, d0
 8009494:	e007      	b.n	80094a6 <cos+0x2e>
 8009496:	481f      	ldr	r0, [pc, #124]	; (8009514 <cos+0x9c>)
 8009498:	4281      	cmp	r1, r0
 800949a:	dd09      	ble.n	80094b0 <cos+0x38>
 800949c:	ee10 0a10 	vmov	r0, s0
 80094a0:	4619      	mov	r1, r3
 80094a2:	f7f6 fea9 	bl	80001f8 <__aeabi_dsub>
 80094a6:	ec41 0b10 	vmov	d0, r0, r1
 80094aa:	b005      	add	sp, #20
 80094ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80094b0:	4668      	mov	r0, sp
 80094b2:	f000 ff65 	bl	800a380 <__ieee754_rem_pio2>
 80094b6:	f000 0003 	and.w	r0, r0, #3
 80094ba:	2801      	cmp	r0, #1
 80094bc:	d007      	beq.n	80094ce <cos+0x56>
 80094be:	2802      	cmp	r0, #2
 80094c0:	d012      	beq.n	80094e8 <cos+0x70>
 80094c2:	b9c0      	cbnz	r0, 80094f6 <cos+0x7e>
 80094c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80094c8:	ed9d 0b00 	vldr	d0, [sp]
 80094cc:	e7de      	b.n	800948c <cos+0x14>
 80094ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80094d2:	ed9d 0b00 	vldr	d0, [sp]
 80094d6:	f001 fe1b 	bl	800b110 <__kernel_sin>
 80094da:	ec53 2b10 	vmov	r2, r3, d0
 80094de:	ee10 0a10 	vmov	r0, s0
 80094e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80094e6:	e7de      	b.n	80094a6 <cos+0x2e>
 80094e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80094ec:	ed9d 0b00 	vldr	d0, [sp]
 80094f0:	f001 fa06 	bl	800a900 <__kernel_cos>
 80094f4:	e7f1      	b.n	80094da <cos+0x62>
 80094f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80094fa:	ed9d 0b00 	vldr	d0, [sp]
 80094fe:	2001      	movs	r0, #1
 8009500:	f001 fe06 	bl	800b110 <__kernel_sin>
 8009504:	e7c4      	b.n	8009490 <cos+0x18>
 8009506:	bf00      	nop
	...
 8009510:	3fe921fb 	.word	0x3fe921fb
 8009514:	7fefffff 	.word	0x7fefffff

08009518 <fabs>:
 8009518:	ec51 0b10 	vmov	r0, r1, d0
 800951c:	ee10 2a10 	vmov	r2, s0
 8009520:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009524:	ec43 2b10 	vmov	d0, r2, r3
 8009528:	4770      	bx	lr
 800952a:	0000      	movs	r0, r0
 800952c:	0000      	movs	r0, r0
	...

08009530 <sin>:
 8009530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009532:	ec53 2b10 	vmov	r2, r3, d0
 8009536:	4826      	ldr	r0, [pc, #152]	; (80095d0 <sin+0xa0>)
 8009538:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800953c:	4281      	cmp	r1, r0
 800953e:	dc07      	bgt.n	8009550 <sin+0x20>
 8009540:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80095c8 <sin+0x98>
 8009544:	2000      	movs	r0, #0
 8009546:	f001 fde3 	bl	800b110 <__kernel_sin>
 800954a:	ec51 0b10 	vmov	r0, r1, d0
 800954e:	e007      	b.n	8009560 <sin+0x30>
 8009550:	4820      	ldr	r0, [pc, #128]	; (80095d4 <sin+0xa4>)
 8009552:	4281      	cmp	r1, r0
 8009554:	dd09      	ble.n	800956a <sin+0x3a>
 8009556:	ee10 0a10 	vmov	r0, s0
 800955a:	4619      	mov	r1, r3
 800955c:	f7f6 fe4c 	bl	80001f8 <__aeabi_dsub>
 8009560:	ec41 0b10 	vmov	d0, r0, r1
 8009564:	b005      	add	sp, #20
 8009566:	f85d fb04 	ldr.w	pc, [sp], #4
 800956a:	4668      	mov	r0, sp
 800956c:	f000 ff08 	bl	800a380 <__ieee754_rem_pio2>
 8009570:	f000 0003 	and.w	r0, r0, #3
 8009574:	2801      	cmp	r0, #1
 8009576:	d008      	beq.n	800958a <sin+0x5a>
 8009578:	2802      	cmp	r0, #2
 800957a:	d00d      	beq.n	8009598 <sin+0x68>
 800957c:	b9d0      	cbnz	r0, 80095b4 <sin+0x84>
 800957e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009582:	ed9d 0b00 	vldr	d0, [sp]
 8009586:	2001      	movs	r0, #1
 8009588:	e7dd      	b.n	8009546 <sin+0x16>
 800958a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800958e:	ed9d 0b00 	vldr	d0, [sp]
 8009592:	f001 f9b5 	bl	800a900 <__kernel_cos>
 8009596:	e7d8      	b.n	800954a <sin+0x1a>
 8009598:	ed9d 1b02 	vldr	d1, [sp, #8]
 800959c:	ed9d 0b00 	vldr	d0, [sp]
 80095a0:	2001      	movs	r0, #1
 80095a2:	f001 fdb5 	bl	800b110 <__kernel_sin>
 80095a6:	ec53 2b10 	vmov	r2, r3, d0
 80095aa:	ee10 0a10 	vmov	r0, s0
 80095ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80095b2:	e7d5      	b.n	8009560 <sin+0x30>
 80095b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80095b8:	ed9d 0b00 	vldr	d0, [sp]
 80095bc:	f001 f9a0 	bl	800a900 <__kernel_cos>
 80095c0:	e7f1      	b.n	80095a6 <sin+0x76>
 80095c2:	bf00      	nop
 80095c4:	f3af 8000 	nop.w
	...
 80095d0:	3fe921fb 	.word	0x3fe921fb
 80095d4:	7fefffff 	.word	0x7fefffff

080095d8 <atan2>:
 80095d8:	f000 b8e2 	b.w	80097a0 <__ieee754_atan2>

080095dc <pow>:
 80095dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095e0:	ec59 8b10 	vmov	r8, r9, d0
 80095e4:	ec57 6b11 	vmov	r6, r7, d1
 80095e8:	f000 f9a6 	bl	8009938 <__ieee754_pow>
 80095ec:	4b4e      	ldr	r3, [pc, #312]	; (8009728 <pow+0x14c>)
 80095ee:	f993 3000 	ldrsb.w	r3, [r3]
 80095f2:	3301      	adds	r3, #1
 80095f4:	ec55 4b10 	vmov	r4, r5, d0
 80095f8:	d015      	beq.n	8009626 <pow+0x4a>
 80095fa:	4632      	mov	r2, r6
 80095fc:	463b      	mov	r3, r7
 80095fe:	4630      	mov	r0, r6
 8009600:	4639      	mov	r1, r7
 8009602:	f7f7 fa4b 	bl	8000a9c <__aeabi_dcmpun>
 8009606:	b970      	cbnz	r0, 8009626 <pow+0x4a>
 8009608:	4642      	mov	r2, r8
 800960a:	464b      	mov	r3, r9
 800960c:	4640      	mov	r0, r8
 800960e:	4649      	mov	r1, r9
 8009610:	f7f7 fa44 	bl	8000a9c <__aeabi_dcmpun>
 8009614:	2200      	movs	r2, #0
 8009616:	2300      	movs	r3, #0
 8009618:	b148      	cbz	r0, 800962e <pow+0x52>
 800961a:	4630      	mov	r0, r6
 800961c:	4639      	mov	r1, r7
 800961e:	f7f7 fa0b 	bl	8000a38 <__aeabi_dcmpeq>
 8009622:	2800      	cmp	r0, #0
 8009624:	d17d      	bne.n	8009722 <pow+0x146>
 8009626:	ec45 4b10 	vmov	d0, r4, r5
 800962a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800962e:	4640      	mov	r0, r8
 8009630:	4649      	mov	r1, r9
 8009632:	f7f7 fa01 	bl	8000a38 <__aeabi_dcmpeq>
 8009636:	b1e0      	cbz	r0, 8009672 <pow+0x96>
 8009638:	2200      	movs	r2, #0
 800963a:	2300      	movs	r3, #0
 800963c:	4630      	mov	r0, r6
 800963e:	4639      	mov	r1, r7
 8009640:	f7f7 f9fa 	bl	8000a38 <__aeabi_dcmpeq>
 8009644:	2800      	cmp	r0, #0
 8009646:	d16c      	bne.n	8009722 <pow+0x146>
 8009648:	ec47 6b10 	vmov	d0, r6, r7
 800964c:	f001 fe1e 	bl	800b28c <finite>
 8009650:	2800      	cmp	r0, #0
 8009652:	d0e8      	beq.n	8009626 <pow+0x4a>
 8009654:	2200      	movs	r2, #0
 8009656:	2300      	movs	r3, #0
 8009658:	4630      	mov	r0, r6
 800965a:	4639      	mov	r1, r7
 800965c:	f7f7 f9f6 	bl	8000a4c <__aeabi_dcmplt>
 8009660:	2800      	cmp	r0, #0
 8009662:	d0e0      	beq.n	8009626 <pow+0x4a>
 8009664:	f7ff fd34 	bl	80090d0 <__errno>
 8009668:	2321      	movs	r3, #33	; 0x21
 800966a:	6003      	str	r3, [r0, #0]
 800966c:	2400      	movs	r4, #0
 800966e:	4d2f      	ldr	r5, [pc, #188]	; (800972c <pow+0x150>)
 8009670:	e7d9      	b.n	8009626 <pow+0x4a>
 8009672:	ec45 4b10 	vmov	d0, r4, r5
 8009676:	f001 fe09 	bl	800b28c <finite>
 800967a:	bbb8      	cbnz	r0, 80096ec <pow+0x110>
 800967c:	ec49 8b10 	vmov	d0, r8, r9
 8009680:	f001 fe04 	bl	800b28c <finite>
 8009684:	b390      	cbz	r0, 80096ec <pow+0x110>
 8009686:	ec47 6b10 	vmov	d0, r6, r7
 800968a:	f001 fdff 	bl	800b28c <finite>
 800968e:	b368      	cbz	r0, 80096ec <pow+0x110>
 8009690:	4622      	mov	r2, r4
 8009692:	462b      	mov	r3, r5
 8009694:	4620      	mov	r0, r4
 8009696:	4629      	mov	r1, r5
 8009698:	f7f7 fa00 	bl	8000a9c <__aeabi_dcmpun>
 800969c:	b160      	cbz	r0, 80096b8 <pow+0xdc>
 800969e:	f7ff fd17 	bl	80090d0 <__errno>
 80096a2:	2321      	movs	r3, #33	; 0x21
 80096a4:	6003      	str	r3, [r0, #0]
 80096a6:	2200      	movs	r2, #0
 80096a8:	2300      	movs	r3, #0
 80096aa:	4610      	mov	r0, r2
 80096ac:	4619      	mov	r1, r3
 80096ae:	f7f7 f885 	bl	80007bc <__aeabi_ddiv>
 80096b2:	4604      	mov	r4, r0
 80096b4:	460d      	mov	r5, r1
 80096b6:	e7b6      	b.n	8009626 <pow+0x4a>
 80096b8:	f7ff fd0a 	bl	80090d0 <__errno>
 80096bc:	2322      	movs	r3, #34	; 0x22
 80096be:	6003      	str	r3, [r0, #0]
 80096c0:	2200      	movs	r2, #0
 80096c2:	2300      	movs	r3, #0
 80096c4:	4640      	mov	r0, r8
 80096c6:	4649      	mov	r1, r9
 80096c8:	f7f7 f9c0 	bl	8000a4c <__aeabi_dcmplt>
 80096cc:	2400      	movs	r4, #0
 80096ce:	b158      	cbz	r0, 80096e8 <pow+0x10c>
 80096d0:	ec47 6b10 	vmov	d0, r6, r7
 80096d4:	f001 fe70 	bl	800b3b8 <rint>
 80096d8:	4632      	mov	r2, r6
 80096da:	ec51 0b10 	vmov	r0, r1, d0
 80096de:	463b      	mov	r3, r7
 80096e0:	f7f7 f9aa 	bl	8000a38 <__aeabi_dcmpeq>
 80096e4:	2800      	cmp	r0, #0
 80096e6:	d0c2      	beq.n	800966e <pow+0x92>
 80096e8:	4d11      	ldr	r5, [pc, #68]	; (8009730 <pow+0x154>)
 80096ea:	e79c      	b.n	8009626 <pow+0x4a>
 80096ec:	2200      	movs	r2, #0
 80096ee:	2300      	movs	r3, #0
 80096f0:	4620      	mov	r0, r4
 80096f2:	4629      	mov	r1, r5
 80096f4:	f7f7 f9a0 	bl	8000a38 <__aeabi_dcmpeq>
 80096f8:	2800      	cmp	r0, #0
 80096fa:	d094      	beq.n	8009626 <pow+0x4a>
 80096fc:	ec49 8b10 	vmov	d0, r8, r9
 8009700:	f001 fdc4 	bl	800b28c <finite>
 8009704:	2800      	cmp	r0, #0
 8009706:	d08e      	beq.n	8009626 <pow+0x4a>
 8009708:	ec47 6b10 	vmov	d0, r6, r7
 800970c:	f001 fdbe 	bl	800b28c <finite>
 8009710:	2800      	cmp	r0, #0
 8009712:	d088      	beq.n	8009626 <pow+0x4a>
 8009714:	f7ff fcdc 	bl	80090d0 <__errno>
 8009718:	2322      	movs	r3, #34	; 0x22
 800971a:	6003      	str	r3, [r0, #0]
 800971c:	2400      	movs	r4, #0
 800971e:	2500      	movs	r5, #0
 8009720:	e781      	b.n	8009626 <pow+0x4a>
 8009722:	4d04      	ldr	r5, [pc, #16]	; (8009734 <pow+0x158>)
 8009724:	2400      	movs	r4, #0
 8009726:	e77e      	b.n	8009626 <pow+0x4a>
 8009728:	20000250 	.word	0x20000250
 800972c:	fff00000 	.word	0xfff00000
 8009730:	7ff00000 	.word	0x7ff00000
 8009734:	3ff00000 	.word	0x3ff00000

08009738 <sqrt>:
 8009738:	b538      	push	{r3, r4, r5, lr}
 800973a:	ed2d 8b02 	vpush	{d8}
 800973e:	ec55 4b10 	vmov	r4, r5, d0
 8009742:	f001 f827 	bl	800a794 <__ieee754_sqrt>
 8009746:	4b15      	ldr	r3, [pc, #84]	; (800979c <sqrt+0x64>)
 8009748:	eeb0 8a40 	vmov.f32	s16, s0
 800974c:	eef0 8a60 	vmov.f32	s17, s1
 8009750:	f993 3000 	ldrsb.w	r3, [r3]
 8009754:	3301      	adds	r3, #1
 8009756:	d019      	beq.n	800978c <sqrt+0x54>
 8009758:	4622      	mov	r2, r4
 800975a:	462b      	mov	r3, r5
 800975c:	4620      	mov	r0, r4
 800975e:	4629      	mov	r1, r5
 8009760:	f7f7 f99c 	bl	8000a9c <__aeabi_dcmpun>
 8009764:	b990      	cbnz	r0, 800978c <sqrt+0x54>
 8009766:	2200      	movs	r2, #0
 8009768:	2300      	movs	r3, #0
 800976a:	4620      	mov	r0, r4
 800976c:	4629      	mov	r1, r5
 800976e:	f7f7 f96d 	bl	8000a4c <__aeabi_dcmplt>
 8009772:	b158      	cbz	r0, 800978c <sqrt+0x54>
 8009774:	f7ff fcac 	bl	80090d0 <__errno>
 8009778:	2321      	movs	r3, #33	; 0x21
 800977a:	6003      	str	r3, [r0, #0]
 800977c:	2200      	movs	r2, #0
 800977e:	2300      	movs	r3, #0
 8009780:	4610      	mov	r0, r2
 8009782:	4619      	mov	r1, r3
 8009784:	f7f7 f81a 	bl	80007bc <__aeabi_ddiv>
 8009788:	ec41 0b18 	vmov	d8, r0, r1
 800978c:	eeb0 0a48 	vmov.f32	s0, s16
 8009790:	eef0 0a68 	vmov.f32	s1, s17
 8009794:	ecbd 8b02 	vpop	{d8}
 8009798:	bd38      	pop	{r3, r4, r5, pc}
 800979a:	bf00      	nop
 800979c:	20000250 	.word	0x20000250

080097a0 <__ieee754_atan2>:
 80097a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097a4:	ec57 6b11 	vmov	r6, r7, d1
 80097a8:	4273      	negs	r3, r6
 80097aa:	f8df e184 	ldr.w	lr, [pc, #388]	; 8009930 <__ieee754_atan2+0x190>
 80097ae:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80097b2:	4333      	orrs	r3, r6
 80097b4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80097b8:	4573      	cmp	r3, lr
 80097ba:	ec51 0b10 	vmov	r0, r1, d0
 80097be:	ee11 8a10 	vmov	r8, s2
 80097c2:	d80a      	bhi.n	80097da <__ieee754_atan2+0x3a>
 80097c4:	4244      	negs	r4, r0
 80097c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80097ca:	4304      	orrs	r4, r0
 80097cc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80097d0:	4574      	cmp	r4, lr
 80097d2:	ee10 9a10 	vmov	r9, s0
 80097d6:	468c      	mov	ip, r1
 80097d8:	d907      	bls.n	80097ea <__ieee754_atan2+0x4a>
 80097da:	4632      	mov	r2, r6
 80097dc:	463b      	mov	r3, r7
 80097de:	f7f6 fd0d 	bl	80001fc <__adddf3>
 80097e2:	ec41 0b10 	vmov	d0, r0, r1
 80097e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097ea:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80097ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80097f2:	4334      	orrs	r4, r6
 80097f4:	d103      	bne.n	80097fe <__ieee754_atan2+0x5e>
 80097f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097fa:	f7ff bc9d 	b.w	8009138 <atan>
 80097fe:	17bc      	asrs	r4, r7, #30
 8009800:	f004 0402 	and.w	r4, r4, #2
 8009804:	ea53 0909 	orrs.w	r9, r3, r9
 8009808:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800980c:	d107      	bne.n	800981e <__ieee754_atan2+0x7e>
 800980e:	2c02      	cmp	r4, #2
 8009810:	d060      	beq.n	80098d4 <__ieee754_atan2+0x134>
 8009812:	2c03      	cmp	r4, #3
 8009814:	d1e5      	bne.n	80097e2 <__ieee754_atan2+0x42>
 8009816:	a142      	add	r1, pc, #264	; (adr r1, 8009920 <__ieee754_atan2+0x180>)
 8009818:	e9d1 0100 	ldrd	r0, r1, [r1]
 800981c:	e7e1      	b.n	80097e2 <__ieee754_atan2+0x42>
 800981e:	ea52 0808 	orrs.w	r8, r2, r8
 8009822:	d106      	bne.n	8009832 <__ieee754_atan2+0x92>
 8009824:	f1bc 0f00 	cmp.w	ip, #0
 8009828:	da5f      	bge.n	80098ea <__ieee754_atan2+0x14a>
 800982a:	a13f      	add	r1, pc, #252	; (adr r1, 8009928 <__ieee754_atan2+0x188>)
 800982c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009830:	e7d7      	b.n	80097e2 <__ieee754_atan2+0x42>
 8009832:	4572      	cmp	r2, lr
 8009834:	d10f      	bne.n	8009856 <__ieee754_atan2+0xb6>
 8009836:	4293      	cmp	r3, r2
 8009838:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800983c:	d107      	bne.n	800984e <__ieee754_atan2+0xae>
 800983e:	2c02      	cmp	r4, #2
 8009840:	d84c      	bhi.n	80098dc <__ieee754_atan2+0x13c>
 8009842:	4b35      	ldr	r3, [pc, #212]	; (8009918 <__ieee754_atan2+0x178>)
 8009844:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009848:	e9d4 0100 	ldrd	r0, r1, [r4]
 800984c:	e7c9      	b.n	80097e2 <__ieee754_atan2+0x42>
 800984e:	2c02      	cmp	r4, #2
 8009850:	d848      	bhi.n	80098e4 <__ieee754_atan2+0x144>
 8009852:	4b32      	ldr	r3, [pc, #200]	; (800991c <__ieee754_atan2+0x17c>)
 8009854:	e7f6      	b.n	8009844 <__ieee754_atan2+0xa4>
 8009856:	4573      	cmp	r3, lr
 8009858:	d0e4      	beq.n	8009824 <__ieee754_atan2+0x84>
 800985a:	1a9b      	subs	r3, r3, r2
 800985c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009860:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009864:	da1e      	bge.n	80098a4 <__ieee754_atan2+0x104>
 8009866:	2f00      	cmp	r7, #0
 8009868:	da01      	bge.n	800986e <__ieee754_atan2+0xce>
 800986a:	323c      	adds	r2, #60	; 0x3c
 800986c:	db1e      	blt.n	80098ac <__ieee754_atan2+0x10c>
 800986e:	4632      	mov	r2, r6
 8009870:	463b      	mov	r3, r7
 8009872:	f7f6 ffa3 	bl	80007bc <__aeabi_ddiv>
 8009876:	ec41 0b10 	vmov	d0, r0, r1
 800987a:	f7ff fe4d 	bl	8009518 <fabs>
 800987e:	f7ff fc5b 	bl	8009138 <atan>
 8009882:	ec51 0b10 	vmov	r0, r1, d0
 8009886:	2c01      	cmp	r4, #1
 8009888:	d013      	beq.n	80098b2 <__ieee754_atan2+0x112>
 800988a:	2c02      	cmp	r4, #2
 800988c:	d015      	beq.n	80098ba <__ieee754_atan2+0x11a>
 800988e:	2c00      	cmp	r4, #0
 8009890:	d0a7      	beq.n	80097e2 <__ieee754_atan2+0x42>
 8009892:	a319      	add	r3, pc, #100	; (adr r3, 80098f8 <__ieee754_atan2+0x158>)
 8009894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009898:	f7f6 fcae 	bl	80001f8 <__aeabi_dsub>
 800989c:	a318      	add	r3, pc, #96	; (adr r3, 8009900 <__ieee754_atan2+0x160>)
 800989e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a2:	e014      	b.n	80098ce <__ieee754_atan2+0x12e>
 80098a4:	a118      	add	r1, pc, #96	; (adr r1, 8009908 <__ieee754_atan2+0x168>)
 80098a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098aa:	e7ec      	b.n	8009886 <__ieee754_atan2+0xe6>
 80098ac:	2000      	movs	r0, #0
 80098ae:	2100      	movs	r1, #0
 80098b0:	e7e9      	b.n	8009886 <__ieee754_atan2+0xe6>
 80098b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098b6:	4619      	mov	r1, r3
 80098b8:	e793      	b.n	80097e2 <__ieee754_atan2+0x42>
 80098ba:	a30f      	add	r3, pc, #60	; (adr r3, 80098f8 <__ieee754_atan2+0x158>)
 80098bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c0:	f7f6 fc9a 	bl	80001f8 <__aeabi_dsub>
 80098c4:	4602      	mov	r2, r0
 80098c6:	460b      	mov	r3, r1
 80098c8:	a10d      	add	r1, pc, #52	; (adr r1, 8009900 <__ieee754_atan2+0x160>)
 80098ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098ce:	f7f6 fc93 	bl	80001f8 <__aeabi_dsub>
 80098d2:	e786      	b.n	80097e2 <__ieee754_atan2+0x42>
 80098d4:	a10a      	add	r1, pc, #40	; (adr r1, 8009900 <__ieee754_atan2+0x160>)
 80098d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098da:	e782      	b.n	80097e2 <__ieee754_atan2+0x42>
 80098dc:	a10c      	add	r1, pc, #48	; (adr r1, 8009910 <__ieee754_atan2+0x170>)
 80098de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098e2:	e77e      	b.n	80097e2 <__ieee754_atan2+0x42>
 80098e4:	2000      	movs	r0, #0
 80098e6:	2100      	movs	r1, #0
 80098e8:	e77b      	b.n	80097e2 <__ieee754_atan2+0x42>
 80098ea:	a107      	add	r1, pc, #28	; (adr r1, 8009908 <__ieee754_atan2+0x168>)
 80098ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098f0:	e777      	b.n	80097e2 <__ieee754_atan2+0x42>
 80098f2:	bf00      	nop
 80098f4:	f3af 8000 	nop.w
 80098f8:	33145c07 	.word	0x33145c07
 80098fc:	3ca1a626 	.word	0x3ca1a626
 8009900:	54442d18 	.word	0x54442d18
 8009904:	400921fb 	.word	0x400921fb
 8009908:	54442d18 	.word	0x54442d18
 800990c:	3ff921fb 	.word	0x3ff921fb
 8009910:	54442d18 	.word	0x54442d18
 8009914:	3fe921fb 	.word	0x3fe921fb
 8009918:	0800b688 	.word	0x0800b688
 800991c:	0800b6a0 	.word	0x0800b6a0
 8009920:	54442d18 	.word	0x54442d18
 8009924:	c00921fb 	.word	0xc00921fb
 8009928:	54442d18 	.word	0x54442d18
 800992c:	bff921fb 	.word	0xbff921fb
 8009930:	7ff00000 	.word	0x7ff00000
 8009934:	00000000 	.word	0x00000000

08009938 <__ieee754_pow>:
 8009938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993c:	ed2d 8b06 	vpush	{d8-d10}
 8009940:	b08d      	sub	sp, #52	; 0x34
 8009942:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009946:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800994a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800994e:	ea56 0100 	orrs.w	r1, r6, r0
 8009952:	ec53 2b10 	vmov	r2, r3, d0
 8009956:	f000 84d1 	beq.w	800a2fc <__ieee754_pow+0x9c4>
 800995a:	497f      	ldr	r1, [pc, #508]	; (8009b58 <__ieee754_pow+0x220>)
 800995c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8009960:	428c      	cmp	r4, r1
 8009962:	ee10 8a10 	vmov	r8, s0
 8009966:	4699      	mov	r9, r3
 8009968:	dc09      	bgt.n	800997e <__ieee754_pow+0x46>
 800996a:	d103      	bne.n	8009974 <__ieee754_pow+0x3c>
 800996c:	b97a      	cbnz	r2, 800998e <__ieee754_pow+0x56>
 800996e:	42a6      	cmp	r6, r4
 8009970:	dd02      	ble.n	8009978 <__ieee754_pow+0x40>
 8009972:	e00c      	b.n	800998e <__ieee754_pow+0x56>
 8009974:	428e      	cmp	r6, r1
 8009976:	dc02      	bgt.n	800997e <__ieee754_pow+0x46>
 8009978:	428e      	cmp	r6, r1
 800997a:	d110      	bne.n	800999e <__ieee754_pow+0x66>
 800997c:	b178      	cbz	r0, 800999e <__ieee754_pow+0x66>
 800997e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009982:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009986:	ea54 0308 	orrs.w	r3, r4, r8
 800998a:	f000 84b7 	beq.w	800a2fc <__ieee754_pow+0x9c4>
 800998e:	4873      	ldr	r0, [pc, #460]	; (8009b5c <__ieee754_pow+0x224>)
 8009990:	b00d      	add	sp, #52	; 0x34
 8009992:	ecbd 8b06 	vpop	{d8-d10}
 8009996:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800999a:	f001 bd05 	b.w	800b3a8 <nan>
 800999e:	f1b9 0f00 	cmp.w	r9, #0
 80099a2:	da36      	bge.n	8009a12 <__ieee754_pow+0xda>
 80099a4:	496e      	ldr	r1, [pc, #440]	; (8009b60 <__ieee754_pow+0x228>)
 80099a6:	428e      	cmp	r6, r1
 80099a8:	dc51      	bgt.n	8009a4e <__ieee754_pow+0x116>
 80099aa:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80099ae:	428e      	cmp	r6, r1
 80099b0:	f340 84af 	ble.w	800a312 <__ieee754_pow+0x9da>
 80099b4:	1531      	asrs	r1, r6, #20
 80099b6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80099ba:	2914      	cmp	r1, #20
 80099bc:	dd0f      	ble.n	80099de <__ieee754_pow+0xa6>
 80099be:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80099c2:	fa20 fc01 	lsr.w	ip, r0, r1
 80099c6:	fa0c f101 	lsl.w	r1, ip, r1
 80099ca:	4281      	cmp	r1, r0
 80099cc:	f040 84a1 	bne.w	800a312 <__ieee754_pow+0x9da>
 80099d0:	f00c 0c01 	and.w	ip, ip, #1
 80099d4:	f1cc 0102 	rsb	r1, ip, #2
 80099d8:	9100      	str	r1, [sp, #0]
 80099da:	b180      	cbz	r0, 80099fe <__ieee754_pow+0xc6>
 80099dc:	e059      	b.n	8009a92 <__ieee754_pow+0x15a>
 80099de:	2800      	cmp	r0, #0
 80099e0:	d155      	bne.n	8009a8e <__ieee754_pow+0x156>
 80099e2:	f1c1 0114 	rsb	r1, r1, #20
 80099e6:	fa46 fc01 	asr.w	ip, r6, r1
 80099ea:	fa0c f101 	lsl.w	r1, ip, r1
 80099ee:	42b1      	cmp	r1, r6
 80099f0:	f040 848c 	bne.w	800a30c <__ieee754_pow+0x9d4>
 80099f4:	f00c 0c01 	and.w	ip, ip, #1
 80099f8:	f1cc 0102 	rsb	r1, ip, #2
 80099fc:	9100      	str	r1, [sp, #0]
 80099fe:	4959      	ldr	r1, [pc, #356]	; (8009b64 <__ieee754_pow+0x22c>)
 8009a00:	428e      	cmp	r6, r1
 8009a02:	d12d      	bne.n	8009a60 <__ieee754_pow+0x128>
 8009a04:	2f00      	cmp	r7, #0
 8009a06:	da79      	bge.n	8009afc <__ieee754_pow+0x1c4>
 8009a08:	4956      	ldr	r1, [pc, #344]	; (8009b64 <__ieee754_pow+0x22c>)
 8009a0a:	2000      	movs	r0, #0
 8009a0c:	f7f6 fed6 	bl	80007bc <__aeabi_ddiv>
 8009a10:	e016      	b.n	8009a40 <__ieee754_pow+0x108>
 8009a12:	2100      	movs	r1, #0
 8009a14:	9100      	str	r1, [sp, #0]
 8009a16:	2800      	cmp	r0, #0
 8009a18:	d13b      	bne.n	8009a92 <__ieee754_pow+0x15a>
 8009a1a:	494f      	ldr	r1, [pc, #316]	; (8009b58 <__ieee754_pow+0x220>)
 8009a1c:	428e      	cmp	r6, r1
 8009a1e:	d1ee      	bne.n	80099fe <__ieee754_pow+0xc6>
 8009a20:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009a24:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009a28:	ea53 0308 	orrs.w	r3, r3, r8
 8009a2c:	f000 8466 	beq.w	800a2fc <__ieee754_pow+0x9c4>
 8009a30:	4b4d      	ldr	r3, [pc, #308]	; (8009b68 <__ieee754_pow+0x230>)
 8009a32:	429c      	cmp	r4, r3
 8009a34:	dd0d      	ble.n	8009a52 <__ieee754_pow+0x11a>
 8009a36:	2f00      	cmp	r7, #0
 8009a38:	f280 8464 	bge.w	800a304 <__ieee754_pow+0x9cc>
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	2100      	movs	r1, #0
 8009a40:	ec41 0b10 	vmov	d0, r0, r1
 8009a44:	b00d      	add	sp, #52	; 0x34
 8009a46:	ecbd 8b06 	vpop	{d8-d10}
 8009a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a4e:	2102      	movs	r1, #2
 8009a50:	e7e0      	b.n	8009a14 <__ieee754_pow+0xdc>
 8009a52:	2f00      	cmp	r7, #0
 8009a54:	daf2      	bge.n	8009a3c <__ieee754_pow+0x104>
 8009a56:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8009a5a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009a5e:	e7ef      	b.n	8009a40 <__ieee754_pow+0x108>
 8009a60:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009a64:	d104      	bne.n	8009a70 <__ieee754_pow+0x138>
 8009a66:	4610      	mov	r0, r2
 8009a68:	4619      	mov	r1, r3
 8009a6a:	f7f6 fd7d 	bl	8000568 <__aeabi_dmul>
 8009a6e:	e7e7      	b.n	8009a40 <__ieee754_pow+0x108>
 8009a70:	493e      	ldr	r1, [pc, #248]	; (8009b6c <__ieee754_pow+0x234>)
 8009a72:	428f      	cmp	r7, r1
 8009a74:	d10d      	bne.n	8009a92 <__ieee754_pow+0x15a>
 8009a76:	f1b9 0f00 	cmp.w	r9, #0
 8009a7a:	db0a      	blt.n	8009a92 <__ieee754_pow+0x15a>
 8009a7c:	ec43 2b10 	vmov	d0, r2, r3
 8009a80:	b00d      	add	sp, #52	; 0x34
 8009a82:	ecbd 8b06 	vpop	{d8-d10}
 8009a86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a8a:	f000 be83 	b.w	800a794 <__ieee754_sqrt>
 8009a8e:	2100      	movs	r1, #0
 8009a90:	9100      	str	r1, [sp, #0]
 8009a92:	ec43 2b10 	vmov	d0, r2, r3
 8009a96:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a9a:	f7ff fd3d 	bl	8009518 <fabs>
 8009a9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009aa2:	ec51 0b10 	vmov	r0, r1, d0
 8009aa6:	f1b8 0f00 	cmp.w	r8, #0
 8009aaa:	d12a      	bne.n	8009b02 <__ieee754_pow+0x1ca>
 8009aac:	b12c      	cbz	r4, 8009aba <__ieee754_pow+0x182>
 8009aae:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8009b64 <__ieee754_pow+0x22c>
 8009ab2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8009ab6:	45e6      	cmp	lr, ip
 8009ab8:	d123      	bne.n	8009b02 <__ieee754_pow+0x1ca>
 8009aba:	2f00      	cmp	r7, #0
 8009abc:	da05      	bge.n	8009aca <__ieee754_pow+0x192>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	2000      	movs	r0, #0
 8009ac4:	4927      	ldr	r1, [pc, #156]	; (8009b64 <__ieee754_pow+0x22c>)
 8009ac6:	f7f6 fe79 	bl	80007bc <__aeabi_ddiv>
 8009aca:	f1b9 0f00 	cmp.w	r9, #0
 8009ace:	dab7      	bge.n	8009a40 <__ieee754_pow+0x108>
 8009ad0:	9b00      	ldr	r3, [sp, #0]
 8009ad2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009ad6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009ada:	4323      	orrs	r3, r4
 8009adc:	d108      	bne.n	8009af0 <__ieee754_pow+0x1b8>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	4610      	mov	r0, r2
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	f7f6 fb87 	bl	80001f8 <__aeabi_dsub>
 8009aea:	4602      	mov	r2, r0
 8009aec:	460b      	mov	r3, r1
 8009aee:	e78d      	b.n	8009a0c <__ieee754_pow+0xd4>
 8009af0:	9b00      	ldr	r3, [sp, #0]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d1a4      	bne.n	8009a40 <__ieee754_pow+0x108>
 8009af6:	4602      	mov	r2, r0
 8009af8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009afc:	4610      	mov	r0, r2
 8009afe:	4619      	mov	r1, r3
 8009b00:	e79e      	b.n	8009a40 <__ieee754_pow+0x108>
 8009b02:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8009b06:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8009b0a:	950a      	str	r5, [sp, #40]	; 0x28
 8009b0c:	9d00      	ldr	r5, [sp, #0]
 8009b0e:	46ac      	mov	ip, r5
 8009b10:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009b12:	ea5c 0505 	orrs.w	r5, ip, r5
 8009b16:	d0e4      	beq.n	8009ae2 <__ieee754_pow+0x1aa>
 8009b18:	4b15      	ldr	r3, [pc, #84]	; (8009b70 <__ieee754_pow+0x238>)
 8009b1a:	429e      	cmp	r6, r3
 8009b1c:	f340 80fc 	ble.w	8009d18 <__ieee754_pow+0x3e0>
 8009b20:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009b24:	429e      	cmp	r6, r3
 8009b26:	4b10      	ldr	r3, [pc, #64]	; (8009b68 <__ieee754_pow+0x230>)
 8009b28:	dd07      	ble.n	8009b3a <__ieee754_pow+0x202>
 8009b2a:	429c      	cmp	r4, r3
 8009b2c:	dc0a      	bgt.n	8009b44 <__ieee754_pow+0x20c>
 8009b2e:	2f00      	cmp	r7, #0
 8009b30:	da84      	bge.n	8009a3c <__ieee754_pow+0x104>
 8009b32:	a307      	add	r3, pc, #28	; (adr r3, 8009b50 <__ieee754_pow+0x218>)
 8009b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b38:	e795      	b.n	8009a66 <__ieee754_pow+0x12e>
 8009b3a:	429c      	cmp	r4, r3
 8009b3c:	dbf7      	blt.n	8009b2e <__ieee754_pow+0x1f6>
 8009b3e:	4b09      	ldr	r3, [pc, #36]	; (8009b64 <__ieee754_pow+0x22c>)
 8009b40:	429c      	cmp	r4, r3
 8009b42:	dd17      	ble.n	8009b74 <__ieee754_pow+0x23c>
 8009b44:	2f00      	cmp	r7, #0
 8009b46:	dcf4      	bgt.n	8009b32 <__ieee754_pow+0x1fa>
 8009b48:	e778      	b.n	8009a3c <__ieee754_pow+0x104>
 8009b4a:	bf00      	nop
 8009b4c:	f3af 8000 	nop.w
 8009b50:	8800759c 	.word	0x8800759c
 8009b54:	7e37e43c 	.word	0x7e37e43c
 8009b58:	7ff00000 	.word	0x7ff00000
 8009b5c:	0800b6b8 	.word	0x0800b6b8
 8009b60:	433fffff 	.word	0x433fffff
 8009b64:	3ff00000 	.word	0x3ff00000
 8009b68:	3fefffff 	.word	0x3fefffff
 8009b6c:	3fe00000 	.word	0x3fe00000
 8009b70:	41e00000 	.word	0x41e00000
 8009b74:	4b64      	ldr	r3, [pc, #400]	; (8009d08 <__ieee754_pow+0x3d0>)
 8009b76:	2200      	movs	r2, #0
 8009b78:	f7f6 fb3e 	bl	80001f8 <__aeabi_dsub>
 8009b7c:	a356      	add	r3, pc, #344	; (adr r3, 8009cd8 <__ieee754_pow+0x3a0>)
 8009b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b82:	4604      	mov	r4, r0
 8009b84:	460d      	mov	r5, r1
 8009b86:	f7f6 fcef 	bl	8000568 <__aeabi_dmul>
 8009b8a:	a355      	add	r3, pc, #340	; (adr r3, 8009ce0 <__ieee754_pow+0x3a8>)
 8009b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b90:	4606      	mov	r6, r0
 8009b92:	460f      	mov	r7, r1
 8009b94:	4620      	mov	r0, r4
 8009b96:	4629      	mov	r1, r5
 8009b98:	f7f6 fce6 	bl	8000568 <__aeabi_dmul>
 8009b9c:	4b5b      	ldr	r3, [pc, #364]	; (8009d0c <__ieee754_pow+0x3d4>)
 8009b9e:	4682      	mov	sl, r0
 8009ba0:	468b      	mov	fp, r1
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	4629      	mov	r1, r5
 8009ba8:	f7f6 fcde 	bl	8000568 <__aeabi_dmul>
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	a14d      	add	r1, pc, #308	; (adr r1, 8009ce8 <__ieee754_pow+0x3b0>)
 8009bb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bb6:	f7f6 fb1f 	bl	80001f8 <__aeabi_dsub>
 8009bba:	4622      	mov	r2, r4
 8009bbc:	462b      	mov	r3, r5
 8009bbe:	f7f6 fcd3 	bl	8000568 <__aeabi_dmul>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	460b      	mov	r3, r1
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	4951      	ldr	r1, [pc, #324]	; (8009d10 <__ieee754_pow+0x3d8>)
 8009bca:	f7f6 fb15 	bl	80001f8 <__aeabi_dsub>
 8009bce:	4622      	mov	r2, r4
 8009bd0:	4680      	mov	r8, r0
 8009bd2:	4689      	mov	r9, r1
 8009bd4:	462b      	mov	r3, r5
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	4629      	mov	r1, r5
 8009bda:	f7f6 fcc5 	bl	8000568 <__aeabi_dmul>
 8009bde:	4602      	mov	r2, r0
 8009be0:	460b      	mov	r3, r1
 8009be2:	4640      	mov	r0, r8
 8009be4:	4649      	mov	r1, r9
 8009be6:	f7f6 fcbf 	bl	8000568 <__aeabi_dmul>
 8009bea:	a341      	add	r3, pc, #260	; (adr r3, 8009cf0 <__ieee754_pow+0x3b8>)
 8009bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf0:	f7f6 fcba 	bl	8000568 <__aeabi_dmul>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	4650      	mov	r0, sl
 8009bfa:	4659      	mov	r1, fp
 8009bfc:	f7f6 fafc 	bl	80001f8 <__aeabi_dsub>
 8009c00:	4602      	mov	r2, r0
 8009c02:	460b      	mov	r3, r1
 8009c04:	4680      	mov	r8, r0
 8009c06:	4689      	mov	r9, r1
 8009c08:	4630      	mov	r0, r6
 8009c0a:	4639      	mov	r1, r7
 8009c0c:	f7f6 faf6 	bl	80001fc <__adddf3>
 8009c10:	2400      	movs	r4, #0
 8009c12:	4632      	mov	r2, r6
 8009c14:	463b      	mov	r3, r7
 8009c16:	4620      	mov	r0, r4
 8009c18:	460d      	mov	r5, r1
 8009c1a:	f7f6 faed 	bl	80001f8 <__aeabi_dsub>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	460b      	mov	r3, r1
 8009c22:	4640      	mov	r0, r8
 8009c24:	4649      	mov	r1, r9
 8009c26:	f7f6 fae7 	bl	80001f8 <__aeabi_dsub>
 8009c2a:	9b00      	ldr	r3, [sp, #0]
 8009c2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	4313      	orrs	r3, r2
 8009c32:	4682      	mov	sl, r0
 8009c34:	468b      	mov	fp, r1
 8009c36:	f040 81f1 	bne.w	800a01c <__ieee754_pow+0x6e4>
 8009c3a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8009cf8 <__ieee754_pow+0x3c0>
 8009c3e:	eeb0 8a47 	vmov.f32	s16, s14
 8009c42:	eef0 8a67 	vmov.f32	s17, s15
 8009c46:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009c4a:	2600      	movs	r6, #0
 8009c4c:	4632      	mov	r2, r6
 8009c4e:	463b      	mov	r3, r7
 8009c50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c54:	f7f6 fad0 	bl	80001f8 <__aeabi_dsub>
 8009c58:	4622      	mov	r2, r4
 8009c5a:	462b      	mov	r3, r5
 8009c5c:	f7f6 fc84 	bl	8000568 <__aeabi_dmul>
 8009c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c64:	4680      	mov	r8, r0
 8009c66:	4689      	mov	r9, r1
 8009c68:	4650      	mov	r0, sl
 8009c6a:	4659      	mov	r1, fp
 8009c6c:	f7f6 fc7c 	bl	8000568 <__aeabi_dmul>
 8009c70:	4602      	mov	r2, r0
 8009c72:	460b      	mov	r3, r1
 8009c74:	4640      	mov	r0, r8
 8009c76:	4649      	mov	r1, r9
 8009c78:	f7f6 fac0 	bl	80001fc <__adddf3>
 8009c7c:	4632      	mov	r2, r6
 8009c7e:	463b      	mov	r3, r7
 8009c80:	4680      	mov	r8, r0
 8009c82:	4689      	mov	r9, r1
 8009c84:	4620      	mov	r0, r4
 8009c86:	4629      	mov	r1, r5
 8009c88:	f7f6 fc6e 	bl	8000568 <__aeabi_dmul>
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	4604      	mov	r4, r0
 8009c90:	460d      	mov	r5, r1
 8009c92:	4602      	mov	r2, r0
 8009c94:	4649      	mov	r1, r9
 8009c96:	4640      	mov	r0, r8
 8009c98:	f7f6 fab0 	bl	80001fc <__adddf3>
 8009c9c:	4b1d      	ldr	r3, [pc, #116]	; (8009d14 <__ieee754_pow+0x3dc>)
 8009c9e:	4299      	cmp	r1, r3
 8009ca0:	ec45 4b19 	vmov	d9, r4, r5
 8009ca4:	4606      	mov	r6, r0
 8009ca6:	460f      	mov	r7, r1
 8009ca8:	468b      	mov	fp, r1
 8009caa:	f340 82fe 	ble.w	800a2aa <__ieee754_pow+0x972>
 8009cae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009cb2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009cb6:	4303      	orrs	r3, r0
 8009cb8:	f000 81f0 	beq.w	800a09c <__ieee754_pow+0x764>
 8009cbc:	a310      	add	r3, pc, #64	; (adr r3, 8009d00 <__ieee754_pow+0x3c8>)
 8009cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc2:	ec51 0b18 	vmov	r0, r1, d8
 8009cc6:	f7f6 fc4f 	bl	8000568 <__aeabi_dmul>
 8009cca:	a30d      	add	r3, pc, #52	; (adr r3, 8009d00 <__ieee754_pow+0x3c8>)
 8009ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd0:	e6cb      	b.n	8009a6a <__ieee754_pow+0x132>
 8009cd2:	bf00      	nop
 8009cd4:	f3af 8000 	nop.w
 8009cd8:	60000000 	.word	0x60000000
 8009cdc:	3ff71547 	.word	0x3ff71547
 8009ce0:	f85ddf44 	.word	0xf85ddf44
 8009ce4:	3e54ae0b 	.word	0x3e54ae0b
 8009ce8:	55555555 	.word	0x55555555
 8009cec:	3fd55555 	.word	0x3fd55555
 8009cf0:	652b82fe 	.word	0x652b82fe
 8009cf4:	3ff71547 	.word	0x3ff71547
 8009cf8:	00000000 	.word	0x00000000
 8009cfc:	bff00000 	.word	0xbff00000
 8009d00:	8800759c 	.word	0x8800759c
 8009d04:	7e37e43c 	.word	0x7e37e43c
 8009d08:	3ff00000 	.word	0x3ff00000
 8009d0c:	3fd00000 	.word	0x3fd00000
 8009d10:	3fe00000 	.word	0x3fe00000
 8009d14:	408fffff 	.word	0x408fffff
 8009d18:	4bd7      	ldr	r3, [pc, #860]	; (800a078 <__ieee754_pow+0x740>)
 8009d1a:	ea03 0309 	and.w	r3, r3, r9
 8009d1e:	2200      	movs	r2, #0
 8009d20:	b92b      	cbnz	r3, 8009d2e <__ieee754_pow+0x3f6>
 8009d22:	4bd6      	ldr	r3, [pc, #856]	; (800a07c <__ieee754_pow+0x744>)
 8009d24:	f7f6 fc20 	bl	8000568 <__aeabi_dmul>
 8009d28:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009d2c:	460c      	mov	r4, r1
 8009d2e:	1523      	asrs	r3, r4, #20
 8009d30:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009d34:	4413      	add	r3, r2
 8009d36:	9309      	str	r3, [sp, #36]	; 0x24
 8009d38:	4bd1      	ldr	r3, [pc, #836]	; (800a080 <__ieee754_pow+0x748>)
 8009d3a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009d3e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009d42:	429c      	cmp	r4, r3
 8009d44:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009d48:	dd08      	ble.n	8009d5c <__ieee754_pow+0x424>
 8009d4a:	4bce      	ldr	r3, [pc, #824]	; (800a084 <__ieee754_pow+0x74c>)
 8009d4c:	429c      	cmp	r4, r3
 8009d4e:	f340 8163 	ble.w	800a018 <__ieee754_pow+0x6e0>
 8009d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d54:	3301      	adds	r3, #1
 8009d56:	9309      	str	r3, [sp, #36]	; 0x24
 8009d58:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009d5c:	2400      	movs	r4, #0
 8009d5e:	00e3      	lsls	r3, r4, #3
 8009d60:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d62:	4bc9      	ldr	r3, [pc, #804]	; (800a088 <__ieee754_pow+0x750>)
 8009d64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d68:	ed93 7b00 	vldr	d7, [r3]
 8009d6c:	4629      	mov	r1, r5
 8009d6e:	ec53 2b17 	vmov	r2, r3, d7
 8009d72:	eeb0 8a47 	vmov.f32	s16, s14
 8009d76:	eef0 8a67 	vmov.f32	s17, s15
 8009d7a:	4682      	mov	sl, r0
 8009d7c:	f7f6 fa3c 	bl	80001f8 <__aeabi_dsub>
 8009d80:	4652      	mov	r2, sl
 8009d82:	4606      	mov	r6, r0
 8009d84:	460f      	mov	r7, r1
 8009d86:	462b      	mov	r3, r5
 8009d88:	ec51 0b18 	vmov	r0, r1, d8
 8009d8c:	f7f6 fa36 	bl	80001fc <__adddf3>
 8009d90:	4602      	mov	r2, r0
 8009d92:	460b      	mov	r3, r1
 8009d94:	2000      	movs	r0, #0
 8009d96:	49bd      	ldr	r1, [pc, #756]	; (800a08c <__ieee754_pow+0x754>)
 8009d98:	f7f6 fd10 	bl	80007bc <__aeabi_ddiv>
 8009d9c:	ec41 0b19 	vmov	d9, r0, r1
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	4630      	mov	r0, r6
 8009da6:	4639      	mov	r1, r7
 8009da8:	f7f6 fbde 	bl	8000568 <__aeabi_dmul>
 8009dac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009db0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009db4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009db8:	2300      	movs	r3, #0
 8009dba:	9304      	str	r3, [sp, #16]
 8009dbc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009dc0:	46ab      	mov	fp, r5
 8009dc2:	106d      	asrs	r5, r5, #1
 8009dc4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009dc8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009dcc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	4640      	mov	r0, r8
 8009dd4:	4649      	mov	r1, r9
 8009dd6:	4614      	mov	r4, r2
 8009dd8:	461d      	mov	r5, r3
 8009dda:	f7f6 fbc5 	bl	8000568 <__aeabi_dmul>
 8009dde:	4602      	mov	r2, r0
 8009de0:	460b      	mov	r3, r1
 8009de2:	4630      	mov	r0, r6
 8009de4:	4639      	mov	r1, r7
 8009de6:	f7f6 fa07 	bl	80001f8 <__aeabi_dsub>
 8009dea:	ec53 2b18 	vmov	r2, r3, d8
 8009dee:	4606      	mov	r6, r0
 8009df0:	460f      	mov	r7, r1
 8009df2:	4620      	mov	r0, r4
 8009df4:	4629      	mov	r1, r5
 8009df6:	f7f6 f9ff 	bl	80001f8 <__aeabi_dsub>
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	4650      	mov	r0, sl
 8009e00:	4659      	mov	r1, fp
 8009e02:	f7f6 f9f9 	bl	80001f8 <__aeabi_dsub>
 8009e06:	4642      	mov	r2, r8
 8009e08:	464b      	mov	r3, r9
 8009e0a:	f7f6 fbad 	bl	8000568 <__aeabi_dmul>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	460b      	mov	r3, r1
 8009e12:	4630      	mov	r0, r6
 8009e14:	4639      	mov	r1, r7
 8009e16:	f7f6 f9ef 	bl	80001f8 <__aeabi_dsub>
 8009e1a:	ec53 2b19 	vmov	r2, r3, d9
 8009e1e:	f7f6 fba3 	bl	8000568 <__aeabi_dmul>
 8009e22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e26:	ec41 0b18 	vmov	d8, r0, r1
 8009e2a:	4610      	mov	r0, r2
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	f7f6 fb9b 	bl	8000568 <__aeabi_dmul>
 8009e32:	a37d      	add	r3, pc, #500	; (adr r3, 800a028 <__ieee754_pow+0x6f0>)
 8009e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e38:	4604      	mov	r4, r0
 8009e3a:	460d      	mov	r5, r1
 8009e3c:	f7f6 fb94 	bl	8000568 <__aeabi_dmul>
 8009e40:	a37b      	add	r3, pc, #492	; (adr r3, 800a030 <__ieee754_pow+0x6f8>)
 8009e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e46:	f7f6 f9d9 	bl	80001fc <__adddf3>
 8009e4a:	4622      	mov	r2, r4
 8009e4c:	462b      	mov	r3, r5
 8009e4e:	f7f6 fb8b 	bl	8000568 <__aeabi_dmul>
 8009e52:	a379      	add	r3, pc, #484	; (adr r3, 800a038 <__ieee754_pow+0x700>)
 8009e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e58:	f7f6 f9d0 	bl	80001fc <__adddf3>
 8009e5c:	4622      	mov	r2, r4
 8009e5e:	462b      	mov	r3, r5
 8009e60:	f7f6 fb82 	bl	8000568 <__aeabi_dmul>
 8009e64:	a376      	add	r3, pc, #472	; (adr r3, 800a040 <__ieee754_pow+0x708>)
 8009e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6a:	f7f6 f9c7 	bl	80001fc <__adddf3>
 8009e6e:	4622      	mov	r2, r4
 8009e70:	462b      	mov	r3, r5
 8009e72:	f7f6 fb79 	bl	8000568 <__aeabi_dmul>
 8009e76:	a374      	add	r3, pc, #464	; (adr r3, 800a048 <__ieee754_pow+0x710>)
 8009e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7c:	f7f6 f9be 	bl	80001fc <__adddf3>
 8009e80:	4622      	mov	r2, r4
 8009e82:	462b      	mov	r3, r5
 8009e84:	f7f6 fb70 	bl	8000568 <__aeabi_dmul>
 8009e88:	a371      	add	r3, pc, #452	; (adr r3, 800a050 <__ieee754_pow+0x718>)
 8009e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8e:	f7f6 f9b5 	bl	80001fc <__adddf3>
 8009e92:	4622      	mov	r2, r4
 8009e94:	4606      	mov	r6, r0
 8009e96:	460f      	mov	r7, r1
 8009e98:	462b      	mov	r3, r5
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	4629      	mov	r1, r5
 8009e9e:	f7f6 fb63 	bl	8000568 <__aeabi_dmul>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	4630      	mov	r0, r6
 8009ea8:	4639      	mov	r1, r7
 8009eaa:	f7f6 fb5d 	bl	8000568 <__aeabi_dmul>
 8009eae:	4642      	mov	r2, r8
 8009eb0:	4604      	mov	r4, r0
 8009eb2:	460d      	mov	r5, r1
 8009eb4:	464b      	mov	r3, r9
 8009eb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009eba:	f7f6 f99f 	bl	80001fc <__adddf3>
 8009ebe:	ec53 2b18 	vmov	r2, r3, d8
 8009ec2:	f7f6 fb51 	bl	8000568 <__aeabi_dmul>
 8009ec6:	4622      	mov	r2, r4
 8009ec8:	462b      	mov	r3, r5
 8009eca:	f7f6 f997 	bl	80001fc <__adddf3>
 8009ece:	4642      	mov	r2, r8
 8009ed0:	4682      	mov	sl, r0
 8009ed2:	468b      	mov	fp, r1
 8009ed4:	464b      	mov	r3, r9
 8009ed6:	4640      	mov	r0, r8
 8009ed8:	4649      	mov	r1, r9
 8009eda:	f7f6 fb45 	bl	8000568 <__aeabi_dmul>
 8009ede:	4b6c      	ldr	r3, [pc, #432]	; (800a090 <__ieee754_pow+0x758>)
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	460f      	mov	r7, r1
 8009ee6:	f7f6 f989 	bl	80001fc <__adddf3>
 8009eea:	4652      	mov	r2, sl
 8009eec:	465b      	mov	r3, fp
 8009eee:	f7f6 f985 	bl	80001fc <__adddf3>
 8009ef2:	9c04      	ldr	r4, [sp, #16]
 8009ef4:	460d      	mov	r5, r1
 8009ef6:	4622      	mov	r2, r4
 8009ef8:	460b      	mov	r3, r1
 8009efa:	4640      	mov	r0, r8
 8009efc:	4649      	mov	r1, r9
 8009efe:	f7f6 fb33 	bl	8000568 <__aeabi_dmul>
 8009f02:	4b63      	ldr	r3, [pc, #396]	; (800a090 <__ieee754_pow+0x758>)
 8009f04:	4680      	mov	r8, r0
 8009f06:	4689      	mov	r9, r1
 8009f08:	2200      	movs	r2, #0
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	4629      	mov	r1, r5
 8009f0e:	f7f6 f973 	bl	80001f8 <__aeabi_dsub>
 8009f12:	4632      	mov	r2, r6
 8009f14:	463b      	mov	r3, r7
 8009f16:	f7f6 f96f 	bl	80001f8 <__aeabi_dsub>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	4650      	mov	r0, sl
 8009f20:	4659      	mov	r1, fp
 8009f22:	f7f6 f969 	bl	80001f8 <__aeabi_dsub>
 8009f26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f2a:	f7f6 fb1d 	bl	8000568 <__aeabi_dmul>
 8009f2e:	4622      	mov	r2, r4
 8009f30:	4606      	mov	r6, r0
 8009f32:	460f      	mov	r7, r1
 8009f34:	462b      	mov	r3, r5
 8009f36:	ec51 0b18 	vmov	r0, r1, d8
 8009f3a:	f7f6 fb15 	bl	8000568 <__aeabi_dmul>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	460b      	mov	r3, r1
 8009f42:	4630      	mov	r0, r6
 8009f44:	4639      	mov	r1, r7
 8009f46:	f7f6 f959 	bl	80001fc <__adddf3>
 8009f4a:	4606      	mov	r6, r0
 8009f4c:	460f      	mov	r7, r1
 8009f4e:	4602      	mov	r2, r0
 8009f50:	460b      	mov	r3, r1
 8009f52:	4640      	mov	r0, r8
 8009f54:	4649      	mov	r1, r9
 8009f56:	f7f6 f951 	bl	80001fc <__adddf3>
 8009f5a:	9c04      	ldr	r4, [sp, #16]
 8009f5c:	a33e      	add	r3, pc, #248	; (adr r3, 800a058 <__ieee754_pow+0x720>)
 8009f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f62:	4620      	mov	r0, r4
 8009f64:	460d      	mov	r5, r1
 8009f66:	f7f6 faff 	bl	8000568 <__aeabi_dmul>
 8009f6a:	4642      	mov	r2, r8
 8009f6c:	ec41 0b18 	vmov	d8, r0, r1
 8009f70:	464b      	mov	r3, r9
 8009f72:	4620      	mov	r0, r4
 8009f74:	4629      	mov	r1, r5
 8009f76:	f7f6 f93f 	bl	80001f8 <__aeabi_dsub>
 8009f7a:	4602      	mov	r2, r0
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	4630      	mov	r0, r6
 8009f80:	4639      	mov	r1, r7
 8009f82:	f7f6 f939 	bl	80001f8 <__aeabi_dsub>
 8009f86:	a336      	add	r3, pc, #216	; (adr r3, 800a060 <__ieee754_pow+0x728>)
 8009f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8c:	f7f6 faec 	bl	8000568 <__aeabi_dmul>
 8009f90:	a335      	add	r3, pc, #212	; (adr r3, 800a068 <__ieee754_pow+0x730>)
 8009f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f96:	4606      	mov	r6, r0
 8009f98:	460f      	mov	r7, r1
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	4629      	mov	r1, r5
 8009f9e:	f7f6 fae3 	bl	8000568 <__aeabi_dmul>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	4639      	mov	r1, r7
 8009faa:	f7f6 f927 	bl	80001fc <__adddf3>
 8009fae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009fb0:	4b38      	ldr	r3, [pc, #224]	; (800a094 <__ieee754_pow+0x75c>)
 8009fb2:	4413      	add	r3, r2
 8009fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb8:	f7f6 f920 	bl	80001fc <__adddf3>
 8009fbc:	4682      	mov	sl, r0
 8009fbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fc0:	468b      	mov	fp, r1
 8009fc2:	f7f6 fa67 	bl	8000494 <__aeabi_i2d>
 8009fc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009fc8:	4b33      	ldr	r3, [pc, #204]	; (800a098 <__ieee754_pow+0x760>)
 8009fca:	4413      	add	r3, r2
 8009fcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009fd0:	4606      	mov	r6, r0
 8009fd2:	460f      	mov	r7, r1
 8009fd4:	4652      	mov	r2, sl
 8009fd6:	465b      	mov	r3, fp
 8009fd8:	ec51 0b18 	vmov	r0, r1, d8
 8009fdc:	f7f6 f90e 	bl	80001fc <__adddf3>
 8009fe0:	4642      	mov	r2, r8
 8009fe2:	464b      	mov	r3, r9
 8009fe4:	f7f6 f90a 	bl	80001fc <__adddf3>
 8009fe8:	4632      	mov	r2, r6
 8009fea:	463b      	mov	r3, r7
 8009fec:	f7f6 f906 	bl	80001fc <__adddf3>
 8009ff0:	9c04      	ldr	r4, [sp, #16]
 8009ff2:	4632      	mov	r2, r6
 8009ff4:	463b      	mov	r3, r7
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	460d      	mov	r5, r1
 8009ffa:	f7f6 f8fd 	bl	80001f8 <__aeabi_dsub>
 8009ffe:	4642      	mov	r2, r8
 800a000:	464b      	mov	r3, r9
 800a002:	f7f6 f8f9 	bl	80001f8 <__aeabi_dsub>
 800a006:	ec53 2b18 	vmov	r2, r3, d8
 800a00a:	f7f6 f8f5 	bl	80001f8 <__aeabi_dsub>
 800a00e:	4602      	mov	r2, r0
 800a010:	460b      	mov	r3, r1
 800a012:	4650      	mov	r0, sl
 800a014:	4659      	mov	r1, fp
 800a016:	e606      	b.n	8009c26 <__ieee754_pow+0x2ee>
 800a018:	2401      	movs	r4, #1
 800a01a:	e6a0      	b.n	8009d5e <__ieee754_pow+0x426>
 800a01c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800a070 <__ieee754_pow+0x738>
 800a020:	e60d      	b.n	8009c3e <__ieee754_pow+0x306>
 800a022:	bf00      	nop
 800a024:	f3af 8000 	nop.w
 800a028:	4a454eef 	.word	0x4a454eef
 800a02c:	3fca7e28 	.word	0x3fca7e28
 800a030:	93c9db65 	.word	0x93c9db65
 800a034:	3fcd864a 	.word	0x3fcd864a
 800a038:	a91d4101 	.word	0xa91d4101
 800a03c:	3fd17460 	.word	0x3fd17460
 800a040:	518f264d 	.word	0x518f264d
 800a044:	3fd55555 	.word	0x3fd55555
 800a048:	db6fabff 	.word	0xdb6fabff
 800a04c:	3fdb6db6 	.word	0x3fdb6db6
 800a050:	33333303 	.word	0x33333303
 800a054:	3fe33333 	.word	0x3fe33333
 800a058:	e0000000 	.word	0xe0000000
 800a05c:	3feec709 	.word	0x3feec709
 800a060:	dc3a03fd 	.word	0xdc3a03fd
 800a064:	3feec709 	.word	0x3feec709
 800a068:	145b01f5 	.word	0x145b01f5
 800a06c:	be3e2fe0 	.word	0xbe3e2fe0
 800a070:	00000000 	.word	0x00000000
 800a074:	3ff00000 	.word	0x3ff00000
 800a078:	7ff00000 	.word	0x7ff00000
 800a07c:	43400000 	.word	0x43400000
 800a080:	0003988e 	.word	0x0003988e
 800a084:	000bb679 	.word	0x000bb679
 800a088:	0800b6c0 	.word	0x0800b6c0
 800a08c:	3ff00000 	.word	0x3ff00000
 800a090:	40080000 	.word	0x40080000
 800a094:	0800b6e0 	.word	0x0800b6e0
 800a098:	0800b6d0 	.word	0x0800b6d0
 800a09c:	a3b5      	add	r3, pc, #724	; (adr r3, 800a374 <__ieee754_pow+0xa3c>)
 800a09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a2:	4640      	mov	r0, r8
 800a0a4:	4649      	mov	r1, r9
 800a0a6:	f7f6 f8a9 	bl	80001fc <__adddf3>
 800a0aa:	4622      	mov	r2, r4
 800a0ac:	ec41 0b1a 	vmov	d10, r0, r1
 800a0b0:	462b      	mov	r3, r5
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	4639      	mov	r1, r7
 800a0b6:	f7f6 f89f 	bl	80001f8 <__aeabi_dsub>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	460b      	mov	r3, r1
 800a0be:	ec51 0b1a 	vmov	r0, r1, d10
 800a0c2:	f7f6 fce1 	bl	8000a88 <__aeabi_dcmpgt>
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	f47f adf8 	bne.w	8009cbc <__ieee754_pow+0x384>
 800a0cc:	4aa4      	ldr	r2, [pc, #656]	; (800a360 <__ieee754_pow+0xa28>)
 800a0ce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	f340 810b 	ble.w	800a2ee <__ieee754_pow+0x9b6>
 800a0d8:	151b      	asrs	r3, r3, #20
 800a0da:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a0de:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a0e2:	fa4a f303 	asr.w	r3, sl, r3
 800a0e6:	445b      	add	r3, fp
 800a0e8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a0ec:	4e9d      	ldr	r6, [pc, #628]	; (800a364 <__ieee754_pow+0xa2c>)
 800a0ee:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a0f2:	4116      	asrs	r6, r2
 800a0f4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	ea23 0106 	bic.w	r1, r3, r6
 800a0fe:	f1c2 0214 	rsb	r2, r2, #20
 800a102:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a106:	fa4a fa02 	asr.w	sl, sl, r2
 800a10a:	f1bb 0f00 	cmp.w	fp, #0
 800a10e:	4602      	mov	r2, r0
 800a110:	460b      	mov	r3, r1
 800a112:	4620      	mov	r0, r4
 800a114:	4629      	mov	r1, r5
 800a116:	bfb8      	it	lt
 800a118:	f1ca 0a00 	rsblt	sl, sl, #0
 800a11c:	f7f6 f86c 	bl	80001f8 <__aeabi_dsub>
 800a120:	ec41 0b19 	vmov	d9, r0, r1
 800a124:	4642      	mov	r2, r8
 800a126:	464b      	mov	r3, r9
 800a128:	ec51 0b19 	vmov	r0, r1, d9
 800a12c:	f7f6 f866 	bl	80001fc <__adddf3>
 800a130:	2400      	movs	r4, #0
 800a132:	a379      	add	r3, pc, #484	; (adr r3, 800a318 <__ieee754_pow+0x9e0>)
 800a134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a138:	4620      	mov	r0, r4
 800a13a:	460d      	mov	r5, r1
 800a13c:	f7f6 fa14 	bl	8000568 <__aeabi_dmul>
 800a140:	ec53 2b19 	vmov	r2, r3, d9
 800a144:	4606      	mov	r6, r0
 800a146:	460f      	mov	r7, r1
 800a148:	4620      	mov	r0, r4
 800a14a:	4629      	mov	r1, r5
 800a14c:	f7f6 f854 	bl	80001f8 <__aeabi_dsub>
 800a150:	4602      	mov	r2, r0
 800a152:	460b      	mov	r3, r1
 800a154:	4640      	mov	r0, r8
 800a156:	4649      	mov	r1, r9
 800a158:	f7f6 f84e 	bl	80001f8 <__aeabi_dsub>
 800a15c:	a370      	add	r3, pc, #448	; (adr r3, 800a320 <__ieee754_pow+0x9e8>)
 800a15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a162:	f7f6 fa01 	bl	8000568 <__aeabi_dmul>
 800a166:	a370      	add	r3, pc, #448	; (adr r3, 800a328 <__ieee754_pow+0x9f0>)
 800a168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16c:	4680      	mov	r8, r0
 800a16e:	4689      	mov	r9, r1
 800a170:	4620      	mov	r0, r4
 800a172:	4629      	mov	r1, r5
 800a174:	f7f6 f9f8 	bl	8000568 <__aeabi_dmul>
 800a178:	4602      	mov	r2, r0
 800a17a:	460b      	mov	r3, r1
 800a17c:	4640      	mov	r0, r8
 800a17e:	4649      	mov	r1, r9
 800a180:	f7f6 f83c 	bl	80001fc <__adddf3>
 800a184:	4604      	mov	r4, r0
 800a186:	460d      	mov	r5, r1
 800a188:	4602      	mov	r2, r0
 800a18a:	460b      	mov	r3, r1
 800a18c:	4630      	mov	r0, r6
 800a18e:	4639      	mov	r1, r7
 800a190:	f7f6 f834 	bl	80001fc <__adddf3>
 800a194:	4632      	mov	r2, r6
 800a196:	463b      	mov	r3, r7
 800a198:	4680      	mov	r8, r0
 800a19a:	4689      	mov	r9, r1
 800a19c:	f7f6 f82c 	bl	80001f8 <__aeabi_dsub>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	460b      	mov	r3, r1
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	4629      	mov	r1, r5
 800a1a8:	f7f6 f826 	bl	80001f8 <__aeabi_dsub>
 800a1ac:	4642      	mov	r2, r8
 800a1ae:	4606      	mov	r6, r0
 800a1b0:	460f      	mov	r7, r1
 800a1b2:	464b      	mov	r3, r9
 800a1b4:	4640      	mov	r0, r8
 800a1b6:	4649      	mov	r1, r9
 800a1b8:	f7f6 f9d6 	bl	8000568 <__aeabi_dmul>
 800a1bc:	a35c      	add	r3, pc, #368	; (adr r3, 800a330 <__ieee754_pow+0x9f8>)
 800a1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	460d      	mov	r5, r1
 800a1c6:	f7f6 f9cf 	bl	8000568 <__aeabi_dmul>
 800a1ca:	a35b      	add	r3, pc, #364	; (adr r3, 800a338 <__ieee754_pow+0xa00>)
 800a1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d0:	f7f6 f812 	bl	80001f8 <__aeabi_dsub>
 800a1d4:	4622      	mov	r2, r4
 800a1d6:	462b      	mov	r3, r5
 800a1d8:	f7f6 f9c6 	bl	8000568 <__aeabi_dmul>
 800a1dc:	a358      	add	r3, pc, #352	; (adr r3, 800a340 <__ieee754_pow+0xa08>)
 800a1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e2:	f7f6 f80b 	bl	80001fc <__adddf3>
 800a1e6:	4622      	mov	r2, r4
 800a1e8:	462b      	mov	r3, r5
 800a1ea:	f7f6 f9bd 	bl	8000568 <__aeabi_dmul>
 800a1ee:	a356      	add	r3, pc, #344	; (adr r3, 800a348 <__ieee754_pow+0xa10>)
 800a1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f4:	f7f6 f800 	bl	80001f8 <__aeabi_dsub>
 800a1f8:	4622      	mov	r2, r4
 800a1fa:	462b      	mov	r3, r5
 800a1fc:	f7f6 f9b4 	bl	8000568 <__aeabi_dmul>
 800a200:	a353      	add	r3, pc, #332	; (adr r3, 800a350 <__ieee754_pow+0xa18>)
 800a202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a206:	f7f5 fff9 	bl	80001fc <__adddf3>
 800a20a:	4622      	mov	r2, r4
 800a20c:	462b      	mov	r3, r5
 800a20e:	f7f6 f9ab 	bl	8000568 <__aeabi_dmul>
 800a212:	4602      	mov	r2, r0
 800a214:	460b      	mov	r3, r1
 800a216:	4640      	mov	r0, r8
 800a218:	4649      	mov	r1, r9
 800a21a:	f7f5 ffed 	bl	80001f8 <__aeabi_dsub>
 800a21e:	4604      	mov	r4, r0
 800a220:	460d      	mov	r5, r1
 800a222:	4602      	mov	r2, r0
 800a224:	460b      	mov	r3, r1
 800a226:	4640      	mov	r0, r8
 800a228:	4649      	mov	r1, r9
 800a22a:	f7f6 f99d 	bl	8000568 <__aeabi_dmul>
 800a22e:	2200      	movs	r2, #0
 800a230:	ec41 0b19 	vmov	d9, r0, r1
 800a234:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a238:	4620      	mov	r0, r4
 800a23a:	4629      	mov	r1, r5
 800a23c:	f7f5 ffdc 	bl	80001f8 <__aeabi_dsub>
 800a240:	4602      	mov	r2, r0
 800a242:	460b      	mov	r3, r1
 800a244:	ec51 0b19 	vmov	r0, r1, d9
 800a248:	f7f6 fab8 	bl	80007bc <__aeabi_ddiv>
 800a24c:	4632      	mov	r2, r6
 800a24e:	4604      	mov	r4, r0
 800a250:	460d      	mov	r5, r1
 800a252:	463b      	mov	r3, r7
 800a254:	4640      	mov	r0, r8
 800a256:	4649      	mov	r1, r9
 800a258:	f7f6 f986 	bl	8000568 <__aeabi_dmul>
 800a25c:	4632      	mov	r2, r6
 800a25e:	463b      	mov	r3, r7
 800a260:	f7f5 ffcc 	bl	80001fc <__adddf3>
 800a264:	4602      	mov	r2, r0
 800a266:	460b      	mov	r3, r1
 800a268:	4620      	mov	r0, r4
 800a26a:	4629      	mov	r1, r5
 800a26c:	f7f5 ffc4 	bl	80001f8 <__aeabi_dsub>
 800a270:	4642      	mov	r2, r8
 800a272:	464b      	mov	r3, r9
 800a274:	f7f5 ffc0 	bl	80001f8 <__aeabi_dsub>
 800a278:	460b      	mov	r3, r1
 800a27a:	4602      	mov	r2, r0
 800a27c:	493a      	ldr	r1, [pc, #232]	; (800a368 <__ieee754_pow+0xa30>)
 800a27e:	2000      	movs	r0, #0
 800a280:	f7f5 ffba 	bl	80001f8 <__aeabi_dsub>
 800a284:	e9cd 0100 	strd	r0, r1, [sp]
 800a288:	9b01      	ldr	r3, [sp, #4]
 800a28a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a28e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a292:	da2f      	bge.n	800a2f4 <__ieee754_pow+0x9bc>
 800a294:	4650      	mov	r0, sl
 800a296:	ed9d 0b00 	vldr	d0, [sp]
 800a29a:	f001 f919 	bl	800b4d0 <scalbn>
 800a29e:	ec51 0b10 	vmov	r0, r1, d0
 800a2a2:	ec53 2b18 	vmov	r2, r3, d8
 800a2a6:	f7ff bbe0 	b.w	8009a6a <__ieee754_pow+0x132>
 800a2aa:	4b30      	ldr	r3, [pc, #192]	; (800a36c <__ieee754_pow+0xa34>)
 800a2ac:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a2b0:	429e      	cmp	r6, r3
 800a2b2:	f77f af0b 	ble.w	800a0cc <__ieee754_pow+0x794>
 800a2b6:	4b2e      	ldr	r3, [pc, #184]	; (800a370 <__ieee754_pow+0xa38>)
 800a2b8:	440b      	add	r3, r1
 800a2ba:	4303      	orrs	r3, r0
 800a2bc:	d00b      	beq.n	800a2d6 <__ieee754_pow+0x99e>
 800a2be:	a326      	add	r3, pc, #152	; (adr r3, 800a358 <__ieee754_pow+0xa20>)
 800a2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c4:	ec51 0b18 	vmov	r0, r1, d8
 800a2c8:	f7f6 f94e 	bl	8000568 <__aeabi_dmul>
 800a2cc:	a322      	add	r3, pc, #136	; (adr r3, 800a358 <__ieee754_pow+0xa20>)
 800a2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d2:	f7ff bbca 	b.w	8009a6a <__ieee754_pow+0x132>
 800a2d6:	4622      	mov	r2, r4
 800a2d8:	462b      	mov	r3, r5
 800a2da:	f7f5 ff8d 	bl	80001f8 <__aeabi_dsub>
 800a2de:	4642      	mov	r2, r8
 800a2e0:	464b      	mov	r3, r9
 800a2e2:	f7f6 fbc7 	bl	8000a74 <__aeabi_dcmpge>
 800a2e6:	2800      	cmp	r0, #0
 800a2e8:	f43f aef0 	beq.w	800a0cc <__ieee754_pow+0x794>
 800a2ec:	e7e7      	b.n	800a2be <__ieee754_pow+0x986>
 800a2ee:	f04f 0a00 	mov.w	sl, #0
 800a2f2:	e717      	b.n	800a124 <__ieee754_pow+0x7ec>
 800a2f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	e7d2      	b.n	800a2a2 <__ieee754_pow+0x96a>
 800a2fc:	491a      	ldr	r1, [pc, #104]	; (800a368 <__ieee754_pow+0xa30>)
 800a2fe:	2000      	movs	r0, #0
 800a300:	f7ff bb9e 	b.w	8009a40 <__ieee754_pow+0x108>
 800a304:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a308:	f7ff bb9a 	b.w	8009a40 <__ieee754_pow+0x108>
 800a30c:	9000      	str	r0, [sp, #0]
 800a30e:	f7ff bb76 	b.w	80099fe <__ieee754_pow+0xc6>
 800a312:	2100      	movs	r1, #0
 800a314:	f7ff bb60 	b.w	80099d8 <__ieee754_pow+0xa0>
 800a318:	00000000 	.word	0x00000000
 800a31c:	3fe62e43 	.word	0x3fe62e43
 800a320:	fefa39ef 	.word	0xfefa39ef
 800a324:	3fe62e42 	.word	0x3fe62e42
 800a328:	0ca86c39 	.word	0x0ca86c39
 800a32c:	be205c61 	.word	0xbe205c61
 800a330:	72bea4d0 	.word	0x72bea4d0
 800a334:	3e663769 	.word	0x3e663769
 800a338:	c5d26bf1 	.word	0xc5d26bf1
 800a33c:	3ebbbd41 	.word	0x3ebbbd41
 800a340:	af25de2c 	.word	0xaf25de2c
 800a344:	3f11566a 	.word	0x3f11566a
 800a348:	16bebd93 	.word	0x16bebd93
 800a34c:	3f66c16c 	.word	0x3f66c16c
 800a350:	5555553e 	.word	0x5555553e
 800a354:	3fc55555 	.word	0x3fc55555
 800a358:	c2f8f359 	.word	0xc2f8f359
 800a35c:	01a56e1f 	.word	0x01a56e1f
 800a360:	3fe00000 	.word	0x3fe00000
 800a364:	000fffff 	.word	0x000fffff
 800a368:	3ff00000 	.word	0x3ff00000
 800a36c:	4090cbff 	.word	0x4090cbff
 800a370:	3f6f3400 	.word	0x3f6f3400
 800a374:	652b82fe 	.word	0x652b82fe
 800a378:	3c971547 	.word	0x3c971547
 800a37c:	00000000 	.word	0x00000000

0800a380 <__ieee754_rem_pio2>:
 800a380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a384:	ed2d 8b02 	vpush	{d8}
 800a388:	ec55 4b10 	vmov	r4, r5, d0
 800a38c:	4bca      	ldr	r3, [pc, #808]	; (800a6b8 <__ieee754_rem_pio2+0x338>)
 800a38e:	b08b      	sub	sp, #44	; 0x2c
 800a390:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a394:	4598      	cmp	r8, r3
 800a396:	4682      	mov	sl, r0
 800a398:	9502      	str	r5, [sp, #8]
 800a39a:	dc08      	bgt.n	800a3ae <__ieee754_rem_pio2+0x2e>
 800a39c:	2200      	movs	r2, #0
 800a39e:	2300      	movs	r3, #0
 800a3a0:	ed80 0b00 	vstr	d0, [r0]
 800a3a4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a3a8:	f04f 0b00 	mov.w	fp, #0
 800a3ac:	e028      	b.n	800a400 <__ieee754_rem_pio2+0x80>
 800a3ae:	4bc3      	ldr	r3, [pc, #780]	; (800a6bc <__ieee754_rem_pio2+0x33c>)
 800a3b0:	4598      	cmp	r8, r3
 800a3b2:	dc78      	bgt.n	800a4a6 <__ieee754_rem_pio2+0x126>
 800a3b4:	9b02      	ldr	r3, [sp, #8]
 800a3b6:	4ec2      	ldr	r6, [pc, #776]	; (800a6c0 <__ieee754_rem_pio2+0x340>)
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	ee10 0a10 	vmov	r0, s0
 800a3be:	a3b0      	add	r3, pc, #704	; (adr r3, 800a680 <__ieee754_rem_pio2+0x300>)
 800a3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c4:	4629      	mov	r1, r5
 800a3c6:	dd39      	ble.n	800a43c <__ieee754_rem_pio2+0xbc>
 800a3c8:	f7f5 ff16 	bl	80001f8 <__aeabi_dsub>
 800a3cc:	45b0      	cmp	r8, r6
 800a3ce:	4604      	mov	r4, r0
 800a3d0:	460d      	mov	r5, r1
 800a3d2:	d01b      	beq.n	800a40c <__ieee754_rem_pio2+0x8c>
 800a3d4:	a3ac      	add	r3, pc, #688	; (adr r3, 800a688 <__ieee754_rem_pio2+0x308>)
 800a3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3da:	f7f5 ff0d 	bl	80001f8 <__aeabi_dsub>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	e9ca 2300 	strd	r2, r3, [sl]
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	4629      	mov	r1, r5
 800a3ea:	f7f5 ff05 	bl	80001f8 <__aeabi_dsub>
 800a3ee:	a3a6      	add	r3, pc, #664	; (adr r3, 800a688 <__ieee754_rem_pio2+0x308>)
 800a3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f4:	f7f5 ff00 	bl	80001f8 <__aeabi_dsub>
 800a3f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a3fc:	f04f 0b01 	mov.w	fp, #1
 800a400:	4658      	mov	r0, fp
 800a402:	b00b      	add	sp, #44	; 0x2c
 800a404:	ecbd 8b02 	vpop	{d8}
 800a408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a40c:	a3a0      	add	r3, pc, #640	; (adr r3, 800a690 <__ieee754_rem_pio2+0x310>)
 800a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a412:	f7f5 fef1 	bl	80001f8 <__aeabi_dsub>
 800a416:	a3a0      	add	r3, pc, #640	; (adr r3, 800a698 <__ieee754_rem_pio2+0x318>)
 800a418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41c:	4604      	mov	r4, r0
 800a41e:	460d      	mov	r5, r1
 800a420:	f7f5 feea 	bl	80001f8 <__aeabi_dsub>
 800a424:	4602      	mov	r2, r0
 800a426:	460b      	mov	r3, r1
 800a428:	e9ca 2300 	strd	r2, r3, [sl]
 800a42c:	4620      	mov	r0, r4
 800a42e:	4629      	mov	r1, r5
 800a430:	f7f5 fee2 	bl	80001f8 <__aeabi_dsub>
 800a434:	a398      	add	r3, pc, #608	; (adr r3, 800a698 <__ieee754_rem_pio2+0x318>)
 800a436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43a:	e7db      	b.n	800a3f4 <__ieee754_rem_pio2+0x74>
 800a43c:	f7f5 fede 	bl	80001fc <__adddf3>
 800a440:	45b0      	cmp	r8, r6
 800a442:	4604      	mov	r4, r0
 800a444:	460d      	mov	r5, r1
 800a446:	d016      	beq.n	800a476 <__ieee754_rem_pio2+0xf6>
 800a448:	a38f      	add	r3, pc, #572	; (adr r3, 800a688 <__ieee754_rem_pio2+0x308>)
 800a44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44e:	f7f5 fed5 	bl	80001fc <__adddf3>
 800a452:	4602      	mov	r2, r0
 800a454:	460b      	mov	r3, r1
 800a456:	e9ca 2300 	strd	r2, r3, [sl]
 800a45a:	4620      	mov	r0, r4
 800a45c:	4629      	mov	r1, r5
 800a45e:	f7f5 fecb 	bl	80001f8 <__aeabi_dsub>
 800a462:	a389      	add	r3, pc, #548	; (adr r3, 800a688 <__ieee754_rem_pio2+0x308>)
 800a464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a468:	f7f5 fec8 	bl	80001fc <__adddf3>
 800a46c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800a470:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a474:	e7c4      	b.n	800a400 <__ieee754_rem_pio2+0x80>
 800a476:	a386      	add	r3, pc, #536	; (adr r3, 800a690 <__ieee754_rem_pio2+0x310>)
 800a478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47c:	f7f5 febe 	bl	80001fc <__adddf3>
 800a480:	a385      	add	r3, pc, #532	; (adr r3, 800a698 <__ieee754_rem_pio2+0x318>)
 800a482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a486:	4604      	mov	r4, r0
 800a488:	460d      	mov	r5, r1
 800a48a:	f7f5 feb7 	bl	80001fc <__adddf3>
 800a48e:	4602      	mov	r2, r0
 800a490:	460b      	mov	r3, r1
 800a492:	e9ca 2300 	strd	r2, r3, [sl]
 800a496:	4620      	mov	r0, r4
 800a498:	4629      	mov	r1, r5
 800a49a:	f7f5 fead 	bl	80001f8 <__aeabi_dsub>
 800a49e:	a37e      	add	r3, pc, #504	; (adr r3, 800a698 <__ieee754_rem_pio2+0x318>)
 800a4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a4:	e7e0      	b.n	800a468 <__ieee754_rem_pio2+0xe8>
 800a4a6:	4b87      	ldr	r3, [pc, #540]	; (800a6c4 <__ieee754_rem_pio2+0x344>)
 800a4a8:	4598      	cmp	r8, r3
 800a4aa:	f300 80d9 	bgt.w	800a660 <__ieee754_rem_pio2+0x2e0>
 800a4ae:	f7ff f833 	bl	8009518 <fabs>
 800a4b2:	ec55 4b10 	vmov	r4, r5, d0
 800a4b6:	ee10 0a10 	vmov	r0, s0
 800a4ba:	a379      	add	r3, pc, #484	; (adr r3, 800a6a0 <__ieee754_rem_pio2+0x320>)
 800a4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c0:	4629      	mov	r1, r5
 800a4c2:	f7f6 f851 	bl	8000568 <__aeabi_dmul>
 800a4c6:	4b80      	ldr	r3, [pc, #512]	; (800a6c8 <__ieee754_rem_pio2+0x348>)
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f7f5 fe97 	bl	80001fc <__adddf3>
 800a4ce:	f7f6 fafb 	bl	8000ac8 <__aeabi_d2iz>
 800a4d2:	4683      	mov	fp, r0
 800a4d4:	f7f5 ffde 	bl	8000494 <__aeabi_i2d>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	460b      	mov	r3, r1
 800a4dc:	ec43 2b18 	vmov	d8, r2, r3
 800a4e0:	a367      	add	r3, pc, #412	; (adr r3, 800a680 <__ieee754_rem_pio2+0x300>)
 800a4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e6:	f7f6 f83f 	bl	8000568 <__aeabi_dmul>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	4629      	mov	r1, r5
 800a4f2:	f7f5 fe81 	bl	80001f8 <__aeabi_dsub>
 800a4f6:	a364      	add	r3, pc, #400	; (adr r3, 800a688 <__ieee754_rem_pio2+0x308>)
 800a4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fc:	4606      	mov	r6, r0
 800a4fe:	460f      	mov	r7, r1
 800a500:	ec51 0b18 	vmov	r0, r1, d8
 800a504:	f7f6 f830 	bl	8000568 <__aeabi_dmul>
 800a508:	f1bb 0f1f 	cmp.w	fp, #31
 800a50c:	4604      	mov	r4, r0
 800a50e:	460d      	mov	r5, r1
 800a510:	dc0d      	bgt.n	800a52e <__ieee754_rem_pio2+0x1ae>
 800a512:	4b6e      	ldr	r3, [pc, #440]	; (800a6cc <__ieee754_rem_pio2+0x34c>)
 800a514:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800a518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a51c:	4543      	cmp	r3, r8
 800a51e:	d006      	beq.n	800a52e <__ieee754_rem_pio2+0x1ae>
 800a520:	4622      	mov	r2, r4
 800a522:	462b      	mov	r3, r5
 800a524:	4630      	mov	r0, r6
 800a526:	4639      	mov	r1, r7
 800a528:	f7f5 fe66 	bl	80001f8 <__aeabi_dsub>
 800a52c:	e00f      	b.n	800a54e <__ieee754_rem_pio2+0x1ce>
 800a52e:	462b      	mov	r3, r5
 800a530:	4622      	mov	r2, r4
 800a532:	4630      	mov	r0, r6
 800a534:	4639      	mov	r1, r7
 800a536:	f7f5 fe5f 	bl	80001f8 <__aeabi_dsub>
 800a53a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a53e:	9303      	str	r3, [sp, #12]
 800a540:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a544:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a548:	f1b8 0f10 	cmp.w	r8, #16
 800a54c:	dc02      	bgt.n	800a554 <__ieee754_rem_pio2+0x1d4>
 800a54e:	e9ca 0100 	strd	r0, r1, [sl]
 800a552:	e039      	b.n	800a5c8 <__ieee754_rem_pio2+0x248>
 800a554:	a34e      	add	r3, pc, #312	; (adr r3, 800a690 <__ieee754_rem_pio2+0x310>)
 800a556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55a:	ec51 0b18 	vmov	r0, r1, d8
 800a55e:	f7f6 f803 	bl	8000568 <__aeabi_dmul>
 800a562:	4604      	mov	r4, r0
 800a564:	460d      	mov	r5, r1
 800a566:	4602      	mov	r2, r0
 800a568:	460b      	mov	r3, r1
 800a56a:	4630      	mov	r0, r6
 800a56c:	4639      	mov	r1, r7
 800a56e:	f7f5 fe43 	bl	80001f8 <__aeabi_dsub>
 800a572:	4602      	mov	r2, r0
 800a574:	460b      	mov	r3, r1
 800a576:	4680      	mov	r8, r0
 800a578:	4689      	mov	r9, r1
 800a57a:	4630      	mov	r0, r6
 800a57c:	4639      	mov	r1, r7
 800a57e:	f7f5 fe3b 	bl	80001f8 <__aeabi_dsub>
 800a582:	4622      	mov	r2, r4
 800a584:	462b      	mov	r3, r5
 800a586:	f7f5 fe37 	bl	80001f8 <__aeabi_dsub>
 800a58a:	a343      	add	r3, pc, #268	; (adr r3, 800a698 <__ieee754_rem_pio2+0x318>)
 800a58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a590:	4604      	mov	r4, r0
 800a592:	460d      	mov	r5, r1
 800a594:	ec51 0b18 	vmov	r0, r1, d8
 800a598:	f7f5 ffe6 	bl	8000568 <__aeabi_dmul>
 800a59c:	4622      	mov	r2, r4
 800a59e:	462b      	mov	r3, r5
 800a5a0:	f7f5 fe2a 	bl	80001f8 <__aeabi_dsub>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	460d      	mov	r5, r1
 800a5ac:	4640      	mov	r0, r8
 800a5ae:	4649      	mov	r1, r9
 800a5b0:	f7f5 fe22 	bl	80001f8 <__aeabi_dsub>
 800a5b4:	9a03      	ldr	r2, [sp, #12]
 800a5b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a5ba:	1ad3      	subs	r3, r2, r3
 800a5bc:	2b31      	cmp	r3, #49	; 0x31
 800a5be:	dc24      	bgt.n	800a60a <__ieee754_rem_pio2+0x28a>
 800a5c0:	e9ca 0100 	strd	r0, r1, [sl]
 800a5c4:	4646      	mov	r6, r8
 800a5c6:	464f      	mov	r7, r9
 800a5c8:	e9da 8900 	ldrd	r8, r9, [sl]
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	4642      	mov	r2, r8
 800a5d0:	464b      	mov	r3, r9
 800a5d2:	4639      	mov	r1, r7
 800a5d4:	f7f5 fe10 	bl	80001f8 <__aeabi_dsub>
 800a5d8:	462b      	mov	r3, r5
 800a5da:	4622      	mov	r2, r4
 800a5dc:	f7f5 fe0c 	bl	80001f8 <__aeabi_dsub>
 800a5e0:	9b02      	ldr	r3, [sp, #8]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a5e8:	f6bf af0a 	bge.w	800a400 <__ieee754_rem_pio2+0x80>
 800a5ec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a5f0:	f8ca 3004 	str.w	r3, [sl, #4]
 800a5f4:	f8ca 8000 	str.w	r8, [sl]
 800a5f8:	f8ca 0008 	str.w	r0, [sl, #8]
 800a5fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a600:	f8ca 300c 	str.w	r3, [sl, #12]
 800a604:	f1cb 0b00 	rsb	fp, fp, #0
 800a608:	e6fa      	b.n	800a400 <__ieee754_rem_pio2+0x80>
 800a60a:	a327      	add	r3, pc, #156	; (adr r3, 800a6a8 <__ieee754_rem_pio2+0x328>)
 800a60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a610:	ec51 0b18 	vmov	r0, r1, d8
 800a614:	f7f5 ffa8 	bl	8000568 <__aeabi_dmul>
 800a618:	4604      	mov	r4, r0
 800a61a:	460d      	mov	r5, r1
 800a61c:	4602      	mov	r2, r0
 800a61e:	460b      	mov	r3, r1
 800a620:	4640      	mov	r0, r8
 800a622:	4649      	mov	r1, r9
 800a624:	f7f5 fde8 	bl	80001f8 <__aeabi_dsub>
 800a628:	4602      	mov	r2, r0
 800a62a:	460b      	mov	r3, r1
 800a62c:	4606      	mov	r6, r0
 800a62e:	460f      	mov	r7, r1
 800a630:	4640      	mov	r0, r8
 800a632:	4649      	mov	r1, r9
 800a634:	f7f5 fde0 	bl	80001f8 <__aeabi_dsub>
 800a638:	4622      	mov	r2, r4
 800a63a:	462b      	mov	r3, r5
 800a63c:	f7f5 fddc 	bl	80001f8 <__aeabi_dsub>
 800a640:	a31b      	add	r3, pc, #108	; (adr r3, 800a6b0 <__ieee754_rem_pio2+0x330>)
 800a642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a646:	4604      	mov	r4, r0
 800a648:	460d      	mov	r5, r1
 800a64a:	ec51 0b18 	vmov	r0, r1, d8
 800a64e:	f7f5 ff8b 	bl	8000568 <__aeabi_dmul>
 800a652:	4622      	mov	r2, r4
 800a654:	462b      	mov	r3, r5
 800a656:	f7f5 fdcf 	bl	80001f8 <__aeabi_dsub>
 800a65a:	4604      	mov	r4, r0
 800a65c:	460d      	mov	r5, r1
 800a65e:	e75f      	b.n	800a520 <__ieee754_rem_pio2+0x1a0>
 800a660:	4b1b      	ldr	r3, [pc, #108]	; (800a6d0 <__ieee754_rem_pio2+0x350>)
 800a662:	4598      	cmp	r8, r3
 800a664:	dd36      	ble.n	800a6d4 <__ieee754_rem_pio2+0x354>
 800a666:	ee10 2a10 	vmov	r2, s0
 800a66a:	462b      	mov	r3, r5
 800a66c:	4620      	mov	r0, r4
 800a66e:	4629      	mov	r1, r5
 800a670:	f7f5 fdc2 	bl	80001f8 <__aeabi_dsub>
 800a674:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a678:	e9ca 0100 	strd	r0, r1, [sl]
 800a67c:	e694      	b.n	800a3a8 <__ieee754_rem_pio2+0x28>
 800a67e:	bf00      	nop
 800a680:	54400000 	.word	0x54400000
 800a684:	3ff921fb 	.word	0x3ff921fb
 800a688:	1a626331 	.word	0x1a626331
 800a68c:	3dd0b461 	.word	0x3dd0b461
 800a690:	1a600000 	.word	0x1a600000
 800a694:	3dd0b461 	.word	0x3dd0b461
 800a698:	2e037073 	.word	0x2e037073
 800a69c:	3ba3198a 	.word	0x3ba3198a
 800a6a0:	6dc9c883 	.word	0x6dc9c883
 800a6a4:	3fe45f30 	.word	0x3fe45f30
 800a6a8:	2e000000 	.word	0x2e000000
 800a6ac:	3ba3198a 	.word	0x3ba3198a
 800a6b0:	252049c1 	.word	0x252049c1
 800a6b4:	397b839a 	.word	0x397b839a
 800a6b8:	3fe921fb 	.word	0x3fe921fb
 800a6bc:	4002d97b 	.word	0x4002d97b
 800a6c0:	3ff921fb 	.word	0x3ff921fb
 800a6c4:	413921fb 	.word	0x413921fb
 800a6c8:	3fe00000 	.word	0x3fe00000
 800a6cc:	0800b6f0 	.word	0x0800b6f0
 800a6d0:	7fefffff 	.word	0x7fefffff
 800a6d4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a6d8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a6dc:	ee10 0a10 	vmov	r0, s0
 800a6e0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a6e4:	ee10 6a10 	vmov	r6, s0
 800a6e8:	460f      	mov	r7, r1
 800a6ea:	f7f6 f9ed 	bl	8000ac8 <__aeabi_d2iz>
 800a6ee:	f7f5 fed1 	bl	8000494 <__aeabi_i2d>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	4630      	mov	r0, r6
 800a6f8:	4639      	mov	r1, r7
 800a6fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a6fe:	f7f5 fd7b 	bl	80001f8 <__aeabi_dsub>
 800a702:	4b22      	ldr	r3, [pc, #136]	; (800a78c <__ieee754_rem_pio2+0x40c>)
 800a704:	2200      	movs	r2, #0
 800a706:	f7f5 ff2f 	bl	8000568 <__aeabi_dmul>
 800a70a:	460f      	mov	r7, r1
 800a70c:	4606      	mov	r6, r0
 800a70e:	f7f6 f9db 	bl	8000ac8 <__aeabi_d2iz>
 800a712:	f7f5 febf 	bl	8000494 <__aeabi_i2d>
 800a716:	4602      	mov	r2, r0
 800a718:	460b      	mov	r3, r1
 800a71a:	4630      	mov	r0, r6
 800a71c:	4639      	mov	r1, r7
 800a71e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a722:	f7f5 fd69 	bl	80001f8 <__aeabi_dsub>
 800a726:	4b19      	ldr	r3, [pc, #100]	; (800a78c <__ieee754_rem_pio2+0x40c>)
 800a728:	2200      	movs	r2, #0
 800a72a:	f7f5 ff1d 	bl	8000568 <__aeabi_dmul>
 800a72e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a732:	ad04      	add	r5, sp, #16
 800a734:	f04f 0803 	mov.w	r8, #3
 800a738:	46a9      	mov	r9, r5
 800a73a:	2600      	movs	r6, #0
 800a73c:	2700      	movs	r7, #0
 800a73e:	4632      	mov	r2, r6
 800a740:	463b      	mov	r3, r7
 800a742:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a746:	46c3      	mov	fp, r8
 800a748:	3d08      	subs	r5, #8
 800a74a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a74e:	f7f6 f973 	bl	8000a38 <__aeabi_dcmpeq>
 800a752:	2800      	cmp	r0, #0
 800a754:	d1f3      	bne.n	800a73e <__ieee754_rem_pio2+0x3be>
 800a756:	4b0e      	ldr	r3, [pc, #56]	; (800a790 <__ieee754_rem_pio2+0x410>)
 800a758:	9301      	str	r3, [sp, #4]
 800a75a:	2302      	movs	r3, #2
 800a75c:	9300      	str	r3, [sp, #0]
 800a75e:	4622      	mov	r2, r4
 800a760:	465b      	mov	r3, fp
 800a762:	4651      	mov	r1, sl
 800a764:	4648      	mov	r0, r9
 800a766:	f000 f993 	bl	800aa90 <__kernel_rem_pio2>
 800a76a:	9b02      	ldr	r3, [sp, #8]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	4683      	mov	fp, r0
 800a770:	f6bf ae46 	bge.w	800a400 <__ieee754_rem_pio2+0x80>
 800a774:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a778:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a77c:	f8ca 3004 	str.w	r3, [sl, #4]
 800a780:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a784:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a788:	e73a      	b.n	800a600 <__ieee754_rem_pio2+0x280>
 800a78a:	bf00      	nop
 800a78c:	41700000 	.word	0x41700000
 800a790:	0800b770 	.word	0x0800b770

0800a794 <__ieee754_sqrt>:
 800a794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a798:	ec55 4b10 	vmov	r4, r5, d0
 800a79c:	4e56      	ldr	r6, [pc, #344]	; (800a8f8 <__ieee754_sqrt+0x164>)
 800a79e:	43ae      	bics	r6, r5
 800a7a0:	ee10 0a10 	vmov	r0, s0
 800a7a4:	ee10 3a10 	vmov	r3, s0
 800a7a8:	4629      	mov	r1, r5
 800a7aa:	462a      	mov	r2, r5
 800a7ac:	d110      	bne.n	800a7d0 <__ieee754_sqrt+0x3c>
 800a7ae:	ee10 2a10 	vmov	r2, s0
 800a7b2:	462b      	mov	r3, r5
 800a7b4:	f7f5 fed8 	bl	8000568 <__aeabi_dmul>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	4620      	mov	r0, r4
 800a7be:	4629      	mov	r1, r5
 800a7c0:	f7f5 fd1c 	bl	80001fc <__adddf3>
 800a7c4:	4604      	mov	r4, r0
 800a7c6:	460d      	mov	r5, r1
 800a7c8:	ec45 4b10 	vmov	d0, r4, r5
 800a7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7d0:	2d00      	cmp	r5, #0
 800a7d2:	dc10      	bgt.n	800a7f6 <__ieee754_sqrt+0x62>
 800a7d4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a7d8:	4330      	orrs	r0, r6
 800a7da:	d0f5      	beq.n	800a7c8 <__ieee754_sqrt+0x34>
 800a7dc:	b15d      	cbz	r5, 800a7f6 <__ieee754_sqrt+0x62>
 800a7de:	ee10 2a10 	vmov	r2, s0
 800a7e2:	462b      	mov	r3, r5
 800a7e4:	ee10 0a10 	vmov	r0, s0
 800a7e8:	f7f5 fd06 	bl	80001f8 <__aeabi_dsub>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	f7f5 ffe4 	bl	80007bc <__aeabi_ddiv>
 800a7f4:	e7e6      	b.n	800a7c4 <__ieee754_sqrt+0x30>
 800a7f6:	1509      	asrs	r1, r1, #20
 800a7f8:	d076      	beq.n	800a8e8 <__ieee754_sqrt+0x154>
 800a7fa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a7fe:	07ce      	lsls	r6, r1, #31
 800a800:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a804:	bf5e      	ittt	pl
 800a806:	0fda      	lsrpl	r2, r3, #31
 800a808:	005b      	lslpl	r3, r3, #1
 800a80a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a80e:	0fda      	lsrs	r2, r3, #31
 800a810:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a814:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a818:	2000      	movs	r0, #0
 800a81a:	106d      	asrs	r5, r5, #1
 800a81c:	005b      	lsls	r3, r3, #1
 800a81e:	f04f 0e16 	mov.w	lr, #22
 800a822:	4684      	mov	ip, r0
 800a824:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a828:	eb0c 0401 	add.w	r4, ip, r1
 800a82c:	4294      	cmp	r4, r2
 800a82e:	bfde      	ittt	le
 800a830:	1b12      	suble	r2, r2, r4
 800a832:	eb04 0c01 	addle.w	ip, r4, r1
 800a836:	1840      	addle	r0, r0, r1
 800a838:	0052      	lsls	r2, r2, #1
 800a83a:	f1be 0e01 	subs.w	lr, lr, #1
 800a83e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a842:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a846:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a84a:	d1ed      	bne.n	800a828 <__ieee754_sqrt+0x94>
 800a84c:	4671      	mov	r1, lr
 800a84e:	2720      	movs	r7, #32
 800a850:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a854:	4562      	cmp	r2, ip
 800a856:	eb04 060e 	add.w	r6, r4, lr
 800a85a:	dc02      	bgt.n	800a862 <__ieee754_sqrt+0xce>
 800a85c:	d113      	bne.n	800a886 <__ieee754_sqrt+0xf2>
 800a85e:	429e      	cmp	r6, r3
 800a860:	d811      	bhi.n	800a886 <__ieee754_sqrt+0xf2>
 800a862:	2e00      	cmp	r6, #0
 800a864:	eb06 0e04 	add.w	lr, r6, r4
 800a868:	da43      	bge.n	800a8f2 <__ieee754_sqrt+0x15e>
 800a86a:	f1be 0f00 	cmp.w	lr, #0
 800a86e:	db40      	blt.n	800a8f2 <__ieee754_sqrt+0x15e>
 800a870:	f10c 0801 	add.w	r8, ip, #1
 800a874:	eba2 020c 	sub.w	r2, r2, ip
 800a878:	429e      	cmp	r6, r3
 800a87a:	bf88      	it	hi
 800a87c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800a880:	1b9b      	subs	r3, r3, r6
 800a882:	4421      	add	r1, r4
 800a884:	46c4      	mov	ip, r8
 800a886:	0052      	lsls	r2, r2, #1
 800a888:	3f01      	subs	r7, #1
 800a88a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a88e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a892:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a896:	d1dd      	bne.n	800a854 <__ieee754_sqrt+0xc0>
 800a898:	4313      	orrs	r3, r2
 800a89a:	d006      	beq.n	800a8aa <__ieee754_sqrt+0x116>
 800a89c:	1c4c      	adds	r4, r1, #1
 800a89e:	bf13      	iteet	ne
 800a8a0:	3101      	addne	r1, #1
 800a8a2:	3001      	addeq	r0, #1
 800a8a4:	4639      	moveq	r1, r7
 800a8a6:	f021 0101 	bicne.w	r1, r1, #1
 800a8aa:	1043      	asrs	r3, r0, #1
 800a8ac:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a8b0:	0849      	lsrs	r1, r1, #1
 800a8b2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a8b6:	07c2      	lsls	r2, r0, #31
 800a8b8:	bf48      	it	mi
 800a8ba:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a8be:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a8c2:	460c      	mov	r4, r1
 800a8c4:	463d      	mov	r5, r7
 800a8c6:	e77f      	b.n	800a7c8 <__ieee754_sqrt+0x34>
 800a8c8:	0ada      	lsrs	r2, r3, #11
 800a8ca:	3815      	subs	r0, #21
 800a8cc:	055b      	lsls	r3, r3, #21
 800a8ce:	2a00      	cmp	r2, #0
 800a8d0:	d0fa      	beq.n	800a8c8 <__ieee754_sqrt+0x134>
 800a8d2:	02d7      	lsls	r7, r2, #11
 800a8d4:	d50a      	bpl.n	800a8ec <__ieee754_sqrt+0x158>
 800a8d6:	f1c1 0420 	rsb	r4, r1, #32
 800a8da:	fa23 f404 	lsr.w	r4, r3, r4
 800a8de:	1e4d      	subs	r5, r1, #1
 800a8e0:	408b      	lsls	r3, r1
 800a8e2:	4322      	orrs	r2, r4
 800a8e4:	1b41      	subs	r1, r0, r5
 800a8e6:	e788      	b.n	800a7fa <__ieee754_sqrt+0x66>
 800a8e8:	4608      	mov	r0, r1
 800a8ea:	e7f0      	b.n	800a8ce <__ieee754_sqrt+0x13a>
 800a8ec:	0052      	lsls	r2, r2, #1
 800a8ee:	3101      	adds	r1, #1
 800a8f0:	e7ef      	b.n	800a8d2 <__ieee754_sqrt+0x13e>
 800a8f2:	46e0      	mov	r8, ip
 800a8f4:	e7be      	b.n	800a874 <__ieee754_sqrt+0xe0>
 800a8f6:	bf00      	nop
 800a8f8:	7ff00000 	.word	0x7ff00000
 800a8fc:	00000000 	.word	0x00000000

0800a900 <__kernel_cos>:
 800a900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a904:	ec57 6b10 	vmov	r6, r7, d0
 800a908:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a90c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a910:	ed8d 1b00 	vstr	d1, [sp]
 800a914:	da07      	bge.n	800a926 <__kernel_cos+0x26>
 800a916:	ee10 0a10 	vmov	r0, s0
 800a91a:	4639      	mov	r1, r7
 800a91c:	f7f6 f8d4 	bl	8000ac8 <__aeabi_d2iz>
 800a920:	2800      	cmp	r0, #0
 800a922:	f000 8088 	beq.w	800aa36 <__kernel_cos+0x136>
 800a926:	4632      	mov	r2, r6
 800a928:	463b      	mov	r3, r7
 800a92a:	4630      	mov	r0, r6
 800a92c:	4639      	mov	r1, r7
 800a92e:	f7f5 fe1b 	bl	8000568 <__aeabi_dmul>
 800a932:	4b51      	ldr	r3, [pc, #324]	; (800aa78 <__kernel_cos+0x178>)
 800a934:	2200      	movs	r2, #0
 800a936:	4604      	mov	r4, r0
 800a938:	460d      	mov	r5, r1
 800a93a:	f7f5 fe15 	bl	8000568 <__aeabi_dmul>
 800a93e:	a340      	add	r3, pc, #256	; (adr r3, 800aa40 <__kernel_cos+0x140>)
 800a940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a944:	4682      	mov	sl, r0
 800a946:	468b      	mov	fp, r1
 800a948:	4620      	mov	r0, r4
 800a94a:	4629      	mov	r1, r5
 800a94c:	f7f5 fe0c 	bl	8000568 <__aeabi_dmul>
 800a950:	a33d      	add	r3, pc, #244	; (adr r3, 800aa48 <__kernel_cos+0x148>)
 800a952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a956:	f7f5 fc51 	bl	80001fc <__adddf3>
 800a95a:	4622      	mov	r2, r4
 800a95c:	462b      	mov	r3, r5
 800a95e:	f7f5 fe03 	bl	8000568 <__aeabi_dmul>
 800a962:	a33b      	add	r3, pc, #236	; (adr r3, 800aa50 <__kernel_cos+0x150>)
 800a964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a968:	f7f5 fc46 	bl	80001f8 <__aeabi_dsub>
 800a96c:	4622      	mov	r2, r4
 800a96e:	462b      	mov	r3, r5
 800a970:	f7f5 fdfa 	bl	8000568 <__aeabi_dmul>
 800a974:	a338      	add	r3, pc, #224	; (adr r3, 800aa58 <__kernel_cos+0x158>)
 800a976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97a:	f7f5 fc3f 	bl	80001fc <__adddf3>
 800a97e:	4622      	mov	r2, r4
 800a980:	462b      	mov	r3, r5
 800a982:	f7f5 fdf1 	bl	8000568 <__aeabi_dmul>
 800a986:	a336      	add	r3, pc, #216	; (adr r3, 800aa60 <__kernel_cos+0x160>)
 800a988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98c:	f7f5 fc34 	bl	80001f8 <__aeabi_dsub>
 800a990:	4622      	mov	r2, r4
 800a992:	462b      	mov	r3, r5
 800a994:	f7f5 fde8 	bl	8000568 <__aeabi_dmul>
 800a998:	a333      	add	r3, pc, #204	; (adr r3, 800aa68 <__kernel_cos+0x168>)
 800a99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99e:	f7f5 fc2d 	bl	80001fc <__adddf3>
 800a9a2:	4622      	mov	r2, r4
 800a9a4:	462b      	mov	r3, r5
 800a9a6:	f7f5 fddf 	bl	8000568 <__aeabi_dmul>
 800a9aa:	4622      	mov	r2, r4
 800a9ac:	462b      	mov	r3, r5
 800a9ae:	f7f5 fddb 	bl	8000568 <__aeabi_dmul>
 800a9b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	460d      	mov	r5, r1
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	4639      	mov	r1, r7
 800a9be:	f7f5 fdd3 	bl	8000568 <__aeabi_dmul>
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	4629      	mov	r1, r5
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f7f5 fc15 	bl	80001f8 <__aeabi_dsub>
 800a9ce:	4b2b      	ldr	r3, [pc, #172]	; (800aa7c <__kernel_cos+0x17c>)
 800a9d0:	4598      	cmp	r8, r3
 800a9d2:	4606      	mov	r6, r0
 800a9d4:	460f      	mov	r7, r1
 800a9d6:	dc10      	bgt.n	800a9fa <__kernel_cos+0xfa>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	460b      	mov	r3, r1
 800a9dc:	4650      	mov	r0, sl
 800a9de:	4659      	mov	r1, fp
 800a9e0:	f7f5 fc0a 	bl	80001f8 <__aeabi_dsub>
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	4926      	ldr	r1, [pc, #152]	; (800aa80 <__kernel_cos+0x180>)
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	2000      	movs	r0, #0
 800a9ec:	f7f5 fc04 	bl	80001f8 <__aeabi_dsub>
 800a9f0:	ec41 0b10 	vmov	d0, r0, r1
 800a9f4:	b003      	add	sp, #12
 800a9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9fa:	4b22      	ldr	r3, [pc, #136]	; (800aa84 <__kernel_cos+0x184>)
 800a9fc:	4920      	ldr	r1, [pc, #128]	; (800aa80 <__kernel_cos+0x180>)
 800a9fe:	4598      	cmp	r8, r3
 800aa00:	bfcc      	ite	gt
 800aa02:	4d21      	ldrgt	r5, [pc, #132]	; (800aa88 <__kernel_cos+0x188>)
 800aa04:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800aa08:	2400      	movs	r4, #0
 800aa0a:	4622      	mov	r2, r4
 800aa0c:	462b      	mov	r3, r5
 800aa0e:	2000      	movs	r0, #0
 800aa10:	f7f5 fbf2 	bl	80001f8 <__aeabi_dsub>
 800aa14:	4622      	mov	r2, r4
 800aa16:	4680      	mov	r8, r0
 800aa18:	4689      	mov	r9, r1
 800aa1a:	462b      	mov	r3, r5
 800aa1c:	4650      	mov	r0, sl
 800aa1e:	4659      	mov	r1, fp
 800aa20:	f7f5 fbea 	bl	80001f8 <__aeabi_dsub>
 800aa24:	4632      	mov	r2, r6
 800aa26:	463b      	mov	r3, r7
 800aa28:	f7f5 fbe6 	bl	80001f8 <__aeabi_dsub>
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	460b      	mov	r3, r1
 800aa30:	4640      	mov	r0, r8
 800aa32:	4649      	mov	r1, r9
 800aa34:	e7da      	b.n	800a9ec <__kernel_cos+0xec>
 800aa36:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800aa70 <__kernel_cos+0x170>
 800aa3a:	e7db      	b.n	800a9f4 <__kernel_cos+0xf4>
 800aa3c:	f3af 8000 	nop.w
 800aa40:	be8838d4 	.word	0xbe8838d4
 800aa44:	bda8fae9 	.word	0xbda8fae9
 800aa48:	bdb4b1c4 	.word	0xbdb4b1c4
 800aa4c:	3e21ee9e 	.word	0x3e21ee9e
 800aa50:	809c52ad 	.word	0x809c52ad
 800aa54:	3e927e4f 	.word	0x3e927e4f
 800aa58:	19cb1590 	.word	0x19cb1590
 800aa5c:	3efa01a0 	.word	0x3efa01a0
 800aa60:	16c15177 	.word	0x16c15177
 800aa64:	3f56c16c 	.word	0x3f56c16c
 800aa68:	5555554c 	.word	0x5555554c
 800aa6c:	3fa55555 	.word	0x3fa55555
 800aa70:	00000000 	.word	0x00000000
 800aa74:	3ff00000 	.word	0x3ff00000
 800aa78:	3fe00000 	.word	0x3fe00000
 800aa7c:	3fd33332 	.word	0x3fd33332
 800aa80:	3ff00000 	.word	0x3ff00000
 800aa84:	3fe90000 	.word	0x3fe90000
 800aa88:	3fd20000 	.word	0x3fd20000
 800aa8c:	00000000 	.word	0x00000000

0800aa90 <__kernel_rem_pio2>:
 800aa90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa94:	ed2d 8b02 	vpush	{d8}
 800aa98:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800aa9c:	f112 0f14 	cmn.w	r2, #20
 800aaa0:	9308      	str	r3, [sp, #32]
 800aaa2:	9101      	str	r1, [sp, #4]
 800aaa4:	4bc6      	ldr	r3, [pc, #792]	; (800adc0 <__kernel_rem_pio2+0x330>)
 800aaa6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800aaa8:	9009      	str	r0, [sp, #36]	; 0x24
 800aaaa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aaae:	9304      	str	r3, [sp, #16]
 800aab0:	9b08      	ldr	r3, [sp, #32]
 800aab2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800aab6:	bfa8      	it	ge
 800aab8:	1ed4      	subge	r4, r2, #3
 800aaba:	9306      	str	r3, [sp, #24]
 800aabc:	bfb2      	itee	lt
 800aabe:	2400      	movlt	r4, #0
 800aac0:	2318      	movge	r3, #24
 800aac2:	fb94 f4f3 	sdivge	r4, r4, r3
 800aac6:	f06f 0317 	mvn.w	r3, #23
 800aaca:	fb04 3303 	mla	r3, r4, r3, r3
 800aace:	eb03 0a02 	add.w	sl, r3, r2
 800aad2:	9b04      	ldr	r3, [sp, #16]
 800aad4:	9a06      	ldr	r2, [sp, #24]
 800aad6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800adb0 <__kernel_rem_pio2+0x320>
 800aada:	eb03 0802 	add.w	r8, r3, r2
 800aade:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800aae0:	1aa7      	subs	r7, r4, r2
 800aae2:	ae20      	add	r6, sp, #128	; 0x80
 800aae4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800aae8:	2500      	movs	r5, #0
 800aaea:	4545      	cmp	r5, r8
 800aaec:	dd18      	ble.n	800ab20 <__kernel_rem_pio2+0x90>
 800aaee:	9b08      	ldr	r3, [sp, #32]
 800aaf0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800aaf4:	aa20      	add	r2, sp, #128	; 0x80
 800aaf6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800adb0 <__kernel_rem_pio2+0x320>
 800aafa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800aafe:	f1c3 0301 	rsb	r3, r3, #1
 800ab02:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800ab06:	9307      	str	r3, [sp, #28]
 800ab08:	9b07      	ldr	r3, [sp, #28]
 800ab0a:	9a04      	ldr	r2, [sp, #16]
 800ab0c:	4443      	add	r3, r8
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	db2f      	blt.n	800ab72 <__kernel_rem_pio2+0xe2>
 800ab12:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ab16:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ab1a:	462f      	mov	r7, r5
 800ab1c:	2600      	movs	r6, #0
 800ab1e:	e01b      	b.n	800ab58 <__kernel_rem_pio2+0xc8>
 800ab20:	42ef      	cmn	r7, r5
 800ab22:	d407      	bmi.n	800ab34 <__kernel_rem_pio2+0xa4>
 800ab24:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ab28:	f7f5 fcb4 	bl	8000494 <__aeabi_i2d>
 800ab2c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ab30:	3501      	adds	r5, #1
 800ab32:	e7da      	b.n	800aaea <__kernel_rem_pio2+0x5a>
 800ab34:	ec51 0b18 	vmov	r0, r1, d8
 800ab38:	e7f8      	b.n	800ab2c <__kernel_rem_pio2+0x9c>
 800ab3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab3e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ab42:	f7f5 fd11 	bl	8000568 <__aeabi_dmul>
 800ab46:	4602      	mov	r2, r0
 800ab48:	460b      	mov	r3, r1
 800ab4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab4e:	f7f5 fb55 	bl	80001fc <__adddf3>
 800ab52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab56:	3601      	adds	r6, #1
 800ab58:	9b06      	ldr	r3, [sp, #24]
 800ab5a:	429e      	cmp	r6, r3
 800ab5c:	f1a7 0708 	sub.w	r7, r7, #8
 800ab60:	ddeb      	ble.n	800ab3a <__kernel_rem_pio2+0xaa>
 800ab62:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab66:	3508      	adds	r5, #8
 800ab68:	ecab 7b02 	vstmia	fp!, {d7}
 800ab6c:	f108 0801 	add.w	r8, r8, #1
 800ab70:	e7ca      	b.n	800ab08 <__kernel_rem_pio2+0x78>
 800ab72:	9b04      	ldr	r3, [sp, #16]
 800ab74:	aa0c      	add	r2, sp, #48	; 0x30
 800ab76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab7a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab7c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ab7e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ab82:	9c04      	ldr	r4, [sp, #16]
 800ab84:	930a      	str	r3, [sp, #40]	; 0x28
 800ab86:	ab98      	add	r3, sp, #608	; 0x260
 800ab88:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab8c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ab90:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800ab94:	f8cd b008 	str.w	fp, [sp, #8]
 800ab98:	4625      	mov	r5, r4
 800ab9a:	2d00      	cmp	r5, #0
 800ab9c:	dc78      	bgt.n	800ac90 <__kernel_rem_pio2+0x200>
 800ab9e:	ec47 6b10 	vmov	d0, r6, r7
 800aba2:	4650      	mov	r0, sl
 800aba4:	f000 fc94 	bl	800b4d0 <scalbn>
 800aba8:	ec57 6b10 	vmov	r6, r7, d0
 800abac:	2200      	movs	r2, #0
 800abae:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800abb2:	ee10 0a10 	vmov	r0, s0
 800abb6:	4639      	mov	r1, r7
 800abb8:	f7f5 fcd6 	bl	8000568 <__aeabi_dmul>
 800abbc:	ec41 0b10 	vmov	d0, r0, r1
 800abc0:	f000 fb72 	bl	800b2a8 <floor>
 800abc4:	4b7f      	ldr	r3, [pc, #508]	; (800adc4 <__kernel_rem_pio2+0x334>)
 800abc6:	ec51 0b10 	vmov	r0, r1, d0
 800abca:	2200      	movs	r2, #0
 800abcc:	f7f5 fccc 	bl	8000568 <__aeabi_dmul>
 800abd0:	4602      	mov	r2, r0
 800abd2:	460b      	mov	r3, r1
 800abd4:	4630      	mov	r0, r6
 800abd6:	4639      	mov	r1, r7
 800abd8:	f7f5 fb0e 	bl	80001f8 <__aeabi_dsub>
 800abdc:	460f      	mov	r7, r1
 800abde:	4606      	mov	r6, r0
 800abe0:	f7f5 ff72 	bl	8000ac8 <__aeabi_d2iz>
 800abe4:	9007      	str	r0, [sp, #28]
 800abe6:	f7f5 fc55 	bl	8000494 <__aeabi_i2d>
 800abea:	4602      	mov	r2, r0
 800abec:	460b      	mov	r3, r1
 800abee:	4630      	mov	r0, r6
 800abf0:	4639      	mov	r1, r7
 800abf2:	f7f5 fb01 	bl	80001f8 <__aeabi_dsub>
 800abf6:	f1ba 0f00 	cmp.w	sl, #0
 800abfa:	4606      	mov	r6, r0
 800abfc:	460f      	mov	r7, r1
 800abfe:	dd70      	ble.n	800ace2 <__kernel_rem_pio2+0x252>
 800ac00:	1e62      	subs	r2, r4, #1
 800ac02:	ab0c      	add	r3, sp, #48	; 0x30
 800ac04:	9d07      	ldr	r5, [sp, #28]
 800ac06:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ac0a:	f1ca 0118 	rsb	r1, sl, #24
 800ac0e:	fa40 f301 	asr.w	r3, r0, r1
 800ac12:	441d      	add	r5, r3
 800ac14:	408b      	lsls	r3, r1
 800ac16:	1ac0      	subs	r0, r0, r3
 800ac18:	ab0c      	add	r3, sp, #48	; 0x30
 800ac1a:	9507      	str	r5, [sp, #28]
 800ac1c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ac20:	f1ca 0317 	rsb	r3, sl, #23
 800ac24:	fa40 f303 	asr.w	r3, r0, r3
 800ac28:	9302      	str	r3, [sp, #8]
 800ac2a:	9b02      	ldr	r3, [sp, #8]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	dd66      	ble.n	800acfe <__kernel_rem_pio2+0x26e>
 800ac30:	9b07      	ldr	r3, [sp, #28]
 800ac32:	2200      	movs	r2, #0
 800ac34:	3301      	adds	r3, #1
 800ac36:	9307      	str	r3, [sp, #28]
 800ac38:	4615      	mov	r5, r2
 800ac3a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ac3e:	4294      	cmp	r4, r2
 800ac40:	f300 8099 	bgt.w	800ad76 <__kernel_rem_pio2+0x2e6>
 800ac44:	f1ba 0f00 	cmp.w	sl, #0
 800ac48:	dd07      	ble.n	800ac5a <__kernel_rem_pio2+0x1ca>
 800ac4a:	f1ba 0f01 	cmp.w	sl, #1
 800ac4e:	f000 80a5 	beq.w	800ad9c <__kernel_rem_pio2+0x30c>
 800ac52:	f1ba 0f02 	cmp.w	sl, #2
 800ac56:	f000 80c1 	beq.w	800addc <__kernel_rem_pio2+0x34c>
 800ac5a:	9b02      	ldr	r3, [sp, #8]
 800ac5c:	2b02      	cmp	r3, #2
 800ac5e:	d14e      	bne.n	800acfe <__kernel_rem_pio2+0x26e>
 800ac60:	4632      	mov	r2, r6
 800ac62:	463b      	mov	r3, r7
 800ac64:	4958      	ldr	r1, [pc, #352]	; (800adc8 <__kernel_rem_pio2+0x338>)
 800ac66:	2000      	movs	r0, #0
 800ac68:	f7f5 fac6 	bl	80001f8 <__aeabi_dsub>
 800ac6c:	4606      	mov	r6, r0
 800ac6e:	460f      	mov	r7, r1
 800ac70:	2d00      	cmp	r5, #0
 800ac72:	d044      	beq.n	800acfe <__kernel_rem_pio2+0x26e>
 800ac74:	4650      	mov	r0, sl
 800ac76:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800adb8 <__kernel_rem_pio2+0x328>
 800ac7a:	f000 fc29 	bl	800b4d0 <scalbn>
 800ac7e:	4630      	mov	r0, r6
 800ac80:	4639      	mov	r1, r7
 800ac82:	ec53 2b10 	vmov	r2, r3, d0
 800ac86:	f7f5 fab7 	bl	80001f8 <__aeabi_dsub>
 800ac8a:	4606      	mov	r6, r0
 800ac8c:	460f      	mov	r7, r1
 800ac8e:	e036      	b.n	800acfe <__kernel_rem_pio2+0x26e>
 800ac90:	4b4e      	ldr	r3, [pc, #312]	; (800adcc <__kernel_rem_pio2+0x33c>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	4630      	mov	r0, r6
 800ac96:	4639      	mov	r1, r7
 800ac98:	f7f5 fc66 	bl	8000568 <__aeabi_dmul>
 800ac9c:	f7f5 ff14 	bl	8000ac8 <__aeabi_d2iz>
 800aca0:	f7f5 fbf8 	bl	8000494 <__aeabi_i2d>
 800aca4:	4b4a      	ldr	r3, [pc, #296]	; (800add0 <__kernel_rem_pio2+0x340>)
 800aca6:	2200      	movs	r2, #0
 800aca8:	4680      	mov	r8, r0
 800acaa:	4689      	mov	r9, r1
 800acac:	f7f5 fc5c 	bl	8000568 <__aeabi_dmul>
 800acb0:	4602      	mov	r2, r0
 800acb2:	460b      	mov	r3, r1
 800acb4:	4630      	mov	r0, r6
 800acb6:	4639      	mov	r1, r7
 800acb8:	f7f5 fa9e 	bl	80001f8 <__aeabi_dsub>
 800acbc:	f7f5 ff04 	bl	8000ac8 <__aeabi_d2iz>
 800acc0:	9b02      	ldr	r3, [sp, #8]
 800acc2:	f843 0b04 	str.w	r0, [r3], #4
 800acc6:	3d01      	subs	r5, #1
 800acc8:	9302      	str	r3, [sp, #8]
 800acca:	ab70      	add	r3, sp, #448	; 0x1c0
 800accc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800acd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd4:	4640      	mov	r0, r8
 800acd6:	4649      	mov	r1, r9
 800acd8:	f7f5 fa90 	bl	80001fc <__adddf3>
 800acdc:	4606      	mov	r6, r0
 800acde:	460f      	mov	r7, r1
 800ace0:	e75b      	b.n	800ab9a <__kernel_rem_pio2+0x10a>
 800ace2:	d105      	bne.n	800acf0 <__kernel_rem_pio2+0x260>
 800ace4:	1e63      	subs	r3, r4, #1
 800ace6:	aa0c      	add	r2, sp, #48	; 0x30
 800ace8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800acec:	15c3      	asrs	r3, r0, #23
 800acee:	e79b      	b.n	800ac28 <__kernel_rem_pio2+0x198>
 800acf0:	4b38      	ldr	r3, [pc, #224]	; (800add4 <__kernel_rem_pio2+0x344>)
 800acf2:	2200      	movs	r2, #0
 800acf4:	f7f5 febe 	bl	8000a74 <__aeabi_dcmpge>
 800acf8:	2800      	cmp	r0, #0
 800acfa:	d139      	bne.n	800ad70 <__kernel_rem_pio2+0x2e0>
 800acfc:	9002      	str	r0, [sp, #8]
 800acfe:	2200      	movs	r2, #0
 800ad00:	2300      	movs	r3, #0
 800ad02:	4630      	mov	r0, r6
 800ad04:	4639      	mov	r1, r7
 800ad06:	f7f5 fe97 	bl	8000a38 <__aeabi_dcmpeq>
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	f000 80b4 	beq.w	800ae78 <__kernel_rem_pio2+0x3e8>
 800ad10:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800ad14:	465b      	mov	r3, fp
 800ad16:	2200      	movs	r2, #0
 800ad18:	9904      	ldr	r1, [sp, #16]
 800ad1a:	428b      	cmp	r3, r1
 800ad1c:	da65      	bge.n	800adea <__kernel_rem_pio2+0x35a>
 800ad1e:	2a00      	cmp	r2, #0
 800ad20:	d07b      	beq.n	800ae1a <__kernel_rem_pio2+0x38a>
 800ad22:	ab0c      	add	r3, sp, #48	; 0x30
 800ad24:	f1aa 0a18 	sub.w	sl, sl, #24
 800ad28:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	f000 80a0 	beq.w	800ae72 <__kernel_rem_pio2+0x3e2>
 800ad32:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800adb8 <__kernel_rem_pio2+0x328>
 800ad36:	4650      	mov	r0, sl
 800ad38:	f000 fbca 	bl	800b4d0 <scalbn>
 800ad3c:	4f23      	ldr	r7, [pc, #140]	; (800adcc <__kernel_rem_pio2+0x33c>)
 800ad3e:	ec55 4b10 	vmov	r4, r5, d0
 800ad42:	46d8      	mov	r8, fp
 800ad44:	2600      	movs	r6, #0
 800ad46:	f1b8 0f00 	cmp.w	r8, #0
 800ad4a:	f280 80cf 	bge.w	800aeec <__kernel_rem_pio2+0x45c>
 800ad4e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800adb0 <__kernel_rem_pio2+0x320>
 800ad52:	465f      	mov	r7, fp
 800ad54:	f04f 0800 	mov.w	r8, #0
 800ad58:	2f00      	cmp	r7, #0
 800ad5a:	f2c0 80fd 	blt.w	800af58 <__kernel_rem_pio2+0x4c8>
 800ad5e:	ab70      	add	r3, sp, #448	; 0x1c0
 800ad60:	f8df a074 	ldr.w	sl, [pc, #116]	; 800add8 <__kernel_rem_pio2+0x348>
 800ad64:	ec55 4b18 	vmov	r4, r5, d8
 800ad68:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800ad6c:	2600      	movs	r6, #0
 800ad6e:	e0e5      	b.n	800af3c <__kernel_rem_pio2+0x4ac>
 800ad70:	2302      	movs	r3, #2
 800ad72:	9302      	str	r3, [sp, #8]
 800ad74:	e75c      	b.n	800ac30 <__kernel_rem_pio2+0x1a0>
 800ad76:	f8db 3000 	ldr.w	r3, [fp]
 800ad7a:	b955      	cbnz	r5, 800ad92 <__kernel_rem_pio2+0x302>
 800ad7c:	b123      	cbz	r3, 800ad88 <__kernel_rem_pio2+0x2f8>
 800ad7e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ad82:	f8cb 3000 	str.w	r3, [fp]
 800ad86:	2301      	movs	r3, #1
 800ad88:	3201      	adds	r2, #1
 800ad8a:	f10b 0b04 	add.w	fp, fp, #4
 800ad8e:	461d      	mov	r5, r3
 800ad90:	e755      	b.n	800ac3e <__kernel_rem_pio2+0x1ae>
 800ad92:	1acb      	subs	r3, r1, r3
 800ad94:	f8cb 3000 	str.w	r3, [fp]
 800ad98:	462b      	mov	r3, r5
 800ad9a:	e7f5      	b.n	800ad88 <__kernel_rem_pio2+0x2f8>
 800ad9c:	1e62      	subs	r2, r4, #1
 800ad9e:	ab0c      	add	r3, sp, #48	; 0x30
 800ada0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ada4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ada8:	a90c      	add	r1, sp, #48	; 0x30
 800adaa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800adae:	e754      	b.n	800ac5a <__kernel_rem_pio2+0x1ca>
	...
 800adbc:	3ff00000 	.word	0x3ff00000
 800adc0:	0800b8b8 	.word	0x0800b8b8
 800adc4:	40200000 	.word	0x40200000
 800adc8:	3ff00000 	.word	0x3ff00000
 800adcc:	3e700000 	.word	0x3e700000
 800add0:	41700000 	.word	0x41700000
 800add4:	3fe00000 	.word	0x3fe00000
 800add8:	0800b878 	.word	0x0800b878
 800addc:	1e62      	subs	r2, r4, #1
 800adde:	ab0c      	add	r3, sp, #48	; 0x30
 800ade0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ade4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ade8:	e7de      	b.n	800ada8 <__kernel_rem_pio2+0x318>
 800adea:	a90c      	add	r1, sp, #48	; 0x30
 800adec:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800adf0:	3b01      	subs	r3, #1
 800adf2:	430a      	orrs	r2, r1
 800adf4:	e790      	b.n	800ad18 <__kernel_rem_pio2+0x288>
 800adf6:	3301      	adds	r3, #1
 800adf8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800adfc:	2900      	cmp	r1, #0
 800adfe:	d0fa      	beq.n	800adf6 <__kernel_rem_pio2+0x366>
 800ae00:	9a08      	ldr	r2, [sp, #32]
 800ae02:	18e3      	adds	r3, r4, r3
 800ae04:	18a6      	adds	r6, r4, r2
 800ae06:	aa20      	add	r2, sp, #128	; 0x80
 800ae08:	1c65      	adds	r5, r4, #1
 800ae0a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800ae0e:	9302      	str	r3, [sp, #8]
 800ae10:	9b02      	ldr	r3, [sp, #8]
 800ae12:	42ab      	cmp	r3, r5
 800ae14:	da04      	bge.n	800ae20 <__kernel_rem_pio2+0x390>
 800ae16:	461c      	mov	r4, r3
 800ae18:	e6b5      	b.n	800ab86 <__kernel_rem_pio2+0xf6>
 800ae1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	e7eb      	b.n	800adf8 <__kernel_rem_pio2+0x368>
 800ae20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae26:	f7f5 fb35 	bl	8000494 <__aeabi_i2d>
 800ae2a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ae2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae30:	46b3      	mov	fp, r6
 800ae32:	461c      	mov	r4, r3
 800ae34:	2700      	movs	r7, #0
 800ae36:	f04f 0800 	mov.w	r8, #0
 800ae3a:	f04f 0900 	mov.w	r9, #0
 800ae3e:	9b06      	ldr	r3, [sp, #24]
 800ae40:	429f      	cmp	r7, r3
 800ae42:	dd06      	ble.n	800ae52 <__kernel_rem_pio2+0x3c2>
 800ae44:	ab70      	add	r3, sp, #448	; 0x1c0
 800ae46:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ae4a:	e9c3 8900 	strd	r8, r9, [r3]
 800ae4e:	3501      	adds	r5, #1
 800ae50:	e7de      	b.n	800ae10 <__kernel_rem_pio2+0x380>
 800ae52:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ae56:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ae5a:	f7f5 fb85 	bl	8000568 <__aeabi_dmul>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	460b      	mov	r3, r1
 800ae62:	4640      	mov	r0, r8
 800ae64:	4649      	mov	r1, r9
 800ae66:	f7f5 f9c9 	bl	80001fc <__adddf3>
 800ae6a:	3701      	adds	r7, #1
 800ae6c:	4680      	mov	r8, r0
 800ae6e:	4689      	mov	r9, r1
 800ae70:	e7e5      	b.n	800ae3e <__kernel_rem_pio2+0x3ae>
 800ae72:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ae76:	e754      	b.n	800ad22 <__kernel_rem_pio2+0x292>
 800ae78:	ec47 6b10 	vmov	d0, r6, r7
 800ae7c:	f1ca 0000 	rsb	r0, sl, #0
 800ae80:	f000 fb26 	bl	800b4d0 <scalbn>
 800ae84:	ec57 6b10 	vmov	r6, r7, d0
 800ae88:	4b9f      	ldr	r3, [pc, #636]	; (800b108 <__kernel_rem_pio2+0x678>)
 800ae8a:	ee10 0a10 	vmov	r0, s0
 800ae8e:	2200      	movs	r2, #0
 800ae90:	4639      	mov	r1, r7
 800ae92:	f7f5 fdef 	bl	8000a74 <__aeabi_dcmpge>
 800ae96:	b300      	cbz	r0, 800aeda <__kernel_rem_pio2+0x44a>
 800ae98:	4b9c      	ldr	r3, [pc, #624]	; (800b10c <__kernel_rem_pio2+0x67c>)
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	4630      	mov	r0, r6
 800ae9e:	4639      	mov	r1, r7
 800aea0:	f7f5 fb62 	bl	8000568 <__aeabi_dmul>
 800aea4:	f7f5 fe10 	bl	8000ac8 <__aeabi_d2iz>
 800aea8:	4605      	mov	r5, r0
 800aeaa:	f7f5 faf3 	bl	8000494 <__aeabi_i2d>
 800aeae:	4b96      	ldr	r3, [pc, #600]	; (800b108 <__kernel_rem_pio2+0x678>)
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f7f5 fb59 	bl	8000568 <__aeabi_dmul>
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	4602      	mov	r2, r0
 800aeba:	4639      	mov	r1, r7
 800aebc:	4630      	mov	r0, r6
 800aebe:	f7f5 f99b 	bl	80001f8 <__aeabi_dsub>
 800aec2:	f7f5 fe01 	bl	8000ac8 <__aeabi_d2iz>
 800aec6:	f104 0b01 	add.w	fp, r4, #1
 800aeca:	ab0c      	add	r3, sp, #48	; 0x30
 800aecc:	f10a 0a18 	add.w	sl, sl, #24
 800aed0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800aed4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800aed8:	e72b      	b.n	800ad32 <__kernel_rem_pio2+0x2a2>
 800aeda:	4630      	mov	r0, r6
 800aedc:	4639      	mov	r1, r7
 800aede:	f7f5 fdf3 	bl	8000ac8 <__aeabi_d2iz>
 800aee2:	ab0c      	add	r3, sp, #48	; 0x30
 800aee4:	46a3      	mov	fp, r4
 800aee6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800aeea:	e722      	b.n	800ad32 <__kernel_rem_pio2+0x2a2>
 800aeec:	ab70      	add	r3, sp, #448	; 0x1c0
 800aeee:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800aef2:	ab0c      	add	r3, sp, #48	; 0x30
 800aef4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800aef8:	f7f5 facc 	bl	8000494 <__aeabi_i2d>
 800aefc:	4622      	mov	r2, r4
 800aefe:	462b      	mov	r3, r5
 800af00:	f7f5 fb32 	bl	8000568 <__aeabi_dmul>
 800af04:	4632      	mov	r2, r6
 800af06:	e9c9 0100 	strd	r0, r1, [r9]
 800af0a:	463b      	mov	r3, r7
 800af0c:	4620      	mov	r0, r4
 800af0e:	4629      	mov	r1, r5
 800af10:	f7f5 fb2a 	bl	8000568 <__aeabi_dmul>
 800af14:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800af18:	4604      	mov	r4, r0
 800af1a:	460d      	mov	r5, r1
 800af1c:	e713      	b.n	800ad46 <__kernel_rem_pio2+0x2b6>
 800af1e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800af22:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800af26:	f7f5 fb1f 	bl	8000568 <__aeabi_dmul>
 800af2a:	4602      	mov	r2, r0
 800af2c:	460b      	mov	r3, r1
 800af2e:	4620      	mov	r0, r4
 800af30:	4629      	mov	r1, r5
 800af32:	f7f5 f963 	bl	80001fc <__adddf3>
 800af36:	3601      	adds	r6, #1
 800af38:	4604      	mov	r4, r0
 800af3a:	460d      	mov	r5, r1
 800af3c:	9b04      	ldr	r3, [sp, #16]
 800af3e:	429e      	cmp	r6, r3
 800af40:	dc01      	bgt.n	800af46 <__kernel_rem_pio2+0x4b6>
 800af42:	45b0      	cmp	r8, r6
 800af44:	daeb      	bge.n	800af1e <__kernel_rem_pio2+0x48e>
 800af46:	ab48      	add	r3, sp, #288	; 0x120
 800af48:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800af4c:	e9c3 4500 	strd	r4, r5, [r3]
 800af50:	3f01      	subs	r7, #1
 800af52:	f108 0801 	add.w	r8, r8, #1
 800af56:	e6ff      	b.n	800ad58 <__kernel_rem_pio2+0x2c8>
 800af58:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800af5a:	2b02      	cmp	r3, #2
 800af5c:	dc0b      	bgt.n	800af76 <__kernel_rem_pio2+0x4e6>
 800af5e:	2b00      	cmp	r3, #0
 800af60:	dc6e      	bgt.n	800b040 <__kernel_rem_pio2+0x5b0>
 800af62:	d045      	beq.n	800aff0 <__kernel_rem_pio2+0x560>
 800af64:	9b07      	ldr	r3, [sp, #28]
 800af66:	f003 0007 	and.w	r0, r3, #7
 800af6a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800af6e:	ecbd 8b02 	vpop	{d8}
 800af72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af76:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800af78:	2b03      	cmp	r3, #3
 800af7a:	d1f3      	bne.n	800af64 <__kernel_rem_pio2+0x4d4>
 800af7c:	ab48      	add	r3, sp, #288	; 0x120
 800af7e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800af82:	46d0      	mov	r8, sl
 800af84:	46d9      	mov	r9, fp
 800af86:	f1b9 0f00 	cmp.w	r9, #0
 800af8a:	f1a8 0808 	sub.w	r8, r8, #8
 800af8e:	dc64      	bgt.n	800b05a <__kernel_rem_pio2+0x5ca>
 800af90:	465c      	mov	r4, fp
 800af92:	2c01      	cmp	r4, #1
 800af94:	f1aa 0a08 	sub.w	sl, sl, #8
 800af98:	dc7e      	bgt.n	800b098 <__kernel_rem_pio2+0x608>
 800af9a:	2000      	movs	r0, #0
 800af9c:	2100      	movs	r1, #0
 800af9e:	f1bb 0f01 	cmp.w	fp, #1
 800afa2:	f300 8097 	bgt.w	800b0d4 <__kernel_rem_pio2+0x644>
 800afa6:	9b02      	ldr	r3, [sp, #8]
 800afa8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800afac:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f040 8099 	bne.w	800b0e8 <__kernel_rem_pio2+0x658>
 800afb6:	9b01      	ldr	r3, [sp, #4]
 800afb8:	e9c3 5600 	strd	r5, r6, [r3]
 800afbc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800afc0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800afc4:	e7ce      	b.n	800af64 <__kernel_rem_pio2+0x4d4>
 800afc6:	ab48      	add	r3, sp, #288	; 0x120
 800afc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800afcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd0:	f7f5 f914 	bl	80001fc <__adddf3>
 800afd4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800afd8:	f1bb 0f00 	cmp.w	fp, #0
 800afdc:	daf3      	bge.n	800afc6 <__kernel_rem_pio2+0x536>
 800afde:	9b02      	ldr	r3, [sp, #8]
 800afe0:	b113      	cbz	r3, 800afe8 <__kernel_rem_pio2+0x558>
 800afe2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800afe6:	4619      	mov	r1, r3
 800afe8:	9b01      	ldr	r3, [sp, #4]
 800afea:	e9c3 0100 	strd	r0, r1, [r3]
 800afee:	e7b9      	b.n	800af64 <__kernel_rem_pio2+0x4d4>
 800aff0:	2000      	movs	r0, #0
 800aff2:	2100      	movs	r1, #0
 800aff4:	e7f0      	b.n	800afd8 <__kernel_rem_pio2+0x548>
 800aff6:	ab48      	add	r3, sp, #288	; 0x120
 800aff8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800affc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b000:	f7f5 f8fc 	bl	80001fc <__adddf3>
 800b004:	3c01      	subs	r4, #1
 800b006:	2c00      	cmp	r4, #0
 800b008:	daf5      	bge.n	800aff6 <__kernel_rem_pio2+0x566>
 800b00a:	9b02      	ldr	r3, [sp, #8]
 800b00c:	b1e3      	cbz	r3, 800b048 <__kernel_rem_pio2+0x5b8>
 800b00e:	4602      	mov	r2, r0
 800b010:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b014:	9c01      	ldr	r4, [sp, #4]
 800b016:	e9c4 2300 	strd	r2, r3, [r4]
 800b01a:	4602      	mov	r2, r0
 800b01c:	460b      	mov	r3, r1
 800b01e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b022:	f7f5 f8e9 	bl	80001f8 <__aeabi_dsub>
 800b026:	ad4a      	add	r5, sp, #296	; 0x128
 800b028:	2401      	movs	r4, #1
 800b02a:	45a3      	cmp	fp, r4
 800b02c:	da0f      	bge.n	800b04e <__kernel_rem_pio2+0x5be>
 800b02e:	9b02      	ldr	r3, [sp, #8]
 800b030:	b113      	cbz	r3, 800b038 <__kernel_rem_pio2+0x5a8>
 800b032:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b036:	4619      	mov	r1, r3
 800b038:	9b01      	ldr	r3, [sp, #4]
 800b03a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b03e:	e791      	b.n	800af64 <__kernel_rem_pio2+0x4d4>
 800b040:	465c      	mov	r4, fp
 800b042:	2000      	movs	r0, #0
 800b044:	2100      	movs	r1, #0
 800b046:	e7de      	b.n	800b006 <__kernel_rem_pio2+0x576>
 800b048:	4602      	mov	r2, r0
 800b04a:	460b      	mov	r3, r1
 800b04c:	e7e2      	b.n	800b014 <__kernel_rem_pio2+0x584>
 800b04e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b052:	f7f5 f8d3 	bl	80001fc <__adddf3>
 800b056:	3401      	adds	r4, #1
 800b058:	e7e7      	b.n	800b02a <__kernel_rem_pio2+0x59a>
 800b05a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800b05e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800b062:	4620      	mov	r0, r4
 800b064:	4632      	mov	r2, r6
 800b066:	463b      	mov	r3, r7
 800b068:	4629      	mov	r1, r5
 800b06a:	f7f5 f8c7 	bl	80001fc <__adddf3>
 800b06e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b072:	4602      	mov	r2, r0
 800b074:	460b      	mov	r3, r1
 800b076:	4620      	mov	r0, r4
 800b078:	4629      	mov	r1, r5
 800b07a:	f7f5 f8bd 	bl	80001f8 <__aeabi_dsub>
 800b07e:	4632      	mov	r2, r6
 800b080:	463b      	mov	r3, r7
 800b082:	f7f5 f8bb 	bl	80001fc <__adddf3>
 800b086:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b08a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800b08e:	ed88 7b00 	vstr	d7, [r8]
 800b092:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b096:	e776      	b.n	800af86 <__kernel_rem_pio2+0x4f6>
 800b098:	e9da 8900 	ldrd	r8, r9, [sl]
 800b09c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b0a0:	4640      	mov	r0, r8
 800b0a2:	4632      	mov	r2, r6
 800b0a4:	463b      	mov	r3, r7
 800b0a6:	4649      	mov	r1, r9
 800b0a8:	f7f5 f8a8 	bl	80001fc <__adddf3>
 800b0ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	4640      	mov	r0, r8
 800b0b6:	4649      	mov	r1, r9
 800b0b8:	f7f5 f89e 	bl	80001f8 <__aeabi_dsub>
 800b0bc:	4632      	mov	r2, r6
 800b0be:	463b      	mov	r3, r7
 800b0c0:	f7f5 f89c 	bl	80001fc <__adddf3>
 800b0c4:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b0c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b0cc:	ed8a 7b00 	vstr	d7, [sl]
 800b0d0:	3c01      	subs	r4, #1
 800b0d2:	e75e      	b.n	800af92 <__kernel_rem_pio2+0x502>
 800b0d4:	ab48      	add	r3, sp, #288	; 0x120
 800b0d6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0de:	f7f5 f88d 	bl	80001fc <__adddf3>
 800b0e2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b0e6:	e75a      	b.n	800af9e <__kernel_rem_pio2+0x50e>
 800b0e8:	9b01      	ldr	r3, [sp, #4]
 800b0ea:	9a01      	ldr	r2, [sp, #4]
 800b0ec:	601d      	str	r5, [r3, #0]
 800b0ee:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b0f2:	605c      	str	r4, [r3, #4]
 800b0f4:	609f      	str	r7, [r3, #8]
 800b0f6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b0fa:	60d3      	str	r3, [r2, #12]
 800b0fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b100:	6110      	str	r0, [r2, #16]
 800b102:	6153      	str	r3, [r2, #20]
 800b104:	e72e      	b.n	800af64 <__kernel_rem_pio2+0x4d4>
 800b106:	bf00      	nop
 800b108:	41700000 	.word	0x41700000
 800b10c:	3e700000 	.word	0x3e700000

0800b110 <__kernel_sin>:
 800b110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b114:	ed2d 8b04 	vpush	{d8-d9}
 800b118:	eeb0 8a41 	vmov.f32	s16, s2
 800b11c:	eef0 8a61 	vmov.f32	s17, s3
 800b120:	ec55 4b10 	vmov	r4, r5, d0
 800b124:	b083      	sub	sp, #12
 800b126:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b12a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b12e:	9001      	str	r0, [sp, #4]
 800b130:	da06      	bge.n	800b140 <__kernel_sin+0x30>
 800b132:	ee10 0a10 	vmov	r0, s0
 800b136:	4629      	mov	r1, r5
 800b138:	f7f5 fcc6 	bl	8000ac8 <__aeabi_d2iz>
 800b13c:	2800      	cmp	r0, #0
 800b13e:	d051      	beq.n	800b1e4 <__kernel_sin+0xd4>
 800b140:	4622      	mov	r2, r4
 800b142:	462b      	mov	r3, r5
 800b144:	4620      	mov	r0, r4
 800b146:	4629      	mov	r1, r5
 800b148:	f7f5 fa0e 	bl	8000568 <__aeabi_dmul>
 800b14c:	4682      	mov	sl, r0
 800b14e:	468b      	mov	fp, r1
 800b150:	4602      	mov	r2, r0
 800b152:	460b      	mov	r3, r1
 800b154:	4620      	mov	r0, r4
 800b156:	4629      	mov	r1, r5
 800b158:	f7f5 fa06 	bl	8000568 <__aeabi_dmul>
 800b15c:	a341      	add	r3, pc, #260	; (adr r3, 800b264 <__kernel_sin+0x154>)
 800b15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b162:	4680      	mov	r8, r0
 800b164:	4689      	mov	r9, r1
 800b166:	4650      	mov	r0, sl
 800b168:	4659      	mov	r1, fp
 800b16a:	f7f5 f9fd 	bl	8000568 <__aeabi_dmul>
 800b16e:	a33f      	add	r3, pc, #252	; (adr r3, 800b26c <__kernel_sin+0x15c>)
 800b170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b174:	f7f5 f840 	bl	80001f8 <__aeabi_dsub>
 800b178:	4652      	mov	r2, sl
 800b17a:	465b      	mov	r3, fp
 800b17c:	f7f5 f9f4 	bl	8000568 <__aeabi_dmul>
 800b180:	a33c      	add	r3, pc, #240	; (adr r3, 800b274 <__kernel_sin+0x164>)
 800b182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b186:	f7f5 f839 	bl	80001fc <__adddf3>
 800b18a:	4652      	mov	r2, sl
 800b18c:	465b      	mov	r3, fp
 800b18e:	f7f5 f9eb 	bl	8000568 <__aeabi_dmul>
 800b192:	a33a      	add	r3, pc, #232	; (adr r3, 800b27c <__kernel_sin+0x16c>)
 800b194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b198:	f7f5 f82e 	bl	80001f8 <__aeabi_dsub>
 800b19c:	4652      	mov	r2, sl
 800b19e:	465b      	mov	r3, fp
 800b1a0:	f7f5 f9e2 	bl	8000568 <__aeabi_dmul>
 800b1a4:	a337      	add	r3, pc, #220	; (adr r3, 800b284 <__kernel_sin+0x174>)
 800b1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1aa:	f7f5 f827 	bl	80001fc <__adddf3>
 800b1ae:	9b01      	ldr	r3, [sp, #4]
 800b1b0:	4606      	mov	r6, r0
 800b1b2:	460f      	mov	r7, r1
 800b1b4:	b9eb      	cbnz	r3, 800b1f2 <__kernel_sin+0xe2>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	4650      	mov	r0, sl
 800b1bc:	4659      	mov	r1, fp
 800b1be:	f7f5 f9d3 	bl	8000568 <__aeabi_dmul>
 800b1c2:	a325      	add	r3, pc, #148	; (adr r3, 800b258 <__kernel_sin+0x148>)
 800b1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c8:	f7f5 f816 	bl	80001f8 <__aeabi_dsub>
 800b1cc:	4642      	mov	r2, r8
 800b1ce:	464b      	mov	r3, r9
 800b1d0:	f7f5 f9ca 	bl	8000568 <__aeabi_dmul>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	4620      	mov	r0, r4
 800b1da:	4629      	mov	r1, r5
 800b1dc:	f7f5 f80e 	bl	80001fc <__adddf3>
 800b1e0:	4604      	mov	r4, r0
 800b1e2:	460d      	mov	r5, r1
 800b1e4:	ec45 4b10 	vmov	d0, r4, r5
 800b1e8:	b003      	add	sp, #12
 800b1ea:	ecbd 8b04 	vpop	{d8-d9}
 800b1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f2:	4b1b      	ldr	r3, [pc, #108]	; (800b260 <__kernel_sin+0x150>)
 800b1f4:	ec51 0b18 	vmov	r0, r1, d8
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	f7f5 f9b5 	bl	8000568 <__aeabi_dmul>
 800b1fe:	4632      	mov	r2, r6
 800b200:	ec41 0b19 	vmov	d9, r0, r1
 800b204:	463b      	mov	r3, r7
 800b206:	4640      	mov	r0, r8
 800b208:	4649      	mov	r1, r9
 800b20a:	f7f5 f9ad 	bl	8000568 <__aeabi_dmul>
 800b20e:	4602      	mov	r2, r0
 800b210:	460b      	mov	r3, r1
 800b212:	ec51 0b19 	vmov	r0, r1, d9
 800b216:	f7f4 ffef 	bl	80001f8 <__aeabi_dsub>
 800b21a:	4652      	mov	r2, sl
 800b21c:	465b      	mov	r3, fp
 800b21e:	f7f5 f9a3 	bl	8000568 <__aeabi_dmul>
 800b222:	ec53 2b18 	vmov	r2, r3, d8
 800b226:	f7f4 ffe7 	bl	80001f8 <__aeabi_dsub>
 800b22a:	a30b      	add	r3, pc, #44	; (adr r3, 800b258 <__kernel_sin+0x148>)
 800b22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b230:	4606      	mov	r6, r0
 800b232:	460f      	mov	r7, r1
 800b234:	4640      	mov	r0, r8
 800b236:	4649      	mov	r1, r9
 800b238:	f7f5 f996 	bl	8000568 <__aeabi_dmul>
 800b23c:	4602      	mov	r2, r0
 800b23e:	460b      	mov	r3, r1
 800b240:	4630      	mov	r0, r6
 800b242:	4639      	mov	r1, r7
 800b244:	f7f4 ffda 	bl	80001fc <__adddf3>
 800b248:	4602      	mov	r2, r0
 800b24a:	460b      	mov	r3, r1
 800b24c:	4620      	mov	r0, r4
 800b24e:	4629      	mov	r1, r5
 800b250:	f7f4 ffd2 	bl	80001f8 <__aeabi_dsub>
 800b254:	e7c4      	b.n	800b1e0 <__kernel_sin+0xd0>
 800b256:	bf00      	nop
 800b258:	55555549 	.word	0x55555549
 800b25c:	3fc55555 	.word	0x3fc55555
 800b260:	3fe00000 	.word	0x3fe00000
 800b264:	5acfd57c 	.word	0x5acfd57c
 800b268:	3de5d93a 	.word	0x3de5d93a
 800b26c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b270:	3e5ae5e6 	.word	0x3e5ae5e6
 800b274:	57b1fe7d 	.word	0x57b1fe7d
 800b278:	3ec71de3 	.word	0x3ec71de3
 800b27c:	19c161d5 	.word	0x19c161d5
 800b280:	3f2a01a0 	.word	0x3f2a01a0
 800b284:	1110f8a6 	.word	0x1110f8a6
 800b288:	3f811111 	.word	0x3f811111

0800b28c <finite>:
 800b28c:	b082      	sub	sp, #8
 800b28e:	ed8d 0b00 	vstr	d0, [sp]
 800b292:	9801      	ldr	r0, [sp, #4]
 800b294:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800b298:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b29c:	0fc0      	lsrs	r0, r0, #31
 800b29e:	b002      	add	sp, #8
 800b2a0:	4770      	bx	lr
 800b2a2:	0000      	movs	r0, r0
 800b2a4:	0000      	movs	r0, r0
	...

0800b2a8 <floor>:
 800b2a8:	ec51 0b10 	vmov	r0, r1, d0
 800b2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b2b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b2b8:	2e13      	cmp	r6, #19
 800b2ba:	ee10 5a10 	vmov	r5, s0
 800b2be:	ee10 8a10 	vmov	r8, s0
 800b2c2:	460c      	mov	r4, r1
 800b2c4:	dc32      	bgt.n	800b32c <floor+0x84>
 800b2c6:	2e00      	cmp	r6, #0
 800b2c8:	da14      	bge.n	800b2f4 <floor+0x4c>
 800b2ca:	a333      	add	r3, pc, #204	; (adr r3, 800b398 <floor+0xf0>)
 800b2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d0:	f7f4 ff94 	bl	80001fc <__adddf3>
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	f7f5 fbd6 	bl	8000a88 <__aeabi_dcmpgt>
 800b2dc:	b138      	cbz	r0, 800b2ee <floor+0x46>
 800b2de:	2c00      	cmp	r4, #0
 800b2e0:	da57      	bge.n	800b392 <floor+0xea>
 800b2e2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b2e6:	431d      	orrs	r5, r3
 800b2e8:	d001      	beq.n	800b2ee <floor+0x46>
 800b2ea:	4c2d      	ldr	r4, [pc, #180]	; (800b3a0 <floor+0xf8>)
 800b2ec:	2500      	movs	r5, #0
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	e025      	b.n	800b340 <floor+0x98>
 800b2f4:	4f2b      	ldr	r7, [pc, #172]	; (800b3a4 <floor+0xfc>)
 800b2f6:	4137      	asrs	r7, r6
 800b2f8:	ea01 0307 	and.w	r3, r1, r7
 800b2fc:	4303      	orrs	r3, r0
 800b2fe:	d01f      	beq.n	800b340 <floor+0x98>
 800b300:	a325      	add	r3, pc, #148	; (adr r3, 800b398 <floor+0xf0>)
 800b302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b306:	f7f4 ff79 	bl	80001fc <__adddf3>
 800b30a:	2200      	movs	r2, #0
 800b30c:	2300      	movs	r3, #0
 800b30e:	f7f5 fbbb 	bl	8000a88 <__aeabi_dcmpgt>
 800b312:	2800      	cmp	r0, #0
 800b314:	d0eb      	beq.n	800b2ee <floor+0x46>
 800b316:	2c00      	cmp	r4, #0
 800b318:	bfbe      	ittt	lt
 800b31a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b31e:	fa43 f606 	asrlt.w	r6, r3, r6
 800b322:	19a4      	addlt	r4, r4, r6
 800b324:	ea24 0407 	bic.w	r4, r4, r7
 800b328:	2500      	movs	r5, #0
 800b32a:	e7e0      	b.n	800b2ee <floor+0x46>
 800b32c:	2e33      	cmp	r6, #51	; 0x33
 800b32e:	dd0b      	ble.n	800b348 <floor+0xa0>
 800b330:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b334:	d104      	bne.n	800b340 <floor+0x98>
 800b336:	ee10 2a10 	vmov	r2, s0
 800b33a:	460b      	mov	r3, r1
 800b33c:	f7f4 ff5e 	bl	80001fc <__adddf3>
 800b340:	ec41 0b10 	vmov	d0, r0, r1
 800b344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b348:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b34c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b350:	fa23 f707 	lsr.w	r7, r3, r7
 800b354:	4207      	tst	r7, r0
 800b356:	d0f3      	beq.n	800b340 <floor+0x98>
 800b358:	a30f      	add	r3, pc, #60	; (adr r3, 800b398 <floor+0xf0>)
 800b35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35e:	f7f4 ff4d 	bl	80001fc <__adddf3>
 800b362:	2200      	movs	r2, #0
 800b364:	2300      	movs	r3, #0
 800b366:	f7f5 fb8f 	bl	8000a88 <__aeabi_dcmpgt>
 800b36a:	2800      	cmp	r0, #0
 800b36c:	d0bf      	beq.n	800b2ee <floor+0x46>
 800b36e:	2c00      	cmp	r4, #0
 800b370:	da02      	bge.n	800b378 <floor+0xd0>
 800b372:	2e14      	cmp	r6, #20
 800b374:	d103      	bne.n	800b37e <floor+0xd6>
 800b376:	3401      	adds	r4, #1
 800b378:	ea25 0507 	bic.w	r5, r5, r7
 800b37c:	e7b7      	b.n	800b2ee <floor+0x46>
 800b37e:	2301      	movs	r3, #1
 800b380:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b384:	fa03 f606 	lsl.w	r6, r3, r6
 800b388:	4435      	add	r5, r6
 800b38a:	4545      	cmp	r5, r8
 800b38c:	bf38      	it	cc
 800b38e:	18e4      	addcc	r4, r4, r3
 800b390:	e7f2      	b.n	800b378 <floor+0xd0>
 800b392:	2500      	movs	r5, #0
 800b394:	462c      	mov	r4, r5
 800b396:	e7aa      	b.n	800b2ee <floor+0x46>
 800b398:	8800759c 	.word	0x8800759c
 800b39c:	7e37e43c 	.word	0x7e37e43c
 800b3a0:	bff00000 	.word	0xbff00000
 800b3a4:	000fffff 	.word	0x000fffff

0800b3a8 <nan>:
 800b3a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b3b0 <nan+0x8>
 800b3ac:	4770      	bx	lr
 800b3ae:	bf00      	nop
 800b3b0:	00000000 	.word	0x00000000
 800b3b4:	7ff80000 	.word	0x7ff80000

0800b3b8 <rint>:
 800b3b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3ba:	ec51 0b10 	vmov	r0, r1, d0
 800b3be:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b3c2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b3c6:	2e13      	cmp	r6, #19
 800b3c8:	ee10 4a10 	vmov	r4, s0
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800b3d2:	dc58      	bgt.n	800b486 <rint+0xce>
 800b3d4:	2e00      	cmp	r6, #0
 800b3d6:	da2b      	bge.n	800b430 <rint+0x78>
 800b3d8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b3dc:	4302      	orrs	r2, r0
 800b3de:	d023      	beq.n	800b428 <rint+0x70>
 800b3e0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800b3e4:	4302      	orrs	r2, r0
 800b3e6:	4254      	negs	r4, r2
 800b3e8:	4314      	orrs	r4, r2
 800b3ea:	0c4b      	lsrs	r3, r1, #17
 800b3ec:	0b24      	lsrs	r4, r4, #12
 800b3ee:	045b      	lsls	r3, r3, #17
 800b3f0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800b3f4:	ea44 0103 	orr.w	r1, r4, r3
 800b3f8:	4b32      	ldr	r3, [pc, #200]	; (800b4c4 <rint+0x10c>)
 800b3fa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b3fe:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b402:	4602      	mov	r2, r0
 800b404:	460b      	mov	r3, r1
 800b406:	4630      	mov	r0, r6
 800b408:	4639      	mov	r1, r7
 800b40a:	f7f4 fef7 	bl	80001fc <__adddf3>
 800b40e:	e9cd 0100 	strd	r0, r1, [sp]
 800b412:	463b      	mov	r3, r7
 800b414:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b418:	4632      	mov	r2, r6
 800b41a:	f7f4 feed 	bl	80001f8 <__aeabi_dsub>
 800b41e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b422:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800b426:	4639      	mov	r1, r7
 800b428:	ec41 0b10 	vmov	d0, r0, r1
 800b42c:	b003      	add	sp, #12
 800b42e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b430:	4a25      	ldr	r2, [pc, #148]	; (800b4c8 <rint+0x110>)
 800b432:	4132      	asrs	r2, r6
 800b434:	ea01 0702 	and.w	r7, r1, r2
 800b438:	4307      	orrs	r7, r0
 800b43a:	d0f5      	beq.n	800b428 <rint+0x70>
 800b43c:	0851      	lsrs	r1, r2, #1
 800b43e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800b442:	4314      	orrs	r4, r2
 800b444:	d00c      	beq.n	800b460 <rint+0xa8>
 800b446:	ea23 0201 	bic.w	r2, r3, r1
 800b44a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b44e:	2e13      	cmp	r6, #19
 800b450:	fa43 f606 	asr.w	r6, r3, r6
 800b454:	bf0c      	ite	eq
 800b456:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800b45a:	2400      	movne	r4, #0
 800b45c:	ea42 0306 	orr.w	r3, r2, r6
 800b460:	4918      	ldr	r1, [pc, #96]	; (800b4c4 <rint+0x10c>)
 800b462:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800b466:	4622      	mov	r2, r4
 800b468:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b46c:	4620      	mov	r0, r4
 800b46e:	4629      	mov	r1, r5
 800b470:	f7f4 fec4 	bl	80001fc <__adddf3>
 800b474:	e9cd 0100 	strd	r0, r1, [sp]
 800b478:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b47c:	4622      	mov	r2, r4
 800b47e:	462b      	mov	r3, r5
 800b480:	f7f4 feba 	bl	80001f8 <__aeabi_dsub>
 800b484:	e7d0      	b.n	800b428 <rint+0x70>
 800b486:	2e33      	cmp	r6, #51	; 0x33
 800b488:	dd07      	ble.n	800b49a <rint+0xe2>
 800b48a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b48e:	d1cb      	bne.n	800b428 <rint+0x70>
 800b490:	ee10 2a10 	vmov	r2, s0
 800b494:	f7f4 feb2 	bl	80001fc <__adddf3>
 800b498:	e7c6      	b.n	800b428 <rint+0x70>
 800b49a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800b49e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800b4a2:	40d6      	lsrs	r6, r2
 800b4a4:	4230      	tst	r0, r6
 800b4a6:	d0bf      	beq.n	800b428 <rint+0x70>
 800b4a8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800b4ac:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800b4b0:	bf1f      	itttt	ne
 800b4b2:	ea24 0101 	bicne.w	r1, r4, r1
 800b4b6:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800b4ba:	fa44 f202 	asrne.w	r2, r4, r2
 800b4be:	ea41 0402 	orrne.w	r4, r1, r2
 800b4c2:	e7cd      	b.n	800b460 <rint+0xa8>
 800b4c4:	0800b8c8 	.word	0x0800b8c8
 800b4c8:	000fffff 	.word	0x000fffff
 800b4cc:	00000000 	.word	0x00000000

0800b4d0 <scalbn>:
 800b4d0:	b570      	push	{r4, r5, r6, lr}
 800b4d2:	ec55 4b10 	vmov	r4, r5, d0
 800b4d6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b4da:	4606      	mov	r6, r0
 800b4dc:	462b      	mov	r3, r5
 800b4de:	b99a      	cbnz	r2, 800b508 <scalbn+0x38>
 800b4e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b4e4:	4323      	orrs	r3, r4
 800b4e6:	d036      	beq.n	800b556 <scalbn+0x86>
 800b4e8:	4b39      	ldr	r3, [pc, #228]	; (800b5d0 <scalbn+0x100>)
 800b4ea:	4629      	mov	r1, r5
 800b4ec:	ee10 0a10 	vmov	r0, s0
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f7f5 f839 	bl	8000568 <__aeabi_dmul>
 800b4f6:	4b37      	ldr	r3, [pc, #220]	; (800b5d4 <scalbn+0x104>)
 800b4f8:	429e      	cmp	r6, r3
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	460d      	mov	r5, r1
 800b4fe:	da10      	bge.n	800b522 <scalbn+0x52>
 800b500:	a32b      	add	r3, pc, #172	; (adr r3, 800b5b0 <scalbn+0xe0>)
 800b502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b506:	e03a      	b.n	800b57e <scalbn+0xae>
 800b508:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b50c:	428a      	cmp	r2, r1
 800b50e:	d10c      	bne.n	800b52a <scalbn+0x5a>
 800b510:	ee10 2a10 	vmov	r2, s0
 800b514:	4620      	mov	r0, r4
 800b516:	4629      	mov	r1, r5
 800b518:	f7f4 fe70 	bl	80001fc <__adddf3>
 800b51c:	4604      	mov	r4, r0
 800b51e:	460d      	mov	r5, r1
 800b520:	e019      	b.n	800b556 <scalbn+0x86>
 800b522:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b526:	460b      	mov	r3, r1
 800b528:	3a36      	subs	r2, #54	; 0x36
 800b52a:	4432      	add	r2, r6
 800b52c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b530:	428a      	cmp	r2, r1
 800b532:	dd08      	ble.n	800b546 <scalbn+0x76>
 800b534:	2d00      	cmp	r5, #0
 800b536:	a120      	add	r1, pc, #128	; (adr r1, 800b5b8 <scalbn+0xe8>)
 800b538:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b53c:	da1c      	bge.n	800b578 <scalbn+0xa8>
 800b53e:	a120      	add	r1, pc, #128	; (adr r1, 800b5c0 <scalbn+0xf0>)
 800b540:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b544:	e018      	b.n	800b578 <scalbn+0xa8>
 800b546:	2a00      	cmp	r2, #0
 800b548:	dd08      	ble.n	800b55c <scalbn+0x8c>
 800b54a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b54e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b552:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b556:	ec45 4b10 	vmov	d0, r4, r5
 800b55a:	bd70      	pop	{r4, r5, r6, pc}
 800b55c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b560:	da19      	bge.n	800b596 <scalbn+0xc6>
 800b562:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b566:	429e      	cmp	r6, r3
 800b568:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b56c:	dd0a      	ble.n	800b584 <scalbn+0xb4>
 800b56e:	a112      	add	r1, pc, #72	; (adr r1, 800b5b8 <scalbn+0xe8>)
 800b570:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d1e2      	bne.n	800b53e <scalbn+0x6e>
 800b578:	a30f      	add	r3, pc, #60	; (adr r3, 800b5b8 <scalbn+0xe8>)
 800b57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57e:	f7f4 fff3 	bl	8000568 <__aeabi_dmul>
 800b582:	e7cb      	b.n	800b51c <scalbn+0x4c>
 800b584:	a10a      	add	r1, pc, #40	; (adr r1, 800b5b0 <scalbn+0xe0>)
 800b586:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d0b8      	beq.n	800b500 <scalbn+0x30>
 800b58e:	a10e      	add	r1, pc, #56	; (adr r1, 800b5c8 <scalbn+0xf8>)
 800b590:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b594:	e7b4      	b.n	800b500 <scalbn+0x30>
 800b596:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b59a:	3236      	adds	r2, #54	; 0x36
 800b59c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b5a0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	4b0c      	ldr	r3, [pc, #48]	; (800b5d8 <scalbn+0x108>)
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	e7e8      	b.n	800b57e <scalbn+0xae>
 800b5ac:	f3af 8000 	nop.w
 800b5b0:	c2f8f359 	.word	0xc2f8f359
 800b5b4:	01a56e1f 	.word	0x01a56e1f
 800b5b8:	8800759c 	.word	0x8800759c
 800b5bc:	7e37e43c 	.word	0x7e37e43c
 800b5c0:	8800759c 	.word	0x8800759c
 800b5c4:	fe37e43c 	.word	0xfe37e43c
 800b5c8:	c2f8f359 	.word	0xc2f8f359
 800b5cc:	81a56e1f 	.word	0x81a56e1f
 800b5d0:	43500000 	.word	0x43500000
 800b5d4:	ffff3cb0 	.word	0xffff3cb0
 800b5d8:	3c900000 	.word	0x3c900000

0800b5dc <_init>:
 800b5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5de:	bf00      	nop
 800b5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5e2:	bc08      	pop	{r3}
 800b5e4:	469e      	mov	lr, r3
 800b5e6:	4770      	bx	lr

0800b5e8 <_fini>:
 800b5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ea:	bf00      	nop
 800b5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5ee:	bc08      	pop	{r3}
 800b5f0:	469e      	mov	lr, r3
 800b5f2:	4770      	bx	lr
