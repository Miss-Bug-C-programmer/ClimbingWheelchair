
ClimbingWheelchair.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009224  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  080093d8  080093d8  000193d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095e8  080095e8  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  080095e8  080095e8  000195e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095f0  080095f0  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095f0  080095f0  000195f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095f4  080095f4  000195f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  080095f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  20000138  0800972c  00020138  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000628  0800972c  00020628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf37  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ea0  00000000  00000000  0003c09b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  0003ff40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001328  00000000  00000000  00041438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027316  00000000  00000000  00042760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a6b2  00000000  00000000  00069a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e20d5  00000000  00000000  00084128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001661fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059f8  00000000  00000000  00166250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000138 	.word	0x20000138
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080093bc 	.word	0x080093bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000013c 	.word	0x2000013c
 80001ec:	080093bc 	.word	0x080093bc

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2uiz>:
 8000aec:	004a      	lsls	r2, r1, #1
 8000aee:	d211      	bcs.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d211      	bcs.n	8000b1a <__aeabi_d2uiz+0x2e>
 8000af6:	d50d      	bpl.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d40e      	bmi.n	8000b20 <__aeabi_d2uiz+0x34>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_d2uiz+0x3a>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_d2f>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b34:	bf24      	itt	cs
 8000b36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3e:	d90d      	bls.n	8000b5c <__aeabi_d2f+0x30>
 8000b40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b54:	bf08      	it	eq
 8000b56:	f020 0001 	biceq.w	r0, r0, #1
 8000b5a:	4770      	bx	lr
 8000b5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b60:	d121      	bne.n	8000ba6 <__aeabi_d2f+0x7a>
 8000b62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b66:	bfbc      	itt	lt
 8000b68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	4770      	bxlt	lr
 8000b6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b76:	f1c2 0218 	rsb	r2, r2, #24
 8000b7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b82:	fa20 f002 	lsr.w	r0, r0, r2
 8000b86:	bf18      	it	ne
 8000b88:	f040 0001 	orrne.w	r0, r0, #1
 8000b8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b98:	ea40 000c 	orr.w	r0, r0, ip
 8000b9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba4:	e7cc      	b.n	8000b40 <__aeabi_d2f+0x14>
 8000ba6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000baa:	d107      	bne.n	8000bbc <__aeabi_d2f+0x90>
 8000bac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bba:	4770      	bxne	lr
 8000bbc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000be0:	f000 b96e 	b.w	8000ec0 <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f806 	bl	8000bfc <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9d08      	ldr	r5, [sp, #32]
 8000c02:	4604      	mov	r4, r0
 8000c04:	468c      	mov	ip, r1
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f040 8083 	bne.w	8000d12 <__udivmoddi4+0x116>
 8000c0c:	428a      	cmp	r2, r1
 8000c0e:	4617      	mov	r7, r2
 8000c10:	d947      	bls.n	8000ca2 <__udivmoddi4+0xa6>
 8000c12:	fab2 f282 	clz	r2, r2
 8000c16:	b142      	cbz	r2, 8000c2a <__udivmoddi4+0x2e>
 8000c18:	f1c2 0020 	rsb	r0, r2, #32
 8000c1c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c20:	4091      	lsls	r1, r2
 8000c22:	4097      	lsls	r7, r2
 8000c24:	ea40 0c01 	orr.w	ip, r0, r1
 8000c28:	4094      	lsls	r4, r2
 8000c2a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2e:	0c23      	lsrs	r3, r4, #16
 8000c30:	fbbc f6f8 	udiv	r6, ip, r8
 8000c34:	fa1f fe87 	uxth.w	lr, r7
 8000c38:	fb08 c116 	mls	r1, r8, r6, ip
 8000c3c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c40:	fb06 f10e 	mul.w	r1, r6, lr
 8000c44:	4299      	cmp	r1, r3
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x60>
 8000c48:	18fb      	adds	r3, r7, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c4e:	f080 8119 	bcs.w	8000e84 <__udivmoddi4+0x288>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 8116 	bls.w	8000e84 <__udivmoddi4+0x288>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	443b      	add	r3, r7
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c70:	45a6      	cmp	lr, r4
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x8c>
 8000c74:	193c      	adds	r4, r7, r4
 8000c76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c7a:	f080 8105 	bcs.w	8000e88 <__udivmoddi4+0x28c>
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	f240 8102 	bls.w	8000e88 <__udivmoddi4+0x28c>
 8000c84:	3802      	subs	r0, #2
 8000c86:	443c      	add	r4, r7
 8000c88:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8c:	eba4 040e 	sub.w	r4, r4, lr
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa0>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	b902      	cbnz	r2, 8000ca6 <__udivmoddi4+0xaa>
 8000ca4:	deff      	udf	#255	; 0xff
 8000ca6:	fab2 f282 	clz	r2, r2
 8000caa:	2a00      	cmp	r2, #0
 8000cac:	d150      	bne.n	8000d50 <__udivmoddi4+0x154>
 8000cae:	1bcb      	subs	r3, r1, r7
 8000cb0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb4:	fa1f f887 	uxth.w	r8, r7
 8000cb8:	2601      	movs	r6, #1
 8000cba:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cbe:	0c21      	lsrs	r1, r4, #16
 8000cc0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc8:	fb08 f30c 	mul.w	r3, r8, ip
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0xe4>
 8000cd0:	1879      	adds	r1, r7, r1
 8000cd2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0xe2>
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	f200 80e9 	bhi.w	8000eb0 <__udivmoddi4+0x2b4>
 8000cde:	4684      	mov	ip, r0
 8000ce0:	1ac9      	subs	r1, r1, r3
 8000ce2:	b2a3      	uxth	r3, r4
 8000ce4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ce8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cf0:	fb08 f800 	mul.w	r8, r8, r0
 8000cf4:	45a0      	cmp	r8, r4
 8000cf6:	d907      	bls.n	8000d08 <__udivmoddi4+0x10c>
 8000cf8:	193c      	adds	r4, r7, r4
 8000cfa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x10a>
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	f200 80d9 	bhi.w	8000eb8 <__udivmoddi4+0x2bc>
 8000d06:	4618      	mov	r0, r3
 8000d08:	eba4 0408 	sub.w	r4, r4, r8
 8000d0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d10:	e7bf      	b.n	8000c92 <__udivmoddi4+0x96>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d909      	bls.n	8000d2a <__udivmoddi4+0x12e>
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	f000 80b1 	beq.w	8000e7e <__udivmoddi4+0x282>
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d22:	4630      	mov	r0, r6
 8000d24:	4631      	mov	r1, r6
 8000d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2a:	fab3 f683 	clz	r6, r3
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d14a      	bne.n	8000dc8 <__udivmoddi4+0x1cc>
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d302      	bcc.n	8000d3c <__udivmoddi4+0x140>
 8000d36:	4282      	cmp	r2, r0
 8000d38:	f200 80b8 	bhi.w	8000eac <__udivmoddi4+0x2b0>
 8000d3c:	1a84      	subs	r4, r0, r2
 8000d3e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d42:	2001      	movs	r0, #1
 8000d44:	468c      	mov	ip, r1
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	d0a8      	beq.n	8000c9c <__udivmoddi4+0xa0>
 8000d4a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d4e:	e7a5      	b.n	8000c9c <__udivmoddi4+0xa0>
 8000d50:	f1c2 0320 	rsb	r3, r2, #32
 8000d54:	fa20 f603 	lsr.w	r6, r0, r3
 8000d58:	4097      	lsls	r7, r2
 8000d5a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d62:	40d9      	lsrs	r1, r3
 8000d64:	4330      	orrs	r0, r6
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d6c:	fa1f f887 	uxth.w	r8, r7
 8000d70:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f108 	mul.w	r1, r6, r8
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x19c>
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d8a:	f080 808d 	bcs.w	8000ea8 <__udivmoddi4+0x2ac>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 808a 	bls.w	8000ea8 <__udivmoddi4+0x2ac>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	443b      	add	r3, r7
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b281      	uxth	r1, r0
 8000d9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000da0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da8:	fb00 f308 	mul.w	r3, r0, r8
 8000dac:	428b      	cmp	r3, r1
 8000dae:	d907      	bls.n	8000dc0 <__udivmoddi4+0x1c4>
 8000db0:	1879      	adds	r1, r7, r1
 8000db2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000db6:	d273      	bcs.n	8000ea0 <__udivmoddi4+0x2a4>
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d971      	bls.n	8000ea0 <__udivmoddi4+0x2a4>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	4439      	add	r1, r7
 8000dc0:	1acb      	subs	r3, r1, r3
 8000dc2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dc6:	e778      	b.n	8000cba <__udivmoddi4+0xbe>
 8000dc8:	f1c6 0c20 	rsb	ip, r6, #32
 8000dcc:	fa03 f406 	lsl.w	r4, r3, r6
 8000dd0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dd4:	431c      	orrs	r4, r3
 8000dd6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dda:	fa01 f306 	lsl.w	r3, r1, r6
 8000dde:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000de2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000de6:	431f      	orrs	r7, r3
 8000de8:	0c3b      	lsrs	r3, r7, #16
 8000dea:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dee:	fa1f f884 	uxth.w	r8, r4
 8000df2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dfa:	fb09 fa08 	mul.w	sl, r9, r8
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	fa02 f206 	lsl.w	r2, r2, r6
 8000e04:	fa00 f306 	lsl.w	r3, r0, r6
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x220>
 8000e0a:	1861      	adds	r1, r4, r1
 8000e0c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e10:	d248      	bcs.n	8000ea4 <__udivmoddi4+0x2a8>
 8000e12:	458a      	cmp	sl, r1
 8000e14:	d946      	bls.n	8000ea4 <__udivmoddi4+0x2a8>
 8000e16:	f1a9 0902 	sub.w	r9, r9, #2
 8000e1a:	4421      	add	r1, r4
 8000e1c:	eba1 010a 	sub.w	r1, r1, sl
 8000e20:	b2bf      	uxth	r7, r7
 8000e22:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e26:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e2a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e2e:	fb00 f808 	mul.w	r8, r0, r8
 8000e32:	45b8      	cmp	r8, r7
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x24a>
 8000e36:	19e7      	adds	r7, r4, r7
 8000e38:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e3c:	d22e      	bcs.n	8000e9c <__udivmoddi4+0x2a0>
 8000e3e:	45b8      	cmp	r8, r7
 8000e40:	d92c      	bls.n	8000e9c <__udivmoddi4+0x2a0>
 8000e42:	3802      	subs	r0, #2
 8000e44:	4427      	add	r7, r4
 8000e46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e4a:	eba7 0708 	sub.w	r7, r7, r8
 8000e4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e52:	454f      	cmp	r7, r9
 8000e54:	46c6      	mov	lr, r8
 8000e56:	4649      	mov	r1, r9
 8000e58:	d31a      	bcc.n	8000e90 <__udivmoddi4+0x294>
 8000e5a:	d017      	beq.n	8000e8c <__udivmoddi4+0x290>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x27a>
 8000e5e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e62:	eb67 0701 	sbc.w	r7, r7, r1
 8000e66:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e6a:	40f2      	lsrs	r2, r6
 8000e6c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e70:	40f7      	lsrs	r7, r6
 8000e72:	e9c5 2700 	strd	r2, r7, [r5]
 8000e76:	2600      	movs	r6, #0
 8000e78:	4631      	mov	r1, r6
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	462e      	mov	r6, r5
 8000e80:	4628      	mov	r0, r5
 8000e82:	e70b      	b.n	8000c9c <__udivmoddi4+0xa0>
 8000e84:	4606      	mov	r6, r0
 8000e86:	e6e9      	b.n	8000c5c <__udivmoddi4+0x60>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fd      	b.n	8000c88 <__udivmoddi4+0x8c>
 8000e8c:	4543      	cmp	r3, r8
 8000e8e:	d2e5      	bcs.n	8000e5c <__udivmoddi4+0x260>
 8000e90:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e94:	eb69 0104 	sbc.w	r1, r9, r4
 8000e98:	3801      	subs	r0, #1
 8000e9a:	e7df      	b.n	8000e5c <__udivmoddi4+0x260>
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e7d2      	b.n	8000e46 <__udivmoddi4+0x24a>
 8000ea0:	4660      	mov	r0, ip
 8000ea2:	e78d      	b.n	8000dc0 <__udivmoddi4+0x1c4>
 8000ea4:	4681      	mov	r9, r0
 8000ea6:	e7b9      	b.n	8000e1c <__udivmoddi4+0x220>
 8000ea8:	4666      	mov	r6, ip
 8000eaa:	e775      	b.n	8000d98 <__udivmoddi4+0x19c>
 8000eac:	4630      	mov	r0, r6
 8000eae:	e74a      	b.n	8000d46 <__udivmoddi4+0x14a>
 8000eb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb4:	4439      	add	r1, r7
 8000eb6:	e713      	b.n	8000ce0 <__udivmoddi4+0xe4>
 8000eb8:	3802      	subs	r0, #2
 8000eba:	443c      	add	r4, r7
 8000ebc:	e724      	b.n	8000d08 <__udivmoddi4+0x10c>
 8000ebe:	bf00      	nop

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <pid_create>:
	Author e-mail: ruben at geekfactory dot mx
 */
#include "PID.h"

PID_t pid_create(PID_t pid, float* in, float* out, float* set, float kp, float ki, float kd)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	61f8      	str	r0, [r7, #28]
 8000ecc:	61b9      	str	r1, [r7, #24]
 8000ece:	617a      	str	r2, [r7, #20]
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	ed87 0a03 	vstr	s0, [r7, #12]
 8000ed6:	edc7 0a02 	vstr	s1, [r7, #8]
 8000eda:	ed87 1a01 	vstr	s2, [r7, #4]
	pid->input = in;
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	601a      	str	r2, [r3, #0]
	pid->output = out;
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	605a      	str	r2, [r3, #4]
	pid->setpoint = set;
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	609a      	str	r2, [r3, #8]
	pid->automode = false;
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	pid_limits(pid, 0, 255);
 8000ef8:	eddf 0a11 	vldr	s1, [pc, #68]	; 8000f40 <pid_create+0x7c>
 8000efc:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000f44 <pid_create+0x80>
 8000f00:	69f8      	ldr	r0, [r7, #28]
 8000f02:	f000 f96b 	bl	80011dc <pid_limits>

	// Set default sample time to 100 ms
	pid->sampletime = 100 * (FREQUENCY / 1000);
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	2264      	movs	r2, #100	; 0x64
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c

	pid_direction(pid, E_PID_DIRECT);
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	69f8      	ldr	r0, [r7, #28]
 8000f10:	f000 fa06 	bl	8001320 <pid_direction>
	PID_tune(pid, kp, ki, kd);
 8000f14:	ed97 1a01 	vldr	s2, [r7, #4]
 8000f18:	edd7 0a02 	vldr	s1, [r7, #8]
 8000f1c:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f20:	69f8      	ldr	r0, [r7, #28]
 8000f22:	f000 f8b9 	bl	8001098 <PID_tune>

	pid->lasttime = HAL_GetTick() - pid->sampletime;
 8000f26:	f002 fd83 	bl	8003a30 <HAL_GetTick>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f30:	1ad2      	subs	r2, r2, r3
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	629a      	str	r2, [r3, #40]	; 0x28

	return pid;
 8000f36:	69fb      	ldr	r3, [r7, #28]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	437f0000 	.word	0x437f0000
 8000f44:	00000000 	.word	0x00000000

08000f48 <pid_need_compute>:

bool pid_need_compute(PID_t pid)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	// Check if the PID period has elapsed
	return(HAL_GetTick() - pid->lasttime >= pid->sampletime) ? true : false;
 8000f50:	f002 fd6e 	bl	8003a30 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5a:	1ad2      	subs	r2, r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f60:	429a      	cmp	r2, r3
 8000f62:	bf2c      	ite	cs
 8000f64:	2301      	movcs	r3, #1
 8000f66:	2300      	movcc	r3, #0
 8000f68:	b2db      	uxtb	r3, r3
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <pid_compute>:
void pid_compute(PID_t pid)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
	// Check if control is enabled
	if (!pid->automode)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 8084 	beq.w	800108e <pid_compute+0x11c>
		return ;
	
	float in = *(pid->input);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	613b      	str	r3, [r7, #16]
	// Compute error
	float error = (*(pid->setpoint)) - in;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	ed93 7a00 	vldr	s14, [r3]
 8000f96:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f9e:	edc7 7a03 	vstr	s15, [r7, #12]
	// Compute integral
	pid->iterm += (pid->Ki * error);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	ed93 7a08 	vldr	s14, [r3, #32]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	edd3 6a04 	vldr	s13, [r3, #16]
 8000fae:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	edc3 7a08 	vstr	s15, [r3, #32]
	if (pid->iterm > pid->omax)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	ed93 7a08 	vldr	s14, [r3, #32]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	edd3 7a07 	vldr	s15, [r3, #28]
 8000fcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd4:	dd04      	ble.n	8000fe0 <pid_compute+0x6e>
		pid->iterm = pid->omax;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69da      	ldr	r2, [r3, #28]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	621a      	str	r2, [r3, #32]
 8000fde:	e00e      	b.n	8000ffe <pid_compute+0x8c>
	else if (pid->iterm < pid->omin)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	ed93 7a08 	vldr	s14, [r3, #32]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff4:	d503      	bpl.n	8000ffe <pid_compute+0x8c>
		pid->iterm = pid->omin;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	699a      	ldr	r2, [r3, #24]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	621a      	str	r2, [r3, #32]
	// Compute differential on input
	float dinput = in - pid->lastin;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001004:	ed97 7a04 	vldr	s14, [r7, #16]
 8001008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100c:	edc7 7a02 	vstr	s15, [r7, #8]
	// Compute PID output
	float out = pid->Kp * error + pid->iterm - pid->Kd * dinput;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	ed93 7a03 	vldr	s14, [r3, #12]
 8001016:	edd7 7a03 	vldr	s15, [r7, #12]
 800101a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	edd3 7a08 	vldr	s15, [r3, #32]
 8001024:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	edd3 6a05 	vldr	s13, [r3, #20]
 800102e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001036:	ee77 7a67 	vsub.f32	s15, s14, s15
 800103a:	edc7 7a05 	vstr	s15, [r7, #20]
	// Apply limit to output value
	if (out > pid->omax)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	edd3 7a07 	vldr	s15, [r3, #28]
 8001044:	ed97 7a05 	vldr	s14, [r7, #20]
 8001048:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800104c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001050:	dd03      	ble.n	800105a <pid_compute+0xe8>
		out = pid->omax;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	e00c      	b.n	8001074 <pid_compute+0x102>
	else if (out < pid->omin)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001060:	ed97 7a05 	vldr	s14, [r7, #20]
 8001064:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106c:	d502      	bpl.n	8001074 <pid_compute+0x102>
		out = pid->omin;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	617b      	str	r3, [r7, #20]
	// Output to pointed variable
	(*pid->output) = out;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	601a      	str	r2, [r3, #0]
	// Keep track of some variables for next execution
	pid->lastin = in;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	625a      	str	r2, [r3, #36]	; 0x24
	pid->lasttime = HAL_GetTick();
 8001082:	f002 fcd5 	bl	8003a30 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	629a      	str	r2, [r3, #40]	; 0x28
 800108c:	e000      	b.n	8001090 <pid_compute+0x11e>
		return ;
 800108e:	bf00      	nop
}
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <PID_tune>:

void PID_tune(PID_t pid, float kp, float ki, float kd)
{
 8001098:	b480      	push	{r7}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80010a4:	edc7 0a01 	vstr	s1, [r7, #4]
 80010a8:	ed87 1a00 	vstr	s2, [r7]
	// Check for validity
	if (kp < 0 || ki < 0 || kd < 0)
 80010ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80010b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b8:	d452      	bmi.n	8001160 <PID_tune+0xc8>
 80010ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80010be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c6:	d44b      	bmi.n	8001160 <PID_tune+0xc8>
 80010c8:	edd7 7a00 	vldr	s15, [r7]
 80010cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d4:	d444      	bmi.n	8001160 <PID_tune+0xc8>
		return;
	
	//Compute sample time in seconds
	float ssec = ((float) pid->sampletime) / ((float) FREQUENCY);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010e2:	eddf 6a22 	vldr	s13, [pc, #136]	; 800116c <PID_tune+0xd4>
 80010e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ea:	edc7 7a05 	vstr	s15, [r7, #20]

	pid->Kp = kp;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	60da      	str	r2, [r3, #12]
	pid->Ki = ki * ssec;
 80010f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80010f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80010fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->Kd = kd / ssec;
 8001106:	edd7 6a00 	vldr	s13, [r7]
 800110a:	ed97 7a05 	vldr	s14, [r7, #20]
 800110e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	edc3 7a05 	vstr	s15, [r3, #20]

	if (pid->direction == E_PID_REVERSE) {
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800111e:	2b01      	cmp	r3, #1
 8001120:	d11f      	bne.n	8001162 <PID_tune+0xca>
		pid->Kp = 0 - pid->Kp;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a03 	vldr	s15, [r3, #12]
 8001128:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001170 <PID_tune+0xd8>
 800112c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = 0 - pid->Ki;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	edd3 7a04 	vldr	s15, [r3, #16]
 800113c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001170 <PID_tune+0xd8>
 8001140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = 0 - pid->Kd;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001150:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001170 <PID_tune+0xd8>
 8001154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	edc3 7a05 	vstr	s15, [r3, #20]
 800115e:	e000      	b.n	8001162 <PID_tune+0xca>
		return;
 8001160:	bf00      	nop
	}
}
 8001162:	371c      	adds	r7, #28
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	447a0000 	.word	0x447a0000
 8001170:	00000000 	.word	0x00000000

08001174 <pid_sample>:

void pid_sample(PID_t pid, uint32_t time)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
	if (time > 0) {
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d025      	beq.n	80011d0 <pid_sample+0x5c>
		float ratio = (float) (time * (FREQUENCY / 1000)) / (float) pid->sampletime;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	ee07 3a90 	vmov	s15, r3
 800118a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001192:	ee07 3a90 	vmov	s15, r3
 8001196:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800119a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800119e:	edc7 7a03 	vstr	s15, [r7, #12]
		pid->Ki *= ratio;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	ed93 7a04 	vldr	s14, [r3, #16]
 80011a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd /= ratio;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	edd3 6a05 	vldr	s13, [r3, #20]
 80011bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80011c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	edc3 7a05 	vstr	s15, [r3, #20]
		pid->sampletime = time * (FREQUENCY / 1000);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <pid_limits>:

void pid_limits(PID_t pid, float min, float max)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80011e8:	edc7 0a01 	vstr	s1, [r7, #4]
	if (min >= max) return;
 80011ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80011f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80011f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fc:	da4d      	bge.n	800129a <pid_limits+0xbe>
	pid->omin = min;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	68ba      	ldr	r2, [r7, #8]
 8001202:	619a      	str	r2, [r3, #24]
	pid->omax = max;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	61da      	str	r2, [r3, #28]
	//Adjust output to new limits
	if (pid->automode) {
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001210:	2b00      	cmp	r3, #0
 8001212:	d043      	beq.n	800129c <pid_limits+0xc0>
		if (*(pid->output) > pid->omax)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	ed93 7a00 	vldr	s14, [r3]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001222:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122a:	dd05      	ble.n	8001238 <pid_limits+0x5c>
			*(pid->output) = pid->omax;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	69d2      	ldr	r2, [r2, #28]
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e010      	b.n	800125a <pid_limits+0x7e>
		else if (*(pid->output) < pid->omin)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	ed93 7a00 	vldr	s14, [r3]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	edd3 7a06 	vldr	s15, [r3, #24]
 8001246:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124e:	d504      	bpl.n	800125a <pid_limits+0x7e>
			*(pid->output) = pid->omin;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	6992      	ldr	r2, [r2, #24]
 8001258:	601a      	str	r2, [r3, #0]

		if (pid->iterm > pid->omax)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	edd3 7a07 	vldr	s15, [r3, #28]
 8001266:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800126a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126e:	dd04      	ble.n	800127a <pid_limits+0x9e>
			pid->iterm = pid->omax;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	69da      	ldr	r2, [r3, #28]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	621a      	str	r2, [r3, #32]
 8001278:	e010      	b.n	800129c <pid_limits+0xc0>
		else if (pid->iterm < pid->omin)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	edd3 7a06 	vldr	s15, [r3, #24]
 8001286:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d505      	bpl.n	800129c <pid_limits+0xc0>
			pid->iterm = pid->omin;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	699a      	ldr	r2, [r3, #24]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	621a      	str	r2, [r3, #32]
 8001298:	e000      	b.n	800129c <pid_limits+0xc0>
	if (min >= max) return;
 800129a:	bf00      	nop
	}
}
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <pid_auto>:

void pid_auto(PID_t pid)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
	// If going from manual to auto
	if (!pid->automode) {
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d12c      	bne.n	8001312 <pid_auto+0x6c>
		pid->iterm = *(pid->output);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	621a      	str	r2, [r3, #32]
		pid->lastin = *(pid->input);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	625a      	str	r2, [r3, #36]	; 0x24
		if (pid->iterm > pid->omax)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	ed93 7a08 	vldr	s14, [r3, #32]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	edd3 7a07 	vldr	s15, [r3, #28]
 80012d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e0:	dd04      	ble.n	80012ec <pid_auto+0x46>
			pid->iterm = pid->omax;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69da      	ldr	r2, [r3, #28]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	621a      	str	r2, [r3, #32]
 80012ea:	e00e      	b.n	800130a <pid_auto+0x64>
		else if (pid->iterm < pid->omin)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	ed93 7a08 	vldr	s14, [r3, #32]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	edd3 7a06 	vldr	s15, [r3, #24]
 80012f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001300:	d503      	bpl.n	800130a <pid_auto+0x64>
			pid->iterm = pid->omin;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	699a      	ldr	r2, [r3, #24]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	621a      	str	r2, [r3, #32]
		pid->automode = true;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <pid_direction>:
{
	pid->automode = false;
}

void pid_direction(PID_t pid, enum pid_control_directions dir)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	70fb      	strb	r3, [r7, #3]
	if (pid->automode && pid->direction != dir) {
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001332:	2b00      	cmp	r3, #0
 8001334:	d023      	beq.n	800137e <pid_direction+0x5e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800133c:	78fa      	ldrb	r2, [r7, #3]
 800133e:	429a      	cmp	r2, r3
 8001340:	d01d      	beq.n	800137e <pid_direction+0x5e>
		pid->Kp = (0 - pid->Kp);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	edd3 7a03 	vldr	s15, [r3, #12]
 8001348:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001394 <pid_direction+0x74>
 800134c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	edc3 7a03 	vstr	s15, [r3, #12]
		pid->Ki = (0 - pid->Ki);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	edd3 7a04 	vldr	s15, [r3, #16]
 800135c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001394 <pid_direction+0x74>
 8001360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	edc3 7a04 	vstr	s15, [r3, #16]
		pid->Kd = (0 - pid->Kd);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001370:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001394 <pid_direction+0x74>
 8001374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	edc3 7a05 	vstr	s15, [r3, #20]
	}
	pid->direction = dir;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	78fa      	ldrb	r2, [r7, #3]
 8001382:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	00000000 	.word	0x00000000

08001398 <hubMotor_Init>:
#include "X2_6010S.h"
extern uint8_t receive_buf[15];



void hubMotor_Init(){
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HubM_IO_SON_GPIO_Port, HubM_IO_SON_Pin, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a2:	4808      	ldr	r0, [pc, #32]	; (80013c4 <hubMotor_Init+0x2c>)
 80013a4:	f004 f838 	bl	8005418 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_NOT_GPIO_Port, HubM_IO_NOT_Pin, GPIO_PIN_RESET);
 80013a8:	2200      	movs	r2, #0
 80013aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <hubMotor_Init+0x2c>)
 80013b0:	f004 f832 	bl	8005418 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HubM_IO_POT_GPIO_Port, HubM_IO_POT_Pin, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ba:	4802      	ldr	r0, [pc, #8]	; (80013c4 <hubMotor_Init+0x2c>)
 80013bc:	f004 f82c 	bl	8005418 <HAL_GPIO_WritePin>
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40020c00 	.word	0x40020c00

080013c8 <send_HubMotor>:

void send_HubMotor(float m1_ang_speed, float m2_ang_speed){
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08c      	sub	sp, #48	; 0x30
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80013d2:	edc7 0a00 	vstr	s1, [r7]
	int16_t motor1_speed, motor2_speed;
	//convert velocity into pulse/second
	motor1_speed = -(int16_t)(m1_ang_speed * 4096.0 / (2 * M_PI));
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff f86e 	bl	80004b8 <__aeabi_f2d>
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	4b63      	ldr	r3, [pc, #396]	; (8001570 <send_HubMotor+0x1a8>)
 80013e2:	f7ff f8c1 	bl	8000568 <__aeabi_dmul>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	a35e      	add	r3, pc, #376	; (adr r3, 8001568 <send_HubMotor+0x1a0>)
 80013f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f4:	f7ff f9e2 	bl	80007bc <__aeabi_ddiv>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4610      	mov	r0, r2
 80013fe:	4619      	mov	r1, r3
 8001400:	f7ff fb4c 	bl	8000a9c <__aeabi_d2iz>
 8001404:	4603      	mov	r3, r0
 8001406:	b21b      	sxth	r3, r3
 8001408:	b29b      	uxth	r3, r3
 800140a:	425b      	negs	r3, r3
 800140c:	b29b      	uxth	r3, r3
 800140e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	motor2_speed = (int16_t)(m2_ang_speed * 4096.0/ (2 * M_PI));
 8001410:	6838      	ldr	r0, [r7, #0]
 8001412:	f7ff f851 	bl	80004b8 <__aeabi_f2d>
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	4b55      	ldr	r3, [pc, #340]	; (8001570 <send_HubMotor+0x1a8>)
 800141c:	f7ff f8a4 	bl	8000568 <__aeabi_dmul>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	a34f      	add	r3, pc, #316	; (adr r3, 8001568 <send_HubMotor+0x1a0>)
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	f7ff f9c5 	bl	80007bc <__aeabi_ddiv>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	f7ff fb2f 	bl	8000a9c <__aeabi_d2iz>
 800143e:	4603      	mov	r3, r0
 8001440:	85bb      	strh	r3, [r7, #44]	; 0x2c
//	motor1_speed = -(int16_t)(m1_speed);
//	motor2_speed = (int16_t)(m2_speed);

	uint8_t send_buf[15];
	send_buf[0] = 0xAA;
 8001442:	23aa      	movs	r3, #170	; 0xaa
 8001444:	733b      	strb	r3, [r7, #12]
	send_buf[1] = 0xA4;
 8001446:	23a4      	movs	r3, #164	; 0xa4
 8001448:	737b      	strb	r3, [r7, #13]
	send_buf[2] = 0x0E;
 800144a:	230e      	movs	r3, #14
 800144c:	73bb      	strb	r3, [r7, #14]
	send_buf[3] = 0x00;
 800144e:	2300      	movs	r3, #0
 8001450:	73fb      	strb	r3, [r7, #15]
	send_buf[4] = MOTOR_ENABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	743b      	strb	r3, [r7, #16]
	send_buf[5] = MOTOR_ENCODER_FEEDBACK;
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	747b      	strb	r3, [r7, #17]

	//Set acceleration to constant by default
	//time taken from 0 to 1000rpm
	uint16_t acceleration = 200;
 800145a:	23c8      	movs	r3, #200	; 0xc8
 800145c:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t msb_acce = (uint8_t)((acceleration & 0xFF00) >> 8);
 800145e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	b29b      	uxth	r3, r3
 8001464:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t lsb_acce = (uint8_t)(acceleration & 0x00FF);
 8001468:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800146a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	send_buf[6] = lsb_acce;
 800146e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001472:	74bb      	strb	r3, [r7, #18]
	send_buf[7] = msb_acce;
 8001474:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001478:	74fb      	strb	r3, [r7, #19]

	//Set maximum torque
	//Value: 0 - 450 (300 by default)
	uint16_t max_torque = 350;
 800147a:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800147e:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t msb_max_torque = (uint8_t)((max_torque & 0xFF00) >> 8);
 8001480:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001482:	0a1b      	lsrs	r3, r3, #8
 8001484:	b29b      	uxth	r3, r3
 8001486:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t lsb_max_torque = (uint8_t)(max_torque & 0x00FF);
 800148a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800148c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	send_buf[8] = lsb_max_torque;
 8001490:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001494:	753b      	strb	r3, [r7, #20]
	send_buf[9] = msb_max_torque;
 8001496:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800149a:	757b      	strb	r3, [r7, #21]

	//Set motor1 speed
	uint8_t msb_motor1_speed = (uint8_t)((motor1_speed & 0xFF00) >> 8);
 800149c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80014a0:	121b      	asrs	r3, r3, #8
 80014a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t lsb_motor1_speed = (uint8_t)(motor1_speed & 0x00FF);
 80014a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	send_buf[10] = lsb_motor1_speed;
 80014ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80014b0:	75bb      	strb	r3, [r7, #22]
	send_buf[11] = msb_motor1_speed;
 80014b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014b6:	75fb      	strb	r3, [r7, #23]

	//Set motor2 speed
	uint8_t msb_motor2_speed = (uint8_t)((motor2_speed & 0xFF00) >> 8);
 80014b8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80014bc:	121b      	asrs	r3, r3, #8
 80014be:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t lsb_motor2_speed = (uint8_t)(motor2_speed & 0x00FF);
 80014c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014c4:	f887 3020 	strb.w	r3, [r7, #32]
	send_buf[12] = lsb_motor2_speed;
 80014c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014cc:	763b      	strb	r3, [r7, #24]
	send_buf[13] = msb_motor2_speed;
 80014ce:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80014d2:	767b      	strb	r3, [r7, #25]

	//checksum byte
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 80014d4:	7b3b      	ldrb	r3, [r7, #12]
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	7b7b      	ldrb	r3, [r7, #13]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	4413      	add	r3, r2
 80014de:	b29a      	uxth	r2, r3
 80014e0:	7bbb      	ldrb	r3, [r7, #14]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	4413      	add	r3, r2
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	4413      	add	r3, r2
 80014ee:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[4] + (uint16_t)send_buf[5] + (uint16_t)send_buf[6]
 80014f0:	7c3b      	ldrb	r3, [r7, #16]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	4413      	add	r3, r2
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	7c7b      	ldrb	r3, [r7, #17]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	4413      	add	r3, r2
 80014fe:	b29a      	uxth	r2, r3
 8001500:	7cbb      	ldrb	r3, [r7, #18]
 8001502:	b29b      	uxth	r3, r3
 8001504:	4413      	add	r3, r2
 8001506:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[7] + (uint16_t)send_buf[8] + (uint16_t)send_buf[9]
 8001508:	7cfb      	ldrb	r3, [r7, #19]
 800150a:	b29b      	uxth	r3, r3
 800150c:	4413      	add	r3, r2
 800150e:	b29a      	uxth	r2, r3
 8001510:	7d3b      	ldrb	r3, [r7, #20]
 8001512:	b29b      	uxth	r3, r3
 8001514:	4413      	add	r3, r2
 8001516:	b29a      	uxth	r2, r3
 8001518:	7d7b      	ldrb	r3, [r7, #21]
 800151a:	b29b      	uxth	r3, r3
 800151c:	4413      	add	r3, r2
 800151e:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[10] + (uint16_t)send_buf[11] + (uint16_t)send_buf[12]
 8001520:	7dbb      	ldrb	r3, [r7, #22]
 8001522:	b29b      	uxth	r3, r3
 8001524:	4413      	add	r3, r2
 8001526:	b29a      	uxth	r2, r3
 8001528:	7dfb      	ldrb	r3, [r7, #23]
 800152a:	b29b      	uxth	r3, r3
 800152c:	4413      	add	r3, r2
 800152e:	b29a      	uxth	r2, r3
 8001530:	7e3b      	ldrb	r3, [r7, #24]
 8001532:	b29b      	uxth	r3, r3
 8001534:	4413      	add	r3, r2
 8001536:	b29a      	uxth	r2, r3
					+ (uint16_t)send_buf[13];
 8001538:	7e7b      	ldrb	r3, [r7, #25]
 800153a:	b29b      	uxth	r3, r3
	uint16_t sum = (uint16_t)send_buf[0] + (uint16_t)send_buf[1] + (uint16_t)send_buf[2] + (uint16_t)send_buf[3]
 800153c:	4413      	add	r3, r2
 800153e:	83fb      	strh	r3, [r7, #30]

	send_buf[14] = (uint8_t)(sum & 0x00FF);
 8001540:	8bfb      	ldrh	r3, [r7, #30]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	76bb      	strb	r3, [r7, #26]

	HAL_UART_Transmit(&huart3, send_buf, 15, 50);
 8001546:	f107 010c 	add.w	r1, r7, #12
 800154a:	2332      	movs	r3, #50	; 0x32
 800154c:	220f      	movs	r2, #15
 800154e:	4809      	ldr	r0, [pc, #36]	; (8001574 <send_HubMotor+0x1ac>)
 8001550:	f006 f8fd 	bl	800774e <HAL_UART_Transmit>
	HAL_UART_Receive_DMA(&huart3, receive_buf, 15);
 8001554:	220f      	movs	r2, #15
 8001556:	4908      	ldr	r1, [pc, #32]	; (8001578 <send_HubMotor+0x1b0>)
 8001558:	4806      	ldr	r0, [pc, #24]	; (8001574 <send_HubMotor+0x1ac>)
 800155a:	f006 f991 	bl	8007880 <HAL_UART_Receive_DMA>
}
 800155e:	bf00      	nop
 8001560:	3730      	adds	r7, #48	; 0x30
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	54442d18 	.word	0x54442d18
 800156c:	401921fb 	.word	0x401921fb
 8001570:	40b00000 	.word	0x40b00000
 8001574:	200005e4 	.word	0x200005e4
 8001578:	2000046c 	.word	0x2000046c

0800157c <ADC_Init>:
SPI_HandleTypeDef hspi1;

//ADCHandle         hADC;

void ADC_Init()
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0

	//Delay for SPI encoder to startup
//	HAL_Delay(100);

	/*Reset AD7606*/
	AD7606_CS_HIGH;
 8001580:	2201      	movs	r2, #1
 8001582:	2110      	movs	r1, #16
 8001584:	481c      	ldr	r0, [pc, #112]	; (80015f8 <ADC_Init+0x7c>)
 8001586:	f003 ff47 	bl	8005418 <HAL_GPIO_WritePin>
	AD7606_CV_LOW;
 800158a:	2200      	movs	r2, #0
 800158c:	2120      	movs	r1, #32
 800158e:	481b      	ldr	r0, [pc, #108]	; (80015fc <ADC_Init+0x80>)
 8001590:	f003 ff42 	bl	8005418 <HAL_GPIO_WritePin>

	AD7606_RST_LOW;
 8001594:	2200      	movs	r2, #0
 8001596:	2110      	movs	r1, #16
 8001598:	4818      	ldr	r0, [pc, #96]	; (80015fc <ADC_Init+0x80>)
 800159a:	f003 ff3d 	bl	8005418 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800159e:	2001      	movs	r0, #1
 80015a0:	f002 fa52 	bl	8003a48 <HAL_Delay>
	AD7606_RST_HIGH;
 80015a4:	2201      	movs	r2, #1
 80015a6:	2110      	movs	r1, #16
 80015a8:	4814      	ldr	r0, [pc, #80]	; (80015fc <ADC_Init+0x80>)
 80015aa:	f003 ff35 	bl	8005418 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015ae:	2001      	movs	r0, #1
 80015b0:	f002 fa4a 	bl	8003a48 <HAL_Delay>
	AD7606_RST_LOW;
 80015b4:	2200      	movs	r2, #0
 80015b6:	2110      	movs	r1, #16
 80015b8:	4810      	ldr	r0, [pc, #64]	; (80015fc <ADC_Init+0x80>)
 80015ba:	f003 ff2d 	bl	8005418 <HAL_GPIO_WritePin>

	/*Set analog input range*/
	AD7606_RANGE_LOW_5V;
 80015be:	2200      	movs	r2, #0
 80015c0:	2101      	movs	r1, #1
 80015c2:	480e      	ldr	r0, [pc, #56]	; (80015fc <ADC_Init+0x80>)
 80015c4:	f003 ff28 	bl	8005418 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015c8:	2001      	movs	r0, #1
 80015ca:	f002 fa3d 	bl	8003a48 <HAL_Delay>

	/*Set oversampling ratio to 32*/
	HAL_GPIO_WritePin(AD7606_OS2_PIN_Port, AD7606_OS2_PIN, GPIO_PIN_SET);
 80015ce:	2201      	movs	r2, #1
 80015d0:	2102      	movs	r1, #2
 80015d2:	480a      	ldr	r0, [pc, #40]	; (80015fc <ADC_Init+0x80>)
 80015d4:	f003 ff20 	bl	8005418 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS1_PIN_Port, AD7606_OS1_PIN, GPIO_PIN_RESET);
 80015d8:	2200      	movs	r2, #0
 80015da:	2104      	movs	r1, #4
 80015dc:	4807      	ldr	r0, [pc, #28]	; (80015fc <ADC_Init+0x80>)
 80015de:	f003 ff1b 	bl	8005418 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(AD7606_OS0_PIN_Port, AD7606_OS0_PIN, GPIO_PIN_SET);
 80015e2:	2201      	movs	r2, #1
 80015e4:	2108      	movs	r1, #8
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <ADC_Init+0x80>)
 80015e8:	f003 ff16 	bl	8005418 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015ec:	2001      	movs	r0, #1
 80015ee:	f002 fa2b 	bl	8003a48 <HAL_Delay>

//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
//	HAL_Delay(500);
//	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40020800 	.word	0x40020800

08001600 <ADC_DataRequest>:

void ADC_DataRequest(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	AD7606_CV_LOW;
 8001604:	2200      	movs	r2, #0
 8001606:	2120      	movs	r1, #32
 8001608:	4804      	ldr	r0, [pc, #16]	; (800161c <ADC_DataRequest+0x1c>)
 800160a:	f003 ff05 	bl	8005418 <HAL_GPIO_WritePin>
	AD7606_CV_HIGH;
 800160e:	2201      	movs	r2, #1
 8001610:	2120      	movs	r1, #32
 8001612:	4802      	ldr	r0, [pc, #8]	; (800161c <ADC_DataRequest+0x1c>)
 8001614:	f003 ff00 	bl	8005418 <HAL_GPIO_WritePin>
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40020800 	.word	0x40020800

08001620 <ADC_Read>:


void ADC_Read(int16_t *data)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	AD7606_CS_LOW;
 8001628:	2200      	movs	r2, #0
 800162a:	2110      	movs	r1, #16
 800162c:	4808      	ldr	r0, [pc, #32]	; (8001650 <ADC_Read+0x30>)
 800162e:	f003 fef3 	bl	8005418 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (uint8_t *)data, CHANNEL_NUM, 2);
 8001632:	2302      	movs	r3, #2
 8001634:	2208      	movs	r2, #8
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	4806      	ldr	r0, [pc, #24]	; (8001654 <ADC_Read+0x34>)
 800163a:	f004 fdfd 	bl	8006238 <HAL_SPI_Receive>
	AD7606_CS_HIGH;
 800163e:	2201      	movs	r2, #1
 8001640:	2110      	movs	r1, #16
 8001642:	4803      	ldr	r0, [pc, #12]	; (8001650 <ADC_Read+0x30>)
 8001644:	f003 fee8 	bl	8005418 <HAL_GPIO_WritePin>
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40020000 	.word	0x40020000
 8001654:	200001d4 	.word	0x200001d4

08001658 <bd25l_Init>:
	.DIR_pin	= ClimbM_IO_FR2_Pin,
	.pole		= 4,
	.ID		= 2,
};

void bd25l_Init(Motor_TypeDef* motor){
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	enableMotor(motor, 0);
 8001660:	2100      	movs	r1, #0
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f808 	bl	8001678 <enableMotor>
	brakeMotor(motor, 0);
 8001668:	2100      	movs	r1, #0
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f828 	bl	80016c0 <brakeMotor>
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <enableMotor>:
	brakeMotor(motor, 1);
	enableMotor(motor, 0);

}

void enableMotor(Motor_TypeDef* motor, uint8_t state){
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->EN_port, motor->EN_pin, state);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800168c:	78fa      	ldrb	r2, [r7, #3]
 800168e:	4619      	mov	r1, r3
 8001690:	f003 fec2 	bl	8005418 <HAL_GPIO_WritePin>
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <emBrakeMotor>:

void emBrakeMotor(uint8_t state){
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(Brake_Wheel_GPIO_Port, Brake_Wheel_Pin, state);
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	461a      	mov	r2, r3
 80016aa:	2108      	movs	r1, #8
 80016ac:	4803      	ldr	r0, [pc, #12]	; (80016bc <emBrakeMotor+0x20>)
 80016ae:	f003 feb3 	bl	8005418 <HAL_GPIO_WritePin>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40020c00 	.word	0x40020c00

080016c0 <brakeMotor>:

void brakeMotor(Motor_TypeDef* motor, uint8_t state){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->BRK_port, motor->BRK_pin, state);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69d8      	ldr	r0, [r3, #28]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	8c1b      	ldrh	r3, [r3, #32]
 80016d4:	78fa      	ldrb	r2, [r7, #3]
 80016d6:	4619      	mov	r1, r3
 80016d8:	f003 fe9e 	bl	8005418 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(motor->outputPWM, motor->PWM_channel);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	695a      	ldr	r2, [r3, #20]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	8b1b      	ldrh	r3, [r3, #24]
 80016e4:	4619      	mov	r1, r3
 80016e6:	4610      	mov	r0, r2
 80016e8:	f005 fa24 	bl	8006b34 <HAL_TIM_PWM_Stop>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <setMotorDir>:

void setMotorDir(Motor_TypeDef* motor, uint8_t dir){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin, dir);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001708:	78fa      	ldrb	r2, [r7, #3]
 800170a:	4619      	mov	r1, r3
 800170c:	f003 fe84 	bl	8005418 <HAL_GPIO_WritePin>
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <setMotorSpeed>:

void setMotorSpeed(Motor_TypeDef* motor, float speed){
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	ed87 0a00 	vstr	s0, [r7]

	float frequency = 0;
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
	uint16_t period;
	uint32_t duty_cycle; //50%

	if (speed > 100) speed = 100.0;
 800172a:	edd7 7a00 	vldr	s15, [r7]
 800172e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001860 <setMotorSpeed+0x148>
 8001732:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173a:	dd01      	ble.n	8001740 <setMotorSpeed+0x28>
 800173c:	4b49      	ldr	r3, [pc, #292]	; (8001864 <setMotorSpeed+0x14c>)
 800173e:	603b      	str	r3, [r7, #0]
	//Frequency equation derived from data sheet
	frequency = (uint16_t)((speed - 0.2597)/0.02494);
 8001740:	6838      	ldr	r0, [r7, #0]
 8001742:	f7fe feb9 	bl	80004b8 <__aeabi_f2d>
 8001746:	a340      	add	r3, pc, #256	; (adr r3, 8001848 <setMotorSpeed+0x130>)
 8001748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174c:	f7fe fd54 	bl	80001f8 <__aeabi_dsub>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	a33d      	add	r3, pc, #244	; (adr r3, 8001850 <setMotorSpeed+0x138>)
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	f7ff f82d 	bl	80007bc <__aeabi_ddiv>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	f7ff f9bf 	bl	8000aec <__aeabi_d2uiz>
 800176e:	4603      	mov	r3, r0
 8001770:	b29b      	uxth	r3, r3
 8001772:	ee07 3a90 	vmov	s15, r3
 8001776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800177a:	edc7 7a05 	vstr	s15, [r7, #20]
	period = (int)(1e6/frequency)+1;
 800177e:	6978      	ldr	r0, [r7, #20]
 8001780:	f7fe fe9a 	bl	80004b8 <__aeabi_f2d>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	a133      	add	r1, pc, #204	; (adr r1, 8001858 <setMotorSpeed+0x140>)
 800178a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800178e:	f7ff f815 	bl	80007bc <__aeabi_ddiv>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	f7ff f97f 	bl	8000a9c <__aeabi_d2iz>
 800179e:	4603      	mov	r3, r0
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	3301      	adds	r3, #1
 80017a4:	827b      	strh	r3, [r7, #18]
	duty_cycle = period / 2;
 80017a6:	8a7b      	ldrh	r3, [r7, #18]
 80017a8:	085b      	lsrs	r3, r3, #1
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	60fb      	str	r3, [r7, #12]
//	      motor->outputPWM->Instance->CCR4 = duty_cycle;
//
//	    HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
//	}

	if (speed<4){
 80017ae:	edd7 7a00 	vldr	s15, [r7]
 80017b2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80017b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017be:	d503      	bpl.n	80017c8 <setMotorSpeed+0xb0>
		brakeMotor(motor, 1);
 80017c0:	2101      	movs	r1, #1
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ff7c 	bl	80016c0 <brakeMotor>
	}



	motor->outputPWM->Instance->ARR = period;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	8a7a      	ldrh	r2, [r7, #18]
 80017d0:	62da      	str	r2, [r3, #44]	; 0x2c
	if(motor->PWM_channel == TIM_CHANNEL_1)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	8b1b      	ldrh	r3, [r3, #24]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d105      	bne.n	80017e6 <setMotorSpeed+0xce>
	  motor->outputPWM->Instance->CCR1 = duty_cycle;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	635a      	str	r2, [r3, #52]	; 0x34
 80017e4:	e01c      	b.n	8001820 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_2)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	8b1b      	ldrh	r3, [r3, #24]
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d105      	bne.n	80017fa <setMotorSpeed+0xe2>
		  motor->outputPWM->Instance->CCR2 = duty_cycle;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	639a      	str	r2, [r3, #56]	; 0x38
 80017f8:	e012      	b.n	8001820 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_3)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	8b1b      	ldrh	r3, [r3, #24]
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d105      	bne.n	800180e <setMotorSpeed+0xf6>
		  motor->outputPWM->Instance->CCR3 = duty_cycle;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	63da      	str	r2, [r3, #60]	; 0x3c
 800180c:	e008      	b.n	8001820 <setMotorSpeed+0x108>
	else if(motor->PWM_channel == TIM_CHANNEL_4)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	8b1b      	ldrh	r3, [r3, #24]
 8001812:	2b0c      	cmp	r3, #12
 8001814:	d104      	bne.n	8001820 <setMotorSpeed+0x108>
	  motor->outputPWM->Instance->CCR4 = duty_cycle;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(motor->outputPWM, motor->PWM_channel);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	695a      	ldr	r2, [r3, #20]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	8b1b      	ldrh	r3, [r3, #24]
 8001828:	4619      	mov	r1, r3
 800182a:	4610      	mov	r0, r2
 800182c:	f005 f944 	bl	8006ab8 <HAL_TIM_PWM_Start>



	motor->outputPWM->Instance->CNT = 0;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2200      	movs	r2, #0
 8001838:	625a      	str	r2, [r3, #36]	; 0x24
}
 800183a:	bf00      	nop
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	f3af 8000 	nop.w
 8001848:	bfb15b57 	.word	0xbfb15b57
 800184c:	3fd09eec 	.word	0x3fd09eec
 8001850:	1172ef0b 	.word	0x1172ef0b
 8001854:	3f9989df 	.word	0x3f9989df
 8001858:	00000000 	.word	0x00000000
 800185c:	412e8480 	.word	0x412e8480
 8001860:	42c80000 	.word	0x42c80000
 8001864:	42c80000 	.word	0x42c80000

08001868 <runMotor>:
		return -1;
	}
	else return 1;
}

void runMotor(Motor_TypeDef* motor, float speed){
 8001868:	b5b0      	push	{r4, r5, r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	ed87 0a00 	vstr	s0, [r7]
  //	    - positive speed Lift DOWN
  //	    - negative speed lift UP
    if (motor->ID == 1){
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800187a:	2b01      	cmp	r3, #1
 800187c:	d129      	bne.n	80018d2 <runMotor+0x6a>
	if (fabs(speed)/speed  >= 0)
 800187e:	edd7 7a00 	vldr	s15, [r7]
 8001882:	eef0 7ae7 	vabs.f32	s15, s15
 8001886:	ee17 0a90 	vmov	r0, s15
 800188a:	f7fe fe15 	bl	80004b8 <__aeabi_f2d>
 800188e:	4604      	mov	r4, r0
 8001890:	460d      	mov	r5, r1
 8001892:	6838      	ldr	r0, [r7, #0]
 8001894:	f7fe fe10 	bl	80004b8 <__aeabi_f2d>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4620      	mov	r0, r4
 800189e:	4629      	mov	r1, r5
 80018a0:	f7fe ff8c 	bl	80007bc <__aeabi_ddiv>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	f7ff f8de 	bl	8000a74 <__aeabi_dcmpge>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d004      	beq.n	80018c8 <runMotor+0x60>
	      setMotorDir(motor, 0);
 80018be:	2100      	movs	r1, #0
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff17 	bl	80016f4 <setMotorDir>
 80018c6:	e032      	b.n	800192e <runMotor+0xc6>
	else
	  setMotorDir(motor, 1);
 80018c8:	2101      	movs	r1, #1
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ff12 	bl	80016f4 <setMotorDir>
 80018d0:	e02d      	b.n	800192e <runMotor+0xc6>
    }
    else if (motor->ID == 2){
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d128      	bne.n	800192e <runMotor+0xc6>
	if (fabs(speed)/speed  >= 0)
 80018dc:	edd7 7a00 	vldr	s15, [r7]
 80018e0:	eef0 7ae7 	vabs.f32	s15, s15
 80018e4:	ee17 0a90 	vmov	r0, s15
 80018e8:	f7fe fde6 	bl	80004b8 <__aeabi_f2d>
 80018ec:	4604      	mov	r4, r0
 80018ee:	460d      	mov	r5, r1
 80018f0:	6838      	ldr	r0, [r7, #0]
 80018f2:	f7fe fde1 	bl	80004b8 <__aeabi_f2d>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4620      	mov	r0, r4
 80018fc:	4629      	mov	r1, r5
 80018fe:	f7fe ff5d 	bl	80007bc <__aeabi_ddiv>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	f7ff f8af 	bl	8000a74 <__aeabi_dcmpge>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d004      	beq.n	8001926 <runMotor+0xbe>
	  setMotorDir(motor, 1);
 800191c:	2101      	movs	r1, #1
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff fee8 	bl	80016f4 <setMotorDir>
 8001924:	e003      	b.n	800192e <runMotor+0xc6>
	else
	  setMotorDir(motor, 0);
 8001926:	2100      	movs	r1, #0
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff fee3 	bl	80016f4 <setMotorDir>
    }

    HAL_Delay(50);
 800192e:	2032      	movs	r0, #50	; 0x32
 8001930:	f002 f88a 	bl	8003a48 <HAL_Delay>
    brakeMotor(motor, 0);
 8001934:	2100      	movs	r1, #0
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff fec2 	bl	80016c0 <brakeMotor>
    setMotorSpeed(motor, fabs(speed));
 800193c:	edd7 7a00 	vldr	s15, [r7]
 8001940:	eef0 7ae7 	vabs.f32	s15, s15
 8001944:	eeb0 0a67 	vmov.f32	s0, s15
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff fee5 	bl	8001718 <setMotorSpeed>

}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bdb0      	pop	{r4, r5, r7, pc}

08001956 <GPIO_Digital_Filtered_Input>:
 */

#include "button.h"

uint8_t GPIO_Digital_Filtered_Input(Button_TypeDef* hgpio, uint32_t debounce_time)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
	// read the state of the switch into a local variable (LOW, when the button is not pressed)
	hgpio->curRead = HAL_GPIO_ReadPin(hgpio->gpioPort, hgpio->gpioPin);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	889b      	ldrh	r3, [r3, #4]
 8001968:	4619      	mov	r1, r3
 800196a:	4610      	mov	r0, r2
 800196c:	f003 fd3c 	bl	80053e8 <HAL_GPIO_ReadPin>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	719a      	strb	r2, [r3, #6]
	//check if the button was pressed
	if (hgpio->curRead != hgpio->preRead)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	799a      	ldrb	r2, [r3, #6]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	79db      	ldrb	r3, [r3, #7]
 8001980:	429a      	cmp	r2, r3
 8001982:	d004      	beq.n	800198e <GPIO_Digital_Filtered_Input+0x38>
		// reset the debouncing timer
		hgpio->lastDebounceTime = HAL_GetTick();
 8001984:	f002 f854 	bl	8003a30 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	60da      	str	r2, [r3, #12]
	// whatever the reading is at, it's been there for longer than the debounce delay, so the current value is safe
//	&& (hgpio->curRead != hgpio->state)
	if (((HAL_GetTick() - hgpio->lastDebounceTime) > debounce_time) )
 800198e:	f002 f84f 	bl	8003a30 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d209      	bcs.n	80019b4 <GPIO_Digital_Filtered_Input+0x5e>
	{
		hgpio->state = hgpio->curRead;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	799a      	ldrb	r2, [r3, #6]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	721a      	strb	r2, [r3, #8]
		
		if (hgpio->state == GPIO_PIN_SET) //Effective only when Pin is RESET
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	7a1b      	ldrb	r3, [r3, #8]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <GPIO_Digital_Filtered_Input+0x5e>
		{
			return GPIO_PIN_SET;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e004      	b.n	80019be <GPIO_Digital_Filtered_Input+0x68>
		}
	}
	// Update the last button read
	hgpio->preRead = hgpio->curRead;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	799a      	ldrb	r2, [r3, #6]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	71da      	strb	r2, [r3, #7]
	return GPIO_PIN_RESET;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80019ce:	4b30      	ldr	r3, [pc, #192]	; (8001a90 <MX_CAN1_Init+0xc8>)
 80019d0:	4a30      	ldr	r2, [pc, #192]	; (8001a94 <MX_CAN1_Init+0xcc>)
 80019d2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 80019d4:	4b2e      	ldr	r3, [pc, #184]	; (8001a90 <MX_CAN1_Init+0xc8>)
 80019d6:	2209      	movs	r2, #9
 80019d8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80019da:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <MX_CAN1_Init+0xc8>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80019e0:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <MX_CAN1_Init+0xc8>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80019e6:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <MX_CAN1_Init+0xc8>)
 80019e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019ec:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80019ee:	4b28      	ldr	r3, [pc, #160]	; (8001a90 <MX_CAN1_Init+0xc8>)
 80019f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019f4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80019f6:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <MX_CAN1_Init+0xc8>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80019fc:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <MX_CAN1_Init+0xc8>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001a02:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <MX_CAN1_Init+0xc8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a08:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <MX_CAN1_Init+0xc8>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a0e:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <MX_CAN1_Init+0xc8>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a14:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <MX_CAN1_Init+0xc8>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a1a:	481d      	ldr	r0, [pc, #116]	; (8001a90 <MX_CAN1_Init+0xc8>)
 8001a1c:	f002 f838 	bl	8003a90 <HAL_CAN_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001a26:	f001 fa33 	bl	8002e90 <Error_Handler>
  }

  /* USER CODE BEGIN CAN1_Init 2 */
  	CAN_FilterTypeDef canfil_1;
  	canfil_1.FilterBank = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  	canfil_1.FilterMode = CAN_FILTERMODE_IDMASK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
  	canfil_1.FilterScale = CAN_FILTERSCALE_32BIT;
 8001a32:	2301      	movs	r3, #1
 8001a34:	61fb      	str	r3, [r7, #28]
  	canfil_1.FilterIdHigh = 0x0000;
 8001a36:	2300      	movs	r3, #0
 8001a38:	603b      	str	r3, [r7, #0]
  	canfil_1.FilterIdLow = 0x0000;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
  	canfil_1.FilterMaskIdHigh = 0x0000;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60bb      	str	r3, [r7, #8]
  	canfil_1.FilterMaskIdLow = 0x0000;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
  	canfil_1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
  	canfil_1.FilterActivation = CAN_FILTER_ENABLE;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	623b      	str	r3, [r7, #32]
  	canfil_1.SlaveStartFilterBank = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24

  	if (HAL_CAN_ConfigFilter(&hcan1, &canfil_1) != HAL_OK)
 8001a52:	463b      	mov	r3, r7
 8001a54:	4619      	mov	r1, r3
 8001a56:	480e      	ldr	r0, [pc, #56]	; (8001a90 <MX_CAN1_Init+0xc8>)
 8001a58:	f002 f916 	bl	8003c88 <HAL_CAN_ConfigFilter>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_CAN1_Init+0x9e>
  		Error_Handler();
 8001a62:	f001 fa15 	bl	8002e90 <Error_Handler>

  	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING))
 8001a66:	2102      	movs	r1, #2
 8001a68:	4809      	ldr	r0, [pc, #36]	; (8001a90 <MX_CAN1_Init+0xc8>)
 8001a6a:	f002 fc1e 	bl	80042aa <HAL_CAN_ActivateNotification>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <MX_CAN1_Init+0xb2>
  		return Error_Handler();
 8001a74:	f001 fa0c 	bl	8002e90 <Error_Handler>
 8001a78:	e007      	b.n	8001a8a <MX_CAN1_Init+0xc2>

  	if (HAL_CAN_Start(&hcan1))
 8001a7a:	4805      	ldr	r0, [pc, #20]	; (8001a90 <MX_CAN1_Init+0xc8>)
 8001a7c:	f002 f9e4 	bl	8003e48 <HAL_CAN_Start>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_CAN1_Init+0xc2>
  		return Error_Handler();
 8001a86:	f001 fa03 	bl	8002e90 <Error_Handler>


    /* USER CODE END CAN1_Init 2 */

}
 8001a8a:	3728      	adds	r7, #40	; 0x28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	2000022c 	.word	0x2000022c
 8001a94:	40006400 	.word	0x40006400

08001a98 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a1d      	ldr	r2, [pc, #116]	; (8001b2c <HAL_CAN_MspInit+0x94>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d133      	bne.n	8001b22 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <HAL_CAN_MspInit+0x98>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	4a1b      	ldr	r2, [pc, #108]	; (8001b30 <HAL_CAN_MspInit+0x98>)
 8001ac4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aca:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <HAL_CAN_MspInit+0x98>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_CAN_MspInit+0x98>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a14      	ldr	r2, [pc, #80]	; (8001b30 <HAL_CAN_MspInit+0x98>)
 8001ae0:	f043 0308 	orr.w	r3, r3, #8
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_CAN_MspInit+0x98>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001af2:	2303      	movs	r3, #3
 8001af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b02:	2309      	movs	r3, #9
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4809      	ldr	r0, [pc, #36]	; (8001b34 <HAL_CAN_MspInit+0x9c>)
 8001b0e:	f003 fabf 	bl	8005090 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	2014      	movs	r0, #20
 8001b18:	f002 fef7 	bl	800490a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001b1c:	2014      	movs	r0, #20
 8001b1e:	f002 ff10 	bl	8004942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001b22:	bf00      	nop
 8001b24:	3728      	adds	r7, #40	; 0x28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40006400 	.word	0x40006400
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40020c00 	.word	0x40020c00

08001b38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <MX_DMA_Init+0x3c>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <MX_DMA_Init+0x3c>)
 8001b48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <MX_DMA_Init+0x3c>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	200c      	movs	r0, #12
 8001b60:	f002 fed3 	bl	800490a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b64:	200c      	movs	r0, #12
 8001b66:	f002 feec 	bl	8004942 <HAL_NVIC_EnableIRQ>

}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800

08001b78 <ENCODER_Init>:
CAN_HandleTypeDef hcan2;
//uint8_t incoming[8];
//CAN_RxHeaderTypeDef RxHeader;

void ENCODER_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  //Assign each encoder to one of the two CAN buses
	encoderBack.hcan = &hcan1;
 8001b7c:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <ENCODER_Init+0x24>)
 8001b7e:	4a08      	ldr	r2, [pc, #32]	; (8001ba0 <ENCODER_Init+0x28>)
 8001b80:	601a      	str	r2, [r3, #0]
	encoderFront.hcan = &hcan1;
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <ENCODER_Init+0x2c>)
 8001b84:	4a06      	ldr	r2, [pc, #24]	; (8001ba0 <ENCODER_Init+0x28>)
 8001b86:	601a      	str	r2, [r3, #0]
	
	//Set Tx header for each encoder handle
	ENCODER_Set_TxHeader(&encoderBack, ENC_ADDR_LEFT);
 8001b88:	2101      	movs	r1, #1
 8001b8a:	4804      	ldr	r0, [pc, #16]	; (8001b9c <ENCODER_Init+0x24>)
 8001b8c:	f000 f83f 	bl	8001c0e <ENCODER_Set_TxHeader>
	ENCODER_Set_TxHeader(&encoderFront, ENC_ADDR_RIGHT);
 8001b90:	2102      	movs	r1, #2
 8001b92:	4804      	ldr	r0, [pc, #16]	; (8001ba4 <ENCODER_Init+0x2c>)
 8001b94:	f000 f83b 	bl	8001c0e <ENCODER_Set_TxHeader>

}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	200002d4 	.word	0x200002d4
 8001ba0:	2000022c 	.word	0x2000022c
 8001ba4:	2000027c 	.word	0x2000027c

08001ba8 <ENCODER_Sort_Incoming>:

void ENCODER_Sort_Incoming(uint8_t* incoming_array, EncoderHandle* Encoder_ptr){
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
	Encoder_ptr->rawRead[0] = incoming_array[0];
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	781a      	ldrb	r2, [r3, #0]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Encoder_ptr->rawRead[1] = incoming_array[1];
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	785a      	ldrb	r2, [r3, #1]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	Encoder_ptr->rawRead[2] = incoming_array[2];
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	789a      	ldrb	r2, [r3, #2]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Encoder_ptr->rawRead[3] = incoming_array[3];
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	78da      	ldrb	r2, [r3, #3]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	Encoder_ptr->rawRead[4] = incoming_array[4];
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	791a      	ldrb	r2, [r3, #4]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	Encoder_ptr->rawRead[5] = incoming_array[5];
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	795a      	ldrb	r2, [r3, #5]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	Encoder_ptr->rawRead[6] = incoming_array[6];
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	799a      	ldrb	r2, [r3, #6]
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	Encoder_ptr->rawRead[7] = incoming_array[7];
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	79da      	ldrb	r2, [r3, #7]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <ENCODER_Set_TxHeader>:

void ENCODER_Set_TxHeader(EncoderHandle* Encoder_ptr, uint32_t Encoder_Address){
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]
	Encoder_ptr->canTxHeader.DLC = 4;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	631a      	str	r2, [r3, #48]	; 0x30
	Encoder_ptr->canTxHeader.IDE = CAN_ID_STD;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	629a      	str	r2, [r3, #40]	; 0x28
	Encoder_ptr->canTxHeader.RTR = CAN_RTR_DATA;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	62da      	str	r2, [r3, #44]	; 0x2c
	Encoder_ptr->canTxHeader.StdId = Encoder_Address;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	621a      	str	r2, [r3, #32]
	Encoder_ptr->canTxHeader.TransmitGlobalTime = DISABLE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Encoder_ptr->canTxHeader.ExtId = 0;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <ENCODER_Read>:

void ENCODER_Read(EncoderHandle* Encoder_ptr){
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
	Encoder_ptr->sendData[0] = Encoder_ptr->canTxHeader.DLC;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	Encoder_ptr->sendData[1] = Encoder_ptr->canTxHeader.StdId;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	Encoder_ptr->sendData[2] = 0x01;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	Encoder_ptr->sendData[3] = 0x00;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	
	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f103 0120 	add.w	r1, r3, #32
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3338      	adds	r3, #56	; 0x38
 8001c8e:	f002 f91f 	bl	8003ed0 <HAL_CAN_AddTxMessage>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <ENCODER_Get_Angle>:
	Encoder_ptr->sendData[3] = 0x01;

	HAL_CAN_AddTxMessage(Encoder_ptr->hcan, &(Encoder_ptr->canTxHeader), Encoder_ptr->sendData, &(Encoder_ptr->canMailbox));
}

void ENCODER_Get_Angle(EncoderHandle* Encoder_ptr){
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
	ENCODER_Read(Encoder_ptr);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff ffd1 	bl	8001c4a <ENCODER_Read>
	Encoder_ptr->angle32Bit.b8[0] = Encoder_ptr->rawRead[3];
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	Encoder_ptr->angle32Bit.b8[1] = Encoder_ptr->rawRead[4];
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	Encoder_ptr->angle32Bit.b8[2] = Encoder_ptr->rawRead[5];
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	Encoder_ptr->angle32Bit.b8[3] = Encoder_ptr->rawRead[6];
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	//Get the outer gear encoder position
	//Gear ration from inner to outer gear is 1:2. Therefore, (2*4096=)8192 is used
//	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)) ; //Get single turn encoder reading
	Encoder_ptr->encoder_pos = (Encoder_ptr->rawRead[3] + (Encoder_ptr->rawRead[4] << 8) + (Encoder_ptr->rawRead[5] << 16)); //Get single turn encoder reading
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001cde:	461a      	mov	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001ce6:	021b      	lsls	r3, r3, #8
 8001ce8:	441a      	add	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001cf0:	041b      	lsls	r3, r3, #16
 8001cf2:	4413      	add	r3, r2
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	645a      	str	r2, [r3, #68]	; 0x44

	//Convert from encoder position to angle in degree
//	Encoder_ptr->angleDeg = (Encoder_ptr->encoder_pos * 360 /8192) ; //Get encoder angle

}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <MX_GPIO_Init>:
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
     PB5   ------> CAN2_RX
*/
void MX_GPIO_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08c      	sub	sp, #48	; 0x30
 8001d08:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0a:	f107 031c 	add.w	r3, r7, #28
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
 8001d18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
 8001d1e:	4b8a      	ldr	r3, [pc, #552]	; (8001f48 <MX_GPIO_Init+0x244>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a89      	ldr	r2, [pc, #548]	; (8001f48 <MX_GPIO_Init+0x244>)
 8001d24:	f043 0310 	orr.w	r3, r3, #16
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b87      	ldr	r3, [pc, #540]	; (8001f48 <MX_GPIO_Init+0x244>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0310 	and.w	r3, r3, #16
 8001d32:	61bb      	str	r3, [r7, #24]
 8001d34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	4b83      	ldr	r3, [pc, #524]	; (8001f48 <MX_GPIO_Init+0x244>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a82      	ldr	r2, [pc, #520]	; (8001f48 <MX_GPIO_Init+0x244>)
 8001d40:	f043 0304 	orr.w	r3, r3, #4
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b80      	ldr	r3, [pc, #512]	; (8001f48 <MX_GPIO_Init+0x244>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	4b7c      	ldr	r3, [pc, #496]	; (8001f48 <MX_GPIO_Init+0x244>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a7b      	ldr	r2, [pc, #492]	; (8001f48 <MX_GPIO_Init+0x244>)
 8001d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b79      	ldr	r3, [pc, #484]	; (8001f48 <MX_GPIO_Init+0x244>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b75      	ldr	r3, [pc, #468]	; (8001f48 <MX_GPIO_Init+0x244>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a74      	ldr	r2, [pc, #464]	; (8001f48 <MX_GPIO_Init+0x244>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b72      	ldr	r3, [pc, #456]	; (8001f48 <MX_GPIO_Init+0x244>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	4b6e      	ldr	r3, [pc, #440]	; (8001f48 <MX_GPIO_Init+0x244>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a6d      	ldr	r2, [pc, #436]	; (8001f48 <MX_GPIO_Init+0x244>)
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b6b      	ldr	r3, [pc, #428]	; (8001f48 <MX_GPIO_Init+0x244>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	4b67      	ldr	r3, [pc, #412]	; (8001f48 <MX_GPIO_Init+0x244>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a66      	ldr	r2, [pc, #408]	; (8001f48 <MX_GPIO_Init+0x244>)
 8001db0:	f043 0308 	orr.w	r3, r3, #8
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b64      	ldr	r3, [pc, #400]	; (8001f48 <MX_GPIO_Init+0x244>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	213f      	movs	r1, #63	; 0x3f
 8001dc6:	4861      	ldr	r0, [pc, #388]	; (8001f4c <MX_GPIO_Init+0x248>)
 8001dc8:	f003 fb26 	bl	8005418 <HAL_GPIO_WritePin>
                          |AD_RST_Pin|AD_CV_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD_SPI1_CS_GPIO_Port, AD_SPI1_CS_Pin, GPIO_PIN_RESET);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2110      	movs	r1, #16
 8001dd0:	485f      	ldr	r0, [pc, #380]	; (8001f50 <MX_GPIO_Init+0x24c>)
 8001dd2:	f003 fb21 	bl	8005418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	219b      	movs	r1, #155	; 0x9b
 8001dda:	485e      	ldr	r0, [pc, #376]	; (8001f54 <MX_GPIO_Init+0x250>)
 8001ddc:	f003 fb1c 	bl	8005418 <HAL_GPIO_WritePin>
                          |Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin, GPIO_PIN_RESET);
 8001de0:	2200      	movs	r2, #0
 8001de2:	f44f 41e1 	mov.w	r1, #28800	; 0x7080
 8001de6:	485c      	ldr	r0, [pc, #368]	; (8001f58 <MX_GPIO_Init+0x254>)
 8001de8:	f003 fb16 	bl	8005418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001dec:	2200      	movs	r2, #0
 8001dee:	f64e 4108 	movw	r1, #60424	; 0xec08
 8001df2:	485a      	ldr	r0, [pc, #360]	; (8001f5c <MX_GPIO_Init+0x258>)
 8001df4:	f003 fb10 	bl	8005418 <HAL_GPIO_WritePin>
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button3_Pin|Button1_Pin|Button2_Pin;
 8001df8:	2307      	movs	r3, #7
 8001dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e00:	2302      	movs	r3, #2
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e04:	f107 031c 	add.w	r3, r7, #28
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4853      	ldr	r0, [pc, #332]	; (8001f58 <MX_GPIO_Init+0x254>)
 8001e0c:	f003 f940 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = LimitSW1_Pin|LimitSW2_Pin|LimitSW3_Pin|LimitSW4_Pin
 8001e10:	f248 1378 	movw	r3, #33144	; 0x8178
 8001e14:	61fb      	str	r3, [r7, #28]
                          |ClimbM_IO_ALM2_Pin|ClimbM_IO_ALM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e16:	2300      	movs	r3, #0
 8001e18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e1e:	f107 031c 	add.w	r3, r7, #28
 8001e22:	4619      	mov	r1, r3
 8001e24:	484c      	ldr	r0, [pc, #304]	; (8001f58 <MX_GPIO_Init+0x254>)
 8001e26:	f003 f933 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = AD_RANGE_Pin|AD_OS2_Pin|AD_OS1_Pin|AD_OS0_Pin
 8001e2a:	233f      	movs	r3, #63	; 0x3f
 8001e2c:	61fb      	str	r3, [r7, #28]
                          |AD_RST_Pin|AD_CV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e32:	2301      	movs	r3, #1
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	2300      	movs	r3, #0
 8001e38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3a:	f107 031c 	add.w	r3, r7, #28
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4842      	ldr	r0, [pc, #264]	; (8001f4c <MX_GPIO_Init+0x248>)
 8001e42:	f003 f925 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_SPI1_CS_Pin;
 8001e46:	2310      	movs	r3, #16
 8001e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e52:	2300      	movs	r3, #0
 8001e54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AD_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001e56:	f107 031c 	add.w	r3, r7, #28
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	483c      	ldr	r0, [pc, #240]	; (8001f50 <MX_GPIO_Init+0x24c>)
 8001e5e:	f003 f917 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_BUSY_Pin;
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e66:	4b3e      	ldr	r3, [pc, #248]	; (8001f60 <MX_GPIO_Init+0x25c>)
 8001e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001e6e:	f107 031c 	add.w	r3, r7, #28
 8001e72:	4619      	mov	r1, r3
 8001e74:	4836      	ldr	r0, [pc, #216]	; (8001f50 <MX_GPIO_Init+0x24c>)
 8001e76:	f003 f90b 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = ClimbM_IO_FR2_Pin|ClimbM_IO_EN2_Pin|LED1_Pin|LED2_Pin
 8001e7a:	239b      	movs	r3, #155	; 0x9b
 8001e7c:	61fb      	str	r3, [r7, #28]
                          |Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e82:	2301      	movs	r3, #1
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8a:	f107 031c 	add.w	r3, r7, #28
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4830      	ldr	r0, [pc, #192]	; (8001f54 <MX_GPIO_Init+0x250>)
 8001e92:	f003 f8fd 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ClimbM_IO_BRK2_Pin|ClimbM_IO_FR1_Pin|ClimbM_IO_EN1_Pin|ClimbM_IO_BRK1_Pin;
 8001e96:	f44f 43e1 	mov.w	r3, #28800	; 0x7080
 8001e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ea8:	f107 031c 	add.w	r3, r7, #28
 8001eac:	4619      	mov	r1, r3
 8001eae:	482a      	ldr	r0, [pc, #168]	; (8001f58 <MX_GPIO_Init+0x254>)
 8001eb0:	f003 f8ee 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CLK_Pin|CUI_SPI2_MISO_Pin|CUI_SPI2_MOSI_Pin;
 8001eb4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001eb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ec6:	2305      	movs	r3, #5
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4820      	ldr	r0, [pc, #128]	; (8001f54 <MX_GPIO_Init+0x250>)
 8001ed2:	f003 f8dd 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = CUI_SPI2_CS1_Pin|CUI_SPI2_CS2_Pin|HubM_IO_SON_Pin|HubM_IO_NOT_Pin
 8001ed6:	f64e 4308 	movw	r3, #60424	; 0xec08
 8001eda:	61fb      	str	r3, [r7, #28]
                          |HubM_IO_POT_Pin|Brake_Wheel_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001edc:	2301      	movs	r3, #1
 8001ede:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	4619      	mov	r1, r3
 8001eee:	481b      	ldr	r0, [pc, #108]	; (8001f5c <MX_GPIO_Init+0x258>)
 8001ef0:	f003 f8ce 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HubM_IO_ALM_Pin;
 8001ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(HubM_IO_ALM_GPIO_Port, &GPIO_InitStruct);
 8001f02:	f107 031c 	add.w	r3, r7, #28
 8001f06:	4619      	mov	r1, r3
 8001f08:	4814      	ldr	r0, [pc, #80]	; (8001f5c <MX_GPIO_Init+0x258>)
 8001f0a:	f003 f8c1 	bl	8005090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f0e:	2320      	movs	r3, #32
 8001f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001f1e:	2309      	movs	r3, #9
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f22:	f107 031c 	add.w	r3, r7, #28
 8001f26:	4619      	mov	r1, r3
 8001f28:	480a      	ldr	r0, [pc, #40]	; (8001f54 <MX_GPIO_Init+0x250>)
 8001f2a:	f003 f8b1 	bl	8005090 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2100      	movs	r1, #0
 8001f32:	2017      	movs	r0, #23
 8001f34:	f002 fce9 	bl	800490a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f38:	2017      	movs	r0, #23
 8001f3a:	f002 fd02 	bl	8004942 <HAL_NVIC_EnableIRQ>

}
 8001f3e:	bf00      	nop
 8001f40:	3730      	adds	r7, #48	; 0x30
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40020800 	.word	0x40020800
 8001f50:	40020000 	.word	0x40020000
 8001f54:	40020400 	.word	0x40020400
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40020c00 	.word	0x40020c00
 8001f60:	10210000 	.word	0x10210000

08001f64 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001f68:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <MX_I2C1_Init+0x74>)
 8001f6a:	4a1c      	ldr	r2, [pc, #112]	; (8001fdc <MX_I2C1_Init+0x78>)
 8001f6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f6e:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <MX_I2C1_Init+0x74>)
 8001f70:	4a1b      	ldr	r2, [pc, #108]	; (8001fe0 <MX_I2C1_Init+0x7c>)
 8001f72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f74:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <MX_I2C1_Init+0x74>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f7a:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <MX_I2C1_Init+0x74>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f80:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <MX_I2C1_Init+0x74>)
 8001f82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f88:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <MX_I2C1_Init+0x74>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <MX_I2C1_Init+0x74>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f94:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <MX_I2C1_Init+0x74>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f9a:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <MX_I2C1_Init+0x74>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fa0:	480d      	ldr	r0, [pc, #52]	; (8001fd8 <MX_I2C1_Init+0x74>)
 8001fa2:	f003 fa6b 	bl	800547c <HAL_I2C_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fac:	f000 ff70 	bl	8002e90 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4809      	ldr	r0, [pc, #36]	; (8001fd8 <MX_I2C1_Init+0x74>)
 8001fb4:	f003 fba6 	bl	8005704 <HAL_I2CEx_ConfigAnalogFilter>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001fbe:	f000 ff67 	bl	8002e90 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4804      	ldr	r0, [pc, #16]	; (8001fd8 <MX_I2C1_Init+0x74>)
 8001fc6:	f003 fbd9 	bl	800577c <HAL_I2CEx_ConfigDigitalFilter>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001fd0:	f000 ff5e 	bl	8002e90 <Error_Handler>
  }

}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	2000032c 	.word	0x2000032c
 8001fdc:	40005400 	.word	0x40005400
 8001fe0:	00061a80 	.word	0x00061a80

08001fe4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	; 0x28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a19      	ldr	r2, [pc, #100]	; (8002068 <HAL_I2C_MspInit+0x84>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d12c      	bne.n	8002060 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	4b18      	ldr	r3, [pc, #96]	; (800206c <HAL_I2C_MspInit+0x88>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	4a17      	ldr	r2, [pc, #92]	; (800206c <HAL_I2C_MspInit+0x88>)
 8002010:	f043 0302 	orr.w	r3, r3, #2
 8002014:	6313      	str	r3, [r2, #48]	; 0x30
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <HAL_I2C_MspInit+0x88>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = IMU_I2C1_SCL_Pin|IMU_I2C1_SDA_Pin;
 8002022:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002028:	2312      	movs	r3, #18
 800202a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800202c:	2301      	movs	r3, #1
 800202e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002030:	2303      	movs	r3, #3
 8002032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002034:	2304      	movs	r3, #4
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	4619      	mov	r1, r3
 800203e:	480c      	ldr	r0, [pc, #48]	; (8002070 <HAL_I2C_MspInit+0x8c>)
 8002040:	f003 f826 	bl	8005090 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <HAL_I2C_MspInit+0x88>)
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	4a07      	ldr	r2, [pc, #28]	; (800206c <HAL_I2C_MspInit+0x88>)
 800204e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002052:	6413      	str	r3, [r2, #64]	; 0x40
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <HAL_I2C_MspInit+0x88>)
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002060:	bf00      	nop
 8002062:	3728      	adds	r7, #40	; 0x28
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40005400 	.word	0x40005400
 800206c:	40023800 	.word	0x40023800
 8002070:	40020400 	.word	0x40020400
 8002074:	00000000 	.word	0x00000000

08002078 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002078:	b5b0      	push	{r4, r5, r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800207e:	f001 fc71 	bl	8003964 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002082:	f000 fabf 	bl	8002604 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / FREQUENCY);
 8002086:	f004 f83f 	bl	8006108 <HAL_RCC_GetHCLKFreq>
 800208a:	4603      	mov	r3, r0
 800208c:	4aab      	ldr	r2, [pc, #684]	; (800233c <main+0x2c4>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	099b      	lsrs	r3, r3, #6
 8002094:	4618      	mov	r0, r3
 8002096:	f002 fc62 	bl	800495e <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800209a:	2004      	movs	r0, #4
 800209c:	f002 fc6c 	bl	8004978 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80020a0:	2200      	movs	r2, #0
 80020a2:	2100      	movs	r1, #0
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020a8:	f002 fc2f 	bl	800490a <HAL_NVIC_SetPriority>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80020ac:	f7ff fe2a 	bl	8001d04 <MX_GPIO_Init>
	MX_DMA_Init();
 80020b0:	f7ff fd42 	bl	8001b38 <MX_DMA_Init>
	MX_I2C1_Init();
 80020b4:	f7ff ff56 	bl	8001f64 <MX_I2C1_Init>
	MX_TIM1_Init();
 80020b8:	f001 f80a 	bl	80030d0 <MX_TIM1_Init>
	MX_TIM2_Init();
 80020bc:	f001 f8a8 	bl	8003210 <MX_TIM2_Init>
	MX_USART3_UART_Init();
 80020c0:	f001 fb4c 	bl	800375c <MX_USART3_UART_Init>
	MX_TIM3_Init();
 80020c4:	f001 f918 	bl	80032f8 <MX_TIM3_Init>
	MX_TIM8_Init();
 80020c8:	f001 f998 	bl	80033fc <MX_TIM8_Init>
	MX_CAN1_Init();
 80020cc:	f7ff fc7c 	bl	80019c8 <MX_CAN1_Init>
	MX_SPI1_Init();
 80020d0:	f000 fef6 	bl	8002ec0 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	//Initialize hardware communication
	joystick_Init();
 80020d4:	f001 fbe6 	bl	80038a4 <joystick_Init>
	ADC_Init();
 80020d8:	f7ff fa50 	bl	800157c <ADC_Init>
	ADC_DataRequest();
 80020dc:	f7ff fa90 	bl	8001600 <ADC_DataRequest>
	ENCODER_Init();
 80020e0:	f7ff fd4a 	bl	8001b78 <ENCODER_Init>
//		if (HAL_GetTick() - state_count > 5000)
//			Error_Handler();
//	}

	//Start base wheel PWM pin
	wheelSpeedControl_Init(&baseWheelSpeed, base_linSpeedLevel[base_speedLevel],
 80020e4:	4b96      	ldr	r3, [pc, #600]	; (8002340 <main+0x2c8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a96      	ldr	r2, [pc, #600]	; (8002344 <main+0x2cc>)
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	edd3 7a00 	vldr	s15, [r3]
 80020f2:	4b93      	ldr	r3, [pc, #588]	; (8002340 <main+0x2c8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a94      	ldr	r2, [pc, #592]	; (8002348 <main+0x2d0>)
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	ed93 7a00 	vldr	s14, [r3]
 8002100:	eef0 0a47 	vmov.f32	s1, s14
 8002104:	eeb0 0a67 	vmov.f32	s0, s15
 8002108:	4890      	ldr	r0, [pc, #576]	; (800234c <main+0x2d4>)
 800210a:	f001 fbd7 	bl	80038bc <wheelSpeedControl_Init>
			base_angSpeedLevel[base_speedLevel]);
	HAL_TIM_Base_Start(&MOTOR_TIM);
 800210e:	4890      	ldr	r0, [pc, #576]	; (8002350 <main+0x2d8>)
 8002110:	f004 fc79 	bl	8006a06 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_1);
 8002114:	2100      	movs	r1, #0
 8002116:	488e      	ldr	r0, [pc, #568]	; (8002350 <main+0x2d8>)
 8002118:	f004 fcce 	bl	8006ab8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&MOTOR_TIM, TIM_CHANNEL_2);
 800211c:	2104      	movs	r1, #4
 800211e:	488c      	ldr	r0, [pc, #560]	; (8002350 <main+0x2d8>)
 8002120:	f004 fcca 	bl	8006ab8 <HAL_TIM_PWM_Start>
	MOTOR_TIM.Instance->RIGHT_MOTOR_CHANNEL = 1500;
 8002124:	4b8a      	ldr	r3, [pc, #552]	; (8002350 <main+0x2d8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800212c:	635a      	str	r2, [r3, #52]	; 0x34
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = 1500;
 800212e:	4b88      	ldr	r3, [pc, #544]	; (8002350 <main+0x2d8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002136:	639a      	str	r2, [r3, #56]	; 0x38

//	//Initialize rear and back motor
	bd25l_Init(&rearMotor);
 8002138:	4886      	ldr	r0, [pc, #536]	; (8002354 <main+0x2dc>)
 800213a:	f7ff fa8d 	bl	8001658 <bd25l_Init>
	bd25l_Init(&backMotor);
 800213e:	4886      	ldr	r0, [pc, #536]	; (8002358 <main+0x2e0>)
 8002140:	f7ff fa8a 	bl	8001658 <bd25l_Init>
	runMotor(&rearMotor, 0);
 8002144:	ed9f 0a85 	vldr	s0, [pc, #532]	; 800235c <main+0x2e4>
 8002148:	4882      	ldr	r0, [pc, #520]	; (8002354 <main+0x2dc>)
 800214a:	f7ff fb8d 	bl	8001868 <runMotor>
	runMotor(&backMotor, 0);
 800214e:	ed9f 0a83 	vldr	s0, [pc, #524]	; 800235c <main+0x2e4>
 8002152:	4881      	ldr	r0, [pc, #516]	; (8002358 <main+0x2e0>)
 8002154:	f7ff fb88 	bl	8001868 <runMotor>
	emBrakeMotor(0);
 8002158:	2000      	movs	r0, #0
 800215a:	f7ff fa9f 	bl	800169c <emBrakeMotor>
//
	//Initialize hub motor provided joystick control
	hubMotor_Init();
 800215e:	f7ff f91b 	bl	8001398 <hubMotor_Init>
	send_HubMotor(0, 0);
 8002162:	eddf 0a7e 	vldr	s1, [pc, #504]	; 800235c <main+0x2e4>
 8002166:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800235c <main+0x2e4>
 800216a:	f7ff f92d 	bl	80013c8 <send_HubMotor>

	//Initialize front and back climbing position controller
	frontClimb_pid = pid_create(&frontClimb_ctrl, &frontClimb_input,
 800216e:	4b7c      	ldr	r3, [pc, #496]	; (8002360 <main+0x2e8>)
 8002170:	edd3 7a00 	vldr	s15, [r3]
 8002174:	4b7b      	ldr	r3, [pc, #492]	; (8002364 <main+0x2ec>)
 8002176:	ed93 7a00 	vldr	s14, [r3]
 800217a:	4b7b      	ldr	r3, [pc, #492]	; (8002368 <main+0x2f0>)
 800217c:	edd3 6a00 	vldr	s13, [r3]
 8002180:	eeb0 1a66 	vmov.f32	s2, s13
 8002184:	eef0 0a47 	vmov.f32	s1, s14
 8002188:	eeb0 0a67 	vmov.f32	s0, s15
 800218c:	4b77      	ldr	r3, [pc, #476]	; (800236c <main+0x2f4>)
 800218e:	4a78      	ldr	r2, [pc, #480]	; (8002370 <main+0x2f8>)
 8002190:	4978      	ldr	r1, [pc, #480]	; (8002374 <main+0x2fc>)
 8002192:	4879      	ldr	r0, [pc, #484]	; (8002378 <main+0x300>)
 8002194:	f7fe fe96 	bl	8000ec4 <pid_create>
 8002198:	4603      	mov	r3, r0
 800219a:	4a78      	ldr	r2, [pc, #480]	; (800237c <main+0x304>)
 800219c:	6013      	str	r3, [r2, #0]
			&frontClimb_output, &frontClimb_setpoint, frontClimb_kp,
			frontClimb_ki, frontClimb_kd);
	pid_limits(frontClimb_pid, -20, 20);
 800219e:	4b77      	ldr	r3, [pc, #476]	; (800237c <main+0x304>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 80021a6:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff f816 	bl	80011dc <pid_limits>
	pid_sample(frontClimb_pid, 1);
 80021b0:	4b72      	ldr	r3, [pc, #456]	; (800237c <main+0x304>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2101      	movs	r1, #1
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe ffdc 	bl	8001174 <pid_sample>
	pid_auto(frontClimb_pid);
 80021bc:	4b6f      	ldr	r3, [pc, #444]	; (800237c <main+0x304>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff f870 	bl	80012a6 <pid_auto>

	backClimb_pid = pid_create(&backClimb_ctrl, &backClimb_input,
 80021c6:	4b6e      	ldr	r3, [pc, #440]	; (8002380 <main+0x308>)
 80021c8:	edd3 7a00 	vldr	s15, [r3]
 80021cc:	4b6d      	ldr	r3, [pc, #436]	; (8002384 <main+0x30c>)
 80021ce:	ed93 7a00 	vldr	s14, [r3]
 80021d2:	4b6d      	ldr	r3, [pc, #436]	; (8002388 <main+0x310>)
 80021d4:	edd3 6a00 	vldr	s13, [r3]
 80021d8:	eeb0 1a66 	vmov.f32	s2, s13
 80021dc:	eef0 0a47 	vmov.f32	s1, s14
 80021e0:	eeb0 0a67 	vmov.f32	s0, s15
 80021e4:	4b69      	ldr	r3, [pc, #420]	; (800238c <main+0x314>)
 80021e6:	4a6a      	ldr	r2, [pc, #424]	; (8002390 <main+0x318>)
 80021e8:	496a      	ldr	r1, [pc, #424]	; (8002394 <main+0x31c>)
 80021ea:	486b      	ldr	r0, [pc, #428]	; (8002398 <main+0x320>)
 80021ec:	f7fe fe6a 	bl	8000ec4 <pid_create>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4a6a      	ldr	r2, [pc, #424]	; (800239c <main+0x324>)
 80021f4:	6013      	str	r3, [r2, #0]
			&backClimb_output, &backClimb_setpoint, backClimb_kp, backClimb_ki,
			backClimb_kd);
	pid_limits(backClimb_pid, -20, 20);
 80021f6:	4b69      	ldr	r3, [pc, #420]	; (800239c <main+0x324>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 80021fe:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe ffea 	bl	80011dc <pid_limits>
	pid_sample(backClimb_pid, 1);
 8002208:	4b64      	ldr	r3, [pc, #400]	; (800239c <main+0x324>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2101      	movs	r1, #1
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe ffb0 	bl	8001174 <pid_sample>
	pid_auto(backClimb_pid);
 8002214:	4b61      	ldr	r3, [pc, #388]	; (800239c <main+0x324>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff f844 	bl	80012a6 <pid_auto>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint32_t prev_time = HAL_GetTick();
 800221e:	f001 fc07 	bl	8003a30 <HAL_GetTick>
 8002222:	6078      	str	r0, [r7, #4]
	ENCODER_Get_Angle(&encoderBack);
 8002224:	485e      	ldr	r0, [pc, #376]	; (80023a0 <main+0x328>)
 8002226:	f7ff fd38 	bl	8001c9a <ENCODER_Get_Angle>
	ENCODER_Get_Angle(&encoderFront);
 800222a:	485e      	ldr	r0, [pc, #376]	; (80023a4 <main+0x32c>)
 800222c:	f7ff fd35 	bl	8001c9a <ENCODER_Get_Angle>
//	while (state_count++ < 1000)
//		MPU6050_Read_All(&hi2c1, &MPU6050);
//	initial_angle = MPU6050.KalmanAngleX;
	state_count = 0;
 8002230:	4b5d      	ldr	r3, [pc, #372]	; (80023a8 <main+0x330>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
	emBrakeMotor(1);
 8002236:	2001      	movs	r0, #1
 8002238:	f7ff fa30 	bl	800169c <emBrakeMotor>
	//Reset encoder position
//	ENCODER_Set_ZeroPosition(&encoderBack);
//	ENCODER_Set_ZeroPosition(&encoderFront);
	HAL_Delay(500);
 800223c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002240:	f001 fc02 	bl	8003a48 <HAL_Delay>
		//      MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL -= 50;
		//      runMotor(&backMotor, 100, 1);

		//      runMotor(&backMotor, speed++, 1);
		//Loop should execute once every 1 tick
		if (HAL_GetTick() - prev_time >= 1)
 8002244:	f001 fbf4 	bl	8003a30 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4293      	cmp	r3, r2
 800224e:	d0f9      	beq.n	8002244 <main+0x1cc>
		{
			ADC_DataRequest();
 8002250:	f7ff f9d6 	bl	8001600 <ADC_DataRequest>
			ENCODER_Read(&encoderBack);
 8002254:	4852      	ldr	r0, [pc, #328]	; (80023a0 <main+0x328>)
 8002256:	f7ff fcf8 	bl	8001c4a <ENCODER_Read>
			ENCODER_Read(&encoderFront);
 800225a:	4852      	ldr	r0, [pc, #328]	; (80023a4 <main+0x32c>)
 800225c:	f7ff fcf5 	bl	8001c4a <ENCODER_Read>

			//Get kamlan filtered angle from MPU6050
//			MPU6050_Read_All(&hi2c1, &MPU6050);
			GPIO_Digital_Filtered_Input(&button1, 30);
 8002260:	211e      	movs	r1, #30
 8002262:	4852      	ldr	r0, [pc, #328]	; (80023ac <main+0x334>)
 8002264:	f7ff fb77 	bl	8001956 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button2, 30);
 8002268:	211e      	movs	r1, #30
 800226a:	4851      	ldr	r0, [pc, #324]	; (80023b0 <main+0x338>)
 800226c:	f7ff fb73 	bl	8001956 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&button3, 30);
 8002270:	211e      	movs	r1, #30
 8002272:	4850      	ldr	r0, [pc, #320]	; (80023b4 <main+0x33c>)
 8002274:	f7ff fb6f 	bl	8001956 <GPIO_Digital_Filtered_Input>

			GPIO_Digital_Filtered_Input(&rearLS1, 5);
 8002278:	2105      	movs	r1, #5
 800227a:	484f      	ldr	r0, [pc, #316]	; (80023b8 <main+0x340>)
 800227c:	f7ff fb6b 	bl	8001956 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&rearLS2, 5);
 8002280:	2105      	movs	r1, #5
 8002282:	484e      	ldr	r0, [pc, #312]	; (80023bc <main+0x344>)
 8002284:	f7ff fb67 	bl	8001956 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS1, 5);
 8002288:	2105      	movs	r1, #5
 800228a:	484d      	ldr	r0, [pc, #308]	; (80023c0 <main+0x348>)
 800228c:	f7ff fb63 	bl	8001956 <GPIO_Digital_Filtered_Input>
			GPIO_Digital_Filtered_Input(&backLS2, 5);
 8002290:	2105      	movs	r1, #5
 8002292:	484c      	ldr	r0, [pc, #304]	; (80023c4 <main+0x34c>)
 8002294:	f7ff fb5f 	bl	8001956 <GPIO_Digital_Filtered_Input>

			//---------------------------------------------------------------------------------------------------
			//Testing Climbing Position Control
			//
			//---------------------------------------------------------------------------------------------------
			if (button2.state == GPIO_PIN_SET && state_count++ > 10) {
 8002298:	4b45      	ldr	r3, [pc, #276]	; (80023b0 <main+0x338>)
 800229a:	7a1b      	ldrb	r3, [r3, #8]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d118      	bne.n	80022d2 <main+0x25a>
 80022a0:	4b41      	ldr	r3, [pc, #260]	; (80023a8 <main+0x330>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	4940      	ldr	r1, [pc, #256]	; (80023a8 <main+0x330>)
 80022a8:	600a      	str	r2, [r1, #0]
 80022aa:	2b0a      	cmp	r3, #10
 80022ac:	dd11      	ble.n	80022d2 <main+0x25a>
				state_count = 0;
 80022ae:	4b3e      	ldr	r3, [pc, #248]	; (80023a8 <main+0x330>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
				if (state == TEST) {
 80022b4:	4b44      	ldr	r3, [pc, #272]	; (80023c8 <main+0x350>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d103      	bne.n	80022c4 <main+0x24c>
					state = NORMAL_DEBUG;
 80022bc:	4b42      	ldr	r3, [pc, #264]	; (80023c8 <main+0x350>)
 80022be:	2201      	movs	r2, #1
 80022c0:	701a      	strb	r2, [r3, #0]
 80022c2:	e006      	b.n	80022d2 <main+0x25a>
				} else if (state == NORMAL_DEBUG)
 80022c4:	4b40      	ldr	r3, [pc, #256]	; (80023c8 <main+0x350>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d102      	bne.n	80022d2 <main+0x25a>
					state = TEST;
 80022cc:	4b3e      	ldr	r3, [pc, #248]	; (80023c8 <main+0x350>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
			}
			if (state == TEST) {
 80022d2:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <main+0x350>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d112      	bne.n	8002300 <main+0x288>
//				goto_pos(0, backClimb_pid);
				goto_pos(0, frontClimb_pid);
 80022da:	4b28      	ldr	r3, [pc, #160]	; (800237c <main+0x304>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4619      	mov	r1, r3
 80022e0:	2000      	movs	r0, #0
 80022e2:	f000 fce5 	bl	8002cb0 <goto_pos>
				climbingForward(forward_distance);
 80022e6:	4b39      	ldr	r3, [pc, #228]	; (80023cc <main+0x354>)
 80022e8:	edd3 7a00 	vldr	s15, [r3]
 80022ec:	eeb0 0a67 	vmov.f32	s0, s15
 80022f0:	f000 fbee 	bl	8002ad0 <climbingForward>
				send_HubMotor(1, 1);
 80022f4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80022f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80022fc:	f7ff f864 	bl	80013c8 <send_HubMotor>
			}

			if (state == NORMAL_DEBUG) {
 8002300:	4b31      	ldr	r3, [pc, #196]	; (80023c8 <main+0x350>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b01      	cmp	r3, #1
 8002306:	f040 80be 	bne.w	8002486 <main+0x40e>
				if (button1.state == GPIO_PIN_SET
 800230a:	4b28      	ldr	r3, [pc, #160]	; (80023ac <main+0x334>)
 800230c:	7a1b      	ldrb	r3, [r3, #8]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d107      	bne.n	8002322 <main+0x2aa>
						&& button3.state == GPIO_PIN_RESET)
 8002312:	4b28      	ldr	r3, [pc, #160]	; (80023b4 <main+0x33c>)
 8002314:	7a1b      	ldrb	r3, [r3, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d103      	bne.n	8002322 <main+0x2aa>
					speed[FRONT_INDEX] = 30;
 800231a:	4b2d      	ldr	r3, [pc, #180]	; (80023d0 <main+0x358>)
 800231c:	4a2d      	ldr	r2, [pc, #180]	; (80023d4 <main+0x35c>)
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	e064      	b.n	80023ec <main+0x374>
				else if (button1.state == GPIO_PIN_SET
 8002322:	4b22      	ldr	r3, [pc, #136]	; (80023ac <main+0x334>)
 8002324:	7a1b      	ldrb	r3, [r3, #8]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d158      	bne.n	80023dc <main+0x364>
						&& button3.state == GPIO_PIN_SET)
 800232a:	4b22      	ldr	r3, [pc, #136]	; (80023b4 <main+0x33c>)
 800232c:	7a1b      	ldrb	r3, [r3, #8]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d154      	bne.n	80023dc <main+0x364>
					speed[FRONT_INDEX] = -30;
 8002332:	4b27      	ldr	r3, [pc, #156]	; (80023d0 <main+0x358>)
 8002334:	4a28      	ldr	r2, [pc, #160]	; (80023d8 <main+0x360>)
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	e058      	b.n	80023ec <main+0x374>
 800233a:	bf00      	nop
 800233c:	10624dd3 	.word	0x10624dd3
 8002340:	20000158 	.word	0x20000158
 8002344:	080093d8 	.word	0x080093d8
 8002348:	080093e4 	.word	0x080093e4
 800234c:	200000d8 	.word	0x200000d8
 8002350:	200004c4 	.word	0x200004c4
 8002354:	20000000 	.word	0x20000000
 8002358:	20000034 	.word	0x20000034
 800235c:	00000000 	.word	0x00000000
 8002360:	20000108 	.word	0x20000108
 8002364:	2000010c 	.word	0x2000010c
 8002368:	20000110 	.word	0x20000110
 800236c:	2000016c 	.word	0x2000016c
 8002370:	20000168 	.word	0x20000168
 8002374:	20000164 	.word	0x20000164
 8002378:	20000438 	.word	0x20000438
 800237c:	20000434 	.word	0x20000434
 8002380:	20000114 	.word	0x20000114
 8002384:	20000118 	.word	0x20000118
 8002388:	2000011c 	.word	0x2000011c
 800238c:	20000178 	.word	0x20000178
 8002390:	20000174 	.word	0x20000174
 8002394:	20000170 	.word	0x20000170
 8002398:	200003f0 	.word	0x200003f0
 800239c:	20000480 	.word	0x20000480
 80023a0:	200002d4 	.word	0x200002d4
 80023a4:	2000027c 	.word	0x2000027c
 80023a8:	20000180 	.word	0x20000180
 80023ac:	200000a8 	.word	0x200000a8
 80023b0:	200000b8 	.word	0x200000b8
 80023b4:	200000c8 	.word	0x200000c8
 80023b8:	20000068 	.word	0x20000068
 80023bc:	20000078 	.word	0x20000078
 80023c0:	20000088 	.word	0x20000088
 80023c4:	20000098 	.word	0x20000098
 80023c8:	20000124 	.word	0x20000124
 80023cc:	20000120 	.word	0x20000120
 80023d0:	2000015c 	.word	0x2000015c
 80023d4:	41f00000 	.word	0x41f00000
 80023d8:	c1f00000 	.word	0xc1f00000
				else if (button1.state == GPIO_PIN_RESET)
 80023dc:	4b7e      	ldr	r3, [pc, #504]	; (80025d8 <main+0x560>)
 80023de:	7a1b      	ldrb	r3, [r3, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d103      	bne.n	80023ec <main+0x374>
					speed[FRONT_INDEX] = 0;
 80023e4:	4b7d      	ldr	r3, [pc, #500]	; (80025dc <main+0x564>)
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
				curb_height = CLIMBING_LEG_LENGTH * cos(TO_RAD(encoderFront.angleDeg)) + BASE_HEIGHT - FRONT_CLIMB_WHEEL_DIAMETER / 2.0;
 80023ec:	4b7c      	ldr	r3, [pc, #496]	; (80025e0 <main+0x568>)
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe f862 	bl	80004b8 <__aeabi_f2d>
 80023f4:	4604      	mov	r4, r0
 80023f6:	460d      	mov	r5, r1
 80023f8:	4b7a      	ldr	r3, [pc, #488]	; (80025e4 <main+0x56c>)
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe f85b 	bl	80004b8 <__aeabi_f2d>
 8002402:	a373      	add	r3, pc, #460	; (adr r3, 80025d0 <main+0x558>)
 8002404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002408:	f7fe f8ae 	bl	8000568 <__aeabi_dmul>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	4b73      	ldr	r3, [pc, #460]	; (80025e8 <main+0x570>)
 800241a:	f7fe f9cf 	bl	80007bc <__aeabi_ddiv>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	ec43 2b17 	vmov	d7, r2, r3
 8002426:	eeb0 0a47 	vmov.f32	s0, s14
 800242a:	eef0 0a67 	vmov.f32	s1, s15
 800242e:	f005 ff8f 	bl	8008350 <cos>
 8002432:	ec53 2b10 	vmov	r2, r3, d0
 8002436:	4620      	mov	r0, r4
 8002438:	4629      	mov	r1, r5
 800243a:	f7fe f895 	bl	8000568 <__aeabi_dmul>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4614      	mov	r4, r2
 8002444:	461d      	mov	r5, r3
 8002446:	4b69      	ldr	r3, [pc, #420]	; (80025ec <main+0x574>)
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe f835 	bl	80004b8 <__aeabi_f2d>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4620      	mov	r0, r4
 8002454:	4629      	mov	r1, r5
 8002456:	f7fd fed1 	bl	80001fc <__adddf3>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4610      	mov	r0, r2
 8002460:	4619      	mov	r1, r3
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	4b62      	ldr	r3, [pc, #392]	; (80025f0 <main+0x578>)
 8002468:	f7fd fec6 	bl	80001f8 <__aeabi_dsub>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4610      	mov	r0, r2
 8002472:	4619      	mov	r1, r3
 8002474:	f7fe fb5a 	bl	8000b2c <__aeabi_d2f>
 8002478:	4603      	mov	r3, r0
 800247a:	4a5e      	ldr	r2, [pc, #376]	; (80025f4 <main+0x57c>)
 800247c:	6013      	str	r3, [r2, #0]
//				curb_height -= 0.01;
				speed[BACK_INDEX] = 0;
 800247e:	4b57      	ldr	r3, [pc, #348]	; (80025dc <main+0x564>)
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	605a      	str	r2, [r3, #4]

			//!!Must not comment the following section
//			send_HubMotor(150, 150);


			if (fabs(speed[FRONT_INDEX]) < 4)
 8002486:	4b55      	ldr	r3, [pc, #340]	; (80025dc <main+0x564>)
 8002488:	edd3 7a00 	vldr	s15, [r3]
 800248c:	eef0 7ae7 	vabs.f32	s15, s15
 8002490:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002494:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249c:	d503      	bpl.n	80024a6 <main+0x42e>
				speed[FRONT_INDEX] = 0;
 800249e:	4b4f      	ldr	r3, [pc, #316]	; (80025dc <main+0x564>)
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
			if (fabs(speed[BACK_INDEX]) < 4)
 80024a6:	4b4d      	ldr	r3, [pc, #308]	; (80025dc <main+0x564>)
 80024a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80024ac:	eef0 7ae7 	vabs.f32	s15, s15
 80024b0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80024b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024bc:	d503      	bpl.n	80024c6 <main+0x44e>
				speed[BACK_INDEX] = 0;
 80024be:	4b47      	ldr	r3, [pc, #284]	; (80025dc <main+0x564>)
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	605a      	str	r2, [r3, #4]
			//*****VERY IMPORTANT AND MUST NOT BE COMMENTED OUT**********************************//
			//Safety check for to avoid the climbing leg overturn
			if (encoderFront.encoder_pos < FRONT_FULL_ROTATION_ENC / 2){
 80024c6:	4b47      	ldr	r3, [pc, #284]	; (80025e4 <main+0x56c>)
 80024c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024ca:	f242 3333 	movw	r3, #9011	; 0x2333
 80024ce:	085b      	lsrs	r3, r3, #1
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d212      	bcs.n	80024fa <main+0x482>
				if (encoderFront.encoder_pos > MAX_FRONT_ALLOWABLE_ENC && speed[FRONT_INDEX] > 0)
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <main+0x56c>)
 80024d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d8:	f640 421c 	movw	r2, #3100	; 0xc1c
 80024dc:	4293      	cmp	r3, r2
 80024de:	d91e      	bls.n	800251e <main+0x4a6>
 80024e0:	4b3e      	ldr	r3, [pc, #248]	; (80025dc <main+0x564>)
 80024e2:	edd3 7a00 	vldr	s15, [r3]
 80024e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ee:	dd16      	ble.n	800251e <main+0x4a6>
					speed[FRONT_INDEX] = 0;
 80024f0:	4b3a      	ldr	r3, [pc, #232]	; (80025dc <main+0x564>)
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	e011      	b.n	800251e <main+0x4a6>
			}
			else{
				if (encoderFront.encoder_pos < MIN_FRONT_ALLOWABLE_ENC && speed[FRONT_INDEX] < 0)
 80024fa:	4b3a      	ldr	r3, [pc, #232]	; (80025e4 <main+0x56c>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	f641 2290 	movw	r2, #6800	; 0x1a90
 8002502:	4293      	cmp	r3, r2
 8002504:	d20b      	bcs.n	800251e <main+0x4a6>
 8002506:	4b35      	ldr	r3, [pc, #212]	; (80025dc <main+0x564>)
 8002508:	edd3 7a00 	vldr	s15, [r3]
 800250c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002514:	d503      	bpl.n	800251e <main+0x4a6>
					speed[FRONT_INDEX] = 0;
 8002516:	4b31      	ldr	r3, [pc, #196]	; (80025dc <main+0x564>)
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
			}

			if (encoderBack.encoder_pos < BACK_FULL_ROTATION_ENC / 2){
 800251e:	4b36      	ldr	r3, [pc, #216]	; (80025f8 <main+0x580>)
 8002520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002522:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002526:	085b      	lsrs	r3, r3, #1
 8002528:	429a      	cmp	r2, r3
 800252a:	d212      	bcs.n	8002552 <main+0x4da>
				if (encoderBack.encoder_pos > MAX_BACK_ALLOWABLE_ENC && speed[BACK_INDEX] > 0)
 800252c:	4b32      	ldr	r3, [pc, #200]	; (80025f8 <main+0x580>)
 800252e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002530:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002534:	4293      	cmp	r3, r2
 8002536:	d91e      	bls.n	8002576 <main+0x4fe>
 8002538:	4b28      	ldr	r3, [pc, #160]	; (80025dc <main+0x564>)
 800253a:	edd3 7a01 	vldr	s15, [r3, #4]
 800253e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002546:	dd16      	ble.n	8002576 <main+0x4fe>
					speed[BACK_INDEX] = 0;
 8002548:	4b24      	ldr	r3, [pc, #144]	; (80025dc <main+0x564>)
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	e011      	b.n	8002576 <main+0x4fe>
			}
			else{
				if (encoderBack.encoder_pos < MIN_BACK_ALLOWABLE_ENC && speed[BACK_INDEX] < 0)
 8002552:	4b29      	ldr	r3, [pc, #164]	; (80025f8 <main+0x580>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800255a:	4293      	cmp	r3, r2
 800255c:	d20b      	bcs.n	8002576 <main+0x4fe>
 800255e:	4b1f      	ldr	r3, [pc, #124]	; (80025dc <main+0x564>)
 8002560:	edd3 7a01 	vldr	s15, [r3, #4]
 8002564:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256c:	d503      	bpl.n	8002576 <main+0x4fe>
					speed[BACK_INDEX] = 0;
 800256e:	4b1b      	ldr	r3, [pc, #108]	; (80025dc <main+0x564>)
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	605a      	str	r2, [r3, #4]
			}
			//**********************************************************************************//

			runMotor(&rearMotor, speed[FRONT_INDEX]);
 8002576:	4b19      	ldr	r3, [pc, #100]	; (80025dc <main+0x564>)
 8002578:	edd3 7a00 	vldr	s15, [r3]
 800257c:	eeb0 0a67 	vmov.f32	s0, s15
 8002580:	481e      	ldr	r0, [pc, #120]	; (80025fc <main+0x584>)
 8002582:	f7ff f971 	bl	8001868 <runMotor>
			runMotor(&backMotor, speed[BACK_INDEX]);
 8002586:	4b15      	ldr	r3, [pc, #84]	; (80025dc <main+0x564>)
 8002588:	edd3 7a01 	vldr	s15, [r3, #4]
 800258c:	eeb0 0a67 	vmov.f32	s0, s15
 8002590:	481b      	ldr	r0, [pc, #108]	; (8002600 <main+0x588>)
 8002592:	f7ff f969 	bl	8001868 <runMotor>

			if (speed[FRONT_INDEX] == 0 && speed[BACK_INDEX] == 0)
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <main+0x564>)
 8002598:	edd3 7a00 	vldr	s15, [r3]
 800259c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a4:	d10b      	bne.n	80025be <main+0x546>
 80025a6:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <main+0x564>)
 80025a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80025ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b4:	d103      	bne.n	80025be <main+0x546>
				emBrakeMotor(0);
 80025b6:	2000      	movs	r0, #0
 80025b8:	f7ff f870 	bl	800169c <emBrakeMotor>
 80025bc:	e002      	b.n	80025c4 <main+0x54c>
			else
				emBrakeMotor(1);
 80025be:	2001      	movs	r0, #1
 80025c0:	f7ff f86c 	bl	800169c <emBrakeMotor>

			prev_time = HAL_GetTick();
 80025c4:	f001 fa34 	bl	8003a30 <HAL_GetTick>
 80025c8:	6078      	str	r0, [r7, #4]
		if (HAL_GetTick() - prev_time >= 1)
 80025ca:	e63b      	b.n	8002244 <main+0x1cc>
 80025cc:	f3af 8000 	nop.w
 80025d0:	54442d18 	.word	0x54442d18
 80025d4:	400921fb 	.word	0x400921fb
 80025d8:	200000a8 	.word	0x200000a8
 80025dc:	2000015c 	.word	0x2000015c
 80025e0:	3eb2b021 	.word	0x3eb2b021
 80025e4:	2000027c 	.word	0x2000027c
 80025e8:	40668000 	.word	0x40668000
 80025ec:	3e19999a 	.word	0x3e19999a
 80025f0:	3fb00000 	.word	0x3fb00000
 80025f4:	2000017c 	.word	0x2000017c
 80025f8:	200002d4 	.word	0x200002d4
 80025fc:	20000000 	.word	0x20000000
 8002600:	20000034 	.word	0x20000034

08002604 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b094      	sub	sp, #80	; 0x50
 8002608:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800260a:	f107 0320 	add.w	r3, r7, #32
 800260e:	2230      	movs	r2, #48	; 0x30
 8002610:	2100      	movs	r1, #0
 8002612:	4618      	mov	r0, r3
 8002614:	f005 fe92 	bl	800833c <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8002618:	f107 030c 	add.w	r3, r7, #12
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002628:	2300      	movs	r3, #0
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <SystemClock_Config+0xd8>)
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	4a2a      	ldr	r2, [pc, #168]	; (80026dc <SystemClock_Config+0xd8>)
 8002632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002636:	6413      	str	r3, [r2, #64]	; 0x40
 8002638:	4b28      	ldr	r3, [pc, #160]	; (80026dc <SystemClock_Config+0xd8>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002644:	2300      	movs	r3, #0
 8002646:	607b      	str	r3, [r7, #4]
 8002648:	4b25      	ldr	r3, [pc, #148]	; (80026e0 <SystemClock_Config+0xdc>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a24      	ldr	r2, [pc, #144]	; (80026e0 <SystemClock_Config+0xdc>)
 800264e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <SystemClock_Config+0xdc>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800265c:	607b      	str	r3, [r7, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002660:	2301      	movs	r3, #1
 8002662:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800266a:	2302      	movs	r3, #2
 800266c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800266e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002672:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002674:	2308      	movs	r3, #8
 8002676:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8002678:	23b4      	movs	r3, #180	; 0xb4
 800267a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800267c:	2302      	movs	r3, #2
 800267e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002680:	2304      	movs	r3, #4
 8002682:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002684:	f107 0320 	add.w	r3, r7, #32
 8002688:	4618      	mov	r0, r3
 800268a:	f003 f907 	bl	800589c <HAL_RCC_OscConfig>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8002694:	f000 fbfc 	bl	8002e90 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002698:	f003 f8b0 	bl	80057fc <HAL_PWREx_EnableOverDrive>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <SystemClock_Config+0xa2>
	{
		Error_Handler();
 80026a2:	f000 fbf5 	bl	8002e90 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80026a6:	230f      	movs	r3, #15
 80026a8:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026aa:	2302      	movs	r3, #2
 80026ac:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80026b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80026b6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80026b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026bc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80026be:	f107 030c 	add.w	r3, r7, #12
 80026c2:	2105      	movs	r1, #5
 80026c4:	4618      	mov	r0, r3
 80026c6:	f003 fb59 	bl	8005d7c <HAL_RCC_ClockConfig>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <SystemClock_Config+0xd0>
	{
		Error_Handler();
 80026d0:	f000 fbde 	bl	8002e90 <Error_Handler>
	}
}
 80026d4:	bf00      	nop
 80026d6:	3750      	adds	r7, #80	; 0x50
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40007000 	.word	0x40007000

080026e4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 80026ee:	88fb      	ldrh	r3, [r7, #6]
 80026f0:	2b80      	cmp	r3, #128	; 0x80
 80026f2:	d11c      	bne.n	800272e <HAL_GPIO_EXTI_Callback+0x4a>
	{
	case AD_BUSY_Pin:
	{
		if (HAL_GetTick() - prev_adc_time > 1)
 80026f4:	f001 f99c 	bl	8003a30 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <HAL_GPIO_EXTI_Callback+0x58>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b01      	cmp	r3, #1
 8002702:	d916      	bls.n	8002732 <HAL_GPIO_EXTI_Callback+0x4e>
		{
			ADC_Read(adc_rawData);
 8002704:	480e      	ldr	r0, [pc, #56]	; (8002740 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002706:	f7fe ff8b 	bl	8001620 <ADC_Read>
			tempJoyRawDataX = adc_rawData[2];
 800270a:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <HAL_GPIO_EXTI_Callback+0x5c>)
 800270c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002710:	461a      	mov	r2, r3
 8002712:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <HAL_GPIO_EXTI_Callback+0x60>)
 8002714:	601a      	str	r2, [r3, #0]
			tempJoyRawDataY = adc_rawData[1];
 8002716:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002718:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800271c:	461a      	mov	r2, r3
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <HAL_GPIO_EXTI_Callback+0x64>)
 8002720:	601a      	str	r2, [r3, #0]
			prev_adc_time = HAL_GetTick();
 8002722:	f001 f985 	bl	8003a30 <HAL_GetTick>
 8002726:	4603      	mov	r3, r0
 8002728:	4a04      	ldr	r2, [pc, #16]	; (800273c <HAL_GPIO_EXTI_Callback+0x58>)
 800272a:	6013      	str	r3, [r2, #0]
		}
	}
		break;
 800272c:	e001      	b.n	8002732 <HAL_GPIO_EXTI_Callback+0x4e>
	default:
		break;
 800272e:	bf00      	nop
 8002730:	e000      	b.n	8002734 <HAL_GPIO_EXTI_Callback+0x50>
		break;
 8002732:	bf00      	nop
	}
}
 8002734:	bf00      	nop
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20000154 	.word	0x20000154
 8002740:	20000424 	.word	0x20000424
 8002744:	2000047c 	.word	0x2000047c
 8002748:	20000380 	.word	0x20000380

0800274c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
	//Hub Encoder callback
	if (huart->Instance == USART3)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a3f      	ldr	r2, [pc, #252]	; (8002858 <HAL_UART_RxCpltCallback+0x10c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d175      	bne.n	800284a <HAL_UART_RxCpltCallback+0xfe>
	{
		//Checksum, make sure that response is correct
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 800275e:	4b3f      	ldr	r3, [pc, #252]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	b29a      	uxth	r2, r3
 8002764:	4b3d      	ldr	r3, [pc, #244]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 8002766:	785b      	ldrb	r3, [r3, #1]
 8002768:	b29b      	uxth	r3, r3
 800276a:	4413      	add	r3, r2
 800276c:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[2] + (uint16_t) receive_buf[3]
 800276e:	4b3b      	ldr	r3, [pc, #236]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 8002770:	789b      	ldrb	r3, [r3, #2]
 8002772:	b29b      	uxth	r3, r3
 8002774:	4413      	add	r3, r2
 8002776:	b29a      	uxth	r2, r3
 8002778:	4b38      	ldr	r3, [pc, #224]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 800277a:	78db      	ldrb	r3, [r3, #3]
 800277c:	b29b      	uxth	r3, r3
 800277e:	4413      	add	r3, r2
 8002780:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[4] + (uint16_t) receive_buf[5]
 8002782:	4b36      	ldr	r3, [pc, #216]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 8002784:	791b      	ldrb	r3, [r3, #4]
 8002786:	b29b      	uxth	r3, r3
 8002788:	4413      	add	r3, r2
 800278a:	b29a      	uxth	r2, r3
 800278c:	4b33      	ldr	r3, [pc, #204]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 800278e:	795b      	ldrb	r3, [r3, #5]
 8002790:	b29b      	uxth	r3, r3
 8002792:	4413      	add	r3, r2
 8002794:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[6] + (uint16_t) receive_buf[7]
 8002796:	4b31      	ldr	r3, [pc, #196]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 8002798:	799b      	ldrb	r3, [r3, #6]
 800279a:	b29b      	uxth	r3, r3
 800279c:	4413      	add	r3, r2
 800279e:	b29a      	uxth	r2, r3
 80027a0:	4b2e      	ldr	r3, [pc, #184]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 80027a2:	79db      	ldrb	r3, [r3, #7]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[8] + (uint16_t) receive_buf[9]
 80027aa:	4b2c      	ldr	r3, [pc, #176]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 80027ac:	7a1b      	ldrb	r3, [r3, #8]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	4b29      	ldr	r3, [pc, #164]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 80027b6:	7a5b      	ldrb	r3, [r3, #9]
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[10] + (uint16_t) receive_buf[11]
 80027be:	4b27      	ldr	r3, [pc, #156]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 80027c0:	7a9b      	ldrb	r3, [r3, #10]
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	4b24      	ldr	r3, [pc, #144]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 80027ca:	7adb      	ldrb	r3, [r3, #11]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	b29a      	uxth	r2, r3
				+ (uint16_t) receive_buf[12] + (uint16_t) receive_buf[13];
 80027d2:	4b22      	ldr	r3, [pc, #136]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 80027d4:	7b1b      	ldrb	r3, [r3, #12]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	4413      	add	r3, r2
 80027da:	b29a      	uxth	r2, r3
 80027dc:	4b1f      	ldr	r3, [pc, #124]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 80027de:	7b5b      	ldrb	r3, [r3, #13]
 80027e0:	b29b      	uxth	r3, r3
		uint16_t sum = (uint16_t) receive_buf[0] + (uint16_t) receive_buf[1]
 80027e2:	4413      	add	r3, r2
 80027e4:	81fb      	strh	r3, [r7, #14]
		if ((uint8_t) sum == receive_buf[14])
 80027e6:	89fb      	ldrh	r3, [r7, #14]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	4b1c      	ldr	r3, [pc, #112]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 80027ec:	7b9b      	ldrb	r3, [r3, #14]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d12b      	bne.n	800284a <HAL_UART_RxCpltCallback+0xfe>
		{
			//Encoder Feedback
			if (receive_buf[0] == 0xAA && receive_buf[1] == 0xA4
 80027f2:	4b1a      	ldr	r3, [pc, #104]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2baa      	cmp	r3, #170	; 0xaa
 80027f8:	d127      	bne.n	800284a <HAL_UART_RxCpltCallback+0xfe>
 80027fa:	4b18      	ldr	r3, [pc, #96]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 80027fc:	785b      	ldrb	r3, [r3, #1]
 80027fe:	2ba4      	cmp	r3, #164	; 0xa4
 8002800:	d123      	bne.n	800284a <HAL_UART_RxCpltCallback+0xfe>
					&& receive_buf[3] == 0x00)
 8002802:	4b16      	ldr	r3, [pc, #88]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 8002804:	78db      	ldrb	r3, [r3, #3]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d11f      	bne.n	800284a <HAL_UART_RxCpltCallback+0xfe>
			{
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 800280a:	4b14      	ldr	r3, [pc, #80]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 800280c:	7a5b      	ldrb	r3, [r3, #9]
 800280e:	061a      	lsls	r2, r3, #24
						+ (receive_buf[8] << 16) + (receive_buf[7] << 8)
 8002810:	4b12      	ldr	r3, [pc, #72]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 8002812:	7a1b      	ldrb	r3, [r3, #8]
 8002814:	041b      	lsls	r3, r3, #16
 8002816:	441a      	add	r2, r3
 8002818:	4b10      	ldr	r3, [pc, #64]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 800281a:	79db      	ldrb	r3, [r3, #7]
 800281c:	021b      	lsls	r3, r3, #8
 800281e:	4413      	add	r3, r2
						+ (receive_buf[6]);
 8002820:	4a0e      	ldr	r2, [pc, #56]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 8002822:	7992      	ldrb	r2, [r2, #6]
 8002824:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_1 = (receive_buf[9] << 24)
 8002826:	4a0e      	ldr	r2, [pc, #56]	; (8002860 <HAL_UART_RxCpltCallback+0x114>)
 8002828:	6013      	str	r3, [r2, #0]
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 800282a:	4b0c      	ldr	r3, [pc, #48]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 800282c:	7b5b      	ldrb	r3, [r3, #13]
 800282e:	061a      	lsls	r2, r3, #24
						+ (receive_buf[12] << 16) + (receive_buf[11] << 8)
 8002830:	4b0a      	ldr	r3, [pc, #40]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 8002832:	7b1b      	ldrb	r3, [r3, #12]
 8002834:	041b      	lsls	r3, r3, #16
 8002836:	441a      	add	r2, r3
 8002838:	4b08      	ldr	r3, [pc, #32]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 800283a:	7adb      	ldrb	r3, [r3, #11]
 800283c:	021b      	lsls	r3, r3, #8
 800283e:	4413      	add	r3, r2
						+ (receive_buf[10]);
 8002840:	4a06      	ldr	r2, [pc, #24]	; (800285c <HAL_UART_RxCpltCallback+0x110>)
 8002842:	7a92      	ldrb	r2, [r2, #10]
 8002844:	4413      	add	r3, r2
				hub_encoder_feedback.encoder_2 = (receive_buf[13] << 24)
 8002846:	4a06      	ldr	r2, [pc, #24]	; (8002860 <HAL_UART_RxCpltCallback+0x114>)
 8002848:	6053      	str	r3, [r2, #4]
			}
		}
	}

}
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40004800 	.word	0x40004800
 800285c:	2000046c 	.word	0x2000046c
 8002860:	20000384 	.word	0x20000384
 8002864:	00000000 	.word	0x00000000

08002868 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
	//Left Encoder Callback
	static CAN_RxHeaderTypeDef canRxHeader;
	uint8_t incoming[8];
	if (hcan == &hcan1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a8f      	ldr	r2, [pc, #572]	; (8002ab0 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002874:	4293      	cmp	r3, r2
 8002876:	f040 810c 	bne.w	8002a92 <HAL_CAN_RxFifo0MsgPendingCallback+0x22a>
	{
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &canRxHeader, incoming);
 800287a:	f107 0308 	add.w	r3, r7, #8
 800287e:	4a8d      	ldr	r2, [pc, #564]	; (8002ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8002880:	2100      	movs	r1, #0
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f001 fbff 	bl	8004086 <HAL_CAN_GetRxMessage>
		if (incoming[1] == ENC_ADDR_LEFT)
 8002888:	7a7b      	ldrb	r3, [r7, #9]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d151      	bne.n	8002932 <HAL_CAN_RxFifo0MsgPendingCallback+0xca>
		{
			ENCODER_Sort_Incoming(incoming, &encoderBack);
 800288e:	f107 0308 	add.w	r3, r7, #8
 8002892:	4989      	ldr	r1, [pc, #548]	; (8002ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff f987 	bl	8001ba8 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderBack);
 800289a:	4887      	ldr	r0, [pc, #540]	; (8002ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 800289c:	f7ff f9fd 	bl	8001c9a <ENCODER_Get_Angle>
			//Process the angle and GR
			//4096 is encoder single turn value
			//Need to check the encoder value in the correct direction
			encoderBack.encoder_pos = (uint32_t) (4096 * BACK_GEAR_RATIO)
					- encoderBack.encoder_pos
 80028a0:	4b85      	ldr	r3, [pc, #532]	; (8002ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 80028a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
							% (uint32_t) (4096 * BACK_GEAR_RATIO);
 80028a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
					- encoderBack.encoder_pos
 80028a8:	f5c3 5300 	rsb	r3, r3, #8192	; 0x2000
			encoderBack.encoder_pos = (uint32_t) (4096 * BACK_GEAR_RATIO)
 80028ac:	4a82      	ldr	r2, [pc, #520]	; (8002ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 80028ae:	6453      	str	r3, [r2, #68]	; 0x44
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 80028b0:	4b81      	ldr	r3, [pc, #516]	; (8002ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 80028b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b4:	ee07 3a90 	vmov	s15, r3
 80028b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
					/ (4096 * BACK_GEAR_RATIO) * 360 + 36.587;
 80028bc:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8002abc <HAL_CAN_RxFifo0MsgPendingCallback+0x254>
 80028c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028c4:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002ac0 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>
 80028c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028cc:	ee17 0a90 	vmov	r0, s15
 80028d0:	f7fd fdf2 	bl	80004b8 <__aeabi_f2d>
 80028d4:	a372      	add	r3, pc, #456	; (adr r3, 8002aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 80028d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028da:	f7fd fc8f 	bl	80001fc <__adddf3>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4610      	mov	r0, r2
 80028e4:	4619      	mov	r1, r3
 80028e6:	f7fe f921 	bl	8000b2c <__aeabi_d2f>
 80028ea:	4603      	mov	r3, r0
			encoderBack.angleDeg = (float) encoderBack.encoder_pos
 80028ec:	4a72      	ldr	r2, [pc, #456]	; (8002ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 80028ee:	6413      	str	r3, [r2, #64]	; 0x40
			if (encoderBack.angleDeg > 360)
 80028f0:	4b71      	ldr	r3, [pc, #452]	; (8002ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 80028f2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80028f6:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002ac0 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>
 80028fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002902:	dd09      	ble.n	8002918 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
				encoderBack.angleDeg -= 360;
 8002904:	4b6c      	ldr	r3, [pc, #432]	; (8002ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8002906:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800290a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8002ac0 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>
 800290e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002912:	4b69      	ldr	r3, [pc, #420]	; (8002ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8002914:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			if (encoderBack.encoder_pos >= MAX_BACK_ALLOWABLE_ENC)
 8002918:	4b67      	ldr	r3, [pc, #412]	; (8002ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 800291a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002920:	4293      	cmp	r3, r2
 8002922:	d306      	bcc.n	8002932 <HAL_CAN_RxFifo0MsgPendingCallback+0xca>
				encoderBack.signed_encoder_pos = encoderBack.encoder_pos
 8002924:	4b64      	ldr	r3, [pc, #400]	; (8002ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8002926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
						- 4096 * BACK_GEAR_RATIO;
 8002928:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800292c:	461a      	mov	r2, r3
				encoderBack.signed_encoder_pos = encoderBack.encoder_pos
 800292e:	4b62      	ldr	r3, [pc, #392]	; (8002ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8002930:	649a      	str	r2, [r3, #72]	; 0x48
		}
		if (incoming[1] == ENC_ADDR_RIGHT)
 8002932:	7a7b      	ldrb	r3, [r7, #9]
 8002934:	2b02      	cmp	r3, #2
 8002936:	f040 80ac 	bne.w	8002a92 <HAL_CAN_RxFifo0MsgPendingCallback+0x22a>
		{
			ENCODER_Sort_Incoming(incoming, &encoderFront);
 800293a:	f107 0308 	add.w	r3, r7, #8
 800293e:	4961      	ldr	r1, [pc, #388]	; (8002ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff f931 	bl	8001ba8 <ENCODER_Sort_Incoming>
			ENCODER_Get_Angle(&encoderFront);
 8002946:	485f      	ldr	r0, [pc, #380]	; (8002ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002948:	f7ff f9a7 	bl	8001c9a <ENCODER_Get_Angle>
			if (4096 * 24 - encoderFront.encoder_pos < 30000)
 800294c:	4b5d      	ldr	r3, [pc, #372]	; (8002ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 800294e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002950:	f5c3 33c0 	rsb	r3, r3, #98304	; 0x18000
 8002954:	f247 522f 	movw	r2, #29999	; 0x752f
 8002958:	4293      	cmp	r3, r2
 800295a:	d839      	bhi.n	80029d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>
			{
				encoderFront.encoder_pos =
						(4096 * 24 - encoderFront.encoder_pos)
 800295c:	4b59      	ldr	r3, [pc, #356]	; (8002ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 800295e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002960:	f5c3 32c0 	rsb	r2, r3, #98304	; 0x18000
								% (uint32_t) (4096 * FRONT_GEAR_RATIO);
 8002964:	4b58      	ldr	r3, [pc, #352]	; (8002ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8002966:	fba3 1302 	umull	r1, r3, r3, r2
 800296a:	0b5b      	lsrs	r3, r3, #13
 800296c:	f242 3133 	movw	r1, #9011	; 0x2333
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	1ad3      	subs	r3, r2, r3
				encoderFront.encoder_pos =
 8002976:	4a53      	ldr	r2, [pc, #332]	; (8002ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002978:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 800297a:	4b52      	ldr	r3, [pc, #328]	; (8002ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	ee07 3a90 	vmov	s15, r3
 8002982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002986:	ee17 0a90 	vmov	r0, s15
 800298a:	f7fd fd95 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587;
 800298e:	a346      	add	r3, pc, #280	; (adr r3, 8002aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8002990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002994:	f7fd ff12 	bl	80007bc <__aeabi_ddiv>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4610      	mov	r0, r2
 800299e:	4619      	mov	r1, r3
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	4b49      	ldr	r3, [pc, #292]	; (8002acc <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 80029a6:	f7fd fddf 	bl	8000568 <__aeabi_dmul>
 80029aa:	4602      	mov	r2, r0
 80029ac:	460b      	mov	r3, r1
 80029ae:	4610      	mov	r0, r2
 80029b0:	4619      	mov	r1, r3
 80029b2:	a33b      	add	r3, pc, #236	; (adr r3, 8002aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 80029b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b8:	f7fd fc20 	bl	80001fc <__adddf3>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	f7fe f8b2 	bl	8000b2c <__aeabi_d2f>
 80029c8:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 80029ca:	4a3e      	ldr	r2, [pc, #248]	; (8002ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 80029cc:	6413      	str	r3, [r2, #64]	; 0x40
 80029ce:	e047      	b.n	8002a60 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>
			}
			else
			{
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
						- encoderFront.encoder_pos;
 80029d0:	4b3c      	ldr	r3, [pc, #240]	; (8002ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 80029d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fd fd4d 	bl	8000474 <__aeabi_ui2d>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	a132      	add	r1, pc, #200	; (adr r1, 8002aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 80029e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029e4:	f7fd fc08 	bl	80001f8 <__aeabi_dsub>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
				encoderFront.encoder_pos = (4096 * FRONT_GEAR_RATIO)
 80029ec:	4610      	mov	r0, r2
 80029ee:	4619      	mov	r1, r3
 80029f0:	f7fe f87c 	bl	8000aec <__aeabi_d2uiz>
 80029f4:	4603      	mov	r3, r0
 80029f6:	4a33      	ldr	r2, [pc, #204]	; (8002ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 80029f8:	6453      	str	r3, [r2, #68]	; 0x44
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 80029fa:	4b32      	ldr	r3, [pc, #200]	; (8002ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	ee07 3a90 	vmov	s15, r3
 8002a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a06:	ee17 0a90 	vmov	r0, s15
 8002a0a:	f7fd fd55 	bl	80004b8 <__aeabi_f2d>
						/ (4096 * FRONT_GEAR_RATIO) * 360 + 36.587 - 360;
 8002a0e:	a326      	add	r3, pc, #152	; (adr r3, 8002aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8002a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a14:	f7fd fed2 	bl	80007bc <__aeabi_ddiv>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4610      	mov	r0, r2
 8002a1e:	4619      	mov	r1, r3
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	4b29      	ldr	r3, [pc, #164]	; (8002acc <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 8002a26:	f7fd fd9f 	bl	8000568 <__aeabi_dmul>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4610      	mov	r0, r2
 8002a30:	4619      	mov	r1, r3
 8002a32:	a31b      	add	r3, pc, #108	; (adr r3, 8002aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8002a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a38:	f7fd fbe0 	bl	80001fc <__adddf3>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4610      	mov	r0, r2
 8002a42:	4619      	mov	r1, r3
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	4b20      	ldr	r3, [pc, #128]	; (8002acc <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 8002a4a:	f7fd fbd5 	bl	80001f8 <__aeabi_dsub>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4610      	mov	r0, r2
 8002a54:	4619      	mov	r1, r3
 8002a56:	f7fe f869 	bl	8000b2c <__aeabi_d2f>
 8002a5a:	4603      	mov	r3, r0
				encoderFront.angleDeg = (float) encoderFront.encoder_pos
 8002a5c:	4a19      	ldr	r2, [pc, #100]	; (8002ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002a5e:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if (encoderFront.encoder_pos >= MAX_FRONT_ALLOWABLE_ENC)
 8002a60:	4b18      	ldr	r3, [pc, #96]	; (8002ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a64:	f640 421c 	movw	r2, #3100	; 0xc1c
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d312      	bcc.n	8002a92 <HAL_CAN_RxFifo0MsgPendingCallback+0x22a>
				encoderFront.signed_encoder_pos = encoderFront.encoder_pos
 8002a6c:	4b15      	ldr	r3, [pc, #84]	; (8002ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
						- 4096 * FRONT_GEAR_RATIO;
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fd fcff 	bl	8000474 <__aeabi_ui2d>
 8002a76:	a30c      	add	r3, pc, #48	; (adr r3, 8002aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8002a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7c:	f7fd fbbc 	bl	80001f8 <__aeabi_dsub>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
				encoderFront.signed_encoder_pos = encoderFront.encoder_pos
 8002a84:	4610      	mov	r0, r2
 8002a86:	4619      	mov	r1, r3
 8002a88:	f7fe f808 	bl	8000a9c <__aeabi_d2iz>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	4a0d      	ldr	r2, [pc, #52]	; (8002ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002a90:	6493      	str	r3, [r2, #72]	; 0x48
		}
	}
}
 8002a92:	bf00      	nop
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	f3af 8000 	nop.w
 8002aa0:	d0e56042 	.word	0xd0e56042
 8002aa4:	40424b22 	.word	0x40424b22
 8002aa8:	9999999a 	.word	0x9999999a
 8002aac:	40c19999 	.word	0x40c19999
 8002ab0:	2000022c 	.word	0x2000022c
 8002ab4:	20000184 	.word	0x20000184
 8002ab8:	200002d4 	.word	0x200002d4
 8002abc:	46000000 	.word	0x46000000
 8002ac0:	43b40000 	.word	0x43b40000
 8002ac4:	2000027c 	.word	0x2000027c
 8002ac8:	e8bb8111 	.word	0xe8bb8111
 8002acc:	40768000 	.word	0x40768000

08002ad0 <climbingForward>:
	MOTOR_TIM.Instance->LEFT_MOTOR_CHANNEL = (int) baseWheelSpeed.cur_l + 1500;
}

//Hub motor move forward  by preset dist
bool climbingForward(float dist)
{
 8002ad0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	ed87 0a01 	vstr	s0, [r7, #4]
	static int prev_tick = 0;
	static int32_t prev_enc;
	static bool first_loop = true;
	static float dist_remaining;

	float rps = (dist >= 0) ? 1.0 : -1.0; //rad/s
 8002adc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ae0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae8:	db02      	blt.n	8002af0 <climbingForward+0x20>
 8002aea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002aee:	e000      	b.n	8002af2 <climbingForward+0x22>
 8002af0:	4b65      	ldr	r3, [pc, #404]	; (8002c88 <climbingForward+0x1b8>)
 8002af2:	617b      	str	r3, [r7, #20]

	if (first_loop)
 8002af4:	4b65      	ldr	r3, [pc, #404]	; (8002c8c <climbingForward+0x1bc>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00f      	beq.n	8002b1c <climbingForward+0x4c>
	{
		prev_enc = hub_encoder_feedback.encoder_2;
 8002afc:	4b64      	ldr	r3, [pc, #400]	; (8002c90 <climbingForward+0x1c0>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	4a64      	ldr	r2, [pc, #400]	; (8002c94 <climbingForward+0x1c4>)
 8002b02:	6013      	str	r3, [r2, #0]
		prev_tick = HAL_GetTick();
 8002b04:	f000 ff94 	bl	8003a30 <HAL_GetTick>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4b62      	ldr	r3, [pc, #392]	; (8002c98 <climbingForward+0x1c8>)
 8002b0e:	601a      	str	r2, [r3, #0]
		first_loop = false;
 8002b10:	4b5e      	ldr	r3, [pc, #376]	; (8002c8c <climbingForward+0x1bc>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	701a      	strb	r2, [r3, #0]
		dist_remaining = dist;
 8002b16:	4a61      	ldr	r2, [pc, #388]	; (8002c9c <climbingForward+0x1cc>)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6013      	str	r3, [r2, #0]
	}
	if (dist / dist_remaining >= 0 && first_loop == false)
 8002b1c:	4b5f      	ldr	r3, [pc, #380]	; (8002c9c <climbingForward+0x1cc>)
 8002b1e:	ed93 7a00 	vldr	s14, [r3]
 8002b22:	edd7 6a01 	vldr	s13, [r7, #4]
 8002b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b32:	f2c0 8090 	blt.w	8002c56 <climbingForward+0x186>
 8002b36:	4b55      	ldr	r3, [pc, #340]	; (8002c8c <climbingForward+0x1bc>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	f083 0301 	eor.w	r3, r3, #1
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 8088 	beq.w	8002c56 <climbingForward+0x186>
	{
		send_HubMotor(rps, rps);
 8002b46:	edd7 0a05 	vldr	s1, [r7, #20]
 8002b4a:	ed97 0a05 	vldr	s0, [r7, #20]
 8002b4e:	f7fe fc3b 	bl	80013c8 <send_HubMotor>
		if (HAL_GetTick() - prev_tick > 1)
 8002b52:	f000 ff6d 	bl	8003a30 <HAL_GetTick>
 8002b56:	4603      	mov	r3, r0
 8002b58:	4a4f      	ldr	r2, [pc, #316]	; (8002c98 <climbingForward+0x1c8>)
 8002b5a:	6812      	ldr	r2, [r2, #0]
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d977      	bls.n	8002c52 <climbingForward+0x182>
		{
			float dt = (float) (HAL_GetTick() - prev_tick) / FREQUENCY;
 8002b62:	f000 ff65 	bl	8003a30 <HAL_GetTick>
 8002b66:	4603      	mov	r3, r0
 8002b68:	4a4b      	ldr	r2, [pc, #300]	; (8002c98 <climbingForward+0x1c8>)
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b76:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8002ca0 <climbingForward+0x1d0>
 8002b7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b7e:	edc7 7a04 	vstr	s15, [r7, #16]
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 8002b82:	4b43      	ldr	r3, [pc, #268]	; (8002c90 <climbingForward+0x1c0>)
 8002b84:	685a      	ldr	r2, [r3, #4]
					- prev_enc) / dt) * 2 * M_PI / 4096;
 8002b86:	4b43      	ldr	r3, [pc, #268]	; (8002c94 <climbingForward+0x1c4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	1ad3      	subs	r3, r2, r3
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 8002b8c:	ee07 3a90 	vmov	s15, r3
 8002b90:	eef8 6ae7 	vcvt.f32.s32	s13, s15
					- prev_enc) / dt) * 2 * M_PI / 4096;
 8002b94:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ba0:	ee17 0a90 	vmov	r0, s15
 8002ba4:	f7fd fc88 	bl	80004b8 <__aeabi_f2d>
 8002ba8:	a333      	add	r3, pc, #204	; (adr r3, 8002c78 <climbingForward+0x1a8>)
 8002baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bae:	f7fd fcdb 	bl	8000568 <__aeabi_dmul>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	4b39      	ldr	r3, [pc, #228]	; (8002ca4 <climbingForward+0x1d4>)
 8002bc0:	f7fd fdfc 	bl	80007bc <__aeabi_ddiv>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
			float rad_per_s = ((float) (hub_encoder_feedback.encoder_2
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4619      	mov	r1, r3
 8002bcc:	f7fd ffae 	bl	8000b2c <__aeabi_d2f>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	60fb      	str	r3, [r7, #12]
			dist_remaining -= (HUB_DIAMETER * rad_per_s * dt) / 2;
 8002bd4:	4b31      	ldr	r3, [pc, #196]	; (8002c9c <climbingForward+0x1cc>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fd fc6d 	bl	80004b8 <__aeabi_f2d>
 8002bde:	4604      	mov	r4, r0
 8002be0:	460d      	mov	r5, r1
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f7fd fc68 	bl	80004b8 <__aeabi_f2d>
 8002be8:	a325      	add	r3, pc, #148	; (adr r3, 8002c80 <climbingForward+0x1b0>)
 8002bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bee:	f7fd fcbb 	bl	8000568 <__aeabi_dmul>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4690      	mov	r8, r2
 8002bf8:	4699      	mov	r9, r3
 8002bfa:	6938      	ldr	r0, [r7, #16]
 8002bfc:	f7fd fc5c 	bl	80004b8 <__aeabi_f2d>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4640      	mov	r0, r8
 8002c06:	4649      	mov	r1, r9
 8002c08:	f7fd fcae 	bl	8000568 <__aeabi_dmul>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c1c:	f7fd fdce 	bl	80007bc <__aeabi_ddiv>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4620      	mov	r0, r4
 8002c26:	4629      	mov	r1, r5
 8002c28:	f7fd fae6 	bl	80001f8 <__aeabi_dsub>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4610      	mov	r0, r2
 8002c32:	4619      	mov	r1, r3
 8002c34:	f7fd ff7a 	bl	8000b2c <__aeabi_d2f>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4a18      	ldr	r2, [pc, #96]	; (8002c9c <climbingForward+0x1cc>)
 8002c3c:	6013      	str	r3, [r2, #0]
			prev_tick = HAL_GetTick();
 8002c3e:	f000 fef7 	bl	8003a30 <HAL_GetTick>
 8002c42:	4603      	mov	r3, r0
 8002c44:	461a      	mov	r2, r3
 8002c46:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <climbingForward+0x1c8>)
 8002c48:	601a      	str	r2, [r3, #0]
			prev_enc = hub_encoder_feedback.encoder_2;
 8002c4a:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <climbingForward+0x1c0>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4a11      	ldr	r2, [pc, #68]	; (8002c94 <climbingForward+0x1c4>)
 8002c50:	6013      	str	r3, [r2, #0]
		}
		return true;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e009      	b.n	8002c6a <climbingForward+0x19a>
	}
	else
	{
		first_loop = true;
 8002c56:	4b0d      	ldr	r3, [pc, #52]	; (8002c8c <climbingForward+0x1bc>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	701a      	strb	r2, [r3, #0]
		send_HubMotor(0, 0);
 8002c5c:	eddf 0a12 	vldr	s1, [pc, #72]	; 8002ca8 <climbingForward+0x1d8>
 8002c60:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8002ca8 <climbingForward+0x1d8>
 8002c64:	f7fe fbb0 	bl	80013c8 <send_HubMotor>
		return false;
 8002c68:	2300      	movs	r3, #0
	}
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c74:	f3af 8000 	nop.w
 8002c78:	54442d18 	.word	0x54442d18
 8002c7c:	400921fb 	.word	0x400921fb
 8002c80:	916872b0 	.word	0x916872b0
 8002c84:	3fbf7ced 	.word	0x3fbf7ced
 8002c88:	bf800000 	.word	0xbf800000
 8002c8c:	20000125 	.word	0x20000125
 8002c90:	20000384 	.word	0x20000384
 8002c94:	200001a0 	.word	0x200001a0
 8002c98:	200001a4 	.word	0x200001a4
 8002c9c:	200001a8 	.word	0x200001a8
 8002ca0:	447a0000 	.word	0x447a0000
 8002ca4:	40b00000 	.word	0x40b00000
	...

08002cb0 <goto_pos>:

//Control rear and back wheel to set encoder position using PID controller
bool goto_pos(int enc, PID_t pid_t)
{
 8002cb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	6039      	str	r1, [r7, #0]
	int cur_enc_pos;

	if (pid_t == frontClimb_pid)
 8002cbc:	4b68      	ldr	r3, [pc, #416]	; (8002e60 <goto_pos+0x1b0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d16a      	bne.n	8002d9c <goto_pos+0xec>
	{
		cur_enc_pos = (int) encoderFront.encoder_pos;
 8002cc6:	4b67      	ldr	r3, [pc, #412]	; (8002e64 <goto_pos+0x1b4>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	60fb      	str	r3, [r7, #12]
//				&& ((encoderFront.encoder_pos >= 0
//						&& encoderFront.encoder_pos < MAX_FRONT_ALLOWABLE_ENC)
//						|| (encoderFront.encoder_pos > MIN_FRONT_ALLOWABLE_ENC
//								&& encoderFront.encoder_pos
//										<= 4096 * FRONT_GEAR_RATIO)))
		if (pid_need_compute(frontClimb_pid) && fabs(enc - cur_enc_pos) > 5)
 8002ccc:	4b64      	ldr	r3, [pc, #400]	; (8002e60 <goto_pos+0x1b0>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fe f939 	bl	8000f48 <pid_need_compute>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d059      	beq.n	8002d90 <goto_pos+0xe0>
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fd fbd6 	bl	8000494 <__aeabi_i2d>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4690      	mov	r8, r2
 8002cee:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	4b5c      	ldr	r3, [pc, #368]	; (8002e68 <goto_pos+0x1b8>)
 8002cf8:	4640      	mov	r0, r8
 8002cfa:	4649      	mov	r1, r9
 8002cfc:	f7fd fec4 	bl	8000a88 <__aeabi_dcmpgt>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d044      	beq.n	8002d90 <goto_pos+0xe0>
		{
			// Read process feedback
			if (cur_enc_pos > MAX_FRONT_ALLOWABLE_ENC)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f640 421c 	movw	r2, #3100	; 0xc1c
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d90f      	bls.n	8002d30 <goto_pos+0x80>
				cur_enc_pos -= 4096 * FRONT_GEAR_RATIO;
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f7fd fbbf 	bl	8000494 <__aeabi_i2d>
 8002d16:	a350      	add	r3, pc, #320	; (adr r3, 8002e58 <goto_pos+0x1a8>)
 8002d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1c:	f7fd fa6c 	bl	80001f8 <__aeabi_dsub>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4610      	mov	r0, r2
 8002d26:	4619      	mov	r1, r3
 8002d28:	f7fd feb8 	bl	8000a9c <__aeabi_d2iz>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	60fb      	str	r3, [r7, #12]
			if (enc >= MAX_FRONT_ALLOWABLE_ENC)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f640 421c 	movw	r2, #3100	; 0xc1c
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d30f      	bcc.n	8002d5a <goto_pos+0xaa>
				enc -= 4096 * FRONT_GEAR_RATIO;
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fd fbaa 	bl	8000494 <__aeabi_i2d>
 8002d40:	a345      	add	r3, pc, #276	; (adr r3, 8002e58 <goto_pos+0x1a8>)
 8002d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d46:	f7fd fa57 	bl	80001f8 <__aeabi_dsub>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4610      	mov	r0, r2
 8002d50:	4619      	mov	r1, r3
 8002d52:	f7fd fea3 	bl	8000a9c <__aeabi_d2iz>
 8002d56:	4603      	mov	r3, r0
 8002d58:	607b      	str	r3, [r7, #4]
			frontClimb_setpoint = enc;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	ee07 3a90 	vmov	s15, r3
 8002d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d64:	4b41      	ldr	r3, [pc, #260]	; (8002e6c <goto_pos+0x1bc>)
 8002d66:	edc3 7a00 	vstr	s15, [r3]
			frontClimb_input = cur_enc_pos;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	ee07 3a90 	vmov	s15, r3
 8002d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d74:	4b3e      	ldr	r3, [pc, #248]	; (8002e70 <goto_pos+0x1c0>)
 8002d76:	edc3 7a00 	vstr	s15, [r3]
			// Compute new PID output value
			pid_compute(frontClimb_pid);
 8002d7a:	4b39      	ldr	r3, [pc, #228]	; (8002e60 <goto_pos+0x1b0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fe f8f7 	bl	8000f72 <pid_compute>
			//Change actuator value
			speed[FRONT_INDEX] = frontClimb_output;
 8002d84:	4b3b      	ldr	r3, [pc, #236]	; (8002e74 <goto_pos+0x1c4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a3b      	ldr	r2, [pc, #236]	; (8002e78 <goto_pos+0x1c8>)
 8002d8a:	6013      	str	r3, [r2, #0]
			return true;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e05e      	b.n	8002e4e <goto_pos+0x19e>

		}
		else
		{
			speed[FRONT_INDEX] = 0;
 8002d90:	4b39      	ldr	r3, [pc, #228]	; (8002e78 <goto_pos+0x1c8>)
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
			return false;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	e058      	b.n	8002e4e <goto_pos+0x19e>
		}
	}
	else if (pid_t == backClimb_pid)
 8002d9c:	4b37      	ldr	r3, [pc, #220]	; (8002e7c <goto_pos+0x1cc>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d152      	bne.n	8002e4c <goto_pos+0x19c>
	{
		cur_enc_pos = (int) encoderBack.encoder_pos;
 8002da6:	4b36      	ldr	r3, [pc, #216]	; (8002e80 <goto_pos+0x1d0>)
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	60fb      	str	r3, [r7, #12]
//				&& ((encoderBack.encoder_pos >= 0
//						&& encoderBack.encoder_pos < MAX_BACK_ALLOWABLE_ENC)
//						|| (encoderBack.encoder_pos > MIN_BACK_ALLOWABLE_ENC
//								&& encoderBack.encoder_pos
//										<= 4096 * BACK_GEAR_RATIO)))
		if (pid_need_compute(backClimb_pid) && fabs(enc - cur_enc_pos) > 5)
 8002dac:	4b33      	ldr	r3, [pc, #204]	; (8002e7c <goto_pos+0x1cc>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fe f8c9 	bl	8000f48 <pid_need_compute>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d041      	beq.n	8002e40 <goto_pos+0x190>
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fd fb66 	bl	8000494 <__aeabi_i2d>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4614      	mov	r4, r2
 8002dce:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002dd2:	f04f 0200 	mov.w	r2, #0
 8002dd6:	4b24      	ldr	r3, [pc, #144]	; (8002e68 <goto_pos+0x1b8>)
 8002dd8:	4620      	mov	r0, r4
 8002dda:	4629      	mov	r1, r5
 8002ddc:	f7fd fe54 	bl	8000a88 <__aeabi_dcmpgt>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d02c      	beq.n	8002e40 <goto_pos+0x190>
		{
			// Read process feedback
			if (cur_enc_pos > MAX_BACK_ALLOWABLE_ENC)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d903      	bls.n	8002df8 <goto_pos+0x148>
				cur_enc_pos -= 4096 * BACK_GEAR_RATIO;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8002df6:	60fb      	str	r3, [r7, #12]
			if (enc >= MAX_BACK_ALLOWABLE_ENC)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d303      	bcc.n	8002e0a <goto_pos+0x15a>
				enc -= 4096 * BACK_GEAR_RATIO;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8002e08:	607b      	str	r3, [r7, #4]
			backClimb_setpoint = enc;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	ee07 3a90 	vmov	s15, r3
 8002e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e14:	4b1b      	ldr	r3, [pc, #108]	; (8002e84 <goto_pos+0x1d4>)
 8002e16:	edc3 7a00 	vstr	s15, [r3]
			backClimb_input = cur_enc_pos;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	ee07 3a90 	vmov	s15, r3
 8002e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e24:	4b18      	ldr	r3, [pc, #96]	; (8002e88 <goto_pos+0x1d8>)
 8002e26:	edc3 7a00 	vstr	s15, [r3]
			// Compute new PID output value
			pid_compute(backClimb_pid);
 8002e2a:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <goto_pos+0x1cc>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe f89f 	bl	8000f72 <pid_compute>
			//Change actuator value
			speed[BACK_INDEX] = backClimb_output;
 8002e34:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <goto_pos+0x1dc>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a0f      	ldr	r2, [pc, #60]	; (8002e78 <goto_pos+0x1c8>)
 8002e3a:	6053      	str	r3, [r2, #4]
			return true;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e006      	b.n	8002e4e <goto_pos+0x19e>
		}
		else
		{
			speed[BACK_INDEX] = 0;
 8002e40:	4b0d      	ldr	r3, [pc, #52]	; (8002e78 <goto_pos+0x1c8>)
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	605a      	str	r2, [r3, #4]
			return false;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	e000      	b.n	8002e4e <goto_pos+0x19e>
		}
	}
	return false;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e58:	9999999a 	.word	0x9999999a
 8002e5c:	40c19999 	.word	0x40c19999
 8002e60:	20000434 	.word	0x20000434
 8002e64:	2000027c 	.word	0x2000027c
 8002e68:	40140000 	.word	0x40140000
 8002e6c:	2000016c 	.word	0x2000016c
 8002e70:	20000164 	.word	0x20000164
 8002e74:	20000168 	.word	0x20000168
 8002e78:	2000015c 	.word	0x2000015c
 8002e7c:	20000480 	.word	0x20000480
 8002e80:	200002d4 	.word	0x200002d4
 8002e84:	20000178 	.word	0x20000178
 8002e88:	20000170 	.word	0x20000170
 8002e8c:	20000174 	.word	0x20000174

08002e90 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	HAL_TIM_PWM_Stop(&MOTOR_TIM, TIM_CHANNEL_1);
 8002e94:	2100      	movs	r1, #0
 8002e96:	4808      	ldr	r0, [pc, #32]	; (8002eb8 <Error_Handler+0x28>)
 8002e98:	f003 fe4c 	bl	8006b34 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&MOTOR_TIM, TIM_CHANNEL_2);
 8002e9c:	2104      	movs	r1, #4
 8002e9e:	4806      	ldr	r0, [pc, #24]	; (8002eb8 <Error_Handler+0x28>)
 8002ea0:	f003 fe48 	bl	8006b34 <HAL_TIM_PWM_Stop>
	brakeMotor(&backMotor, 1);
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	4805      	ldr	r0, [pc, #20]	; (8002ebc <Error_Handler+0x2c>)
 8002ea8:	f7fe fc0a 	bl	80016c0 <brakeMotor>
	brakeMotor(&backMotor, 1);
 8002eac:	2101      	movs	r1, #1
 8002eae:	4803      	ldr	r0, [pc, #12]	; (8002ebc <Error_Handler+0x2c>)
 8002eb0:	f7fe fc06 	bl	80016c0 <brakeMotor>
	/* USER CODE END Error_Handler_Debug */
}
 8002eb4:	bf00      	nop
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	200004c4 	.word	0x200004c4
 8002ebc:	20000034 	.word	0x20000034

08002ec0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8002ec4:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <MX_SPI1_Init+0x68>)
 8002ec6:	4a19      	ldr	r2, [pc, #100]	; (8002f2c <MX_SPI1_Init+0x6c>)
 8002ec8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002eca:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <MX_SPI1_Init+0x68>)
 8002ecc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ed0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002ed2:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <MX_SPI1_Init+0x68>)
 8002ed4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ed8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002eda:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <MX_SPI1_Init+0x68>)
 8002edc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ee0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002ee2:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <MX_SPI1_Init+0x68>)
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <MX_SPI1_Init+0x68>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002eee:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <MX_SPI1_Init+0x68>)
 8002ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ef4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <MX_SPI1_Init+0x68>)
 8002ef8:	2228      	movs	r2, #40	; 0x28
 8002efa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002efc:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <MX_SPI1_Init+0x68>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f02:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <MX_SPI1_Init+0x68>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f08:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <MX_SPI1_Init+0x68>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002f0e:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <MX_SPI1_Init+0x68>)
 8002f10:	220a      	movs	r2, #10
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f14:	4804      	ldr	r0, [pc, #16]	; (8002f28 <MX_SPI1_Init+0x68>)
 8002f16:	f003 f92b 	bl	8006170 <HAL_SPI_Init>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8002f20:	f7ff ffb6 	bl	8002e90 <Error_Handler>
  }

}
 8002f24:	bf00      	nop
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	200001d4 	.word	0x200001d4
 8002f2c:	40013000 	.word	0x40013000

08002f30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08a      	sub	sp, #40	; 0x28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f38:	f107 0314 	add.w	r3, r7, #20
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	60da      	str	r2, [r3, #12]
 8002f46:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a19      	ldr	r2, [pc, #100]	; (8002fb4 <HAL_SPI_MspInit+0x84>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d12b      	bne.n	8002faa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	4b18      	ldr	r3, [pc, #96]	; (8002fb8 <HAL_SPI_MspInit+0x88>)
 8002f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5a:	4a17      	ldr	r2, [pc, #92]	; (8002fb8 <HAL_SPI_MspInit+0x88>)
 8002f5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f60:	6453      	str	r3, [r2, #68]	; 0x44
 8002f62:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <HAL_SPI_MspInit+0x88>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <HAL_SPI_MspInit+0x88>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	4a10      	ldr	r2, [pc, #64]	; (8002fb8 <HAL_SPI_MspInit+0x88>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7e:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <HAL_SPI_MspInit+0x88>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = AD_SPI1_CLK_Pin|AD_SPI1_MISO_Pin;
 8002f8a:	2360      	movs	r3, #96	; 0x60
 8002f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f96:	2303      	movs	r3, #3
 8002f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f9a:	2305      	movs	r3, #5
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9e:	f107 0314 	add.w	r3, r7, #20
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4805      	ldr	r0, [pc, #20]	; (8002fbc <HAL_SPI_MspInit+0x8c>)
 8002fa6:	f002 f873 	bl	8005090 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002faa:	bf00      	nop
 8002fac:	3728      	adds	r7, #40	; 0x28
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40013000 	.word	0x40013000
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	40020000 	.word	0x40020000

08002fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	607b      	str	r3, [r7, #4]
 8002fca:	4b10      	ldr	r3, [pc, #64]	; (800300c <HAL_MspInit+0x4c>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	4a0f      	ldr	r2, [pc, #60]	; (800300c <HAL_MspInit+0x4c>)
 8002fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd6:	4b0d      	ldr	r3, [pc, #52]	; (800300c <HAL_MspInit+0x4c>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fde:	607b      	str	r3, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	603b      	str	r3, [r7, #0]
 8002fe6:	4b09      	ldr	r3, [pc, #36]	; (800300c <HAL_MspInit+0x4c>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a08      	ldr	r2, [pc, #32]	; (800300c <HAL_MspInit+0x4c>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff2:	4b06      	ldr	r3, [pc, #24]	; (800300c <HAL_MspInit+0x4c>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800

08003010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800301e:	b480      	push	{r7}
 8003020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003022:	e7fe      	b.n	8003022 <HardFault_Handler+0x4>

08003024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003028:	e7fe      	b.n	8003028 <MemManage_Handler+0x4>

0800302a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800302a:	b480      	push	{r7}
 800302c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800302e:	e7fe      	b.n	800302e <BusFault_Handler+0x4>

08003030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003034:	e7fe      	b.n	8003034 <UsageFault_Handler+0x4>

08003036 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003036:	b480      	push	{r7}
 8003038:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800303a:	bf00      	nop
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003052:	b480      	push	{r7}
 8003054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003064:	f000 fcd0 	bl	8003a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003068:	bf00      	nop
 800306a:	bd80      	pop	{r7, pc}

0800306c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003070:	4802      	ldr	r0, [pc, #8]	; (800307c <DMA1_Stream1_IRQHandler+0x10>)
 8003072:	f001 fda3 	bl	8004bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000584 	.word	0x20000584

08003080 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003084:	4802      	ldr	r0, [pc, #8]	; (8003090 <CAN1_RX0_IRQHandler+0x10>)
 8003086:	f001 f936 	bl	80042f6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800308a:	bf00      	nop
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	2000022c 	.word	0x2000022c

08003094 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003098:	2080      	movs	r0, #128	; 0x80
 800309a:	f002 f9d7 	bl	800544c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030a8:	4b08      	ldr	r3, [pc, #32]	; (80030cc <SystemInit+0x28>)
 80030aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ae:	4a07      	ldr	r2, [pc, #28]	; (80030cc <SystemInit+0x28>)
 80030b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030b8:	4b04      	ldr	r3, [pc, #16]	; (80030cc <SystemInit+0x28>)
 80030ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030be:	609a      	str	r2, [r3, #8]
#endif
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	e000ed00 	.word	0xe000ed00

080030d0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b096      	sub	sp, #88	; 0x58
 80030d4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	605a      	str	r2, [r3, #4]
 80030e0:	609a      	str	r2, [r3, #8]
 80030e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	605a      	str	r2, [r3, #4]
 80030f8:	609a      	str	r2, [r3, #8]
 80030fa:	60da      	str	r2, [r3, #12]
 80030fc:	611a      	str	r2, [r3, #16]
 80030fe:	615a      	str	r2, [r3, #20]
 8003100:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003102:	1d3b      	adds	r3, r7, #4
 8003104:	2220      	movs	r2, #32
 8003106:	2100      	movs	r1, #0
 8003108:	4618      	mov	r0, r3
 800310a:	f005 f917 	bl	800833c <memset>

  htim1.Instance = TIM1;
 800310e:	4b3e      	ldr	r3, [pc, #248]	; (8003208 <MX_TIM1_Init+0x138>)
 8003110:	4a3e      	ldr	r2, [pc, #248]	; (800320c <MX_TIM1_Init+0x13c>)
 8003112:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8003114:	4b3c      	ldr	r3, [pc, #240]	; (8003208 <MX_TIM1_Init+0x138>)
 8003116:	22b3      	movs	r2, #179	; 0xb3
 8003118:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800311a:	4b3b      	ldr	r3, [pc, #236]	; (8003208 <MX_TIM1_Init+0x138>)
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8003120:	4b39      	ldr	r3, [pc, #228]	; (8003208 <MX_TIM1_Init+0x138>)
 8003122:	2263      	movs	r2, #99	; 0x63
 8003124:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003126:	4b38      	ldr	r3, [pc, #224]	; (8003208 <MX_TIM1_Init+0x138>)
 8003128:	2200      	movs	r2, #0
 800312a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800312c:	4b36      	ldr	r3, [pc, #216]	; (8003208 <MX_TIM1_Init+0x138>)
 800312e:	2200      	movs	r2, #0
 8003130:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003132:	4b35      	ldr	r3, [pc, #212]	; (8003208 <MX_TIM1_Init+0x138>)
 8003134:	2200      	movs	r2, #0
 8003136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003138:	4833      	ldr	r0, [pc, #204]	; (8003208 <MX_TIM1_Init+0x138>)
 800313a:	f003 fc39 	bl	80069b0 <HAL_TIM_Base_Init>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003144:	f7ff fea4 	bl	8002e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800314c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800314e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003152:	4619      	mov	r1, r3
 8003154:	482c      	ldr	r0, [pc, #176]	; (8003208 <MX_TIM1_Init+0x138>)
 8003156:	f003 fe0b 	bl	8006d70 <HAL_TIM_ConfigClockSource>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8003160:	f7ff fe96 	bl	8002e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003164:	4828      	ldr	r0, [pc, #160]	; (8003208 <MX_TIM1_Init+0x138>)
 8003166:	f003 fc72 	bl	8006a4e <HAL_TIM_PWM_Init>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003170:	f7ff fe8e 	bl	8002e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003174:	2300      	movs	r3, #0
 8003176:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003178:	2300      	movs	r3, #0
 800317a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800317c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003180:	4619      	mov	r1, r3
 8003182:	4821      	ldr	r0, [pc, #132]	; (8003208 <MX_TIM1_Init+0x138>)
 8003184:	f004 f9c8 	bl	8007518 <HAL_TIMEx_MasterConfigSynchronization>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800318e:	f7ff fe7f 	bl	8002e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003192:	2360      	movs	r3, #96	; 0x60
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800319a:	2300      	movs	r3, #0
 800319c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800319e:	2300      	movs	r3, #0
 80031a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031a2:	2300      	movs	r3, #0
 80031a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80031a6:	2300      	movs	r3, #0
 80031a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80031aa:	2300      	movs	r3, #0
 80031ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80031ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031b2:	2204      	movs	r2, #4
 80031b4:	4619      	mov	r1, r3
 80031b6:	4814      	ldr	r0, [pc, #80]	; (8003208 <MX_TIM1_Init+0x138>)
 80031b8:	f003 fd14 	bl	8006be4 <HAL_TIM_PWM_ConfigChannel>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80031c2:	f7ff fe65 	bl	8002e90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80031c6:	2300      	movs	r3, #0
 80031c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80031da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80031e0:	2300      	movs	r3, #0
 80031e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80031e4:	1d3b      	adds	r3, r7, #4
 80031e6:	4619      	mov	r1, r3
 80031e8:	4807      	ldr	r0, [pc, #28]	; (8003208 <MX_TIM1_Init+0x138>)
 80031ea:	f004 fa11 	bl	8007610 <HAL_TIMEx_ConfigBreakDeadTime>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80031f4:	f7ff fe4c 	bl	8002e90 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80031f8:	4803      	ldr	r0, [pc, #12]	; (8003208 <MX_TIM1_Init+0x138>)
 80031fa:	f000 f9ff 	bl	80035fc <HAL_TIM_MspPostInit>

}
 80031fe:	bf00      	nop
 8003200:	3758      	adds	r7, #88	; 0x58
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20000504 	.word	0x20000504
 800320c:	40010000 	.word	0x40010000

08003210 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08e      	sub	sp, #56	; 0x38
 8003214:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800321a:	2200      	movs	r2, #0
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	605a      	str	r2, [r3, #4]
 8003220:	609a      	str	r2, [r3, #8]
 8003222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003224:	f107 0320 	add.w	r3, r7, #32
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800322e:	1d3b      	adds	r3, r7, #4
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	611a      	str	r2, [r3, #16]
 800323c:	615a      	str	r2, [r3, #20]
 800323e:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8003240:	4b2c      	ldr	r3, [pc, #176]	; (80032f4 <MX_TIM2_Init+0xe4>)
 8003242:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003246:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8003248:	4b2a      	ldr	r3, [pc, #168]	; (80032f4 <MX_TIM2_Init+0xe4>)
 800324a:	2259      	movs	r2, #89	; 0x59
 800324c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800324e:	4b29      	ldr	r3, [pc, #164]	; (80032f4 <MX_TIM2_Init+0xe4>)
 8003250:	2200      	movs	r2, #0
 8003252:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8003254:	4b27      	ldr	r3, [pc, #156]	; (80032f4 <MX_TIM2_Init+0xe4>)
 8003256:	2263      	movs	r2, #99	; 0x63
 8003258:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800325a:	4b26      	ldr	r3, [pc, #152]	; (80032f4 <MX_TIM2_Init+0xe4>)
 800325c:	2200      	movs	r2, #0
 800325e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003260:	4b24      	ldr	r3, [pc, #144]	; (80032f4 <MX_TIM2_Init+0xe4>)
 8003262:	2200      	movs	r2, #0
 8003264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003266:	4823      	ldr	r0, [pc, #140]	; (80032f4 <MX_TIM2_Init+0xe4>)
 8003268:	f003 fba2 	bl	80069b0 <HAL_TIM_Base_Init>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8003272:	f7ff fe0d 	bl	8002e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800327a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800327c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003280:	4619      	mov	r1, r3
 8003282:	481c      	ldr	r0, [pc, #112]	; (80032f4 <MX_TIM2_Init+0xe4>)
 8003284:	f003 fd74 	bl	8006d70 <HAL_TIM_ConfigClockSource>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800328e:	f7ff fdff 	bl	8002e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003292:	4818      	ldr	r0, [pc, #96]	; (80032f4 <MX_TIM2_Init+0xe4>)
 8003294:	f003 fbdb 	bl	8006a4e <HAL_TIM_PWM_Init>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800329e:	f7ff fdf7 	bl	8002e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032a2:	2300      	movs	r3, #0
 80032a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032a6:	2300      	movs	r3, #0
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032aa:	f107 0320 	add.w	r3, r7, #32
 80032ae:	4619      	mov	r1, r3
 80032b0:	4810      	ldr	r0, [pc, #64]	; (80032f4 <MX_TIM2_Init+0xe4>)
 80032b2:	f004 f931 	bl	8007518 <HAL_TIMEx_MasterConfigSynchronization>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80032bc:	f7ff fde8 	bl	8002e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032c0:	2360      	movs	r3, #96	; 0x60
 80032c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80032d0:	1d3b      	adds	r3, r7, #4
 80032d2:	2208      	movs	r2, #8
 80032d4:	4619      	mov	r1, r3
 80032d6:	4807      	ldr	r0, [pc, #28]	; (80032f4 <MX_TIM2_Init+0xe4>)
 80032d8:	f003 fc84 	bl	8006be4 <HAL_TIM_PWM_ConfigChannel>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80032e2:	f7ff fdd5 	bl	8002e90 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80032e6:	4803      	ldr	r0, [pc, #12]	; (80032f4 <MX_TIM2_Init+0xe4>)
 80032e8:	f000 f988 	bl	80035fc <HAL_TIM_MspPostInit>

}
 80032ec:	bf00      	nop
 80032ee:	3738      	adds	r7, #56	; 0x38
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20000544 	.word	0x20000544

080032f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b08e      	sub	sp, #56	; 0x38
 80032fc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	609a      	str	r2, [r3, #8]
 800330a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800330c:	f107 0320 	add.w	r3, r7, #32
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003316:	1d3b      	adds	r3, r7, #4
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	611a      	str	r2, [r3, #16]
 8003324:	615a      	str	r2, [r3, #20]
 8003326:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8003328:	4b32      	ldr	r3, [pc, #200]	; (80033f4 <MX_TIM3_Init+0xfc>)
 800332a:	4a33      	ldr	r2, [pc, #204]	; (80033f8 <MX_TIM3_Init+0x100>)
 800332c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 800332e:	4b31      	ldr	r3, [pc, #196]	; (80033f4 <MX_TIM3_Init+0xfc>)
 8003330:	2259      	movs	r2, #89	; 0x59
 8003332:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003334:	4b2f      	ldr	r3, [pc, #188]	; (80033f4 <MX_TIM3_Init+0xfc>)
 8003336:	2200      	movs	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800333a:	4b2e      	ldr	r3, [pc, #184]	; (80033f4 <MX_TIM3_Init+0xfc>)
 800333c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003340:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003342:	4b2c      	ldr	r3, [pc, #176]	; (80033f4 <MX_TIM3_Init+0xfc>)
 8003344:	2200      	movs	r2, #0
 8003346:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003348:	4b2a      	ldr	r3, [pc, #168]	; (80033f4 <MX_TIM3_Init+0xfc>)
 800334a:	2200      	movs	r2, #0
 800334c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800334e:	4829      	ldr	r0, [pc, #164]	; (80033f4 <MX_TIM3_Init+0xfc>)
 8003350:	f003 fb2e 	bl	80069b0 <HAL_TIM_Base_Init>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800335a:	f7ff fd99 	bl	8002e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800335e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003362:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003364:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003368:	4619      	mov	r1, r3
 800336a:	4822      	ldr	r0, [pc, #136]	; (80033f4 <MX_TIM3_Init+0xfc>)
 800336c:	f003 fd00 	bl	8006d70 <HAL_TIM_ConfigClockSource>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003376:	f7ff fd8b 	bl	8002e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800337a:	481e      	ldr	r0, [pc, #120]	; (80033f4 <MX_TIM3_Init+0xfc>)
 800337c:	f003 fb67 	bl	8006a4e <HAL_TIM_PWM_Init>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003386:	f7ff fd83 	bl	8002e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800338a:	2300      	movs	r3, #0
 800338c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800338e:	2300      	movs	r3, #0
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003392:	f107 0320 	add.w	r3, r7, #32
 8003396:	4619      	mov	r1, r3
 8003398:	4816      	ldr	r0, [pc, #88]	; (80033f4 <MX_TIM3_Init+0xfc>)
 800339a:	f004 f8bd 	bl	8007518 <HAL_TIMEx_MasterConfigSynchronization>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80033a4:	f7ff fd74 	bl	8002e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033a8:	2360      	movs	r3, #96	; 0x60
 80033aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 80033ac:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80033b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033ba:	1d3b      	adds	r3, r7, #4
 80033bc:	2200      	movs	r2, #0
 80033be:	4619      	mov	r1, r3
 80033c0:	480c      	ldr	r0, [pc, #48]	; (80033f4 <MX_TIM3_Init+0xfc>)
 80033c2:	f003 fc0f 	bl	8006be4 <HAL_TIM_PWM_ConfigChannel>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80033cc:	f7ff fd60 	bl	8002e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033d0:	1d3b      	adds	r3, r7, #4
 80033d2:	2204      	movs	r2, #4
 80033d4:	4619      	mov	r1, r3
 80033d6:	4807      	ldr	r0, [pc, #28]	; (80033f4 <MX_TIM3_Init+0xfc>)
 80033d8:	f003 fc04 	bl	8006be4 <HAL_TIM_PWM_ConfigChannel>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80033e2:	f7ff fd55 	bl	8002e90 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80033e6:	4803      	ldr	r0, [pc, #12]	; (80033f4 <MX_TIM3_Init+0xfc>)
 80033e8:	f000 f908 	bl	80035fc <HAL_TIM_MspPostInit>

}
 80033ec:	bf00      	nop
 80033ee:	3738      	adds	r7, #56	; 0x38
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	200004c4 	.word	0x200004c4
 80033f8:	40000400 	.word	0x40000400

080033fc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b096      	sub	sp, #88	; 0x58
 8003400:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003402:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	605a      	str	r2, [r3, #4]
 800340c:	609a      	str	r2, [r3, #8]
 800340e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003410:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800341a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	605a      	str	r2, [r3, #4]
 8003424:	609a      	str	r2, [r3, #8]
 8003426:	60da      	str	r2, [r3, #12]
 8003428:	611a      	str	r2, [r3, #16]
 800342a:	615a      	str	r2, [r3, #20]
 800342c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800342e:	1d3b      	adds	r3, r7, #4
 8003430:	2220      	movs	r2, #32
 8003432:	2100      	movs	r1, #0
 8003434:	4618      	mov	r0, r3
 8003436:	f004 ff81 	bl	800833c <memset>

  htim8.Instance = TIM8;
 800343a:	4b3d      	ldr	r3, [pc, #244]	; (8003530 <MX_TIM8_Init+0x134>)
 800343c:	4a3d      	ldr	r2, [pc, #244]	; (8003534 <MX_TIM8_Init+0x138>)
 800343e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 8003440:	4b3b      	ldr	r3, [pc, #236]	; (8003530 <MX_TIM8_Init+0x134>)
 8003442:	22b3      	movs	r2, #179	; 0xb3
 8003444:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003446:	4b3a      	ldr	r3, [pc, #232]	; (8003530 <MX_TIM8_Init+0x134>)
 8003448:	2200      	movs	r2, #0
 800344a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100-1;
 800344c:	4b38      	ldr	r3, [pc, #224]	; (8003530 <MX_TIM8_Init+0x134>)
 800344e:	2263      	movs	r2, #99	; 0x63
 8003450:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003452:	4b37      	ldr	r3, [pc, #220]	; (8003530 <MX_TIM8_Init+0x134>)
 8003454:	2200      	movs	r2, #0
 8003456:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003458:	4b35      	ldr	r3, [pc, #212]	; (8003530 <MX_TIM8_Init+0x134>)
 800345a:	2200      	movs	r2, #0
 800345c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800345e:	4b34      	ldr	r3, [pc, #208]	; (8003530 <MX_TIM8_Init+0x134>)
 8003460:	2200      	movs	r2, #0
 8003462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003464:	4832      	ldr	r0, [pc, #200]	; (8003530 <MX_TIM8_Init+0x134>)
 8003466:	f003 faa3 	bl	80069b0 <HAL_TIM_Base_Init>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8003470:	f7ff fd0e 	bl	8002e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003478:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800347a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800347e:	4619      	mov	r1, r3
 8003480:	482b      	ldr	r0, [pc, #172]	; (8003530 <MX_TIM8_Init+0x134>)
 8003482:	f003 fc75 	bl	8006d70 <HAL_TIM_ConfigClockSource>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800348c:	f7ff fd00 	bl	8002e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003490:	4827      	ldr	r0, [pc, #156]	; (8003530 <MX_TIM8_Init+0x134>)
 8003492:	f003 fadc 	bl	8006a4e <HAL_TIM_PWM_Init>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800349c:	f7ff fcf8 	bl	8002e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034a0:	2300      	movs	r3, #0
 80034a2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034a4:	2300      	movs	r3, #0
 80034a6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80034a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80034ac:	4619      	mov	r1, r3
 80034ae:	4820      	ldr	r0, [pc, #128]	; (8003530 <MX_TIM8_Init+0x134>)
 80034b0:	f004 f832 	bl	8007518 <HAL_TIMEx_MasterConfigSynchronization>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80034ba:	f7ff fce9 	bl	8002e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034be:	2360      	movs	r3, #96	; 0x60
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034c6:	2300      	movs	r3, #0
 80034c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034ca:	2300      	movs	r3, #0
 80034cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80034ce:	2300      	movs	r3, #0
 80034d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80034d2:	2300      	movs	r3, #0
 80034d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80034d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034da:	220c      	movs	r2, #12
 80034dc:	4619      	mov	r1, r3
 80034de:	4814      	ldr	r0, [pc, #80]	; (8003530 <MX_TIM8_Init+0x134>)
 80034e0:	f003 fb80 	bl	8006be4 <HAL_TIM_PWM_ConfigChannel>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 80034ea:	f7ff fcd1 	bl	8002e90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80034ee:	2300      	movs	r3, #0
 80034f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80034f2:	2300      	movs	r3, #0
 80034f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003506:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003508:	2300      	movs	r3, #0
 800350a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800350c:	1d3b      	adds	r3, r7, #4
 800350e:	4619      	mov	r1, r3
 8003510:	4807      	ldr	r0, [pc, #28]	; (8003530 <MX_TIM8_Init+0x134>)
 8003512:	f004 f87d 	bl	8007610 <HAL_TIMEx_ConfigBreakDeadTime>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <MX_TIM8_Init+0x124>
  {
    Error_Handler();
 800351c:	f7ff fcb8 	bl	8002e90 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8003520:	4803      	ldr	r0, [pc, #12]	; (8003530 <MX_TIM8_Init+0x134>)
 8003522:	f000 f86b 	bl	80035fc <HAL_TIM_MspPostInit>

}
 8003526:	bf00      	nop
 8003528:	3758      	adds	r7, #88	; 0x58
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000484 	.word	0x20000484
 8003534:	40010400 	.word	0x40010400

08003538 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a29      	ldr	r2, [pc, #164]	; (80035ec <HAL_TIM_Base_MspInit+0xb4>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d10e      	bne.n	8003568 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800354a:	2300      	movs	r3, #0
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	4b28      	ldr	r3, [pc, #160]	; (80035f0 <HAL_TIM_Base_MspInit+0xb8>)
 8003550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003552:	4a27      	ldr	r2, [pc, #156]	; (80035f0 <HAL_TIM_Base_MspInit+0xb8>)
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	6453      	str	r3, [r2, #68]	; 0x44
 800355a:	4b25      	ldr	r3, [pc, #148]	; (80035f0 <HAL_TIM_Base_MspInit+0xb8>)
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003566:	e03a      	b.n	80035de <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM2)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003570:	d10e      	bne.n	8003590 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	4b1e      	ldr	r3, [pc, #120]	; (80035f0 <HAL_TIM_Base_MspInit+0xb8>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	4a1d      	ldr	r2, [pc, #116]	; (80035f0 <HAL_TIM_Base_MspInit+0xb8>)
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	6413      	str	r3, [r2, #64]	; 0x40
 8003582:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <HAL_TIM_Base_MspInit+0xb8>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	693b      	ldr	r3, [r7, #16]
}
 800358e:	e026      	b.n	80035de <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM3)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a17      	ldr	r2, [pc, #92]	; (80035f4 <HAL_TIM_Base_MspInit+0xbc>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d10e      	bne.n	80035b8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	4b14      	ldr	r3, [pc, #80]	; (80035f0 <HAL_TIM_Base_MspInit+0xb8>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	4a13      	ldr	r2, [pc, #76]	; (80035f0 <HAL_TIM_Base_MspInit+0xb8>)
 80035a4:	f043 0302 	orr.w	r3, r3, #2
 80035a8:	6413      	str	r3, [r2, #64]	; 0x40
 80035aa:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <HAL_TIM_Base_MspInit+0xb8>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	68fb      	ldr	r3, [r7, #12]
}
 80035b6:	e012      	b.n	80035de <HAL_TIM_Base_MspInit+0xa6>
  else if(tim_baseHandle->Instance==TIM8)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a0e      	ldr	r2, [pc, #56]	; (80035f8 <HAL_TIM_Base_MspInit+0xc0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d10d      	bne.n	80035de <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	60bb      	str	r3, [r7, #8]
 80035c6:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <HAL_TIM_Base_MspInit+0xb8>)
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	4a09      	ldr	r2, [pc, #36]	; (80035f0 <HAL_TIM_Base_MspInit+0xb8>)
 80035cc:	f043 0302 	orr.w	r3, r3, #2
 80035d0:	6453      	str	r3, [r2, #68]	; 0x44
 80035d2:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <HAL_TIM_Base_MspInit+0xb8>)
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	60bb      	str	r3, [r7, #8]
 80035dc:	68bb      	ldr	r3, [r7, #8]
}
 80035de:	bf00      	nop
 80035e0:	371c      	adds	r7, #28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40010000 	.word	0x40010000
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40000400 	.word	0x40000400
 80035f8:	40010400 	.word	0x40010400

080035fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08c      	sub	sp, #48	; 0x30
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003604:	f107 031c 	add.w	r3, r7, #28
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a49      	ldr	r2, [pc, #292]	; (8003740 <HAL_TIM_MspPostInit+0x144>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d11f      	bne.n	800365e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	4b48      	ldr	r3, [pc, #288]	; (8003744 <HAL_TIM_MspPostInit+0x148>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	4a47      	ldr	r2, [pc, #284]	; (8003744 <HAL_TIM_MspPostInit+0x148>)
 8003628:	f043 0310 	orr.w	r3, r3, #16
 800362c:	6313      	str	r3, [r2, #48]	; 0x30
 800362e:	4b45      	ldr	r3, [pc, #276]	; (8003744 <HAL_TIM_MspPostInit+0x148>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	f003 0310 	and.w	r3, r3, #16
 8003636:	61bb      	str	r3, [r7, #24]
 8003638:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Climb_TIM1_CH2_Pin;
 800363a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800363e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003640:	2302      	movs	r3, #2
 8003642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003644:	2300      	movs	r3, #0
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003648:	2300      	movs	r3, #0
 800364a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800364c:	2301      	movs	r3, #1
 800364e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Climb_TIM1_CH2_GPIO_Port, &GPIO_InitStruct);
 8003650:	f107 031c 	add.w	r3, r7, #28
 8003654:	4619      	mov	r1, r3
 8003656:	483c      	ldr	r0, [pc, #240]	; (8003748 <HAL_TIM_MspPostInit+0x14c>)
 8003658:	f001 fd1a 	bl	8005090 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800365c:	e06c      	b.n	8003738 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM2)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003666:	d11f      	bne.n	80036a8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	4b35      	ldr	r3, [pc, #212]	; (8003744 <HAL_TIM_MspPostInit+0x148>)
 800366e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003670:	4a34      	ldr	r2, [pc, #208]	; (8003744 <HAL_TIM_MspPostInit+0x148>)
 8003672:	f043 0302 	orr.w	r3, r3, #2
 8003676:	6313      	str	r3, [r2, #48]	; 0x30
 8003678:	4b32      	ldr	r3, [pc, #200]	; (8003744 <HAL_TIM_MspPostInit+0x148>)
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	617b      	str	r3, [r7, #20]
 8003682:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ClimbSpeed_TIM2_CH3_Pin;
 8003684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368a:	2302      	movs	r3, #2
 800368c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368e:	2300      	movs	r3, #0
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003692:	2300      	movs	r3, #0
 8003694:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003696:	2301      	movs	r3, #1
 8003698:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ClimbSpeed_TIM2_CH3_GPIO_Port, &GPIO_InitStruct);
 800369a:	f107 031c 	add.w	r3, r7, #28
 800369e:	4619      	mov	r1, r3
 80036a0:	482a      	ldr	r0, [pc, #168]	; (800374c <HAL_TIM_MspPostInit+0x150>)
 80036a2:	f001 fcf5 	bl	8005090 <HAL_GPIO_Init>
}
 80036a6:	e047      	b.n	8003738 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM3)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a28      	ldr	r2, [pc, #160]	; (8003750 <HAL_TIM_MspPostInit+0x154>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d11e      	bne.n	80036f0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	4b23      	ldr	r3, [pc, #140]	; (8003744 <HAL_TIM_MspPostInit+0x148>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	4a22      	ldr	r2, [pc, #136]	; (8003744 <HAL_TIM_MspPostInit+0x148>)
 80036bc:	f043 0304 	orr.w	r3, r3, #4
 80036c0:	6313      	str	r3, [r2, #48]	; 0x30
 80036c2:	4b20      	ldr	r3, [pc, #128]	; (8003744 <HAL_TIM_MspPostInit+0x148>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Wheel_TIM3_CH1_Pin|Wheel_TIM3_CH2_Pin;
 80036ce:	23c0      	movs	r3, #192	; 0xc0
 80036d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d2:	2302      	movs	r3, #2
 80036d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036da:	2300      	movs	r3, #0
 80036dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036de:	2302      	movs	r3, #2
 80036e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036e2:	f107 031c 	add.w	r3, r7, #28
 80036e6:	4619      	mov	r1, r3
 80036e8:	481a      	ldr	r0, [pc, #104]	; (8003754 <HAL_TIM_MspPostInit+0x158>)
 80036ea:	f001 fcd1 	bl	8005090 <HAL_GPIO_Init>
}
 80036ee:	e023      	b.n	8003738 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM8)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a18      	ldr	r2, [pc, #96]	; (8003758 <HAL_TIM_MspPostInit+0x15c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d11e      	bne.n	8003738 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036fa:	2300      	movs	r3, #0
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	4b11      	ldr	r3, [pc, #68]	; (8003744 <HAL_TIM_MspPostInit+0x148>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	4a10      	ldr	r2, [pc, #64]	; (8003744 <HAL_TIM_MspPostInit+0x148>)
 8003704:	f043 0304 	orr.w	r3, r3, #4
 8003708:	6313      	str	r3, [r2, #48]	; 0x30
 800370a:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <HAL_TIM_MspPostInit+0x148>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Climb_TIM8_CH4_Pin;
 8003716:	f44f 7300 	mov.w	r3, #512	; 0x200
 800371a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371c:	2302      	movs	r3, #2
 800371e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003720:	2300      	movs	r3, #0
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003724:	2300      	movs	r3, #0
 8003726:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003728:	2303      	movs	r3, #3
 800372a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Climb_TIM8_CH4_GPIO_Port, &GPIO_InitStruct);
 800372c:	f107 031c 	add.w	r3, r7, #28
 8003730:	4619      	mov	r1, r3
 8003732:	4808      	ldr	r0, [pc, #32]	; (8003754 <HAL_TIM_MspPostInit+0x158>)
 8003734:	f001 fcac 	bl	8005090 <HAL_GPIO_Init>
}
 8003738:	bf00      	nop
 800373a:	3730      	adds	r7, #48	; 0x30
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40010000 	.word	0x40010000
 8003744:	40023800 	.word	0x40023800
 8003748:	40021000 	.word	0x40021000
 800374c:	40020400 	.word	0x40020400
 8003750:	40000400 	.word	0x40000400
 8003754:	40020800 	.word	0x40020800
 8003758:	40010400 	.word	0x40010400

0800375c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8003760:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <MX_USART3_UART_Init+0x4c>)
 8003762:	4a12      	ldr	r2, [pc, #72]	; (80037ac <MX_USART3_UART_Init+0x50>)
 8003764:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003766:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <MX_USART3_UART_Init+0x4c>)
 8003768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800376c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800376e:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <MX_USART3_UART_Init+0x4c>)
 8003770:	2200      	movs	r2, #0
 8003772:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <MX_USART3_UART_Init+0x4c>)
 8003776:	2200      	movs	r2, #0
 8003778:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800377a:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <MX_USART3_UART_Init+0x4c>)
 800377c:	2200      	movs	r2, #0
 800377e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003780:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <MX_USART3_UART_Init+0x4c>)
 8003782:	220c      	movs	r2, #12
 8003784:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003786:	4b08      	ldr	r3, [pc, #32]	; (80037a8 <MX_USART3_UART_Init+0x4c>)
 8003788:	2200      	movs	r2, #0
 800378a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800378c:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <MX_USART3_UART_Init+0x4c>)
 800378e:	2200      	movs	r2, #0
 8003790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003792:	4805      	ldr	r0, [pc, #20]	; (80037a8 <MX_USART3_UART_Init+0x4c>)
 8003794:	f003 ff8e 	bl	80076b4 <HAL_UART_Init>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800379e:	f7ff fb77 	bl	8002e90 <Error_Handler>
  }

}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	200005e4 	.word	0x200005e4
 80037ac:	40004800 	.word	0x40004800

080037b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08a      	sub	sp, #40	; 0x28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b8:	f107 0314 	add.w	r3, r7, #20
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	609a      	str	r2, [r3, #8]
 80037c4:	60da      	str	r2, [r3, #12]
 80037c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a30      	ldr	r2, [pc, #192]	; (8003890 <HAL_UART_MspInit+0xe0>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d15a      	bne.n	8003888 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	4b2f      	ldr	r3, [pc, #188]	; (8003894 <HAL_UART_MspInit+0xe4>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	4a2e      	ldr	r2, [pc, #184]	; (8003894 <HAL_UART_MspInit+0xe4>)
 80037dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037e0:	6413      	str	r3, [r2, #64]	; 0x40
 80037e2:	4b2c      	ldr	r3, [pc, #176]	; (8003894 <HAL_UART_MspInit+0xe4>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	4b28      	ldr	r3, [pc, #160]	; (8003894 <HAL_UART_MspInit+0xe4>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	4a27      	ldr	r2, [pc, #156]	; (8003894 <HAL_UART_MspInit+0xe4>)
 80037f8:	f043 0308 	orr.w	r3, r3, #8
 80037fc:	6313      	str	r3, [r2, #48]	; 0x30
 80037fe:	4b25      	ldr	r3, [pc, #148]	; (8003894 <HAL_UART_MspInit+0xe4>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = HubM_UART3_TX_Pin|HubM_UART3_RX_Pin;
 800380a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800380e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003810:	2302      	movs	r3, #2
 8003812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003814:	2300      	movs	r3, #0
 8003816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003818:	2303      	movs	r3, #3
 800381a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800381c:	2307      	movs	r3, #7
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003820:	f107 0314 	add.w	r3, r7, #20
 8003824:	4619      	mov	r1, r3
 8003826:	481c      	ldr	r0, [pc, #112]	; (8003898 <HAL_UART_MspInit+0xe8>)
 8003828:	f001 fc32 	bl	8005090 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800382c:	4b1b      	ldr	r3, [pc, #108]	; (800389c <HAL_UART_MspInit+0xec>)
 800382e:	4a1c      	ldr	r2, [pc, #112]	; (80038a0 <HAL_UART_MspInit+0xf0>)
 8003830:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003832:	4b1a      	ldr	r3, [pc, #104]	; (800389c <HAL_UART_MspInit+0xec>)
 8003834:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003838:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800383a:	4b18      	ldr	r3, [pc, #96]	; (800389c <HAL_UART_MspInit+0xec>)
 800383c:	2200      	movs	r2, #0
 800383e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003840:	4b16      	ldr	r3, [pc, #88]	; (800389c <HAL_UART_MspInit+0xec>)
 8003842:	2200      	movs	r2, #0
 8003844:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003846:	4b15      	ldr	r3, [pc, #84]	; (800389c <HAL_UART_MspInit+0xec>)
 8003848:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800384c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800384e:	4b13      	ldr	r3, [pc, #76]	; (800389c <HAL_UART_MspInit+0xec>)
 8003850:	2200      	movs	r2, #0
 8003852:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003854:	4b11      	ldr	r3, [pc, #68]	; (800389c <HAL_UART_MspInit+0xec>)
 8003856:	2200      	movs	r2, #0
 8003858:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800385a:	4b10      	ldr	r3, [pc, #64]	; (800389c <HAL_UART_MspInit+0xec>)
 800385c:	2200      	movs	r2, #0
 800385e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003860:	4b0e      	ldr	r3, [pc, #56]	; (800389c <HAL_UART_MspInit+0xec>)
 8003862:	2200      	movs	r2, #0
 8003864:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003866:	4b0d      	ldr	r3, [pc, #52]	; (800389c <HAL_UART_MspInit+0xec>)
 8003868:	2200      	movs	r2, #0
 800386a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800386c:	480b      	ldr	r0, [pc, #44]	; (800389c <HAL_UART_MspInit+0xec>)
 800386e:	f001 f89f 	bl	80049b0 <HAL_DMA_Init>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003878:	f7ff fb0a 	bl	8002e90 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a07      	ldr	r2, [pc, #28]	; (800389c <HAL_UART_MspInit+0xec>)
 8003880:	635a      	str	r2, [r3, #52]	; 0x34
 8003882:	4a06      	ldr	r2, [pc, #24]	; (800389c <HAL_UART_MspInit+0xec>)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003888:	bf00      	nop
 800388a:	3728      	adds	r7, #40	; 0x28
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40004800 	.word	0x40004800
 8003894:	40023800 	.word	0x40023800
 8003898:	40020c00 	.word	0x40020c00
 800389c:	20000584 	.word	0x20000584
 80038a0:	40026028 	.word	0x40026028

080038a4 <joystick_Init>:
static int joyPosBuffer[2][5] = {0};
static int joy_pos_buffer_cnt = 0;
static const float JoyForwardAngle = 1.57;
static const float JoyForwardAngleDeadzone = 0.1;

void joystick_Init(void){
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  memset(joyPosBuffer, 0, sizeof(joyPosBuffer));
 80038a8:	2228      	movs	r2, #40	; 0x28
 80038aa:	2100      	movs	r1, #0
 80038ac:	4802      	ldr	r0, [pc, #8]	; (80038b8 <joystick_Init+0x14>)
 80038ae:	f004 fd45 	bl	800833c <memset>
}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	200001ac 	.word	0x200001ac

080038bc <wheelSpeedControl_Init>:

  joy_pos_buffer_cnt++;
}

void wheelSpeedControl_Init(WheelSpeed* wheel, float max_lin_speed, float max_ang_speed)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80038c8:	edc7 0a01 	vstr	s1, [r7, #4]
  wheel->stable_cnt = 0;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	611a      	str	r2, [r3, #16]
  wheel->cur_r = 0.0f;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	605a      	str	r2, [r3, #4]
  wheel->cur_l = 0.0f;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
  wheel->pre_l= 0.0f;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	609a      	str	r2, [r3, #8]
  wheel->pre_r = 0.0f;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	60da      	str	r2, [r3, #12]
  wheel->max_angular_speed = max_ang_speed;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	619a      	str	r2, [r3, #24]
  wheel->max_linear_speed = max_lin_speed;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	615a      	str	r2, [r3, #20]
  wheel->start_from_stationary = false;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	771a      	strb	r2, [r3, #28]
}
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler: 



  ldr   sp, =_estack       /* set stack pointer */
 8003910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003948 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003914:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003916:	e003      	b.n	8003920 <LoopCopyDataInit>

08003918 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003918:	4b0c      	ldr	r3, [pc, #48]	; (800394c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800391a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800391c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800391e:	3104      	adds	r1, #4

08003920 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003920:	480b      	ldr	r0, [pc, #44]	; (8003950 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003922:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003924:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003926:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003928:	d3f6      	bcc.n	8003918 <CopyDataInit>
  ldr  r2, =_sbss
 800392a:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800392c:	e002      	b.n	8003934 <LoopFillZerobss>

0800392e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800392e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003930:	f842 3b04 	str.w	r3, [r2], #4

08003934 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003934:	4b09      	ldr	r3, [pc, #36]	; (800395c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003936:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003938:	d3f9      	bcc.n	800392e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800393a:	f7ff fbb3 	bl	80030a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800393e:	f004 fcd9 	bl	80082f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003942:	f7fe fb99 	bl	8002078 <main>
  bx  lr    
 8003946:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003948:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800394c:	080095f8 	.word	0x080095f8
  ldr  r0, =_sdata
 8003950:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003954:	20000134 	.word	0x20000134
  ldr  r2, =_sbss
 8003958:	20000138 	.word	0x20000138
  ldr  r3, = _ebss
 800395c:	20000628 	.word	0x20000628

08003960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003960:	e7fe      	b.n	8003960 <ADC_IRQHandler>
	...

08003964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003968:	4b0e      	ldr	r3, [pc, #56]	; (80039a4 <HAL_Init+0x40>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a0d      	ldr	r2, [pc, #52]	; (80039a4 <HAL_Init+0x40>)
 800396e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003972:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003974:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <HAL_Init+0x40>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a0a      	ldr	r2, [pc, #40]	; (80039a4 <HAL_Init+0x40>)
 800397a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800397e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003980:	4b08      	ldr	r3, [pc, #32]	; (80039a4 <HAL_Init+0x40>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a07      	ldr	r2, [pc, #28]	; (80039a4 <HAL_Init+0x40>)
 8003986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800398a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800398c:	2003      	movs	r0, #3
 800398e:	f000 ffb1 	bl	80048f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003992:	2000      	movs	r0, #0
 8003994:	f000 f808 	bl	80039a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003998:	f7ff fb12 	bl	8002fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40023c00 	.word	0x40023c00

080039a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039b0:	4b12      	ldr	r3, [pc, #72]	; (80039fc <HAL_InitTick+0x54>)
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	4b12      	ldr	r3, [pc, #72]	; (8003a00 <HAL_InitTick+0x58>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	4619      	mov	r1, r3
 80039ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039be:	fbb3 f3f1 	udiv	r3, r3, r1
 80039c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 ffc9 	bl	800495e <HAL_SYSTICK_Config>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e00e      	b.n	80039f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b0f      	cmp	r3, #15
 80039da:	d80a      	bhi.n	80039f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039dc:	2200      	movs	r2, #0
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039e4:	f000 ff91 	bl	800490a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039e8:	4a06      	ldr	r2, [pc, #24]	; (8003a04 <HAL_InitTick+0x5c>)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	e000      	b.n	80039f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20000128 	.word	0x20000128
 8003a00:	20000130 	.word	0x20000130
 8003a04:	2000012c 	.word	0x2000012c

08003a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a0c:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <HAL_IncTick+0x20>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	461a      	mov	r2, r3
 8003a12:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <HAL_IncTick+0x24>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4413      	add	r3, r2
 8003a18:	4a04      	ldr	r2, [pc, #16]	; (8003a2c <HAL_IncTick+0x24>)
 8003a1a:	6013      	str	r3, [r2, #0]
}
 8003a1c:	bf00      	nop
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	20000130 	.word	0x20000130
 8003a2c:	20000624 	.word	0x20000624

08003a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  return uwTick;
 8003a34:	4b03      	ldr	r3, [pc, #12]	; (8003a44 <HAL_GetTick+0x14>)
 8003a36:	681b      	ldr	r3, [r3, #0]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	20000624 	.word	0x20000624

08003a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a50:	f7ff ffee 	bl	8003a30 <HAL_GetTick>
 8003a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a60:	d005      	beq.n	8003a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a62:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <HAL_Delay+0x44>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a6e:	bf00      	nop
 8003a70:	f7ff ffde 	bl	8003a30 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d8f7      	bhi.n	8003a70 <HAL_Delay+0x28>
  {
  }
}
 8003a80:	bf00      	nop
 8003a82:	bf00      	nop
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20000130 	.word	0x20000130

08003a90 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e0ed      	b.n	8003c7e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d102      	bne.n	8003ab4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fd fff2 	bl	8001a98 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0202 	bic.w	r2, r2, #2
 8003ac2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ac4:	f7ff ffb4 	bl	8003a30 <HAL_GetTick>
 8003ac8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003aca:	e012      	b.n	8003af2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003acc:	f7ff ffb0 	bl	8003a30 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b0a      	cmp	r3, #10
 8003ad8:	d90b      	bls.n	8003af2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2205      	movs	r2, #5
 8003aea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e0c5      	b.n	8003c7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1e5      	bne.n	8003acc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b10:	f7ff ff8e 	bl	8003a30 <HAL_GetTick>
 8003b14:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b16:	e012      	b.n	8003b3e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b18:	f7ff ff8a 	bl	8003a30 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b0a      	cmp	r3, #10
 8003b24:	d90b      	bls.n	8003b3e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2205      	movs	r2, #5
 8003b36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e09f      	b.n	8003c7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0e5      	beq.n	8003b18 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	7e1b      	ldrb	r3, [r3, #24]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d108      	bne.n	8003b66 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	e007      	b.n	8003b76 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	7e5b      	ldrb	r3, [r3, #25]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d108      	bne.n	8003b90 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	e007      	b.n	8003ba0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	7e9b      	ldrb	r3, [r3, #26]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d108      	bne.n	8003bba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0220 	orr.w	r2, r2, #32
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	e007      	b.n	8003bca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0220 	bic.w	r2, r2, #32
 8003bc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	7edb      	ldrb	r3, [r3, #27]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d108      	bne.n	8003be4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0210 	bic.w	r2, r2, #16
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	e007      	b.n	8003bf4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0210 	orr.w	r2, r2, #16
 8003bf2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	7f1b      	ldrb	r3, [r3, #28]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d108      	bne.n	8003c0e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0208 	orr.w	r2, r2, #8
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	e007      	b.n	8003c1e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0208 	bic.w	r2, r2, #8
 8003c1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	7f5b      	ldrb	r3, [r3, #29]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d108      	bne.n	8003c38 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f042 0204 	orr.w	r2, r2, #4
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	e007      	b.n	8003c48 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0204 	bic.w	r2, r2, #4
 8003c46:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	431a      	orrs	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	ea42 0103 	orr.w	r1, r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	1e5a      	subs	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c9e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003ca0:	7cfb      	ldrb	r3, [r7, #19]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d003      	beq.n	8003cae <HAL_CAN_ConfigFilter+0x26>
 8003ca6:	7cfb      	ldrb	r3, [r7, #19]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	f040 80be 	bne.w	8003e2a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003cae:	4b65      	ldr	r3, [pc, #404]	; (8003e44 <HAL_CAN_ConfigFilter+0x1bc>)
 8003cb0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003cb8:	f043 0201 	orr.w	r2, r3, #1
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003cc8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	021b      	lsls	r3, r3, #8
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	f003 031f 	and.w	r3, r3, #31
 8003cee:	2201      	movs	r2, #1
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	401a      	ands	r2, r3
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d123      	bne.n	8003d58 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	401a      	ands	r2, r3
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003d32:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	3248      	adds	r2, #72	; 0x48
 8003d38:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d4c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d4e:	6979      	ldr	r1, [r7, #20]
 8003d50:	3348      	adds	r3, #72	; 0x48
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	440b      	add	r3, r1
 8003d56:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d122      	bne.n	8003da6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003d80:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	3248      	adds	r2, #72	; 0x48
 8003d86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003d9a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003d9c:	6979      	ldr	r1, [r7, #20]
 8003d9e:	3348      	adds	r3, #72	; 0x48
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	440b      	add	r3, r1
 8003da4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d109      	bne.n	8003dc2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	43db      	mvns	r3, r3
 8003db8:	401a      	ands	r2, r3
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003dc0:	e007      	b.n	8003dd2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d109      	bne.n	8003dee <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	43db      	mvns	r3, r3
 8003de4:	401a      	ands	r2, r3
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003dec:	e007      	b.n	8003dfe <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d107      	bne.n	8003e16 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003e1c:	f023 0201 	bic.w	r2, r3, #1
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	e006      	b.n	8003e38 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
  }
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	371c      	adds	r7, #28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	40006400 	.word	0x40006400

08003e48 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d12e      	bne.n	8003eba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0201 	bic.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e74:	f7ff fddc 	bl	8003a30 <HAL_GetTick>
 8003e78:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003e7a:	e012      	b.n	8003ea2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e7c:	f7ff fdd8 	bl	8003a30 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b0a      	cmp	r3, #10
 8003e88:	d90b      	bls.n	8003ea2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2205      	movs	r2, #5
 8003e9a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e012      	b.n	8003ec8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1e5      	bne.n	8003e7c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	e006      	b.n	8003ec8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
  }
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b089      	sub	sp, #36	; 0x24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ee4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003eee:	7ffb      	ldrb	r3, [r7, #31]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d003      	beq.n	8003efc <HAL_CAN_AddTxMessage+0x2c>
 8003ef4:	7ffb      	ldrb	r3, [r7, #31]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	f040 80b8 	bne.w	800406c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10a      	bne.n	8003f1c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d105      	bne.n	8003f1c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 80a0 	beq.w	800405c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	0e1b      	lsrs	r3, r3, #24
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d907      	bls.n	8003f3c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e09e      	b.n	800407a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	409a      	lsls	r2, r3
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10d      	bne.n	8003f6a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003f58:	68f9      	ldr	r1, [r7, #12]
 8003f5a:	6809      	ldr	r1, [r1, #0]
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	3318      	adds	r3, #24
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	440b      	add	r3, r1
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	e00f      	b.n	8003f8a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f74:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f7a:	68f9      	ldr	r1, [r7, #12]
 8003f7c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003f7e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	3318      	adds	r3, #24
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	440b      	add	r3, r1
 8003f88:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6819      	ldr	r1, [r3, #0]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	691a      	ldr	r2, [r3, #16]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	3318      	adds	r3, #24
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	440b      	add	r3, r1
 8003f9a:	3304      	adds	r3, #4
 8003f9c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	7d1b      	ldrb	r3, [r3, #20]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d111      	bne.n	8003fca <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	3318      	adds	r3, #24
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	6811      	ldr	r1, [r2, #0]
 8003fba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	3318      	adds	r3, #24
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	440b      	add	r3, r1
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3307      	adds	r3, #7
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	061a      	lsls	r2, r3, #24
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3306      	adds	r3, #6
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	041b      	lsls	r3, r3, #16
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3305      	adds	r3, #5
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	021b      	lsls	r3, r3, #8
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	3204      	adds	r2, #4
 8003fea:	7812      	ldrb	r2, [r2, #0]
 8003fec:	4610      	mov	r0, r2
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	6811      	ldr	r1, [r2, #0]
 8003ff2:	ea43 0200 	orr.w	r2, r3, r0
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	440b      	add	r3, r1
 8003ffc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004000:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3303      	adds	r3, #3
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	061a      	lsls	r2, r3, #24
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3302      	adds	r3, #2
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	041b      	lsls	r3, r3, #16
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3301      	adds	r3, #1
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	021b      	lsls	r3, r3, #8
 800401c:	4313      	orrs	r3, r2
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	7812      	ldrb	r2, [r2, #0]
 8004022:	4610      	mov	r0, r2
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	6811      	ldr	r1, [r2, #0]
 8004028:	ea43 0200 	orr.w	r2, r3, r0
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	440b      	add	r3, r1
 8004032:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004036:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	3318      	adds	r3, #24
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	4413      	add	r3, r2
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	6811      	ldr	r1, [r2, #0]
 800404a:	f043 0201 	orr.w	r2, r3, #1
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	3318      	adds	r3, #24
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	440b      	add	r3, r1
 8004056:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	e00e      	b.n	800407a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e006      	b.n	800407a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
  }
}
 800407a:	4618      	mov	r0, r3
 800407c:	3724      	adds	r7, #36	; 0x24
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004086:	b480      	push	{r7}
 8004088:	b087      	sub	sp, #28
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	607a      	str	r2, [r7, #4]
 8004092:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 3020 	ldrb.w	r3, [r3, #32]
 800409a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800409c:	7dfb      	ldrb	r3, [r7, #23]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d003      	beq.n	80040aa <HAL_CAN_GetRxMessage+0x24>
 80040a2:	7dfb      	ldrb	r3, [r7, #23]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	f040 80f3 	bne.w	8004290 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10e      	bne.n	80040ce <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d116      	bne.n	80040ec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e0e7      	b.n	800429e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	f003 0303 	and.w	r3, r3, #3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d107      	bne.n	80040ec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0d8      	b.n	800429e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	331b      	adds	r3, #27
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	4413      	add	r3, r2
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0204 	and.w	r2, r3, #4
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10c      	bne.n	8004124 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	331b      	adds	r3, #27
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	4413      	add	r3, r2
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	0d5b      	lsrs	r3, r3, #21
 800411a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	e00b      	b.n	800413c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	331b      	adds	r3, #27
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	4413      	add	r3, r2
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	08db      	lsrs	r3, r3, #3
 8004134:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	331b      	adds	r3, #27
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	4413      	add	r3, r2
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0202 	and.w	r2, r3, #2
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	331b      	adds	r3, #27
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	4413      	add	r3, r2
 800415e:	3304      	adds	r3, #4
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 020f 	and.w	r2, r3, #15
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	331b      	adds	r3, #27
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	4413      	add	r3, r2
 8004176:	3304      	adds	r3, #4
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	0a1b      	lsrs	r3, r3, #8
 800417c:	b2da      	uxtb	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	331b      	adds	r3, #27
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	4413      	add	r3, r2
 800418e:	3304      	adds	r3, #4
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	0c1b      	lsrs	r3, r3, #16
 8004194:	b29a      	uxth	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	0a1a      	lsrs	r2, r3, #8
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	3301      	adds	r3, #1
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	0c1a      	lsrs	r2, r3, #16
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	3302      	adds	r3, #2
 80041e0:	b2d2      	uxtb	r2, r2
 80041e2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	0e1a      	lsrs	r2, r3, #24
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	3303      	adds	r3, #3
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	011b      	lsls	r3, r3, #4
 8004206:	4413      	add	r3, r2
 8004208:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	3304      	adds	r3, #4
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	011b      	lsls	r3, r3, #4
 800421e:	4413      	add	r3, r2
 8004220:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	0a1a      	lsrs	r2, r3, #8
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	3305      	adds	r3, #5
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	4413      	add	r3, r2
 800423a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	0c1a      	lsrs	r2, r3, #16
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	3306      	adds	r3, #6
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	011b      	lsls	r3, r3, #4
 8004252:	4413      	add	r3, r2
 8004254:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	0e1a      	lsrs	r2, r3, #24
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	3307      	adds	r3, #7
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d108      	bne.n	800427c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0220 	orr.w	r2, r2, #32
 8004278:	60da      	str	r2, [r3, #12]
 800427a:	e007      	b.n	800428c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	691a      	ldr	r2, [r3, #16]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0220 	orr.w	r2, r2, #32
 800428a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	e006      	b.n	800429e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
  }
}
 800429e:	4618      	mov	r0, r3
 80042a0:	371c      	adds	r7, #28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b085      	sub	sp, #20
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042ba:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d002      	beq.n	80042c8 <HAL_CAN_ActivateNotification+0x1e>
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d109      	bne.n	80042dc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6959      	ldr	r1, [r3, #20]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	e006      	b.n	80042ea <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
  }
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b08a      	sub	sp, #40	; 0x28
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80042fe:	2300      	movs	r3, #0
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d07c      	beq.n	8004436 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d023      	beq.n	800438e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2201      	movs	r2, #1
 800434c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f983 	bl	8004664 <HAL_CAN_TxMailbox0CompleteCallback>
 800435e:	e016      	b.n	800438e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b00      	cmp	r3, #0
 8004368:	d004      	beq.n	8004374 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
 8004372:	e00c      	b.n	800438e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	2b00      	cmp	r3, #0
 800437c:	d004      	beq.n	8004388 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
 8004386:	e002      	b.n	800438e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f989 	bl	80046a0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004394:	2b00      	cmp	r3, #0
 8004396:	d024      	beq.n	80043e2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f963 	bl	8004678 <HAL_CAN_TxMailbox1CompleteCallback>
 80043b2:	e016      	b.n	80043e2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d004      	beq.n	80043c8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
 80043c6:	e00c      	b.n	80043e2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d004      	beq.n	80043dc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
 80043da:	e002      	b.n	80043e2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f969 	bl	80046b4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d024      	beq.n	8004436 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f943 	bl	800468c <HAL_CAN_TxMailbox2CompleteCallback>
 8004406:	e016      	b.n	8004436 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d004      	beq.n	800441c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004418:	627b      	str	r3, [r7, #36]	; 0x24
 800441a:	e00c      	b.n	8004436 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d004      	beq.n	8004430 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
 800442e:	e002      	b.n	8004436 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f949 	bl	80046c8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00c      	beq.n	800445a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f003 0310 	and.w	r3, r3, #16
 8004446:	2b00      	cmp	r3, #0
 8004448:	d007      	beq.n	800445a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004450:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2210      	movs	r2, #16
 8004458:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00b      	beq.n	800447c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d006      	beq.n	800447c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2208      	movs	r2, #8
 8004474:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f930 	bl	80046dc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d009      	beq.n	800449a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f003 0303 	and.w	r3, r3, #3
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7fe f9e7 	bl	8002868 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800449a:	6a3b      	ldr	r3, [r7, #32]
 800449c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00c      	beq.n	80044be <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f003 0310 	and.w	r3, r3, #16
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d007      	beq.n	80044be <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2210      	movs	r2, #16
 80044bc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	f003 0320 	and.w	r3, r3, #32
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00b      	beq.n	80044e0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f003 0308 	and.w	r3, r3, #8
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d006      	beq.n	80044e0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2208      	movs	r2, #8
 80044d8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f912 	bl	8004704 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	f003 0310 	and.w	r3, r3, #16
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d009      	beq.n	80044fe <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	f003 0303 	and.w	r3, r3, #3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f8f9 	bl	80046f0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00b      	beq.n	8004520 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f003 0310 	and.w	r3, r3, #16
 800450e:	2b00      	cmp	r3, #0
 8004510:	d006      	beq.n	8004520 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2210      	movs	r2, #16
 8004518:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f8fc 	bl	8004718 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00b      	beq.n	8004542 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b00      	cmp	r3, #0
 8004532:	d006      	beq.n	8004542 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2208      	movs	r2, #8
 800453a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f8f5 	bl	800472c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d07b      	beq.n	8004644 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b00      	cmp	r3, #0
 8004554:	d072      	beq.n	800463c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d008      	beq.n	8004572 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	f043 0301 	orr.w	r3, r3, #1
 8004570:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004578:	2b00      	cmp	r3, #0
 800457a:	d008      	beq.n	800458e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	f043 0302 	orr.w	r3, r3, #2
 800458c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004594:	2b00      	cmp	r3, #0
 8004596:	d008      	beq.n	80045aa <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	f043 0304 	orr.w	r3, r3, #4
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d043      	beq.n	800463c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d03e      	beq.n	800463c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045c4:	2b60      	cmp	r3, #96	; 0x60
 80045c6:	d02b      	beq.n	8004620 <HAL_CAN_IRQHandler+0x32a>
 80045c8:	2b60      	cmp	r3, #96	; 0x60
 80045ca:	d82e      	bhi.n	800462a <HAL_CAN_IRQHandler+0x334>
 80045cc:	2b50      	cmp	r3, #80	; 0x50
 80045ce:	d022      	beq.n	8004616 <HAL_CAN_IRQHandler+0x320>
 80045d0:	2b50      	cmp	r3, #80	; 0x50
 80045d2:	d82a      	bhi.n	800462a <HAL_CAN_IRQHandler+0x334>
 80045d4:	2b40      	cmp	r3, #64	; 0x40
 80045d6:	d019      	beq.n	800460c <HAL_CAN_IRQHandler+0x316>
 80045d8:	2b40      	cmp	r3, #64	; 0x40
 80045da:	d826      	bhi.n	800462a <HAL_CAN_IRQHandler+0x334>
 80045dc:	2b30      	cmp	r3, #48	; 0x30
 80045de:	d010      	beq.n	8004602 <HAL_CAN_IRQHandler+0x30c>
 80045e0:	2b30      	cmp	r3, #48	; 0x30
 80045e2:	d822      	bhi.n	800462a <HAL_CAN_IRQHandler+0x334>
 80045e4:	2b10      	cmp	r3, #16
 80045e6:	d002      	beq.n	80045ee <HAL_CAN_IRQHandler+0x2f8>
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d005      	beq.n	80045f8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80045ec:	e01d      	b.n	800462a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	f043 0308 	orr.w	r3, r3, #8
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80045f6:	e019      	b.n	800462c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	f043 0310 	orr.w	r3, r3, #16
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004600:	e014      	b.n	800462c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	f043 0320 	orr.w	r3, r3, #32
 8004608:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800460a:	e00f      	b.n	800462c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004612:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004614:	e00a      	b.n	800462c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800461e:	e005      	b.n	800462c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004626:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004628:	e000      	b.n	800462c <HAL_CAN_IRQHandler+0x336>
            break;
 800462a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	699a      	ldr	r2, [r3, #24]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800463a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2204      	movs	r2, #4
 8004642:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	2b00      	cmp	r3, #0
 8004648:	d008      	beq.n	800465c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f872 	bl	8004740 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800465c:	bf00      	nop
 800465e:	3728      	adds	r7, #40	; 0x28
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004764:	4b0c      	ldr	r3, [pc, #48]	; (8004798 <__NVIC_SetPriorityGrouping+0x44>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800476a:	68ba      	ldr	r2, [r7, #8]
 800476c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004770:	4013      	ands	r3, r2
 8004772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800477c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004786:	4a04      	ldr	r2, [pc, #16]	; (8004798 <__NVIC_SetPriorityGrouping+0x44>)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	60d3      	str	r3, [r2, #12]
}
 800478c:	bf00      	nop
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	e000ed00 	.word	0xe000ed00

0800479c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047a0:	4b04      	ldr	r3, [pc, #16]	; (80047b4 <__NVIC_GetPriorityGrouping+0x18>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	0a1b      	lsrs	r3, r3, #8
 80047a6:	f003 0307 	and.w	r3, r3, #7
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	e000ed00 	.word	0xe000ed00

080047b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	db0b      	blt.n	80047e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ca:	79fb      	ldrb	r3, [r7, #7]
 80047cc:	f003 021f 	and.w	r2, r3, #31
 80047d0:	4907      	ldr	r1, [pc, #28]	; (80047f0 <__NVIC_EnableIRQ+0x38>)
 80047d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d6:	095b      	lsrs	r3, r3, #5
 80047d8:	2001      	movs	r0, #1
 80047da:	fa00 f202 	lsl.w	r2, r0, r2
 80047de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047e2:	bf00      	nop
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	e000e100 	.word	0xe000e100

080047f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	4603      	mov	r3, r0
 80047fc:	6039      	str	r1, [r7, #0]
 80047fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004804:	2b00      	cmp	r3, #0
 8004806:	db0a      	blt.n	800481e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	b2da      	uxtb	r2, r3
 800480c:	490c      	ldr	r1, [pc, #48]	; (8004840 <__NVIC_SetPriority+0x4c>)
 800480e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004812:	0112      	lsls	r2, r2, #4
 8004814:	b2d2      	uxtb	r2, r2
 8004816:	440b      	add	r3, r1
 8004818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800481c:	e00a      	b.n	8004834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	b2da      	uxtb	r2, r3
 8004822:	4908      	ldr	r1, [pc, #32]	; (8004844 <__NVIC_SetPriority+0x50>)
 8004824:	79fb      	ldrb	r3, [r7, #7]
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	3b04      	subs	r3, #4
 800482c:	0112      	lsls	r2, r2, #4
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	440b      	add	r3, r1
 8004832:	761a      	strb	r2, [r3, #24]
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	e000e100 	.word	0xe000e100
 8004844:	e000ed00 	.word	0xe000ed00

08004848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004848:	b480      	push	{r7}
 800484a:	b089      	sub	sp, #36	; 0x24
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f1c3 0307 	rsb	r3, r3, #7
 8004862:	2b04      	cmp	r3, #4
 8004864:	bf28      	it	cs
 8004866:	2304      	movcs	r3, #4
 8004868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	3304      	adds	r3, #4
 800486e:	2b06      	cmp	r3, #6
 8004870:	d902      	bls.n	8004878 <NVIC_EncodePriority+0x30>
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	3b03      	subs	r3, #3
 8004876:	e000      	b.n	800487a <NVIC_EncodePriority+0x32>
 8004878:	2300      	movs	r3, #0
 800487a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800487c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	43da      	mvns	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	401a      	ands	r2, r3
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004890:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	fa01 f303 	lsl.w	r3, r1, r3
 800489a:	43d9      	mvns	r1, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a0:	4313      	orrs	r3, r2
         );
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3724      	adds	r7, #36	; 0x24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
	...

080048b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048c0:	d301      	bcc.n	80048c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048c2:	2301      	movs	r3, #1
 80048c4:	e00f      	b.n	80048e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048c6:	4a0a      	ldr	r2, [pc, #40]	; (80048f0 <SysTick_Config+0x40>)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3b01      	subs	r3, #1
 80048cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048ce:	210f      	movs	r1, #15
 80048d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048d4:	f7ff ff8e 	bl	80047f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048d8:	4b05      	ldr	r3, [pc, #20]	; (80048f0 <SysTick_Config+0x40>)
 80048da:	2200      	movs	r2, #0
 80048dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048de:	4b04      	ldr	r3, [pc, #16]	; (80048f0 <SysTick_Config+0x40>)
 80048e0:	2207      	movs	r2, #7
 80048e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	e000e010 	.word	0xe000e010

080048f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7ff ff29 	bl	8004754 <__NVIC_SetPriorityGrouping>
}
 8004902:	bf00      	nop
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800490a:	b580      	push	{r7, lr}
 800490c:	b086      	sub	sp, #24
 800490e:	af00      	add	r7, sp, #0
 8004910:	4603      	mov	r3, r0
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	607a      	str	r2, [r7, #4]
 8004916:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800491c:	f7ff ff3e 	bl	800479c <__NVIC_GetPriorityGrouping>
 8004920:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	68b9      	ldr	r1, [r7, #8]
 8004926:	6978      	ldr	r0, [r7, #20]
 8004928:	f7ff ff8e 	bl	8004848 <NVIC_EncodePriority>
 800492c:	4602      	mov	r2, r0
 800492e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004932:	4611      	mov	r1, r2
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff ff5d 	bl	80047f4 <__NVIC_SetPriority>
}
 800493a:	bf00      	nop
 800493c:	3718      	adds	r7, #24
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b082      	sub	sp, #8
 8004946:	af00      	add	r7, sp, #0
 8004948:	4603      	mov	r3, r0
 800494a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800494c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff ff31 	bl	80047b8 <__NVIC_EnableIRQ>
}
 8004956:	bf00      	nop
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b082      	sub	sp, #8
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff ffa2 	bl	80048b0 <SysTick_Config>
 800496c:	4603      	mov	r3, r0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b04      	cmp	r3, #4
 8004984:	d106      	bne.n	8004994 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8004986:	4b09      	ldr	r3, [pc, #36]	; (80049ac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a08      	ldr	r2, [pc, #32]	; (80049ac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800498c:	f043 0304 	orr.w	r3, r3, #4
 8004990:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8004992:	e005      	b.n	80049a0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8004994:	4b05      	ldr	r3, [pc, #20]	; (80049ac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a04      	ldr	r2, [pc, #16]	; (80049ac <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800499a:	f023 0304 	bic.w	r3, r3, #4
 800499e:	6013      	str	r3, [r2, #0]
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	e000e010 	.word	0xe000e010

080049b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80049bc:	f7ff f838 	bl	8003a30 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e099      	b.n	8004b00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f022 0201 	bic.w	r2, r2, #1
 80049ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049ec:	e00f      	b.n	8004a0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049ee:	f7ff f81f 	bl	8003a30 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b05      	cmp	r3, #5
 80049fa:	d908      	bls.n	8004a0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2220      	movs	r2, #32
 8004a00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2203      	movs	r2, #3
 8004a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e078      	b.n	8004b00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1e8      	bne.n	80049ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	4b38      	ldr	r3, [pc, #224]	; (8004b08 <HAL_DMA_Init+0x158>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a1b      	ldr	r3, [r3, #32]
 8004a58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d107      	bne.n	8004a78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a70:	4313      	orrs	r3, r2
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f023 0307 	bic.w	r3, r3, #7
 8004a8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d117      	bne.n	8004ad2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00e      	beq.n	8004ad2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 fa6f 	bl	8004f98 <DMA_CheckFifoParam>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d008      	beq.n	8004ad2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2240      	movs	r2, #64	; 0x40
 8004ac4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e016      	b.n	8004b00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fa26 	bl	8004f2c <DMA_CalcBaseAndBitshift>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae8:	223f      	movs	r2, #63	; 0x3f
 8004aea:	409a      	lsls	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	f010803f 	.word	0xf010803f

08004b0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d101      	bne.n	8004b32 <HAL_DMA_Start_IT+0x26>
 8004b2e:	2302      	movs	r3, #2
 8004b30:	e040      	b.n	8004bb4 <HAL_DMA_Start_IT+0xa8>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d12f      	bne.n	8004ba6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f9b8 	bl	8004ed0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b64:	223f      	movs	r2, #63	; 0x3f
 8004b66:	409a      	lsls	r2, r3
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0216 	orr.w	r2, r2, #22
 8004b7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d007      	beq.n	8004b94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0208 	orr.w	r2, r2, #8
 8004b92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f042 0201 	orr.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	e005      	b.n	8004bb2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004bae:	2302      	movs	r3, #2
 8004bb0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3718      	adds	r7, #24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004bc8:	4b92      	ldr	r3, [pc, #584]	; (8004e14 <HAL_DMA_IRQHandler+0x258>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a92      	ldr	r2, [pc, #584]	; (8004e18 <HAL_DMA_IRQHandler+0x25c>)
 8004bce:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd2:	0a9b      	lsrs	r3, r3, #10
 8004bd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be6:	2208      	movs	r2, #8
 8004be8:	409a      	lsls	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4013      	ands	r3, r2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d01a      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d013      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0204 	bic.w	r2, r2, #4
 8004c0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c14:	2208      	movs	r2, #8
 8004c16:	409a      	lsls	r2, r3
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c20:	f043 0201 	orr.w	r2, r3, #1
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	409a      	lsls	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4013      	ands	r3, r2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d012      	beq.n	8004c5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00b      	beq.n	8004c5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	409a      	lsls	r2, r3
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c56:	f043 0202 	orr.w	r2, r3, #2
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c62:	2204      	movs	r2, #4
 8004c64:	409a      	lsls	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d012      	beq.n	8004c94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00b      	beq.n	8004c94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c80:	2204      	movs	r2, #4
 8004c82:	409a      	lsls	r2, r3
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8c:	f043 0204 	orr.w	r2, r3, #4
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c98:	2210      	movs	r2, #16
 8004c9a:	409a      	lsls	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d043      	beq.n	8004d2c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d03c      	beq.n	8004d2c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb6:	2210      	movs	r2, #16
 8004cb8:	409a      	lsls	r2, r3
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d018      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d108      	bne.n	8004cec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d024      	beq.n	8004d2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	4798      	blx	r3
 8004cea:	e01f      	b.n	8004d2c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d01b      	beq.n	8004d2c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	4798      	blx	r3
 8004cfc:	e016      	b.n	8004d2c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d107      	bne.n	8004d1c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0208 	bic.w	r2, r2, #8
 8004d1a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d30:	2220      	movs	r2, #32
 8004d32:	409a      	lsls	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4013      	ands	r3, r2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 808e 	beq.w	8004e5a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0310 	and.w	r3, r3, #16
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 8086 	beq.w	8004e5a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d52:	2220      	movs	r2, #32
 8004d54:	409a      	lsls	r2, r3
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b05      	cmp	r3, #5
 8004d64:	d136      	bne.n	8004dd4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0216 	bic.w	r2, r2, #22
 8004d74:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695a      	ldr	r2, [r3, #20]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d84:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d103      	bne.n	8004d96 <HAL_DMA_IRQHandler+0x1da>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0208 	bic.w	r2, r2, #8
 8004da4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004daa:	223f      	movs	r2, #63	; 0x3f
 8004dac:	409a      	lsls	r2, r3
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d07d      	beq.n	8004ec6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	4798      	blx	r3
        }
        return;
 8004dd2:	e078      	b.n	8004ec6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d01c      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d108      	bne.n	8004e02 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d030      	beq.n	8004e5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	4798      	blx	r3
 8004e00:	e02b      	b.n	8004e5a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d027      	beq.n	8004e5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	4798      	blx	r3
 8004e12:	e022      	b.n	8004e5a <HAL_DMA_IRQHandler+0x29e>
 8004e14:	20000128 	.word	0x20000128
 8004e18:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10f      	bne.n	8004e4a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0210 	bic.w	r2, r2, #16
 8004e38:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d032      	beq.n	8004ec8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d022      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2205      	movs	r2, #5
 8004e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0201 	bic.w	r2, r2, #1
 8004e84:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	60bb      	str	r3, [r7, #8]
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d307      	bcc.n	8004ea2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1f2      	bne.n	8004e86 <HAL_DMA_IRQHandler+0x2ca>
 8004ea0:	e000      	b.n	8004ea4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004ea2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d005      	beq.n	8004ec8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	4798      	blx	r3
 8004ec4:	e000      	b.n	8004ec8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004ec6:	bf00      	nop
    }
  }
}
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop

08004ed0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004eec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	2b40      	cmp	r3, #64	; 0x40
 8004efc:	d108      	bne.n	8004f10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f0e:	e007      	b.n	8004f20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	60da      	str	r2, [r3, #12]
}
 8004f20:	bf00      	nop
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	3b10      	subs	r3, #16
 8004f3c:	4a14      	ldr	r2, [pc, #80]	; (8004f90 <DMA_CalcBaseAndBitshift+0x64>)
 8004f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f42:	091b      	lsrs	r3, r3, #4
 8004f44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f46:	4a13      	ldr	r2, [pc, #76]	; (8004f94 <DMA_CalcBaseAndBitshift+0x68>)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d909      	bls.n	8004f6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f62:	f023 0303 	bic.w	r3, r3, #3
 8004f66:	1d1a      	adds	r2, r3, #4
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	659a      	str	r2, [r3, #88]	; 0x58
 8004f6c:	e007      	b.n	8004f7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f76:	f023 0303 	bic.w	r3, r3, #3
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	aaaaaaab 	.word	0xaaaaaaab
 8004f94:	08009408 	.word	0x08009408

08004f98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d11f      	bne.n	8004ff2 <DMA_CheckFifoParam+0x5a>
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d856      	bhi.n	8005066 <DMA_CheckFifoParam+0xce>
 8004fb8:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <DMA_CheckFifoParam+0x28>)
 8004fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbe:	bf00      	nop
 8004fc0:	08004fd1 	.word	0x08004fd1
 8004fc4:	08004fe3 	.word	0x08004fe3
 8004fc8:	08004fd1 	.word	0x08004fd1
 8004fcc:	08005067 	.word	0x08005067
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d046      	beq.n	800506a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fe0:	e043      	b.n	800506a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fea:	d140      	bne.n	800506e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ff0:	e03d      	b.n	800506e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ffa:	d121      	bne.n	8005040 <DMA_CheckFifoParam+0xa8>
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	d837      	bhi.n	8005072 <DMA_CheckFifoParam+0xda>
 8005002:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <DMA_CheckFifoParam+0x70>)
 8005004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005008:	08005019 	.word	0x08005019
 800500c:	0800501f 	.word	0x0800501f
 8005010:	08005019 	.word	0x08005019
 8005014:	08005031 	.word	0x08005031
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	73fb      	strb	r3, [r7, #15]
      break;
 800501c:	e030      	b.n	8005080 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005022:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d025      	beq.n	8005076 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800502e:	e022      	b.n	8005076 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005034:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005038:	d11f      	bne.n	800507a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800503e:	e01c      	b.n	800507a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2b02      	cmp	r3, #2
 8005044:	d903      	bls.n	800504e <DMA_CheckFifoParam+0xb6>
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2b03      	cmp	r3, #3
 800504a:	d003      	beq.n	8005054 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800504c:	e018      	b.n	8005080 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	73fb      	strb	r3, [r7, #15]
      break;
 8005052:	e015      	b.n	8005080 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00e      	beq.n	800507e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	73fb      	strb	r3, [r7, #15]
      break;
 8005064:	e00b      	b.n	800507e <DMA_CheckFifoParam+0xe6>
      break;
 8005066:	bf00      	nop
 8005068:	e00a      	b.n	8005080 <DMA_CheckFifoParam+0xe8>
      break;
 800506a:	bf00      	nop
 800506c:	e008      	b.n	8005080 <DMA_CheckFifoParam+0xe8>
      break;
 800506e:	bf00      	nop
 8005070:	e006      	b.n	8005080 <DMA_CheckFifoParam+0xe8>
      break;
 8005072:	bf00      	nop
 8005074:	e004      	b.n	8005080 <DMA_CheckFifoParam+0xe8>
      break;
 8005076:	bf00      	nop
 8005078:	e002      	b.n	8005080 <DMA_CheckFifoParam+0xe8>
      break;   
 800507a:	bf00      	nop
 800507c:	e000      	b.n	8005080 <DMA_CheckFifoParam+0xe8>
      break;
 800507e:	bf00      	nop
    }
  } 
  
  return status; 
 8005080:	7bfb      	ldrb	r3, [r7, #15]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop

08005090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005090:	b480      	push	{r7}
 8005092:	b089      	sub	sp, #36	; 0x24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800509a:	2300      	movs	r3, #0
 800509c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800509e:	2300      	movs	r3, #0
 80050a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050a6:	2300      	movs	r3, #0
 80050a8:	61fb      	str	r3, [r7, #28]
 80050aa:	e177      	b.n	800539c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80050ac:	2201      	movs	r2, #1
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	4013      	ands	r3, r2
 80050be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	f040 8166 	bne.w	8005396 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d00b      	beq.n	80050ea <HAL_GPIO_Init+0x5a>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d007      	beq.n	80050ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050de:	2b11      	cmp	r3, #17
 80050e0:	d003      	beq.n	80050ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b12      	cmp	r3, #18
 80050e8:	d130      	bne.n	800514c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	2203      	movs	r2, #3
 80050f6:	fa02 f303 	lsl.w	r3, r2, r3
 80050fa:	43db      	mvns	r3, r3
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	4013      	ands	r3, r2
 8005100:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	fa02 f303 	lsl.w	r3, r2, r3
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	4313      	orrs	r3, r2
 8005112:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005120:	2201      	movs	r2, #1
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	fa02 f303 	lsl.w	r3, r2, r3
 8005128:	43db      	mvns	r3, r3
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	4013      	ands	r3, r2
 800512e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	091b      	lsrs	r3, r3, #4
 8005136:	f003 0201 	and.w	r2, r3, #1
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	4313      	orrs	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	2203      	movs	r2, #3
 8005158:	fa02 f303 	lsl.w	r3, r2, r3
 800515c:	43db      	mvns	r3, r3
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	4013      	ands	r3, r2
 8005162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	005b      	lsls	r3, r3, #1
 800516c:	fa02 f303 	lsl.w	r3, r2, r3
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	4313      	orrs	r3, r2
 8005174:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b02      	cmp	r3, #2
 8005182:	d003      	beq.n	800518c <HAL_GPIO_Init+0xfc>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2b12      	cmp	r3, #18
 800518a:	d123      	bne.n	80051d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	08da      	lsrs	r2, r3, #3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3208      	adds	r2, #8
 8005194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005198:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	220f      	movs	r2, #15
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	43db      	mvns	r3, r3
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	4013      	ands	r3, r2
 80051ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	691a      	ldr	r2, [r3, #16]
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	69ba      	ldr	r2, [r7, #24]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	08da      	lsrs	r2, r3, #3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3208      	adds	r2, #8
 80051ce:	69b9      	ldr	r1, [r7, #24]
 80051d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	2203      	movs	r2, #3
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	43db      	mvns	r3, r3
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	4013      	ands	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f003 0203 	and.w	r2, r3, #3
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	4313      	orrs	r3, r2
 8005200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 80c0 	beq.w	8005396 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005216:	2300      	movs	r3, #0
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	4b66      	ldr	r3, [pc, #408]	; (80053b4 <HAL_GPIO_Init+0x324>)
 800521c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521e:	4a65      	ldr	r2, [pc, #404]	; (80053b4 <HAL_GPIO_Init+0x324>)
 8005220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005224:	6453      	str	r3, [r2, #68]	; 0x44
 8005226:	4b63      	ldr	r3, [pc, #396]	; (80053b4 <HAL_GPIO_Init+0x324>)
 8005228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005232:	4a61      	ldr	r2, [pc, #388]	; (80053b8 <HAL_GPIO_Init+0x328>)
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	089b      	lsrs	r3, r3, #2
 8005238:	3302      	adds	r3, #2
 800523a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800523e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	220f      	movs	r2, #15
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	43db      	mvns	r3, r3
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	4013      	ands	r3, r2
 8005254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a58      	ldr	r2, [pc, #352]	; (80053bc <HAL_GPIO_Init+0x32c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d037      	beq.n	80052ce <HAL_GPIO_Init+0x23e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a57      	ldr	r2, [pc, #348]	; (80053c0 <HAL_GPIO_Init+0x330>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d031      	beq.n	80052ca <HAL_GPIO_Init+0x23a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a56      	ldr	r2, [pc, #344]	; (80053c4 <HAL_GPIO_Init+0x334>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d02b      	beq.n	80052c6 <HAL_GPIO_Init+0x236>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a55      	ldr	r2, [pc, #340]	; (80053c8 <HAL_GPIO_Init+0x338>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d025      	beq.n	80052c2 <HAL_GPIO_Init+0x232>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a54      	ldr	r2, [pc, #336]	; (80053cc <HAL_GPIO_Init+0x33c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d01f      	beq.n	80052be <HAL_GPIO_Init+0x22e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a53      	ldr	r2, [pc, #332]	; (80053d0 <HAL_GPIO_Init+0x340>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d019      	beq.n	80052ba <HAL_GPIO_Init+0x22a>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a52      	ldr	r2, [pc, #328]	; (80053d4 <HAL_GPIO_Init+0x344>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d013      	beq.n	80052b6 <HAL_GPIO_Init+0x226>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a51      	ldr	r2, [pc, #324]	; (80053d8 <HAL_GPIO_Init+0x348>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00d      	beq.n	80052b2 <HAL_GPIO_Init+0x222>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a50      	ldr	r2, [pc, #320]	; (80053dc <HAL_GPIO_Init+0x34c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d007      	beq.n	80052ae <HAL_GPIO_Init+0x21e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a4f      	ldr	r2, [pc, #316]	; (80053e0 <HAL_GPIO_Init+0x350>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d101      	bne.n	80052aa <HAL_GPIO_Init+0x21a>
 80052a6:	2309      	movs	r3, #9
 80052a8:	e012      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052aa:	230a      	movs	r3, #10
 80052ac:	e010      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052ae:	2308      	movs	r3, #8
 80052b0:	e00e      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052b2:	2307      	movs	r3, #7
 80052b4:	e00c      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052b6:	2306      	movs	r3, #6
 80052b8:	e00a      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052ba:	2305      	movs	r3, #5
 80052bc:	e008      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052be:	2304      	movs	r3, #4
 80052c0:	e006      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052c2:	2303      	movs	r3, #3
 80052c4:	e004      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e002      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052ca:	2301      	movs	r3, #1
 80052cc:	e000      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052ce:	2300      	movs	r3, #0
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	f002 0203 	and.w	r2, r2, #3
 80052d6:	0092      	lsls	r2, r2, #2
 80052d8:	4093      	lsls	r3, r2
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	4313      	orrs	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052e0:	4935      	ldr	r1, [pc, #212]	; (80053b8 <HAL_GPIO_Init+0x328>)
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	089b      	lsrs	r3, r3, #2
 80052e6:	3302      	adds	r3, #2
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052ee:	4b3d      	ldr	r3, [pc, #244]	; (80053e4 <HAL_GPIO_Init+0x354>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	43db      	mvns	r3, r3
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	4013      	ands	r3, r2
 80052fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	4313      	orrs	r3, r2
 8005310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005312:	4a34      	ldr	r2, [pc, #208]	; (80053e4 <HAL_GPIO_Init+0x354>)
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005318:	4b32      	ldr	r3, [pc, #200]	; (80053e4 <HAL_GPIO_Init+0x354>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	43db      	mvns	r3, r3
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	4013      	ands	r3, r2
 8005326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	4313      	orrs	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800533c:	4a29      	ldr	r2, [pc, #164]	; (80053e4 <HAL_GPIO_Init+0x354>)
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005342:	4b28      	ldr	r3, [pc, #160]	; (80053e4 <HAL_GPIO_Init+0x354>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	43db      	mvns	r3, r3
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4013      	ands	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005366:	4a1f      	ldr	r2, [pc, #124]	; (80053e4 <HAL_GPIO_Init+0x354>)
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800536c:	4b1d      	ldr	r3, [pc, #116]	; (80053e4 <HAL_GPIO_Init+0x354>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	43db      	mvns	r3, r3
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	4013      	ands	r3, r2
 800537a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	4313      	orrs	r3, r2
 800538e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005390:	4a14      	ldr	r2, [pc, #80]	; (80053e4 <HAL_GPIO_Init+0x354>)
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	3301      	adds	r3, #1
 800539a:	61fb      	str	r3, [r7, #28]
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	2b0f      	cmp	r3, #15
 80053a0:	f67f ae84 	bls.w	80050ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053a4:	bf00      	nop
 80053a6:	bf00      	nop
 80053a8:	3724      	adds	r7, #36	; 0x24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40023800 	.word	0x40023800
 80053b8:	40013800 	.word	0x40013800
 80053bc:	40020000 	.word	0x40020000
 80053c0:	40020400 	.word	0x40020400
 80053c4:	40020800 	.word	0x40020800
 80053c8:	40020c00 	.word	0x40020c00
 80053cc:	40021000 	.word	0x40021000
 80053d0:	40021400 	.word	0x40021400
 80053d4:	40021800 	.word	0x40021800
 80053d8:	40021c00 	.word	0x40021c00
 80053dc:	40022000 	.word	0x40022000
 80053e0:	40022400 	.word	0x40022400
 80053e4:	40013c00 	.word	0x40013c00

080053e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691a      	ldr	r2, [r3, #16]
 80053f8:	887b      	ldrh	r3, [r7, #2]
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005400:	2301      	movs	r3, #1
 8005402:	73fb      	strb	r3, [r7, #15]
 8005404:	e001      	b.n	800540a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005406:	2300      	movs	r3, #0
 8005408:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800540a:	7bfb      	ldrb	r3, [r7, #15]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	807b      	strh	r3, [r7, #2]
 8005424:	4613      	mov	r3, r2
 8005426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005428:	787b      	ldrb	r3, [r7, #1]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800542e:	887a      	ldrh	r2, [r7, #2]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005434:	e003      	b.n	800543e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005436:	887b      	ldrh	r3, [r7, #2]
 8005438:	041a      	lsls	r2, r3, #16
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	619a      	str	r2, [r3, #24]
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
	...

0800544c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	4603      	mov	r3, r0
 8005454:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005456:	4b08      	ldr	r3, [pc, #32]	; (8005478 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005458:	695a      	ldr	r2, [r3, #20]
 800545a:	88fb      	ldrh	r3, [r7, #6]
 800545c:	4013      	ands	r3, r2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d006      	beq.n	8005470 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005462:	4a05      	ldr	r2, [pc, #20]	; (8005478 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005464:	88fb      	ldrh	r3, [r7, #6]
 8005466:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005468:	88fb      	ldrh	r3, [r7, #6]
 800546a:	4618      	mov	r0, r3
 800546c:	f7fd f93a 	bl	80026e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005470:	bf00      	nop
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	40013c00 	.word	0x40013c00

0800547c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e12b      	b.n	80056e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d106      	bne.n	80054a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7fc fd9e 	bl	8001fe4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2224      	movs	r2, #36	; 0x24
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0201 	bic.w	r2, r2, #1
 80054be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80054e0:	f000 fe1e 	bl	8006120 <HAL_RCC_GetPCLK1Freq>
 80054e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	4a81      	ldr	r2, [pc, #516]	; (80056f0 <HAL_I2C_Init+0x274>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d807      	bhi.n	8005500 <HAL_I2C_Init+0x84>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4a80      	ldr	r2, [pc, #512]	; (80056f4 <HAL_I2C_Init+0x278>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	bf94      	ite	ls
 80054f8:	2301      	movls	r3, #1
 80054fa:	2300      	movhi	r3, #0
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	e006      	b.n	800550e <HAL_I2C_Init+0x92>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4a7d      	ldr	r2, [pc, #500]	; (80056f8 <HAL_I2C_Init+0x27c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	bf94      	ite	ls
 8005508:	2301      	movls	r3, #1
 800550a:	2300      	movhi	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e0e7      	b.n	80056e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4a78      	ldr	r2, [pc, #480]	; (80056fc <HAL_I2C_Init+0x280>)
 800551a:	fba2 2303 	umull	r2, r3, r2, r3
 800551e:	0c9b      	lsrs	r3, r3, #18
 8005520:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	430a      	orrs	r2, r1
 8005534:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	4a6a      	ldr	r2, [pc, #424]	; (80056f0 <HAL_I2C_Init+0x274>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d802      	bhi.n	8005550 <HAL_I2C_Init+0xd4>
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	3301      	adds	r3, #1
 800554e:	e009      	b.n	8005564 <HAL_I2C_Init+0xe8>
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005556:	fb02 f303 	mul.w	r3, r2, r3
 800555a:	4a69      	ldr	r2, [pc, #420]	; (8005700 <HAL_I2C_Init+0x284>)
 800555c:	fba2 2303 	umull	r2, r3, r2, r3
 8005560:	099b      	lsrs	r3, r3, #6
 8005562:	3301      	adds	r3, #1
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6812      	ldr	r2, [r2, #0]
 8005568:	430b      	orrs	r3, r1
 800556a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005576:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	495c      	ldr	r1, [pc, #368]	; (80056f0 <HAL_I2C_Init+0x274>)
 8005580:	428b      	cmp	r3, r1
 8005582:	d819      	bhi.n	80055b8 <HAL_I2C_Init+0x13c>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	1e59      	subs	r1, r3, #1
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005592:	1c59      	adds	r1, r3, #1
 8005594:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005598:	400b      	ands	r3, r1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00a      	beq.n	80055b4 <HAL_I2C_Init+0x138>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	1e59      	subs	r1, r3, #1
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80055ac:	3301      	adds	r3, #1
 80055ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055b2:	e051      	b.n	8005658 <HAL_I2C_Init+0x1dc>
 80055b4:	2304      	movs	r3, #4
 80055b6:	e04f      	b.n	8005658 <HAL_I2C_Init+0x1dc>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d111      	bne.n	80055e4 <HAL_I2C_Init+0x168>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	1e58      	subs	r0, r3, #1
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6859      	ldr	r1, [r3, #4]
 80055c8:	460b      	mov	r3, r1
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	440b      	add	r3, r1
 80055ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80055d2:	3301      	adds	r3, #1
 80055d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d8:	2b00      	cmp	r3, #0
 80055da:	bf0c      	ite	eq
 80055dc:	2301      	moveq	r3, #1
 80055de:	2300      	movne	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	e012      	b.n	800560a <HAL_I2C_Init+0x18e>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	1e58      	subs	r0, r3, #1
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6859      	ldr	r1, [r3, #4]
 80055ec:	460b      	mov	r3, r1
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	440b      	add	r3, r1
 80055f2:	0099      	lsls	r1, r3, #2
 80055f4:	440b      	add	r3, r1
 80055f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055fa:	3301      	adds	r3, #1
 80055fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005600:	2b00      	cmp	r3, #0
 8005602:	bf0c      	ite	eq
 8005604:	2301      	moveq	r3, #1
 8005606:	2300      	movne	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <HAL_I2C_Init+0x196>
 800560e:	2301      	movs	r3, #1
 8005610:	e022      	b.n	8005658 <HAL_I2C_Init+0x1dc>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10e      	bne.n	8005638 <HAL_I2C_Init+0x1bc>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	1e58      	subs	r0, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6859      	ldr	r1, [r3, #4]
 8005622:	460b      	mov	r3, r1
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	440b      	add	r3, r1
 8005628:	fbb0 f3f3 	udiv	r3, r0, r3
 800562c:	3301      	adds	r3, #1
 800562e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005636:	e00f      	b.n	8005658 <HAL_I2C_Init+0x1dc>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	1e58      	subs	r0, r3, #1
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6859      	ldr	r1, [r3, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	0099      	lsls	r1, r3, #2
 8005648:	440b      	add	r3, r1
 800564a:	fbb0 f3f3 	udiv	r3, r0, r3
 800564e:	3301      	adds	r3, #1
 8005650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005654:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005658:	6879      	ldr	r1, [r7, #4]
 800565a:	6809      	ldr	r1, [r1, #0]
 800565c:	4313      	orrs	r3, r2
 800565e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	69da      	ldr	r2, [r3, #28]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	431a      	orrs	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005686:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6911      	ldr	r1, [r2, #16]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	68d2      	ldr	r2, [r2, #12]
 8005692:	4311      	orrs	r1, r2
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	6812      	ldr	r2, [r2, #0]
 8005698:	430b      	orrs	r3, r1
 800569a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	695a      	ldr	r2, [r3, #20]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	431a      	orrs	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0201 	orr.w	r2, r2, #1
 80056c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	000186a0 	.word	0x000186a0
 80056f4:	001e847f 	.word	0x001e847f
 80056f8:	003d08ff 	.word	0x003d08ff
 80056fc:	431bde83 	.word	0x431bde83
 8005700:	10624dd3 	.word	0x10624dd3

08005704 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b20      	cmp	r3, #32
 8005718:	d129      	bne.n	800576e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2224      	movs	r2, #36	; 0x24
 800571e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 0201 	bic.w	r2, r2, #1
 8005730:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0210 	bic.w	r2, r2, #16
 8005740:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f042 0201 	orr.w	r2, r2, #1
 8005760:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2220      	movs	r2, #32
 8005766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	e000      	b.n	8005770 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800576e:	2302      	movs	r3, #2
  }
}
 8005770:	4618      	mov	r0, r3
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005786:	2300      	movs	r3, #0
 8005788:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b20      	cmp	r3, #32
 8005794:	d12a      	bne.n	80057ec <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2224      	movs	r2, #36	; 0x24
 800579a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 0201 	bic.w	r2, r2, #1
 80057ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80057b6:	89fb      	ldrh	r3, [r7, #14]
 80057b8:	f023 030f 	bic.w	r3, r3, #15
 80057bc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	89fb      	ldrh	r3, [r7, #14]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	89fa      	ldrh	r2, [r7, #14]
 80057ce:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0201 	orr.w	r2, r2, #1
 80057de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057e8:	2300      	movs	r3, #0
 80057ea:	e000      	b.n	80057ee <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80057ec:	2302      	movs	r3, #2
  }
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
	...

080057fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005806:	2300      	movs	r3, #0
 8005808:	603b      	str	r3, [r7, #0]
 800580a:	4b20      	ldr	r3, [pc, #128]	; (800588c <HAL_PWREx_EnableOverDrive+0x90>)
 800580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580e:	4a1f      	ldr	r2, [pc, #124]	; (800588c <HAL_PWREx_EnableOverDrive+0x90>)
 8005810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005814:	6413      	str	r3, [r2, #64]	; 0x40
 8005816:	4b1d      	ldr	r3, [pc, #116]	; (800588c <HAL_PWREx_EnableOverDrive+0x90>)
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800581e:	603b      	str	r3, [r7, #0]
 8005820:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005822:	4b1b      	ldr	r3, [pc, #108]	; (8005890 <HAL_PWREx_EnableOverDrive+0x94>)
 8005824:	2201      	movs	r2, #1
 8005826:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005828:	f7fe f902 	bl	8003a30 <HAL_GetTick>
 800582c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800582e:	e009      	b.n	8005844 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005830:	f7fe f8fe 	bl	8003a30 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800583e:	d901      	bls.n	8005844 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e01f      	b.n	8005884 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005844:	4b13      	ldr	r3, [pc, #76]	; (8005894 <HAL_PWREx_EnableOverDrive+0x98>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800584c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005850:	d1ee      	bne.n	8005830 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005852:	4b11      	ldr	r3, [pc, #68]	; (8005898 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005854:	2201      	movs	r2, #1
 8005856:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005858:	f7fe f8ea 	bl	8003a30 <HAL_GetTick>
 800585c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800585e:	e009      	b.n	8005874 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005860:	f7fe f8e6 	bl	8003a30 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800586e:	d901      	bls.n	8005874 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e007      	b.n	8005884 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005874:	4b07      	ldr	r3, [pc, #28]	; (8005894 <HAL_PWREx_EnableOverDrive+0x98>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800587c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005880:	d1ee      	bne.n	8005860 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	40023800 	.word	0x40023800
 8005890:	420e0040 	.word	0x420e0040
 8005894:	40007000 	.word	0x40007000
 8005898:	420e0044 	.word	0x420e0044

0800589c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e25b      	b.n	8005d66 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d075      	beq.n	80059a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058ba:	4ba3      	ldr	r3, [pc, #652]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f003 030c 	and.w	r3, r3, #12
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d00c      	beq.n	80058e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058c6:	4ba0      	ldr	r3, [pc, #640]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058ce:	2b08      	cmp	r3, #8
 80058d0:	d112      	bne.n	80058f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058d2:	4b9d      	ldr	r3, [pc, #628]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058de:	d10b      	bne.n	80058f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058e0:	4b99      	ldr	r3, [pc, #612]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d05b      	beq.n	80059a4 <HAL_RCC_OscConfig+0x108>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d157      	bne.n	80059a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e236      	b.n	8005d66 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005900:	d106      	bne.n	8005910 <HAL_RCC_OscConfig+0x74>
 8005902:	4b91      	ldr	r3, [pc, #580]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a90      	ldr	r2, [pc, #576]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 8005908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	e01d      	b.n	800594c <HAL_RCC_OscConfig+0xb0>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005918:	d10c      	bne.n	8005934 <HAL_RCC_OscConfig+0x98>
 800591a:	4b8b      	ldr	r3, [pc, #556]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a8a      	ldr	r2, [pc, #552]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 8005920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	4b88      	ldr	r3, [pc, #544]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a87      	ldr	r2, [pc, #540]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 800592c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005930:	6013      	str	r3, [r2, #0]
 8005932:	e00b      	b.n	800594c <HAL_RCC_OscConfig+0xb0>
 8005934:	4b84      	ldr	r3, [pc, #528]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a83      	ldr	r2, [pc, #524]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 800593a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	4b81      	ldr	r3, [pc, #516]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a80      	ldr	r2, [pc, #512]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 8005946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800594a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d013      	beq.n	800597c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005954:	f7fe f86c 	bl	8003a30 <HAL_GetTick>
 8005958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800595a:	e008      	b.n	800596e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800595c:	f7fe f868 	bl	8003a30 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b64      	cmp	r3, #100	; 0x64
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e1fb      	b.n	8005d66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800596e:	4b76      	ldr	r3, [pc, #472]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d0f0      	beq.n	800595c <HAL_RCC_OscConfig+0xc0>
 800597a:	e014      	b.n	80059a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800597c:	f7fe f858 	bl	8003a30 <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005984:	f7fe f854 	bl	8003a30 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b64      	cmp	r3, #100	; 0x64
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e1e7      	b.n	8005d66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005996:	4b6c      	ldr	r3, [pc, #432]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f0      	bne.n	8005984 <HAL_RCC_OscConfig+0xe8>
 80059a2:	e000      	b.n	80059a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d063      	beq.n	8005a7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059b2:	4b65      	ldr	r3, [pc, #404]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 030c 	and.w	r3, r3, #12
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00b      	beq.n	80059d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059be:	4b62      	ldr	r3, [pc, #392]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	d11c      	bne.n	8005a04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80059ca:	4b5f      	ldr	r3, [pc, #380]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d116      	bne.n	8005a04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059d6:	4b5c      	ldr	r3, [pc, #368]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d005      	beq.n	80059ee <HAL_RCC_OscConfig+0x152>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d001      	beq.n	80059ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e1bb      	b.n	8005d66 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059ee:	4b56      	ldr	r3, [pc, #344]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	00db      	lsls	r3, r3, #3
 80059fc:	4952      	ldr	r1, [pc, #328]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a02:	e03a      	b.n	8005a7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d020      	beq.n	8005a4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a0c:	4b4f      	ldr	r3, [pc, #316]	; (8005b4c <HAL_RCC_OscConfig+0x2b0>)
 8005a0e:	2201      	movs	r2, #1
 8005a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a12:	f7fe f80d 	bl	8003a30 <HAL_GetTick>
 8005a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a18:	e008      	b.n	8005a2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a1a:	f7fe f809 	bl	8003a30 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d901      	bls.n	8005a2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e19c      	b.n	8005d66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a2c:	4b46      	ldr	r3, [pc, #280]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d0f0      	beq.n	8005a1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a38:	4b43      	ldr	r3, [pc, #268]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	00db      	lsls	r3, r3, #3
 8005a46:	4940      	ldr	r1, [pc, #256]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	600b      	str	r3, [r1, #0]
 8005a4c:	e015      	b.n	8005a7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a4e:	4b3f      	ldr	r3, [pc, #252]	; (8005b4c <HAL_RCC_OscConfig+0x2b0>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a54:	f7fd ffec 	bl	8003a30 <HAL_GetTick>
 8005a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a5a:	e008      	b.n	8005a6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a5c:	f7fd ffe8 	bl	8003a30 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e17b      	b.n	8005d66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a6e:	4b36      	ldr	r3, [pc, #216]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1f0      	bne.n	8005a5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0308 	and.w	r3, r3, #8
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d030      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d016      	beq.n	8005abc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a8e:	4b30      	ldr	r3, [pc, #192]	; (8005b50 <HAL_RCC_OscConfig+0x2b4>)
 8005a90:	2201      	movs	r2, #1
 8005a92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a94:	f7fd ffcc 	bl	8003a30 <HAL_GetTick>
 8005a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a9a:	e008      	b.n	8005aae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a9c:	f7fd ffc8 	bl	8003a30 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e15b      	b.n	8005d66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aae:	4b26      	ldr	r3, [pc, #152]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 8005ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0f0      	beq.n	8005a9c <HAL_RCC_OscConfig+0x200>
 8005aba:	e015      	b.n	8005ae8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005abc:	4b24      	ldr	r3, [pc, #144]	; (8005b50 <HAL_RCC_OscConfig+0x2b4>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ac2:	f7fd ffb5 	bl	8003a30 <HAL_GetTick>
 8005ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ac8:	e008      	b.n	8005adc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005aca:	f7fd ffb1 	bl	8003a30 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e144      	b.n	8005d66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005adc:	4b1a      	ldr	r3, [pc, #104]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 8005ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1f0      	bne.n	8005aca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f000 80a0 	beq.w	8005c36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005af6:	2300      	movs	r3, #0
 8005af8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005afa:	4b13      	ldr	r3, [pc, #76]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 8005afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10f      	bne.n	8005b26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b06:	2300      	movs	r3, #0
 8005b08:	60bb      	str	r3, [r7, #8]
 8005b0a:	4b0f      	ldr	r3, [pc, #60]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	4a0e      	ldr	r2, [pc, #56]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 8005b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b14:	6413      	str	r3, [r2, #64]	; 0x40
 8005b16:	4b0c      	ldr	r3, [pc, #48]	; (8005b48 <HAL_RCC_OscConfig+0x2ac>)
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b1e:	60bb      	str	r3, [r7, #8]
 8005b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b22:	2301      	movs	r3, #1
 8005b24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b26:	4b0b      	ldr	r3, [pc, #44]	; (8005b54 <HAL_RCC_OscConfig+0x2b8>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d121      	bne.n	8005b76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b32:	4b08      	ldr	r3, [pc, #32]	; (8005b54 <HAL_RCC_OscConfig+0x2b8>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a07      	ldr	r2, [pc, #28]	; (8005b54 <HAL_RCC_OscConfig+0x2b8>)
 8005b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b3e:	f7fd ff77 	bl	8003a30 <HAL_GetTick>
 8005b42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b44:	e011      	b.n	8005b6a <HAL_RCC_OscConfig+0x2ce>
 8005b46:	bf00      	nop
 8005b48:	40023800 	.word	0x40023800
 8005b4c:	42470000 	.word	0x42470000
 8005b50:	42470e80 	.word	0x42470e80
 8005b54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b58:	f7fd ff6a 	bl	8003a30 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d901      	bls.n	8005b6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e0fd      	b.n	8005d66 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b6a:	4b81      	ldr	r3, [pc, #516]	; (8005d70 <HAL_RCC_OscConfig+0x4d4>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d0f0      	beq.n	8005b58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d106      	bne.n	8005b8c <HAL_RCC_OscConfig+0x2f0>
 8005b7e:	4b7d      	ldr	r3, [pc, #500]	; (8005d74 <HAL_RCC_OscConfig+0x4d8>)
 8005b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b82:	4a7c      	ldr	r2, [pc, #496]	; (8005d74 <HAL_RCC_OscConfig+0x4d8>)
 8005b84:	f043 0301 	orr.w	r3, r3, #1
 8005b88:	6713      	str	r3, [r2, #112]	; 0x70
 8005b8a:	e01c      	b.n	8005bc6 <HAL_RCC_OscConfig+0x32a>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	2b05      	cmp	r3, #5
 8005b92:	d10c      	bne.n	8005bae <HAL_RCC_OscConfig+0x312>
 8005b94:	4b77      	ldr	r3, [pc, #476]	; (8005d74 <HAL_RCC_OscConfig+0x4d8>)
 8005b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b98:	4a76      	ldr	r2, [pc, #472]	; (8005d74 <HAL_RCC_OscConfig+0x4d8>)
 8005b9a:	f043 0304 	orr.w	r3, r3, #4
 8005b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8005ba0:	4b74      	ldr	r3, [pc, #464]	; (8005d74 <HAL_RCC_OscConfig+0x4d8>)
 8005ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba4:	4a73      	ldr	r2, [pc, #460]	; (8005d74 <HAL_RCC_OscConfig+0x4d8>)
 8005ba6:	f043 0301 	orr.w	r3, r3, #1
 8005baa:	6713      	str	r3, [r2, #112]	; 0x70
 8005bac:	e00b      	b.n	8005bc6 <HAL_RCC_OscConfig+0x32a>
 8005bae:	4b71      	ldr	r3, [pc, #452]	; (8005d74 <HAL_RCC_OscConfig+0x4d8>)
 8005bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb2:	4a70      	ldr	r2, [pc, #448]	; (8005d74 <HAL_RCC_OscConfig+0x4d8>)
 8005bb4:	f023 0301 	bic.w	r3, r3, #1
 8005bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8005bba:	4b6e      	ldr	r3, [pc, #440]	; (8005d74 <HAL_RCC_OscConfig+0x4d8>)
 8005bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bbe:	4a6d      	ldr	r2, [pc, #436]	; (8005d74 <HAL_RCC_OscConfig+0x4d8>)
 8005bc0:	f023 0304 	bic.w	r3, r3, #4
 8005bc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d015      	beq.n	8005bfa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bce:	f7fd ff2f 	bl	8003a30 <HAL_GetTick>
 8005bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bd4:	e00a      	b.n	8005bec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bd6:	f7fd ff2b 	bl	8003a30 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d901      	bls.n	8005bec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e0bc      	b.n	8005d66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bec:	4b61      	ldr	r3, [pc, #388]	; (8005d74 <HAL_RCC_OscConfig+0x4d8>)
 8005bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0ee      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x33a>
 8005bf8:	e014      	b.n	8005c24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bfa:	f7fd ff19 	bl	8003a30 <HAL_GetTick>
 8005bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c00:	e00a      	b.n	8005c18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c02:	f7fd ff15 	bl	8003a30 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d901      	bls.n	8005c18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e0a6      	b.n	8005d66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c18:	4b56      	ldr	r3, [pc, #344]	; (8005d74 <HAL_RCC_OscConfig+0x4d8>)
 8005c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1ee      	bne.n	8005c02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c24:	7dfb      	ldrb	r3, [r7, #23]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d105      	bne.n	8005c36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c2a:	4b52      	ldr	r3, [pc, #328]	; (8005d74 <HAL_RCC_OscConfig+0x4d8>)
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	4a51      	ldr	r2, [pc, #324]	; (8005d74 <HAL_RCC_OscConfig+0x4d8>)
 8005c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 8092 	beq.w	8005d64 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c40:	4b4c      	ldr	r3, [pc, #304]	; (8005d74 <HAL_RCC_OscConfig+0x4d8>)
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f003 030c 	and.w	r3, r3, #12
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	d05c      	beq.n	8005d06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d141      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c54:	4b48      	ldr	r3, [pc, #288]	; (8005d78 <HAL_RCC_OscConfig+0x4dc>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c5a:	f7fd fee9 	bl	8003a30 <HAL_GetTick>
 8005c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c60:	e008      	b.n	8005c74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c62:	f7fd fee5 	bl	8003a30 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e078      	b.n	8005d66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c74:	4b3f      	ldr	r3, [pc, #252]	; (8005d74 <HAL_RCC_OscConfig+0x4d8>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1f0      	bne.n	8005c62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	69da      	ldr	r2, [r3, #28]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	431a      	orrs	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	019b      	lsls	r3, r3, #6
 8005c90:	431a      	orrs	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c96:	085b      	lsrs	r3, r3, #1
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	041b      	lsls	r3, r3, #16
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca2:	061b      	lsls	r3, r3, #24
 8005ca4:	4933      	ldr	r1, [pc, #204]	; (8005d74 <HAL_RCC_OscConfig+0x4d8>)
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005caa:	4b33      	ldr	r3, [pc, #204]	; (8005d78 <HAL_RCC_OscConfig+0x4dc>)
 8005cac:	2201      	movs	r2, #1
 8005cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cb0:	f7fd febe 	bl	8003a30 <HAL_GetTick>
 8005cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cb6:	e008      	b.n	8005cca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cb8:	f7fd feba 	bl	8003a30 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e04d      	b.n	8005d66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cca:	4b2a      	ldr	r3, [pc, #168]	; (8005d74 <HAL_RCC_OscConfig+0x4d8>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d0f0      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x41c>
 8005cd6:	e045      	b.n	8005d64 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cd8:	4b27      	ldr	r3, [pc, #156]	; (8005d78 <HAL_RCC_OscConfig+0x4dc>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cde:	f7fd fea7 	bl	8003a30 <HAL_GetTick>
 8005ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ce4:	e008      	b.n	8005cf8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ce6:	f7fd fea3 	bl	8003a30 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e036      	b.n	8005d66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cf8:	4b1e      	ldr	r3, [pc, #120]	; (8005d74 <HAL_RCC_OscConfig+0x4d8>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1f0      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x44a>
 8005d04:	e02e      	b.n	8005d64 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d101      	bne.n	8005d12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e029      	b.n	8005d66 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d12:	4b18      	ldr	r3, [pc, #96]	; (8005d74 <HAL_RCC_OscConfig+0x4d8>)
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d11c      	bne.n	8005d60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d115      	bne.n	8005d60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d10d      	bne.n	8005d60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d106      	bne.n	8005d60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d001      	beq.n	8005d64 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e000      	b.n	8005d66 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	40007000 	.word	0x40007000
 8005d74:	40023800 	.word	0x40023800
 8005d78:	42470060 	.word	0x42470060

08005d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e0cc      	b.n	8005f2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d90:	4b68      	ldr	r3, [pc, #416]	; (8005f34 <HAL_RCC_ClockConfig+0x1b8>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 030f 	and.w	r3, r3, #15
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d90c      	bls.n	8005db8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d9e:	4b65      	ldr	r3, [pc, #404]	; (8005f34 <HAL_RCC_ClockConfig+0x1b8>)
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005da6:	4b63      	ldr	r3, [pc, #396]	; (8005f34 <HAL_RCC_ClockConfig+0x1b8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d001      	beq.n	8005db8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e0b8      	b.n	8005f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0302 	and.w	r3, r3, #2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d020      	beq.n	8005e06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d005      	beq.n	8005ddc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005dd0:	4b59      	ldr	r3, [pc, #356]	; (8005f38 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	4a58      	ldr	r2, [pc, #352]	; (8005f38 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005dda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0308 	and.w	r3, r3, #8
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d005      	beq.n	8005df4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005de8:	4b53      	ldr	r3, [pc, #332]	; (8005f38 <HAL_RCC_ClockConfig+0x1bc>)
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	4a52      	ldr	r2, [pc, #328]	; (8005f38 <HAL_RCC_ClockConfig+0x1bc>)
 8005dee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005df2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005df4:	4b50      	ldr	r3, [pc, #320]	; (8005f38 <HAL_RCC_ClockConfig+0x1bc>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	494d      	ldr	r1, [pc, #308]	; (8005f38 <HAL_RCC_ClockConfig+0x1bc>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d044      	beq.n	8005e9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d107      	bne.n	8005e2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e1a:	4b47      	ldr	r3, [pc, #284]	; (8005f38 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d119      	bne.n	8005e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e07f      	b.n	8005f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d003      	beq.n	8005e3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e36:	2b03      	cmp	r3, #3
 8005e38:	d107      	bne.n	8005e4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e3a:	4b3f      	ldr	r3, [pc, #252]	; (8005f38 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d109      	bne.n	8005e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e06f      	b.n	8005f2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e4a:	4b3b      	ldr	r3, [pc, #236]	; (8005f38 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e067      	b.n	8005f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e5a:	4b37      	ldr	r3, [pc, #220]	; (8005f38 <HAL_RCC_ClockConfig+0x1bc>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f023 0203 	bic.w	r2, r3, #3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	4934      	ldr	r1, [pc, #208]	; (8005f38 <HAL_RCC_ClockConfig+0x1bc>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e6c:	f7fd fde0 	bl	8003a30 <HAL_GetTick>
 8005e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e72:	e00a      	b.n	8005e8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e74:	f7fd fddc 	bl	8003a30 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e04f      	b.n	8005f2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e8a:	4b2b      	ldr	r3, [pc, #172]	; (8005f38 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 020c 	and.w	r2, r3, #12
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d1eb      	bne.n	8005e74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e9c:	4b25      	ldr	r3, [pc, #148]	; (8005f34 <HAL_RCC_ClockConfig+0x1b8>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 030f 	and.w	r3, r3, #15
 8005ea4:	683a      	ldr	r2, [r7, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d20c      	bcs.n	8005ec4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eaa:	4b22      	ldr	r3, [pc, #136]	; (8005f34 <HAL_RCC_ClockConfig+0x1b8>)
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eb2:	4b20      	ldr	r3, [pc, #128]	; (8005f34 <HAL_RCC_ClockConfig+0x1b8>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 030f 	and.w	r3, r3, #15
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d001      	beq.n	8005ec4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e032      	b.n	8005f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d008      	beq.n	8005ee2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ed0:	4b19      	ldr	r3, [pc, #100]	; (8005f38 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	4916      	ldr	r1, [pc, #88]	; (8005f38 <HAL_RCC_ClockConfig+0x1bc>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0308 	and.w	r3, r3, #8
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d009      	beq.n	8005f02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005eee:	4b12      	ldr	r3, [pc, #72]	; (8005f38 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	490e      	ldr	r1, [pc, #56]	; (8005f38 <HAL_RCC_ClockConfig+0x1bc>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f02:	f000 f821 	bl	8005f48 <HAL_RCC_GetSysClockFreq>
 8005f06:	4602      	mov	r2, r0
 8005f08:	4b0b      	ldr	r3, [pc, #44]	; (8005f38 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	091b      	lsrs	r3, r3, #4
 8005f0e:	f003 030f 	and.w	r3, r3, #15
 8005f12:	490a      	ldr	r1, [pc, #40]	; (8005f3c <HAL_RCC_ClockConfig+0x1c0>)
 8005f14:	5ccb      	ldrb	r3, [r1, r3]
 8005f16:	fa22 f303 	lsr.w	r3, r2, r3
 8005f1a:	4a09      	ldr	r2, [pc, #36]	; (8005f40 <HAL_RCC_ClockConfig+0x1c4>)
 8005f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f1e:	4b09      	ldr	r3, [pc, #36]	; (8005f44 <HAL_RCC_ClockConfig+0x1c8>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fd fd40 	bl	80039a8 <HAL_InitTick>

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	40023c00 	.word	0x40023c00
 8005f38:	40023800 	.word	0x40023800
 8005f3c:	080093f0 	.word	0x080093f0
 8005f40:	20000128 	.word	0x20000128
 8005f44:	2000012c 	.word	0x2000012c

08005f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005f4c:	b084      	sub	sp, #16
 8005f4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	607b      	str	r3, [r7, #4]
 8005f54:	2300      	movs	r3, #0
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	2300      	movs	r3, #0
 8005f5a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f60:	4b67      	ldr	r3, [pc, #412]	; (8006100 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f003 030c 	and.w	r3, r3, #12
 8005f68:	2b08      	cmp	r3, #8
 8005f6a:	d00d      	beq.n	8005f88 <HAL_RCC_GetSysClockFreq+0x40>
 8005f6c:	2b08      	cmp	r3, #8
 8005f6e:	f200 80bd 	bhi.w	80060ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <HAL_RCC_GetSysClockFreq+0x34>
 8005f76:	2b04      	cmp	r3, #4
 8005f78:	d003      	beq.n	8005f82 <HAL_RCC_GetSysClockFreq+0x3a>
 8005f7a:	e0b7      	b.n	80060ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f7c:	4b61      	ldr	r3, [pc, #388]	; (8006104 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005f7e:	60bb      	str	r3, [r7, #8]
       break;
 8005f80:	e0b7      	b.n	80060f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f82:	4b60      	ldr	r3, [pc, #384]	; (8006104 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005f84:	60bb      	str	r3, [r7, #8]
      break;
 8005f86:	e0b4      	b.n	80060f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f88:	4b5d      	ldr	r3, [pc, #372]	; (8006100 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f90:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f92:	4b5b      	ldr	r3, [pc, #364]	; (8006100 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d04d      	beq.n	800603a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f9e:	4b58      	ldr	r3, [pc, #352]	; (8006100 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	099b      	lsrs	r3, r3, #6
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	f04f 0300 	mov.w	r3, #0
 8005faa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005fae:	f04f 0100 	mov.w	r1, #0
 8005fb2:	ea02 0800 	and.w	r8, r2, r0
 8005fb6:	ea03 0901 	and.w	r9, r3, r1
 8005fba:	4640      	mov	r0, r8
 8005fbc:	4649      	mov	r1, r9
 8005fbe:	f04f 0200 	mov.w	r2, #0
 8005fc2:	f04f 0300 	mov.w	r3, #0
 8005fc6:	014b      	lsls	r3, r1, #5
 8005fc8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005fcc:	0142      	lsls	r2, r0, #5
 8005fce:	4610      	mov	r0, r2
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	ebb0 0008 	subs.w	r0, r0, r8
 8005fd6:	eb61 0109 	sbc.w	r1, r1, r9
 8005fda:	f04f 0200 	mov.w	r2, #0
 8005fde:	f04f 0300 	mov.w	r3, #0
 8005fe2:	018b      	lsls	r3, r1, #6
 8005fe4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005fe8:	0182      	lsls	r2, r0, #6
 8005fea:	1a12      	subs	r2, r2, r0
 8005fec:	eb63 0301 	sbc.w	r3, r3, r1
 8005ff0:	f04f 0000 	mov.w	r0, #0
 8005ff4:	f04f 0100 	mov.w	r1, #0
 8005ff8:	00d9      	lsls	r1, r3, #3
 8005ffa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ffe:	00d0      	lsls	r0, r2, #3
 8006000:	4602      	mov	r2, r0
 8006002:	460b      	mov	r3, r1
 8006004:	eb12 0208 	adds.w	r2, r2, r8
 8006008:	eb43 0309 	adc.w	r3, r3, r9
 800600c:	f04f 0000 	mov.w	r0, #0
 8006010:	f04f 0100 	mov.w	r1, #0
 8006014:	0299      	lsls	r1, r3, #10
 8006016:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800601a:	0290      	lsls	r0, r2, #10
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	4610      	mov	r0, r2
 8006022:	4619      	mov	r1, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	461a      	mov	r2, r3
 8006028:	f04f 0300 	mov.w	r3, #0
 800602c:	f7fa fdce 	bl	8000bcc <__aeabi_uldivmod>
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4613      	mov	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	e04a      	b.n	80060d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800603a:	4b31      	ldr	r3, [pc, #196]	; (8006100 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	099b      	lsrs	r3, r3, #6
 8006040:	461a      	mov	r2, r3
 8006042:	f04f 0300 	mov.w	r3, #0
 8006046:	f240 10ff 	movw	r0, #511	; 0x1ff
 800604a:	f04f 0100 	mov.w	r1, #0
 800604e:	ea02 0400 	and.w	r4, r2, r0
 8006052:	ea03 0501 	and.w	r5, r3, r1
 8006056:	4620      	mov	r0, r4
 8006058:	4629      	mov	r1, r5
 800605a:	f04f 0200 	mov.w	r2, #0
 800605e:	f04f 0300 	mov.w	r3, #0
 8006062:	014b      	lsls	r3, r1, #5
 8006064:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006068:	0142      	lsls	r2, r0, #5
 800606a:	4610      	mov	r0, r2
 800606c:	4619      	mov	r1, r3
 800606e:	1b00      	subs	r0, r0, r4
 8006070:	eb61 0105 	sbc.w	r1, r1, r5
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	f04f 0300 	mov.w	r3, #0
 800607c:	018b      	lsls	r3, r1, #6
 800607e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006082:	0182      	lsls	r2, r0, #6
 8006084:	1a12      	subs	r2, r2, r0
 8006086:	eb63 0301 	sbc.w	r3, r3, r1
 800608a:	f04f 0000 	mov.w	r0, #0
 800608e:	f04f 0100 	mov.w	r1, #0
 8006092:	00d9      	lsls	r1, r3, #3
 8006094:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006098:	00d0      	lsls	r0, r2, #3
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	1912      	adds	r2, r2, r4
 80060a0:	eb45 0303 	adc.w	r3, r5, r3
 80060a4:	f04f 0000 	mov.w	r0, #0
 80060a8:	f04f 0100 	mov.w	r1, #0
 80060ac:	0299      	lsls	r1, r3, #10
 80060ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80060b2:	0290      	lsls	r0, r2, #10
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4610      	mov	r0, r2
 80060ba:	4619      	mov	r1, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	461a      	mov	r2, r3
 80060c0:	f04f 0300 	mov.w	r3, #0
 80060c4:	f7fa fd82 	bl	8000bcc <__aeabi_uldivmod>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	4613      	mov	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060d0:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	0c1b      	lsrs	r3, r3, #16
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	3301      	adds	r3, #1
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e8:	60bb      	str	r3, [r7, #8]
      break;
 80060ea:	e002      	b.n	80060f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060ec:	4b05      	ldr	r3, [pc, #20]	; (8006104 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80060ee:	60bb      	str	r3, [r7, #8]
      break;
 80060f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060f2:	68bb      	ldr	r3, [r7, #8]
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80060fe:	bf00      	nop
 8006100:	40023800 	.word	0x40023800
 8006104:	00f42400 	.word	0x00f42400

08006108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006108:	b480      	push	{r7}
 800610a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800610c:	4b03      	ldr	r3, [pc, #12]	; (800611c <HAL_RCC_GetHCLKFreq+0x14>)
 800610e:	681b      	ldr	r3, [r3, #0]
}
 8006110:	4618      	mov	r0, r3
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	20000128 	.word	0x20000128

08006120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006124:	f7ff fff0 	bl	8006108 <HAL_RCC_GetHCLKFreq>
 8006128:	4602      	mov	r2, r0
 800612a:	4b05      	ldr	r3, [pc, #20]	; (8006140 <HAL_RCC_GetPCLK1Freq+0x20>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	0a9b      	lsrs	r3, r3, #10
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	4903      	ldr	r1, [pc, #12]	; (8006144 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006136:	5ccb      	ldrb	r3, [r1, r3]
 8006138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800613c:	4618      	mov	r0, r3
 800613e:	bd80      	pop	{r7, pc}
 8006140:	40023800 	.word	0x40023800
 8006144:	08009400 	.word	0x08009400

08006148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800614c:	f7ff ffdc 	bl	8006108 <HAL_RCC_GetHCLKFreq>
 8006150:	4602      	mov	r2, r0
 8006152:	4b05      	ldr	r3, [pc, #20]	; (8006168 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	0b5b      	lsrs	r3, r3, #13
 8006158:	f003 0307 	and.w	r3, r3, #7
 800615c:	4903      	ldr	r1, [pc, #12]	; (800616c <HAL_RCC_GetPCLK2Freq+0x24>)
 800615e:	5ccb      	ldrb	r3, [r1, r3]
 8006160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006164:	4618      	mov	r0, r3
 8006166:	bd80      	pop	{r7, pc}
 8006168:	40023800 	.word	0x40023800
 800616c:	08009400 	.word	0x08009400

08006170 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e056      	b.n	8006230 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d106      	bne.n	80061a2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7fc fec7 	bl	8002f30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2202      	movs	r2, #2
 80061a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061b8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	431a      	orrs	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	431a      	orrs	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	431a      	orrs	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061de:	431a      	orrs	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	69db      	ldr	r3, [r3, #28]
 80061e4:	431a      	orrs	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	ea42 0103 	orr.w	r1, r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	0c1b      	lsrs	r3, r3, #16
 8006200:	f003 0104 	and.w	r1, r3, #4
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	69da      	ldr	r2, [r3, #28]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800621e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b088      	sub	sp, #32
 800623c:	af02      	add	r7, sp, #8
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	603b      	str	r3, [r7, #0]
 8006244:	4613      	mov	r3, r2
 8006246:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006248:	2300      	movs	r3, #0
 800624a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006254:	d112      	bne.n	800627c <HAL_SPI_Receive+0x44>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10e      	bne.n	800627c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2204      	movs	r2, #4
 8006262:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006266:	88fa      	ldrh	r2, [r7, #6]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	4613      	mov	r3, r2
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	68b9      	ldr	r1, [r7, #8]
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 f8e9 	bl	800644a <HAL_SPI_TransmitReceive>
 8006278:	4603      	mov	r3, r0
 800627a:	e0e2      	b.n	8006442 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006282:	2b01      	cmp	r3, #1
 8006284:	d101      	bne.n	800628a <HAL_SPI_Receive+0x52>
 8006286:	2302      	movs	r3, #2
 8006288:	e0db      	b.n	8006442 <HAL_SPI_Receive+0x20a>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006292:	f7fd fbcd 	bl	8003a30 <HAL_GetTick>
 8006296:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d002      	beq.n	80062aa <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80062a4:	2302      	movs	r3, #2
 80062a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062a8:	e0c2      	b.n	8006430 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <HAL_SPI_Receive+0x7e>
 80062b0:	88fb      	ldrh	r3, [r7, #6]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d102      	bne.n	80062bc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062ba:	e0b9      	b.n	8006430 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2204      	movs	r2, #4
 80062c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	88fa      	ldrh	r2, [r7, #6]
 80062d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	88fa      	ldrh	r2, [r7, #6]
 80062da:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006302:	d107      	bne.n	8006314 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006312:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631e:	2b40      	cmp	r3, #64	; 0x40
 8006320:	d007      	beq.n	8006332 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006330:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d162      	bne.n	8006400 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800633a:	e02e      	b.n	800639a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b01      	cmp	r3, #1
 8006348:	d115      	bne.n	8006376 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f103 020c 	add.w	r2, r3, #12
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006356:	7812      	ldrb	r2, [r2, #0]
 8006358:	b2d2      	uxtb	r2, r2
 800635a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800636a:	b29b      	uxth	r3, r3
 800636c:	3b01      	subs	r3, #1
 800636e:	b29a      	uxth	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006374:	e011      	b.n	800639a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006376:	f7fd fb5b 	bl	8003a30 <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	683a      	ldr	r2, [r7, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d803      	bhi.n	800638e <HAL_SPI_Receive+0x156>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800638c:	d102      	bne.n	8006394 <HAL_SPI_Receive+0x15c>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d102      	bne.n	800639a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006398:	e04a      	b.n	8006430 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800639e:	b29b      	uxth	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1cb      	bne.n	800633c <HAL_SPI_Receive+0x104>
 80063a4:	e031      	b.n	800640a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d113      	bne.n	80063dc <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68da      	ldr	r2, [r3, #12]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063be:	b292      	uxth	r2, r2
 80063c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c6:	1c9a      	adds	r2, r3, #2
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	3b01      	subs	r3, #1
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063da:	e011      	b.n	8006400 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063dc:	f7fd fb28 	bl	8003a30 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d803      	bhi.n	80063f4 <HAL_SPI_Receive+0x1bc>
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063f2:	d102      	bne.n	80063fa <HAL_SPI_Receive+0x1c2>
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d102      	bne.n	8006400 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80063fe:	e017      	b.n	8006430 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006404:	b29b      	uxth	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1cd      	bne.n	80063a6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 fa27 	bl	8006862 <SPI_EndRxTransaction>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d002      	beq.n	8006420 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2220      	movs	r2, #32
 800641e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006424:	2b00      	cmp	r3, #0
 8006426:	d002      	beq.n	800642e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	75fb      	strb	r3, [r7, #23]
 800642c:	e000      	b.n	8006430 <HAL_SPI_Receive+0x1f8>
  }

error :
 800642e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006440:	7dfb      	ldrb	r3, [r7, #23]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b08c      	sub	sp, #48	; 0x30
 800644e:	af00      	add	r7, sp, #0
 8006450:	60f8      	str	r0, [r7, #12]
 8006452:	60b9      	str	r1, [r7, #8]
 8006454:	607a      	str	r2, [r7, #4]
 8006456:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006458:	2301      	movs	r3, #1
 800645a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800645c:	2300      	movs	r3, #0
 800645e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006468:	2b01      	cmp	r3, #1
 800646a:	d101      	bne.n	8006470 <HAL_SPI_TransmitReceive+0x26>
 800646c:	2302      	movs	r3, #2
 800646e:	e18a      	b.n	8006786 <HAL_SPI_TransmitReceive+0x33c>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006478:	f7fd fada 	bl	8003a30 <HAL_GetTick>
 800647c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006484:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800648e:	887b      	ldrh	r3, [r7, #2]
 8006490:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006492:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006496:	2b01      	cmp	r3, #1
 8006498:	d00f      	beq.n	80064ba <HAL_SPI_TransmitReceive+0x70>
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064a0:	d107      	bne.n	80064b2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d103      	bne.n	80064b2 <HAL_SPI_TransmitReceive+0x68>
 80064aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064ae:	2b04      	cmp	r3, #4
 80064b0:	d003      	beq.n	80064ba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80064b2:	2302      	movs	r3, #2
 80064b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80064b8:	e15b      	b.n	8006772 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d005      	beq.n	80064cc <HAL_SPI_TransmitReceive+0x82>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <HAL_SPI_TransmitReceive+0x82>
 80064c6:	887b      	ldrh	r3, [r7, #2]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d103      	bne.n	80064d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80064d2:	e14e      	b.n	8006772 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d003      	beq.n	80064e8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2205      	movs	r2, #5
 80064e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	887a      	ldrh	r2, [r7, #2]
 80064f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	887a      	ldrh	r2, [r7, #2]
 80064fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	887a      	ldrh	r2, [r7, #2]
 800650a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	887a      	ldrh	r2, [r7, #2]
 8006510:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006528:	2b40      	cmp	r3, #64	; 0x40
 800652a:	d007      	beq.n	800653c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800653a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006544:	d178      	bne.n	8006638 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <HAL_SPI_TransmitReceive+0x10a>
 800654e:	8b7b      	ldrh	r3, [r7, #26]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d166      	bne.n	8006622 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006558:	881a      	ldrh	r2, [r3, #0]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006564:	1c9a      	adds	r2, r3, #2
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800656e:	b29b      	uxth	r3, r3
 8006570:	3b01      	subs	r3, #1
 8006572:	b29a      	uxth	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006578:	e053      	b.n	8006622 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b02      	cmp	r3, #2
 8006586:	d11b      	bne.n	80065c0 <HAL_SPI_TransmitReceive+0x176>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800658c:	b29b      	uxth	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d016      	beq.n	80065c0 <HAL_SPI_TransmitReceive+0x176>
 8006592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006594:	2b01      	cmp	r3, #1
 8006596:	d113      	bne.n	80065c0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659c:	881a      	ldrh	r2, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a8:	1c9a      	adds	r2, r3, #2
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	3b01      	subs	r3, #1
 80065b6:	b29a      	uxth	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d119      	bne.n	8006602 <HAL_SPI_TransmitReceive+0x1b8>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d014      	beq.n	8006602 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e2:	b292      	uxth	r2, r2
 80065e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ea:	1c9a      	adds	r2, r3, #2
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065fe:	2301      	movs	r3, #1
 8006600:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006602:	f7fd fa15 	bl	8003a30 <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800660e:	429a      	cmp	r2, r3
 8006610:	d807      	bhi.n	8006622 <HAL_SPI_TransmitReceive+0x1d8>
 8006612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006618:	d003      	beq.n	8006622 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006620:	e0a7      	b.n	8006772 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006626:	b29b      	uxth	r3, r3
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1a6      	bne.n	800657a <HAL_SPI_TransmitReceive+0x130>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006630:	b29b      	uxth	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1a1      	bne.n	800657a <HAL_SPI_TransmitReceive+0x130>
 8006636:	e07c      	b.n	8006732 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <HAL_SPI_TransmitReceive+0x1fc>
 8006640:	8b7b      	ldrh	r3, [r7, #26]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d16b      	bne.n	800671e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	330c      	adds	r3, #12
 8006650:	7812      	ldrb	r2, [r2, #0]
 8006652:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006662:	b29b      	uxth	r3, r3
 8006664:	3b01      	subs	r3, #1
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800666c:	e057      	b.n	800671e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	2b02      	cmp	r3, #2
 800667a:	d11c      	bne.n	80066b6 <HAL_SPI_TransmitReceive+0x26c>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d017      	beq.n	80066b6 <HAL_SPI_TransmitReceive+0x26c>
 8006686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006688:	2b01      	cmp	r3, #1
 800668a:	d114      	bne.n	80066b6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	330c      	adds	r3, #12
 8006696:	7812      	ldrb	r2, [r2, #0]
 8006698:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669e:	1c5a      	adds	r2, r3, #1
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	3b01      	subs	r3, #1
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d119      	bne.n	80066f8 <HAL_SPI_TransmitReceive+0x2ae>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d014      	beq.n	80066f8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68da      	ldr	r2, [r3, #12]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d8:	b2d2      	uxtb	r2, r2
 80066da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	3b01      	subs	r3, #1
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066f4:	2301      	movs	r3, #1
 80066f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80066f8:	f7fd f99a 	bl	8003a30 <HAL_GetTick>
 80066fc:	4602      	mov	r2, r0
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006704:	429a      	cmp	r2, r3
 8006706:	d803      	bhi.n	8006710 <HAL_SPI_TransmitReceive+0x2c6>
 8006708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800670e:	d102      	bne.n	8006716 <HAL_SPI_TransmitReceive+0x2cc>
 8006710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006712:	2b00      	cmp	r3, #0
 8006714:	d103      	bne.n	800671e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800671c:	e029      	b.n	8006772 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006722:	b29b      	uxth	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1a2      	bne.n	800666e <HAL_SPI_TransmitReceive+0x224>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800672c:	b29b      	uxth	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d19d      	bne.n	800666e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006734:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f000 f8f8 	bl	800692c <SPI_EndRxTxTransaction>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d006      	beq.n	8006750 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2220      	movs	r2, #32
 800674c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800674e:	e010      	b.n	8006772 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10b      	bne.n	8006770 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006758:	2300      	movs	r3, #0
 800675a:	617b      	str	r3, [r7, #20]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	617b      	str	r3, [r7, #20]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	e000      	b.n	8006772 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006770:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006782:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006786:	4618      	mov	r0, r3
 8006788:	3730      	adds	r7, #48	; 0x30
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b084      	sub	sp, #16
 8006792:	af00      	add	r7, sp, #0
 8006794:	60f8      	str	r0, [r7, #12]
 8006796:	60b9      	str	r1, [r7, #8]
 8006798:	603b      	str	r3, [r7, #0]
 800679a:	4613      	mov	r3, r2
 800679c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800679e:	e04c      	b.n	800683a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067a6:	d048      	beq.n	800683a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80067a8:	f7fd f942 	bl	8003a30 <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	683a      	ldr	r2, [r7, #0]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d902      	bls.n	80067be <SPI_WaitFlagStateUntilTimeout+0x30>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d13d      	bne.n	800683a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067d6:	d111      	bne.n	80067fc <SPI_WaitFlagStateUntilTimeout+0x6e>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067e0:	d004      	beq.n	80067ec <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ea:	d107      	bne.n	80067fc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006804:	d10f      	bne.n	8006826 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006824:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e00f      	b.n	800685a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	689a      	ldr	r2, [r3, #8]
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	4013      	ands	r3, r2
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	429a      	cmp	r2, r3
 8006848:	bf0c      	ite	eq
 800684a:	2301      	moveq	r3, #1
 800684c:	2300      	movne	r3, #0
 800684e:	b2db      	uxtb	r3, r3
 8006850:	461a      	mov	r2, r3
 8006852:	79fb      	ldrb	r3, [r7, #7]
 8006854:	429a      	cmp	r2, r3
 8006856:	d1a3      	bne.n	80067a0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b086      	sub	sp, #24
 8006866:	af02      	add	r7, sp, #8
 8006868:	60f8      	str	r0, [r7, #12]
 800686a:	60b9      	str	r1, [r7, #8]
 800686c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006876:	d111      	bne.n	800689c <SPI_EndRxTransaction+0x3a>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006880:	d004      	beq.n	800688c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800688a:	d107      	bne.n	800689c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800689a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068a4:	d12a      	bne.n	80068fc <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ae:	d012      	beq.n	80068d6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2200      	movs	r2, #0
 80068b8:	2180      	movs	r1, #128	; 0x80
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f7ff ff67 	bl	800678e <SPI_WaitFlagStateUntilTimeout>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d02d      	beq.n	8006922 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ca:	f043 0220 	orr.w	r2, r3, #32
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e026      	b.n	8006924 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2200      	movs	r2, #0
 80068de:	2101      	movs	r1, #1
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f7ff ff54 	bl	800678e <SPI_WaitFlagStateUntilTimeout>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d01a      	beq.n	8006922 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f0:	f043 0220 	orr.w	r2, r3, #32
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e013      	b.n	8006924 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	2200      	movs	r2, #0
 8006904:	2101      	movs	r1, #1
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f7ff ff41 	bl	800678e <SPI_WaitFlagStateUntilTimeout>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d007      	beq.n	8006922 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006916:	f043 0220 	orr.w	r2, r3, #32
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e000      	b.n	8006924 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b088      	sub	sp, #32
 8006930:	af02      	add	r7, sp, #8
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006938:	4b1b      	ldr	r3, [pc, #108]	; (80069a8 <SPI_EndRxTxTransaction+0x7c>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a1b      	ldr	r2, [pc, #108]	; (80069ac <SPI_EndRxTxTransaction+0x80>)
 800693e:	fba2 2303 	umull	r2, r3, r2, r3
 8006942:	0d5b      	lsrs	r3, r3, #21
 8006944:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006948:	fb02 f303 	mul.w	r3, r2, r3
 800694c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006956:	d112      	bne.n	800697e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2200      	movs	r2, #0
 8006960:	2180      	movs	r1, #128	; 0x80
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f7ff ff13 	bl	800678e <SPI_WaitFlagStateUntilTimeout>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d016      	beq.n	800699c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006972:	f043 0220 	orr.w	r2, r3, #32
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e00f      	b.n	800699e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00a      	beq.n	800699a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	3b01      	subs	r3, #1
 8006988:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006994:	2b80      	cmp	r3, #128	; 0x80
 8006996:	d0f2      	beq.n	800697e <SPI_EndRxTxTransaction+0x52>
 8006998:	e000      	b.n	800699c <SPI_EndRxTxTransaction+0x70>
        break;
 800699a:	bf00      	nop
  }

  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3718      	adds	r7, #24
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20000128 	.word	0x20000128
 80069ac:	165e9f81 	.word	0x165e9f81

080069b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e01d      	b.n	80069fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d106      	bne.n	80069dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7fc fdae 	bl	8003538 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	3304      	adds	r3, #4
 80069ec:	4619      	mov	r1, r3
 80069ee:	4610      	mov	r0, r2
 80069f0:	f000 fa82 	bl	8006ef8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3708      	adds	r7, #8
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b085      	sub	sp, #20
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2202      	movs	r2, #2
 8006a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f003 0307 	and.w	r3, r3, #7
 8006a20:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2b06      	cmp	r3, #6
 8006a26:	d007      	beq.n	8006a38 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f042 0201 	orr.w	r2, r2, #1
 8006a36:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b082      	sub	sp, #8
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d101      	bne.n	8006a60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e01d      	b.n	8006a9c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d106      	bne.n	8006a7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f815 	bl	8006aa4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	3304      	adds	r3, #4
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	4610      	mov	r0, r2
 8006a8e:	f000 fa33 	bl	8006ef8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	6839      	ldr	r1, [r7, #0]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f000 fcfe 	bl	80074cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a15      	ldr	r2, [pc, #84]	; (8006b2c <HAL_TIM_PWM_Start+0x74>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d004      	beq.n	8006ae4 <HAL_TIM_PWM_Start+0x2c>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a14      	ldr	r2, [pc, #80]	; (8006b30 <HAL_TIM_PWM_Start+0x78>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d101      	bne.n	8006ae8 <HAL_TIM_PWM_Start+0x30>
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e000      	b.n	8006aea <HAL_TIM_PWM_Start+0x32>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d007      	beq.n	8006afe <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006afc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f003 0307 	and.w	r3, r3, #7
 8006b08:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2b06      	cmp	r3, #6
 8006b0e:	d007      	beq.n	8006b20 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f042 0201 	orr.w	r2, r2, #1
 8006b1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	40010000 	.word	0x40010000
 8006b30:	40010400 	.word	0x40010400

08006b34 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2200      	movs	r2, #0
 8006b44:	6839      	ldr	r1, [r7, #0]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fcc0 	bl	80074cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a22      	ldr	r2, [pc, #136]	; (8006bdc <HAL_TIM_PWM_Stop+0xa8>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d004      	beq.n	8006b60 <HAL_TIM_PWM_Stop+0x2c>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a21      	ldr	r2, [pc, #132]	; (8006be0 <HAL_TIM_PWM_Stop+0xac>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d101      	bne.n	8006b64 <HAL_TIM_PWM_Stop+0x30>
 8006b60:	2301      	movs	r3, #1
 8006b62:	e000      	b.n	8006b66 <HAL_TIM_PWM_Stop+0x32>
 8006b64:	2300      	movs	r3, #0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d017      	beq.n	8006b9a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6a1a      	ldr	r2, [r3, #32]
 8006b70:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b74:	4013      	ands	r3, r2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10f      	bne.n	8006b9a <HAL_TIM_PWM_Stop+0x66>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6a1a      	ldr	r2, [r3, #32]
 8006b80:	f240 4344 	movw	r3, #1092	; 0x444
 8006b84:	4013      	ands	r3, r2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d107      	bne.n	8006b9a <HAL_TIM_PWM_Stop+0x66>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6a1a      	ldr	r2, [r3, #32]
 8006ba0:	f241 1311 	movw	r3, #4369	; 0x1111
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10f      	bne.n	8006bca <HAL_TIM_PWM_Stop+0x96>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	6a1a      	ldr	r2, [r3, #32]
 8006bb0:	f240 4344 	movw	r3, #1092	; 0x444
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d107      	bne.n	8006bca <HAL_TIM_PWM_Stop+0x96>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 0201 	bic.w	r2, r2, #1
 8006bc8:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	40010000 	.word	0x40010000
 8006be0:	40010400 	.word	0x40010400

08006be4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d101      	bne.n	8006bfe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	e0b4      	b.n	8006d68 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2202      	movs	r2, #2
 8006c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2b0c      	cmp	r3, #12
 8006c12:	f200 809f 	bhi.w	8006d54 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006c16:	a201      	add	r2, pc, #4	; (adr r2, 8006c1c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1c:	08006c51 	.word	0x08006c51
 8006c20:	08006d55 	.word	0x08006d55
 8006c24:	08006d55 	.word	0x08006d55
 8006c28:	08006d55 	.word	0x08006d55
 8006c2c:	08006c91 	.word	0x08006c91
 8006c30:	08006d55 	.word	0x08006d55
 8006c34:	08006d55 	.word	0x08006d55
 8006c38:	08006d55 	.word	0x08006d55
 8006c3c:	08006cd3 	.word	0x08006cd3
 8006c40:	08006d55 	.word	0x08006d55
 8006c44:	08006d55 	.word	0x08006d55
 8006c48:	08006d55 	.word	0x08006d55
 8006c4c:	08006d13 	.word	0x08006d13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68b9      	ldr	r1, [r7, #8]
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 f9ee 	bl	8007038 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	699a      	ldr	r2, [r3, #24]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f042 0208 	orr.w	r2, r2, #8
 8006c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	699a      	ldr	r2, [r3, #24]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f022 0204 	bic.w	r2, r2, #4
 8006c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6999      	ldr	r1, [r3, #24]
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	691a      	ldr	r2, [r3, #16]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	619a      	str	r2, [r3, #24]
      break;
 8006c8e:	e062      	b.n	8006d56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68b9      	ldr	r1, [r7, #8]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 fa3e 	bl	8007118 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	699a      	ldr	r2, [r3, #24]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	699a      	ldr	r2, [r3, #24]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	6999      	ldr	r1, [r3, #24]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	021a      	lsls	r2, r3, #8
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	619a      	str	r2, [r3, #24]
      break;
 8006cd0:	e041      	b.n	8006d56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68b9      	ldr	r1, [r7, #8]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f000 fa93 	bl	8007204 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	69da      	ldr	r2, [r3, #28]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f042 0208 	orr.w	r2, r2, #8
 8006cec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	69da      	ldr	r2, [r3, #28]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0204 	bic.w	r2, r2, #4
 8006cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	69d9      	ldr	r1, [r3, #28]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	691a      	ldr	r2, [r3, #16]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	61da      	str	r2, [r3, #28]
      break;
 8006d10:	e021      	b.n	8006d56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	68b9      	ldr	r1, [r7, #8]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 fae7 	bl	80072ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	69da      	ldr	r2, [r3, #28]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	69da      	ldr	r2, [r3, #28]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	69d9      	ldr	r1, [r3, #28]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	021a      	lsls	r2, r3, #8
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	61da      	str	r2, [r3, #28]
      break;
 8006d52:	e000      	b.n	8006d56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006d54:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d101      	bne.n	8006d88 <HAL_TIM_ConfigClockSource+0x18>
 8006d84:	2302      	movs	r3, #2
 8006d86:	e0b3      	b.n	8006ef0 <HAL_TIM_ConfigClockSource+0x180>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2202      	movs	r2, #2
 8006d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006da6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dc0:	d03e      	beq.n	8006e40 <HAL_TIM_ConfigClockSource+0xd0>
 8006dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dc6:	f200 8087 	bhi.w	8006ed8 <HAL_TIM_ConfigClockSource+0x168>
 8006dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dce:	f000 8085 	beq.w	8006edc <HAL_TIM_ConfigClockSource+0x16c>
 8006dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dd6:	d87f      	bhi.n	8006ed8 <HAL_TIM_ConfigClockSource+0x168>
 8006dd8:	2b70      	cmp	r3, #112	; 0x70
 8006dda:	d01a      	beq.n	8006e12 <HAL_TIM_ConfigClockSource+0xa2>
 8006ddc:	2b70      	cmp	r3, #112	; 0x70
 8006dde:	d87b      	bhi.n	8006ed8 <HAL_TIM_ConfigClockSource+0x168>
 8006de0:	2b60      	cmp	r3, #96	; 0x60
 8006de2:	d050      	beq.n	8006e86 <HAL_TIM_ConfigClockSource+0x116>
 8006de4:	2b60      	cmp	r3, #96	; 0x60
 8006de6:	d877      	bhi.n	8006ed8 <HAL_TIM_ConfigClockSource+0x168>
 8006de8:	2b50      	cmp	r3, #80	; 0x50
 8006dea:	d03c      	beq.n	8006e66 <HAL_TIM_ConfigClockSource+0xf6>
 8006dec:	2b50      	cmp	r3, #80	; 0x50
 8006dee:	d873      	bhi.n	8006ed8 <HAL_TIM_ConfigClockSource+0x168>
 8006df0:	2b40      	cmp	r3, #64	; 0x40
 8006df2:	d058      	beq.n	8006ea6 <HAL_TIM_ConfigClockSource+0x136>
 8006df4:	2b40      	cmp	r3, #64	; 0x40
 8006df6:	d86f      	bhi.n	8006ed8 <HAL_TIM_ConfigClockSource+0x168>
 8006df8:	2b30      	cmp	r3, #48	; 0x30
 8006dfa:	d064      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x156>
 8006dfc:	2b30      	cmp	r3, #48	; 0x30
 8006dfe:	d86b      	bhi.n	8006ed8 <HAL_TIM_ConfigClockSource+0x168>
 8006e00:	2b20      	cmp	r3, #32
 8006e02:	d060      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x156>
 8006e04:	2b20      	cmp	r3, #32
 8006e06:	d867      	bhi.n	8006ed8 <HAL_TIM_ConfigClockSource+0x168>
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d05c      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x156>
 8006e0c:	2b10      	cmp	r3, #16
 8006e0e:	d05a      	beq.n	8006ec6 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006e10:	e062      	b.n	8006ed8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6818      	ldr	r0, [r3, #0]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	6899      	ldr	r1, [r3, #8]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	f000 fb33 	bl	800748c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e34:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	609a      	str	r2, [r3, #8]
      break;
 8006e3e:	e04e      	b.n	8006ede <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6818      	ldr	r0, [r3, #0]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	6899      	ldr	r1, [r3, #8]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f000 fb1c 	bl	800748c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689a      	ldr	r2, [r3, #8]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e62:	609a      	str	r2, [r3, #8]
      break;
 8006e64:	e03b      	b.n	8006ede <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6818      	ldr	r0, [r3, #0]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	6859      	ldr	r1, [r3, #4]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	461a      	mov	r2, r3
 8006e74:	f000 fa90 	bl	8007398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2150      	movs	r1, #80	; 0x50
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 fae9 	bl	8007456 <TIM_ITRx_SetConfig>
      break;
 8006e84:	e02b      	b.n	8006ede <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6818      	ldr	r0, [r3, #0]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	6859      	ldr	r1, [r3, #4]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	461a      	mov	r2, r3
 8006e94:	f000 faaf 	bl	80073f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2160      	movs	r1, #96	; 0x60
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f000 fad9 	bl	8007456 <TIM_ITRx_SetConfig>
      break;
 8006ea4:	e01b      	b.n	8006ede <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6818      	ldr	r0, [r3, #0]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	6859      	ldr	r1, [r3, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f000 fa70 	bl	8007398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2140      	movs	r1, #64	; 0x40
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fac9 	bl	8007456 <TIM_ITRx_SetConfig>
      break;
 8006ec4:	e00b      	b.n	8006ede <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4619      	mov	r1, r3
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	f000 fac0 	bl	8007456 <TIM_ITRx_SetConfig>
      break;
 8006ed6:	e002      	b.n	8006ede <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006ed8:	bf00      	nop
 8006eda:	e000      	b.n	8006ede <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006edc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a40      	ldr	r2, [pc, #256]	; (800700c <TIM_Base_SetConfig+0x114>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d013      	beq.n	8006f38 <TIM_Base_SetConfig+0x40>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f16:	d00f      	beq.n	8006f38 <TIM_Base_SetConfig+0x40>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a3d      	ldr	r2, [pc, #244]	; (8007010 <TIM_Base_SetConfig+0x118>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d00b      	beq.n	8006f38 <TIM_Base_SetConfig+0x40>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a3c      	ldr	r2, [pc, #240]	; (8007014 <TIM_Base_SetConfig+0x11c>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d007      	beq.n	8006f38 <TIM_Base_SetConfig+0x40>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a3b      	ldr	r2, [pc, #236]	; (8007018 <TIM_Base_SetConfig+0x120>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d003      	beq.n	8006f38 <TIM_Base_SetConfig+0x40>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a3a      	ldr	r2, [pc, #232]	; (800701c <TIM_Base_SetConfig+0x124>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d108      	bne.n	8006f4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a2f      	ldr	r2, [pc, #188]	; (800700c <TIM_Base_SetConfig+0x114>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d02b      	beq.n	8006faa <TIM_Base_SetConfig+0xb2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f58:	d027      	beq.n	8006faa <TIM_Base_SetConfig+0xb2>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a2c      	ldr	r2, [pc, #176]	; (8007010 <TIM_Base_SetConfig+0x118>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d023      	beq.n	8006faa <TIM_Base_SetConfig+0xb2>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a2b      	ldr	r2, [pc, #172]	; (8007014 <TIM_Base_SetConfig+0x11c>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d01f      	beq.n	8006faa <TIM_Base_SetConfig+0xb2>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4a2a      	ldr	r2, [pc, #168]	; (8007018 <TIM_Base_SetConfig+0x120>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d01b      	beq.n	8006faa <TIM_Base_SetConfig+0xb2>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a29      	ldr	r2, [pc, #164]	; (800701c <TIM_Base_SetConfig+0x124>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d017      	beq.n	8006faa <TIM_Base_SetConfig+0xb2>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a28      	ldr	r2, [pc, #160]	; (8007020 <TIM_Base_SetConfig+0x128>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d013      	beq.n	8006faa <TIM_Base_SetConfig+0xb2>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a27      	ldr	r2, [pc, #156]	; (8007024 <TIM_Base_SetConfig+0x12c>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00f      	beq.n	8006faa <TIM_Base_SetConfig+0xb2>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a26      	ldr	r2, [pc, #152]	; (8007028 <TIM_Base_SetConfig+0x130>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d00b      	beq.n	8006faa <TIM_Base_SetConfig+0xb2>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a25      	ldr	r2, [pc, #148]	; (800702c <TIM_Base_SetConfig+0x134>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d007      	beq.n	8006faa <TIM_Base_SetConfig+0xb2>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a24      	ldr	r2, [pc, #144]	; (8007030 <TIM_Base_SetConfig+0x138>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d003      	beq.n	8006faa <TIM_Base_SetConfig+0xb2>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a23      	ldr	r2, [pc, #140]	; (8007034 <TIM_Base_SetConfig+0x13c>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d108      	bne.n	8006fbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	689a      	ldr	r2, [r3, #8]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a0a      	ldr	r2, [pc, #40]	; (800700c <TIM_Base_SetConfig+0x114>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d003      	beq.n	8006ff0 <TIM_Base_SetConfig+0xf8>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a0c      	ldr	r2, [pc, #48]	; (800701c <TIM_Base_SetConfig+0x124>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d103      	bne.n	8006ff8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	691a      	ldr	r2, [r3, #16]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	615a      	str	r2, [r3, #20]
}
 8006ffe:	bf00      	nop
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	40010000 	.word	0x40010000
 8007010:	40000400 	.word	0x40000400
 8007014:	40000800 	.word	0x40000800
 8007018:	40000c00 	.word	0x40000c00
 800701c:	40010400 	.word	0x40010400
 8007020:	40014000 	.word	0x40014000
 8007024:	40014400 	.word	0x40014400
 8007028:	40014800 	.word	0x40014800
 800702c:	40001800 	.word	0x40001800
 8007030:	40001c00 	.word	0x40001c00
 8007034:	40002000 	.word	0x40002000

08007038 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007038:	b480      	push	{r7}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	f023 0201 	bic.w	r2, r3, #1
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f023 0303 	bic.w	r3, r3, #3
 800706e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4313      	orrs	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f023 0302 	bic.w	r3, r3, #2
 8007080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	697a      	ldr	r2, [r7, #20]
 8007088:	4313      	orrs	r3, r2
 800708a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a20      	ldr	r2, [pc, #128]	; (8007110 <TIM_OC1_SetConfig+0xd8>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d003      	beq.n	800709c <TIM_OC1_SetConfig+0x64>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a1f      	ldr	r2, [pc, #124]	; (8007114 <TIM_OC1_SetConfig+0xdc>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d10c      	bne.n	80070b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	f023 0308 	bic.w	r3, r3, #8
 80070a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	f023 0304 	bic.w	r3, r3, #4
 80070b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a15      	ldr	r2, [pc, #84]	; (8007110 <TIM_OC1_SetConfig+0xd8>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d003      	beq.n	80070c6 <TIM_OC1_SetConfig+0x8e>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a14      	ldr	r2, [pc, #80]	; (8007114 <TIM_OC1_SetConfig+0xdc>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d111      	bne.n	80070ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	4313      	orrs	r3, r2
 80070de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	621a      	str	r2, [r3, #32]
}
 8007104:	bf00      	nop
 8007106:	371c      	adds	r7, #28
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	40010000 	.word	0x40010000
 8007114:	40010400 	.word	0x40010400

08007118 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007118:	b480      	push	{r7}
 800711a:	b087      	sub	sp, #28
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	f023 0210 	bic.w	r2, r3, #16
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800714e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	021b      	lsls	r3, r3, #8
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	4313      	orrs	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f023 0320 	bic.w	r3, r3, #32
 8007162:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	011b      	lsls	r3, r3, #4
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	4313      	orrs	r3, r2
 800716e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a22      	ldr	r2, [pc, #136]	; (80071fc <TIM_OC2_SetConfig+0xe4>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d003      	beq.n	8007180 <TIM_OC2_SetConfig+0x68>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a21      	ldr	r2, [pc, #132]	; (8007200 <TIM_OC2_SetConfig+0xe8>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d10d      	bne.n	800719c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	011b      	lsls	r3, r3, #4
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	4313      	orrs	r3, r2
 8007192:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800719a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a17      	ldr	r2, [pc, #92]	; (80071fc <TIM_OC2_SetConfig+0xe4>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d003      	beq.n	80071ac <TIM_OC2_SetConfig+0x94>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a16      	ldr	r2, [pc, #88]	; (8007200 <TIM_OC2_SetConfig+0xe8>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d113      	bne.n	80071d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	621a      	str	r2, [r3, #32]
}
 80071ee:	bf00      	nop
 80071f0:	371c      	adds	r7, #28
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	40010000 	.word	0x40010000
 8007200:	40010400 	.word	0x40010400

08007204 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f023 0303 	bic.w	r3, r3, #3
 800723a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	4313      	orrs	r3, r2
 8007244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800724c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	021b      	lsls	r3, r3, #8
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	4313      	orrs	r3, r2
 8007258:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a21      	ldr	r2, [pc, #132]	; (80072e4 <TIM_OC3_SetConfig+0xe0>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d003      	beq.n	800726a <TIM_OC3_SetConfig+0x66>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a20      	ldr	r2, [pc, #128]	; (80072e8 <TIM_OC3_SetConfig+0xe4>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d10d      	bne.n	8007286 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007270:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	021b      	lsls	r3, r3, #8
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	4313      	orrs	r3, r2
 800727c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a16      	ldr	r2, [pc, #88]	; (80072e4 <TIM_OC3_SetConfig+0xe0>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d003      	beq.n	8007296 <TIM_OC3_SetConfig+0x92>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a15      	ldr	r2, [pc, #84]	; (80072e8 <TIM_OC3_SetConfig+0xe4>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d113      	bne.n	80072be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800729c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	011b      	lsls	r3, r3, #4
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	011b      	lsls	r3, r3, #4
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	621a      	str	r2, [r3, #32]
}
 80072d8:	bf00      	nop
 80072da:	371c      	adds	r7, #28
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	40010000 	.word	0x40010000
 80072e8:	40010400 	.word	0x40010400

080072ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800731a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	021b      	lsls	r3, r3, #8
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	4313      	orrs	r3, r2
 800732e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007336:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	031b      	lsls	r3, r3, #12
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	4313      	orrs	r3, r2
 8007342:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a12      	ldr	r2, [pc, #72]	; (8007390 <TIM_OC4_SetConfig+0xa4>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d003      	beq.n	8007354 <TIM_OC4_SetConfig+0x68>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a11      	ldr	r2, [pc, #68]	; (8007394 <TIM_OC4_SetConfig+0xa8>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d109      	bne.n	8007368 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800735a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	695b      	ldr	r3, [r3, #20]
 8007360:	019b      	lsls	r3, r3, #6
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	4313      	orrs	r3, r2
 8007366:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	621a      	str	r2, [r3, #32]
}
 8007382:	bf00      	nop
 8007384:	371c      	adds	r7, #28
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	40010000 	.word	0x40010000
 8007394:	40010400 	.word	0x40010400

08007398 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007398:	b480      	push	{r7}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6a1b      	ldr	r3, [r3, #32]
 80073a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	f023 0201 	bic.w	r2, r3, #1
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	011b      	lsls	r3, r3, #4
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	f023 030a 	bic.w	r3, r3, #10
 80073d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	4313      	orrs	r3, r2
 80073dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	621a      	str	r2, [r3, #32]
}
 80073ea:	bf00      	nop
 80073ec:	371c      	adds	r7, #28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073f6:	b480      	push	{r7}
 80073f8:	b087      	sub	sp, #28
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	60f8      	str	r0, [r7, #12]
 80073fe:	60b9      	str	r1, [r7, #8]
 8007400:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	f023 0210 	bic.w	r2, r3, #16
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007420:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	031b      	lsls	r3, r3, #12
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	4313      	orrs	r3, r2
 800742a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007432:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	011b      	lsls	r3, r3, #4
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	4313      	orrs	r3, r2
 800743c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	621a      	str	r2, [r3, #32]
}
 800744a:	bf00      	nop
 800744c:	371c      	adds	r7, #28
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007456:	b480      	push	{r7}
 8007458:	b085      	sub	sp, #20
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800746c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800746e:	683a      	ldr	r2, [r7, #0]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	4313      	orrs	r3, r2
 8007474:	f043 0307 	orr.w	r3, r3, #7
 8007478:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	609a      	str	r2, [r3, #8]
}
 8007480:	bf00      	nop
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800748c:	b480      	push	{r7}
 800748e:	b087      	sub	sp, #28
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
 8007498:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	021a      	lsls	r2, r3, #8
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	431a      	orrs	r2, r3
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	609a      	str	r2, [r3, #8]
}
 80074c0:	bf00      	nop
 80074c2:	371c      	adds	r7, #28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b087      	sub	sp, #28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f003 031f 	and.w	r3, r3, #31
 80074de:	2201      	movs	r2, #1
 80074e0:	fa02 f303 	lsl.w	r3, r2, r3
 80074e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6a1a      	ldr	r2, [r3, #32]
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	43db      	mvns	r3, r3
 80074ee:	401a      	ands	r2, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6a1a      	ldr	r2, [r3, #32]
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	f003 031f 	and.w	r3, r3, #31
 80074fe:	6879      	ldr	r1, [r7, #4]
 8007500:	fa01 f303 	lsl.w	r3, r1, r3
 8007504:	431a      	orrs	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	621a      	str	r2, [r3, #32]
}
 800750a:	bf00      	nop
 800750c:	371c      	adds	r7, #28
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
	...

08007518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007528:	2b01      	cmp	r3, #1
 800752a:	d101      	bne.n	8007530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800752c:	2302      	movs	r3, #2
 800752e:	e05a      	b.n	80075e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2202      	movs	r2, #2
 800753c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007556:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	4313      	orrs	r3, r2
 8007560:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a21      	ldr	r2, [pc, #132]	; (80075f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d022      	beq.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800757c:	d01d      	beq.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a1d      	ldr	r2, [pc, #116]	; (80075f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d018      	beq.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a1b      	ldr	r2, [pc, #108]	; (80075fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d013      	beq.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a1a      	ldr	r2, [pc, #104]	; (8007600 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d00e      	beq.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a18      	ldr	r2, [pc, #96]	; (8007604 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d009      	beq.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a17      	ldr	r2, [pc, #92]	; (8007608 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d004      	beq.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a15      	ldr	r2, [pc, #84]	; (800760c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d10c      	bne.n	80075d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	40010000 	.word	0x40010000
 80075f8:	40000400 	.word	0x40000400
 80075fc:	40000800 	.word	0x40000800
 8007600:	40000c00 	.word	0x40000c00
 8007604:	40010400 	.word	0x40010400
 8007608:	40014000 	.word	0x40014000
 800760c:	40001800 	.word	0x40001800

08007610 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800761a:	2300      	movs	r3, #0
 800761c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007624:	2b01      	cmp	r3, #1
 8007626:	d101      	bne.n	800762c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007628:	2302      	movs	r3, #2
 800762a:	e03d      	b.n	80076a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	4313      	orrs	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	4313      	orrs	r3, r2
 800765c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4313      	orrs	r3, r2
 800766a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	4313      	orrs	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	4313      	orrs	r3, r2
 8007686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	69db      	ldr	r3, [r3, #28]
 8007692:	4313      	orrs	r3, r2
 8007694:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e03f      	b.n	8007746 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d106      	bne.n	80076e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7fc f868 	bl	80037b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2224      	movs	r2, #36	; 0x24
 80076e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68da      	ldr	r2, [r3, #12]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fa5f 	bl	8007bbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	691a      	ldr	r2, [r3, #16]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800770c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	695a      	ldr	r2, [r3, #20]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800771c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68da      	ldr	r2, [r3, #12]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800772c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2220      	movs	r2, #32
 8007738:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2220      	movs	r2, #32
 8007740:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b088      	sub	sp, #32
 8007752:	af02      	add	r7, sp, #8
 8007754:	60f8      	str	r0, [r7, #12]
 8007756:	60b9      	str	r1, [r7, #8]
 8007758:	603b      	str	r3, [r7, #0]
 800775a:	4613      	mov	r3, r2
 800775c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800775e:	2300      	movs	r3, #0
 8007760:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b20      	cmp	r3, #32
 800776c:	f040 8083 	bne.w	8007876 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d002      	beq.n	800777c <HAL_UART_Transmit+0x2e>
 8007776:	88fb      	ldrh	r3, [r7, #6]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d101      	bne.n	8007780 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e07b      	b.n	8007878 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007786:	2b01      	cmp	r3, #1
 8007788:	d101      	bne.n	800778e <HAL_UART_Transmit+0x40>
 800778a:	2302      	movs	r3, #2
 800778c:	e074      	b.n	8007878 <HAL_UART_Transmit+0x12a>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2221      	movs	r2, #33	; 0x21
 80077a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80077a4:	f7fc f944 	bl	8003a30 <HAL_GetTick>
 80077a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	88fa      	ldrh	r2, [r7, #6]
 80077ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	88fa      	ldrh	r2, [r7, #6]
 80077b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80077be:	e042      	b.n	8007846 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	3b01      	subs	r3, #1
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077d6:	d122      	bne.n	800781e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	2200      	movs	r2, #0
 80077e0:	2180      	movs	r1, #128	; 0x80
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f000 f96c 	bl	8007ac0 <UART_WaitOnFlagUntilTimeout>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e042      	b.n	8007878 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	881b      	ldrh	r3, [r3, #0]
 80077fa:	461a      	mov	r2, r3
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007804:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d103      	bne.n	8007816 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	3302      	adds	r3, #2
 8007812:	60bb      	str	r3, [r7, #8]
 8007814:	e017      	b.n	8007846 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	3301      	adds	r3, #1
 800781a:	60bb      	str	r3, [r7, #8]
 800781c:	e013      	b.n	8007846 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	2200      	movs	r2, #0
 8007826:	2180      	movs	r1, #128	; 0x80
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f000 f949 	bl	8007ac0 <UART_WaitOnFlagUntilTimeout>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e01f      	b.n	8007878 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	1c5a      	adds	r2, r3, #1
 800783c:	60ba      	str	r2, [r7, #8]
 800783e:	781a      	ldrb	r2, [r3, #0]
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800784a:	b29b      	uxth	r3, r3
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1b7      	bne.n	80077c0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	9300      	str	r3, [sp, #0]
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	2200      	movs	r2, #0
 8007858:	2140      	movs	r1, #64	; 0x40
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f000 f930 	bl	8007ac0 <UART_WaitOnFlagUntilTimeout>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8007866:	2303      	movs	r3, #3
 8007868:	e006      	b.n	8007878 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2220      	movs	r2, #32
 800786e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	e000      	b.n	8007878 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007876:	2302      	movs	r3, #2
  }
}
 8007878:	4618      	mov	r0, r3
 800787a:	3718      	adds	r7, #24
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	4613      	mov	r3, r2
 800788c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b20      	cmp	r3, #32
 8007898:	d166      	bne.n	8007968 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d002      	beq.n	80078a6 <HAL_UART_Receive_DMA+0x26>
 80078a0:	88fb      	ldrh	r3, [r7, #6]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d101      	bne.n	80078aa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e05f      	b.n	800796a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d101      	bne.n	80078b8 <HAL_UART_Receive_DMA+0x38>
 80078b4:	2302      	movs	r3, #2
 80078b6:	e058      	b.n	800796a <HAL_UART_Receive_DMA+0xea>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80078c0:	68ba      	ldr	r2, [r7, #8]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	88fa      	ldrh	r2, [r7, #6]
 80078ca:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2222      	movs	r2, #34	; 0x22
 80078d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078de:	4a25      	ldr	r2, [pc, #148]	; (8007974 <HAL_UART_Receive_DMA+0xf4>)
 80078e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e6:	4a24      	ldr	r2, [pc, #144]	; (8007978 <HAL_UART_Receive_DMA+0xf8>)
 80078e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ee:	4a23      	ldr	r2, [pc, #140]	; (800797c <HAL_UART_Receive_DMA+0xfc>)
 80078f0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f6:	2200      	movs	r2, #0
 80078f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80078fa:	f107 0308 	add.w	r3, r7, #8
 80078fe:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3304      	adds	r3, #4
 800790a:	4619      	mov	r1, r3
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	88fb      	ldrh	r3, [r7, #6]
 8007912:	f7fd f8fb 	bl	8004b0c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007916:	2300      	movs	r3, #0
 8007918:	613b      	str	r3, [r7, #16]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	613b      	str	r3, [r7, #16]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	613b      	str	r3, [r7, #16]
 800792a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68da      	ldr	r2, [r3, #12]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007942:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	695a      	ldr	r2, [r3, #20]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f042 0201 	orr.w	r2, r2, #1
 8007952:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	695a      	ldr	r2, [r3, #20]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007962:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007964:	2300      	movs	r3, #0
 8007966:	e000      	b.n	800796a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007968:	2302      	movs	r3, #2
  }
}
 800796a:	4618      	mov	r0, r3
 800796c:	3718      	adds	r7, #24
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	080079a9 	.word	0x080079a9
 8007978:	08007a11 	.word	0x08007a11
 800797c:	08007a2d 	.word	0x08007a2d

08007980 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d11e      	bne.n	8007a02 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2200      	movs	r2, #0
 80079c8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68da      	ldr	r2, [r3, #12]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079d8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	695a      	ldr	r2, [r3, #20]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f022 0201 	bic.w	r2, r2, #1
 80079e8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	695a      	ldr	r2, [r3, #20]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079f8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2220      	movs	r2, #32
 80079fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f7fa fea2 	bl	800274c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a08:	bf00      	nop
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f7ff ffae 	bl	8007980 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a24:	bf00      	nop
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007a34:	2300      	movs	r3, #0
 8007a36:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a48:	2b80      	cmp	r3, #128	; 0x80
 8007a4a:	bf0c      	ite	eq
 8007a4c:	2301      	moveq	r3, #1
 8007a4e:	2300      	movne	r3, #0
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b21      	cmp	r3, #33	; 0x21
 8007a5e:	d108      	bne.n	8007a72 <UART_DMAError+0x46>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d005      	beq.n	8007a72 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007a6c:	68b8      	ldr	r0, [r7, #8]
 8007a6e:	f000 f871 	bl	8007b54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	695b      	ldr	r3, [r3, #20]
 8007a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a7c:	2b40      	cmp	r3, #64	; 0x40
 8007a7e:	bf0c      	ite	eq
 8007a80:	2301      	moveq	r3, #1
 8007a82:	2300      	movne	r3, #0
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b22      	cmp	r3, #34	; 0x22
 8007a92:	d108      	bne.n	8007aa6 <UART_DMAError+0x7a>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d005      	beq.n	8007aa6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007aa0:	68b8      	ldr	r0, [r7, #8]
 8007aa2:	f000 f86d 	bl	8007b80 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aaa:	f043 0210 	orr.w	r2, r3, #16
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ab2:	68b8      	ldr	r0, [r7, #8]
 8007ab4:	f7ff ff6e 	bl	8007994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ab8:	bf00      	nop
 8007aba:	3710      	adds	r7, #16
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	603b      	str	r3, [r7, #0]
 8007acc:	4613      	mov	r3, r2
 8007ace:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ad0:	e02c      	b.n	8007b2c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ad8:	d028      	beq.n	8007b2c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d007      	beq.n	8007af0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ae0:	f7fb ffa6 	bl	8003a30 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d21d      	bcs.n	8007b2c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68da      	ldr	r2, [r3, #12]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007afe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	695a      	ldr	r2, [r3, #20]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f022 0201 	bic.w	r2, r2, #1
 8007b0e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2220      	movs	r2, #32
 8007b14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e00f      	b.n	8007b4c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	4013      	ands	r3, r2
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	bf0c      	ite	eq
 8007b3c:	2301      	moveq	r3, #1
 8007b3e:	2300      	movne	r3, #0
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	461a      	mov	r2, r3
 8007b44:	79fb      	ldrb	r3, [r7, #7]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d0c3      	beq.n	8007ad2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68da      	ldr	r2, [r3, #12]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007b6a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2220      	movs	r2, #32
 8007b70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68da      	ldr	r2, [r3, #12]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007b96:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	695a      	ldr	r2, [r3, #20]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f022 0201 	bic.w	r2, r2, #1
 8007ba6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2220      	movs	r2, #32
 8007bac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007bb0:	bf00      	nop
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc0:	b0bd      	sub	sp, #244	; 0xf4
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bd8:	68d9      	ldr	r1, [r3, #12]
 8007bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	ea40 0301 	orr.w	r3, r0, r1
 8007be4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	431a      	orrs	r2, r3
 8007bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c00:	69db      	ldr	r3, [r3, #28]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8007c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007c14:	f021 010c 	bic.w	r1, r1, #12
 8007c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007c22:	430b      	orrs	r3, r1
 8007c24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c36:	6999      	ldr	r1, [r3, #24]
 8007c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	ea40 0301 	orr.w	r3, r0, r1
 8007c42:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c4e:	f040 81a5 	bne.w	8007f9c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	4bcd      	ldr	r3, [pc, #820]	; (8007f90 <UART_SetConfig+0x3d4>)
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d006      	beq.n	8007c6c <UART_SetConfig+0xb0>
 8007c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	4bcb      	ldr	r3, [pc, #812]	; (8007f94 <UART_SetConfig+0x3d8>)
 8007c66:	429a      	cmp	r2, r3
 8007c68:	f040 80cb 	bne.w	8007e02 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c6c:	f7fe fa6c 	bl	8006148 <HAL_RCC_GetPCLK2Freq>
 8007c70:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007c78:	461c      	mov	r4, r3
 8007c7a:	f04f 0500 	mov.w	r5, #0
 8007c7e:	4622      	mov	r2, r4
 8007c80:	462b      	mov	r3, r5
 8007c82:	1891      	adds	r1, r2, r2
 8007c84:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8007c88:	415b      	adcs	r3, r3
 8007c8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007c8e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007c92:	1912      	adds	r2, r2, r4
 8007c94:	eb45 0303 	adc.w	r3, r5, r3
 8007c98:	f04f 0000 	mov.w	r0, #0
 8007c9c:	f04f 0100 	mov.w	r1, #0
 8007ca0:	00d9      	lsls	r1, r3, #3
 8007ca2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ca6:	00d0      	lsls	r0, r2, #3
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	1911      	adds	r1, r2, r4
 8007cae:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8007cb2:	416b      	adcs	r3, r5
 8007cb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	f04f 0300 	mov.w	r3, #0
 8007cc4:	1891      	adds	r1, r2, r2
 8007cc6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8007cca:	415b      	adcs	r3, r3
 8007ccc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007cd0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8007cd4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007cd8:	f7f8 ff78 	bl	8000bcc <__aeabi_uldivmod>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4bad      	ldr	r3, [pc, #692]	; (8007f98 <UART_SetConfig+0x3dc>)
 8007ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ce6:	095b      	lsrs	r3, r3, #5
 8007ce8:	011e      	lsls	r6, r3, #4
 8007cea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007cee:	461c      	mov	r4, r3
 8007cf0:	f04f 0500 	mov.w	r5, #0
 8007cf4:	4622      	mov	r2, r4
 8007cf6:	462b      	mov	r3, r5
 8007cf8:	1891      	adds	r1, r2, r2
 8007cfa:	67b9      	str	r1, [r7, #120]	; 0x78
 8007cfc:	415b      	adcs	r3, r3
 8007cfe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d00:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8007d04:	1912      	adds	r2, r2, r4
 8007d06:	eb45 0303 	adc.w	r3, r5, r3
 8007d0a:	f04f 0000 	mov.w	r0, #0
 8007d0e:	f04f 0100 	mov.w	r1, #0
 8007d12:	00d9      	lsls	r1, r3, #3
 8007d14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d18:	00d0      	lsls	r0, r2, #3
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	1911      	adds	r1, r2, r4
 8007d20:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8007d24:	416b      	adcs	r3, r5
 8007d26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	461a      	mov	r2, r3
 8007d32:	f04f 0300 	mov.w	r3, #0
 8007d36:	1891      	adds	r1, r2, r2
 8007d38:	6739      	str	r1, [r7, #112]	; 0x70
 8007d3a:	415b      	adcs	r3, r3
 8007d3c:	677b      	str	r3, [r7, #116]	; 0x74
 8007d3e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007d42:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8007d46:	f7f8 ff41 	bl	8000bcc <__aeabi_uldivmod>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	4b92      	ldr	r3, [pc, #584]	; (8007f98 <UART_SetConfig+0x3dc>)
 8007d50:	fba3 1302 	umull	r1, r3, r3, r2
 8007d54:	095b      	lsrs	r3, r3, #5
 8007d56:	2164      	movs	r1, #100	; 0x64
 8007d58:	fb01 f303 	mul.w	r3, r1, r3
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	00db      	lsls	r3, r3, #3
 8007d60:	3332      	adds	r3, #50	; 0x32
 8007d62:	4a8d      	ldr	r2, [pc, #564]	; (8007f98 <UART_SetConfig+0x3dc>)
 8007d64:	fba2 2303 	umull	r2, r3, r2, r3
 8007d68:	095b      	lsrs	r3, r3, #5
 8007d6a:	005b      	lsls	r3, r3, #1
 8007d6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d70:	441e      	add	r6, r3
 8007d72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007d76:	4618      	mov	r0, r3
 8007d78:	f04f 0100 	mov.w	r1, #0
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	1894      	adds	r4, r2, r2
 8007d82:	66bc      	str	r4, [r7, #104]	; 0x68
 8007d84:	415b      	adcs	r3, r3
 8007d86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d88:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007d8c:	1812      	adds	r2, r2, r0
 8007d8e:	eb41 0303 	adc.w	r3, r1, r3
 8007d92:	f04f 0400 	mov.w	r4, #0
 8007d96:	f04f 0500 	mov.w	r5, #0
 8007d9a:	00dd      	lsls	r5, r3, #3
 8007d9c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007da0:	00d4      	lsls	r4, r2, #3
 8007da2:	4622      	mov	r2, r4
 8007da4:	462b      	mov	r3, r5
 8007da6:	1814      	adds	r4, r2, r0
 8007da8:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8007dac:	414b      	adcs	r3, r1
 8007dae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	461a      	mov	r2, r3
 8007dba:	f04f 0300 	mov.w	r3, #0
 8007dbe:	1891      	adds	r1, r2, r2
 8007dc0:	6639      	str	r1, [r7, #96]	; 0x60
 8007dc2:	415b      	adcs	r3, r3
 8007dc4:	667b      	str	r3, [r7, #100]	; 0x64
 8007dc6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007dca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007dce:	f7f8 fefd 	bl	8000bcc <__aeabi_uldivmod>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	4b70      	ldr	r3, [pc, #448]	; (8007f98 <UART_SetConfig+0x3dc>)
 8007dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8007ddc:	095b      	lsrs	r3, r3, #5
 8007dde:	2164      	movs	r1, #100	; 0x64
 8007de0:	fb01 f303 	mul.w	r3, r1, r3
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	00db      	lsls	r3, r3, #3
 8007de8:	3332      	adds	r3, #50	; 0x32
 8007dea:	4a6b      	ldr	r2, [pc, #428]	; (8007f98 <UART_SetConfig+0x3dc>)
 8007dec:	fba2 2303 	umull	r2, r3, r2, r3
 8007df0:	095b      	lsrs	r3, r3, #5
 8007df2:	f003 0207 	and.w	r2, r3, #7
 8007df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4432      	add	r2, r6
 8007dfe:	609a      	str	r2, [r3, #8]
 8007e00:	e26d      	b.n	80082de <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e02:	f7fe f98d 	bl	8006120 <HAL_RCC_GetPCLK1Freq>
 8007e06:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e0e:	461c      	mov	r4, r3
 8007e10:	f04f 0500 	mov.w	r5, #0
 8007e14:	4622      	mov	r2, r4
 8007e16:	462b      	mov	r3, r5
 8007e18:	1891      	adds	r1, r2, r2
 8007e1a:	65b9      	str	r1, [r7, #88]	; 0x58
 8007e1c:	415b      	adcs	r3, r3
 8007e1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e20:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007e24:	1912      	adds	r2, r2, r4
 8007e26:	eb45 0303 	adc.w	r3, r5, r3
 8007e2a:	f04f 0000 	mov.w	r0, #0
 8007e2e:	f04f 0100 	mov.w	r1, #0
 8007e32:	00d9      	lsls	r1, r3, #3
 8007e34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e38:	00d0      	lsls	r0, r2, #3
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	1911      	adds	r1, r2, r4
 8007e40:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8007e44:	416b      	adcs	r3, r5
 8007e46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	461a      	mov	r2, r3
 8007e52:	f04f 0300 	mov.w	r3, #0
 8007e56:	1891      	adds	r1, r2, r2
 8007e58:	6539      	str	r1, [r7, #80]	; 0x50
 8007e5a:	415b      	adcs	r3, r3
 8007e5c:	657b      	str	r3, [r7, #84]	; 0x54
 8007e5e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007e62:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8007e66:	f7f8 feb1 	bl	8000bcc <__aeabi_uldivmod>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	4b4a      	ldr	r3, [pc, #296]	; (8007f98 <UART_SetConfig+0x3dc>)
 8007e70:	fba3 2302 	umull	r2, r3, r3, r2
 8007e74:	095b      	lsrs	r3, r3, #5
 8007e76:	011e      	lsls	r6, r3, #4
 8007e78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007e7c:	461c      	mov	r4, r3
 8007e7e:	f04f 0500 	mov.w	r5, #0
 8007e82:	4622      	mov	r2, r4
 8007e84:	462b      	mov	r3, r5
 8007e86:	1891      	adds	r1, r2, r2
 8007e88:	64b9      	str	r1, [r7, #72]	; 0x48
 8007e8a:	415b      	adcs	r3, r3
 8007e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e8e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007e92:	1912      	adds	r2, r2, r4
 8007e94:	eb45 0303 	adc.w	r3, r5, r3
 8007e98:	f04f 0000 	mov.w	r0, #0
 8007e9c:	f04f 0100 	mov.w	r1, #0
 8007ea0:	00d9      	lsls	r1, r3, #3
 8007ea2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ea6:	00d0      	lsls	r0, r2, #3
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	460b      	mov	r3, r1
 8007eac:	1911      	adds	r1, r2, r4
 8007eae:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8007eb2:	416b      	adcs	r3, r5
 8007eb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	f04f 0300 	mov.w	r3, #0
 8007ec4:	1891      	adds	r1, r2, r2
 8007ec6:	6439      	str	r1, [r7, #64]	; 0x40
 8007ec8:	415b      	adcs	r3, r3
 8007eca:	647b      	str	r3, [r7, #68]	; 0x44
 8007ecc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007ed0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8007ed4:	f7f8 fe7a 	bl	8000bcc <__aeabi_uldivmod>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	4b2e      	ldr	r3, [pc, #184]	; (8007f98 <UART_SetConfig+0x3dc>)
 8007ede:	fba3 1302 	umull	r1, r3, r3, r2
 8007ee2:	095b      	lsrs	r3, r3, #5
 8007ee4:	2164      	movs	r1, #100	; 0x64
 8007ee6:	fb01 f303 	mul.w	r3, r1, r3
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	00db      	lsls	r3, r3, #3
 8007eee:	3332      	adds	r3, #50	; 0x32
 8007ef0:	4a29      	ldr	r2, [pc, #164]	; (8007f98 <UART_SetConfig+0x3dc>)
 8007ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef6:	095b      	lsrs	r3, r3, #5
 8007ef8:	005b      	lsls	r3, r3, #1
 8007efa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007efe:	441e      	add	r6, r3
 8007f00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007f04:	4618      	mov	r0, r3
 8007f06:	f04f 0100 	mov.w	r1, #0
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	1894      	adds	r4, r2, r2
 8007f10:	63bc      	str	r4, [r7, #56]	; 0x38
 8007f12:	415b      	adcs	r3, r3
 8007f14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f16:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f1a:	1812      	adds	r2, r2, r0
 8007f1c:	eb41 0303 	adc.w	r3, r1, r3
 8007f20:	f04f 0400 	mov.w	r4, #0
 8007f24:	f04f 0500 	mov.w	r5, #0
 8007f28:	00dd      	lsls	r5, r3, #3
 8007f2a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007f2e:	00d4      	lsls	r4, r2, #3
 8007f30:	4622      	mov	r2, r4
 8007f32:	462b      	mov	r3, r5
 8007f34:	1814      	adds	r4, r2, r0
 8007f36:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8007f3a:	414b      	adcs	r3, r1
 8007f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	461a      	mov	r2, r3
 8007f48:	f04f 0300 	mov.w	r3, #0
 8007f4c:	1891      	adds	r1, r2, r2
 8007f4e:	6339      	str	r1, [r7, #48]	; 0x30
 8007f50:	415b      	adcs	r3, r3
 8007f52:	637b      	str	r3, [r7, #52]	; 0x34
 8007f54:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007f58:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007f5c:	f7f8 fe36 	bl	8000bcc <__aeabi_uldivmod>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	4b0c      	ldr	r3, [pc, #48]	; (8007f98 <UART_SetConfig+0x3dc>)
 8007f66:	fba3 1302 	umull	r1, r3, r3, r2
 8007f6a:	095b      	lsrs	r3, r3, #5
 8007f6c:	2164      	movs	r1, #100	; 0x64
 8007f6e:	fb01 f303 	mul.w	r3, r1, r3
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	00db      	lsls	r3, r3, #3
 8007f76:	3332      	adds	r3, #50	; 0x32
 8007f78:	4a07      	ldr	r2, [pc, #28]	; (8007f98 <UART_SetConfig+0x3dc>)
 8007f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f7e:	095b      	lsrs	r3, r3, #5
 8007f80:	f003 0207 	and.w	r2, r3, #7
 8007f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4432      	add	r2, r6
 8007f8c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007f8e:	e1a6      	b.n	80082de <UART_SetConfig+0x722>
 8007f90:	40011000 	.word	0x40011000
 8007f94:	40011400 	.word	0x40011400
 8007f98:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	4bd1      	ldr	r3, [pc, #836]	; (80082e8 <UART_SetConfig+0x72c>)
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d006      	beq.n	8007fb6 <UART_SetConfig+0x3fa>
 8007fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	4bcf      	ldr	r3, [pc, #828]	; (80082ec <UART_SetConfig+0x730>)
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	f040 80ca 	bne.w	800814a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007fb6:	f7fe f8c7 	bl	8006148 <HAL_RCC_GetPCLK2Freq>
 8007fba:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007fbe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007fc2:	461c      	mov	r4, r3
 8007fc4:	f04f 0500 	mov.w	r5, #0
 8007fc8:	4622      	mov	r2, r4
 8007fca:	462b      	mov	r3, r5
 8007fcc:	1891      	adds	r1, r2, r2
 8007fce:	62b9      	str	r1, [r7, #40]	; 0x28
 8007fd0:	415b      	adcs	r3, r3
 8007fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fd8:	1912      	adds	r2, r2, r4
 8007fda:	eb45 0303 	adc.w	r3, r5, r3
 8007fde:	f04f 0000 	mov.w	r0, #0
 8007fe2:	f04f 0100 	mov.w	r1, #0
 8007fe6:	00d9      	lsls	r1, r3, #3
 8007fe8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007fec:	00d0      	lsls	r0, r2, #3
 8007fee:	4602      	mov	r2, r0
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	eb12 0a04 	adds.w	sl, r2, r4
 8007ff6:	eb43 0b05 	adc.w	fp, r3, r5
 8007ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	4618      	mov	r0, r3
 8008002:	f04f 0100 	mov.w	r1, #0
 8008006:	f04f 0200 	mov.w	r2, #0
 800800a:	f04f 0300 	mov.w	r3, #0
 800800e:	008b      	lsls	r3, r1, #2
 8008010:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008014:	0082      	lsls	r2, r0, #2
 8008016:	4650      	mov	r0, sl
 8008018:	4659      	mov	r1, fp
 800801a:	f7f8 fdd7 	bl	8000bcc <__aeabi_uldivmod>
 800801e:	4602      	mov	r2, r0
 8008020:	460b      	mov	r3, r1
 8008022:	4bb3      	ldr	r3, [pc, #716]	; (80082f0 <UART_SetConfig+0x734>)
 8008024:	fba3 2302 	umull	r2, r3, r3, r2
 8008028:	095b      	lsrs	r3, r3, #5
 800802a:	011e      	lsls	r6, r3, #4
 800802c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008030:	4618      	mov	r0, r3
 8008032:	f04f 0100 	mov.w	r1, #0
 8008036:	4602      	mov	r2, r0
 8008038:	460b      	mov	r3, r1
 800803a:	1894      	adds	r4, r2, r2
 800803c:	623c      	str	r4, [r7, #32]
 800803e:	415b      	adcs	r3, r3
 8008040:	627b      	str	r3, [r7, #36]	; 0x24
 8008042:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008046:	1812      	adds	r2, r2, r0
 8008048:	eb41 0303 	adc.w	r3, r1, r3
 800804c:	f04f 0400 	mov.w	r4, #0
 8008050:	f04f 0500 	mov.w	r5, #0
 8008054:	00dd      	lsls	r5, r3, #3
 8008056:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800805a:	00d4      	lsls	r4, r2, #3
 800805c:	4622      	mov	r2, r4
 800805e:	462b      	mov	r3, r5
 8008060:	1814      	adds	r4, r2, r0
 8008062:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8008066:	414b      	adcs	r3, r1
 8008068:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800806c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	4618      	mov	r0, r3
 8008074:	f04f 0100 	mov.w	r1, #0
 8008078:	f04f 0200 	mov.w	r2, #0
 800807c:	f04f 0300 	mov.w	r3, #0
 8008080:	008b      	lsls	r3, r1, #2
 8008082:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008086:	0082      	lsls	r2, r0, #2
 8008088:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800808c:	f7f8 fd9e 	bl	8000bcc <__aeabi_uldivmod>
 8008090:	4602      	mov	r2, r0
 8008092:	460b      	mov	r3, r1
 8008094:	4b96      	ldr	r3, [pc, #600]	; (80082f0 <UART_SetConfig+0x734>)
 8008096:	fba3 1302 	umull	r1, r3, r3, r2
 800809a:	095b      	lsrs	r3, r3, #5
 800809c:	2164      	movs	r1, #100	; 0x64
 800809e:	fb01 f303 	mul.w	r3, r1, r3
 80080a2:	1ad3      	subs	r3, r2, r3
 80080a4:	011b      	lsls	r3, r3, #4
 80080a6:	3332      	adds	r3, #50	; 0x32
 80080a8:	4a91      	ldr	r2, [pc, #580]	; (80082f0 <UART_SetConfig+0x734>)
 80080aa:	fba2 2303 	umull	r2, r3, r2, r3
 80080ae:	095b      	lsrs	r3, r3, #5
 80080b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080b4:	441e      	add	r6, r3
 80080b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80080ba:	4618      	mov	r0, r3
 80080bc:	f04f 0100 	mov.w	r1, #0
 80080c0:	4602      	mov	r2, r0
 80080c2:	460b      	mov	r3, r1
 80080c4:	1894      	adds	r4, r2, r2
 80080c6:	61bc      	str	r4, [r7, #24]
 80080c8:	415b      	adcs	r3, r3
 80080ca:	61fb      	str	r3, [r7, #28]
 80080cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080d0:	1812      	adds	r2, r2, r0
 80080d2:	eb41 0303 	adc.w	r3, r1, r3
 80080d6:	f04f 0400 	mov.w	r4, #0
 80080da:	f04f 0500 	mov.w	r5, #0
 80080de:	00dd      	lsls	r5, r3, #3
 80080e0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80080e4:	00d4      	lsls	r4, r2, #3
 80080e6:	4622      	mov	r2, r4
 80080e8:	462b      	mov	r3, r5
 80080ea:	1814      	adds	r4, r2, r0
 80080ec:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80080f0:	414b      	adcs	r3, r1
 80080f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80080f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	4618      	mov	r0, r3
 80080fe:	f04f 0100 	mov.w	r1, #0
 8008102:	f04f 0200 	mov.w	r2, #0
 8008106:	f04f 0300 	mov.w	r3, #0
 800810a:	008b      	lsls	r3, r1, #2
 800810c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008110:	0082      	lsls	r2, r0, #2
 8008112:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8008116:	f7f8 fd59 	bl	8000bcc <__aeabi_uldivmod>
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	4b74      	ldr	r3, [pc, #464]	; (80082f0 <UART_SetConfig+0x734>)
 8008120:	fba3 1302 	umull	r1, r3, r3, r2
 8008124:	095b      	lsrs	r3, r3, #5
 8008126:	2164      	movs	r1, #100	; 0x64
 8008128:	fb01 f303 	mul.w	r3, r1, r3
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	011b      	lsls	r3, r3, #4
 8008130:	3332      	adds	r3, #50	; 0x32
 8008132:	4a6f      	ldr	r2, [pc, #444]	; (80082f0 <UART_SetConfig+0x734>)
 8008134:	fba2 2303 	umull	r2, r3, r2, r3
 8008138:	095b      	lsrs	r3, r3, #5
 800813a:	f003 020f 	and.w	r2, r3, #15
 800813e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4432      	add	r2, r6
 8008146:	609a      	str	r2, [r3, #8]
 8008148:	e0c9      	b.n	80082de <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800814a:	f7fd ffe9 	bl	8006120 <HAL_RCC_GetPCLK1Freq>
 800814e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008152:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008156:	461c      	mov	r4, r3
 8008158:	f04f 0500 	mov.w	r5, #0
 800815c:	4622      	mov	r2, r4
 800815e:	462b      	mov	r3, r5
 8008160:	1891      	adds	r1, r2, r2
 8008162:	6139      	str	r1, [r7, #16]
 8008164:	415b      	adcs	r3, r3
 8008166:	617b      	str	r3, [r7, #20]
 8008168:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800816c:	1912      	adds	r2, r2, r4
 800816e:	eb45 0303 	adc.w	r3, r5, r3
 8008172:	f04f 0000 	mov.w	r0, #0
 8008176:	f04f 0100 	mov.w	r1, #0
 800817a:	00d9      	lsls	r1, r3, #3
 800817c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008180:	00d0      	lsls	r0, r2, #3
 8008182:	4602      	mov	r2, r0
 8008184:	460b      	mov	r3, r1
 8008186:	eb12 0804 	adds.w	r8, r2, r4
 800818a:	eb43 0905 	adc.w	r9, r3, r5
 800818e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	4618      	mov	r0, r3
 8008196:	f04f 0100 	mov.w	r1, #0
 800819a:	f04f 0200 	mov.w	r2, #0
 800819e:	f04f 0300 	mov.w	r3, #0
 80081a2:	008b      	lsls	r3, r1, #2
 80081a4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80081a8:	0082      	lsls	r2, r0, #2
 80081aa:	4640      	mov	r0, r8
 80081ac:	4649      	mov	r1, r9
 80081ae:	f7f8 fd0d 	bl	8000bcc <__aeabi_uldivmod>
 80081b2:	4602      	mov	r2, r0
 80081b4:	460b      	mov	r3, r1
 80081b6:	4b4e      	ldr	r3, [pc, #312]	; (80082f0 <UART_SetConfig+0x734>)
 80081b8:	fba3 2302 	umull	r2, r3, r3, r2
 80081bc:	095b      	lsrs	r3, r3, #5
 80081be:	011e      	lsls	r6, r3, #4
 80081c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80081c4:	4618      	mov	r0, r3
 80081c6:	f04f 0100 	mov.w	r1, #0
 80081ca:	4602      	mov	r2, r0
 80081cc:	460b      	mov	r3, r1
 80081ce:	1894      	adds	r4, r2, r2
 80081d0:	60bc      	str	r4, [r7, #8]
 80081d2:	415b      	adcs	r3, r3
 80081d4:	60fb      	str	r3, [r7, #12]
 80081d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081da:	1812      	adds	r2, r2, r0
 80081dc:	eb41 0303 	adc.w	r3, r1, r3
 80081e0:	f04f 0400 	mov.w	r4, #0
 80081e4:	f04f 0500 	mov.w	r5, #0
 80081e8:	00dd      	lsls	r5, r3, #3
 80081ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80081ee:	00d4      	lsls	r4, r2, #3
 80081f0:	4622      	mov	r2, r4
 80081f2:	462b      	mov	r3, r5
 80081f4:	1814      	adds	r4, r2, r0
 80081f6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80081fa:	414b      	adcs	r3, r1
 80081fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	4618      	mov	r0, r3
 8008208:	f04f 0100 	mov.w	r1, #0
 800820c:	f04f 0200 	mov.w	r2, #0
 8008210:	f04f 0300 	mov.w	r3, #0
 8008214:	008b      	lsls	r3, r1, #2
 8008216:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800821a:	0082      	lsls	r2, r0, #2
 800821c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008220:	f7f8 fcd4 	bl	8000bcc <__aeabi_uldivmod>
 8008224:	4602      	mov	r2, r0
 8008226:	460b      	mov	r3, r1
 8008228:	4b31      	ldr	r3, [pc, #196]	; (80082f0 <UART_SetConfig+0x734>)
 800822a:	fba3 1302 	umull	r1, r3, r3, r2
 800822e:	095b      	lsrs	r3, r3, #5
 8008230:	2164      	movs	r1, #100	; 0x64
 8008232:	fb01 f303 	mul.w	r3, r1, r3
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	011b      	lsls	r3, r3, #4
 800823a:	3332      	adds	r3, #50	; 0x32
 800823c:	4a2c      	ldr	r2, [pc, #176]	; (80082f0 <UART_SetConfig+0x734>)
 800823e:	fba2 2303 	umull	r2, r3, r2, r3
 8008242:	095b      	lsrs	r3, r3, #5
 8008244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008248:	441e      	add	r6, r3
 800824a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800824e:	4618      	mov	r0, r3
 8008250:	f04f 0100 	mov.w	r1, #0
 8008254:	4602      	mov	r2, r0
 8008256:	460b      	mov	r3, r1
 8008258:	1894      	adds	r4, r2, r2
 800825a:	603c      	str	r4, [r7, #0]
 800825c:	415b      	adcs	r3, r3
 800825e:	607b      	str	r3, [r7, #4]
 8008260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008264:	1812      	adds	r2, r2, r0
 8008266:	eb41 0303 	adc.w	r3, r1, r3
 800826a:	f04f 0400 	mov.w	r4, #0
 800826e:	f04f 0500 	mov.w	r5, #0
 8008272:	00dd      	lsls	r5, r3, #3
 8008274:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008278:	00d4      	lsls	r4, r2, #3
 800827a:	4622      	mov	r2, r4
 800827c:	462b      	mov	r3, r5
 800827e:	1814      	adds	r4, r2, r0
 8008280:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8008284:	414b      	adcs	r3, r1
 8008286:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800828a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	4618      	mov	r0, r3
 8008292:	f04f 0100 	mov.w	r1, #0
 8008296:	f04f 0200 	mov.w	r2, #0
 800829a:	f04f 0300 	mov.w	r3, #0
 800829e:	008b      	lsls	r3, r1, #2
 80082a0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80082a4:	0082      	lsls	r2, r0, #2
 80082a6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80082aa:	f7f8 fc8f 	bl	8000bcc <__aeabi_uldivmod>
 80082ae:	4602      	mov	r2, r0
 80082b0:	460b      	mov	r3, r1
 80082b2:	4b0f      	ldr	r3, [pc, #60]	; (80082f0 <UART_SetConfig+0x734>)
 80082b4:	fba3 1302 	umull	r1, r3, r3, r2
 80082b8:	095b      	lsrs	r3, r3, #5
 80082ba:	2164      	movs	r1, #100	; 0x64
 80082bc:	fb01 f303 	mul.w	r3, r1, r3
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	011b      	lsls	r3, r3, #4
 80082c4:	3332      	adds	r3, #50	; 0x32
 80082c6:	4a0a      	ldr	r2, [pc, #40]	; (80082f0 <UART_SetConfig+0x734>)
 80082c8:	fba2 2303 	umull	r2, r3, r2, r3
 80082cc:	095b      	lsrs	r3, r3, #5
 80082ce:	f003 020f 	and.w	r2, r3, #15
 80082d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4432      	add	r2, r6
 80082da:	609a      	str	r2, [r3, #8]
}
 80082dc:	e7ff      	b.n	80082de <UART_SetConfig+0x722>
 80082de:	bf00      	nop
 80082e0:	37f4      	adds	r7, #244	; 0xf4
 80082e2:	46bd      	mov	sp, r7
 80082e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e8:	40011000 	.word	0x40011000
 80082ec:	40011400 	.word	0x40011400
 80082f0:	51eb851f 	.word	0x51eb851f

080082f4 <__libc_init_array>:
 80082f4:	b570      	push	{r4, r5, r6, lr}
 80082f6:	4d0d      	ldr	r5, [pc, #52]	; (800832c <__libc_init_array+0x38>)
 80082f8:	4c0d      	ldr	r4, [pc, #52]	; (8008330 <__libc_init_array+0x3c>)
 80082fa:	1b64      	subs	r4, r4, r5
 80082fc:	10a4      	asrs	r4, r4, #2
 80082fe:	2600      	movs	r6, #0
 8008300:	42a6      	cmp	r6, r4
 8008302:	d109      	bne.n	8008318 <__libc_init_array+0x24>
 8008304:	4d0b      	ldr	r5, [pc, #44]	; (8008334 <__libc_init_array+0x40>)
 8008306:	4c0c      	ldr	r4, [pc, #48]	; (8008338 <__libc_init_array+0x44>)
 8008308:	f001 f858 	bl	80093bc <_init>
 800830c:	1b64      	subs	r4, r4, r5
 800830e:	10a4      	asrs	r4, r4, #2
 8008310:	2600      	movs	r6, #0
 8008312:	42a6      	cmp	r6, r4
 8008314:	d105      	bne.n	8008322 <__libc_init_array+0x2e>
 8008316:	bd70      	pop	{r4, r5, r6, pc}
 8008318:	f855 3b04 	ldr.w	r3, [r5], #4
 800831c:	4798      	blx	r3
 800831e:	3601      	adds	r6, #1
 8008320:	e7ee      	b.n	8008300 <__libc_init_array+0xc>
 8008322:	f855 3b04 	ldr.w	r3, [r5], #4
 8008326:	4798      	blx	r3
 8008328:	3601      	adds	r6, #1
 800832a:	e7f2      	b.n	8008312 <__libc_init_array+0x1e>
 800832c:	080095f0 	.word	0x080095f0
 8008330:	080095f0 	.word	0x080095f0
 8008334:	080095f0 	.word	0x080095f0
 8008338:	080095f4 	.word	0x080095f4

0800833c <memset>:
 800833c:	4402      	add	r2, r0
 800833e:	4603      	mov	r3, r0
 8008340:	4293      	cmp	r3, r2
 8008342:	d100      	bne.n	8008346 <memset+0xa>
 8008344:	4770      	bx	lr
 8008346:	f803 1b01 	strb.w	r1, [r3], #1
 800834a:	e7f9      	b.n	8008340 <memset+0x4>
 800834c:	0000      	movs	r0, r0
	...

08008350 <cos>:
 8008350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008352:	ec53 2b10 	vmov	r2, r3, d0
 8008356:	4824      	ldr	r0, [pc, #144]	; (80083e8 <cos+0x98>)
 8008358:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800835c:	4281      	cmp	r1, r0
 800835e:	dc06      	bgt.n	800836e <cos+0x1e>
 8008360:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80083e0 <cos+0x90>
 8008364:	f000 fa5c 	bl	8008820 <__kernel_cos>
 8008368:	ec51 0b10 	vmov	r0, r1, d0
 800836c:	e007      	b.n	800837e <cos+0x2e>
 800836e:	481f      	ldr	r0, [pc, #124]	; (80083ec <cos+0x9c>)
 8008370:	4281      	cmp	r1, r0
 8008372:	dd09      	ble.n	8008388 <cos+0x38>
 8008374:	ee10 0a10 	vmov	r0, s0
 8008378:	4619      	mov	r1, r3
 800837a:	f7f7 ff3d 	bl	80001f8 <__aeabi_dsub>
 800837e:	ec41 0b10 	vmov	d0, r0, r1
 8008382:	b005      	add	sp, #20
 8008384:	f85d fb04 	ldr.w	pc, [sp], #4
 8008388:	4668      	mov	r0, sp
 800838a:	f000 f83d 	bl	8008408 <__ieee754_rem_pio2>
 800838e:	f000 0003 	and.w	r0, r0, #3
 8008392:	2801      	cmp	r0, #1
 8008394:	d007      	beq.n	80083a6 <cos+0x56>
 8008396:	2802      	cmp	r0, #2
 8008398:	d012      	beq.n	80083c0 <cos+0x70>
 800839a:	b9c0      	cbnz	r0, 80083ce <cos+0x7e>
 800839c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80083a0:	ed9d 0b00 	vldr	d0, [sp]
 80083a4:	e7de      	b.n	8008364 <cos+0x14>
 80083a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80083aa:	ed9d 0b00 	vldr	d0, [sp]
 80083ae:	f000 fe3f 	bl	8009030 <__kernel_sin>
 80083b2:	ec53 2b10 	vmov	r2, r3, d0
 80083b6:	ee10 0a10 	vmov	r0, s0
 80083ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80083be:	e7de      	b.n	800837e <cos+0x2e>
 80083c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80083c4:	ed9d 0b00 	vldr	d0, [sp]
 80083c8:	f000 fa2a 	bl	8008820 <__kernel_cos>
 80083cc:	e7f1      	b.n	80083b2 <cos+0x62>
 80083ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80083d2:	ed9d 0b00 	vldr	d0, [sp]
 80083d6:	2001      	movs	r0, #1
 80083d8:	f000 fe2a 	bl	8009030 <__kernel_sin>
 80083dc:	e7c4      	b.n	8008368 <cos+0x18>
 80083de:	bf00      	nop
	...
 80083e8:	3fe921fb 	.word	0x3fe921fb
 80083ec:	7fefffff 	.word	0x7fefffff

080083f0 <fabs>:
 80083f0:	ec51 0b10 	vmov	r0, r1, d0
 80083f4:	ee10 2a10 	vmov	r2, s0
 80083f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80083fc:	ec43 2b10 	vmov	d0, r2, r3
 8008400:	4770      	bx	lr
 8008402:	0000      	movs	r0, r0
 8008404:	0000      	movs	r0, r0
	...

08008408 <__ieee754_rem_pio2>:
 8008408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840c:	ed2d 8b02 	vpush	{d8}
 8008410:	ec55 4b10 	vmov	r4, r5, d0
 8008414:	4bca      	ldr	r3, [pc, #808]	; (8008740 <__ieee754_rem_pio2+0x338>)
 8008416:	b08b      	sub	sp, #44	; 0x2c
 8008418:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800841c:	4598      	cmp	r8, r3
 800841e:	4682      	mov	sl, r0
 8008420:	9502      	str	r5, [sp, #8]
 8008422:	dc08      	bgt.n	8008436 <__ieee754_rem_pio2+0x2e>
 8008424:	2200      	movs	r2, #0
 8008426:	2300      	movs	r3, #0
 8008428:	ed80 0b00 	vstr	d0, [r0]
 800842c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008430:	f04f 0b00 	mov.w	fp, #0
 8008434:	e028      	b.n	8008488 <__ieee754_rem_pio2+0x80>
 8008436:	4bc3      	ldr	r3, [pc, #780]	; (8008744 <__ieee754_rem_pio2+0x33c>)
 8008438:	4598      	cmp	r8, r3
 800843a:	dc78      	bgt.n	800852e <__ieee754_rem_pio2+0x126>
 800843c:	9b02      	ldr	r3, [sp, #8]
 800843e:	4ec2      	ldr	r6, [pc, #776]	; (8008748 <__ieee754_rem_pio2+0x340>)
 8008440:	2b00      	cmp	r3, #0
 8008442:	ee10 0a10 	vmov	r0, s0
 8008446:	a3b0      	add	r3, pc, #704	; (adr r3, 8008708 <__ieee754_rem_pio2+0x300>)
 8008448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844c:	4629      	mov	r1, r5
 800844e:	dd39      	ble.n	80084c4 <__ieee754_rem_pio2+0xbc>
 8008450:	f7f7 fed2 	bl	80001f8 <__aeabi_dsub>
 8008454:	45b0      	cmp	r8, r6
 8008456:	4604      	mov	r4, r0
 8008458:	460d      	mov	r5, r1
 800845a:	d01b      	beq.n	8008494 <__ieee754_rem_pio2+0x8c>
 800845c:	a3ac      	add	r3, pc, #688	; (adr r3, 8008710 <__ieee754_rem_pio2+0x308>)
 800845e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008462:	f7f7 fec9 	bl	80001f8 <__aeabi_dsub>
 8008466:	4602      	mov	r2, r0
 8008468:	460b      	mov	r3, r1
 800846a:	e9ca 2300 	strd	r2, r3, [sl]
 800846e:	4620      	mov	r0, r4
 8008470:	4629      	mov	r1, r5
 8008472:	f7f7 fec1 	bl	80001f8 <__aeabi_dsub>
 8008476:	a3a6      	add	r3, pc, #664	; (adr r3, 8008710 <__ieee754_rem_pio2+0x308>)
 8008478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800847c:	f7f7 febc 	bl	80001f8 <__aeabi_dsub>
 8008480:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008484:	f04f 0b01 	mov.w	fp, #1
 8008488:	4658      	mov	r0, fp
 800848a:	b00b      	add	sp, #44	; 0x2c
 800848c:	ecbd 8b02 	vpop	{d8}
 8008490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008494:	a3a0      	add	r3, pc, #640	; (adr r3, 8008718 <__ieee754_rem_pio2+0x310>)
 8008496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849a:	f7f7 fead 	bl	80001f8 <__aeabi_dsub>
 800849e:	a3a0      	add	r3, pc, #640	; (adr r3, 8008720 <__ieee754_rem_pio2+0x318>)
 80084a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a4:	4604      	mov	r4, r0
 80084a6:	460d      	mov	r5, r1
 80084a8:	f7f7 fea6 	bl	80001f8 <__aeabi_dsub>
 80084ac:	4602      	mov	r2, r0
 80084ae:	460b      	mov	r3, r1
 80084b0:	e9ca 2300 	strd	r2, r3, [sl]
 80084b4:	4620      	mov	r0, r4
 80084b6:	4629      	mov	r1, r5
 80084b8:	f7f7 fe9e 	bl	80001f8 <__aeabi_dsub>
 80084bc:	a398      	add	r3, pc, #608	; (adr r3, 8008720 <__ieee754_rem_pio2+0x318>)
 80084be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c2:	e7db      	b.n	800847c <__ieee754_rem_pio2+0x74>
 80084c4:	f7f7 fe9a 	bl	80001fc <__adddf3>
 80084c8:	45b0      	cmp	r8, r6
 80084ca:	4604      	mov	r4, r0
 80084cc:	460d      	mov	r5, r1
 80084ce:	d016      	beq.n	80084fe <__ieee754_rem_pio2+0xf6>
 80084d0:	a38f      	add	r3, pc, #572	; (adr r3, 8008710 <__ieee754_rem_pio2+0x308>)
 80084d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d6:	f7f7 fe91 	bl	80001fc <__adddf3>
 80084da:	4602      	mov	r2, r0
 80084dc:	460b      	mov	r3, r1
 80084de:	e9ca 2300 	strd	r2, r3, [sl]
 80084e2:	4620      	mov	r0, r4
 80084e4:	4629      	mov	r1, r5
 80084e6:	f7f7 fe87 	bl	80001f8 <__aeabi_dsub>
 80084ea:	a389      	add	r3, pc, #548	; (adr r3, 8008710 <__ieee754_rem_pio2+0x308>)
 80084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f0:	f7f7 fe84 	bl	80001fc <__adddf3>
 80084f4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80084f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80084fc:	e7c4      	b.n	8008488 <__ieee754_rem_pio2+0x80>
 80084fe:	a386      	add	r3, pc, #536	; (adr r3, 8008718 <__ieee754_rem_pio2+0x310>)
 8008500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008504:	f7f7 fe7a 	bl	80001fc <__adddf3>
 8008508:	a385      	add	r3, pc, #532	; (adr r3, 8008720 <__ieee754_rem_pio2+0x318>)
 800850a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850e:	4604      	mov	r4, r0
 8008510:	460d      	mov	r5, r1
 8008512:	f7f7 fe73 	bl	80001fc <__adddf3>
 8008516:	4602      	mov	r2, r0
 8008518:	460b      	mov	r3, r1
 800851a:	e9ca 2300 	strd	r2, r3, [sl]
 800851e:	4620      	mov	r0, r4
 8008520:	4629      	mov	r1, r5
 8008522:	f7f7 fe69 	bl	80001f8 <__aeabi_dsub>
 8008526:	a37e      	add	r3, pc, #504	; (adr r3, 8008720 <__ieee754_rem_pio2+0x318>)
 8008528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852c:	e7e0      	b.n	80084f0 <__ieee754_rem_pio2+0xe8>
 800852e:	4b87      	ldr	r3, [pc, #540]	; (800874c <__ieee754_rem_pio2+0x344>)
 8008530:	4598      	cmp	r8, r3
 8008532:	f300 80d9 	bgt.w	80086e8 <__ieee754_rem_pio2+0x2e0>
 8008536:	f7ff ff5b 	bl	80083f0 <fabs>
 800853a:	ec55 4b10 	vmov	r4, r5, d0
 800853e:	ee10 0a10 	vmov	r0, s0
 8008542:	a379      	add	r3, pc, #484	; (adr r3, 8008728 <__ieee754_rem_pio2+0x320>)
 8008544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008548:	4629      	mov	r1, r5
 800854a:	f7f8 f80d 	bl	8000568 <__aeabi_dmul>
 800854e:	4b80      	ldr	r3, [pc, #512]	; (8008750 <__ieee754_rem_pio2+0x348>)
 8008550:	2200      	movs	r2, #0
 8008552:	f7f7 fe53 	bl	80001fc <__adddf3>
 8008556:	f7f8 faa1 	bl	8000a9c <__aeabi_d2iz>
 800855a:	4683      	mov	fp, r0
 800855c:	f7f7 ff9a 	bl	8000494 <__aeabi_i2d>
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	ec43 2b18 	vmov	d8, r2, r3
 8008568:	a367      	add	r3, pc, #412	; (adr r3, 8008708 <__ieee754_rem_pio2+0x300>)
 800856a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856e:	f7f7 fffb 	bl	8000568 <__aeabi_dmul>
 8008572:	4602      	mov	r2, r0
 8008574:	460b      	mov	r3, r1
 8008576:	4620      	mov	r0, r4
 8008578:	4629      	mov	r1, r5
 800857a:	f7f7 fe3d 	bl	80001f8 <__aeabi_dsub>
 800857e:	a364      	add	r3, pc, #400	; (adr r3, 8008710 <__ieee754_rem_pio2+0x308>)
 8008580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008584:	4606      	mov	r6, r0
 8008586:	460f      	mov	r7, r1
 8008588:	ec51 0b18 	vmov	r0, r1, d8
 800858c:	f7f7 ffec 	bl	8000568 <__aeabi_dmul>
 8008590:	f1bb 0f1f 	cmp.w	fp, #31
 8008594:	4604      	mov	r4, r0
 8008596:	460d      	mov	r5, r1
 8008598:	dc0d      	bgt.n	80085b6 <__ieee754_rem_pio2+0x1ae>
 800859a:	4b6e      	ldr	r3, [pc, #440]	; (8008754 <__ieee754_rem_pio2+0x34c>)
 800859c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80085a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a4:	4543      	cmp	r3, r8
 80085a6:	d006      	beq.n	80085b6 <__ieee754_rem_pio2+0x1ae>
 80085a8:	4622      	mov	r2, r4
 80085aa:	462b      	mov	r3, r5
 80085ac:	4630      	mov	r0, r6
 80085ae:	4639      	mov	r1, r7
 80085b0:	f7f7 fe22 	bl	80001f8 <__aeabi_dsub>
 80085b4:	e00f      	b.n	80085d6 <__ieee754_rem_pio2+0x1ce>
 80085b6:	462b      	mov	r3, r5
 80085b8:	4622      	mov	r2, r4
 80085ba:	4630      	mov	r0, r6
 80085bc:	4639      	mov	r1, r7
 80085be:	f7f7 fe1b 	bl	80001f8 <__aeabi_dsub>
 80085c2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80085c6:	9303      	str	r3, [sp, #12]
 80085c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80085cc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80085d0:	f1b8 0f10 	cmp.w	r8, #16
 80085d4:	dc02      	bgt.n	80085dc <__ieee754_rem_pio2+0x1d4>
 80085d6:	e9ca 0100 	strd	r0, r1, [sl]
 80085da:	e039      	b.n	8008650 <__ieee754_rem_pio2+0x248>
 80085dc:	a34e      	add	r3, pc, #312	; (adr r3, 8008718 <__ieee754_rem_pio2+0x310>)
 80085de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e2:	ec51 0b18 	vmov	r0, r1, d8
 80085e6:	f7f7 ffbf 	bl	8000568 <__aeabi_dmul>
 80085ea:	4604      	mov	r4, r0
 80085ec:	460d      	mov	r5, r1
 80085ee:	4602      	mov	r2, r0
 80085f0:	460b      	mov	r3, r1
 80085f2:	4630      	mov	r0, r6
 80085f4:	4639      	mov	r1, r7
 80085f6:	f7f7 fdff 	bl	80001f8 <__aeabi_dsub>
 80085fa:	4602      	mov	r2, r0
 80085fc:	460b      	mov	r3, r1
 80085fe:	4680      	mov	r8, r0
 8008600:	4689      	mov	r9, r1
 8008602:	4630      	mov	r0, r6
 8008604:	4639      	mov	r1, r7
 8008606:	f7f7 fdf7 	bl	80001f8 <__aeabi_dsub>
 800860a:	4622      	mov	r2, r4
 800860c:	462b      	mov	r3, r5
 800860e:	f7f7 fdf3 	bl	80001f8 <__aeabi_dsub>
 8008612:	a343      	add	r3, pc, #268	; (adr r3, 8008720 <__ieee754_rem_pio2+0x318>)
 8008614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008618:	4604      	mov	r4, r0
 800861a:	460d      	mov	r5, r1
 800861c:	ec51 0b18 	vmov	r0, r1, d8
 8008620:	f7f7 ffa2 	bl	8000568 <__aeabi_dmul>
 8008624:	4622      	mov	r2, r4
 8008626:	462b      	mov	r3, r5
 8008628:	f7f7 fde6 	bl	80001f8 <__aeabi_dsub>
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	4604      	mov	r4, r0
 8008632:	460d      	mov	r5, r1
 8008634:	4640      	mov	r0, r8
 8008636:	4649      	mov	r1, r9
 8008638:	f7f7 fdde 	bl	80001f8 <__aeabi_dsub>
 800863c:	9a03      	ldr	r2, [sp, #12]
 800863e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	2b31      	cmp	r3, #49	; 0x31
 8008646:	dc24      	bgt.n	8008692 <__ieee754_rem_pio2+0x28a>
 8008648:	e9ca 0100 	strd	r0, r1, [sl]
 800864c:	4646      	mov	r6, r8
 800864e:	464f      	mov	r7, r9
 8008650:	e9da 8900 	ldrd	r8, r9, [sl]
 8008654:	4630      	mov	r0, r6
 8008656:	4642      	mov	r2, r8
 8008658:	464b      	mov	r3, r9
 800865a:	4639      	mov	r1, r7
 800865c:	f7f7 fdcc 	bl	80001f8 <__aeabi_dsub>
 8008660:	462b      	mov	r3, r5
 8008662:	4622      	mov	r2, r4
 8008664:	f7f7 fdc8 	bl	80001f8 <__aeabi_dsub>
 8008668:	9b02      	ldr	r3, [sp, #8]
 800866a:	2b00      	cmp	r3, #0
 800866c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008670:	f6bf af0a 	bge.w	8008488 <__ieee754_rem_pio2+0x80>
 8008674:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008678:	f8ca 3004 	str.w	r3, [sl, #4]
 800867c:	f8ca 8000 	str.w	r8, [sl]
 8008680:	f8ca 0008 	str.w	r0, [sl, #8]
 8008684:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008688:	f8ca 300c 	str.w	r3, [sl, #12]
 800868c:	f1cb 0b00 	rsb	fp, fp, #0
 8008690:	e6fa      	b.n	8008488 <__ieee754_rem_pio2+0x80>
 8008692:	a327      	add	r3, pc, #156	; (adr r3, 8008730 <__ieee754_rem_pio2+0x328>)
 8008694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008698:	ec51 0b18 	vmov	r0, r1, d8
 800869c:	f7f7 ff64 	bl	8000568 <__aeabi_dmul>
 80086a0:	4604      	mov	r4, r0
 80086a2:	460d      	mov	r5, r1
 80086a4:	4602      	mov	r2, r0
 80086a6:	460b      	mov	r3, r1
 80086a8:	4640      	mov	r0, r8
 80086aa:	4649      	mov	r1, r9
 80086ac:	f7f7 fda4 	bl	80001f8 <__aeabi_dsub>
 80086b0:	4602      	mov	r2, r0
 80086b2:	460b      	mov	r3, r1
 80086b4:	4606      	mov	r6, r0
 80086b6:	460f      	mov	r7, r1
 80086b8:	4640      	mov	r0, r8
 80086ba:	4649      	mov	r1, r9
 80086bc:	f7f7 fd9c 	bl	80001f8 <__aeabi_dsub>
 80086c0:	4622      	mov	r2, r4
 80086c2:	462b      	mov	r3, r5
 80086c4:	f7f7 fd98 	bl	80001f8 <__aeabi_dsub>
 80086c8:	a31b      	add	r3, pc, #108	; (adr r3, 8008738 <__ieee754_rem_pio2+0x330>)
 80086ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ce:	4604      	mov	r4, r0
 80086d0:	460d      	mov	r5, r1
 80086d2:	ec51 0b18 	vmov	r0, r1, d8
 80086d6:	f7f7 ff47 	bl	8000568 <__aeabi_dmul>
 80086da:	4622      	mov	r2, r4
 80086dc:	462b      	mov	r3, r5
 80086de:	f7f7 fd8b 	bl	80001f8 <__aeabi_dsub>
 80086e2:	4604      	mov	r4, r0
 80086e4:	460d      	mov	r5, r1
 80086e6:	e75f      	b.n	80085a8 <__ieee754_rem_pio2+0x1a0>
 80086e8:	4b1b      	ldr	r3, [pc, #108]	; (8008758 <__ieee754_rem_pio2+0x350>)
 80086ea:	4598      	cmp	r8, r3
 80086ec:	dd36      	ble.n	800875c <__ieee754_rem_pio2+0x354>
 80086ee:	ee10 2a10 	vmov	r2, s0
 80086f2:	462b      	mov	r3, r5
 80086f4:	4620      	mov	r0, r4
 80086f6:	4629      	mov	r1, r5
 80086f8:	f7f7 fd7e 	bl	80001f8 <__aeabi_dsub>
 80086fc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008700:	e9ca 0100 	strd	r0, r1, [sl]
 8008704:	e694      	b.n	8008430 <__ieee754_rem_pio2+0x28>
 8008706:	bf00      	nop
 8008708:	54400000 	.word	0x54400000
 800870c:	3ff921fb 	.word	0x3ff921fb
 8008710:	1a626331 	.word	0x1a626331
 8008714:	3dd0b461 	.word	0x3dd0b461
 8008718:	1a600000 	.word	0x1a600000
 800871c:	3dd0b461 	.word	0x3dd0b461
 8008720:	2e037073 	.word	0x2e037073
 8008724:	3ba3198a 	.word	0x3ba3198a
 8008728:	6dc9c883 	.word	0x6dc9c883
 800872c:	3fe45f30 	.word	0x3fe45f30
 8008730:	2e000000 	.word	0x2e000000
 8008734:	3ba3198a 	.word	0x3ba3198a
 8008738:	252049c1 	.word	0x252049c1
 800873c:	397b839a 	.word	0x397b839a
 8008740:	3fe921fb 	.word	0x3fe921fb
 8008744:	4002d97b 	.word	0x4002d97b
 8008748:	3ff921fb 	.word	0x3ff921fb
 800874c:	413921fb 	.word	0x413921fb
 8008750:	3fe00000 	.word	0x3fe00000
 8008754:	08009410 	.word	0x08009410
 8008758:	7fefffff 	.word	0x7fefffff
 800875c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008760:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8008764:	ee10 0a10 	vmov	r0, s0
 8008768:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800876c:	ee10 6a10 	vmov	r6, s0
 8008770:	460f      	mov	r7, r1
 8008772:	f7f8 f993 	bl	8000a9c <__aeabi_d2iz>
 8008776:	f7f7 fe8d 	bl	8000494 <__aeabi_i2d>
 800877a:	4602      	mov	r2, r0
 800877c:	460b      	mov	r3, r1
 800877e:	4630      	mov	r0, r6
 8008780:	4639      	mov	r1, r7
 8008782:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008786:	f7f7 fd37 	bl	80001f8 <__aeabi_dsub>
 800878a:	4b22      	ldr	r3, [pc, #136]	; (8008814 <__ieee754_rem_pio2+0x40c>)
 800878c:	2200      	movs	r2, #0
 800878e:	f7f7 feeb 	bl	8000568 <__aeabi_dmul>
 8008792:	460f      	mov	r7, r1
 8008794:	4606      	mov	r6, r0
 8008796:	f7f8 f981 	bl	8000a9c <__aeabi_d2iz>
 800879a:	f7f7 fe7b 	bl	8000494 <__aeabi_i2d>
 800879e:	4602      	mov	r2, r0
 80087a0:	460b      	mov	r3, r1
 80087a2:	4630      	mov	r0, r6
 80087a4:	4639      	mov	r1, r7
 80087a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80087aa:	f7f7 fd25 	bl	80001f8 <__aeabi_dsub>
 80087ae:	4b19      	ldr	r3, [pc, #100]	; (8008814 <__ieee754_rem_pio2+0x40c>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	f7f7 fed9 	bl	8000568 <__aeabi_dmul>
 80087b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80087ba:	ad04      	add	r5, sp, #16
 80087bc:	f04f 0803 	mov.w	r8, #3
 80087c0:	46a9      	mov	r9, r5
 80087c2:	2600      	movs	r6, #0
 80087c4:	2700      	movs	r7, #0
 80087c6:	4632      	mov	r2, r6
 80087c8:	463b      	mov	r3, r7
 80087ca:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80087ce:	46c3      	mov	fp, r8
 80087d0:	3d08      	subs	r5, #8
 80087d2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80087d6:	f7f8 f92f 	bl	8000a38 <__aeabi_dcmpeq>
 80087da:	2800      	cmp	r0, #0
 80087dc:	d1f3      	bne.n	80087c6 <__ieee754_rem_pio2+0x3be>
 80087de:	4b0e      	ldr	r3, [pc, #56]	; (8008818 <__ieee754_rem_pio2+0x410>)
 80087e0:	9301      	str	r3, [sp, #4]
 80087e2:	2302      	movs	r3, #2
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	4622      	mov	r2, r4
 80087e8:	465b      	mov	r3, fp
 80087ea:	4651      	mov	r1, sl
 80087ec:	4648      	mov	r0, r9
 80087ee:	f000 f8df 	bl	80089b0 <__kernel_rem_pio2>
 80087f2:	9b02      	ldr	r3, [sp, #8]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	4683      	mov	fp, r0
 80087f8:	f6bf ae46 	bge.w	8008488 <__ieee754_rem_pio2+0x80>
 80087fc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8008800:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008804:	f8ca 3004 	str.w	r3, [sl, #4]
 8008808:	f8da 300c 	ldr.w	r3, [sl, #12]
 800880c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008810:	e73a      	b.n	8008688 <__ieee754_rem_pio2+0x280>
 8008812:	bf00      	nop
 8008814:	41700000 	.word	0x41700000
 8008818:	08009490 	.word	0x08009490
 800881c:	00000000 	.word	0x00000000

08008820 <__kernel_cos>:
 8008820:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008824:	ec57 6b10 	vmov	r6, r7, d0
 8008828:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800882c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008830:	ed8d 1b00 	vstr	d1, [sp]
 8008834:	da07      	bge.n	8008846 <__kernel_cos+0x26>
 8008836:	ee10 0a10 	vmov	r0, s0
 800883a:	4639      	mov	r1, r7
 800883c:	f7f8 f92e 	bl	8000a9c <__aeabi_d2iz>
 8008840:	2800      	cmp	r0, #0
 8008842:	f000 8088 	beq.w	8008956 <__kernel_cos+0x136>
 8008846:	4632      	mov	r2, r6
 8008848:	463b      	mov	r3, r7
 800884a:	4630      	mov	r0, r6
 800884c:	4639      	mov	r1, r7
 800884e:	f7f7 fe8b 	bl	8000568 <__aeabi_dmul>
 8008852:	4b51      	ldr	r3, [pc, #324]	; (8008998 <__kernel_cos+0x178>)
 8008854:	2200      	movs	r2, #0
 8008856:	4604      	mov	r4, r0
 8008858:	460d      	mov	r5, r1
 800885a:	f7f7 fe85 	bl	8000568 <__aeabi_dmul>
 800885e:	a340      	add	r3, pc, #256	; (adr r3, 8008960 <__kernel_cos+0x140>)
 8008860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008864:	4682      	mov	sl, r0
 8008866:	468b      	mov	fp, r1
 8008868:	4620      	mov	r0, r4
 800886a:	4629      	mov	r1, r5
 800886c:	f7f7 fe7c 	bl	8000568 <__aeabi_dmul>
 8008870:	a33d      	add	r3, pc, #244	; (adr r3, 8008968 <__kernel_cos+0x148>)
 8008872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008876:	f7f7 fcc1 	bl	80001fc <__adddf3>
 800887a:	4622      	mov	r2, r4
 800887c:	462b      	mov	r3, r5
 800887e:	f7f7 fe73 	bl	8000568 <__aeabi_dmul>
 8008882:	a33b      	add	r3, pc, #236	; (adr r3, 8008970 <__kernel_cos+0x150>)
 8008884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008888:	f7f7 fcb6 	bl	80001f8 <__aeabi_dsub>
 800888c:	4622      	mov	r2, r4
 800888e:	462b      	mov	r3, r5
 8008890:	f7f7 fe6a 	bl	8000568 <__aeabi_dmul>
 8008894:	a338      	add	r3, pc, #224	; (adr r3, 8008978 <__kernel_cos+0x158>)
 8008896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889a:	f7f7 fcaf 	bl	80001fc <__adddf3>
 800889e:	4622      	mov	r2, r4
 80088a0:	462b      	mov	r3, r5
 80088a2:	f7f7 fe61 	bl	8000568 <__aeabi_dmul>
 80088a6:	a336      	add	r3, pc, #216	; (adr r3, 8008980 <__kernel_cos+0x160>)
 80088a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ac:	f7f7 fca4 	bl	80001f8 <__aeabi_dsub>
 80088b0:	4622      	mov	r2, r4
 80088b2:	462b      	mov	r3, r5
 80088b4:	f7f7 fe58 	bl	8000568 <__aeabi_dmul>
 80088b8:	a333      	add	r3, pc, #204	; (adr r3, 8008988 <__kernel_cos+0x168>)
 80088ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088be:	f7f7 fc9d 	bl	80001fc <__adddf3>
 80088c2:	4622      	mov	r2, r4
 80088c4:	462b      	mov	r3, r5
 80088c6:	f7f7 fe4f 	bl	8000568 <__aeabi_dmul>
 80088ca:	4622      	mov	r2, r4
 80088cc:	462b      	mov	r3, r5
 80088ce:	f7f7 fe4b 	bl	8000568 <__aeabi_dmul>
 80088d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088d6:	4604      	mov	r4, r0
 80088d8:	460d      	mov	r5, r1
 80088da:	4630      	mov	r0, r6
 80088dc:	4639      	mov	r1, r7
 80088de:	f7f7 fe43 	bl	8000568 <__aeabi_dmul>
 80088e2:	460b      	mov	r3, r1
 80088e4:	4602      	mov	r2, r0
 80088e6:	4629      	mov	r1, r5
 80088e8:	4620      	mov	r0, r4
 80088ea:	f7f7 fc85 	bl	80001f8 <__aeabi_dsub>
 80088ee:	4b2b      	ldr	r3, [pc, #172]	; (800899c <__kernel_cos+0x17c>)
 80088f0:	4598      	cmp	r8, r3
 80088f2:	4606      	mov	r6, r0
 80088f4:	460f      	mov	r7, r1
 80088f6:	dc10      	bgt.n	800891a <__kernel_cos+0xfa>
 80088f8:	4602      	mov	r2, r0
 80088fa:	460b      	mov	r3, r1
 80088fc:	4650      	mov	r0, sl
 80088fe:	4659      	mov	r1, fp
 8008900:	f7f7 fc7a 	bl	80001f8 <__aeabi_dsub>
 8008904:	460b      	mov	r3, r1
 8008906:	4926      	ldr	r1, [pc, #152]	; (80089a0 <__kernel_cos+0x180>)
 8008908:	4602      	mov	r2, r0
 800890a:	2000      	movs	r0, #0
 800890c:	f7f7 fc74 	bl	80001f8 <__aeabi_dsub>
 8008910:	ec41 0b10 	vmov	d0, r0, r1
 8008914:	b003      	add	sp, #12
 8008916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800891a:	4b22      	ldr	r3, [pc, #136]	; (80089a4 <__kernel_cos+0x184>)
 800891c:	4920      	ldr	r1, [pc, #128]	; (80089a0 <__kernel_cos+0x180>)
 800891e:	4598      	cmp	r8, r3
 8008920:	bfcc      	ite	gt
 8008922:	4d21      	ldrgt	r5, [pc, #132]	; (80089a8 <__kernel_cos+0x188>)
 8008924:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008928:	2400      	movs	r4, #0
 800892a:	4622      	mov	r2, r4
 800892c:	462b      	mov	r3, r5
 800892e:	2000      	movs	r0, #0
 8008930:	f7f7 fc62 	bl	80001f8 <__aeabi_dsub>
 8008934:	4622      	mov	r2, r4
 8008936:	4680      	mov	r8, r0
 8008938:	4689      	mov	r9, r1
 800893a:	462b      	mov	r3, r5
 800893c:	4650      	mov	r0, sl
 800893e:	4659      	mov	r1, fp
 8008940:	f7f7 fc5a 	bl	80001f8 <__aeabi_dsub>
 8008944:	4632      	mov	r2, r6
 8008946:	463b      	mov	r3, r7
 8008948:	f7f7 fc56 	bl	80001f8 <__aeabi_dsub>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	4640      	mov	r0, r8
 8008952:	4649      	mov	r1, r9
 8008954:	e7da      	b.n	800890c <__kernel_cos+0xec>
 8008956:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008990 <__kernel_cos+0x170>
 800895a:	e7db      	b.n	8008914 <__kernel_cos+0xf4>
 800895c:	f3af 8000 	nop.w
 8008960:	be8838d4 	.word	0xbe8838d4
 8008964:	bda8fae9 	.word	0xbda8fae9
 8008968:	bdb4b1c4 	.word	0xbdb4b1c4
 800896c:	3e21ee9e 	.word	0x3e21ee9e
 8008970:	809c52ad 	.word	0x809c52ad
 8008974:	3e927e4f 	.word	0x3e927e4f
 8008978:	19cb1590 	.word	0x19cb1590
 800897c:	3efa01a0 	.word	0x3efa01a0
 8008980:	16c15177 	.word	0x16c15177
 8008984:	3f56c16c 	.word	0x3f56c16c
 8008988:	5555554c 	.word	0x5555554c
 800898c:	3fa55555 	.word	0x3fa55555
 8008990:	00000000 	.word	0x00000000
 8008994:	3ff00000 	.word	0x3ff00000
 8008998:	3fe00000 	.word	0x3fe00000
 800899c:	3fd33332 	.word	0x3fd33332
 80089a0:	3ff00000 	.word	0x3ff00000
 80089a4:	3fe90000 	.word	0x3fe90000
 80089a8:	3fd20000 	.word	0x3fd20000
 80089ac:	00000000 	.word	0x00000000

080089b0 <__kernel_rem_pio2>:
 80089b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b4:	ed2d 8b02 	vpush	{d8}
 80089b8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80089bc:	f112 0f14 	cmn.w	r2, #20
 80089c0:	9308      	str	r3, [sp, #32]
 80089c2:	9101      	str	r1, [sp, #4]
 80089c4:	4bc6      	ldr	r3, [pc, #792]	; (8008ce0 <__kernel_rem_pio2+0x330>)
 80089c6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80089c8:	9009      	str	r0, [sp, #36]	; 0x24
 80089ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80089ce:	9304      	str	r3, [sp, #16]
 80089d0:	9b08      	ldr	r3, [sp, #32]
 80089d2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80089d6:	bfa8      	it	ge
 80089d8:	1ed4      	subge	r4, r2, #3
 80089da:	9306      	str	r3, [sp, #24]
 80089dc:	bfb2      	itee	lt
 80089de:	2400      	movlt	r4, #0
 80089e0:	2318      	movge	r3, #24
 80089e2:	fb94 f4f3 	sdivge	r4, r4, r3
 80089e6:	f06f 0317 	mvn.w	r3, #23
 80089ea:	fb04 3303 	mla	r3, r4, r3, r3
 80089ee:	eb03 0a02 	add.w	sl, r3, r2
 80089f2:	9b04      	ldr	r3, [sp, #16]
 80089f4:	9a06      	ldr	r2, [sp, #24]
 80089f6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8008cd0 <__kernel_rem_pio2+0x320>
 80089fa:	eb03 0802 	add.w	r8, r3, r2
 80089fe:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008a00:	1aa7      	subs	r7, r4, r2
 8008a02:	ae20      	add	r6, sp, #128	; 0x80
 8008a04:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008a08:	2500      	movs	r5, #0
 8008a0a:	4545      	cmp	r5, r8
 8008a0c:	dd18      	ble.n	8008a40 <__kernel_rem_pio2+0x90>
 8008a0e:	9b08      	ldr	r3, [sp, #32]
 8008a10:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008a14:	aa20      	add	r2, sp, #128	; 0x80
 8008a16:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8008cd0 <__kernel_rem_pio2+0x320>
 8008a1a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008a1e:	f1c3 0301 	rsb	r3, r3, #1
 8008a22:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008a26:	9307      	str	r3, [sp, #28]
 8008a28:	9b07      	ldr	r3, [sp, #28]
 8008a2a:	9a04      	ldr	r2, [sp, #16]
 8008a2c:	4443      	add	r3, r8
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	db2f      	blt.n	8008a92 <__kernel_rem_pio2+0xe2>
 8008a32:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008a36:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008a3a:	462f      	mov	r7, r5
 8008a3c:	2600      	movs	r6, #0
 8008a3e:	e01b      	b.n	8008a78 <__kernel_rem_pio2+0xc8>
 8008a40:	42ef      	cmn	r7, r5
 8008a42:	d407      	bmi.n	8008a54 <__kernel_rem_pio2+0xa4>
 8008a44:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008a48:	f7f7 fd24 	bl	8000494 <__aeabi_i2d>
 8008a4c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008a50:	3501      	adds	r5, #1
 8008a52:	e7da      	b.n	8008a0a <__kernel_rem_pio2+0x5a>
 8008a54:	ec51 0b18 	vmov	r0, r1, d8
 8008a58:	e7f8      	b.n	8008a4c <__kernel_rem_pio2+0x9c>
 8008a5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a5e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008a62:	f7f7 fd81 	bl	8000568 <__aeabi_dmul>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a6e:	f7f7 fbc5 	bl	80001fc <__adddf3>
 8008a72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a76:	3601      	adds	r6, #1
 8008a78:	9b06      	ldr	r3, [sp, #24]
 8008a7a:	429e      	cmp	r6, r3
 8008a7c:	f1a7 0708 	sub.w	r7, r7, #8
 8008a80:	ddeb      	ble.n	8008a5a <__kernel_rem_pio2+0xaa>
 8008a82:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a86:	3508      	adds	r5, #8
 8008a88:	ecab 7b02 	vstmia	fp!, {d7}
 8008a8c:	f108 0801 	add.w	r8, r8, #1
 8008a90:	e7ca      	b.n	8008a28 <__kernel_rem_pio2+0x78>
 8008a92:	9b04      	ldr	r3, [sp, #16]
 8008a94:	aa0c      	add	r2, sp, #48	; 0x30
 8008a96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008a9c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008a9e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008aa2:	9c04      	ldr	r4, [sp, #16]
 8008aa4:	930a      	str	r3, [sp, #40]	; 0x28
 8008aa6:	ab98      	add	r3, sp, #608	; 0x260
 8008aa8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008aac:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008ab0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8008ab4:	f8cd b008 	str.w	fp, [sp, #8]
 8008ab8:	4625      	mov	r5, r4
 8008aba:	2d00      	cmp	r5, #0
 8008abc:	dc78      	bgt.n	8008bb0 <__kernel_rem_pio2+0x200>
 8008abe:	ec47 6b10 	vmov	d0, r6, r7
 8008ac2:	4650      	mov	r0, sl
 8008ac4:	f000 fbf4 	bl	80092b0 <scalbn>
 8008ac8:	ec57 6b10 	vmov	r6, r7, d0
 8008acc:	2200      	movs	r2, #0
 8008ace:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008ad2:	ee10 0a10 	vmov	r0, s0
 8008ad6:	4639      	mov	r1, r7
 8008ad8:	f7f7 fd46 	bl	8000568 <__aeabi_dmul>
 8008adc:	ec41 0b10 	vmov	d0, r0, r1
 8008ae0:	f000 fb66 	bl	80091b0 <floor>
 8008ae4:	4b7f      	ldr	r3, [pc, #508]	; (8008ce4 <__kernel_rem_pio2+0x334>)
 8008ae6:	ec51 0b10 	vmov	r0, r1, d0
 8008aea:	2200      	movs	r2, #0
 8008aec:	f7f7 fd3c 	bl	8000568 <__aeabi_dmul>
 8008af0:	4602      	mov	r2, r0
 8008af2:	460b      	mov	r3, r1
 8008af4:	4630      	mov	r0, r6
 8008af6:	4639      	mov	r1, r7
 8008af8:	f7f7 fb7e 	bl	80001f8 <__aeabi_dsub>
 8008afc:	460f      	mov	r7, r1
 8008afe:	4606      	mov	r6, r0
 8008b00:	f7f7 ffcc 	bl	8000a9c <__aeabi_d2iz>
 8008b04:	9007      	str	r0, [sp, #28]
 8008b06:	f7f7 fcc5 	bl	8000494 <__aeabi_i2d>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	4630      	mov	r0, r6
 8008b10:	4639      	mov	r1, r7
 8008b12:	f7f7 fb71 	bl	80001f8 <__aeabi_dsub>
 8008b16:	f1ba 0f00 	cmp.w	sl, #0
 8008b1a:	4606      	mov	r6, r0
 8008b1c:	460f      	mov	r7, r1
 8008b1e:	dd70      	ble.n	8008c02 <__kernel_rem_pio2+0x252>
 8008b20:	1e62      	subs	r2, r4, #1
 8008b22:	ab0c      	add	r3, sp, #48	; 0x30
 8008b24:	9d07      	ldr	r5, [sp, #28]
 8008b26:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008b2a:	f1ca 0118 	rsb	r1, sl, #24
 8008b2e:	fa40 f301 	asr.w	r3, r0, r1
 8008b32:	441d      	add	r5, r3
 8008b34:	408b      	lsls	r3, r1
 8008b36:	1ac0      	subs	r0, r0, r3
 8008b38:	ab0c      	add	r3, sp, #48	; 0x30
 8008b3a:	9507      	str	r5, [sp, #28]
 8008b3c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008b40:	f1ca 0317 	rsb	r3, sl, #23
 8008b44:	fa40 f303 	asr.w	r3, r0, r3
 8008b48:	9302      	str	r3, [sp, #8]
 8008b4a:	9b02      	ldr	r3, [sp, #8]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	dd66      	ble.n	8008c1e <__kernel_rem_pio2+0x26e>
 8008b50:	9b07      	ldr	r3, [sp, #28]
 8008b52:	2200      	movs	r2, #0
 8008b54:	3301      	adds	r3, #1
 8008b56:	9307      	str	r3, [sp, #28]
 8008b58:	4615      	mov	r5, r2
 8008b5a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008b5e:	4294      	cmp	r4, r2
 8008b60:	f300 8099 	bgt.w	8008c96 <__kernel_rem_pio2+0x2e6>
 8008b64:	f1ba 0f00 	cmp.w	sl, #0
 8008b68:	dd07      	ble.n	8008b7a <__kernel_rem_pio2+0x1ca>
 8008b6a:	f1ba 0f01 	cmp.w	sl, #1
 8008b6e:	f000 80a5 	beq.w	8008cbc <__kernel_rem_pio2+0x30c>
 8008b72:	f1ba 0f02 	cmp.w	sl, #2
 8008b76:	f000 80c1 	beq.w	8008cfc <__kernel_rem_pio2+0x34c>
 8008b7a:	9b02      	ldr	r3, [sp, #8]
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d14e      	bne.n	8008c1e <__kernel_rem_pio2+0x26e>
 8008b80:	4632      	mov	r2, r6
 8008b82:	463b      	mov	r3, r7
 8008b84:	4958      	ldr	r1, [pc, #352]	; (8008ce8 <__kernel_rem_pio2+0x338>)
 8008b86:	2000      	movs	r0, #0
 8008b88:	f7f7 fb36 	bl	80001f8 <__aeabi_dsub>
 8008b8c:	4606      	mov	r6, r0
 8008b8e:	460f      	mov	r7, r1
 8008b90:	2d00      	cmp	r5, #0
 8008b92:	d044      	beq.n	8008c1e <__kernel_rem_pio2+0x26e>
 8008b94:	4650      	mov	r0, sl
 8008b96:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8008cd8 <__kernel_rem_pio2+0x328>
 8008b9a:	f000 fb89 	bl	80092b0 <scalbn>
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	ec53 2b10 	vmov	r2, r3, d0
 8008ba6:	f7f7 fb27 	bl	80001f8 <__aeabi_dsub>
 8008baa:	4606      	mov	r6, r0
 8008bac:	460f      	mov	r7, r1
 8008bae:	e036      	b.n	8008c1e <__kernel_rem_pio2+0x26e>
 8008bb0:	4b4e      	ldr	r3, [pc, #312]	; (8008cec <__kernel_rem_pio2+0x33c>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	4639      	mov	r1, r7
 8008bb8:	f7f7 fcd6 	bl	8000568 <__aeabi_dmul>
 8008bbc:	f7f7 ff6e 	bl	8000a9c <__aeabi_d2iz>
 8008bc0:	f7f7 fc68 	bl	8000494 <__aeabi_i2d>
 8008bc4:	4b4a      	ldr	r3, [pc, #296]	; (8008cf0 <__kernel_rem_pio2+0x340>)
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	4680      	mov	r8, r0
 8008bca:	4689      	mov	r9, r1
 8008bcc:	f7f7 fccc 	bl	8000568 <__aeabi_dmul>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	4639      	mov	r1, r7
 8008bd8:	f7f7 fb0e 	bl	80001f8 <__aeabi_dsub>
 8008bdc:	f7f7 ff5e 	bl	8000a9c <__aeabi_d2iz>
 8008be0:	9b02      	ldr	r3, [sp, #8]
 8008be2:	f843 0b04 	str.w	r0, [r3], #4
 8008be6:	3d01      	subs	r5, #1
 8008be8:	9302      	str	r3, [sp, #8]
 8008bea:	ab70      	add	r3, sp, #448	; 0x1c0
 8008bec:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf4:	4640      	mov	r0, r8
 8008bf6:	4649      	mov	r1, r9
 8008bf8:	f7f7 fb00 	bl	80001fc <__adddf3>
 8008bfc:	4606      	mov	r6, r0
 8008bfe:	460f      	mov	r7, r1
 8008c00:	e75b      	b.n	8008aba <__kernel_rem_pio2+0x10a>
 8008c02:	d105      	bne.n	8008c10 <__kernel_rem_pio2+0x260>
 8008c04:	1e63      	subs	r3, r4, #1
 8008c06:	aa0c      	add	r2, sp, #48	; 0x30
 8008c08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008c0c:	15c3      	asrs	r3, r0, #23
 8008c0e:	e79b      	b.n	8008b48 <__kernel_rem_pio2+0x198>
 8008c10:	4b38      	ldr	r3, [pc, #224]	; (8008cf4 <__kernel_rem_pio2+0x344>)
 8008c12:	2200      	movs	r2, #0
 8008c14:	f7f7 ff2e 	bl	8000a74 <__aeabi_dcmpge>
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	d139      	bne.n	8008c90 <__kernel_rem_pio2+0x2e0>
 8008c1c:	9002      	str	r0, [sp, #8]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	2300      	movs	r3, #0
 8008c22:	4630      	mov	r0, r6
 8008c24:	4639      	mov	r1, r7
 8008c26:	f7f7 ff07 	bl	8000a38 <__aeabi_dcmpeq>
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	f000 80b4 	beq.w	8008d98 <__kernel_rem_pio2+0x3e8>
 8008c30:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8008c34:	465b      	mov	r3, fp
 8008c36:	2200      	movs	r2, #0
 8008c38:	9904      	ldr	r1, [sp, #16]
 8008c3a:	428b      	cmp	r3, r1
 8008c3c:	da65      	bge.n	8008d0a <__kernel_rem_pio2+0x35a>
 8008c3e:	2a00      	cmp	r2, #0
 8008c40:	d07b      	beq.n	8008d3a <__kernel_rem_pio2+0x38a>
 8008c42:	ab0c      	add	r3, sp, #48	; 0x30
 8008c44:	f1aa 0a18 	sub.w	sl, sl, #24
 8008c48:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f000 80a0 	beq.w	8008d92 <__kernel_rem_pio2+0x3e2>
 8008c52:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8008cd8 <__kernel_rem_pio2+0x328>
 8008c56:	4650      	mov	r0, sl
 8008c58:	f000 fb2a 	bl	80092b0 <scalbn>
 8008c5c:	4f23      	ldr	r7, [pc, #140]	; (8008cec <__kernel_rem_pio2+0x33c>)
 8008c5e:	ec55 4b10 	vmov	r4, r5, d0
 8008c62:	46d8      	mov	r8, fp
 8008c64:	2600      	movs	r6, #0
 8008c66:	f1b8 0f00 	cmp.w	r8, #0
 8008c6a:	f280 80cf 	bge.w	8008e0c <__kernel_rem_pio2+0x45c>
 8008c6e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8008cd0 <__kernel_rem_pio2+0x320>
 8008c72:	465f      	mov	r7, fp
 8008c74:	f04f 0800 	mov.w	r8, #0
 8008c78:	2f00      	cmp	r7, #0
 8008c7a:	f2c0 80fd 	blt.w	8008e78 <__kernel_rem_pio2+0x4c8>
 8008c7e:	ab70      	add	r3, sp, #448	; 0x1c0
 8008c80:	f8df a074 	ldr.w	sl, [pc, #116]	; 8008cf8 <__kernel_rem_pio2+0x348>
 8008c84:	ec55 4b18 	vmov	r4, r5, d8
 8008c88:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8008c8c:	2600      	movs	r6, #0
 8008c8e:	e0e5      	b.n	8008e5c <__kernel_rem_pio2+0x4ac>
 8008c90:	2302      	movs	r3, #2
 8008c92:	9302      	str	r3, [sp, #8]
 8008c94:	e75c      	b.n	8008b50 <__kernel_rem_pio2+0x1a0>
 8008c96:	f8db 3000 	ldr.w	r3, [fp]
 8008c9a:	b955      	cbnz	r5, 8008cb2 <__kernel_rem_pio2+0x302>
 8008c9c:	b123      	cbz	r3, 8008ca8 <__kernel_rem_pio2+0x2f8>
 8008c9e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008ca2:	f8cb 3000 	str.w	r3, [fp]
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	3201      	adds	r2, #1
 8008caa:	f10b 0b04 	add.w	fp, fp, #4
 8008cae:	461d      	mov	r5, r3
 8008cb0:	e755      	b.n	8008b5e <__kernel_rem_pio2+0x1ae>
 8008cb2:	1acb      	subs	r3, r1, r3
 8008cb4:	f8cb 3000 	str.w	r3, [fp]
 8008cb8:	462b      	mov	r3, r5
 8008cba:	e7f5      	b.n	8008ca8 <__kernel_rem_pio2+0x2f8>
 8008cbc:	1e62      	subs	r2, r4, #1
 8008cbe:	ab0c      	add	r3, sp, #48	; 0x30
 8008cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008cc8:	a90c      	add	r1, sp, #48	; 0x30
 8008cca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008cce:	e754      	b.n	8008b7a <__kernel_rem_pio2+0x1ca>
	...
 8008cdc:	3ff00000 	.word	0x3ff00000
 8008ce0:	080095d8 	.word	0x080095d8
 8008ce4:	40200000 	.word	0x40200000
 8008ce8:	3ff00000 	.word	0x3ff00000
 8008cec:	3e700000 	.word	0x3e700000
 8008cf0:	41700000 	.word	0x41700000
 8008cf4:	3fe00000 	.word	0x3fe00000
 8008cf8:	08009598 	.word	0x08009598
 8008cfc:	1e62      	subs	r2, r4, #1
 8008cfe:	ab0c      	add	r3, sp, #48	; 0x30
 8008d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d04:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008d08:	e7de      	b.n	8008cc8 <__kernel_rem_pio2+0x318>
 8008d0a:	a90c      	add	r1, sp, #48	; 0x30
 8008d0c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008d10:	3b01      	subs	r3, #1
 8008d12:	430a      	orrs	r2, r1
 8008d14:	e790      	b.n	8008c38 <__kernel_rem_pio2+0x288>
 8008d16:	3301      	adds	r3, #1
 8008d18:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008d1c:	2900      	cmp	r1, #0
 8008d1e:	d0fa      	beq.n	8008d16 <__kernel_rem_pio2+0x366>
 8008d20:	9a08      	ldr	r2, [sp, #32]
 8008d22:	18e3      	adds	r3, r4, r3
 8008d24:	18a6      	adds	r6, r4, r2
 8008d26:	aa20      	add	r2, sp, #128	; 0x80
 8008d28:	1c65      	adds	r5, r4, #1
 8008d2a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008d2e:	9302      	str	r3, [sp, #8]
 8008d30:	9b02      	ldr	r3, [sp, #8]
 8008d32:	42ab      	cmp	r3, r5
 8008d34:	da04      	bge.n	8008d40 <__kernel_rem_pio2+0x390>
 8008d36:	461c      	mov	r4, r3
 8008d38:	e6b5      	b.n	8008aa6 <__kernel_rem_pio2+0xf6>
 8008d3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e7eb      	b.n	8008d18 <__kernel_rem_pio2+0x368>
 8008d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d46:	f7f7 fba5 	bl	8000494 <__aeabi_i2d>
 8008d4a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d50:	46b3      	mov	fp, r6
 8008d52:	461c      	mov	r4, r3
 8008d54:	2700      	movs	r7, #0
 8008d56:	f04f 0800 	mov.w	r8, #0
 8008d5a:	f04f 0900 	mov.w	r9, #0
 8008d5e:	9b06      	ldr	r3, [sp, #24]
 8008d60:	429f      	cmp	r7, r3
 8008d62:	dd06      	ble.n	8008d72 <__kernel_rem_pio2+0x3c2>
 8008d64:	ab70      	add	r3, sp, #448	; 0x1c0
 8008d66:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008d6a:	e9c3 8900 	strd	r8, r9, [r3]
 8008d6e:	3501      	adds	r5, #1
 8008d70:	e7de      	b.n	8008d30 <__kernel_rem_pio2+0x380>
 8008d72:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008d76:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008d7a:	f7f7 fbf5 	bl	8000568 <__aeabi_dmul>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	460b      	mov	r3, r1
 8008d82:	4640      	mov	r0, r8
 8008d84:	4649      	mov	r1, r9
 8008d86:	f7f7 fa39 	bl	80001fc <__adddf3>
 8008d8a:	3701      	adds	r7, #1
 8008d8c:	4680      	mov	r8, r0
 8008d8e:	4689      	mov	r9, r1
 8008d90:	e7e5      	b.n	8008d5e <__kernel_rem_pio2+0x3ae>
 8008d92:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008d96:	e754      	b.n	8008c42 <__kernel_rem_pio2+0x292>
 8008d98:	ec47 6b10 	vmov	d0, r6, r7
 8008d9c:	f1ca 0000 	rsb	r0, sl, #0
 8008da0:	f000 fa86 	bl	80092b0 <scalbn>
 8008da4:	ec57 6b10 	vmov	r6, r7, d0
 8008da8:	4b9f      	ldr	r3, [pc, #636]	; (8009028 <__kernel_rem_pio2+0x678>)
 8008daa:	ee10 0a10 	vmov	r0, s0
 8008dae:	2200      	movs	r2, #0
 8008db0:	4639      	mov	r1, r7
 8008db2:	f7f7 fe5f 	bl	8000a74 <__aeabi_dcmpge>
 8008db6:	b300      	cbz	r0, 8008dfa <__kernel_rem_pio2+0x44a>
 8008db8:	4b9c      	ldr	r3, [pc, #624]	; (800902c <__kernel_rem_pio2+0x67c>)
 8008dba:	2200      	movs	r2, #0
 8008dbc:	4630      	mov	r0, r6
 8008dbe:	4639      	mov	r1, r7
 8008dc0:	f7f7 fbd2 	bl	8000568 <__aeabi_dmul>
 8008dc4:	f7f7 fe6a 	bl	8000a9c <__aeabi_d2iz>
 8008dc8:	4605      	mov	r5, r0
 8008dca:	f7f7 fb63 	bl	8000494 <__aeabi_i2d>
 8008dce:	4b96      	ldr	r3, [pc, #600]	; (8009028 <__kernel_rem_pio2+0x678>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f7f7 fbc9 	bl	8000568 <__aeabi_dmul>
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	4602      	mov	r2, r0
 8008dda:	4639      	mov	r1, r7
 8008ddc:	4630      	mov	r0, r6
 8008dde:	f7f7 fa0b 	bl	80001f8 <__aeabi_dsub>
 8008de2:	f7f7 fe5b 	bl	8000a9c <__aeabi_d2iz>
 8008de6:	f104 0b01 	add.w	fp, r4, #1
 8008dea:	ab0c      	add	r3, sp, #48	; 0x30
 8008dec:	f10a 0a18 	add.w	sl, sl, #24
 8008df0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008df4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8008df8:	e72b      	b.n	8008c52 <__kernel_rem_pio2+0x2a2>
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	4639      	mov	r1, r7
 8008dfe:	f7f7 fe4d 	bl	8000a9c <__aeabi_d2iz>
 8008e02:	ab0c      	add	r3, sp, #48	; 0x30
 8008e04:	46a3      	mov	fp, r4
 8008e06:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008e0a:	e722      	b.n	8008c52 <__kernel_rem_pio2+0x2a2>
 8008e0c:	ab70      	add	r3, sp, #448	; 0x1c0
 8008e0e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8008e12:	ab0c      	add	r3, sp, #48	; 0x30
 8008e14:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008e18:	f7f7 fb3c 	bl	8000494 <__aeabi_i2d>
 8008e1c:	4622      	mov	r2, r4
 8008e1e:	462b      	mov	r3, r5
 8008e20:	f7f7 fba2 	bl	8000568 <__aeabi_dmul>
 8008e24:	4632      	mov	r2, r6
 8008e26:	e9c9 0100 	strd	r0, r1, [r9]
 8008e2a:	463b      	mov	r3, r7
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	4629      	mov	r1, r5
 8008e30:	f7f7 fb9a 	bl	8000568 <__aeabi_dmul>
 8008e34:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008e38:	4604      	mov	r4, r0
 8008e3a:	460d      	mov	r5, r1
 8008e3c:	e713      	b.n	8008c66 <__kernel_rem_pio2+0x2b6>
 8008e3e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008e42:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008e46:	f7f7 fb8f 	bl	8000568 <__aeabi_dmul>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	4620      	mov	r0, r4
 8008e50:	4629      	mov	r1, r5
 8008e52:	f7f7 f9d3 	bl	80001fc <__adddf3>
 8008e56:	3601      	adds	r6, #1
 8008e58:	4604      	mov	r4, r0
 8008e5a:	460d      	mov	r5, r1
 8008e5c:	9b04      	ldr	r3, [sp, #16]
 8008e5e:	429e      	cmp	r6, r3
 8008e60:	dc01      	bgt.n	8008e66 <__kernel_rem_pio2+0x4b6>
 8008e62:	45b0      	cmp	r8, r6
 8008e64:	daeb      	bge.n	8008e3e <__kernel_rem_pio2+0x48e>
 8008e66:	ab48      	add	r3, sp, #288	; 0x120
 8008e68:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008e6c:	e9c3 4500 	strd	r4, r5, [r3]
 8008e70:	3f01      	subs	r7, #1
 8008e72:	f108 0801 	add.w	r8, r8, #1
 8008e76:	e6ff      	b.n	8008c78 <__kernel_rem_pio2+0x2c8>
 8008e78:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	dc0b      	bgt.n	8008e96 <__kernel_rem_pio2+0x4e6>
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	dc6e      	bgt.n	8008f60 <__kernel_rem_pio2+0x5b0>
 8008e82:	d045      	beq.n	8008f10 <__kernel_rem_pio2+0x560>
 8008e84:	9b07      	ldr	r3, [sp, #28]
 8008e86:	f003 0007 	and.w	r0, r3, #7
 8008e8a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008e8e:	ecbd 8b02 	vpop	{d8}
 8008e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e96:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008e98:	2b03      	cmp	r3, #3
 8008e9a:	d1f3      	bne.n	8008e84 <__kernel_rem_pio2+0x4d4>
 8008e9c:	ab48      	add	r3, sp, #288	; 0x120
 8008e9e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8008ea2:	46d0      	mov	r8, sl
 8008ea4:	46d9      	mov	r9, fp
 8008ea6:	f1b9 0f00 	cmp.w	r9, #0
 8008eaa:	f1a8 0808 	sub.w	r8, r8, #8
 8008eae:	dc64      	bgt.n	8008f7a <__kernel_rem_pio2+0x5ca>
 8008eb0:	465c      	mov	r4, fp
 8008eb2:	2c01      	cmp	r4, #1
 8008eb4:	f1aa 0a08 	sub.w	sl, sl, #8
 8008eb8:	dc7e      	bgt.n	8008fb8 <__kernel_rem_pio2+0x608>
 8008eba:	2000      	movs	r0, #0
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	f1bb 0f01 	cmp.w	fp, #1
 8008ec2:	f300 8097 	bgt.w	8008ff4 <__kernel_rem_pio2+0x644>
 8008ec6:	9b02      	ldr	r3, [sp, #8]
 8008ec8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8008ecc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	f040 8099 	bne.w	8009008 <__kernel_rem_pio2+0x658>
 8008ed6:	9b01      	ldr	r3, [sp, #4]
 8008ed8:	e9c3 5600 	strd	r5, r6, [r3]
 8008edc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008ee0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008ee4:	e7ce      	b.n	8008e84 <__kernel_rem_pio2+0x4d4>
 8008ee6:	ab48      	add	r3, sp, #288	; 0x120
 8008ee8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef0:	f7f7 f984 	bl	80001fc <__adddf3>
 8008ef4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008ef8:	f1bb 0f00 	cmp.w	fp, #0
 8008efc:	daf3      	bge.n	8008ee6 <__kernel_rem_pio2+0x536>
 8008efe:	9b02      	ldr	r3, [sp, #8]
 8008f00:	b113      	cbz	r3, 8008f08 <__kernel_rem_pio2+0x558>
 8008f02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f06:	4619      	mov	r1, r3
 8008f08:	9b01      	ldr	r3, [sp, #4]
 8008f0a:	e9c3 0100 	strd	r0, r1, [r3]
 8008f0e:	e7b9      	b.n	8008e84 <__kernel_rem_pio2+0x4d4>
 8008f10:	2000      	movs	r0, #0
 8008f12:	2100      	movs	r1, #0
 8008f14:	e7f0      	b.n	8008ef8 <__kernel_rem_pio2+0x548>
 8008f16:	ab48      	add	r3, sp, #288	; 0x120
 8008f18:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f20:	f7f7 f96c 	bl	80001fc <__adddf3>
 8008f24:	3c01      	subs	r4, #1
 8008f26:	2c00      	cmp	r4, #0
 8008f28:	daf5      	bge.n	8008f16 <__kernel_rem_pio2+0x566>
 8008f2a:	9b02      	ldr	r3, [sp, #8]
 8008f2c:	b1e3      	cbz	r3, 8008f68 <__kernel_rem_pio2+0x5b8>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f34:	9c01      	ldr	r4, [sp, #4]
 8008f36:	e9c4 2300 	strd	r2, r3, [r4]
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008f42:	f7f7 f959 	bl	80001f8 <__aeabi_dsub>
 8008f46:	ad4a      	add	r5, sp, #296	; 0x128
 8008f48:	2401      	movs	r4, #1
 8008f4a:	45a3      	cmp	fp, r4
 8008f4c:	da0f      	bge.n	8008f6e <__kernel_rem_pio2+0x5be>
 8008f4e:	9b02      	ldr	r3, [sp, #8]
 8008f50:	b113      	cbz	r3, 8008f58 <__kernel_rem_pio2+0x5a8>
 8008f52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f56:	4619      	mov	r1, r3
 8008f58:	9b01      	ldr	r3, [sp, #4]
 8008f5a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008f5e:	e791      	b.n	8008e84 <__kernel_rem_pio2+0x4d4>
 8008f60:	465c      	mov	r4, fp
 8008f62:	2000      	movs	r0, #0
 8008f64:	2100      	movs	r1, #0
 8008f66:	e7de      	b.n	8008f26 <__kernel_rem_pio2+0x576>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	e7e2      	b.n	8008f34 <__kernel_rem_pio2+0x584>
 8008f6e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8008f72:	f7f7 f943 	bl	80001fc <__adddf3>
 8008f76:	3401      	adds	r4, #1
 8008f78:	e7e7      	b.n	8008f4a <__kernel_rem_pio2+0x59a>
 8008f7a:	e9d8 4500 	ldrd	r4, r5, [r8]
 8008f7e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8008f82:	4620      	mov	r0, r4
 8008f84:	4632      	mov	r2, r6
 8008f86:	463b      	mov	r3, r7
 8008f88:	4629      	mov	r1, r5
 8008f8a:	f7f7 f937 	bl	80001fc <__adddf3>
 8008f8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f92:	4602      	mov	r2, r0
 8008f94:	460b      	mov	r3, r1
 8008f96:	4620      	mov	r0, r4
 8008f98:	4629      	mov	r1, r5
 8008f9a:	f7f7 f92d 	bl	80001f8 <__aeabi_dsub>
 8008f9e:	4632      	mov	r2, r6
 8008fa0:	463b      	mov	r3, r7
 8008fa2:	f7f7 f92b 	bl	80001fc <__adddf3>
 8008fa6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008faa:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8008fae:	ed88 7b00 	vstr	d7, [r8]
 8008fb2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008fb6:	e776      	b.n	8008ea6 <__kernel_rem_pio2+0x4f6>
 8008fb8:	e9da 8900 	ldrd	r8, r9, [sl]
 8008fbc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008fc0:	4640      	mov	r0, r8
 8008fc2:	4632      	mov	r2, r6
 8008fc4:	463b      	mov	r3, r7
 8008fc6:	4649      	mov	r1, r9
 8008fc8:	f7f7 f918 	bl	80001fc <__adddf3>
 8008fcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	4640      	mov	r0, r8
 8008fd6:	4649      	mov	r1, r9
 8008fd8:	f7f7 f90e 	bl	80001f8 <__aeabi_dsub>
 8008fdc:	4632      	mov	r2, r6
 8008fde:	463b      	mov	r3, r7
 8008fe0:	f7f7 f90c 	bl	80001fc <__adddf3>
 8008fe4:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008fe8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008fec:	ed8a 7b00 	vstr	d7, [sl]
 8008ff0:	3c01      	subs	r4, #1
 8008ff2:	e75e      	b.n	8008eb2 <__kernel_rem_pio2+0x502>
 8008ff4:	ab48      	add	r3, sp, #288	; 0x120
 8008ff6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffe:	f7f7 f8fd 	bl	80001fc <__adddf3>
 8009002:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009006:	e75a      	b.n	8008ebe <__kernel_rem_pio2+0x50e>
 8009008:	9b01      	ldr	r3, [sp, #4]
 800900a:	9a01      	ldr	r2, [sp, #4]
 800900c:	601d      	str	r5, [r3, #0]
 800900e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009012:	605c      	str	r4, [r3, #4]
 8009014:	609f      	str	r7, [r3, #8]
 8009016:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800901a:	60d3      	str	r3, [r2, #12]
 800901c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009020:	6110      	str	r0, [r2, #16]
 8009022:	6153      	str	r3, [r2, #20]
 8009024:	e72e      	b.n	8008e84 <__kernel_rem_pio2+0x4d4>
 8009026:	bf00      	nop
 8009028:	41700000 	.word	0x41700000
 800902c:	3e700000 	.word	0x3e700000

08009030 <__kernel_sin>:
 8009030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009034:	ed2d 8b04 	vpush	{d8-d9}
 8009038:	eeb0 8a41 	vmov.f32	s16, s2
 800903c:	eef0 8a61 	vmov.f32	s17, s3
 8009040:	ec55 4b10 	vmov	r4, r5, d0
 8009044:	b083      	sub	sp, #12
 8009046:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800904a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800904e:	9001      	str	r0, [sp, #4]
 8009050:	da06      	bge.n	8009060 <__kernel_sin+0x30>
 8009052:	ee10 0a10 	vmov	r0, s0
 8009056:	4629      	mov	r1, r5
 8009058:	f7f7 fd20 	bl	8000a9c <__aeabi_d2iz>
 800905c:	2800      	cmp	r0, #0
 800905e:	d051      	beq.n	8009104 <__kernel_sin+0xd4>
 8009060:	4622      	mov	r2, r4
 8009062:	462b      	mov	r3, r5
 8009064:	4620      	mov	r0, r4
 8009066:	4629      	mov	r1, r5
 8009068:	f7f7 fa7e 	bl	8000568 <__aeabi_dmul>
 800906c:	4682      	mov	sl, r0
 800906e:	468b      	mov	fp, r1
 8009070:	4602      	mov	r2, r0
 8009072:	460b      	mov	r3, r1
 8009074:	4620      	mov	r0, r4
 8009076:	4629      	mov	r1, r5
 8009078:	f7f7 fa76 	bl	8000568 <__aeabi_dmul>
 800907c:	a341      	add	r3, pc, #260	; (adr r3, 8009184 <__kernel_sin+0x154>)
 800907e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009082:	4680      	mov	r8, r0
 8009084:	4689      	mov	r9, r1
 8009086:	4650      	mov	r0, sl
 8009088:	4659      	mov	r1, fp
 800908a:	f7f7 fa6d 	bl	8000568 <__aeabi_dmul>
 800908e:	a33f      	add	r3, pc, #252	; (adr r3, 800918c <__kernel_sin+0x15c>)
 8009090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009094:	f7f7 f8b0 	bl	80001f8 <__aeabi_dsub>
 8009098:	4652      	mov	r2, sl
 800909a:	465b      	mov	r3, fp
 800909c:	f7f7 fa64 	bl	8000568 <__aeabi_dmul>
 80090a0:	a33c      	add	r3, pc, #240	; (adr r3, 8009194 <__kernel_sin+0x164>)
 80090a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a6:	f7f7 f8a9 	bl	80001fc <__adddf3>
 80090aa:	4652      	mov	r2, sl
 80090ac:	465b      	mov	r3, fp
 80090ae:	f7f7 fa5b 	bl	8000568 <__aeabi_dmul>
 80090b2:	a33a      	add	r3, pc, #232	; (adr r3, 800919c <__kernel_sin+0x16c>)
 80090b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b8:	f7f7 f89e 	bl	80001f8 <__aeabi_dsub>
 80090bc:	4652      	mov	r2, sl
 80090be:	465b      	mov	r3, fp
 80090c0:	f7f7 fa52 	bl	8000568 <__aeabi_dmul>
 80090c4:	a337      	add	r3, pc, #220	; (adr r3, 80091a4 <__kernel_sin+0x174>)
 80090c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ca:	f7f7 f897 	bl	80001fc <__adddf3>
 80090ce:	9b01      	ldr	r3, [sp, #4]
 80090d0:	4606      	mov	r6, r0
 80090d2:	460f      	mov	r7, r1
 80090d4:	b9eb      	cbnz	r3, 8009112 <__kernel_sin+0xe2>
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	4650      	mov	r0, sl
 80090dc:	4659      	mov	r1, fp
 80090de:	f7f7 fa43 	bl	8000568 <__aeabi_dmul>
 80090e2:	a325      	add	r3, pc, #148	; (adr r3, 8009178 <__kernel_sin+0x148>)
 80090e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e8:	f7f7 f886 	bl	80001f8 <__aeabi_dsub>
 80090ec:	4642      	mov	r2, r8
 80090ee:	464b      	mov	r3, r9
 80090f0:	f7f7 fa3a 	bl	8000568 <__aeabi_dmul>
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	4620      	mov	r0, r4
 80090fa:	4629      	mov	r1, r5
 80090fc:	f7f7 f87e 	bl	80001fc <__adddf3>
 8009100:	4604      	mov	r4, r0
 8009102:	460d      	mov	r5, r1
 8009104:	ec45 4b10 	vmov	d0, r4, r5
 8009108:	b003      	add	sp, #12
 800910a:	ecbd 8b04 	vpop	{d8-d9}
 800910e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009112:	4b1b      	ldr	r3, [pc, #108]	; (8009180 <__kernel_sin+0x150>)
 8009114:	ec51 0b18 	vmov	r0, r1, d8
 8009118:	2200      	movs	r2, #0
 800911a:	f7f7 fa25 	bl	8000568 <__aeabi_dmul>
 800911e:	4632      	mov	r2, r6
 8009120:	ec41 0b19 	vmov	d9, r0, r1
 8009124:	463b      	mov	r3, r7
 8009126:	4640      	mov	r0, r8
 8009128:	4649      	mov	r1, r9
 800912a:	f7f7 fa1d 	bl	8000568 <__aeabi_dmul>
 800912e:	4602      	mov	r2, r0
 8009130:	460b      	mov	r3, r1
 8009132:	ec51 0b19 	vmov	r0, r1, d9
 8009136:	f7f7 f85f 	bl	80001f8 <__aeabi_dsub>
 800913a:	4652      	mov	r2, sl
 800913c:	465b      	mov	r3, fp
 800913e:	f7f7 fa13 	bl	8000568 <__aeabi_dmul>
 8009142:	ec53 2b18 	vmov	r2, r3, d8
 8009146:	f7f7 f857 	bl	80001f8 <__aeabi_dsub>
 800914a:	a30b      	add	r3, pc, #44	; (adr r3, 8009178 <__kernel_sin+0x148>)
 800914c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009150:	4606      	mov	r6, r0
 8009152:	460f      	mov	r7, r1
 8009154:	4640      	mov	r0, r8
 8009156:	4649      	mov	r1, r9
 8009158:	f7f7 fa06 	bl	8000568 <__aeabi_dmul>
 800915c:	4602      	mov	r2, r0
 800915e:	460b      	mov	r3, r1
 8009160:	4630      	mov	r0, r6
 8009162:	4639      	mov	r1, r7
 8009164:	f7f7 f84a 	bl	80001fc <__adddf3>
 8009168:	4602      	mov	r2, r0
 800916a:	460b      	mov	r3, r1
 800916c:	4620      	mov	r0, r4
 800916e:	4629      	mov	r1, r5
 8009170:	f7f7 f842 	bl	80001f8 <__aeabi_dsub>
 8009174:	e7c4      	b.n	8009100 <__kernel_sin+0xd0>
 8009176:	bf00      	nop
 8009178:	55555549 	.word	0x55555549
 800917c:	3fc55555 	.word	0x3fc55555
 8009180:	3fe00000 	.word	0x3fe00000
 8009184:	5acfd57c 	.word	0x5acfd57c
 8009188:	3de5d93a 	.word	0x3de5d93a
 800918c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009190:	3e5ae5e6 	.word	0x3e5ae5e6
 8009194:	57b1fe7d 	.word	0x57b1fe7d
 8009198:	3ec71de3 	.word	0x3ec71de3
 800919c:	19c161d5 	.word	0x19c161d5
 80091a0:	3f2a01a0 	.word	0x3f2a01a0
 80091a4:	1110f8a6 	.word	0x1110f8a6
 80091a8:	3f811111 	.word	0x3f811111
 80091ac:	00000000 	.word	0x00000000

080091b0 <floor>:
 80091b0:	ec51 0b10 	vmov	r0, r1, d0
 80091b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091b8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80091bc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80091c0:	2e13      	cmp	r6, #19
 80091c2:	ee10 5a10 	vmov	r5, s0
 80091c6:	ee10 8a10 	vmov	r8, s0
 80091ca:	460c      	mov	r4, r1
 80091cc:	dc32      	bgt.n	8009234 <floor+0x84>
 80091ce:	2e00      	cmp	r6, #0
 80091d0:	da14      	bge.n	80091fc <floor+0x4c>
 80091d2:	a333      	add	r3, pc, #204	; (adr r3, 80092a0 <floor+0xf0>)
 80091d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d8:	f7f7 f810 	bl	80001fc <__adddf3>
 80091dc:	2200      	movs	r2, #0
 80091de:	2300      	movs	r3, #0
 80091e0:	f7f7 fc52 	bl	8000a88 <__aeabi_dcmpgt>
 80091e4:	b138      	cbz	r0, 80091f6 <floor+0x46>
 80091e6:	2c00      	cmp	r4, #0
 80091e8:	da57      	bge.n	800929a <floor+0xea>
 80091ea:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80091ee:	431d      	orrs	r5, r3
 80091f0:	d001      	beq.n	80091f6 <floor+0x46>
 80091f2:	4c2d      	ldr	r4, [pc, #180]	; (80092a8 <floor+0xf8>)
 80091f4:	2500      	movs	r5, #0
 80091f6:	4621      	mov	r1, r4
 80091f8:	4628      	mov	r0, r5
 80091fa:	e025      	b.n	8009248 <floor+0x98>
 80091fc:	4f2b      	ldr	r7, [pc, #172]	; (80092ac <floor+0xfc>)
 80091fe:	4137      	asrs	r7, r6
 8009200:	ea01 0307 	and.w	r3, r1, r7
 8009204:	4303      	orrs	r3, r0
 8009206:	d01f      	beq.n	8009248 <floor+0x98>
 8009208:	a325      	add	r3, pc, #148	; (adr r3, 80092a0 <floor+0xf0>)
 800920a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920e:	f7f6 fff5 	bl	80001fc <__adddf3>
 8009212:	2200      	movs	r2, #0
 8009214:	2300      	movs	r3, #0
 8009216:	f7f7 fc37 	bl	8000a88 <__aeabi_dcmpgt>
 800921a:	2800      	cmp	r0, #0
 800921c:	d0eb      	beq.n	80091f6 <floor+0x46>
 800921e:	2c00      	cmp	r4, #0
 8009220:	bfbe      	ittt	lt
 8009222:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009226:	fa43 f606 	asrlt.w	r6, r3, r6
 800922a:	19a4      	addlt	r4, r4, r6
 800922c:	ea24 0407 	bic.w	r4, r4, r7
 8009230:	2500      	movs	r5, #0
 8009232:	e7e0      	b.n	80091f6 <floor+0x46>
 8009234:	2e33      	cmp	r6, #51	; 0x33
 8009236:	dd0b      	ble.n	8009250 <floor+0xa0>
 8009238:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800923c:	d104      	bne.n	8009248 <floor+0x98>
 800923e:	ee10 2a10 	vmov	r2, s0
 8009242:	460b      	mov	r3, r1
 8009244:	f7f6 ffda 	bl	80001fc <__adddf3>
 8009248:	ec41 0b10 	vmov	d0, r0, r1
 800924c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009250:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009258:	fa23 f707 	lsr.w	r7, r3, r7
 800925c:	4207      	tst	r7, r0
 800925e:	d0f3      	beq.n	8009248 <floor+0x98>
 8009260:	a30f      	add	r3, pc, #60	; (adr r3, 80092a0 <floor+0xf0>)
 8009262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009266:	f7f6 ffc9 	bl	80001fc <__adddf3>
 800926a:	2200      	movs	r2, #0
 800926c:	2300      	movs	r3, #0
 800926e:	f7f7 fc0b 	bl	8000a88 <__aeabi_dcmpgt>
 8009272:	2800      	cmp	r0, #0
 8009274:	d0bf      	beq.n	80091f6 <floor+0x46>
 8009276:	2c00      	cmp	r4, #0
 8009278:	da02      	bge.n	8009280 <floor+0xd0>
 800927a:	2e14      	cmp	r6, #20
 800927c:	d103      	bne.n	8009286 <floor+0xd6>
 800927e:	3401      	adds	r4, #1
 8009280:	ea25 0507 	bic.w	r5, r5, r7
 8009284:	e7b7      	b.n	80091f6 <floor+0x46>
 8009286:	2301      	movs	r3, #1
 8009288:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800928c:	fa03 f606 	lsl.w	r6, r3, r6
 8009290:	4435      	add	r5, r6
 8009292:	4545      	cmp	r5, r8
 8009294:	bf38      	it	cc
 8009296:	18e4      	addcc	r4, r4, r3
 8009298:	e7f2      	b.n	8009280 <floor+0xd0>
 800929a:	2500      	movs	r5, #0
 800929c:	462c      	mov	r4, r5
 800929e:	e7aa      	b.n	80091f6 <floor+0x46>
 80092a0:	8800759c 	.word	0x8800759c
 80092a4:	7e37e43c 	.word	0x7e37e43c
 80092a8:	bff00000 	.word	0xbff00000
 80092ac:	000fffff 	.word	0x000fffff

080092b0 <scalbn>:
 80092b0:	b570      	push	{r4, r5, r6, lr}
 80092b2:	ec55 4b10 	vmov	r4, r5, d0
 80092b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80092ba:	4606      	mov	r6, r0
 80092bc:	462b      	mov	r3, r5
 80092be:	b99a      	cbnz	r2, 80092e8 <scalbn+0x38>
 80092c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80092c4:	4323      	orrs	r3, r4
 80092c6:	d036      	beq.n	8009336 <scalbn+0x86>
 80092c8:	4b39      	ldr	r3, [pc, #228]	; (80093b0 <scalbn+0x100>)
 80092ca:	4629      	mov	r1, r5
 80092cc:	ee10 0a10 	vmov	r0, s0
 80092d0:	2200      	movs	r2, #0
 80092d2:	f7f7 f949 	bl	8000568 <__aeabi_dmul>
 80092d6:	4b37      	ldr	r3, [pc, #220]	; (80093b4 <scalbn+0x104>)
 80092d8:	429e      	cmp	r6, r3
 80092da:	4604      	mov	r4, r0
 80092dc:	460d      	mov	r5, r1
 80092de:	da10      	bge.n	8009302 <scalbn+0x52>
 80092e0:	a32b      	add	r3, pc, #172	; (adr r3, 8009390 <scalbn+0xe0>)
 80092e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e6:	e03a      	b.n	800935e <scalbn+0xae>
 80092e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80092ec:	428a      	cmp	r2, r1
 80092ee:	d10c      	bne.n	800930a <scalbn+0x5a>
 80092f0:	ee10 2a10 	vmov	r2, s0
 80092f4:	4620      	mov	r0, r4
 80092f6:	4629      	mov	r1, r5
 80092f8:	f7f6 ff80 	bl	80001fc <__adddf3>
 80092fc:	4604      	mov	r4, r0
 80092fe:	460d      	mov	r5, r1
 8009300:	e019      	b.n	8009336 <scalbn+0x86>
 8009302:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009306:	460b      	mov	r3, r1
 8009308:	3a36      	subs	r2, #54	; 0x36
 800930a:	4432      	add	r2, r6
 800930c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009310:	428a      	cmp	r2, r1
 8009312:	dd08      	ble.n	8009326 <scalbn+0x76>
 8009314:	2d00      	cmp	r5, #0
 8009316:	a120      	add	r1, pc, #128	; (adr r1, 8009398 <scalbn+0xe8>)
 8009318:	e9d1 0100 	ldrd	r0, r1, [r1]
 800931c:	da1c      	bge.n	8009358 <scalbn+0xa8>
 800931e:	a120      	add	r1, pc, #128	; (adr r1, 80093a0 <scalbn+0xf0>)
 8009320:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009324:	e018      	b.n	8009358 <scalbn+0xa8>
 8009326:	2a00      	cmp	r2, #0
 8009328:	dd08      	ble.n	800933c <scalbn+0x8c>
 800932a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800932e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009332:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009336:	ec45 4b10 	vmov	d0, r4, r5
 800933a:	bd70      	pop	{r4, r5, r6, pc}
 800933c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009340:	da19      	bge.n	8009376 <scalbn+0xc6>
 8009342:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009346:	429e      	cmp	r6, r3
 8009348:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800934c:	dd0a      	ble.n	8009364 <scalbn+0xb4>
 800934e:	a112      	add	r1, pc, #72	; (adr r1, 8009398 <scalbn+0xe8>)
 8009350:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d1e2      	bne.n	800931e <scalbn+0x6e>
 8009358:	a30f      	add	r3, pc, #60	; (adr r3, 8009398 <scalbn+0xe8>)
 800935a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935e:	f7f7 f903 	bl	8000568 <__aeabi_dmul>
 8009362:	e7cb      	b.n	80092fc <scalbn+0x4c>
 8009364:	a10a      	add	r1, pc, #40	; (adr r1, 8009390 <scalbn+0xe0>)
 8009366:	e9d1 0100 	ldrd	r0, r1, [r1]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d0b8      	beq.n	80092e0 <scalbn+0x30>
 800936e:	a10e      	add	r1, pc, #56	; (adr r1, 80093a8 <scalbn+0xf8>)
 8009370:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009374:	e7b4      	b.n	80092e0 <scalbn+0x30>
 8009376:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800937a:	3236      	adds	r2, #54	; 0x36
 800937c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009380:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009384:	4620      	mov	r0, r4
 8009386:	4b0c      	ldr	r3, [pc, #48]	; (80093b8 <scalbn+0x108>)
 8009388:	2200      	movs	r2, #0
 800938a:	e7e8      	b.n	800935e <scalbn+0xae>
 800938c:	f3af 8000 	nop.w
 8009390:	c2f8f359 	.word	0xc2f8f359
 8009394:	01a56e1f 	.word	0x01a56e1f
 8009398:	8800759c 	.word	0x8800759c
 800939c:	7e37e43c 	.word	0x7e37e43c
 80093a0:	8800759c 	.word	0x8800759c
 80093a4:	fe37e43c 	.word	0xfe37e43c
 80093a8:	c2f8f359 	.word	0xc2f8f359
 80093ac:	81a56e1f 	.word	0x81a56e1f
 80093b0:	43500000 	.word	0x43500000
 80093b4:	ffff3cb0 	.word	0xffff3cb0
 80093b8:	3c900000 	.word	0x3c900000

080093bc <_init>:
 80093bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093be:	bf00      	nop
 80093c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093c2:	bc08      	pop	{r3}
 80093c4:	469e      	mov	lr, r3
 80093c6:	4770      	bx	lr

080093c8 <_fini>:
 80093c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ca:	bf00      	nop
 80093cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ce:	bc08      	pop	{r3}
 80093d0:	469e      	mov	lr, r3
 80093d2:	4770      	bx	lr
